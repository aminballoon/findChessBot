
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c4c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d04  08010ef0  08010ef0  00020ef0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012bf4  08012bf4  00022bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08012bfc  08012bfc  00022bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08012c04  08012c04  00022c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  24000000  08012c0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b3c  240001f8  08012e04  000301f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000d34  08012e04  00030d34  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037da6  00000000  00000000  00030226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000531a  00000000  00000000  00067fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001638  00000000  00000000  0006d2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014a0  00000000  00000000  0006e920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003de64  00000000  00000000  0006fdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000218d9  00000000  00000000  000adc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d8d6  00000000  00000000  000cf4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0023cdd3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006ca4  00000000  00000000  0023ce28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010ed4 	.word	0x08010ed4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	08010ed4 	.word	0x08010ed4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f103 010a 	add.w	r1, r3, #10
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	f00b fab6 	bl	800bc4c <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 010c 	add.w	r1, r3, #12
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2202      	movs	r2, #2
 80006ee:	f00b fb43 	bl	800bd78 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	0bdb      	lsrs	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	765a      	strb	r2, [r3, #25]
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(this->address), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000734:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d820      	bhi.n	800079c <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	109b      	asrs	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4053      	eors	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b25a      	sxtb	r2, r3
 800078a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800078e:	4053      	eors	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	3301      	adds	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
 800079a:	e7db      	b.n	8000754 <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7e1b      	ldrb	r3, [r3, #24]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d10a      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7e5b      	ldrb	r3, [r3, #25]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d105      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 80007cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e003      	b.n	80007e0 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
	}
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue(){
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	135b      	asrs	r3, r3, #13
			+ (this->raw_value & 0x3FFF)) * -1;
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	0392      	lsls	r2, r2, #14
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800081a:	b29b      	uxth	r3, r3
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	ed87 0a01 	vstr	s0, [r7, #4]
 8000838:	edd7 7a01 	vldr	s15, [r7, #4]
 800083c:	eef0 7ae7 	vabs.f32	s15, s15
 8000840:	eeb0 0a67 	vmov.f32	s0, s15
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	ed87 0a01 	vstr	s0, [r7, #4]
 8000858:	edd7 7a01 	vldr	s15, [r7, #4]
 800085c:	fef8 7a67 	vrinta.f32	s15, s15
 8000860:	eeb0 0a67 	vmov.f32	s0, s15
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8000882:	615a      	str	r2, [r3, #20]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000888:	619a      	str	r2, [r3, #24]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000890:	61da      	str	r2, [r3, #28]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	4a15      	ldr	r2, [pc, #84]	; (80008ec <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8000896:	621a      	str	r2, [r3, #32]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	22c7      	movs	r2, #199	; 0xc7
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 60.0f;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 80008ba:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 80008c0:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 80008c2:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80008f4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f000 f832 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	60da      	str	r2, [r3, #12]
}
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	41a00000 	.word	0x41a00000
 80008e8:	469c4000 	.word	0x469c4000
 80008ec:	43480000 	.word	0x43480000
 80008f0:	42700000 	.word	0x42700000
 80008f4:	00000000 	.word	0x00000000

080008f8 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
}
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	4619      	mov	r1, r3
 8000920:	4610      	mov	r0, r2
 8000922:	f009 ff83 	bl	800a82c <HAL_TIM_PWM_Start>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8000930:	b580      	push	{r7, lr}
 8000932:	ed2d 8b02 	vpush	{d8}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	edd3 7a04 	vldr	s15, [r3, #16]
 800094c:	eeb0 0a67 	vmov.f32	s0, s15
 8000950:	f7ff ff6d 	bl	800082e <_ZSt4fabsf>
 8000954:	eeb0 7a40 	vmov.f32	s14, s0
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	edd3 7a05 	vldr	s15, [r3, #20]
 800095e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	bf94      	ite	ls
 8000968:	2301      	movls	r3, #1
 800096a:	2300      	movhi	r3, #0
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d003      	beq.n	800097a <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e01b      	b.n	80009b2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000980:	eeb0 0a67 	vmov.f32	s0, s15
 8000984:	f7ff ff53 	bl	800082e <_ZSt4fabsf>
 8000988:	eeb0 7a40 	vmov.f32	s14, s0
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099a:	bfac      	ite	ge
 800099c:	2301      	movge	r3, #1
 800099e:	2300      	movlt	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e001      	b.n	80009b2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80009b8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8000c54 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 80009bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c4:	f2c0 80db 	blt.w	8000b7e <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6898      	ldr	r0, [r3, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	2201      	movs	r2, #1
 80009d4:	4619      	mov	r1, r3
 80009d6:	f007 f94f 	bl	8007c78 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e2:	3301      	adds	r3, #1
 80009e4:	ee07 3a90 	vmov	s15, r3
 80009e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80009f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009f4:	eddf 6a98 	vldr	s13, [pc, #608]	; 8000c58 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 80009f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 80009fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a04:	eeb0 0a67 	vmov.f32	s0, s15
 8000a08:	f7ff ff21 	bl	800084e <_ZSt5roundf>
 8000a0c:	eef0 7a40 	vmov.f32	s15, s0
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a1a:	ee17 2a90 	vmov	r2, s15
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d113      	bne.n	8000a50 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000a32:	085b      	lsrs	r3, r3, #1
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fa5b 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a3a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a48:	ee17 2a90 	vmov	r2, s15
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8000a4e:	e1e0      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d113      	bne.n	8000a80 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a60:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000a62:	085b      	lsrs	r3, r3, #1
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fa43 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a6a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a78:	ee17 2a90 	vmov	r2, s15
 8000a7c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a7e:	e1c8      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b08      	cmp	r3, #8
 8000a86:	d113      	bne.n	8000ab0 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a90:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000a92:	085b      	lsrs	r3, r3, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fa2b 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000aa8:	ee17 2a90 	vmov	r2, s15
 8000aac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000aae:	e1b0      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b0c      	cmp	r3, #12
 8000ab6:	d113      	bne.n	8000ae0 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000ac2:	085b      	lsrs	r3, r3, #1
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fa13 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000aca:	eeb0 7b40 	vmov.f64	d7, d0
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ad8:	ee17 2a90 	vmov	r2, s15
 8000adc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ade:	e198      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b10      	cmp	r3, #16
 8000ae6:	d113      	bne.n	8000b10 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000af2:	085b      	lsrs	r3, r3, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f9fb 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000afa:	eeb0 7b40 	vmov.f64	d7, d0
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b08:	ee17 2a90 	vmov	r2, s15
 8000b0c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000b0e:	e180      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b14      	cmp	r3, #20
 8000b16:	d113      	bne.n	8000b40 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b20:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000b22:	085b      	lsrs	r3, r3, #1
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f9e3 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b2a:	eeb0 7b40 	vmov.f64	d7, d0
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b38:	ee17 2a90 	vmov	r2, s15
 8000b3c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b3e:	e168      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2200      	movs	r2, #0
 8000b48:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2200      	movs	r2, #0
 8000b52:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2200      	movs	r2, #0
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b7c:	e149      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b84:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000c5c <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8000b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b90:	f200 80e5 	bhi.w	8000d5e <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6898      	ldr	r0, [r3, #8]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f007 f869 	bl	8007c78 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bae:	3301      	adds	r3, #1
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000bb8:	ed97 0a03 	vldr	s0, [r7, #12]
 8000bbc:	f7ff fe37 	bl	800082e <_ZSt4fabsf>
 8000bc0:	eef0 7a40 	vmov.f32	s15, s0
 8000bc4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000bc8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000c58 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8000bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000bd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	f7ff fe37 	bl	800084e <_ZSt5roundf>
 8000be0:	eef0 7a40 	vmov.f32	s15, s0
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bee:	ee17 2a90 	vmov	r2, s15
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d113      	bne.n	8000c24 <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c04:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000c06:	085b      	lsrs	r3, r3, #1
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f971 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c0e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c1c:	ee17 2a90 	vmov	r2, s15
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c22:	e0f6      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b04      	cmp	r3, #4
 8000c2a:	d119      	bne.n	8000c60 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c34:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000c36:	085b      	lsrs	r3, r3, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f959 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c3e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c4c:	ee17 2a90 	vmov	r2, s15
 8000c50:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000c52:	e0de      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8000c54:	3a83126f 	.word	0x3a83126f
 8000c58:	4d64e1c0 	.word	0x4d64e1c0
 8000c5c:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d113      	bne.n	8000c90 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c70:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000c72:	085b      	lsrs	r3, r3, #1
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f93b 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c7a:	eeb0 7b40 	vmov.f64	d7, d0
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c88:	ee17 2a90 	vmov	r2, s15
 8000c8c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c8e:	e0c0      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b0c      	cmp	r3, #12
 8000c96:	d113      	bne.n	8000cc0 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000ca2:	085b      	lsrs	r3, r3, #1
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f923 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000caa:	eeb0 7b40 	vmov.f64	d7, d0
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cb8:	ee17 2a90 	vmov	r2, s15
 8000cbc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000cbe:	e0a8      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b10      	cmp	r3, #16
 8000cc6:	d113      	bne.n	8000cf0 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 f90b 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000cda:	eeb0 7b40 	vmov.f64	d7, d0
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ce8:	ee17 2a90 	vmov	r2, s15
 8000cec:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000cee:	e090      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b14      	cmp	r3, #20
 8000cf6:	d113      	bne.n	8000d20 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000d02:	085b      	lsrs	r3, r3, #1
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f8f3 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000d0a:	eeb0 7b40 	vmov.f64	d7, d0
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d18:	ee17 2a90 	vmov	r2, s15
 8000d1c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000d1e:	e078      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2200      	movs	r2, #0
 8000d28:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2200      	movs	r2, #0
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2200      	movs	r2, #0
 8000d46:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000d5c:	e059      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d105      	bne.n	8000d72 <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d70:	e04f      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d105      	bne.n	8000d86 <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2200      	movs	r2, #0
 8000d82:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d84:	e045      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d105      	bne.n	8000d9a <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2200      	movs	r2, #0
 8000d96:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d98:	e03b      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b0c      	cmp	r3, #12
 8000da0:	d105      	bne.n	8000dae <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2200      	movs	r2, #0
 8000daa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000dac:	e031      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b10      	cmp	r3, #16
 8000db4:	d105      	bne.n	8000dc2 <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000dc0:	e027      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b14      	cmp	r3, #20
 8000dc8:	d105      	bne.n	8000dd6 <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000dd4:	e01d      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2200      	movs	r2, #0
 8000de8:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2200      	movs	r2, #0
 8000e06:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	ecbd 8b02 	vpop	{d8}
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop

08000e20 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8000e2c:	ed97 0a00 	vldr	s0, [r7]
 8000e30:	f7ff fcfd 	bl	800082e <_ZSt4fabsf>
 8000e34:	eef0 7a40 	vmov.f32	s15, s0
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	ee07 3a90 	vmov	s15, r3
 8000e56:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e5a:	eeb0 0b47 	vmov.f64	d0, d7
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ffe5 	bl	8000e46 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e7c:	eeb0 7b40 	vmov.f64	d7, d0
 8000e80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	0000      	movs	r0, r0
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <_ZN7Stepper20StepperOpenLoopSpeedEf>:
void Stepper::StepperOpenLoopSpeed(float _speed) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	ed93 7a07 	vldr	s14, [r3, #28]
 8000eaa:	edd7 7a00 	vldr	s15, [r7]
 8000eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	edd3 7a08 	vldr	s15, [r3, #32]
 8000ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI)));
 8000eca:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8000ee8 <_ZN7Stepper20StepperOpenLoopSpeedEf+0x50>
 8000ece:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 8000ed2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fd28 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	54442eea 	.word	0x54442eea
 8000eec:	401921fb 	.word	0x401921fb

08000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	ee07 3a90 	vmov	s15, r3
 8000efe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f02:	eeb0 0b47 	vmov.f64	d0, d7
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f14:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f16:	4a14      	ldr	r2, [pc, #80]	; (8000f68 <MX_CRC_Init+0x58>)
 8000f18:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000f20:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f28:	f248 0205 	movw	r2, #32773	; 0x8005
 8000f2c:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f30:	2208      	movs	r2, #8
 8000f32:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f3a:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8000f3c:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f3e:	2220      	movs	r2, #32
 8000f40:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f44:	2280      	movs	r2, #128	; 0x80
 8000f46:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <MX_CRC_Init+0x54>)
 8000f50:	f003 fcaa 	bl	80048a8 <HAL_CRC_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 8000f5a:	f001 fd39 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	24000528 	.word	0x24000528
 8000f68:	58024c00 	.word	0x58024c00

08000f6c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0b      	ldr	r2, [pc, #44]	; (8000fa8 <HAL_CRC_MspInit+0x3c>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d10e      	bne.n	8000f9c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <HAL_CRC_MspInit+0x40>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	4a09      	ldr	r2, [pc, #36]	; (8000fac <HAL_CRC_MspInit+0x40>)
 8000f86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <HAL_CRC_MspInit+0x40>)
 8000f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	58024c00 	.word	0x58024c00
 8000fac:	58024400 	.word	0x58024400

08000fb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	; (800102c <MX_DMA_Init+0x7c>)
 8000fb8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fbc:	4a1b      	ldr	r2, [pc, #108]	; (800102c <MX_DMA_Init+0x7c>)
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <MX_DMA_Init+0x7c>)
 8000fc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	200b      	movs	r0, #11
 8000fda:	f003 fc24 	bl	8004826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fde:	200b      	movs	r0, #11
 8000fe0:	f003 fc3b 	bl	800485a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	200c      	movs	r0, #12
 8000fea:	f003 fc1c 	bl	8004826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fee:	200c      	movs	r0, #12
 8000ff0:	f003 fc33 	bl	800485a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	200d      	movs	r0, #13
 8000ffa:	f003 fc14 	bl	8004826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000ffe:	200d      	movs	r0, #13
 8001000:	f003 fc2b 	bl	800485a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001004:	2200      	movs	r2, #0
 8001006:	2100      	movs	r1, #0
 8001008:	200e      	movs	r0, #14
 800100a:	f003 fc0c 	bl	8004826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800100e:	200e      	movs	r0, #14
 8001010:	f003 fc23 	bl	800485a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2100      	movs	r1, #0
 8001018:	200f      	movs	r0, #15
 800101a:	f003 fc04 	bl	8004826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800101e:	200f      	movs	r0, #15
 8001020:	f003 fc1b 	bl	800485a <HAL_NVIC_EnableIRQ>

}
 8001024:	bf00      	nop
 8001026:	3708      	adds	r7, #8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	58024400 	.word	0x58024400

08001030 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08c      	sub	sp, #48	; 0x30
 8001034:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001046:	4b8e      	ldr	r3, [pc, #568]	; (8001280 <MX_GPIO_Init+0x250>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	4a8c      	ldr	r2, [pc, #560]	; (8001280 <MX_GPIO_Init+0x250>)
 800104e:	f043 0310 	orr.w	r3, r3, #16
 8001052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001056:	4b8a      	ldr	r3, [pc, #552]	; (8001280 <MX_GPIO_Init+0x250>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800105c:	f003 0310 	and.w	r3, r3, #16
 8001060:	61bb      	str	r3, [r7, #24]
 8001062:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001064:	4b86      	ldr	r3, [pc, #536]	; (8001280 <MX_GPIO_Init+0x250>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800106a:	4a85      	ldr	r2, [pc, #532]	; (8001280 <MX_GPIO_Init+0x250>)
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001074:	4b82      	ldr	r3, [pc, #520]	; (8001280 <MX_GPIO_Init+0x250>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001082:	4b7f      	ldr	r3, [pc, #508]	; (8001280 <MX_GPIO_Init+0x250>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	4a7d      	ldr	r2, [pc, #500]	; (8001280 <MX_GPIO_Init+0x250>)
 800108a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001092:	4b7b      	ldr	r3, [pc, #492]	; (8001280 <MX_GPIO_Init+0x250>)
 8001094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a0:	4b77      	ldr	r3, [pc, #476]	; (8001280 <MX_GPIO_Init+0x250>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	4a76      	ldr	r2, [pc, #472]	; (8001280 <MX_GPIO_Init+0x250>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b0:	4b73      	ldr	r3, [pc, #460]	; (8001280 <MX_GPIO_Init+0x250>)
 80010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	4b70      	ldr	r3, [pc, #448]	; (8001280 <MX_GPIO_Init+0x250>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c4:	4a6e      	ldr	r2, [pc, #440]	; (8001280 <MX_GPIO_Init+0x250>)
 80010c6:	f043 0302 	orr.w	r3, r3, #2
 80010ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ce:	4b6c      	ldr	r3, [pc, #432]	; (8001280 <MX_GPIO_Init+0x250>)
 80010d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d4:	f003 0302 	and.w	r3, r3, #2
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010dc:	4b68      	ldr	r3, [pc, #416]	; (8001280 <MX_GPIO_Init+0x250>)
 80010de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e2:	4a67      	ldr	r2, [pc, #412]	; (8001280 <MX_GPIO_Init+0x250>)
 80010e4:	f043 0308 	orr.w	r3, r3, #8
 80010e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ec:	4b64      	ldr	r3, [pc, #400]	; (8001280 <MX_GPIO_Init+0x250>)
 80010ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f2:	f003 0308 	and.w	r3, r3, #8
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010fa:	4b61      	ldr	r3, [pc, #388]	; (8001280 <MX_GPIO_Init+0x250>)
 80010fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001100:	4a5f      	ldr	r2, [pc, #380]	; (8001280 <MX_GPIO_Init+0x250>)
 8001102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001106:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110a:	4b5d      	ldr	r3, [pc, #372]	; (8001280 <MX_GPIO_Init+0x250>)
 800110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001114:	603b      	str	r3, [r7, #0]
 8001116:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001118:	2200      	movs	r2, #0
 800111a:	f644 2121 	movw	r1, #18977	; 0x4a21
 800111e:	4859      	ldr	r0, [pc, #356]	; (8001284 <MX_GPIO_Init+0x254>)
 8001120:	f006 fdaa 	bl	8007c78 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001124:	2200      	movs	r2, #0
 8001126:	f24c 0102 	movw	r1, #49154	; 0xc002
 800112a:	4857      	ldr	r0, [pc, #348]	; (8001288 <MX_GPIO_Init+0x258>)
 800112c:	f006 fda4 	bl	8007c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001130:	2200      	movs	r2, #0
 8001132:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001136:	4855      	ldr	r0, [pc, #340]	; (800128c <MX_GPIO_Init+0x25c>)
 8001138:	f006 fd9e 	bl	8007c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001142:	4853      	ldr	r0, [pc, #332]	; (8001290 <MX_GPIO_Init+0x260>)
 8001144:	f006 fd98 	bl	8007c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800114e:	4851      	ldr	r0, [pc, #324]	; (8001294 <MX_GPIO_Init+0x264>)
 8001150:	f006 fd92 	bl	8007c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 8001154:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001158:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800115a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800115e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 8001164:	f107 031c 	add.w	r3, r7, #28
 8001168:	4619      	mov	r1, r3
 800116a:	4849      	ldr	r0, [pc, #292]	; (8001290 <MX_GPIO_Init+0x260>)
 800116c:	f006 fbd4 	bl	8007918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001170:	f644 2321 	movw	r3, #18977	; 0x4a21
 8001174:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	2301      	movs	r3, #1
 8001178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	4619      	mov	r1, r3
 8001188:	483e      	ldr	r0, [pc, #248]	; (8001284 <MX_GPIO_Init+0x254>)
 800118a:	f006 fbc5 	bl	8007918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 800118e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001194:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	4619      	mov	r1, r3
 80011a4:	4838      	ldr	r0, [pc, #224]	; (8001288 <MX_GPIO_Init+0x258>)
 80011a6:	f006 fbb7 	bl	8007918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 80011aa:	f24c 0302 	movw	r3, #49154	; 0xc002
 80011ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011bc:	f107 031c 	add.w	r3, r7, #28
 80011c0:	4619      	mov	r1, r3
 80011c2:	4831      	ldr	r0, [pc, #196]	; (8001288 <MX_GPIO_Init+0x258>)
 80011c4:	f006 fba8 	bl	8007918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80011c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	482a      	ldr	r0, [pc, #168]	; (800128c <MX_GPIO_Init+0x25c>)
 80011e2:	f006 fb99 	bl	8007918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 80011e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 031c 	add.w	r3, r7, #28
 80011fc:	4619      	mov	r1, r3
 80011fe:	4824      	ldr	r0, [pc, #144]	; (8001290 <MX_GPIO_Init+0x260>)
 8001200:	f006 fb8a 	bl	8007918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8001204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800120a:	2301      	movs	r3, #1
 800120c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8001216:	f107 031c 	add.w	r3, r7, #28
 800121a:	4619      	mov	r1, r3
 800121c:	481d      	ldr	r0, [pc, #116]	; (8001294 <MX_GPIO_Init+0x264>)
 800121e:	f006 fb7b 	bl	8007918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001222:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001228:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800122c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	4619      	mov	r1, r3
 8001238:	4817      	ldr	r0, [pc, #92]	; (8001298 <MX_GPIO_Init+0x268>)
 800123a:	f006 fb6d 	bl	8007918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 800123e:	23c0      	movs	r3, #192	; 0xc0
 8001240:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001242:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001246:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	f107 031c 	add.w	r3, r7, #28
 8001250:	4619      	mov	r1, r3
 8001252:	480c      	ldr	r0, [pc, #48]	; (8001284 <MX_GPIO_Init+0x254>)
 8001254:	f006 fb60 	bl	8007918 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	2017      	movs	r0, #23
 800125e:	f003 fae2 	bl	8004826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001262:	2017      	movs	r0, #23
 8001264:	f003 faf9 	bl	800485a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2028      	movs	r0, #40	; 0x28
 800126e:	f003 fada 	bl	8004826 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001272:	2028      	movs	r0, #40	; 0x28
 8001274:	f003 faf1 	bl	800485a <HAL_NVIC_EnableIRQ>

}
 8001278:	bf00      	nop
 800127a:	3730      	adds	r7, #48	; 0x30
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	58024400 	.word	0x58024400
 8001284:	58020400 	.word	0x58020400
 8001288:	58021000 	.word	0x58021000
 800128c:	58020c00 	.word	0x58020c00
 8001290:	58020800 	.word	0x58020800
 8001294:	58020000 	.word	0x58020000
 8001298:	58021800 	.word	0x58021800

0800129c <HAL_UARTEx_RxEventCallback>:
#define Rx_BUFFER_SIZE   20
uint8_t Old_Rx_Buffer[Rx_BUFFER_SIZE] = {0};
uint8_t New_Rx_Buffer[Rx_BUFFER_SIZE] = {0};
volatile uint16_t cmdDataSize = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4a99      	ldr	r2, [pc, #612]	; (8001510 <HAL_UARTEx_RxEventCallback+0x274>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	f040 8216 	bne.w	80016de <HAL_UARTEx_RxEventCallback+0x442>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 80012b2:	4a98      	ldr	r2, [pc, #608]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80012b4:	4b98      	ldr	r3, [pc, #608]	; (8001518 <HAL_UARTEx_RxEventCallback+0x27c>)
 80012b6:	4614      	mov	r4, r2
 80012b8:	461d      	mov	r5, r3
 80012ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012be:	682b      	ldr	r3, [r5, #0]
 80012c0:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 80012c2:	2214      	movs	r2, #20
 80012c4:	2100      	movs	r1, #0
 80012c6:	4894      	ldr	r0, [pc, #592]	; (8001518 <HAL_UARTEx_RxEventCallback+0x27c>)
 80012c8:	f00d f9ca 	bl	800e660 <memset>
		if(Size - 2 > 0 && Size <= Rx_BUFFER_SIZE){	// Check if there's some data.
 80012cc:	887b      	ldrh	r3, [r7, #2]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	f240 818c 	bls.w	80015ec <HAL_UARTEx_RxEventCallback+0x350>
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	2b14      	cmp	r3, #20
 80012d8:	f200 8188 	bhi.w	80015ec <HAL_UARTEx_RxEventCallback+0x350>
			cmdDataSize = Size - 2;	// Calculate data length.
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	3b02      	subs	r3, #2
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	4b8e      	ldr	r3, [pc, #568]	; (800151c <HAL_UARTEx_RxEventCallback+0x280>)
 80012e4:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)Old_Rx_Buffer, cmdDataSize); // Calculate data only by STM32 Hardware CRC.
 80012e6:	4b8d      	ldr	r3, [pc, #564]	; (800151c <HAL_UARTEx_RxEventCallback+0x280>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	4989      	ldr	r1, [pc, #548]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80012f0:	488b      	ldr	r0, [pc, #556]	; (8001520 <HAL_UARTEx_RxEventCallback+0x284>)
 80012f2:	f003 fb3d 	bl	8004970 <HAL_CRC_Calculate>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	4b8a      	ldr	r3, [pc, #552]	; (8001524 <HAL_UARTEx_RxEventCallback+0x288>)
 80012fc:	801a      	strh	r2, [r3, #0]
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8 | Old_Rx_Buffer[cmdDataSize+1]; // Read Expected CRC from Protocol.
 80012fe:	4b87      	ldr	r3, [pc, #540]	; (800151c <HAL_UARTEx_RxEventCallback+0x280>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	4b83      	ldr	r3, [pc, #524]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 8001308:	5c9b      	ldrb	r3, [r3, r2]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b83      	ldr	r3, [pc, #524]	; (800151c <HAL_UARTEx_RxEventCallback+0x280>)
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	b29b      	uxth	r3, r3
 8001314:	3301      	adds	r3, #1
 8001316:	497f      	ldr	r1, [pc, #508]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 8001318:	5ccb      	ldrb	r3, [r1, r3]
 800131a:	b21b      	sxth	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b21b      	sxth	r3, r3
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b81      	ldr	r3, [pc, #516]	; (8001528 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001324:	801a      	strh	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001326:	4b7f      	ldr	r3, [pc, #508]	; (8001524 <HAL_UARTEx_RxEventCallback+0x288>)
 8001328:	881b      	ldrh	r3, [r3, #0]
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b7e      	ldr	r3, [pc, #504]	; (8001528 <HAL_UARTEx_RxEventCallback+0x28c>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	b29b      	uxth	r3, r3
 8001332:	429a      	cmp	r2, r3
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 8144 	beq.w	80015ca <HAL_UARTEx_RxEventCallback+0x32e>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001342:	2201      	movs	r2, #1
 8001344:	2102      	movs	r1, #2
 8001346:	4879      	ldr	r0, [pc, #484]	; (800152c <HAL_UARTEx_RxEventCallback+0x290>)
 8001348:	f006 fc96 	bl	8007c78 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001352:	4877      	ldr	r0, [pc, #476]	; (8001530 <HAL_UARTEx_RxEventCallback+0x294>)
 8001354:	f006 fc90 	bl	8007c78 <HAL_GPIO_WritePin>
				if(Old_Rx_Buffer[0] == 0x41 && cmdDataSize == 3){	// Joint Jog q1
 8001358:	4b6e      	ldr	r3, [pc, #440]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b41      	cmp	r3, #65	; 0x41
 800135e:	d106      	bne.n	800136e <HAL_UARTEx_RxEventCallback+0xd2>
 8001360:	4b6e      	ldr	r3, [pc, #440]	; (800151c <HAL_UARTEx_RxEventCallback+0x280>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	b29b      	uxth	r3, r3
 8001366:	2b03      	cmp	r3, #3
 8001368:	d101      	bne.n	800136e <HAL_UARTEx_RxEventCallback+0xd2>
 800136a:	2301      	movs	r3, #1
 800136c:	e000      	b.n	8001370 <HAL_UARTEx_RxEventCallback+0xd4>
 800136e:	2300      	movs	r3, #0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00b      	beq.n	800138c <HAL_UARTEx_RxEventCallback+0xf0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001374:	4b67      	ldr	r3, [pc, #412]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 8001376:	785b      	ldrb	r3, [r3, #1]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b25a      	sxtb	r2, r3
 800137c:	4b65      	ldr	r3, [pc, #404]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 800137e:	789b      	ldrb	r3, [r3, #2]
 8001380:	b25b      	sxtb	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b25a      	sxtb	r2, r3
 8001386:	4b6b      	ldr	r3, [pc, #428]	; (8001534 <HAL_UARTEx_RxEventCallback+0x298>)
 8001388:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800138a:	e140      	b.n	800160e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x42 && cmdDataSize == 3){	// Joint Jog q2
 800138c:	4b61      	ldr	r3, [pc, #388]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b42      	cmp	r3, #66	; 0x42
 8001392:	d106      	bne.n	80013a2 <HAL_UARTEx_RxEventCallback+0x106>
 8001394:	4b61      	ldr	r3, [pc, #388]	; (800151c <HAL_UARTEx_RxEventCallback+0x280>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	b29b      	uxth	r3, r3
 800139a:	2b03      	cmp	r3, #3
 800139c:	d101      	bne.n	80013a2 <HAL_UARTEx_RxEventCallback+0x106>
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <HAL_UARTEx_RxEventCallback+0x108>
 80013a2:	2300      	movs	r3, #0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00b      	beq.n	80013c0 <HAL_UARTEx_RxEventCallback+0x124>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq2 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80013a8:	4b5a      	ldr	r3, [pc, #360]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80013aa:	785b      	ldrb	r3, [r3, #1]
 80013ac:	021b      	lsls	r3, r3, #8
 80013ae:	b25a      	sxtb	r2, r3
 80013b0:	4b58      	ldr	r3, [pc, #352]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80013b2:	789b      	ldrb	r3, [r3, #2]
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b25a      	sxtb	r2, r3
 80013ba:	4b5f      	ldr	r3, [pc, #380]	; (8001538 <HAL_UARTEx_RxEventCallback+0x29c>)
 80013bc:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80013be:	e126      	b.n	800160e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x43 && cmdDataSize == 3){	// Joint Jog q3
 80013c0:	4b54      	ldr	r3, [pc, #336]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b43      	cmp	r3, #67	; 0x43
 80013c6:	d106      	bne.n	80013d6 <HAL_UARTEx_RxEventCallback+0x13a>
 80013c8:	4b54      	ldr	r3, [pc, #336]	; (800151c <HAL_UARTEx_RxEventCallback+0x280>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	b29b      	uxth	r3, r3
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d101      	bne.n	80013d6 <HAL_UARTEx_RxEventCallback+0x13a>
 80013d2:	2301      	movs	r3, #1
 80013d4:	e000      	b.n	80013d8 <HAL_UARTEx_RxEventCallback+0x13c>
 80013d6:	2300      	movs	r3, #0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d00b      	beq.n	80013f4 <HAL_UARTEx_RxEventCallback+0x158>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq3 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80013dc:	4b4d      	ldr	r3, [pc, #308]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80013de:	785b      	ldrb	r3, [r3, #1]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	b25a      	sxtb	r2, r3
 80013e4:	4b4b      	ldr	r3, [pc, #300]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80013e6:	789b      	ldrb	r3, [r3, #2]
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	4313      	orrs	r3, r2
 80013ec:	b25a      	sxtb	r2, r3
 80013ee:	4b53      	ldr	r3, [pc, #332]	; (800153c <HAL_UARTEx_RxEventCallback+0x2a0>)
 80013f0:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80013f2:	e10c      	b.n	800160e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x44 && cmdDataSize == 3){	// Joint Jog q4
 80013f4:	4b47      	ldr	r3, [pc, #284]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b44      	cmp	r3, #68	; 0x44
 80013fa:	d106      	bne.n	800140a <HAL_UARTEx_RxEventCallback+0x16e>
 80013fc:	4b47      	ldr	r3, [pc, #284]	; (800151c <HAL_UARTEx_RxEventCallback+0x280>)
 80013fe:	881b      	ldrh	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	2b03      	cmp	r3, #3
 8001404:	d101      	bne.n	800140a <HAL_UARTEx_RxEventCallback+0x16e>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <HAL_UARTEx_RxEventCallback+0x170>
 800140a:	2300      	movs	r3, #0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00b      	beq.n	8001428 <HAL_UARTEx_RxEventCallback+0x18c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq4 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001410:	4b40      	ldr	r3, [pc, #256]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 8001412:	785b      	ldrb	r3, [r3, #1]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b25a      	sxtb	r2, r3
 8001418:	4b3e      	ldr	r3, [pc, #248]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 800141a:	789b      	ldrb	r3, [r3, #2]
 800141c:	b25b      	sxtb	r3, r3
 800141e:	4313      	orrs	r3, r2
 8001420:	b25a      	sxtb	r2, r3
 8001422:	4b47      	ldr	r3, [pc, #284]	; (8001540 <HAL_UARTEx_RxEventCallback+0x2a4>)
 8001424:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001426:	e0f2      	b.n	800160e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x51 && cmdDataSize == 3){	// Linear Jog X
 8001428:	4b3a      	ldr	r3, [pc, #232]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b51      	cmp	r3, #81	; 0x51
 800142e:	d106      	bne.n	800143e <HAL_UARTEx_RxEventCallback+0x1a2>
 8001430:	4b3a      	ldr	r3, [pc, #232]	; (800151c <HAL_UARTEx_RxEventCallback+0x280>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	b29b      	uxth	r3, r3
 8001436:	2b03      	cmp	r3, #3
 8001438:	d101      	bne.n	800143e <HAL_UARTEx_RxEventCallback+0x1a2>
 800143a:	2301      	movs	r3, #1
 800143c:	e000      	b.n	8001440 <HAL_UARTEx_RxEventCallback+0x1a4>
 800143e:	2300      	movs	r3, #0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d00b      	beq.n	800145c <HAL_UARTEx_RxEventCallback+0x1c0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001444:	4b33      	ldr	r3, [pc, #204]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 8001446:	785b      	ldrb	r3, [r3, #1]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	b25a      	sxtb	r2, r3
 800144c:	4b31      	ldr	r3, [pc, #196]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 800144e:	789b      	ldrb	r3, [r3, #2]
 8001450:	b25b      	sxtb	r3, r3
 8001452:	4313      	orrs	r3, r2
 8001454:	b25a      	sxtb	r2, r3
 8001456:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001458:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800145a:	e0d8      	b.n	800160e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x52 && cmdDataSize == 3){	// Linear Jog Y
 800145c:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b52      	cmp	r3, #82	; 0x52
 8001462:	d106      	bne.n	8001472 <HAL_UARTEx_RxEventCallback+0x1d6>
 8001464:	4b2d      	ldr	r3, [pc, #180]	; (800151c <HAL_UARTEx_RxEventCallback+0x280>)
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	b29b      	uxth	r3, r3
 800146a:	2b03      	cmp	r3, #3
 800146c:	d101      	bne.n	8001472 <HAL_UARTEx_RxEventCallback+0x1d6>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_UARTEx_RxEventCallback+0x1d8>
 8001472:	2300      	movs	r3, #0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00b      	beq.n	8001490 <HAL_UARTEx_RxEventCallback+0x1f4>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dy = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001478:	4b26      	ldr	r3, [pc, #152]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 800147a:	785b      	ldrb	r3, [r3, #1]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b25a      	sxtb	r2, r3
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 8001482:	789b      	ldrb	r3, [r3, #2]
 8001484:	b25b      	sxtb	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b25a      	sxtb	r2, r3
 800148a:	4b2f      	ldr	r3, [pc, #188]	; (8001548 <HAL_UARTEx_RxEventCallback+0x2ac>)
 800148c:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800148e:	e0be      	b.n	800160e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x53 && cmdDataSize == 3){	// Linear Jog Z
 8001490:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b53      	cmp	r3, #83	; 0x53
 8001496:	d106      	bne.n	80014a6 <HAL_UARTEx_RxEventCallback+0x20a>
 8001498:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_UARTEx_RxEventCallback+0x280>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d101      	bne.n	80014a6 <HAL_UARTEx_RxEventCallback+0x20a>
 80014a2:	2301      	movs	r3, #1
 80014a4:	e000      	b.n	80014a8 <HAL_UARTEx_RxEventCallback+0x20c>
 80014a6:	2300      	movs	r3, #0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00b      	beq.n	80014c4 <HAL_UARTEx_RxEventCallback+0x228>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dz = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80014ae:	785b      	ldrb	r3, [r3, #1]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	b25a      	sxtb	r2, r3
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80014b6:	789b      	ldrb	r3, [r3, #2]
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b25a      	sxtb	r2, r3
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <HAL_UARTEx_RxEventCallback+0x2b0>)
 80014c0:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80014c2:	e0a4      	b.n	800160e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3){	// Linear Jog Yaw
 80014c4:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b54      	cmp	r3, #84	; 0x54
 80014ca:	d106      	bne.n	80014da <HAL_UARTEx_RxEventCallback+0x23e>
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <HAL_UARTEx_RxEventCallback+0x280>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d101      	bne.n	80014da <HAL_UARTEx_RxEventCallback+0x23e>
 80014d6:	2301      	movs	r3, #1
 80014d8:	e000      	b.n	80014dc <HAL_UARTEx_RxEventCallback+0x240>
 80014da:	2300      	movs	r3, #0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00b      	beq.n	80014f8 <HAL_UARTEx_RxEventCallback+0x25c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80014e2:	785b      	ldrb	r3, [r3, #1]
 80014e4:	021b      	lsls	r3, r3, #8
 80014e6:	b25a      	sxtb	r2, r3
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80014ea:	789b      	ldrb	r3, [r3, #2]
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	4313      	orrs	r3, r2
 80014f0:	b25a      	sxtb	r2, r3
 80014f2:	4b17      	ldr	r3, [pc, #92]	; (8001550 <HAL_UARTEx_RxEventCallback+0x2b4>)
 80014f4:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80014f6:	e08a      	b.n	800160e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5){ // Joint Jog 4q
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_UARTEx_RxEventCallback+0x278>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b61      	cmp	r3, #97	; 0x61
 80014fe:	d129      	bne.n	8001554 <HAL_UARTEx_RxEventCallback+0x2b8>
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_UARTEx_RxEventCallback+0x280>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	b29b      	uxth	r3, r3
 8001506:	2b05      	cmp	r3, #5
 8001508:	d124      	bne.n	8001554 <HAL_UARTEx_RxEventCallback+0x2b8>
 800150a:	2301      	movs	r3, #1
 800150c:	e023      	b.n	8001556 <HAL_UARTEx_RxEventCallback+0x2ba>
 800150e:	bf00      	nop
 8001510:	24000a98 	.word	0x24000a98
 8001514:	24000220 	.word	0x24000220
 8001518:	24000234 	.word	0x24000234
 800151c:	24000248 	.word	0x24000248
 8001520:	24000528 	.word	0x24000528
 8001524:	2400021c 	.word	0x2400021c
 8001528:	2400021e 	.word	0x2400021e
 800152c:	58021000 	.word	0x58021000
 8001530:	58020400 	.word	0x58020400
 8001534:	24000214 	.word	0x24000214
 8001538:	24000215 	.word	0x24000215
 800153c:	24000216 	.word	0x24000216
 8001540:	24000217 	.word	0x24000217
 8001544:	24000218 	.word	0x24000218
 8001548:	24000219 	.word	0x24000219
 800154c:	2400021a 	.word	0x2400021a
 8001550:	2400021b 	.word	0x2400021b
 8001554:	2300      	movs	r3, #0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d014      	beq.n	8001584 <HAL_UARTEx_RxEventCallback+0x2e8>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 800155a:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <HAL_UARTEx_RxEventCallback+0x44c>)
 800155c:	785b      	ldrb	r3, [r3, #1]
 800155e:	b25a      	sxtb	r2, r3
 8001560:	4b62      	ldr	r3, [pc, #392]	; (80016ec <HAL_UARTEx_RxEventCallback+0x450>)
 8001562:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8001564:	4b60      	ldr	r3, [pc, #384]	; (80016e8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8001566:	789b      	ldrb	r3, [r3, #2]
 8001568:	b25a      	sxtb	r2, r3
 800156a:	4b61      	ldr	r3, [pc, #388]	; (80016f0 <HAL_UARTEx_RxEventCallback+0x454>)
 800156c:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 800156e:	4b5e      	ldr	r3, [pc, #376]	; (80016e8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8001570:	78db      	ldrb	r3, [r3, #3]
 8001572:	b25a      	sxtb	r2, r3
 8001574:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <HAL_UARTEx_RxEventCallback+0x458>)
 8001576:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8001578:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <HAL_UARTEx_RxEventCallback+0x44c>)
 800157a:	791b      	ldrb	r3, [r3, #4]
 800157c:	b25a      	sxtb	r2, r3
 800157e:	4b5e      	ldr	r3, [pc, #376]	; (80016f8 <HAL_UARTEx_RxEventCallback+0x45c>)
 8001580:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001582:	e044      	b.n	800160e <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5){ // Linear Jog X,Y,Z,Yaw
 8001584:	4b58      	ldr	r3, [pc, #352]	; (80016e8 <HAL_UARTEx_RxEventCallback+0x44c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b71      	cmp	r3, #113	; 0x71
 800158a:	d106      	bne.n	800159a <HAL_UARTEx_RxEventCallback+0x2fe>
 800158c:	4b5b      	ldr	r3, [pc, #364]	; (80016fc <HAL_UARTEx_RxEventCallback+0x460>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	b29b      	uxth	r3, r3
 8001592:	2b05      	cmp	r3, #5
 8001594:	d101      	bne.n	800159a <HAL_UARTEx_RxEventCallback+0x2fe>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_UARTEx_RxEventCallback+0x300>
 800159a:	2300      	movs	r3, #0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d036      	beq.n	800160e <HAL_UARTEx_RxEventCallback+0x372>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = Old_Rx_Buffer[1];
 80015a0:	4b51      	ldr	r3, [pc, #324]	; (80016e8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80015a2:	785b      	ldrb	r3, [r3, #1]
 80015a4:	b25a      	sxtb	r2, r3
 80015a6:	4b56      	ldr	r3, [pc, #344]	; (8001700 <HAL_UARTEx_RxEventCallback+0x464>)
 80015a8:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 80015aa:	4b4f      	ldr	r3, [pc, #316]	; (80016e8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80015ac:	789b      	ldrb	r3, [r3, #2]
 80015ae:	b25a      	sxtb	r2, r3
 80015b0:	4b54      	ldr	r3, [pc, #336]	; (8001704 <HAL_UARTEx_RxEventCallback+0x468>)
 80015b2:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 80015b4:	4b4c      	ldr	r3, [pc, #304]	; (80016e8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80015b6:	78db      	ldrb	r3, [r3, #3]
 80015b8:	b25a      	sxtb	r2, r3
 80015ba:	4b53      	ldr	r3, [pc, #332]	; (8001708 <HAL_UARTEx_RxEventCallback+0x46c>)
 80015bc:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 80015be:	4b4a      	ldr	r3, [pc, #296]	; (80016e8 <HAL_UARTEx_RxEventCallback+0x44c>)
 80015c0:	791b      	ldrb	r3, [r3, #4]
 80015c2:	b25a      	sxtb	r2, r3
 80015c4:	4b51      	ldr	r3, [pc, #324]	; (800170c <HAL_UARTEx_RxEventCallback+0x470>)
 80015c6:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80015c8:	e021      	b.n	800160e <HAL_UARTEx_RxEventCallback+0x372>
				}
			}
			else{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2102      	movs	r1, #2
 80015ce:	4850      	ldr	r0, [pc, #320]	; (8001710 <HAL_UARTEx_RxEventCallback+0x474>)
 80015d0:	f006 fb52 	bl	8007c78 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80015d4:	2201      	movs	r2, #1
 80015d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015da:	484e      	ldr	r0, [pc, #312]	; (8001714 <HAL_UARTEx_RxEventCallback+0x478>)
 80015dc:	f006 fb4c 	bl	8007c78 <HAL_GPIO_WritePin>
				HAL_UART_Transmit_DMA(&huart3, (uint8_t *)"CRC16 error\n", 12);
 80015e0:	220c      	movs	r2, #12
 80015e2:	494d      	ldr	r1, [pc, #308]	; (8001718 <HAL_UARTEx_RxEventCallback+0x47c>)
 80015e4:	484d      	ldr	r0, [pc, #308]	; (800171c <HAL_UARTEx_RxEventCallback+0x480>)
 80015e6:	f00a fc9b 	bl	800bf20 <HAL_UART_Transmit_DMA>
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80015ea:	e010      	b.n	800160e <HAL_UARTEx_RxEventCallback+0x372>
			}
		}
		else{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2102      	movs	r1, #2
 80015f0:	4847      	ldr	r0, [pc, #284]	; (8001710 <HAL_UARTEx_RxEventCallback+0x474>)
 80015f2:	f006 fb41 	bl	8007c78 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80015f6:	2201      	movs	r2, #1
 80015f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015fc:	4845      	ldr	r0, [pc, #276]	; (8001714 <HAL_UARTEx_RxEventCallback+0x478>)
 80015fe:	f006 fb3b 	bl	8007c78 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)"Protocol match error\n", 21);
 8001602:	2215      	movs	r2, #21
 8001604:	4946      	ldr	r1, [pc, #280]	; (8001720 <HAL_UARTEx_RxEventCallback+0x484>)
 8001606:	4845      	ldr	r0, [pc, #276]	; (800171c <HAL_UARTEx_RxEventCallback+0x480>)
 8001608:	f00a fc8a 	bl	800bf20 <HAL_UART_Transmit_DMA>
 800160c:	e000      	b.n	8001610 <HAL_UARTEx_RxEventCallback+0x374>
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800160e:	bf00      	nop
		}
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 8001610:	2214      	movs	r2, #20
 8001612:	4944      	ldr	r1, [pc, #272]	; (8001724 <HAL_UARTEx_RxEventCallback+0x488>)
 8001614:	4841      	ldr	r0, [pc, #260]	; (800171c <HAL_UARTEx_RxEventCallback+0x480>)
 8001616:	f00c fbd6 	bl	800ddc6 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800161a:	4b43      	ldr	r3, [pc, #268]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a43      	ldr	r2, [pc, #268]	; (800172c <HAL_UARTEx_RxEventCallback+0x490>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d04a      	beq.n	80016ba <HAL_UARTEx_RxEventCallback+0x41e>
 8001624:	4b40      	ldr	r3, [pc, #256]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a41      	ldr	r2, [pc, #260]	; (8001730 <HAL_UARTEx_RxEventCallback+0x494>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d045      	beq.n	80016ba <HAL_UARTEx_RxEventCallback+0x41e>
 800162e:	4b3e      	ldr	r3, [pc, #248]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a40      	ldr	r2, [pc, #256]	; (8001734 <HAL_UARTEx_RxEventCallback+0x498>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d040      	beq.n	80016ba <HAL_UARTEx_RxEventCallback+0x41e>
 8001638:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a3e      	ldr	r2, [pc, #248]	; (8001738 <HAL_UARTEx_RxEventCallback+0x49c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d03b      	beq.n	80016ba <HAL_UARTEx_RxEventCallback+0x41e>
 8001642:	4b39      	ldr	r3, [pc, #228]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a3d      	ldr	r2, [pc, #244]	; (800173c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d036      	beq.n	80016ba <HAL_UARTEx_RxEventCallback+0x41e>
 800164c:	4b36      	ldr	r3, [pc, #216]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a3b      	ldr	r2, [pc, #236]	; (8001740 <HAL_UARTEx_RxEventCallback+0x4a4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d031      	beq.n	80016ba <HAL_UARTEx_RxEventCallback+0x41e>
 8001656:	4b34      	ldr	r3, [pc, #208]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a3a      	ldr	r2, [pc, #232]	; (8001744 <HAL_UARTEx_RxEventCallback+0x4a8>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d02c      	beq.n	80016ba <HAL_UARTEx_RxEventCallback+0x41e>
 8001660:	4b31      	ldr	r3, [pc, #196]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a38      	ldr	r2, [pc, #224]	; (8001748 <HAL_UARTEx_RxEventCallback+0x4ac>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d027      	beq.n	80016ba <HAL_UARTEx_RxEventCallback+0x41e>
 800166a:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a37      	ldr	r2, [pc, #220]	; (800174c <HAL_UARTEx_RxEventCallback+0x4b0>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <HAL_UARTEx_RxEventCallback+0x41e>
 8001674:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a35      	ldr	r2, [pc, #212]	; (8001750 <HAL_UARTEx_RxEventCallback+0x4b4>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d01d      	beq.n	80016ba <HAL_UARTEx_RxEventCallback+0x41e>
 800167e:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a34      	ldr	r2, [pc, #208]	; (8001754 <HAL_UARTEx_RxEventCallback+0x4b8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d018      	beq.n	80016ba <HAL_UARTEx_RxEventCallback+0x41e>
 8001688:	4b27      	ldr	r3, [pc, #156]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a32      	ldr	r2, [pc, #200]	; (8001758 <HAL_UARTEx_RxEventCallback+0x4bc>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_UARTEx_RxEventCallback+0x41e>
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a31      	ldr	r2, [pc, #196]	; (800175c <HAL_UARTEx_RxEventCallback+0x4c0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d00e      	beq.n	80016ba <HAL_UARTEx_RxEventCallback+0x41e>
 800169c:	4b22      	ldr	r3, [pc, #136]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a2f      	ldr	r2, [pc, #188]	; (8001760 <HAL_UARTEx_RxEventCallback+0x4c4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d009      	beq.n	80016ba <HAL_UARTEx_RxEventCallback+0x41e>
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a2e      	ldr	r2, [pc, #184]	; (8001764 <HAL_UARTEx_RxEventCallback+0x4c8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d004      	beq.n	80016ba <HAL_UARTEx_RxEventCallback+0x41e>
 80016b0:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a2c      	ldr	r2, [pc, #176]	; (8001768 <HAL_UARTEx_RxEventCallback+0x4cc>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d109      	bne.n	80016ce <HAL_UARTEx_RxEventCallback+0x432>
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0208 	bic.w	r2, r2, #8
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	bf00      	nop
	}
}
 80016cc:	e007      	b.n	80016de <HAL_UARTEx_RxEventCallback+0x442>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80016ce:	4b16      	ldr	r3, [pc, #88]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_UARTEx_RxEventCallback+0x48c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0204 	bic.w	r2, r2, #4
 80016dc:	601a      	str	r2, [r3, #0]
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bdb0      	pop	{r4, r5, r7, pc}
 80016e6:	bf00      	nop
 80016e8:	24000220 	.word	0x24000220
 80016ec:	24000214 	.word	0x24000214
 80016f0:	24000215 	.word	0x24000215
 80016f4:	24000216 	.word	0x24000216
 80016f8:	24000217 	.word	0x24000217
 80016fc:	24000248 	.word	0x24000248
 8001700:	24000218 	.word	0x24000218
 8001704:	24000219 	.word	0x24000219
 8001708:	2400021a 	.word	0x2400021a
 800170c:	2400021b 	.word	0x2400021b
 8001710:	58021000 	.word	0x58021000
 8001714:	58020400 	.word	0x58020400
 8001718:	08010ef0 	.word	0x08010ef0
 800171c:	24000a98 	.word	0x24000a98
 8001720:	08010f00 	.word	0x08010f00
 8001724:	24000234 	.word	0x24000234
 8001728:	24000a20 	.word	0x24000a20
 800172c:	40020010 	.word	0x40020010
 8001730:	40020028 	.word	0x40020028
 8001734:	40020040 	.word	0x40020040
 8001738:	40020058 	.word	0x40020058
 800173c:	40020070 	.word	0x40020070
 8001740:	40020088 	.word	0x40020088
 8001744:	400200a0 	.word	0x400200a0
 8001748:	400200b8 	.word	0x400200b8
 800174c:	40020410 	.word	0x40020410
 8001750:	40020428 	.word	0x40020428
 8001754:	40020440 	.word	0x40020440
 8001758:	40020458 	.word	0x40020458
 800175c:	40020470 	.word	0x40020470
 8001760:	40020488 	.word	0x40020488
 8001764:	400204a0 	.word	0x400204a0
 8001768:	400204b8 	.word	0x400204b8

0800176c <_ZN11robot_jointC1Ev>:
struct joint_state {
    float q1,q2,q3,q4;
};
typedef struct joint_state joint_config;

struct robot_joint{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	65da      	str	r2, [r3, #92]	; 0x5c
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	661a      	str	r2, [r3, #96]	; 0x60
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800178a:	665a      	str	r2, [r3, #100]	; 0x64
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	669a      	str	r2, [r3, #104]	; 0x68
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800179a:	66da      	str	r2, [r3, #108]	; 0x6c
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	671a      	str	r2, [r3, #112]	; 0x70
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	675a      	str	r2, [r3, #116]	; 0x74
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f04f 0200 	mov.w	r2, #0
 80017b2:	679a      	str	r2, [r3, #120]	; 0x78
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a06      	ldr	r2, [pc, #24]	; (80017d0 <_ZN11robot_jointC1Ev+0x64>)
 80017b8:	67da      	str	r2, [r3, #124]	; 0x7c
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a05      	ldr	r2, [pc, #20]	; (80017d4 <_ZN11robot_jointC1Ev+0x68>)
 80017be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	3dc28f5c 	.word	0x3dc28f5c
 80017d4:	387ba882 	.word	0x387ba882

080017d8 <_Z12KalmanFilterf11robot_joint>:
////     p21 = P21 + P22*dt + (Q*dt3)/2 - (((Q*dt3)/2 + P22*dt + P21)*(P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
////	 p22 = P22 + Q*dt2 - (((Q*dt3)/2 + P22*dt + P12)*((Q*dt3)/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
//}

fcb_joint KalmanFilter(float theta_k, fcb_joint joint)
{
 80017d8:	b084      	sub	sp, #16
 80017da:	b580      	push	{r7, lr}
 80017dc:	ed2d 8b08 	vpush	{d8-d11}
 80017e0:	b08a      	sub	sp, #40	; 0x28
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	ed87 0a00 	vstr	s0, [r7]
 80017ea:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80017ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	bug1 = joint.Encoder;
	float X1 = joint.X11;
 80017f2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = joint.X21;
 80017f8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80017fc:	623b      	str	r3, [r7, #32]
	float P11 = joint.p11;
 80017fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001802:	61fb      	str	r3, [r7, #28]
	float P12 = joint.p12;
 8001804:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001808:	61bb      	str	r3, [r7, #24]
	float P21 = joint.p21;
 800180a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800180e:	617b      	str	r3, [r7, #20]
	float P22 = joint.p22;
 8001810:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001814:	613b      	str	r3, [r7, #16]
	float Q = joint.Q;
 8001816:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800181a:	60fb      	str	r3, [r7, #12]
	float R = joint.R;
 800181c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001820:	60bb      	str	r3, [r7, #8]

	joint.X11 = X1 + (X2*dt) - ((X1 - theta_k + X2*dt)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001822:	4bef      	ldr	r3, [pc, #956]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001824:	ed93 7a00 	vldr	s14, [r3]
 8001828:	edd7 7a08 	vldr	s15, [r7, #32]
 800182c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001830:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001838:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800183c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001840:	edd7 7a00 	vldr	s15, [r7]
 8001844:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001848:	4be5      	ldr	r3, [pc, #916]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 800184a:	edd3 6a00 	vldr	s13, [r3]
 800184e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800185e:	4be0      	ldr	r3, [pc, #896]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001860:	ed93 7a00 	vldr	s14, [r3]
 8001864:	edd7 7a05 	vldr	s15, [r7, #20]
 8001868:	ee27 7a27 	vmul.f32	s14, s14, s15
 800186c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001874:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001878:	edd7 7a03 	vldr	s15, [r7, #12]
 800187c:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001880:	4bd7      	ldr	r3, [pc, #860]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	2004      	movs	r0, #4
 8001888:	eeb0 0a67 	vmov.f32	s0, s15
 800188c:	f001 f8ba 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001890:	eeb0 7b40 	vmov.f64	d7, d0
 8001894:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001898:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800189c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80018a0:	ee3a 6b07 	vadd.f64	d6, d10, d7
 80018a4:	4bce      	ldr	r3, [pc, #824]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80018a6:	ed93 7a00 	vldr	s14, [r3]
 80018aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80018ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80018b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ba:	4bc9      	ldr	r3, [pc, #804]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80018bc:	edd3 7a00 	vldr	s15, [r3]
 80018c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80018cc:	ee29 9b07 	vmul.f64	d9, d9, d7
 80018d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80018d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80018d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018dc:	4bc0      	ldr	r3, [pc, #768]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80018de:	edd3 6a00 	vldr	s13, [r3]
 80018e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80018e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ee:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80018f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80018f6:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80018fa:	4bb9      	ldr	r3, [pc, #740]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80018fc:	edd3 7a00 	vldr	s15, [r3]
 8001900:	2004      	movs	r0, #4
 8001902:	eeb0 0a67 	vmov.f32	s0, s15
 8001906:	f001 f87d 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800190a:	eeb0 7b40 	vmov.f64	d7, d0
 800190e:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001912:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001916:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800191a:	ee3a 6b07 	vadd.f64	d6, d10, d7
 800191e:	4bb0      	ldr	r3, [pc, #704]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001920:	ed93 7a00 	vldr	s14, [r3]
 8001924:	edd7 7a04 	vldr	s15, [r7, #16]
 8001928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800192c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001934:	4baa      	ldr	r3, [pc, #680]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001936:	edd3 7a00 	vldr	s15, [r3]
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001942:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001946:	ee89 7b06 	vdiv.f64	d7, d9, d6
 800194a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800194e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001952:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	joint.X21 = X2 - (((Q*pow(dt,3))/2 + P22*dt + P21)*(X1 - theta_k + X2*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001956:	edd7 7a08 	vldr	s15, [r7, #32]
 800195a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800195e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001962:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001966:	4b9e      	ldr	r3, [pc, #632]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001968:	edd3 7a00 	vldr	s15, [r3]
 800196c:	2003      	movs	r0, #3
 800196e:	eeb0 0a67 	vmov.f32	s0, s15
 8001972:	f001 f847 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001976:	eeb0 7b40 	vmov.f64	d7, d0
 800197a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800197e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001982:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001986:	4b96      	ldr	r3, [pc, #600]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001988:	ed93 7a00 	vldr	s14, [r3]
 800198c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001990:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001994:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001998:	ee36 6b07 	vadd.f64	d6, d6, d7
 800199c:	edd7 7a05 	vldr	s15, [r7, #20]
 80019a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80019a8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80019ac:	edd7 7a00 	vldr	s15, [r7]
 80019b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019b4:	4b8a      	ldr	r3, [pc, #552]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80019b6:	edd3 5a00 	vldr	s11, [r3]
 80019ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80019be:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80019c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019ca:	ee26 9b07 	vmul.f64	d9, d6, d7
 80019ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80019d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80019d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019da:	4b81      	ldr	r3, [pc, #516]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80019dc:	edd3 6a00 	vldr	s13, [r3]
 80019e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ec:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80019f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80019f4:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80019f8:	4b79      	ldr	r3, [pc, #484]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	2004      	movs	r0, #4
 8001a00:	eeb0 0a67 	vmov.f32	s0, s15
 8001a04:	f000 fffe 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a08:	eeb0 7b40 	vmov.f64	d7, d0
 8001a0c:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001a10:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001a14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a18:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001a1c:	4b70      	ldr	r3, [pc, #448]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001a1e:	ed93 7a00 	vldr	s14, [r3]
 8001a22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001a2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a32:	4b6b      	ldr	r3, [pc, #428]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001a34:	edd3 7a00 	vldr	s15, [r3]
 8001a38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a40:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001a44:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001a48:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001a4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a50:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	joint.p11 = -((P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)) - 1)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001a54:	4b62      	ldr	r3, [pc, #392]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001a56:	ed93 7a00 	vldr	s14, [r3]
 8001a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a62:	edd7 7a07 	vldr	s15, [r7, #28]
 8001a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a72:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001a76:	4b5a      	ldr	r3, [pc, #360]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	2004      	movs	r0, #4
 8001a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a82:	f000 ffbf 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a86:	eeb0 7b40 	vmov.f64	d7, d0
 8001a8a:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001a8e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001a92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a96:	ee38 6b07 	vadd.f64	d6, d8, d7
 8001a9a:	4b51      	ldr	r3, [pc, #324]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001a9c:	ed93 7a00 	vldr	s14, [r3]
 8001aa0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aa8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001aac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ab0:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001aba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001abe:	ee36 8b07 	vadd.f64	d8, d6, d7
 8001ac2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ac6:	edd7 7a02 	vldr	s15, [r7, #8]
 8001aca:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ace:	4b44      	ldr	r3, [pc, #272]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001ad0:	edd3 6a00 	vldr	s13, [r3]
 8001ad4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ad8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001ae4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae8:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001aec:	4b3c      	ldr	r3, [pc, #240]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001aee:	edd3 7a00 	vldr	s15, [r3]
 8001af2:	2004      	movs	r0, #4
 8001af4:	eeb0 0a67 	vmov.f32	s0, s15
 8001af8:	f000 ff84 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001afc:	eeb0 7b40 	vmov.f64	d7, d0
 8001b00:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001b04:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001b08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b0c:	ee39 6b07 	vadd.f64	d6, d9, d7
 8001b10:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001b12:	ed93 7a00 	vldr	s14, [r3]
 8001b16:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b26:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b34:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001b38:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001b3c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001b40:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001b44:	eeb1 8b47 	vneg.f64	d8, d7
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001b4a:	ed93 7a00 	vldr	s14, [r3]
 8001b4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b56:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b5e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001b62:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b66:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001b6c:	edd3 7a00 	vldr	s15, [r3]
 8001b70:	2004      	movs	r0, #4
 8001b72:	eeb0 0a67 	vmov.f32	s0, s15
 8001b76:	f000 ff45 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b7a:	eeb0 7b40 	vmov.f64	d7, d0
 8001b7e:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001b82:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001b86:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b8a:	ee39 6b07 	vadd.f64	d6, d9, d7
 8001b8e:	4b14      	ldr	r3, [pc, #80]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001b90:	ed93 7a00 	vldr	s14, [r3]
 8001b94:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b9c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ba0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bb2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001bb6:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001bba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001bbe:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	joint.p12 = -((P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)) - 1)*((Q*pow(dt,3))/2 + P22*dt + P12);
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001bc4:	ed93 7a00 	vldr	s14, [r3]
 8001bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bcc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001bdc:	e002      	b.n	8001be4 <_Z12KalmanFilterf11robot_joint+0x40c>
 8001bde:	bf00      	nop
 8001be0:	24000014 	.word	0x24000014
 8001be4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001be8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001bec:	4bef      	ldr	r3, [pc, #956]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001bee:	edd3 7a00 	vldr	s15, [r3]
 8001bf2:	2004      	movs	r0, #4
 8001bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bf8:	f000 ff04 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001bfc:	eeb0 7b40 	vmov.f64	d7, d0
 8001c00:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001c04:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001c08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c0c:	ee38 6b07 	vadd.f64	d6, d8, d7
 8001c10:	4be6      	ldr	r3, [pc, #920]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001c12:	ed93 7a00 	vldr	s14, [r3]
 8001c16:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c26:	4be1      	ldr	r3, [pc, #900]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c34:	ee36 8b07 	vadd.f64	d8, d6, d7
 8001c38:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c44:	4bd9      	ldr	r3, [pc, #868]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001c46:	edd3 6a00 	vldr	s13, [r3]
 8001c4a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c56:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001c5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c5e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001c62:	4bd2      	ldr	r3, [pc, #840]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	2004      	movs	r0, #4
 8001c6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6e:	f000 fec9 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c72:	eeb0 7b40 	vmov.f64	d7, d0
 8001c76:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001c7a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001c7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c82:	ee39 6b07 	vadd.f64	d6, d9, d7
 8001c86:	4bc9      	ldr	r3, [pc, #804]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001c88:	ed93 7a00 	vldr	s14, [r3]
 8001c8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c94:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c9c:	4bc3      	ldr	r3, [pc, #780]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001caa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001cae:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001cb2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001cb6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001cba:	eeb1 8b47 	vneg.f64	d8, d7
 8001cbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cc2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001cc6:	4bb9      	ldr	r3, [pc, #740]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	2003      	movs	r0, #3
 8001cce:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd2:	f000 fe97 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001cd6:	eeb0 7b40 	vmov.f64	d7, d0
 8001cda:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001cde:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001ce2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001ce6:	4bb1      	ldr	r3, [pc, #708]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001ce8:	ed93 7a00 	vldr	s14, [r3]
 8001cec:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cf8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001cfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001d08:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001d0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001d10:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	joint.p21 = P21 + P22*dt + (Q*pow(dt,3))/2 - (((Q*pow(dt,3))/2 + P22*dt + P21)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001d14:	4ba5      	ldr	r3, [pc, #660]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d16:	ed93 7a00 	vldr	s14, [r3]
 8001d1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d22:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001d2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d32:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001d36:	4b9d      	ldr	r3, [pc, #628]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d42:	f000 fe5f 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d46:	eeb0 7b40 	vmov.f64	d7, d0
 8001d4a:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001d4e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001d52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d56:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001d5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d5e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001d62:	4b92      	ldr	r3, [pc, #584]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d64:	edd3 7a00 	vldr	s15, [r3]
 8001d68:	2003      	movs	r0, #3
 8001d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6e:	f000 fe49 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d72:	eeb0 7b40 	vmov.f64	d7, d0
 8001d76:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001d7a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001d7e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001d82:	4b8a      	ldr	r3, [pc, #552]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d84:	ed93 7a00 	vldr	s14, [r3]
 8001d88:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d90:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d94:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001d98:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d9c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001da0:	ee36 9b07 	vadd.f64	d9, d6, d7
 8001da4:	4b81      	ldr	r3, [pc, #516]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001da6:	ed93 7a00 	vldr	s14, [r3]
 8001daa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001db6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dba:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001dbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dc2:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001dc6:	4b79      	ldr	r3, [pc, #484]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	2004      	movs	r0, #4
 8001dce:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd2:	f000 fe17 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001dd6:	eeb0 7b40 	vmov.f64	d7, d0
 8001dda:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001dde:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001de2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001de6:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001dea:	4b70      	ldr	r3, [pc, #448]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001dec:	ed93 7a00 	vldr	s14, [r3]
 8001df0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001df4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e00:	4b6a      	ldr	r3, [pc, #424]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e0e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001e12:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001e16:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e22:	4b62      	ldr	r3, [pc, #392]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001e24:	edd3 6a00 	vldr	s13, [r3]
 8001e28:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e34:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001e38:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e3c:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001e40:	4b5a      	ldr	r3, [pc, #360]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	2004      	movs	r0, #4
 8001e48:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4c:	f000 fdda 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001e50:	eeb0 7b40 	vmov.f64	d7, d0
 8001e54:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001e58:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001e5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e60:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001e64:	4b51      	ldr	r3, [pc, #324]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001e66:	ed93 7a00 	vldr	s14, [r3]
 8001e6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e72:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e7a:	4b4c      	ldr	r3, [pc, #304]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001e7c:	edd3 7a00 	vldr	s15, [r3]
 8001e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e88:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001e8c:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001e90:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001e94:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001e98:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	joint.p22 = P22 + Q*pow(dt,2) - (((Q*pow(dt,3))/2 + P22*dt + P12)*((Q*pow(dt,3))/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001e9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ea0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001ea4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ea8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001eac:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001eae:	edd3 7a00 	vldr	s15, [r3]
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb8:	f000 fda4 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001ebc:	eeb0 7b40 	vmov.f64	d7, d0
 8001ec0:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001ec4:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001ec8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ecc:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001ed0:	4b36      	ldr	r3, [pc, #216]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001ed2:	edd3 7a00 	vldr	s15, [r3]
 8001ed6:	2003      	movs	r0, #3
 8001ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8001edc:	f000 fd92 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001ee0:	eeb0 7b40 	vmov.f64	d7, d0
 8001ee4:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001ee8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001eec:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001ef0:	4b2e      	ldr	r3, [pc, #184]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001ef2:	ed93 7a00 	vldr	s14, [r3]
 8001ef6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f02:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f06:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f0a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f0e:	ee36 9b07 	vadd.f64	d9, d6, d7
 8001f12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f16:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001f1c:	edd3 7a00 	vldr	s15, [r3]
 8001f20:	2003      	movs	r0, #3
 8001f22:	eeb0 0a67 	vmov.f32	s0, s15
 8001f26:	f000 fd6d 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001f2a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f2e:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8001f32:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001f36:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001f3c:	ed93 7a00 	vldr	s14, [r3]
 8001f40:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f4c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f50:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f58:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001f5c:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001f60:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f64:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001f6e:	edd3 6a00 	vldr	s13, [r3]
 8001f72:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001f82:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f86:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	2004      	movs	r0, #4
 8001f92:	eeb0 0a67 	vmov.f32	s0, s15
 8001f96:	f000 fd35 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001f9a:	eeb0 7b40 	vmov.f64	d7, d0
 8001f9e:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001fa2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001fa6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001faa:	e001      	b.n	8001fb0 <_Z12KalmanFilterf11robot_joint+0x7d8>
 8001fac:	24000014 	.word	0x24000014
 8001fb0:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001fb4:	4b16      	ldr	r3, [pc, #88]	; (8002010 <_Z12KalmanFilterf11robot_joint+0x838>)
 8001fb6:	ed93 7a00 	vldr	s14, [r3]
 8001fba:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <_Z12KalmanFilterf11robot_joint+0x838>)
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fd4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fd8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001fdc:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001fe0:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001fe4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001fe8:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
//	joint.p11 = (R*(4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p12 = (2*R*(Q*dt3 + 2*p22*dt + 2*p12))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p21 = (2*R*(Q*dt3 + 2*p22*dt + 2*p21))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p22 = p22 + Q*dt2 - (((Q*dt3)/2 + p22*dt + p12)*((Q*dt3)/2 + p22*dt + p21))/(R + p11 + dt*p21 + (Q*dt4)/4 + dt*(p12 + dt*p22));

	return  joint;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ff4:	2284      	movs	r2, #132	; 0x84
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f00c fb24 	bl	800e644 <memcpy>

}
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	3728      	adds	r7, #40	; 0x28
 8002000:	46bd      	mov	sp, r7
 8002002:	ecbd 8b08 	vpop	{d8-d11}
 8002006:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800200a:	b004      	add	sp, #16
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	24000014 	.word	0x24000014
 8002014:	00000000 	.word	0x00000000

08002018 <HAL_TIM_PeriodElapsedCallback>:
}




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800201a:	ed2d 8b02 	vpush	{d8}
 800201e:	b0c9      	sub	sp, #292	; 0x124
 8002020:	af1e      	add	r7, sp, #120	; 0x78
 8002022:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	if (htim == &htim14){	//

	}
	if (htim == &htim12){	//
	}
	if (htim == &htim5){	//
 8002026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800202a:	4a8f      	ldr	r2, [pc, #572]	; (8002268 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d14d      	bne.n	80020cc <HAL_TIM_PeriodElapsedCallback+0xb4>
		encoderJ1.AMT21_Read();
 8002030:	488e      	ldr	r0, [pc, #568]	; (800226c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002032:	f7fe fb48 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8002036:	488d      	ldr	r0, [pc, #564]	; (800226c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002038:	f7fe fb74 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800203c:	4603      	mov	r3, r0
 800203e:	461a      	mov	r2, r3
 8002040:	4b8b      	ldr	r3, [pc, #556]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002042:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8002044:	4b8a      	ldr	r3, [pc, #552]	; (8002270 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d106      	bne.n	800205a <HAL_TIM_PeriodElapsedCallback+0x42>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 800204c:	4887      	ldr	r0, [pc, #540]	; (800226c <HAL_TIM_PeriodElapsedCallback+0x254>)
 800204e:	f7fe fbcd 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	4b87      	ldr	r3, [pc, #540]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002058:	801a      	strh	r2, [r3, #0]

//		encoderJ2.AMT21_Read();
//		HALENCJ2OK = encoderJ2.AMT21_Check_Value();


		encoderJ3.AMT21_Read();
 800205a:	4887      	ldr	r0, [pc, #540]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x260>)
 800205c:	f7fe fb33 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8002060:	4885      	ldr	r0, [pc, #532]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002062:	f7fe fb5f 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8002066:	4603      	mov	r3, r0
 8002068:	461a      	mov	r2, r3
 800206a:	4b84      	ldr	r3, [pc, #528]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x264>)
 800206c:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 800206e:	4b83      	ldr	r3, [pc, #524]	; (800227c <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d106      	bne.n	8002084 <HAL_TIM_PeriodElapsedCallback+0x6c>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
 8002076:	4880      	ldr	r0, [pc, #512]	; (8002278 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002078:	f7fe fbb8 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 800207c:	4603      	mov	r3, r0
 800207e:	461a      	mov	r2, r3
 8002080:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002082:	801a      	strh	r2, [r3, #0]
		}

		stepperJ1.StepperSetFrequency(dq1*3.0);
 8002084:	4b7f      	ldr	r3, [pc, #508]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b25b      	sxtb	r3, r3
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002092:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002096:	ee27 7b06 	vmul.f64	d7, d7, d6
 800209a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800209e:	eeb0 0a67 	vmov.f32	s0, s15
 80020a2:	4879      	ldr	r0, [pc, #484]	; (8002288 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80020a4:	f7fe fc44 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
		stepperJ3.StepperSetFrequency(dq3*4.0);
 80020a8:	4b78      	ldr	r3, [pc, #480]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x274>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b25b      	sxtb	r3, r3
 80020ae:	ee07 3a90 	vmov	s15, r3
 80020b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80020b6:	eeb1 6b00 	vmov.f64	d6, #16	; 0x40800000  4.0
 80020ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020be:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020c2:	eeb0 0a67 	vmov.f32	s0, s15
 80020c6:	4872      	ldr	r0, [pc, #456]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80020c8:	f7fe fc32 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
//		stepperJ1.StepperOpenLoopSpeed(u_q1/50.0);
//		stepperJ3.StepperOpenLoopSpeed(u_q3/50.0);


	}
	if (htim == &htim7) { 	//
 80020cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020d0:	4a70      	ldr	r2, [pc, #448]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	f040 8251 	bne.w	800257a <HAL_TIM_PeriodElapsedCallback+0x562>
//			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
//		}



	    float t_2 = t*t;
 80020d8:	4b6f      	ldr	r3, [pc, #444]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80020da:	ed93 7a00 	vldr	s14, [r3]
 80020de:	4b6e      	ldr	r3, [pc, #440]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80020e0:	edd3 7a00 	vldr	s15, [r3]
 80020e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	    float t_3 = t*t*t;
 80020ec:	4b6a      	ldr	r3, [pc, #424]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80020ee:	ed93 7a00 	vldr	s14, [r3]
 80020f2:	4b69      	ldr	r3, [pc, #420]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80020f4:	edd3 7a00 	vldr	s15, [r3]
 80020f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020fc:	4b66      	ldr	r3, [pc, #408]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80020fe:	edd3 7a00 	vldr	s15, [r3]
 8002102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002106:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

	    fcb_joint3.Goal_Position =  C0_q1 + (C2_q1*t_2) - (C3_q1*t_3);
 800210a:	4b64      	ldr	r3, [pc, #400]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x284>)
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002114:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002118:	4b61      	ldr	r3, [pc, #388]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800211a:	edd3 7a00 	vldr	s15, [r3]
 800211e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002122:	4b60      	ldr	r3, [pc, #384]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002124:	edd3 6a00 	vldr	s13, [r3]
 8002128:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800212c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002134:	4b52      	ldr	r3, [pc, #328]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002136:	edc3 7a01 	vstr	s15, [r3, #4]

//	    kalman_pos = fcb_joint1.Goal_Position;
	    kalman_pos = (fcb_joint1.Old_p - fcb_joint1.Encoder);
 800213a:	4b4e      	ldr	r3, [pc, #312]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800213c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8002140:	4b4c      	ldr	r3, [pc, #304]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	b21b      	sxth	r3, r3
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002152:	4b55      	ldr	r3, [pc, #340]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002154:	edc3 7a00 	vstr	s15, [r3]

	    kalman_velo_input =  kalman_pos ;
 8002158:	4b53      	ldr	r3, [pc, #332]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a53      	ldr	r2, [pc, #332]	; (80022ac <HAL_TIM_PeriodElapsedCallback+0x294>)
 800215e:	6013      	str	r3, [r2, #0]

	    if (direction_traj == 1){
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	bf0c      	ite	eq
 8002168:	2301      	moveq	r3, #1
 800216a:	2300      	movne	r3, #0
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 80a2 	beq.w	80022b8 <HAL_TIM_PeriodElapsedCallback+0x2a0>
	    	fcb_joint1.Goal_Position = unwrap_pose + (C0_q1 + (C2_q1*t_2) - (C3_q1*t_3)) - 0.8 ;
 8002174:	4b49      	ldr	r3, [pc, #292]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002176:	ed93 7a00 	vldr	s14, [r3]
 800217a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800217e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002182:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	ee37 7a27 	vadd.f32	s14, s14, s15
 800218c:	4b45      	ldr	r3, [pc, #276]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800218e:	edd3 6a00 	vldr	s13, [r3]
 8002192:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002196:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800219a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800219e:	4b45      	ldr	r3, [pc, #276]	; (80022b4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021ac:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 8002260 <HAL_TIM_PeriodElapsedCallback+0x248>
 80021b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 80021b4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80021b8:	4b2e      	ldr	r3, [pc, #184]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80021ba:	edc3 7a01 	vstr	s15, [r3, #4]
	    	fcb_joint1.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * -2 ;
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x284>)
 80021c0:	edd3 7a00 	vldr	s15, [r3]
 80021c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021c8:	ee37 6b07 	vadd.f64	d6, d7, d7
 80021cc:	4b32      	ldr	r3, [pc, #200]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021d6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80021da:	4b32      	ldr	r3, [pc, #200]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 80021dc:	edd3 7a00 	vldr	s15, [r3]
 80021e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021e4:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80021e8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80021ec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80021f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021f4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80021f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80021fc:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002200:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002204:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002208:	4b1a      	ldr	r3, [pc, #104]	; (8002274 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800220a:	edc3 7a02 	vstr	s15, [r3, #8]
	    	fcb_joint3.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * -2 ;
 800220e:	4b23      	ldr	r3, [pc, #140]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002218:	ee37 6b07 	vadd.f64	d6, d7, d7
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002226:	ee26 6b07 	vmul.f64	d6, d6, d7
 800222a:	4b1e      	ldr	r3, [pc, #120]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002234:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002238:	ee27 5b05 	vmul.f64	d5, d7, d5
 800223c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002240:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002244:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002248:	ee36 7b47 	vsub.f64	d7, d6, d7
 800224c:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002250:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002254:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002258:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800225a:	edc3 7a02 	vstr	s15, [r3, #8]
 800225e:	e09c      	b.n	800239a <HAL_TIM_PeriodElapsedCallback+0x382>
 8002260:	9999999a 	.word	0x9999999a
 8002264:	3fe99999 	.word	0x3fe99999
 8002268:	2400066c 	.word	0x2400066c
 800226c:	2400024c 	.word	0x2400024c
 8002270:	240002d4 	.word	0x240002d4
 8002274:	2400030c 	.word	0x2400030c
 8002278:	24000268 	.word	0x24000268
 800227c:	240002d5 	.word	0x240002d5
 8002280:	24000414 	.word	0x24000414
 8002284:	24000214 	.word	0x24000214
 8002288:	24000284 	.word	0x24000284
 800228c:	24000216 	.word	0x24000216
 8002290:	240002ac 	.word	0x240002ac
 8002294:	240008cc 	.word	0x240008cc
 8002298:	240002e0 	.word	0x240002e0
 800229c:	240002e4 	.word	0x240002e4
 80022a0:	24000004 	.word	0x24000004
 80022a4:	240002e8 	.word	0x240002e8
 80022a8:	240002f4 	.word	0x240002f4
 80022ac:	24000304 	.word	0x24000304
 80022b0:	240002d8 	.word	0x240002d8
 80022b4:	24000308 	.word	0x24000308
	    }
	    else
	    {
	    	fcb_joint1.Goal_Position = unwrap_pose - (C0_q1 + (C2_q1*t_2) - (C3_q1*t_3)) + 0.8;
 80022b8:	4bb7      	ldr	r3, [pc, #732]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x580>)
 80022ba:	ed93 7a00 	vldr	s14, [r3]
 80022be:	4bb7      	ldr	r3, [pc, #732]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x584>)
 80022c0:	edd3 6a00 	vldr	s13, [r3]
 80022c4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80022c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022cc:	4bb4      	ldr	r3, [pc, #720]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x588>)
 80022ce:	edd3 7a00 	vldr	s15, [r3]
 80022d2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80022d6:	4bb3      	ldr	r3, [pc, #716]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 80022d8:	ed93 6a00 	vldr	s12, [r3]
 80022dc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80022e0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022e4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022f0:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8002588 <HAL_TIM_PeriodElapsedCallback+0x570>
 80022f4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80022f8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022fc:	4baa      	ldr	r3, [pc, #680]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80022fe:	edc3 7a01 	vstr	s15, [r3, #4]
	    	fcb_joint1.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * 2 ;
 8002302:	4ba6      	ldr	r3, [pc, #664]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002304:	edd3 7a00 	vldr	s15, [r3]
 8002308:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800230c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002310:	4ba6      	ldr	r3, [pc, #664]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002312:	edd3 7a00 	vldr	s15, [r3]
 8002316:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800231a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800231e:	4ba1      	ldr	r3, [pc, #644]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002328:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800232c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002330:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002334:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002338:	ee25 7b07 	vmul.f64	d7, d5, d7
 800233c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002340:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002344:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002348:	4b97      	ldr	r3, [pc, #604]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800234a:	edc3 7a02 	vstr	s15, [r3, #8]
	    	fcb_joint3.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * 2 ;
 800234e:	4b93      	ldr	r3, [pc, #588]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x584>)
 8002350:	edd3 7a00 	vldr	s15, [r3]
 8002354:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002358:	ee37 6b07 	vadd.f64	d6, d7, d7
 800235c:	4b93      	ldr	r3, [pc, #588]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x594>)
 800235e:	edd3 7a00 	vldr	s15, [r3]
 8002362:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002366:	ee26 6b07 	vmul.f64	d6, d6, d7
 800236a:	4b8e      	ldr	r3, [pc, #568]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x58c>)
 800236c:	edd3 7a00 	vldr	s15, [r3]
 8002370:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002374:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002378:	ee27 5b05 	vmul.f64	d5, d7, d5
 800237c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002380:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002384:	ee25 7b07 	vmul.f64	d7, d5, d7
 8002388:	ee36 7b47 	vsub.f64	d7, d6, d7
 800238c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8002390:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002394:	4b86      	ldr	r3, [pc, #536]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002396:	edc3 7a02 	vstr	s15, [r3, #8]


//		fcb_joint1.Goal_Velocity = sin(0.314 * 2 * t) * 2000;
//		fcb_joint3.Goal_Velocity = sin(0.314 * 2 * t) * 4000;

	    chess_board_ang = chessboard_angular_velocity * t;
 800239a:	4b86      	ldr	r3, [pc, #536]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x59c>)
 800239c:	ed93 7a00 	vldr	s14, [r3]
 80023a0:	4b82      	ldr	r3, [pc, #520]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x594>)
 80023a2:	edd3 7a00 	vldr	s15, [r3]
 80023a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023aa:	4b83      	ldr	r3, [pc, #524]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 80023ac:	edc3 7a00 	vstr	s15, [r3]

//		setpointJ1 = Goal_velocity_q1;
//		setpointJ3 = Goal_velocity_q3;


		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 80023b0:	4b7d      	ldr	r3, [pc, #500]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80023b2:	ed93 7a01 	vldr	s14, [r3, #4]
 80023b6:	4b7c      	ldr	r3, [pc, #496]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	b21b      	sxth	r3, r3
 80023bc:	ee07 3a90 	vmov	s15, r3
 80023c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c8:	4b77      	ldr	r3, [pc, #476]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80023ca:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 80023ce:	4b78      	ldr	r3, [pc, #480]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80023d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80023d4:	4b76      	ldr	r3, [pc, #472]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80023d6:	881b      	ldrh	r3, [r3, #0]
 80023d8:	b21b      	sxth	r3, r3
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023e6:	4b72      	ldr	r3, [pc, #456]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80023e8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 80023ec:	4b6e      	ldr	r3, [pc, #440]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80023ee:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 80023f2:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80023f4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80023f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fc:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80023fe:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8002402:	4b6b      	ldr	r3, [pc, #428]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002404:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002408:	4b69      	ldr	r3, [pc, #420]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800240a:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800240e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002412:	4b67      	ldr	r3, [pc, #412]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002414:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

		fcb_joint1.Kp_p = 0.0 ;
 8002418:	4b63      	ldr	r3, [pc, #396]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	61da      	str	r2, [r3, #28]
		fcb_joint1.Ki_p = 0.0 ;
 8002420:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	621a      	str	r2, [r3, #32]
		fcb_joint1.Kd_p = 0.0 ;
 8002428:	4b5f      	ldr	r3, [pc, #380]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800242a:	f04f 0200 	mov.w	r2, #0
 800242e:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint1.Kp_v = 0.0 ;
 8002430:	4b5d      	ldr	r3, [pc, #372]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint1.Ki_v = 0.0 ;
 8002438:	4b5b      	ldr	r3, [pc, #364]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint1.Kd_v = 0.0 ;
 8002440:	4b59      	ldr	r3, [pc, #356]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	631a      	str	r2, [r3, #48]	; 0x30

		fcb_joint3.Kp_p = 0.0 ;
 8002448:	4b59      	ldr	r3, [pc, #356]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	61da      	str	r2, [r3, #28]
		fcb_joint3.Ki_p = 0.0 ;
 8002450:	4b57      	ldr	r3, [pc, #348]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	621a      	str	r2, [r3, #32]
		fcb_joint3.Kd_p = 0.0 ;
 8002458:	4b55      	ldr	r3, [pc, #340]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800245a:	f04f 0200 	mov.w	r2, #0
 800245e:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint3.Kp_v = 0.0 ;
 8002460:	4b53      	ldr	r3, [pc, #332]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint3.Ki_v = 0.0 ;
 8002468:	4b51      	ldr	r3, [pc, #324]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint3.Kd_v = 0.0 ;
 8002470:	4b4f      	ldr	r3, [pc, #316]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	631a      	str	r2, [r3, #48]	; 0x30

//		KalmanFilter(float theta_k,float kalman_pos,float kalman_velo,float P11,float P12,float P21,float P22);
//		KalmanFilter(fcb_joint1.Encoder/ 2609.0 , X11, X21, p11, p12, p21, p22, fcb_joint1);

		fcb_joint1 = KalmanFilter(fcb_joint1.Encoder/ 2609.0 ,fcb_joint1);
 8002478:	4b4b      	ldr	r3, [pc, #300]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800247a:	881b      	ldrh	r3, [r3, #0]
 800247c:	b21b      	sxth	r3, r3
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002486:	ed9f 5b42 	vldr	d5, [pc, #264]	; 8002590 <HAL_TIM_PeriodElapsedCallback+0x578>
 800248a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800248e:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 8002492:	4e45      	ldr	r6, [pc, #276]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002494:	463d      	mov	r5, r7
 8002496:	4c44      	ldr	r4, [pc, #272]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002498:	4668      	mov	r0, sp
 800249a:	f104 030c 	add.w	r3, r4, #12
 800249e:	2278      	movs	r2, #120	; 0x78
 80024a0:	4619      	mov	r1, r3
 80024a2:	f00c f8cf 	bl	800e644 <memcpy>
 80024a6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80024aa:	eeb0 0a48 	vmov.f32	s0, s16
 80024ae:	4628      	mov	r0, r5
 80024b0:	f7ff f992 	bl	80017d8 <_Z12KalmanFilterf11robot_joint>
 80024b4:	4630      	mov	r0, r6
 80024b6:	463b      	mov	r3, r7
 80024b8:	2284      	movs	r2, #132	; 0x84
 80024ba:	4619      	mov	r1, r3
 80024bc:	f00c f8c2 	bl	800e644 <memcpy>
//											  (fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_Error_p));
//
//		fcb_joint1.Output_Stepper_Frequency = (fcb_joint1.Kp_p * fcb_joint1.Error_p);
//		fcb_joint3.Output_Stepper_Frequency = (fcb_joint3.Kp_p * fcb_joint3.Error_p);

		fcb_joint1.Output_Stepper_Frequency = fcb_joint1.Goal_Position;
 80024c0:	4b39      	ldr	r3, [pc, #228]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4a38      	ldr	r2, [pc, #224]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80024c6:	6553      	str	r3, [r2, #84]	; 0x54
		fcb_joint3.Output_Stepper_Frequency = fcb_joint3.Goal_Position;
 80024c8:	4b39      	ldr	r3, [pc, #228]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a38      	ldr	r2, [pc, #224]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80024ce:	6553      	str	r3, [r2, #84]	; 0x54



		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 80024d0:	4b35      	ldr	r3, [pc, #212]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80024d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d4:	4a34      	ldr	r2, [pc, #208]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80024d6:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 80024d8:	4b35      	ldr	r3, [pc, #212]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80024da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024dc:	4a34      	ldr	r2, [pc, #208]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80024de:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint1.Old_p = fcb_joint1.Encoder;
 80024e0:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	b21b      	sxth	r3, r3
 80024e6:	ee07 3a90 	vmov	s15, r3
 80024ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ee:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 80024f0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 80024f4:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b21b      	sxth	r3, r3
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002502:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 8002504:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
//		stepperJ1.StepperSetFrequency(300.0f);

//		stepperJ1.StepperSetFrequency(uJ1);
//		stepperJ3.StepperSetFrequency(0.0f);

		stepperJ1.StepperOpenLoopSpeed(fcb_joint1.Goal_Velocity);
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 800250a:	edd3 7a02 	vldr	s15, [r3, #8]
 800250e:	eeb0 0a67 	vmov.f32	s0, s15
 8002512:	482a      	ldr	r0, [pc, #168]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8002514:	f7fe fcc0 	bl	8000e98 <_ZN7Stepper20StepperOpenLoopSpeedEf>
		stepperJ3.StepperOpenLoopSpeed(fcb_joint3.Goal_Velocity);
 8002518:	4b25      	ldr	r3, [pc, #148]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x598>)
 800251a:	edd3 7a02 	vldr	s15, [r3, #8]
 800251e:	eeb0 0a67 	vmov.f32	s0, s15
 8002522:	4827      	ldr	r0, [pc, #156]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8002524:	f7fe fcb8 	bl	8000e98 <_ZN7Stepper20StepperOpenLoopSpeedEf>

		#endif

		t = t + (sample_time_1000) ;
 8002528:	4b20      	ldr	r3, [pc, #128]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x594>)
 800252a:	ed93 7a00 	vldr	s14, [r3]
 800252e:	4b25      	ldr	r3, [pc, #148]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 8002530:	edd3 7a00 	vldr	s15, [r3]
 8002534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002538:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x594>)
 800253a:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Time)
 800253e:	4b1b      	ldr	r3, [pc, #108]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002540:	ed93 7a00 	vldr	s14, [r3]
 8002544:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 8002546:	edd3 7a00 	vldr	s15, [r3]
 800254a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800254e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002552:	bfac      	ite	ge
 8002554:	2301      	movge	r3, #1
 8002556:	2300      	movlt	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00d      	beq.n	800257a <HAL_TIM_PeriodElapsedCallback+0x562>
		{
			t = 0.0;
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x594>)
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
			direction_traj ^= 1;
 8002566:	4b19      	ldr	r3, [pc, #100]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f083 0301 	eor.w	r3, r3, #1
 800256e:	4a17      	ldr	r2, [pc, #92]	; (80025cc <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8002570:	6013      	str	r3, [r2, #0]
			unwrap_pose =  fcb_joint1.Goal_Position;
 8002572:	4b0d      	ldr	r3, [pc, #52]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x590>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x580>)
 8002578:	6013      	str	r3, [r2, #0]
		}

	}
}
 800257a:	bf00      	nop
 800257c:	37ac      	adds	r7, #172	; 0xac
 800257e:	46bd      	mov	sp, r7
 8002580:	ecbd 8b02 	vpop	{d8}
 8002584:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002586:	bf00      	nop
 8002588:	9999999a 	.word	0x9999999a
 800258c:	3fe99999 	.word	0x3fe99999
 8002590:	00000000 	.word	0x00000000
 8002594:	40a46200 	.word	0x40a46200
 8002598:	24000308 	.word	0x24000308
 800259c:	240002e4 	.word	0x240002e4
 80025a0:	24000004 	.word	0x24000004
 80025a4:	240002e8 	.word	0x240002e8
 80025a8:	2400030c 	.word	0x2400030c
 80025ac:	240002e0 	.word	0x240002e0
 80025b0:	24000414 	.word	0x24000414
 80025b4:	24000010 	.word	0x24000010
 80025b8:	240002dc 	.word	0x240002dc
 80025bc:	24000284 	.word	0x24000284
 80025c0:	240002ac 	.word	0x240002ac
 80025c4:	2400000c 	.word	0x2400000c
 80025c8:	24000000 	.word	0x24000000
 80025cc:	240002d8 	.word	0x240002d8

080025d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025d4:	f001 ffae 	bl	8004534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025d8:	f000 f95a 	bl	8002890 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025dc:	f7fe fd28 	bl	8001030 <MX_GPIO_Init>
  MX_DMA_Init();
 80025e0:	f7fe fce6 	bl	8000fb0 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80025e4:	f001 fcfa 	bl	8003fdc <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80025e8:	f000 fefe 	bl	80033e8 <MX_TIM2_Init>
  MX_UART4_Init();
 80025ec:	f001 fc54 	bl	8003e98 <MX_UART4_Init>
  MX_TIM4_Init();
 80025f0:	f000 ffea 	bl	80035c8 <MX_TIM4_Init>
  MX_SPI3_Init();
 80025f4:	f000 fb4c 	bl	8002c90 <MX_SPI3_Init>
  MX_TIM1_Init();
 80025f8:	f000 fe48 	bl	800328c <MX_TIM1_Init>
  MX_TIM3_Init();
 80025fc:	f000 ff6c 	bl	80034d8 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002600:	f001 f85a 	bl	80036b8 <MX_TIM5_Init>
  MX_TIM15_Init();
 8002604:	f001 f994 	bl	8003930 <MX_TIM15_Init>
  MX_CRC_Init();
 8002608:	f7fe fc82 	bl	8000f10 <MX_CRC_Init>
  MX_UART7_Init();
 800260c:	f001 fc98 	bl	8003f40 <MX_UART7_Init>
  MX_TIM6_Init();
 8002610:	f001 f8a0 	bl	8003754 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002614:	f001 f8d4 	bl	80037c0 <MX_TIM7_Init>
  MX_TIM12_Init();
 8002618:	f001 f908 	bl	800382c <MX_TIM12_Init>
  MX_TIM13_Init();
 800261c:	f001 f940 	bl	80038a0 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002620:	f001 f962 	bl	80038e8 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8002624:	2201      	movs	r2, #1
 8002626:	2101      	movs	r1, #1
 8002628:	487c      	ldr	r0, [pc, #496]	; (800281c <main+0x24c>)
 800262a:	f005 fb25 	bl	8007c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800262e:	2201      	movs	r2, #1
 8002630:	2102      	movs	r1, #2
 8002632:	487b      	ldr	r0, [pc, #492]	; (8002820 <main+0x250>)
 8002634:	f005 fb20 	bl	8007c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002638:	2200      	movs	r2, #0
 800263a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800263e:	4877      	ldr	r0, [pc, #476]	; (800281c <main+0x24c>)
 8002640:	f005 fb1a 	bl	8007c78 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 8002644:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8002824 <main+0x254>
 8002648:	4877      	ldr	r0, [pc, #476]	; (8002828 <main+0x258>)
 800264a:	f7fe f971 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(16);
 800264e:	2110      	movs	r1, #16
 8002650:	4875      	ldr	r0, [pc, #468]	; (8002828 <main+0x258>)
 8002652:	f7fe fc09 	bl	8000e68 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(3);
 8002656:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800265a:	4873      	ldr	r0, [pc, #460]	; (8002828 <main+0x258>)
 800265c:	f7fe fbe0 	bl	8000e20 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8002660:	4871      	ldr	r0, [pc, #452]	; (8002828 <main+0x258>)
 8002662:	f7fe f954 	bl	800090e <_ZN7Stepper13StepperEnableEv>
//	stepperJ2.StepperSetMicrostep(1);
//	stepperJ2.StepperSetRatio(1);
//	stepperJ1.StepperSetFrequency(15842.0f);
	stepperJ3.StepperSetFrequency(0.0f);
 8002666:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8002824 <main+0x254>
 800266a:	4870      	ldr	r0, [pc, #448]	; (800282c <main+0x25c>)
 800266c:	f7fe f960 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(8);
 8002670:	2108      	movs	r1, #8
 8002672:	486e      	ldr	r0, [pc, #440]	; (800282c <main+0x25c>)
 8002674:	f7fe fbf8 	bl	8000e68 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 8002678:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 800267c:	486b      	ldr	r0, [pc, #428]	; (800282c <main+0x25c>)
 800267e:	f7fe fbcf 	bl	8000e20 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8002682:	486a      	ldr	r0, [pc, #424]	; (800282c <main+0x25c>)
 8002684:	f7fe f943 	bl	800090e <_ZN7Stepper13StepperEnableEv>

//	stepperJ4.StepperSetMicrostep(1);
//	stepperJ4.StepperSetRatio(1);
#endif

	HAL_TIM_Base_Start_IT(&htim5);
 8002688:	4869      	ldr	r0, [pc, #420]	; (8002830 <main+0x260>)
 800268a:	f007 fff5 	bl	800a678 <HAL_TIM_Base_Start_IT>
//	HAL_TIM_Base_Start_IT(&htim7);
//	HAL_TIM_Base_Start_IT(&htim12);
//	HAL_TIM_Base_Start_IT(&htim14);

	// Encoder
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 800268e:	2214      	movs	r2, #20
 8002690:	4968      	ldr	r1, [pc, #416]	; (8002834 <main+0x264>)
 8002692:	4869      	ldr	r0, [pc, #420]	; (8002838 <main+0x268>)
 8002694:	f00b fb97 	bl	800ddc6 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002698:	4b68      	ldr	r3, [pc, #416]	; (800283c <main+0x26c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a68      	ldr	r2, [pc, #416]	; (8002840 <main+0x270>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d04a      	beq.n	8002738 <main+0x168>
 80026a2:	4b66      	ldr	r3, [pc, #408]	; (800283c <main+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a67      	ldr	r2, [pc, #412]	; (8002844 <main+0x274>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d045      	beq.n	8002738 <main+0x168>
 80026ac:	4b63      	ldr	r3, [pc, #396]	; (800283c <main+0x26c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a65      	ldr	r2, [pc, #404]	; (8002848 <main+0x278>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d040      	beq.n	8002738 <main+0x168>
 80026b6:	4b61      	ldr	r3, [pc, #388]	; (800283c <main+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a64      	ldr	r2, [pc, #400]	; (800284c <main+0x27c>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d03b      	beq.n	8002738 <main+0x168>
 80026c0:	4b5e      	ldr	r3, [pc, #376]	; (800283c <main+0x26c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a62      	ldr	r2, [pc, #392]	; (8002850 <main+0x280>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d036      	beq.n	8002738 <main+0x168>
 80026ca:	4b5c      	ldr	r3, [pc, #368]	; (800283c <main+0x26c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a61      	ldr	r2, [pc, #388]	; (8002854 <main+0x284>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d031      	beq.n	8002738 <main+0x168>
 80026d4:	4b59      	ldr	r3, [pc, #356]	; (800283c <main+0x26c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a5f      	ldr	r2, [pc, #380]	; (8002858 <main+0x288>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d02c      	beq.n	8002738 <main+0x168>
 80026de:	4b57      	ldr	r3, [pc, #348]	; (800283c <main+0x26c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a5e      	ldr	r2, [pc, #376]	; (800285c <main+0x28c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d027      	beq.n	8002738 <main+0x168>
 80026e8:	4b54      	ldr	r3, [pc, #336]	; (800283c <main+0x26c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a5c      	ldr	r2, [pc, #368]	; (8002860 <main+0x290>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d022      	beq.n	8002738 <main+0x168>
 80026f2:	4b52      	ldr	r3, [pc, #328]	; (800283c <main+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a5b      	ldr	r2, [pc, #364]	; (8002864 <main+0x294>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d01d      	beq.n	8002738 <main+0x168>
 80026fc:	4b4f      	ldr	r3, [pc, #316]	; (800283c <main+0x26c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a59      	ldr	r2, [pc, #356]	; (8002868 <main+0x298>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d018      	beq.n	8002738 <main+0x168>
 8002706:	4b4d      	ldr	r3, [pc, #308]	; (800283c <main+0x26c>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a58      	ldr	r2, [pc, #352]	; (800286c <main+0x29c>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d013      	beq.n	8002738 <main+0x168>
 8002710:	4b4a      	ldr	r3, [pc, #296]	; (800283c <main+0x26c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a56      	ldr	r2, [pc, #344]	; (8002870 <main+0x2a0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d00e      	beq.n	8002738 <main+0x168>
 800271a:	4b48      	ldr	r3, [pc, #288]	; (800283c <main+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a55      	ldr	r2, [pc, #340]	; (8002874 <main+0x2a4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d009      	beq.n	8002738 <main+0x168>
 8002724:	4b45      	ldr	r3, [pc, #276]	; (800283c <main+0x26c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a53      	ldr	r2, [pc, #332]	; (8002878 <main+0x2a8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d004      	beq.n	8002738 <main+0x168>
 800272e:	4b43      	ldr	r3, [pc, #268]	; (800283c <main+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a52      	ldr	r2, [pc, #328]	; (800287c <main+0x2ac>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d108      	bne.n	800274a <main+0x17a>
 8002738:	4b40      	ldr	r3, [pc, #256]	; (800283c <main+0x26c>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4b3f      	ldr	r3, [pc, #252]	; (800283c <main+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0208 	bic.w	r2, r2, #8
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	e007      	b.n	800275a <main+0x18a>
 800274a:	4b3c      	ldr	r3, [pc, #240]	; (800283c <main+0x26c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4b3a      	ldr	r3, [pc, #232]	; (800283c <main+0x26c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0204 	bic.w	r2, r2, #4
 8002758:	601a      	str	r2, [r3, #0]
//	stepperJ1.StepperOpenLoopSpeed(1.00f);

	// Backup
	fcb_joint1.Kp_p = 0.0 ;
 800275a:	4b49      	ldr	r3, [pc, #292]	; (8002880 <main+0x2b0>)
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	61da      	str	r2, [r3, #28]
	fcb_joint1.Kp_v = 0.0 ;
 8002762:	4b47      	ldr	r3, [pc, #284]	; (8002880 <main+0x2b0>)
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint1.Ki_p = 0.0 ;
 800276a:	4b45      	ldr	r3, [pc, #276]	; (8002880 <main+0x2b0>)
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	621a      	str	r2, [r3, #32]
	fcb_joint1.Ki_v = 0.0 ;
 8002772:	4b43      	ldr	r3, [pc, #268]	; (8002880 <main+0x2b0>)
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint1.Kd_p = 0.0 ;
 800277a:	4b41      	ldr	r3, [pc, #260]	; (8002880 <main+0x2b0>)
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint1.Kd_p = 0.0 ;
 8002782:	4b3f      	ldr	r3, [pc, #252]	; (8002880 <main+0x2b0>)
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint2.Kp_p = 0.0 ;
 800278a:	4b3e      	ldr	r3, [pc, #248]	; (8002884 <main+0x2b4>)
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	61da      	str	r2, [r3, #28]
	fcb_joint2.Kp_v = 0.0 ;
 8002792:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <main+0x2b4>)
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint2.Ki_p = 0.0 ;
 800279a:	4b3a      	ldr	r3, [pc, #232]	; (8002884 <main+0x2b4>)
 800279c:	f04f 0200 	mov.w	r2, #0
 80027a0:	621a      	str	r2, [r3, #32]
	fcb_joint2.Ki_v = 0.0 ;
 80027a2:	4b38      	ldr	r3, [pc, #224]	; (8002884 <main+0x2b4>)
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint2.Kd_p = 0.0 ;
 80027aa:	4b36      	ldr	r3, [pc, #216]	; (8002884 <main+0x2b4>)
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint2.Kd_p = 0.0 ;
 80027b2:	4b34      	ldr	r3, [pc, #208]	; (8002884 <main+0x2b4>)
 80027b4:	f04f 0200 	mov.w	r2, #0
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint3.Kp_p = 0.0 ;
 80027ba:	4b33      	ldr	r3, [pc, #204]	; (8002888 <main+0x2b8>)
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	61da      	str	r2, [r3, #28]
	fcb_joint3.Kp_v = 0.0 ;
 80027c2:	4b31      	ldr	r3, [pc, #196]	; (8002888 <main+0x2b8>)
 80027c4:	f04f 0200 	mov.w	r2, #0
 80027c8:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint3.Ki_p = 0.0 ;
 80027ca:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <main+0x2b8>)
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	621a      	str	r2, [r3, #32]
	fcb_joint3.Ki_v = 0.0 ;
 80027d2:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <main+0x2b8>)
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint3.Kd_p = 0.0 ;
 80027da:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <main+0x2b8>)
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint3.Kd_p = 0.0 ;
 80027e2:	4b29      	ldr	r3, [pc, #164]	; (8002888 <main+0x2b8>)
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint4.Kp_p = 0.0 ;
 80027ea:	4b28      	ldr	r3, [pc, #160]	; (800288c <main+0x2bc>)
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	61da      	str	r2, [r3, #28]
	fcb_joint4.Kp_v = 0.0 ;
 80027f2:	4b26      	ldr	r3, [pc, #152]	; (800288c <main+0x2bc>)
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint4.Ki_p = 0.0 ;
 80027fa:	4b24      	ldr	r3, [pc, #144]	; (800288c <main+0x2bc>)
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	621a      	str	r2, [r3, #32]
	fcb_joint4.Ki_v = 0.0 ;
 8002802:	4b22      	ldr	r3, [pc, #136]	; (800288c <main+0x2bc>)
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint4.Kd_p = 0.0 ;
 800280a:	4b20      	ldr	r3, [pc, #128]	; (800288c <main+0x2bc>)
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint4.Kd_p = 0.0 ;
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <main+0x2bc>)
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800281a:	e7fe      	b.n	800281a <main+0x24a>
 800281c:	58020400 	.word	0x58020400
 8002820:	58021000 	.word	0x58021000
 8002824:	00000000 	.word	0x00000000
 8002828:	24000284 	.word	0x24000284
 800282c:	240002ac 	.word	0x240002ac
 8002830:	2400066c 	.word	0x2400066c
 8002834:	24000234 	.word	0x24000234
 8002838:	24000a98 	.word	0x24000a98
 800283c:	24000a20 	.word	0x24000a20
 8002840:	40020010 	.word	0x40020010
 8002844:	40020028 	.word	0x40020028
 8002848:	40020040 	.word	0x40020040
 800284c:	40020058 	.word	0x40020058
 8002850:	40020070 	.word	0x40020070
 8002854:	40020088 	.word	0x40020088
 8002858:	400200a0 	.word	0x400200a0
 800285c:	400200b8 	.word	0x400200b8
 8002860:	40020410 	.word	0x40020410
 8002864:	40020428 	.word	0x40020428
 8002868:	40020440 	.word	0x40020440
 800286c:	40020458 	.word	0x40020458
 8002870:	40020470 	.word	0x40020470
 8002874:	40020488 	.word	0x40020488
 8002878:	400204a0 	.word	0x400204a0
 800287c:	400204b8 	.word	0x400204b8
 8002880:	2400030c 	.word	0x2400030c
 8002884:	24000390 	.word	0x24000390
 8002888:	24000414 	.word	0x24000414
 800288c:	24000498 	.word	0x24000498

08002890 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b09c      	sub	sp, #112	; 0x70
 8002894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800289a:	224c      	movs	r2, #76	; 0x4c
 800289c:	2100      	movs	r1, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	f00b fede 	bl	800e660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	2220      	movs	r2, #32
 80028a8:	2100      	movs	r1, #0
 80028aa:	4618      	mov	r0, r3
 80028ac:	f00b fed8 	bl	800e660 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80028b0:	2002      	movs	r0, #2
 80028b2:	f005 fa15 	bl	8007ce0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80028b6:	2300      	movs	r3, #0
 80028b8:	603b      	str	r3, [r7, #0]
 80028ba:	4b38      	ldr	r3, [pc, #224]	; (800299c <_Z18SystemClock_Configv+0x10c>)
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	4a37      	ldr	r2, [pc, #220]	; (800299c <_Z18SystemClock_Configv+0x10c>)
 80028c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028c4:	6193      	str	r3, [r2, #24]
 80028c6:	4b35      	ldr	r3, [pc, #212]	; (800299c <_Z18SystemClock_Configv+0x10c>)
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028ce:	603b      	str	r3, [r7, #0]
 80028d0:	4b33      	ldr	r3, [pc, #204]	; (80029a0 <_Z18SystemClock_Configv+0x110>)
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	4a32      	ldr	r2, [pc, #200]	; (80029a0 <_Z18SystemClock_Configv+0x110>)
 80028d6:	f043 0301 	orr.w	r3, r3, #1
 80028da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80028dc:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <_Z18SystemClock_Configv+0x110>)
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	603b      	str	r3, [r7, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80028e8:	4b2c      	ldr	r3, [pc, #176]	; (800299c <_Z18SystemClock_Configv+0x10c>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028f4:	bf14      	ite	ne
 80028f6:	2301      	movne	r3, #1
 80028f8:	2300      	moveq	r3, #0
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d000      	beq.n	8002902 <_Z18SystemClock_Configv+0x72>
 8002900:	e7f2      	b.n	80028e8 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002902:	2302      	movs	r3, #2
 8002904:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002906:	2301      	movs	r3, #1
 8002908:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800290a:	2340      	movs	r3, #64	; 0x40
 800290c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800290e:	2302      	movs	r3, #2
 8002910:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002912:	2300      	movs	r3, #0
 8002914:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002916:	2304      	movs	r3, #4
 8002918:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800291a:	233c      	movs	r3, #60	; 0x3c
 800291c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800291e:	2302      	movs	r3, #2
 8002920:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002922:	2306      	movs	r3, #6
 8002924:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002926:	2302      	movs	r3, #2
 8002928:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800292a:	230c      	movs	r3, #12
 800292c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800292e:	2300      	movs	r3, #0
 8002930:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002932:	2300      	movs	r3, #0
 8002934:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002936:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800293a:	4618      	mov	r0, r3
 800293c:	f005 fa0a 	bl	8007d54 <HAL_RCC_OscConfig>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	bf14      	ite	ne
 8002946:	2301      	movne	r3, #1
 8002948:	2300      	moveq	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8002950:	f000 f83e 	bl	80029d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002954:	233f      	movs	r3, #63	; 0x3f
 8002956:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002958:	2303      	movs	r3, #3
 800295a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002960:	2308      	movs	r3, #8
 8002962:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002964:	2340      	movs	r3, #64	; 0x40
 8002966:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002968:	2340      	movs	r3, #64	; 0x40
 800296a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800296c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002970:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002972:	2340      	movs	r3, #64	; 0x40
 8002974:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	2104      	movs	r1, #4
 800297a:	4618      	mov	r0, r3
 800297c:	f005 fe16 	bl	80085ac <HAL_RCC_ClockConfig>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	bf14      	ite	ne
 8002986:	2301      	movne	r3, #1
 8002988:	2300      	moveq	r3, #0
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8002990:	f000 f81e 	bl	80029d0 <Error_Handler>
  }
}
 8002994:	bf00      	nop
 8002996:	3770      	adds	r7, #112	; 0x70
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	58024800 	.word	0x58024800
 80029a0:	58000400 	.word	0x58000400

080029a4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]

}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	4603      	mov	r3, r0
 80029c0:	80fb      	strh	r3, [r7, #6]

}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
	...

080029d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80029d4:	2200      	movs	r2, #0
 80029d6:	2101      	movs	r1, #1
 80029d8:	4808      	ldr	r0, [pc, #32]	; (80029fc <Error_Handler+0x2c>)
 80029da:	f005 f94d 	bl	8007c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80029de:	2200      	movs	r2, #0
 80029e0:	2102      	movs	r1, #2
 80029e2:	4807      	ldr	r0, [pc, #28]	; (8002a00 <Error_Handler+0x30>)
 80029e4:	f005 f948 	bl	8007c78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80029e8:	2201      	movs	r2, #1
 80029ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029ee:	4803      	ldr	r0, [pc, #12]	; (80029fc <Error_Handler+0x2c>)
 80029f0:	f005 f942 	bl	8007c78 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029f4:	b672      	cpsid	i
}
 80029f6:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80029f8:	e7fe      	b.n	80029f8 <Error_Handler+0x28>
 80029fa:	bf00      	nop
 80029fc:	58020400 	.word	0x58020400
 8002a00:	58021000 	.word	0x58021000

08002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a0e:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8002a10:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	ee06 3a90 	vmov	s13, r3
 8002a1e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8002a22:	eeb0 1b46 	vmov.f64	d1, d6
 8002a26:	eeb0 0b47 	vmov.f64	d0, d7
 8002a2a:	f00b faad 	bl	800df88 <pow>
 8002a2e:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8002a32:	eeb0 0b47 	vmov.f64	d0, d7
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	f040 80c8 	bne.w	8002bde <_Z41__static_initialization_and_destruction_0ii+0x1a2>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a54:	4293      	cmp	r3, r2
 8002a56:	f040 80c2 	bne.w	8002bde <_Z41__static_initialization_and_destruction_0ii+0x1a2>
AMT21 encoderJ1(&huart4, 0xD4);
 8002a5a:	22d4      	movs	r2, #212	; 0xd4
 8002a5c:	496c      	ldr	r1, [pc, #432]	; (8002c10 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8002a5e:	486d      	ldr	r0, [pc, #436]	; (8002c14 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8002a60:	f7fd fe12 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8002a64:	22c4      	movs	r2, #196	; 0xc4
 8002a66:	496a      	ldr	r1, [pc, #424]	; (8002c10 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8002a68:	486b      	ldr	r0, [pc, #428]	; (8002c18 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002a6a:	f7fd fe0d 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8002a6e:	2320      	movs	r3, #32
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	496a      	ldr	r1, [pc, #424]	; (8002c20 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002a78:	486a      	ldr	r0, [pc, #424]	; (8002c24 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8002a7a:	f7fd fef9 	bl	8000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8002a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	4b68      	ldr	r3, [pc, #416]	; (8002c28 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8002a86:	2204      	movs	r2, #4
 8002a88:	4968      	ldr	r1, [pc, #416]	; (8002c2c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8002a8a:	4869      	ldr	r0, [pc, #420]	; (8002c30 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002a8c:	f7fd fef0 	bl	8000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
volatile const float C2_q1 = (3.0*C0_q1) / (Time*Time);
 8002a90:	4b68      	ldr	r3, [pc, #416]	; (8002c34 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a9a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002a9e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002aa2:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002aa4:	ed93 7a00 	vldr	s14, [r3]
 8002aa8:	4b63      	ldr	r3, [pc, #396]	; (8002c38 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab2:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002ab6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002aba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002abe:	4b5f      	ldr	r3, [pc, #380]	; (8002c3c <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8002ac0:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = (2.0*C0_q1) / (Time*Time*Time);
 8002ac4:	4b5b      	ldr	r3, [pc, #364]	; (8002c34 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8002ac6:	edd3 7a00 	vldr	s15, [r3]
 8002aca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ace:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002ad2:	4b59      	ldr	r3, [pc, #356]	; (8002c38 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002ad4:	ed93 7a00 	vldr	s14, [r3]
 8002ad8:	4b57      	ldr	r3, [pc, #348]	; (8002c38 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002ada:	edd3 7a00 	vldr	s15, [r3]
 8002ade:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ae2:	4b55      	ldr	r3, [pc, #340]	; (8002c38 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aec:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002af0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002af4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002af8:	4b51      	ldr	r3, [pc, #324]	; (8002c40 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8002afa:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = (3.0*C0_q3) / (Time*Time);
 8002afe:	4b51      	ldr	r3, [pc, #324]	; (8002c44 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8002b00:	edd3 7a00 	vldr	s15, [r3]
 8002b04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b08:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002b0c:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002b10:	4b49      	ldr	r3, [pc, #292]	; (8002c38 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002b12:	ed93 7a00 	vldr	s14, [r3]
 8002b16:	4b48      	ldr	r3, [pc, #288]	; (8002c38 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002b18:	edd3 7a00 	vldr	s15, [r3]
 8002b1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b20:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002b24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002b28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b2c:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8002b2e:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = (2.0*C0_q3) / (Time*Time*Time);
 8002b32:	4b44      	ldr	r3, [pc, #272]	; (8002c44 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b3c:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002b40:	4b3d      	ldr	r3, [pc, #244]	; (8002c38 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002b42:	ed93 7a00 	vldr	s14, [r3]
 8002b46:	4b3c      	ldr	r3, [pc, #240]	; (8002c38 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b50:	4b39      	ldr	r3, [pc, #228]	; (8002c38 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002b5e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002b62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b66:	4b39      	ldr	r3, [pc, #228]	; (8002c4c <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002b68:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt2 = pow(dt,2);
 8002b6c:	4b38      	ldr	r3, [pc, #224]	; (8002c50 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	2002      	movs	r0, #2
 8002b74:	eeb0 0a67 	vmov.f32	s0, s15
 8002b78:	f7ff ff44 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002b7c:	eeb0 7b40 	vmov.f64	d7, d0
 8002b80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b84:	4b33      	ldr	r3, [pc, #204]	; (8002c54 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8002b86:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt3 = pow(dt,3);
 8002b8a:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8002b8c:	edd3 7a00 	vldr	s15, [r3]
 8002b90:	2003      	movs	r0, #3
 8002b92:	eeb0 0a67 	vmov.f32	s0, s15
 8002b96:	f7ff ff35 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002b9a:	eeb0 7b40 	vmov.f64	d7, d0
 8002b9e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8002ba4:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt4 = pow(dt,4);
 8002ba8:	4b29      	ldr	r3, [pc, #164]	; (8002c50 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8002baa:	edd3 7a00 	vldr	s15, [r3]
 8002bae:	2004      	movs	r0, #4
 8002bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb4:	f7ff ff26 	bl	8002a04 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002bb8:	eeb0 7b40 	vmov.f64	d7, d0
 8002bbc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bc0:	4b26      	ldr	r3, [pc, #152]	; (8002c5c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8002bc2:	edc3 7a00 	vstr	s15, [r3]
fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;
 8002bc6:	4826      	ldr	r0, [pc, #152]	; (8002c60 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8002bc8:	f7fe fdd0 	bl	800176c <_ZN11robot_jointC1Ev>
 8002bcc:	4825      	ldr	r0, [pc, #148]	; (8002c64 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8002bce:	f7fe fdcd 	bl	800176c <_ZN11robot_jointC1Ev>
 8002bd2:	4825      	ldr	r0, [pc, #148]	; (8002c68 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8002bd4:	f7fe fdca 	bl	800176c <_ZN11robot_jointC1Ev>
 8002bd8:	4824      	ldr	r0, [pc, #144]	; (8002c6c <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8002bda:	f7fe fdc7 	bl	800176c <_ZN11robot_jointC1Ev>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d110      	bne.n	8002c06 <_Z41__static_initialization_and_destruction_0ii+0x1ca>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d10b      	bne.n	8002c06 <_Z41__static_initialization_and_destruction_0ii+0x1ca>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8002bee:	4810      	ldr	r0, [pc, #64]	; (8002c30 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002bf0:	f7fd fe82 	bl	80008f8 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8002bf4:	480b      	ldr	r0, [pc, #44]	; (8002c24 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8002bf6:	f7fd fe7f 	bl	80008f8 <_ZN7StepperD1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8002bfa:	4807      	ldr	r0, [pc, #28]	; (8002c18 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002bfc:	f7fd fd58 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8002c00:	4804      	ldr	r0, [pc, #16]	; (8002c14 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8002c02:	f7fd fd55 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 8002c06:	bf00      	nop
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	24000c18 	.word	0x24000c18
 8002c14:	2400024c 	.word	0x2400024c
 8002c18:	24000268 	.word	0x24000268
 8002c1c:	58020400 	.word	0x58020400
 8002c20:	240006b8 	.word	0x240006b8
 8002c24:	24000284 	.word	0x24000284
 8002c28:	58021000 	.word	0x58021000
 8002c2c:	24000620 	.word	0x24000620
 8002c30:	240002ac 	.word	0x240002ac
 8002c34:	24000004 	.word	0x24000004
 8002c38:	24000000 	.word	0x24000000
 8002c3c:	240002e4 	.word	0x240002e4
 8002c40:	240002e8 	.word	0x240002e8
 8002c44:	24000008 	.word	0x24000008
 8002c48:	240002ec 	.word	0x240002ec
 8002c4c:	240002f0 	.word	0x240002f0
 8002c50:	24000014 	.word	0x24000014
 8002c54:	240002f8 	.word	0x240002f8
 8002c58:	240002fc 	.word	0x240002fc
 8002c5c:	24000300 	.word	0x24000300
 8002c60:	2400030c 	.word	0x2400030c
 8002c64:	24000390 	.word	0x24000390
 8002c68:	24000414 	.word	0x24000414
 8002c6c:	24000498 	.word	0x24000498

08002c70 <_GLOBAL__sub_I_TIM_MS>:
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f7ff fedf 	bl	8002a3c <_Z41__static_initialization_and_destruction_0ii>
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <_GLOBAL__sub_D_TIM_MS>:
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7ff fed7 	bl	8002a3c <_Z41__static_initialization_and_destruction_0ii>
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002c94:	4b27      	ldr	r3, [pc, #156]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002c96:	4a28      	ldr	r2, [pc, #160]	; (8002d38 <MX_SPI3_Init+0xa8>)
 8002c98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002c9a:	4b26      	ldr	r3, [pc, #152]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002c9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002ca0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002ca2:	4b24      	ldr	r3, [pc, #144]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002ca8:	4b22      	ldr	r3, [pc, #136]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002caa:	2203      	movs	r2, #3
 8002cac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cae:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002cb4:	4b1f      	ldr	r3, [pc, #124]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002cba:	4b1e      	ldr	r3, [pc, #120]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002cbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002cc0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cc2:	4b1c      	ldr	r3, [pc, #112]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cce:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd4:	4b17      	ldr	r3, [pc, #92]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002cda:	4b16      	ldr	r3, [pc, #88]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002ce0:	4b14      	ldr	r3, [pc, #80]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002ce2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ce6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ce8:	4b12      	ldr	r3, [pc, #72]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002cee:	4b11      	ldr	r3, [pc, #68]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002cf4:	4b0f      	ldr	r3, [pc, #60]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002cfa:	4b0e      	ldr	r3, [pc, #56]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002d00:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002d12:	4b08      	ldr	r3, [pc, #32]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002d1e:	4805      	ldr	r0, [pc, #20]	; (8002d34 <MX_SPI3_Init+0xa4>)
 8002d20:	f007 fb32 	bl	800a388 <HAL_SPI_Init>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8002d2a:	f7ff fe51 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002d2e:	bf00      	nop
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	2400054c 	.word	0x2400054c
 8002d38:	40003c00 	.word	0x40003c00

08002d3c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b0b8      	sub	sp, #224	; 0xe0
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	60da      	str	r2, [r3, #12]
 8002d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d54:	f107 0310 	add.w	r3, r7, #16
 8002d58:	22bc      	movs	r2, #188	; 0xbc
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f00b fc7f 	bl	800e660 <memset>
  if(spiHandle->Instance==SPI3)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a25      	ldr	r2, [pc, #148]	; (8002dfc <HAL_SPI_MspInit+0xc0>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d142      	bne.n	8002df2 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d70:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d76:	f107 0310 	add.w	r3, r7, #16
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f005 ffa2 	bl	8008cc4 <HAL_RCCEx_PeriphCLKConfig>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002d86:	f7ff fe23 	bl	80029d0 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d8a:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_SPI_MspInit+0xc4>)
 8002d8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d90:	4a1b      	ldr	r2, [pc, #108]	; (8002e00 <HAL_SPI_MspInit+0xc4>)
 8002d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d9a:	4b19      	ldr	r3, [pc, #100]	; (8002e00 <HAL_SPI_MspInit+0xc4>)
 8002d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002da0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002da8:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_SPI_MspInit+0xc4>)
 8002daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dae:	4a14      	ldr	r2, [pc, #80]	; (8002e00 <HAL_SPI_MspInit+0xc4>)
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002db8:	4b11      	ldr	r3, [pc, #68]	; (8002e00 <HAL_SPI_MspInit+0xc4>)
 8002dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002dc6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002dca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002de0:	2306      	movs	r3, #6
 8002de2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002dea:	4619      	mov	r1, r3
 8002dec:	4805      	ldr	r0, [pc, #20]	; (8002e04 <HAL_SPI_MspInit+0xc8>)
 8002dee:	f004 fd93 	bl	8007918 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002df2:	bf00      	nop
 8002df4:	37e0      	adds	r7, #224	; 0xe0
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40003c00 	.word	0x40003c00
 8002e00:	58024400 	.word	0x58024400
 8002e04:	58020800 	.word	0x58020800

08002e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <HAL_MspInit+0x30>)
 8002e10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e14:	4a08      	ldr	r2, [pc, #32]	; (8002e38 <HAL_MspInit+0x30>)
 8002e16:	f043 0302 	orr.w	r3, r3, #2
 8002e1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e1e:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <HAL_MspInit+0x30>)
 8002e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	58024400 	.word	0x58024400

08002e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e40:	e7fe      	b.n	8002e40 <NMI_Handler+0x4>

08002e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e42:	b480      	push	{r7}
 8002e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e46:	e7fe      	b.n	8002e46 <HardFault_Handler+0x4>

08002e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e4c:	e7fe      	b.n	8002e4c <MemManage_Handler+0x4>

08002e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e52:	e7fe      	b.n	8002e52 <BusFault_Handler+0x4>

08002e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e58:	e7fe      	b.n	8002e58 <UsageFault_Handler+0x4>

08002e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e88:	f001 fbc6 	bl	8004618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002e8c:	f001 fcff 	bl	800488e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8002e98:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <DMA1_Stream0_IRQHandler+0x10>)
 8002e9a:	f003 fa2b 	bl	80062f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	24000ba0 	.word	0x24000ba0

08002ea8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002eac:	4802      	ldr	r0, [pc, #8]	; (8002eb8 <DMA1_Stream1_IRQHandler+0x10>)
 8002eae:	f003 fa21 	bl	80062f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	24000a20 	.word	0x24000a20

08002ebc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002ec0:	4802      	ldr	r0, [pc, #8]	; (8002ecc <DMA1_Stream2_IRQHandler+0x10>)
 8002ec2:	f003 fa17 	bl	80062f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	24000b28 	.word	0x24000b28

08002ed0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002ed4:	4802      	ldr	r0, [pc, #8]	; (8002ee0 <DMA1_Stream3_IRQHandler+0x10>)
 8002ed6:	f003 fa0d 	bl	80062f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	24000918 	.word	0x24000918

08002ee4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002ee8:	4802      	ldr	r0, [pc, #8]	; (8002ef4 <DMA1_Stream4_IRQHandler+0x10>)
 8002eea:	f003 fa03 	bl	80062f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	24000ca8 	.word	0x24000ca8

08002ef8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8002efc:	2040      	movs	r0, #64	; 0x40
 8002efe:	f004 fed4 	bl	8007caa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 8002f02:	2080      	movs	r0, #128	; 0x80
 8002f04:	f004 fed1 	bl	8007caa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f10:	4802      	ldr	r0, [pc, #8]	; (8002f1c <USART3_IRQHandler+0x10>)
 8002f12:	f009 f897 	bl	800c044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	24000a98 	.word	0x24000a98

08002f20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8002f24:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f28:	f004 febf 	bl	8007caa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8002f2c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002f30:	f004 febb 	bl	8007caa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8002f34:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f38:	f004 feb7 	bl	8007caa <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8002f3c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f40:	f004 feb3 	bl	8007caa <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f44:	bf00      	nop
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002f4c:	4802      	ldr	r0, [pc, #8]	; (8002f58 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002f4e:	f007 fd7b 	bl	800aa48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	24000880 	.word	0x24000880

08002f5c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002f60:	4802      	ldr	r0, [pc, #8]	; (8002f6c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002f62:	f007 fd71 	bl	800aa48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	24000704 	.word	0x24000704

08002f70 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002f74:	4802      	ldr	r0, [pc, #8]	; (8002f80 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002f76:	f007 fd67 	bl	800aa48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	24000834 	.word	0x24000834

08002f84 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002f88:	4802      	ldr	r0, [pc, #8]	; (8002f94 <TIM5_IRQHandler+0x10>)
 8002f8a:	f007 fd5d 	bl	800aa48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	2400066c 	.word	0x2400066c

08002f98 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002f9c:	4802      	ldr	r0, [pc, #8]	; (8002fa8 <UART4_IRQHandler+0x10>)
 8002f9e:	f009 f851 	bl	800c044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	24000c18 	.word	0x24000c18

08002fac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <TIM6_DAC_IRQHandler+0x10>)
 8002fb2:	f007 fd49 	bl	800aa48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	24000750 	.word	0x24000750

08002fc0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <TIM7_IRQHandler+0x10>)
 8002fc6:	f007 fd3f 	bl	800aa48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	240008cc 	.word	0x240008cc

08002fd4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <UART7_IRQHandler+0x10>)
 8002fda:	f009 f833 	bl	800c044 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	24000990 	.word	0x24000990

08002fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	af00      	add	r7, sp, #0
	return 1;
 8002fec:	2301      	movs	r3, #1
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <_kill>:

int _kill(int pid, int sig)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003002:	f00b faf5 	bl	800e5f0 <__errno>
 8003006:	4603      	mov	r3, r0
 8003008:	2216      	movs	r2, #22
 800300a:	601a      	str	r2, [r3, #0]
	return -1;
 800300c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003010:	4618      	mov	r0, r3
 8003012:	3708      	adds	r7, #8
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <_exit>:

void _exit (int status)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003020:	f04f 31ff 	mov.w	r1, #4294967295
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff ffe7 	bl	8002ff8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800302a:	e7fe      	b.n	800302a <_exit+0x12>

0800302c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003038:	2300      	movs	r3, #0
 800303a:	617b      	str	r3, [r7, #20]
 800303c:	e00a      	b.n	8003054 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800303e:	f3af 8000 	nop.w
 8003042:	4601      	mov	r1, r0
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	60ba      	str	r2, [r7, #8]
 800304a:	b2ca      	uxtb	r2, r1
 800304c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	3301      	adds	r3, #1
 8003052:	617b      	str	r3, [r7, #20]
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	429a      	cmp	r2, r3
 800305a:	dbf0      	blt.n	800303e <_read+0x12>
	}

return len;
 800305c:	687b      	ldr	r3, [r7, #4]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b086      	sub	sp, #24
 800306a:	af00      	add	r7, sp, #0
 800306c:	60f8      	str	r0, [r7, #12]
 800306e:	60b9      	str	r1, [r7, #8]
 8003070:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	e009      	b.n	800308c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	60ba      	str	r2, [r7, #8]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3301      	adds	r3, #1
 800308a:	617b      	str	r3, [r7, #20]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	429a      	cmp	r2, r3
 8003092:	dbf1      	blt.n	8003078 <_write+0x12>
	}
	return len;
 8003094:	687b      	ldr	r3, [r7, #4]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}

0800309e <_close>:

int _close(int file)
{
 800309e:	b480      	push	{r7}
 80030a0:	b083      	sub	sp, #12
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
	return -1;
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
 80030be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030c6:	605a      	str	r2, [r3, #4]
	return 0;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <_isatty>:

int _isatty(int file)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
	return 1;
 80030de:	2301      	movs	r3, #1
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
	return 0;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
	...

08003108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003110:	4a14      	ldr	r2, [pc, #80]	; (8003164 <_sbrk+0x5c>)
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <_sbrk+0x60>)
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800311c:	4b13      	ldr	r3, [pc, #76]	; (800316c <_sbrk+0x64>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d102      	bne.n	800312a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <_sbrk+0x64>)
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <_sbrk+0x68>)
 8003128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <_sbrk+0x64>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4413      	add	r3, r2
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	429a      	cmp	r2, r3
 8003136:	d207      	bcs.n	8003148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003138:	f00b fa5a 	bl	800e5f0 <__errno>
 800313c:	4603      	mov	r3, r0
 800313e:	220c      	movs	r2, #12
 8003140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003142:	f04f 33ff 	mov.w	r3, #4294967295
 8003146:	e009      	b.n	800315c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003148:	4b08      	ldr	r3, [pc, #32]	; (800316c <_sbrk+0x64>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <_sbrk+0x64>)
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4413      	add	r3, r2
 8003156:	4a05      	ldr	r2, [pc, #20]	; (800316c <_sbrk+0x64>)
 8003158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800315a:	68fb      	ldr	r3, [r7, #12]
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	24001338 	.word	0x24001338
 8003168:	00000400 	.word	0x00000400
 800316c:	2400051c 	.word	0x2400051c
 8003170:	24000d38 	.word	0x24000d38

08003174 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003178:	4b39      	ldr	r3, [pc, #228]	; (8003260 <SystemInit+0xec>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	4a38      	ldr	r2, [pc, #224]	; (8003260 <SystemInit+0xec>)
 8003180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003188:	4b36      	ldr	r3, [pc, #216]	; (8003264 <SystemInit+0xf0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	2b06      	cmp	r3, #6
 8003192:	d807      	bhi.n	80031a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003194:	4b33      	ldr	r3, [pc, #204]	; (8003264 <SystemInit+0xf0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f023 030f 	bic.w	r3, r3, #15
 800319c:	4a31      	ldr	r2, [pc, #196]	; (8003264 <SystemInit+0xf0>)
 800319e:	f043 0307 	orr.w	r3, r3, #7
 80031a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80031a4:	4b30      	ldr	r3, [pc, #192]	; (8003268 <SystemInit+0xf4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a2f      	ldr	r2, [pc, #188]	; (8003268 <SystemInit+0xf4>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80031b0:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <SystemInit+0xf4>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80031b6:	4b2c      	ldr	r3, [pc, #176]	; (8003268 <SystemInit+0xf4>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	492b      	ldr	r1, [pc, #172]	; (8003268 <SystemInit+0xf4>)
 80031bc:	4b2b      	ldr	r3, [pc, #172]	; (800326c <SystemInit+0xf8>)
 80031be:	4013      	ands	r3, r2
 80031c0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80031c2:	4b28      	ldr	r3, [pc, #160]	; (8003264 <SystemInit+0xf0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d007      	beq.n	80031de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80031ce:	4b25      	ldr	r3, [pc, #148]	; (8003264 <SystemInit+0xf0>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f023 030f 	bic.w	r3, r3, #15
 80031d6:	4a23      	ldr	r2, [pc, #140]	; (8003264 <SystemInit+0xf0>)
 80031d8:	f043 0307 	orr.w	r3, r3, #7
 80031dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80031de:	4b22      	ldr	r3, [pc, #136]	; (8003268 <SystemInit+0xf4>)
 80031e0:	2200      	movs	r2, #0
 80031e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80031e4:	4b20      	ldr	r3, [pc, #128]	; (8003268 <SystemInit+0xf4>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80031ea:	4b1f      	ldr	r3, [pc, #124]	; (8003268 <SystemInit+0xf4>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <SystemInit+0xf4>)
 80031f2:	4a1f      	ldr	r2, [pc, #124]	; (8003270 <SystemInit+0xfc>)
 80031f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80031f6:	4b1c      	ldr	r3, [pc, #112]	; (8003268 <SystemInit+0xf4>)
 80031f8:	4a1e      	ldr	r2, [pc, #120]	; (8003274 <SystemInit+0x100>)
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <SystemInit+0xf4>)
 80031fe:	4a1e      	ldr	r2, [pc, #120]	; (8003278 <SystemInit+0x104>)
 8003200:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003202:	4b19      	ldr	r3, [pc, #100]	; (8003268 <SystemInit+0xf4>)
 8003204:	2200      	movs	r2, #0
 8003206:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003208:	4b17      	ldr	r3, [pc, #92]	; (8003268 <SystemInit+0xf4>)
 800320a:	4a1b      	ldr	r2, [pc, #108]	; (8003278 <SystemInit+0x104>)
 800320c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800320e:	4b16      	ldr	r3, [pc, #88]	; (8003268 <SystemInit+0xf4>)
 8003210:	2200      	movs	r2, #0
 8003212:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003214:	4b14      	ldr	r3, [pc, #80]	; (8003268 <SystemInit+0xf4>)
 8003216:	4a18      	ldr	r2, [pc, #96]	; (8003278 <SystemInit+0x104>)
 8003218:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800321a:	4b13      	ldr	r3, [pc, #76]	; (8003268 <SystemInit+0xf4>)
 800321c:	2200      	movs	r2, #0
 800321e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003220:	4b11      	ldr	r3, [pc, #68]	; (8003268 <SystemInit+0xf4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a10      	ldr	r2, [pc, #64]	; (8003268 <SystemInit+0xf4>)
 8003226:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <SystemInit+0xf4>)
 800322e:	2200      	movs	r2, #0
 8003230:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <SystemInit+0x108>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <SystemInit+0x10c>)
 8003238:	4013      	ands	r3, r2
 800323a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800323e:	d202      	bcs.n	8003246 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <SystemInit+0x110>)
 8003242:	2201      	movs	r2, #1
 8003244:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003246:	4b10      	ldr	r3, [pc, #64]	; (8003288 <SystemInit+0x114>)
 8003248:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800324c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800324e:	4b04      	ldr	r3, [pc, #16]	; (8003260 <SystemInit+0xec>)
 8003250:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003254:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8003256:	bf00      	nop
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	e000ed00 	.word	0xe000ed00
 8003264:	52002000 	.word	0x52002000
 8003268:	58024400 	.word	0x58024400
 800326c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003270:	02020200 	.word	0x02020200
 8003274:	01ff0000 	.word	0x01ff0000
 8003278:	01010280 	.word	0x01010280
 800327c:	5c001000 	.word	0x5c001000
 8003280:	ffff0000 	.word	0xffff0000
 8003284:	51008108 	.word	0x51008108
 8003288:	52004000 	.word	0x52004000

0800328c <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b09a      	sub	sp, #104	; 0x68
 8003290:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003292:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	609a      	str	r2, [r3, #8]
 800329e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	605a      	str	r2, [r3, #4]
 80032b6:	609a      	str	r2, [r3, #8]
 80032b8:	60da      	str	r2, [r3, #12]
 80032ba:	611a      	str	r2, [r3, #16]
 80032bc:	615a      	str	r2, [r3, #20]
 80032be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	222c      	movs	r2, #44	; 0x2c
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f00b f9ca 	bl	800e660 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80032cc:	4b44      	ldr	r3, [pc, #272]	; (80033e0 <MX_TIM1_Init+0x154>)
 80032ce:	4a45      	ldr	r2, [pc, #276]	; (80033e4 <MX_TIM1_Init+0x158>)
 80032d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 80032d2:	4b43      	ldr	r3, [pc, #268]	; (80033e0 <MX_TIM1_Init+0x154>)
 80032d4:	22c7      	movs	r2, #199	; 0xc7
 80032d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d8:	4b41      	ldr	r3, [pc, #260]	; (80033e0 <MX_TIM1_Init+0x154>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 80032de:	4b40      	ldr	r3, [pc, #256]	; (80033e0 <MX_TIM1_Init+0x154>)
 80032e0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80032e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e6:	4b3e      	ldr	r3, [pc, #248]	; (80033e0 <MX_TIM1_Init+0x154>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80032ec:	4b3c      	ldr	r3, [pc, #240]	; (80033e0 <MX_TIM1_Init+0x154>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032f2:	4b3b      	ldr	r3, [pc, #236]	; (80033e0 <MX_TIM1_Init+0x154>)
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80032f8:	4839      	ldr	r0, [pc, #228]	; (80033e0 <MX_TIM1_Init+0x154>)
 80032fa:	f007 f966 	bl	800a5ca <HAL_TIM_Base_Init>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003304:	f7ff fb64 	bl	80029d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800330c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800330e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003312:	4619      	mov	r1, r3
 8003314:	4832      	ldr	r0, [pc, #200]	; (80033e0 <MX_TIM1_Init+0x154>)
 8003316:	f007 fdcb 	bl	800aeb0 <HAL_TIM_ConfigClockSource>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003320:	f7ff fb56 	bl	80029d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003324:	482e      	ldr	r0, [pc, #184]	; (80033e0 <MX_TIM1_Init+0x154>)
 8003326:	f007 fa1f 	bl	800a768 <HAL_TIM_PWM_Init>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003330:	f7ff fb4e 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003334:	2300      	movs	r3, #0
 8003336:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003338:	2300      	movs	r3, #0
 800333a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800333c:	2300      	movs	r3, #0
 800333e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003340:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003344:	4619      	mov	r1, r3
 8003346:	4826      	ldr	r0, [pc, #152]	; (80033e0 <MX_TIM1_Init+0x154>)
 8003348:	f008 fb06 	bl	800b958 <HAL_TIMEx_MasterConfigSynchronization>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003352:	f7ff fb3d 	bl	80029d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003356:	2360      	movs	r3, #96	; 0x60
 8003358:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800335a:	f240 1339 	movw	r3, #313	; 0x139
 800335e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003360:	2300      	movs	r3, #0
 8003362:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003364:	2300      	movs	r3, #0
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003368:	2300      	movs	r3, #0
 800336a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800336c:	2300      	movs	r3, #0
 800336e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003370:	2300      	movs	r3, #0
 8003372:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003374:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003378:	2204      	movs	r2, #4
 800337a:	4619      	mov	r1, r3
 800337c:	4818      	ldr	r0, [pc, #96]	; (80033e0 <MX_TIM1_Init+0x154>)
 800337e:	f007 fc83 	bl	800ac88 <HAL_TIM_PWM_ConfigChannel>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8003388:	f7ff fb22 	bl	80029d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800338c:	2300      	movs	r3, #0
 800338e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003390:	2300      	movs	r3, #0
 8003392:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003394:	2300      	movs	r3, #0
 8003396:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003398:	2300      	movs	r3, #0
 800339a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800339c:	2300      	movs	r3, #0
 800339e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80033a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80033ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80033b4:	2300      	movs	r3, #0
 80033b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033b8:	2300      	movs	r3, #0
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033bc:	1d3b      	adds	r3, r7, #4
 80033be:	4619      	mov	r1, r3
 80033c0:	4807      	ldr	r0, [pc, #28]	; (80033e0 <MX_TIM1_Init+0x154>)
 80033c2:	f008 fb57 	bl	800ba74 <HAL_TIMEx_ConfigBreakDeadTime>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80033cc:	f7ff fb00 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80033d0:	4803      	ldr	r0, [pc, #12]	; (80033e0 <MX_TIM1_Init+0x154>)
 80033d2:	f000 fc85 	bl	8003ce0 <HAL_TIM_MspPostInit>

}
 80033d6:	bf00      	nop
 80033d8:	3768      	adds	r7, #104	; 0x68
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	2400079c 	.word	0x2400079c
 80033e4:	40010000 	.word	0x40010000

080033e8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08e      	sub	sp, #56	; 0x38
 80033ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	609a      	str	r2, [r3, #8]
 80033fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033fc:	f107 031c 	add.w	r3, r7, #28
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003408:	463b      	mov	r3, r7
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	60da      	str	r2, [r3, #12]
 8003414:	611a      	str	r2, [r3, #16]
 8003416:	615a      	str	r2, [r3, #20]
 8003418:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800341a:	4b2e      	ldr	r3, [pc, #184]	; (80034d4 <MX_TIM2_Init+0xec>)
 800341c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003420:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8003422:	4b2c      	ldr	r3, [pc, #176]	; (80034d4 <MX_TIM2_Init+0xec>)
 8003424:	22c7      	movs	r2, #199	; 0xc7
 8003426:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003428:	4b2a      	ldr	r3, [pc, #168]	; (80034d4 <MX_TIM2_Init+0xec>)
 800342a:	2200      	movs	r2, #0
 800342c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800342e:	4b29      	ldr	r3, [pc, #164]	; (80034d4 <MX_TIM2_Init+0xec>)
 8003430:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003434:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003436:	4b27      	ldr	r3, [pc, #156]	; (80034d4 <MX_TIM2_Init+0xec>)
 8003438:	2200      	movs	r2, #0
 800343a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800343c:	4b25      	ldr	r3, [pc, #148]	; (80034d4 <MX_TIM2_Init+0xec>)
 800343e:	2280      	movs	r2, #128	; 0x80
 8003440:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003442:	4824      	ldr	r0, [pc, #144]	; (80034d4 <MX_TIM2_Init+0xec>)
 8003444:	f007 f8c1 	bl	800a5ca <HAL_TIM_Base_Init>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800344e:	f7ff fabf 	bl	80029d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800345c:	4619      	mov	r1, r3
 800345e:	481d      	ldr	r0, [pc, #116]	; (80034d4 <MX_TIM2_Init+0xec>)
 8003460:	f007 fd26 	bl	800aeb0 <HAL_TIM_ConfigClockSource>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800346a:	f7ff fab1 	bl	80029d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800346e:	4819      	ldr	r0, [pc, #100]	; (80034d4 <MX_TIM2_Init+0xec>)
 8003470:	f007 f97a 	bl	800a768 <HAL_TIM_PWM_Init>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800347a:	f7ff faa9 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003482:	2300      	movs	r3, #0
 8003484:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003486:	f107 031c 	add.w	r3, r7, #28
 800348a:	4619      	mov	r1, r3
 800348c:	4811      	ldr	r0, [pc, #68]	; (80034d4 <MX_TIM2_Init+0xec>)
 800348e:	f008 fa63 	bl	800b958 <HAL_TIMEx_MasterConfigSynchronization>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003498:	f7ff fa9a 	bl	80029d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800349c:	2360      	movs	r3, #96	; 0x60
 800349e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80034a0:	f240 1339 	movw	r3, #313	; 0x139
 80034a4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034aa:	2300      	movs	r3, #0
 80034ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034ae:	463b      	mov	r3, r7
 80034b0:	2208      	movs	r2, #8
 80034b2:	4619      	mov	r1, r3
 80034b4:	4807      	ldr	r0, [pc, #28]	; (80034d4 <MX_TIM2_Init+0xec>)
 80034b6:	f007 fbe7 	bl	800ac88 <HAL_TIM_PWM_ConfigChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80034c0:	f7ff fa86 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80034c4:	4803      	ldr	r0, [pc, #12]	; (80034d4 <MX_TIM2_Init+0xec>)
 80034c6:	f000 fc0b 	bl	8003ce0 <HAL_TIM_MspPostInit>

}
 80034ca:	bf00      	nop
 80034cc:	3738      	adds	r7, #56	; 0x38
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	240007e8 	.word	0x240007e8

080034d8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08e      	sub	sp, #56	; 0x38
 80034dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ec:	f107 031c 	add.w	r3, r7, #28
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	605a      	str	r2, [r3, #4]
 80034f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034f8:	463b      	mov	r3, r7
 80034fa:	2200      	movs	r2, #0
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	605a      	str	r2, [r3, #4]
 8003500:	609a      	str	r2, [r3, #8]
 8003502:	60da      	str	r2, [r3, #12]
 8003504:	611a      	str	r2, [r3, #16]
 8003506:	615a      	str	r2, [r3, #20]
 8003508:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800350a:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <MX_TIM3_Init+0xe8>)
 800350c:	4a2d      	ldr	r2, [pc, #180]	; (80035c4 <MX_TIM3_Init+0xec>)
 800350e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8003510:	4b2b      	ldr	r3, [pc, #172]	; (80035c0 <MX_TIM3_Init+0xe8>)
 8003512:	22c7      	movs	r2, #199	; 0xc7
 8003514:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003516:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <MX_TIM3_Init+0xe8>)
 8003518:	2200      	movs	r2, #0
 800351a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 800351c:	4b28      	ldr	r3, [pc, #160]	; (80035c0 <MX_TIM3_Init+0xe8>)
 800351e:	f640 125f 	movw	r2, #2399	; 0x95f
 8003522:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003524:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <MX_TIM3_Init+0xe8>)
 8003526:	2200      	movs	r2, #0
 8003528:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800352a:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <MX_TIM3_Init+0xe8>)
 800352c:	2280      	movs	r2, #128	; 0x80
 800352e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003530:	4823      	ldr	r0, [pc, #140]	; (80035c0 <MX_TIM3_Init+0xe8>)
 8003532:	f007 f84a 	bl	800a5ca <HAL_TIM_Base_Init>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800353c:	f7ff fa48 	bl	80029d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003544:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800354a:	4619      	mov	r1, r3
 800354c:	481c      	ldr	r0, [pc, #112]	; (80035c0 <MX_TIM3_Init+0xe8>)
 800354e:	f007 fcaf 	bl	800aeb0 <HAL_TIM_ConfigClockSource>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8003558:	f7ff fa3a 	bl	80029d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800355c:	4818      	ldr	r0, [pc, #96]	; (80035c0 <MX_TIM3_Init+0xe8>)
 800355e:	f007 f903 	bl	800a768 <HAL_TIM_PWM_Init>
 8003562:	4603      	mov	r3, r0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003568:	f7ff fa32 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003570:	2300      	movs	r3, #0
 8003572:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003574:	f107 031c 	add.w	r3, r7, #28
 8003578:	4619      	mov	r1, r3
 800357a:	4811      	ldr	r0, [pc, #68]	; (80035c0 <MX_TIM3_Init+0xe8>)
 800357c:	f008 f9ec 	bl	800b958 <HAL_TIMEx_MasterConfigSynchronization>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003586:	f7ff fa23 	bl	80029d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800358a:	2360      	movs	r3, #96	; 0x60
 800358c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003592:	2300      	movs	r3, #0
 8003594:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003596:	2300      	movs	r3, #0
 8003598:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800359a:	463b      	mov	r3, r7
 800359c:	2200      	movs	r2, #0
 800359e:	4619      	mov	r1, r3
 80035a0:	4807      	ldr	r0, [pc, #28]	; (80035c0 <MX_TIM3_Init+0xe8>)
 80035a2:	f007 fb71 	bl	800ac88 <HAL_TIM_PWM_ConfigChannel>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80035ac:	f7ff fa10 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80035b0:	4803      	ldr	r0, [pc, #12]	; (80035c0 <MX_TIM3_Init+0xe8>)
 80035b2:	f000 fb95 	bl	8003ce0 <HAL_TIM_MspPostInit>

}
 80035b6:	bf00      	nop
 80035b8:	3738      	adds	r7, #56	; 0x38
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	240006b8 	.word	0x240006b8
 80035c4:	40000400 	.word	0x40000400

080035c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08e      	sub	sp, #56	; 0x38
 80035cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035d2:	2200      	movs	r2, #0
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	605a      	str	r2, [r3, #4]
 80035d8:	609a      	str	r2, [r3, #8]
 80035da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035dc:	f107 031c 	add.w	r3, r7, #28
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	605a      	str	r2, [r3, #4]
 80035e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80035e8:	463b      	mov	r3, r7
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	605a      	str	r2, [r3, #4]
 80035f0:	609a      	str	r2, [r3, #8]
 80035f2:	60da      	str	r2, [r3, #12]
 80035f4:	611a      	str	r2, [r3, #16]
 80035f6:	615a      	str	r2, [r3, #20]
 80035f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80035fa:	4b2d      	ldr	r3, [pc, #180]	; (80036b0 <MX_TIM4_Init+0xe8>)
 80035fc:	4a2d      	ldr	r2, [pc, #180]	; (80036b4 <MX_TIM4_Init+0xec>)
 80035fe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <MX_TIM4_Init+0xe8>)
 8003602:	22c7      	movs	r2, #199	; 0xc7
 8003604:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003606:	4b2a      	ldr	r3, [pc, #168]	; (80036b0 <MX_TIM4_Init+0xe8>)
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800360c:	4b28      	ldr	r3, [pc, #160]	; (80036b0 <MX_TIM4_Init+0xe8>)
 800360e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003612:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003614:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <MX_TIM4_Init+0xe8>)
 8003616:	2200      	movs	r2, #0
 8003618:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800361a:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <MX_TIM4_Init+0xe8>)
 800361c:	2280      	movs	r2, #128	; 0x80
 800361e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003620:	4823      	ldr	r0, [pc, #140]	; (80036b0 <MX_TIM4_Init+0xe8>)
 8003622:	f006 ffd2 	bl	800a5ca <HAL_TIM_Base_Init>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800362c:	f7ff f9d0 	bl	80029d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003634:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800363a:	4619      	mov	r1, r3
 800363c:	481c      	ldr	r0, [pc, #112]	; (80036b0 <MX_TIM4_Init+0xe8>)
 800363e:	f007 fc37 	bl	800aeb0 <HAL_TIM_ConfigClockSource>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8003648:	f7ff f9c2 	bl	80029d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800364c:	4818      	ldr	r0, [pc, #96]	; (80036b0 <MX_TIM4_Init+0xe8>)
 800364e:	f007 f88b 	bl	800a768 <HAL_TIM_PWM_Init>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8003658:	f7ff f9ba 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800365c:	2300      	movs	r3, #0
 800365e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003660:	2300      	movs	r3, #0
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003664:	f107 031c 	add.w	r3, r7, #28
 8003668:	4619      	mov	r1, r3
 800366a:	4811      	ldr	r0, [pc, #68]	; (80036b0 <MX_TIM4_Init+0xe8>)
 800366c:	f008 f974 	bl	800b958 <HAL_TIMEx_MasterConfigSynchronization>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d001      	beq.n	800367a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003676:	f7ff f9ab 	bl	80029d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800367a:	2360      	movs	r3, #96	; 0x60
 800367c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 800367e:	f240 1339 	movw	r3, #313	; 0x139
 8003682:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003684:	2300      	movs	r3, #0
 8003686:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003688:	2300      	movs	r3, #0
 800368a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800368c:	463b      	mov	r3, r7
 800368e:	2208      	movs	r2, #8
 8003690:	4619      	mov	r1, r3
 8003692:	4807      	ldr	r0, [pc, #28]	; (80036b0 <MX_TIM4_Init+0xe8>)
 8003694:	f007 faf8 	bl	800ac88 <HAL_TIM_PWM_ConfigChannel>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800369e:	f7ff f997 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80036a2:	4803      	ldr	r0, [pc, #12]	; (80036b0 <MX_TIM4_Init+0xe8>)
 80036a4:	f000 fb1c 	bl	8003ce0 <HAL_TIM_MspPostInit>

}
 80036a8:	bf00      	nop
 80036aa:	3738      	adds	r7, #56	; 0x38
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	240005d4 	.word	0x240005d4
 80036b4:	40000800 	.word	0x40000800

080036b8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036be:	f107 0310 	add.w	r3, r7, #16
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	605a      	str	r2, [r3, #4]
 80036c8:	609a      	str	r2, [r3, #8]
 80036ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036cc:	1d3b      	adds	r3, r7, #4
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	605a      	str	r2, [r3, #4]
 80036d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80036d6:	4b1d      	ldr	r3, [pc, #116]	; (800374c <MX_TIM5_Init+0x94>)
 80036d8:	4a1d      	ldr	r2, [pc, #116]	; (8003750 <MX_TIM5_Init+0x98>)
 80036da:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 80036dc:	4b1b      	ldr	r3, [pc, #108]	; (800374c <MX_TIM5_Init+0x94>)
 80036de:	22c7      	movs	r2, #199	; 0xc7
 80036e0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <MX_TIM5_Init+0x94>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 80036e8:	4b18      	ldr	r3, [pc, #96]	; (800374c <MX_TIM5_Init+0x94>)
 80036ea:	f642 62df 	movw	r2, #11999	; 0x2edf
 80036ee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f0:	4b16      	ldr	r3, [pc, #88]	; (800374c <MX_TIM5_Init+0x94>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <MX_TIM5_Init+0x94>)
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80036fc:	4813      	ldr	r0, [pc, #76]	; (800374c <MX_TIM5_Init+0x94>)
 80036fe:	f006 ff64 	bl	800a5ca <HAL_TIM_Base_Init>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003708:	f7ff f962 	bl	80029d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800370c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003710:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003712:	f107 0310 	add.w	r3, r7, #16
 8003716:	4619      	mov	r1, r3
 8003718:	480c      	ldr	r0, [pc, #48]	; (800374c <MX_TIM5_Init+0x94>)
 800371a:	f007 fbc9 	bl	800aeb0 <HAL_TIM_ConfigClockSource>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d001      	beq.n	8003728 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003724:	f7ff f954 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003728:	2300      	movs	r3, #0
 800372a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800372c:	2300      	movs	r3, #0
 800372e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003730:	1d3b      	adds	r3, r7, #4
 8003732:	4619      	mov	r1, r3
 8003734:	4805      	ldr	r0, [pc, #20]	; (800374c <MX_TIM5_Init+0x94>)
 8003736:	f008 f90f 	bl	800b958 <HAL_TIMEx_MasterConfigSynchronization>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003740:	f7ff f946 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003744:	bf00      	nop
 8003746:	3720      	adds	r7, #32
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	2400066c 	.word	0x2400066c
 8003750:	40000c00 	.word	0x40000c00

08003754 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003764:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <MX_TIM6_Init+0x64>)
 8003766:	4a15      	ldr	r2, [pc, #84]	; (80037bc <MX_TIM6_Init+0x68>)
 8003768:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <MX_TIM6_Init+0x64>)
 800376c:	22c7      	movs	r2, #199	; 0xc7
 800376e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003770:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <MX_TIM6_Init+0x64>)
 8003772:	2200      	movs	r2, #0
 8003774:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8003776:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <MX_TIM6_Init+0x64>)
 8003778:	f241 726f 	movw	r2, #5999	; 0x176f
 800377c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800377e:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <MX_TIM6_Init+0x64>)
 8003780:	2280      	movs	r2, #128	; 0x80
 8003782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003784:	480c      	ldr	r0, [pc, #48]	; (80037b8 <MX_TIM6_Init+0x64>)
 8003786:	f006 ff20 	bl	800a5ca <HAL_TIM_Base_Init>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d001      	beq.n	8003794 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003790:	f7ff f91e 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003794:	2300      	movs	r3, #0
 8003796:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800379c:	1d3b      	adds	r3, r7, #4
 800379e:	4619      	mov	r1, r3
 80037a0:	4805      	ldr	r0, [pc, #20]	; (80037b8 <MX_TIM6_Init+0x64>)
 80037a2:	f008 f8d9 	bl	800b958 <HAL_TIMEx_MasterConfigSynchronization>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d001      	beq.n	80037b0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80037ac:	f7ff f910 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80037b0:	bf00      	nop
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	24000750 	.word	0x24000750
 80037bc:	40001000 	.word	0x40001000

080037c0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037c6:	1d3b      	adds	r3, r7, #4
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80037d0:	4b14      	ldr	r3, [pc, #80]	; (8003824 <MX_TIM7_Init+0x64>)
 80037d2:	4a15      	ldr	r2, [pc, #84]	; (8003828 <MX_TIM7_Init+0x68>)
 80037d4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 80037d6:	4b13      	ldr	r3, [pc, #76]	; (8003824 <MX_TIM7_Init+0x64>)
 80037d8:	22c7      	movs	r2, #199	; 0xc7
 80037da:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <MX_TIM7_Init+0x64>)
 80037de:	2200      	movs	r2, #0
 80037e0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <MX_TIM7_Init+0x64>)
 80037e4:	f240 42af 	movw	r2, #1199	; 0x4af
 80037e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037ea:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <MX_TIM7_Init+0x64>)
 80037ec:	2280      	movs	r2, #128	; 0x80
 80037ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80037f0:	480c      	ldr	r0, [pc, #48]	; (8003824 <MX_TIM7_Init+0x64>)
 80037f2:	f006 feea 	bl	800a5ca <HAL_TIM_Base_Init>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80037fc:	f7ff f8e8 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003800:	2300      	movs	r3, #0
 8003802:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003808:	1d3b      	adds	r3, r7, #4
 800380a:	4619      	mov	r1, r3
 800380c:	4805      	ldr	r0, [pc, #20]	; (8003824 <MX_TIM7_Init+0x64>)
 800380e:	f008 f8a3 	bl	800b958 <HAL_TIMEx_MasterConfigSynchronization>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003818:	f7ff f8da 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800381c:	bf00      	nop
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	240008cc 	.word	0x240008cc
 8003828:	40001400 	.word	0x40001400

0800382c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003832:	463b      	mov	r3, r7
 8003834:	2200      	movs	r2, #0
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	605a      	str	r2, [r3, #4]
 800383a:	609a      	str	r2, [r3, #8]
 800383c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800383e:	4b16      	ldr	r3, [pc, #88]	; (8003898 <MX_TIM12_Init+0x6c>)
 8003840:	4a16      	ldr	r2, [pc, #88]	; (800389c <MX_TIM12_Init+0x70>)
 8003842:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8003844:	4b14      	ldr	r3, [pc, #80]	; (8003898 <MX_TIM12_Init+0x6c>)
 8003846:	22c7      	movs	r2, #199	; 0xc7
 8003848:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800384a:	4b13      	ldr	r3, [pc, #76]	; (8003898 <MX_TIM12_Init+0x6c>)
 800384c:	2200      	movs	r2, #0
 800384e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8003850:	4b11      	ldr	r3, [pc, #68]	; (8003898 <MX_TIM12_Init+0x6c>)
 8003852:	f240 2257 	movw	r2, #599	; 0x257
 8003856:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <MX_TIM12_Init+0x6c>)
 800385a:	2200      	movs	r2, #0
 800385c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800385e:	4b0e      	ldr	r3, [pc, #56]	; (8003898 <MX_TIM12_Init+0x6c>)
 8003860:	2280      	movs	r2, #128	; 0x80
 8003862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8003864:	480c      	ldr	r0, [pc, #48]	; (8003898 <MX_TIM12_Init+0x6c>)
 8003866:	f006 feb0 	bl	800a5ca <HAL_TIM_Base_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8003870:	f7ff f8ae 	bl	80029d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003878:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800387a:	463b      	mov	r3, r7
 800387c:	4619      	mov	r1, r3
 800387e:	4806      	ldr	r0, [pc, #24]	; (8003898 <MX_TIM12_Init+0x6c>)
 8003880:	f007 fb16 	bl	800aeb0 <HAL_TIM_ConfigClockSource>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 800388a:	f7ff f8a1 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	24000880 	.word	0x24000880
 800389c:	40001800 	.word	0x40001800

080038a0 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <MX_TIM13_Init+0x40>)
 80038a6:	4a0f      	ldr	r2, [pc, #60]	; (80038e4 <MX_TIM13_Init+0x44>)
 80038a8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 80038aa:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <MX_TIM13_Init+0x40>)
 80038ac:	22c7      	movs	r2, #199	; 0xc7
 80038ae:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <MX_TIM13_Init+0x40>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <MX_TIM13_Init+0x40>)
 80038b8:	f240 2257 	movw	r2, #599	; 0x257
 80038bc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038be:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <MX_TIM13_Init+0x40>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038c4:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <MX_TIM13_Init+0x40>)
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80038ca:	4805      	ldr	r0, [pc, #20]	; (80038e0 <MX_TIM13_Init+0x40>)
 80038cc:	f006 fe7d 	bl	800a5ca <HAL_TIM_Base_Init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80038d6:	f7ff f87b 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80038da:	bf00      	nop
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	24000704 	.word	0x24000704
 80038e4:	40001c00 	.word	0x40001c00

080038e8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80038ec:	4b0e      	ldr	r3, [pc, #56]	; (8003928 <MX_TIM14_Init+0x40>)
 80038ee:	4a0f      	ldr	r2, [pc, #60]	; (800392c <MX_TIM14_Init+0x44>)
 80038f0:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 80038f2:	4b0d      	ldr	r3, [pc, #52]	; (8003928 <MX_TIM14_Init+0x40>)
 80038f4:	22c7      	movs	r2, #199	; 0xc7
 80038f6:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <MX_TIM14_Init+0x40>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <MX_TIM14_Init+0x40>)
 8003900:	f640 125f 	movw	r2, #2399	; 0x95f
 8003904:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <MX_TIM14_Init+0x40>)
 8003908:	2200      	movs	r2, #0
 800390a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800390c:	4b06      	ldr	r3, [pc, #24]	; (8003928 <MX_TIM14_Init+0x40>)
 800390e:	2280      	movs	r2, #128	; 0x80
 8003910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003912:	4805      	ldr	r0, [pc, #20]	; (8003928 <MX_TIM14_Init+0x40>)
 8003914:	f006 fe59 	bl	800a5ca <HAL_TIM_Base_Init>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800391e:	f7ff f857 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003922:	bf00      	nop
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	24000834 	.word	0x24000834
 800392c:	40002000 	.word	0x40002000

08003930 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b09a      	sub	sp, #104	; 0x68
 8003934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003936:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	605a      	str	r2, [r3, #4]
 8003940:	609a      	str	r2, [r3, #8]
 8003942:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003944:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003950:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	611a      	str	r2, [r3, #16]
 8003960:	615a      	str	r2, [r3, #20]
 8003962:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	222c      	movs	r2, #44	; 0x2c
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f00a fe78 	bl	800e660 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003970:	4b3f      	ldr	r3, [pc, #252]	; (8003a70 <MX_TIM15_Init+0x140>)
 8003972:	4a40      	ldr	r2, [pc, #256]	; (8003a74 <MX_TIM15_Init+0x144>)
 8003974:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8003976:	4b3e      	ldr	r3, [pc, #248]	; (8003a70 <MX_TIM15_Init+0x140>)
 8003978:	22ef      	movs	r2, #239	; 0xef
 800397a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800397c:	4b3c      	ldr	r3, [pc, #240]	; (8003a70 <MX_TIM15_Init+0x140>)
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8003982:	4b3b      	ldr	r3, [pc, #236]	; (8003a70 <MX_TIM15_Init+0x140>)
 8003984:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003988:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800398a:	4b39      	ldr	r3, [pc, #228]	; (8003a70 <MX_TIM15_Init+0x140>)
 800398c:	2200      	movs	r2, #0
 800398e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003990:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <MX_TIM15_Init+0x140>)
 8003992:	2200      	movs	r2, #0
 8003994:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003996:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <MX_TIM15_Init+0x140>)
 8003998:	2280      	movs	r2, #128	; 0x80
 800399a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800399c:	4834      	ldr	r0, [pc, #208]	; (8003a70 <MX_TIM15_Init+0x140>)
 800399e:	f006 fe14 	bl	800a5ca <HAL_TIM_Base_Init>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80039a8:	f7ff f812 	bl	80029d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039b0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80039b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039b6:	4619      	mov	r1, r3
 80039b8:	482d      	ldr	r0, [pc, #180]	; (8003a70 <MX_TIM15_Init+0x140>)
 80039ba:	f007 fa79 	bl	800aeb0 <HAL_TIM_ConfigClockSource>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80039c4:	f7ff f804 	bl	80029d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80039c8:	4829      	ldr	r0, [pc, #164]	; (8003a70 <MX_TIM15_Init+0x140>)
 80039ca:	f006 fecd 	bl	800a768 <HAL_TIM_PWM_Init>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80039d4:	f7fe fffc 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039d8:	2300      	movs	r3, #0
 80039da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039dc:	2300      	movs	r3, #0
 80039de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80039e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80039e4:	4619      	mov	r1, r3
 80039e6:	4822      	ldr	r0, [pc, #136]	; (8003a70 <MX_TIM15_Init+0x140>)
 80039e8:	f007 ffb6 	bl	800b958 <HAL_TIMEx_MasterConfigSynchronization>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80039f2:	f7fe ffed 	bl	80029d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039f6:	2360      	movs	r3, #96	; 0x60
 80039f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80039fa:	f240 1339 	movw	r3, #313	; 0x139
 80039fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a00:	2300      	movs	r3, #0
 8003a02:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a04:	2300      	movs	r3, #0
 8003a06:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a10:	2300      	movs	r3, #0
 8003a12:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a18:	2204      	movs	r2, #4
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4814      	ldr	r0, [pc, #80]	; (8003a70 <MX_TIM15_Init+0x140>)
 8003a1e:	f007 f933 	bl	800ac88 <HAL_TIM_PWM_ConfigChannel>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8003a28:	f7fe ffd2 	bl	80029d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a44:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003a4e:	1d3b      	adds	r3, r7, #4
 8003a50:	4619      	mov	r1, r3
 8003a52:	4807      	ldr	r0, [pc, #28]	; (8003a70 <MX_TIM15_Init+0x140>)
 8003a54:	f008 f80e 	bl	800ba74 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8003a5e:	f7fe ffb7 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003a62:	4803      	ldr	r0, [pc, #12]	; (8003a70 <MX_TIM15_Init+0x140>)
 8003a64:	f000 f93c 	bl	8003ce0 <HAL_TIM_MspPostInit>

}
 8003a68:	bf00      	nop
 8003a6a:	3768      	adds	r7, #104	; 0x68
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	24000620 	.word	0x24000620
 8003a74:	40014000 	.word	0x40014000

08003a78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b08e      	sub	sp, #56	; 0x38
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a8b      	ldr	r2, [pc, #556]	; (8003cb4 <HAL_TIM_Base_MspInit+0x23c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d10f      	bne.n	8003aaa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a8a:	4b8b      	ldr	r3, [pc, #556]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003a90:	4a89      	ldr	r2, [pc, #548]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003a9a:	4b87      	ldr	r3, [pc, #540]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003aa8:	e100      	b.n	8003cac <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM2)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab2:	d10f      	bne.n	8003ad4 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ab4:	4b80      	ldr	r3, [pc, #512]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aba:	4a7f      	ldr	r2, [pc, #508]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ac4:	4b7c      	ldr	r3, [pc, #496]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003ac6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003aca:	f003 0301 	and.w	r3, r3, #1
 8003ace:	633b      	str	r3, [r7, #48]	; 0x30
 8003ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003ad2:	e0eb      	b.n	8003cac <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM3)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a78      	ldr	r2, [pc, #480]	; (8003cbc <HAL_TIM_Base_MspInit+0x244>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d10f      	bne.n	8003afe <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ade:	4b76      	ldr	r3, [pc, #472]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ae4:	4a74      	ldr	r2, [pc, #464]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003ae6:	f043 0302 	orr.w	r3, r3, #2
 8003aea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003aee:	4b72      	ldr	r3, [pc, #456]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003af0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003afc:	e0d6      	b.n	8003cac <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM4)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6f      	ldr	r2, [pc, #444]	; (8003cc0 <HAL_TIM_Base_MspInit+0x248>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d10f      	bne.n	8003b28 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b08:	4b6b      	ldr	r3, [pc, #428]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003b0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b0e:	4a6a      	ldr	r2, [pc, #424]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003b10:	f043 0304 	orr.w	r3, r3, #4
 8003b14:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b18:	4b67      	ldr	r3, [pc, #412]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003b1a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003b26:	e0c1      	b.n	8003cac <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM5)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a65      	ldr	r2, [pc, #404]	; (8003cc4 <HAL_TIM_Base_MspInit+0x24c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d117      	bne.n	8003b62 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003b32:	4b61      	ldr	r3, [pc, #388]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003b34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b38:	4a5f      	ldr	r2, [pc, #380]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003b3a:	f043 0308 	orr.w	r3, r3, #8
 8003b3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b42:	4b5d      	ldr	r3, [pc, #372]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003b44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003b50:	2200      	movs	r2, #0
 8003b52:	2100      	movs	r1, #0
 8003b54:	2032      	movs	r0, #50	; 0x32
 8003b56:	f000 fe66 	bl	8004826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003b5a:	2032      	movs	r0, #50	; 0x32
 8003b5c:	f000 fe7d 	bl	800485a <HAL_NVIC_EnableIRQ>
}
 8003b60:	e0a4      	b.n	8003cac <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM6)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a58      	ldr	r2, [pc, #352]	; (8003cc8 <HAL_TIM_Base_MspInit+0x250>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d117      	bne.n	8003b9c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b6c:	4b52      	ldr	r3, [pc, #328]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003b6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b72:	4a51      	ldr	r2, [pc, #324]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003b74:	f043 0310 	orr.w	r3, r3, #16
 8003b78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b7c:	4b4e      	ldr	r3, [pc, #312]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003b7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	623b      	str	r3, [r7, #32]
 8003b88:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	2036      	movs	r0, #54	; 0x36
 8003b90:	f000 fe49 	bl	8004826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b94:	2036      	movs	r0, #54	; 0x36
 8003b96:	f000 fe60 	bl	800485a <HAL_NVIC_EnableIRQ>
}
 8003b9a:	e087      	b.n	8003cac <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM7)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a4a      	ldr	r2, [pc, #296]	; (8003ccc <HAL_TIM_Base_MspInit+0x254>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d117      	bne.n	8003bd6 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003ba6:	4b44      	ldr	r3, [pc, #272]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bac:	4a42      	ldr	r2, [pc, #264]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003bae:	f043 0320 	orr.w	r3, r3, #32
 8003bb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bb6:	4b40      	ldr	r3, [pc, #256]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003bb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	2037      	movs	r0, #55	; 0x37
 8003bca:	f000 fe2c 	bl	8004826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003bce:	2037      	movs	r0, #55	; 0x37
 8003bd0:	f000 fe43 	bl	800485a <HAL_NVIC_EnableIRQ>
}
 8003bd4:	e06a      	b.n	8003cac <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM12)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a3d      	ldr	r2, [pc, #244]	; (8003cd0 <HAL_TIM_Base_MspInit+0x258>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d117      	bne.n	8003c10 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003be0:	4b35      	ldr	r3, [pc, #212]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003be2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003be6:	4a34      	ldr	r2, [pc, #208]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bf0:	4b31      	ldr	r3, [pc, #196]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2100      	movs	r1, #0
 8003c02:	202b      	movs	r0, #43	; 0x2b
 8003c04:	f000 fe0f 	bl	8004826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003c08:	202b      	movs	r0, #43	; 0x2b
 8003c0a:	f000 fe26 	bl	800485a <HAL_NVIC_EnableIRQ>
}
 8003c0e:	e04d      	b.n	8003cac <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM13)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a2f      	ldr	r2, [pc, #188]	; (8003cd4 <HAL_TIM_Base_MspInit+0x25c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d117      	bne.n	8003c4a <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003c1a:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c20:	4a25      	ldr	r2, [pc, #148]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c2a:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	202c      	movs	r0, #44	; 0x2c
 8003c3e:	f000 fdf2 	bl	8004826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003c42:	202c      	movs	r0, #44	; 0x2c
 8003c44:	f000 fe09 	bl	800485a <HAL_NVIC_EnableIRQ>
}
 8003c48:	e030      	b.n	8003cac <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM14)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a22      	ldr	r2, [pc, #136]	; (8003cd8 <HAL_TIM_Base_MspInit+0x260>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d117      	bne.n	8003c84 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003c54:	4b18      	ldr	r3, [pc, #96]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003c56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c5a:	4a17      	ldr	r2, [pc, #92]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c64:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003c66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2100      	movs	r1, #0
 8003c76:	202d      	movs	r0, #45	; 0x2d
 8003c78:	f000 fdd5 	bl	8004826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003c7c:	202d      	movs	r0, #45	; 0x2d
 8003c7e:	f000 fdec 	bl	800485a <HAL_NVIC_EnableIRQ>
}
 8003c82:	e013      	b.n	8003cac <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM15)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a14      	ldr	r2, [pc, #80]	; (8003cdc <HAL_TIM_Base_MspInit+0x264>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d10e      	bne.n	8003cac <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c94:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003c9e:	4b06      	ldr	r3, [pc, #24]	; (8003cb8 <HAL_TIM_Base_MspInit+0x240>)
 8003ca0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	68fb      	ldr	r3, [r7, #12]
}
 8003cac:	bf00      	nop
 8003cae:	3738      	adds	r7, #56	; 0x38
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	58024400 	.word	0x58024400
 8003cbc:	40000400 	.word	0x40000400
 8003cc0:	40000800 	.word	0x40000800
 8003cc4:	40000c00 	.word	0x40000c00
 8003cc8:	40001000 	.word	0x40001000
 8003ccc:	40001400 	.word	0x40001400
 8003cd0:	40001800 	.word	0x40001800
 8003cd4:	40001c00 	.word	0x40001c00
 8003cd8:	40002000 	.word	0x40002000
 8003cdc:	40014000 	.word	0x40014000

08003ce0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08c      	sub	sp, #48	; 0x30
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ce8:	f107 031c 	add.w	r3, r7, #28
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	60da      	str	r2, [r3, #12]
 8003cf6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a5e      	ldr	r2, [pc, #376]	; (8003e78 <HAL_TIM_MspPostInit+0x198>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d120      	bne.n	8003d44 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d02:	4b5e      	ldr	r3, [pc, #376]	; (8003e7c <HAL_TIM_MspPostInit+0x19c>)
 8003d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d08:	4a5c      	ldr	r2, [pc, #368]	; (8003e7c <HAL_TIM_MspPostInit+0x19c>)
 8003d0a:	f043 0310 	orr.w	r3, r3, #16
 8003d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d12:	4b5a      	ldr	r3, [pc, #360]	; (8003e7c <HAL_TIM_MspPostInit+0x19c>)
 8003d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8003d20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d26:	2302      	movs	r3, #2
 8003d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003d32:	2301      	movs	r3, #1
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8003d36:	f107 031c 	add.w	r3, r7, #28
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4850      	ldr	r0, [pc, #320]	; (8003e80 <HAL_TIM_MspPostInit+0x1a0>)
 8003d3e:	f003 fdeb 	bl	8007918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003d42:	e094      	b.n	8003e6e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4c:	d120      	bne.n	8003d90 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d4e:	4b4b      	ldr	r3, [pc, #300]	; (8003e7c <HAL_TIM_MspPostInit+0x19c>)
 8003d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d54:	4a49      	ldr	r2, [pc, #292]	; (8003e7c <HAL_TIM_MspPostInit+0x19c>)
 8003d56:	f043 0302 	orr.w	r3, r3, #2
 8003d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d5e:	4b47      	ldr	r3, [pc, #284]	; (8003e7c <HAL_TIM_MspPostInit+0x19c>)
 8003d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8003d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d72:	2302      	movs	r3, #2
 8003d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d76:	2300      	movs	r3, #0
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8003d82:	f107 031c 	add.w	r3, r7, #28
 8003d86:	4619      	mov	r1, r3
 8003d88:	483e      	ldr	r0, [pc, #248]	; (8003e84 <HAL_TIM_MspPostInit+0x1a4>)
 8003d8a:	f003 fdc5 	bl	8007918 <HAL_GPIO_Init>
}
 8003d8e:	e06e      	b.n	8003e6e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a3c      	ldr	r2, [pc, #240]	; (8003e88 <HAL_TIM_MspPostInit+0x1a8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d11f      	bne.n	8003dda <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9a:	4b38      	ldr	r3, [pc, #224]	; (8003e7c <HAL_TIM_MspPostInit+0x19c>)
 8003d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003da0:	4a36      	ldr	r2, [pc, #216]	; (8003e7c <HAL_TIM_MspPostInit+0x19c>)
 8003da2:	f043 0301 	orr.w	r3, r3, #1
 8003da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003daa:	4b34      	ldr	r3, [pc, #208]	; (8003e7c <HAL_TIM_MspPostInit+0x19c>)
 8003dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003db0:	f003 0301 	and.w	r3, r3, #1
 8003db4:	613b      	str	r3, [r7, #16]
 8003db6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8003db8:	2340      	movs	r3, #64	; 0x40
 8003dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8003dcc:	f107 031c 	add.w	r3, r7, #28
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	482e      	ldr	r0, [pc, #184]	; (8003e8c <HAL_TIM_MspPostInit+0x1ac>)
 8003dd4:	f003 fda0 	bl	8007918 <HAL_GPIO_Init>
}
 8003dd8:	e049      	b.n	8003e6e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a2c      	ldr	r2, [pc, #176]	; (8003e90 <HAL_TIM_MspPostInit+0x1b0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d120      	bne.n	8003e26 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de4:	4b25      	ldr	r3, [pc, #148]	; (8003e7c <HAL_TIM_MspPostInit+0x19c>)
 8003de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dea:	4a24      	ldr	r2, [pc, #144]	; (8003e7c <HAL_TIM_MspPostInit+0x19c>)
 8003dec:	f043 0302 	orr.w	r3, r3, #2
 8003df0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003df4:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <HAL_TIM_MspPostInit+0x19c>)
 8003df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8003e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e08:	2302      	movs	r3, #2
 8003e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e10:	2300      	movs	r3, #0
 8003e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003e14:	2302      	movs	r3, #2
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8003e18:	f107 031c 	add.w	r3, r7, #28
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4819      	ldr	r0, [pc, #100]	; (8003e84 <HAL_TIM_MspPostInit+0x1a4>)
 8003e20:	f003 fd7a 	bl	8007918 <HAL_GPIO_Init>
}
 8003e24:	e023      	b.n	8003e6e <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1a      	ldr	r2, [pc, #104]	; (8003e94 <HAL_TIM_MspPostInit+0x1b4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d11e      	bne.n	8003e6e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e30:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <HAL_TIM_MspPostInit+0x19c>)
 8003e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e36:	4a11      	ldr	r2, [pc, #68]	; (8003e7c <HAL_TIM_MspPostInit+0x19c>)
 8003e38:	f043 0310 	orr.w	r3, r3, #16
 8003e3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e40:	4b0e      	ldr	r3, [pc, #56]	; (8003e7c <HAL_TIM_MspPostInit+0x19c>)
 8003e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	60bb      	str	r3, [r7, #8]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8003e4e:	2340      	movs	r3, #64	; 0x40
 8003e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e52:	2302      	movs	r3, #2
 8003e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e56:	2300      	movs	r3, #0
 8003e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003e5e:	2304      	movs	r3, #4
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8003e62:	f107 031c 	add.w	r3, r7, #28
 8003e66:	4619      	mov	r1, r3
 8003e68:	4805      	ldr	r0, [pc, #20]	; (8003e80 <HAL_TIM_MspPostInit+0x1a0>)
 8003e6a:	f003 fd55 	bl	8007918 <HAL_GPIO_Init>
}
 8003e6e:	bf00      	nop
 8003e70:	3730      	adds	r7, #48	; 0x30
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40010000 	.word	0x40010000
 8003e7c:	58024400 	.word	0x58024400
 8003e80:	58021000 	.word	0x58021000
 8003e84:	58020400 	.word	0x58020400
 8003e88:	40000400 	.word	0x40000400
 8003e8c:	58020000 	.word	0x58020000
 8003e90:	40000800 	.word	0x40000800
 8003e94:	40014000 	.word	0x40014000

08003e98 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003e9c:	4b25      	ldr	r3, [pc, #148]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003e9e:	4a26      	ldr	r2, [pc, #152]	; (8003f38 <MX_UART4_Init+0xa0>)
 8003ea0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8003ea2:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003ea4:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <MX_UART4_Init+0xa4>)
 8003ea6:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003ea8:	4b22      	ldr	r3, [pc, #136]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003eae:	4b21      	ldr	r3, [pc, #132]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003eb4:	4b1f      	ldr	r3, [pc, #124]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003eba:	4b1e      	ldr	r3, [pc, #120]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003ebc:	220c      	movs	r2, #12
 8003ebe:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ec0:	4b1c      	ldr	r3, [pc, #112]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ec6:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ecc:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ed2:	4b18      	ldr	r3, [pc, #96]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003ed8:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003eda:	2208      	movs	r2, #8
 8003edc:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003ede:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003ee0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003ee4:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003ee6:	4813      	ldr	r0, [pc, #76]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003ee8:	f007 fe60 	bl	800bbac <HAL_UART_Init>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8003ef2:	f7fe fd6d 	bl	80029d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003ef6:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8003efa:	480e      	ldr	r0, [pc, #56]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003efc:	f009 fee7 	bl	800dcce <HAL_UARTEx_SetTxFifoThreshold>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8003f06:	f7fe fd63 	bl	80029d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003f0a:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8003f0e:	4809      	ldr	r0, [pc, #36]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003f10:	f009 ff1b 	bl	800dd4a <HAL_UARTEx_SetRxFifoThreshold>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8003f1a:	f7fe fd59 	bl	80029d0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8003f1e:	4805      	ldr	r0, [pc, #20]	; (8003f34 <MX_UART4_Init+0x9c>)
 8003f20:	f009 fe61 	bl	800dbe6 <HAL_UARTEx_EnableFifoMode>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8003f2a:	f7fe fd51 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	24000c18 	.word	0x24000c18
 8003f38:	40004c00 	.word	0x40004c00
 8003f3c:	001e8480 	.word	0x001e8480

08003f40 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8003f44:	4b23      	ldr	r3, [pc, #140]	; (8003fd4 <MX_UART7_Init+0x94>)
 8003f46:	4a24      	ldr	r2, [pc, #144]	; (8003fd8 <MX_UART7_Init+0x98>)
 8003f48:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8003f4a:	4b22      	ldr	r3, [pc, #136]	; (8003fd4 <MX_UART7_Init+0x94>)
 8003f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f50:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <MX_UART7_Init+0x94>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003f58:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <MX_UART7_Init+0x94>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8003f5e:	4b1d      	ldr	r3, [pc, #116]	; (8003fd4 <MX_UART7_Init+0x94>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003f64:	4b1b      	ldr	r3, [pc, #108]	; (8003fd4 <MX_UART7_Init+0x94>)
 8003f66:	220c      	movs	r2, #12
 8003f68:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f6a:	4b1a      	ldr	r3, [pc, #104]	; (8003fd4 <MX_UART7_Init+0x94>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f70:	4b18      	ldr	r3, [pc, #96]	; (8003fd4 <MX_UART7_Init+0x94>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f76:	4b17      	ldr	r3, [pc, #92]	; (8003fd4 <MX_UART7_Init+0x94>)
 8003f78:	2200      	movs	r2, #0
 8003f7a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f7c:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <MX_UART7_Init+0x94>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f82:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <MX_UART7_Init+0x94>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003f88:	4812      	ldr	r0, [pc, #72]	; (8003fd4 <MX_UART7_Init+0x94>)
 8003f8a:	f007 fe0f 	bl	800bbac <HAL_UART_Init>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8003f94:	f7fe fd1c 	bl	80029d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003f98:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8003f9c:	480d      	ldr	r0, [pc, #52]	; (8003fd4 <MX_UART7_Init+0x94>)
 8003f9e:	f009 fe96 	bl	800dcce <HAL_UARTEx_SetTxFifoThreshold>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8003fa8:	f7fe fd12 	bl	80029d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003fac:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8003fb0:	4808      	ldr	r0, [pc, #32]	; (8003fd4 <MX_UART7_Init+0x94>)
 8003fb2:	f009 feca 	bl	800dd4a <HAL_UARTEx_SetRxFifoThreshold>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8003fbc:	f7fe fd08 	bl	80029d0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8003fc0:	4804      	ldr	r0, [pc, #16]	; (8003fd4 <MX_UART7_Init+0x94>)
 8003fc2:	f009 fe10 	bl	800dbe6 <HAL_UARTEx_EnableFifoMode>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8003fcc:	f7fe fd00 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8003fd0:	bf00      	nop
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	24000990 	.word	0x24000990
 8003fd8:	40007800 	.word	0x40007800

08003fdc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003fe0:	4b22      	ldr	r3, [pc, #136]	; (800406c <MX_USART3_UART_Init+0x90>)
 8003fe2:	4a23      	ldr	r2, [pc, #140]	; (8004070 <MX_USART3_UART_Init+0x94>)
 8003fe4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003fe6:	4b21      	ldr	r3, [pc, #132]	; (800406c <MX_USART3_UART_Init+0x90>)
 8003fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003fee:	4b1f      	ldr	r3, [pc, #124]	; (800406c <MX_USART3_UART_Init+0x90>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003ff4:	4b1d      	ldr	r3, [pc, #116]	; (800406c <MX_USART3_UART_Init+0x90>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003ffa:	4b1c      	ldr	r3, [pc, #112]	; (800406c <MX_USART3_UART_Init+0x90>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004000:	4b1a      	ldr	r3, [pc, #104]	; (800406c <MX_USART3_UART_Init+0x90>)
 8004002:	220c      	movs	r2, #12
 8004004:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004006:	4b19      	ldr	r3, [pc, #100]	; (800406c <MX_USART3_UART_Init+0x90>)
 8004008:	2200      	movs	r2, #0
 800400a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800400c:	4b17      	ldr	r3, [pc, #92]	; (800406c <MX_USART3_UART_Init+0x90>)
 800400e:	2200      	movs	r2, #0
 8004010:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004012:	4b16      	ldr	r3, [pc, #88]	; (800406c <MX_USART3_UART_Init+0x90>)
 8004014:	2200      	movs	r2, #0
 8004016:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004018:	4b14      	ldr	r3, [pc, #80]	; (800406c <MX_USART3_UART_Init+0x90>)
 800401a:	2200      	movs	r2, #0
 800401c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800401e:	4b13      	ldr	r3, [pc, #76]	; (800406c <MX_USART3_UART_Init+0x90>)
 8004020:	2200      	movs	r2, #0
 8004022:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004024:	4811      	ldr	r0, [pc, #68]	; (800406c <MX_USART3_UART_Init+0x90>)
 8004026:	f007 fdc1 	bl	800bbac <HAL_UART_Init>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004030:	f7fe fcce 	bl	80029d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004034:	2100      	movs	r1, #0
 8004036:	480d      	ldr	r0, [pc, #52]	; (800406c <MX_USART3_UART_Init+0x90>)
 8004038:	f009 fe49 	bl	800dcce <HAL_UARTEx_SetTxFifoThreshold>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8004042:	f7fe fcc5 	bl	80029d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004046:	2100      	movs	r1, #0
 8004048:	4808      	ldr	r0, [pc, #32]	; (800406c <MX_USART3_UART_Init+0x90>)
 800404a:	f009 fe7e 	bl	800dd4a <HAL_UARTEx_SetRxFifoThreshold>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8004054:	f7fe fcbc 	bl	80029d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004058:	4804      	ldr	r0, [pc, #16]	; (800406c <MX_USART3_UART_Init+0x90>)
 800405a:	f009 fdff 	bl	800dc5c <HAL_UARTEx_DisableFifoMode>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8004064:	f7fe fcb4 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004068:	bf00      	nop
 800406a:	bd80      	pop	{r7, pc}
 800406c:	24000a98 	.word	0x24000a98
 8004070:	40004800 	.word	0x40004800

08004074 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b0bc      	sub	sp, #240	; 0xf0
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800407c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	605a      	str	r2, [r3, #4]
 8004086:	609a      	str	r2, [r3, #8]
 8004088:	60da      	str	r2, [r3, #12]
 800408a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800408c:	f107 0320 	add.w	r3, r7, #32
 8004090:	22bc      	movs	r2, #188	; 0xbc
 8004092:	2100      	movs	r1, #0
 8004094:	4618      	mov	r0, r3
 8004096:	f00a fae3 	bl	800e660 <memset>
  if(uartHandle->Instance==UART4)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4aa1      	ldr	r2, [pc, #644]	; (8004324 <HAL_UART_MspInit+0x2b0>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	f040 80b7 	bne.w	8004214 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80040a6:	2302      	movs	r3, #2
 80040a8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80040b0:	f107 0320 	add.w	r3, r7, #32
 80040b4:	4618      	mov	r0, r3
 80040b6:	f004 fe05 	bl	8008cc4 <HAL_RCCEx_PeriphCLKConfig>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80040c0:	f7fe fc86 	bl	80029d0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80040c4:	4b98      	ldr	r3, [pc, #608]	; (8004328 <HAL_UART_MspInit+0x2b4>)
 80040c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040ca:	4a97      	ldr	r2, [pc, #604]	; (8004328 <HAL_UART_MspInit+0x2b4>)
 80040cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80040d4:	4b94      	ldr	r3, [pc, #592]	; (8004328 <HAL_UART_MspInit+0x2b4>)
 80040d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80040da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040de:	61fb      	str	r3, [r7, #28]
 80040e0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80040e2:	4b91      	ldr	r3, [pc, #580]	; (8004328 <HAL_UART_MspInit+0x2b4>)
 80040e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040e8:	4a8f      	ldr	r2, [pc, #572]	; (8004328 <HAL_UART_MspInit+0x2b4>)
 80040ea:	f043 0308 	orr.w	r3, r3, #8
 80040ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80040f2:	4b8d      	ldr	r3, [pc, #564]	; (8004328 <HAL_UART_MspInit+0x2b4>)
 80040f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004100:	2303      	movs	r3, #3
 8004102:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004106:	2302      	movs	r3, #2
 8004108:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004112:	2300      	movs	r3, #0
 8004114:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004118:	2308      	movs	r3, #8
 800411a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800411e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004122:	4619      	mov	r1, r3
 8004124:	4881      	ldr	r0, [pc, #516]	; (800432c <HAL_UART_MspInit+0x2b8>)
 8004126:	f003 fbf7 	bl	8007918 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 800412a:	4b81      	ldr	r3, [pc, #516]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 800412c:	4a81      	ldr	r2, [pc, #516]	; (8004334 <HAL_UART_MspInit+0x2c0>)
 800412e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8004130:	4b7f      	ldr	r3, [pc, #508]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 8004132:	223f      	movs	r2, #63	; 0x3f
 8004134:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004136:	4b7e      	ldr	r3, [pc, #504]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 8004138:	2200      	movs	r2, #0
 800413a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800413c:	4b7c      	ldr	r3, [pc, #496]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 800413e:	2200      	movs	r2, #0
 8004140:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004142:	4b7b      	ldr	r3, [pc, #492]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 8004144:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004148:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800414a:	4b79      	ldr	r3, [pc, #484]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 800414c:	2200      	movs	r2, #0
 800414e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004150:	4b77      	ldr	r3, [pc, #476]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 8004152:	2200      	movs	r2, #0
 8004154:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8004156:	4b76      	ldr	r3, [pc, #472]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 8004158:	2200      	movs	r2, #0
 800415a:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800415c:	4b74      	ldr	r3, [pc, #464]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 800415e:	2200      	movs	r2, #0
 8004160:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004162:	4b73      	ldr	r3, [pc, #460]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 8004164:	2204      	movs	r2, #4
 8004166:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004168:	4b71      	ldr	r3, [pc, #452]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 800416a:	2203      	movs	r2, #3
 800416c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800416e:	4b70      	ldr	r3, [pc, #448]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 8004170:	2200      	movs	r2, #0
 8004172:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004174:	4b6e      	ldr	r3, [pc, #440]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 8004176:	2200      	movs	r2, #0
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800417a:	486d      	ldr	r0, [pc, #436]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 800417c:	f000 fd92 	bl	8004ca4 <HAL_DMA_Init>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8004186:	f7fe fc23 	bl	80029d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a68      	ldr	r2, [pc, #416]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 800418e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004190:	4a67      	ldr	r2, [pc, #412]	; (8004330 <HAL_UART_MspInit+0x2bc>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004196:	4b68      	ldr	r3, [pc, #416]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 8004198:	4a68      	ldr	r2, [pc, #416]	; (800433c <HAL_UART_MspInit+0x2c8>)
 800419a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 800419c:	4b66      	ldr	r3, [pc, #408]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 800419e:	2240      	movs	r2, #64	; 0x40
 80041a0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041a2:	4b65      	ldr	r3, [pc, #404]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 80041a4:	2240      	movs	r2, #64	; 0x40
 80041a6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041a8:	4b63      	ldr	r3, [pc, #396]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041ae:	4b62      	ldr	r3, [pc, #392]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 80041b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041b4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041b6:	4b60      	ldr	r3, [pc, #384]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041bc:	4b5e      	ldr	r3, [pc, #376]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 80041be:	2200      	movs	r2, #0
 80041c0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80041c2:	4b5d      	ldr	r3, [pc, #372]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80041c8:	4b5b      	ldr	r3, [pc, #364]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80041ce:	4b5a      	ldr	r3, [pc, #360]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 80041d0:	2204      	movs	r2, #4
 80041d2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80041d4:	4b58      	ldr	r3, [pc, #352]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 80041d6:	2203      	movs	r2, #3
 80041d8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80041da:	4b57      	ldr	r3, [pc, #348]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 80041dc:	2200      	movs	r2, #0
 80041de:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80041e0:	4b55      	ldr	r3, [pc, #340]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80041e6:	4854      	ldr	r0, [pc, #336]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 80041e8:	f000 fd5c 	bl	8004ca4 <HAL_DMA_Init>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 80041f2:	f7fe fbed 	bl	80029d0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a4f      	ldr	r2, [pc, #316]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 80041fa:	679a      	str	r2, [r3, #120]	; 0x78
 80041fc:	4a4e      	ldr	r2, [pc, #312]	; (8004338 <HAL_UART_MspInit+0x2c4>)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004202:	2200      	movs	r2, #0
 8004204:	2100      	movs	r1, #0
 8004206:	2034      	movs	r0, #52	; 0x34
 8004208:	f000 fb0d 	bl	8004826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800420c:	2034      	movs	r0, #52	; 0x34
 800420e:	f000 fb24 	bl	800485a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004212:	e153      	b.n	80044bc <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART7)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a49      	ldr	r2, [pc, #292]	; (8004340 <HAL_UART_MspInit+0x2cc>)
 800421a:	4293      	cmp	r3, r2
 800421c:	f040 8098 	bne.w	8004350 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004220:	2302      	movs	r3, #2
 8004222:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004224:	2300      	movs	r3, #0
 8004226:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800422a:	f107 0320 	add.w	r3, r7, #32
 800422e:	4618      	mov	r0, r3
 8004230:	f004 fd48 	bl	8008cc4 <HAL_RCCEx_PeriphCLKConfig>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 800423a:	f7fe fbc9 	bl	80029d0 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800423e:	4b3a      	ldr	r3, [pc, #232]	; (8004328 <HAL_UART_MspInit+0x2b4>)
 8004240:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004244:	4a38      	ldr	r2, [pc, #224]	; (8004328 <HAL_UART_MspInit+0x2b4>)
 8004246:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800424a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800424e:	4b36      	ldr	r3, [pc, #216]	; (8004328 <HAL_UART_MspInit+0x2b4>)
 8004250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004254:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800425c:	4b32      	ldr	r3, [pc, #200]	; (8004328 <HAL_UART_MspInit+0x2b4>)
 800425e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004262:	4a31      	ldr	r2, [pc, #196]	; (8004328 <HAL_UART_MspInit+0x2b4>)
 8004264:	f043 0310 	orr.w	r3, r3, #16
 8004268:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800426c:	4b2e      	ldr	r3, [pc, #184]	; (8004328 <HAL_UART_MspInit+0x2b4>)
 800426e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800427a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800427e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004282:	2302      	movs	r3, #2
 8004284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004288:	2300      	movs	r3, #0
 800428a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800428e:	2300      	movs	r3, #0
 8004290:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8004294:	2307      	movs	r3, #7
 8004296:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800429a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800429e:	4619      	mov	r1, r3
 80042a0:	4828      	ldr	r0, [pc, #160]	; (8004344 <HAL_UART_MspInit+0x2d0>)
 80042a2:	f003 fb39 	bl	8007918 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 80042a6:	4b28      	ldr	r3, [pc, #160]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 80042a8:	4a28      	ldr	r2, [pc, #160]	; (800434c <HAL_UART_MspInit+0x2d8>)
 80042aa:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 80042ac:	4b26      	ldr	r3, [pc, #152]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 80042ae:	2250      	movs	r2, #80	; 0x50
 80042b0:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042b2:	4b25      	ldr	r3, [pc, #148]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 80042b4:	2240      	movs	r2, #64	; 0x40
 80042b6:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042b8:	4b23      	ldr	r3, [pc, #140]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042be:	4b22      	ldr	r3, [pc, #136]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 80042c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042c4:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042c6:	4b20      	ldr	r3, [pc, #128]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042cc:	4b1e      	ldr	r3, [pc, #120]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 80042d2:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 80042d8:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 80042da:	2200      	movs	r2, #0
 80042dc:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80042de:	4b1a      	ldr	r3, [pc, #104]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 80042e0:	2204      	movs	r2, #4
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80042e4:	4b18      	ldr	r3, [pc, #96]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 80042e6:	2203      	movs	r2, #3
 80042e8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80042ea:	4b17      	ldr	r3, [pc, #92]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80042f0:	4b15      	ldr	r3, [pc, #84]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 80042f2:	2200      	movs	r2, #0
 80042f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 80042f6:	4814      	ldr	r0, [pc, #80]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 80042f8:	f000 fcd4 	bl	8004ca4 <HAL_DMA_Init>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_UART_MspInit+0x292>
      Error_Handler();
 8004302:	f7fe fb65 	bl	80029d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a0f      	ldr	r2, [pc, #60]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 800430a:	679a      	str	r2, [r3, #120]	; 0x78
 800430c:	4a0e      	ldr	r2, [pc, #56]	; (8004348 <HAL_UART_MspInit+0x2d4>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8004312:	2200      	movs	r2, #0
 8004314:	2100      	movs	r1, #0
 8004316:	2052      	movs	r0, #82	; 0x52
 8004318:	f000 fa85 	bl	8004826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800431c:	2052      	movs	r0, #82	; 0x52
 800431e:	f000 fa9c 	bl	800485a <HAL_NVIC_EnableIRQ>
}
 8004322:	e0cb      	b.n	80044bc <HAL_UART_MspInit+0x448>
 8004324:	40004c00 	.word	0x40004c00
 8004328:	58024400 	.word	0x58024400
 800432c:	58020c00 	.word	0x58020c00
 8004330:	24000918 	.word	0x24000918
 8004334:	40020058 	.word	0x40020058
 8004338:	24000ca8 	.word	0x24000ca8
 800433c:	40020070 	.word	0x40020070
 8004340:	40007800 	.word	0x40007800
 8004344:	58021000 	.word	0x58021000
 8004348:	24000ba0 	.word	0x24000ba0
 800434c:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a5b      	ldr	r2, [pc, #364]	; (80044c4 <HAL_UART_MspInit+0x450>)
 8004356:	4293      	cmp	r3, r2
 8004358:	f040 80b0 	bne.w	80044bc <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800435c:	2302      	movs	r3, #2
 800435e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004360:	2300      	movs	r3, #0
 8004362:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004366:	f107 0320 	add.w	r3, r7, #32
 800436a:	4618      	mov	r0, r3
 800436c:	f004 fcaa 	bl	8008cc4 <HAL_RCCEx_PeriphCLKConfig>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_UART_MspInit+0x306>
      Error_Handler();
 8004376:	f7fe fb2b 	bl	80029d0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800437a:	4b53      	ldr	r3, [pc, #332]	; (80044c8 <HAL_UART_MspInit+0x454>)
 800437c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004380:	4a51      	ldr	r2, [pc, #324]	; (80044c8 <HAL_UART_MspInit+0x454>)
 8004382:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004386:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800438a:	4b4f      	ldr	r3, [pc, #316]	; (80044c8 <HAL_UART_MspInit+0x454>)
 800438c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004398:	4b4b      	ldr	r3, [pc, #300]	; (80044c8 <HAL_UART_MspInit+0x454>)
 800439a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800439e:	4a4a      	ldr	r2, [pc, #296]	; (80044c8 <HAL_UART_MspInit+0x454>)
 80043a0:	f043 0308 	orr.w	r3, r3, #8
 80043a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80043a8:	4b47      	ldr	r3, [pc, #284]	; (80044c8 <HAL_UART_MspInit+0x454>)
 80043aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	60bb      	str	r3, [r7, #8]
 80043b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80043b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043be:	2302      	movs	r3, #2
 80043c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043ca:	2300      	movs	r3, #0
 80043cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80043d0:	2307      	movs	r3, #7
 80043d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80043da:	4619      	mov	r1, r3
 80043dc:	483b      	ldr	r0, [pc, #236]	; (80044cc <HAL_UART_MspInit+0x458>)
 80043de:	f003 fa9b 	bl	8007918 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80043e2:	4b3b      	ldr	r3, [pc, #236]	; (80044d0 <HAL_UART_MspInit+0x45c>)
 80043e4:	4a3b      	ldr	r2, [pc, #236]	; (80044d4 <HAL_UART_MspInit+0x460>)
 80043e6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80043e8:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <HAL_UART_MspInit+0x45c>)
 80043ea:	222d      	movs	r2, #45	; 0x2d
 80043ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043ee:	4b38      	ldr	r3, [pc, #224]	; (80044d0 <HAL_UART_MspInit+0x45c>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043f4:	4b36      	ldr	r3, [pc, #216]	; (80044d0 <HAL_UART_MspInit+0x45c>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043fa:	4b35      	ldr	r3, [pc, #212]	; (80044d0 <HAL_UART_MspInit+0x45c>)
 80043fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004400:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004402:	4b33      	ldr	r3, [pc, #204]	; (80044d0 <HAL_UART_MspInit+0x45c>)
 8004404:	2200      	movs	r2, #0
 8004406:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004408:	4b31      	ldr	r3, [pc, #196]	; (80044d0 <HAL_UART_MspInit+0x45c>)
 800440a:	2200      	movs	r2, #0
 800440c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800440e:	4b30      	ldr	r3, [pc, #192]	; (80044d0 <HAL_UART_MspInit+0x45c>)
 8004410:	2200      	movs	r2, #0
 8004412:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004414:	4b2e      	ldr	r3, [pc, #184]	; (80044d0 <HAL_UART_MspInit+0x45c>)
 8004416:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800441a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800441c:	4b2c      	ldr	r3, [pc, #176]	; (80044d0 <HAL_UART_MspInit+0x45c>)
 800441e:	2200      	movs	r2, #0
 8004420:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004422:	482b      	ldr	r0, [pc, #172]	; (80044d0 <HAL_UART_MspInit+0x45c>)
 8004424:	f000 fc3e 	bl	8004ca4 <HAL_DMA_Init>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_UART_MspInit+0x3be>
      Error_Handler();
 800442e:	f7fe facf 	bl	80029d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a26      	ldr	r2, [pc, #152]	; (80044d0 <HAL_UART_MspInit+0x45c>)
 8004436:	67da      	str	r2, [r3, #124]	; 0x7c
 8004438:	4a25      	ldr	r2, [pc, #148]	; (80044d0 <HAL_UART_MspInit+0x45c>)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 800443e:	4b26      	ldr	r3, [pc, #152]	; (80044d8 <HAL_UART_MspInit+0x464>)
 8004440:	4a26      	ldr	r2, [pc, #152]	; (80044dc <HAL_UART_MspInit+0x468>)
 8004442:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004444:	4b24      	ldr	r3, [pc, #144]	; (80044d8 <HAL_UART_MspInit+0x464>)
 8004446:	222e      	movs	r2, #46	; 0x2e
 8004448:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800444a:	4b23      	ldr	r3, [pc, #140]	; (80044d8 <HAL_UART_MspInit+0x464>)
 800444c:	2240      	movs	r2, #64	; 0x40
 800444e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004450:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <HAL_UART_MspInit+0x464>)
 8004452:	2200      	movs	r2, #0
 8004454:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004456:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <HAL_UART_MspInit+0x464>)
 8004458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800445c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800445e:	4b1e      	ldr	r3, [pc, #120]	; (80044d8 <HAL_UART_MspInit+0x464>)
 8004460:	2200      	movs	r2, #0
 8004462:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004464:	4b1c      	ldr	r3, [pc, #112]	; (80044d8 <HAL_UART_MspInit+0x464>)
 8004466:	2200      	movs	r2, #0
 8004468:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800446a:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <HAL_UART_MspInit+0x464>)
 800446c:	2200      	movs	r2, #0
 800446e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004470:	4b19      	ldr	r3, [pc, #100]	; (80044d8 <HAL_UART_MspInit+0x464>)
 8004472:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004476:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004478:	4b17      	ldr	r3, [pc, #92]	; (80044d8 <HAL_UART_MspInit+0x464>)
 800447a:	2204      	movs	r2, #4
 800447c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800447e:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <HAL_UART_MspInit+0x464>)
 8004480:	2203      	movs	r2, #3
 8004482:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8004484:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <HAL_UART_MspInit+0x464>)
 8004486:	2200      	movs	r2, #0
 8004488:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <HAL_UART_MspInit+0x464>)
 800448c:	2200      	movs	r2, #0
 800448e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004490:	4811      	ldr	r0, [pc, #68]	; (80044d8 <HAL_UART_MspInit+0x464>)
 8004492:	f000 fc07 	bl	8004ca4 <HAL_DMA_Init>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 800449c:	f7fe fa98 	bl	80029d0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a0d      	ldr	r2, [pc, #52]	; (80044d8 <HAL_UART_MspInit+0x464>)
 80044a4:	679a      	str	r2, [r3, #120]	; 0x78
 80044a6:	4a0c      	ldr	r2, [pc, #48]	; (80044d8 <HAL_UART_MspInit+0x464>)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80044ac:	2200      	movs	r2, #0
 80044ae:	2100      	movs	r1, #0
 80044b0:	2027      	movs	r0, #39	; 0x27
 80044b2:	f000 f9b8 	bl	8004826 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80044b6:	2027      	movs	r0, #39	; 0x27
 80044b8:	f000 f9cf 	bl	800485a <HAL_NVIC_EnableIRQ>
}
 80044bc:	bf00      	nop
 80044be:	37f0      	adds	r7, #240	; 0xf0
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40004800 	.word	0x40004800
 80044c8:	58024400 	.word	0x58024400
 80044cc:	58020c00 	.word	0x58020c00
 80044d0:	24000a20 	.word	0x24000a20
 80044d4:	40020028 	.word	0x40020028
 80044d8:	24000b28 	.word	0x24000b28
 80044dc:	40020040 	.word	0x40020040

080044e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
 ldr   sp, =_estack      /* set stack pointer */
 80044e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004518 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80044e4:	f7fe fe46 	bl	8003174 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044e8:	480c      	ldr	r0, [pc, #48]	; (800451c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80044ea:	490d      	ldr	r1, [pc, #52]	; (8004520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80044ec:	4a0d      	ldr	r2, [pc, #52]	; (8004524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80044ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044f0:	e002      	b.n	80044f8 <LoopCopyDataInit>

080044f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044f6:	3304      	adds	r3, #4

080044f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044fc:	d3f9      	bcc.n	80044f2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044fe:	4a0a      	ldr	r2, [pc, #40]	; (8004528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004500:	4c0a      	ldr	r4, [pc, #40]	; (800452c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004504:	e001      	b.n	800450a <LoopFillZerobss>

08004506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004508:	3204      	adds	r2, #4

0800450a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800450a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800450c:	d3fb      	bcc.n	8004506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800450e:	f00a f875 	bl	800e5fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004512:	f7fe f85d 	bl	80025d0 <main>
  bx  lr
 8004516:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8004518:	24001338 	.word	0x24001338
  ldr r0, =_sdata
 800451c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004520:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8004524:	08012c0c 	.word	0x08012c0c
  ldr r2, =_sbss
 8004528:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 800452c:	24000d34 	.word	0x24000d34

08004530 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004530:	e7fe      	b.n	8004530 <ADC3_IRQHandler>
	...

08004534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800453a:	2003      	movs	r0, #3
 800453c:	f000 f968 	bl	8004810 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004540:	f004 f9ea 	bl	8008918 <HAL_RCC_GetSysClockFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b15      	ldr	r3, [pc, #84]	; (800459c <HAL_Init+0x68>)
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	0a1b      	lsrs	r3, r3, #8
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	4913      	ldr	r1, [pc, #76]	; (80045a0 <HAL_Init+0x6c>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	fa22 f303 	lsr.w	r3, r2, r3
 800455c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800455e:	4b0f      	ldr	r3, [pc, #60]	; (800459c <HAL_Init+0x68>)
 8004560:	699b      	ldr	r3, [r3, #24]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	4a0e      	ldr	r2, [pc, #56]	; (80045a0 <HAL_Init+0x6c>)
 8004568:	5cd3      	ldrb	r3, [r2, r3]
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	fa22 f303 	lsr.w	r3, r2, r3
 8004574:	4a0b      	ldr	r2, [pc, #44]	; (80045a4 <HAL_Init+0x70>)
 8004576:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004578:	4a0b      	ldr	r2, [pc, #44]	; (80045a8 <HAL_Init+0x74>)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800457e:	2000      	movs	r0, #0
 8004580:	f000 f814 	bl	80045ac <HAL_InitTick>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e002      	b.n	8004594 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800458e:	f7fe fc3b 	bl	8002e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	58024400 	.word	0x58024400
 80045a0:	08010f18 	.word	0x08010f18
 80045a4:	2400001c 	.word	0x2400001c
 80045a8:	24000018 	.word	0x24000018

080045ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80045b4:	4b15      	ldr	r3, [pc, #84]	; (800460c <HAL_InitTick+0x60>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e021      	b.n	8004604 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80045c0:	4b13      	ldr	r3, [pc, #76]	; (8004610 <HAL_InitTick+0x64>)
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	4b11      	ldr	r3, [pc, #68]	; (800460c <HAL_InitTick+0x60>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	4619      	mov	r1, r3
 80045ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	4618      	mov	r0, r3
 80045d8:	f000 f94d 	bl	8004876 <HAL_SYSTICK_Config>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e00e      	b.n	8004604 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2b0f      	cmp	r3, #15
 80045ea:	d80a      	bhi.n	8004602 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045ec:	2200      	movs	r2, #0
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	f04f 30ff 	mov.w	r0, #4294967295
 80045f4:	f000 f917 	bl	8004826 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045f8:	4a06      	ldr	r2, [pc, #24]	; (8004614 <HAL_InitTick+0x68>)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	24000024 	.word	0x24000024
 8004610:	24000018 	.word	0x24000018
 8004614:	24000020 	.word	0x24000020

08004618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800461c:	4b06      	ldr	r3, [pc, #24]	; (8004638 <HAL_IncTick+0x20>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	461a      	mov	r2, r3
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_IncTick+0x24>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4413      	add	r3, r2
 8004628:	4a04      	ldr	r2, [pc, #16]	; (800463c <HAL_IncTick+0x24>)
 800462a:	6013      	str	r3, [r2, #0]
}
 800462c:	bf00      	nop
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	24000024 	.word	0x24000024
 800463c:	24000d20 	.word	0x24000d20

08004640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  return uwTick;
 8004644:	4b03      	ldr	r3, [pc, #12]	; (8004654 <HAL_GetTick+0x14>)
 8004646:	681b      	ldr	r3, [r3, #0]
}
 8004648:	4618      	mov	r0, r3
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	24000d20 	.word	0x24000d20

08004658 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800465c:	4b03      	ldr	r3, [pc, #12]	; (800466c <HAL_GetREVID+0x14>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	0c1b      	lsrs	r3, r3, #16
}
 8004662:	4618      	mov	r0, r3
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	5c001000 	.word	0x5c001000

08004670 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004680:	4b0b      	ldr	r3, [pc, #44]	; (80046b0 <__NVIC_SetPriorityGrouping+0x40>)
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800468c:	4013      	ands	r3, r2
 800468e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004698:	4b06      	ldr	r3, [pc, #24]	; (80046b4 <__NVIC_SetPriorityGrouping+0x44>)
 800469a:	4313      	orrs	r3, r2
 800469c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800469e:	4a04      	ldr	r2, [pc, #16]	; (80046b0 <__NVIC_SetPriorityGrouping+0x40>)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	60d3      	str	r3, [r2, #12]
}
 80046a4:	bf00      	nop
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	e000ed00 	.word	0xe000ed00
 80046b4:	05fa0000 	.word	0x05fa0000

080046b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046bc:	4b04      	ldr	r3, [pc, #16]	; (80046d0 <__NVIC_GetPriorityGrouping+0x18>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	0a1b      	lsrs	r3, r3, #8
 80046c2:	f003 0307 	and.w	r3, r3, #7
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	e000ed00 	.word	0xe000ed00

080046d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	db0b      	blt.n	80046fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	f003 021f 	and.w	r2, r3, #31
 80046ec:	4907      	ldr	r1, [pc, #28]	; (800470c <__NVIC_EnableIRQ+0x38>)
 80046ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	2001      	movs	r0, #1
 80046f6:	fa00 f202 	lsl.w	r2, r0, r2
 80046fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	e000e100 	.word	0xe000e100

08004710 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	6039      	str	r1, [r7, #0]
 800471a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800471c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004720:	2b00      	cmp	r3, #0
 8004722:	db0a      	blt.n	800473a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	b2da      	uxtb	r2, r3
 8004728:	490c      	ldr	r1, [pc, #48]	; (800475c <__NVIC_SetPriority+0x4c>)
 800472a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800472e:	0112      	lsls	r2, r2, #4
 8004730:	b2d2      	uxtb	r2, r2
 8004732:	440b      	add	r3, r1
 8004734:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004738:	e00a      	b.n	8004750 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	b2da      	uxtb	r2, r3
 800473e:	4908      	ldr	r1, [pc, #32]	; (8004760 <__NVIC_SetPriority+0x50>)
 8004740:	88fb      	ldrh	r3, [r7, #6]
 8004742:	f003 030f 	and.w	r3, r3, #15
 8004746:	3b04      	subs	r3, #4
 8004748:	0112      	lsls	r2, r2, #4
 800474a:	b2d2      	uxtb	r2, r2
 800474c:	440b      	add	r3, r1
 800474e:	761a      	strb	r2, [r3, #24]
}
 8004750:	bf00      	nop
 8004752:	370c      	adds	r7, #12
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	e000e100 	.word	0xe000e100
 8004760:	e000ed00 	.word	0xe000ed00

08004764 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004764:	b480      	push	{r7}
 8004766:	b089      	sub	sp, #36	; 0x24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 0307 	and.w	r3, r3, #7
 8004776:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f1c3 0307 	rsb	r3, r3, #7
 800477e:	2b04      	cmp	r3, #4
 8004780:	bf28      	it	cs
 8004782:	2304      	movcs	r3, #4
 8004784:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3304      	adds	r3, #4
 800478a:	2b06      	cmp	r3, #6
 800478c:	d902      	bls.n	8004794 <NVIC_EncodePriority+0x30>
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3b03      	subs	r3, #3
 8004792:	e000      	b.n	8004796 <NVIC_EncodePriority+0x32>
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004798:	f04f 32ff 	mov.w	r2, #4294967295
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	fa02 f303 	lsl.w	r3, r2, r3
 80047a2:	43da      	mvns	r2, r3
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	401a      	ands	r2, r3
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047ac:	f04f 31ff 	mov.w	r1, #4294967295
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	fa01 f303 	lsl.w	r3, r1, r3
 80047b6:	43d9      	mvns	r1, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047bc:	4313      	orrs	r3, r2
         );
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3724      	adds	r7, #36	; 0x24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047dc:	d301      	bcc.n	80047e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047de:	2301      	movs	r3, #1
 80047e0:	e00f      	b.n	8004802 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047e2:	4a0a      	ldr	r2, [pc, #40]	; (800480c <SysTick_Config+0x40>)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047ea:	210f      	movs	r1, #15
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	f7ff ff8e 	bl	8004710 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047f4:	4b05      	ldr	r3, [pc, #20]	; (800480c <SysTick_Config+0x40>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047fa:	4b04      	ldr	r3, [pc, #16]	; (800480c <SysTick_Config+0x40>)
 80047fc:	2207      	movs	r2, #7
 80047fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	e000e010 	.word	0xe000e010

08004810 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7ff ff29 	bl	8004670 <__NVIC_SetPriorityGrouping>
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b086      	sub	sp, #24
 800482a:	af00      	add	r7, sp, #0
 800482c:	4603      	mov	r3, r0
 800482e:	60b9      	str	r1, [r7, #8]
 8004830:	607a      	str	r2, [r7, #4]
 8004832:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004834:	f7ff ff40 	bl	80046b8 <__NVIC_GetPriorityGrouping>
 8004838:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	6978      	ldr	r0, [r7, #20]
 8004840:	f7ff ff90 	bl	8004764 <NVIC_EncodePriority>
 8004844:	4602      	mov	r2, r0
 8004846:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800484a:	4611      	mov	r1, r2
 800484c:	4618      	mov	r0, r3
 800484e:	f7ff ff5f 	bl	8004710 <__NVIC_SetPriority>
}
 8004852:	bf00      	nop
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	af00      	add	r7, sp, #0
 8004860:	4603      	mov	r3, r0
 8004862:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff ff33 	bl	80046d4 <__NVIC_EnableIRQ>
}
 800486e:	bf00      	nop
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff ffa4 	bl	80047cc <SysTick_Config>
 8004884:	4603      	mov	r3, r0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3708      	adds	r7, #8
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8004892:	f000 f802 	bl	800489a <HAL_SYSTICK_Callback>
}
 8004896:	bf00      	nop
 8004898:	bd80      	pop	{r7, pc}

0800489a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800489a:	b480      	push	{r7}
 800489c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e054      	b.n	8004964 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	7f5b      	ldrb	r3, [r3, #29]
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d105      	bne.n	80048d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fc fb4e 	bl	8000f6c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	791b      	ldrb	r3, [r3, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10c      	bne.n	80048f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a22      	ldr	r2, [pc, #136]	; (800496c <HAL_CRC_Init+0xc4>)
 80048e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0218 	bic.w	r2, r2, #24
 80048f4:	609a      	str	r2, [r3, #8]
 80048f6:	e00c      	b.n	8004912 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6899      	ldr	r1, [r3, #8]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	461a      	mov	r2, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f948 	bl	8004b98 <HAL_CRCEx_Polynomial_Set>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e028      	b.n	8004964 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	795b      	ldrb	r3, [r3, #5]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d105      	bne.n	8004926 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f04f 32ff 	mov.w	r2, #4294967295
 8004922:	611a      	str	r2, [r3, #16]
 8004924:	e004      	b.n	8004930 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6912      	ldr	r2, [r2, #16]
 800492e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699a      	ldr	r2, [r3, #24]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	04c11db7 	.word	0x04c11db7

08004970 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b086      	sub	sp, #24
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2202      	movs	r2, #2
 8004984:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0201 	orr.w	r2, r2, #1
 8004994:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	2b03      	cmp	r3, #3
 800499c:	d006      	beq.n	80049ac <HAL_CRC_Calculate+0x3c>
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d829      	bhi.n	80049f6 <HAL_CRC_Calculate+0x86>
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d019      	beq.n	80049da <HAL_CRC_Calculate+0x6a>
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d01e      	beq.n	80049e8 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80049aa:	e024      	b.n	80049f6 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	e00a      	b.n	80049c8 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	441a      	add	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	6812      	ldr	r2, [r2, #0]
 80049c0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	3301      	adds	r3, #1
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d3f0      	bcc.n	80049b2 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	613b      	str	r3, [r7, #16]
      break;
 80049d8:	e00e      	b.n	80049f8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f000 f812 	bl	8004a08 <CRC_Handle_8>
 80049e4:	6138      	str	r0, [r7, #16]
      break;
 80049e6:	e007      	b.n	80049f8 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	68b9      	ldr	r1, [r7, #8]
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 f899 	bl	8004b24 <CRC_Handle_16>
 80049f2:	6138      	str	r0, [r7, #16]
      break;
 80049f4:	e000      	b.n	80049f8 <HAL_CRC_Calculate+0x88>
      break;
 80049f6:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2201      	movs	r2, #1
 80049fc:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80049fe:	693b      	ldr	r3, [r7, #16]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b089      	sub	sp, #36	; 0x24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004a14:	2300      	movs	r3, #0
 8004a16:	61fb      	str	r3, [r7, #28]
 8004a18:	e023      	b.n	8004a62 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	4413      	add	r3, r2
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	440b      	add	r3, r1
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004a34:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	3302      	adds	r3, #2
 8004a3c:	68b9      	ldr	r1, [r7, #8]
 8004a3e:	440b      	add	r3, r1
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004a44:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	3303      	adds	r3, #3
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	440b      	add	r3, r1
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004a58:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004a5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	61fb      	str	r3, [r7, #28]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	089b      	lsrs	r3, r3, #2
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d3d6      	bcc.n	8004a1a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d04d      	beq.n	8004b12 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d107      	bne.n	8004a90 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	4413      	add	r3, r2
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	781b      	ldrb	r3, [r3, #0]
 8004a8e:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d116      	bne.n	8004ac8 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	021b      	lsls	r3, r3, #8
 8004aa6:	b21a      	sxth	r2, r3
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	3301      	adds	r3, #1
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	440b      	add	r3, r1
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	b21b      	sxth	r3, r3
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	b21b      	sxth	r3, r3
 8004aba:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	8b7a      	ldrh	r2, [r7, #26]
 8004ac6:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d11f      	bne.n	8004b12 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	4413      	add	r3, r2
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	021b      	lsls	r3, r3, #8
 8004ade:	b21a      	sxth	r2, r3
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	440b      	add	r3, r1
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	b21b      	sxth	r3, r3
 8004aee:	4313      	orrs	r3, r2
 8004af0:	b21b      	sxth	r3, r3
 8004af2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	8b7a      	ldrh	r2, [r7, #26]
 8004afe:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	3302      	adds	r3, #2
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	4413      	add	r3, r2
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3724      	adds	r7, #36	; 0x24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b087      	sub	sp, #28
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004b30:	2300      	movs	r3, #0
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e013      	b.n	8004b5e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	041a      	lsls	r2, r3, #16
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	3302      	adds	r3, #2
 8004b48:	68b9      	ldr	r1, [r7, #8]
 8004b4a:	440b      	add	r3, r1
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	085b      	lsrs	r3, r3, #1
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d3e6      	bcc.n	8004b36 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d009      	beq.n	8004b86 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	4413      	add	r3, r2
 8004b80:	881a      	ldrh	r2, [r3, #0]
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	371c      	adds	r7, #28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr

08004b98 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004ba8:	231f      	movs	r3, #31
 8004baa:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004bac:	bf00      	nop
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1e5a      	subs	r2, r3, #1
 8004bb2:	613a      	str	r2, [r7, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d009      	beq.n	8004bcc <HAL_CRCEx_Polynomial_Set+0x34>
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	f003 031f 	and.w	r3, r3, #31
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0f0      	beq.n	8004bae <HAL_CRCEx_Polynomial_Set+0x16>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b18      	cmp	r3, #24
 8004bd0:	d846      	bhi.n	8004c60 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004bd2:	a201      	add	r2, pc, #4	; (adr r2, 8004bd8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004bd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd8:	08004c67 	.word	0x08004c67
 8004bdc:	08004c61 	.word	0x08004c61
 8004be0:	08004c61 	.word	0x08004c61
 8004be4:	08004c61 	.word	0x08004c61
 8004be8:	08004c61 	.word	0x08004c61
 8004bec:	08004c61 	.word	0x08004c61
 8004bf0:	08004c61 	.word	0x08004c61
 8004bf4:	08004c61 	.word	0x08004c61
 8004bf8:	08004c55 	.word	0x08004c55
 8004bfc:	08004c61 	.word	0x08004c61
 8004c00:	08004c61 	.word	0x08004c61
 8004c04:	08004c61 	.word	0x08004c61
 8004c08:	08004c61 	.word	0x08004c61
 8004c0c:	08004c61 	.word	0x08004c61
 8004c10:	08004c61 	.word	0x08004c61
 8004c14:	08004c61 	.word	0x08004c61
 8004c18:	08004c49 	.word	0x08004c49
 8004c1c:	08004c61 	.word	0x08004c61
 8004c20:	08004c61 	.word	0x08004c61
 8004c24:	08004c61 	.word	0x08004c61
 8004c28:	08004c61 	.word	0x08004c61
 8004c2c:	08004c61 	.word	0x08004c61
 8004c30:	08004c61 	.word	0x08004c61
 8004c34:	08004c61 	.word	0x08004c61
 8004c38:	08004c3d 	.word	0x08004c3d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b06      	cmp	r3, #6
 8004c40:	d913      	bls.n	8004c6a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c46:	e010      	b.n	8004c6a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b07      	cmp	r3, #7
 8004c4c:	d90f      	bls.n	8004c6e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c52:	e00c      	b.n	8004c6e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	2b0f      	cmp	r3, #15
 8004c58:	d90b      	bls.n	8004c72 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004c5e:	e008      	b.n	8004c72 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	75fb      	strb	r3, [r7, #23]
      break;
 8004c64:	e006      	b.n	8004c74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c66:	bf00      	nop
 8004c68:	e004      	b.n	8004c74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c6a:	bf00      	nop
 8004c6c:	e002      	b.n	8004c74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c6e:	bf00      	nop
 8004c70:	e000      	b.n	8004c74 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004c72:	bf00      	nop
  }
  if (status == HAL_OK)
 8004c74:	7dfb      	ldrb	r3, [r7, #23]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10d      	bne.n	8004c96 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 0118 	bic.w	r1, r3, #24
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004cac:	f7ff fcc8 	bl	8004640 <HAL_GetTick>
 8004cb0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e316      	b.n	80052ea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a66      	ldr	r2, [pc, #408]	; (8004e5c <HAL_DMA_Init+0x1b8>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d04a      	beq.n	8004d5c <HAL_DMA_Init+0xb8>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a65      	ldr	r2, [pc, #404]	; (8004e60 <HAL_DMA_Init+0x1bc>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d045      	beq.n	8004d5c <HAL_DMA_Init+0xb8>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a63      	ldr	r2, [pc, #396]	; (8004e64 <HAL_DMA_Init+0x1c0>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d040      	beq.n	8004d5c <HAL_DMA_Init+0xb8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a62      	ldr	r2, [pc, #392]	; (8004e68 <HAL_DMA_Init+0x1c4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d03b      	beq.n	8004d5c <HAL_DMA_Init+0xb8>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a60      	ldr	r2, [pc, #384]	; (8004e6c <HAL_DMA_Init+0x1c8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d036      	beq.n	8004d5c <HAL_DMA_Init+0xb8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a5f      	ldr	r2, [pc, #380]	; (8004e70 <HAL_DMA_Init+0x1cc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d031      	beq.n	8004d5c <HAL_DMA_Init+0xb8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a5d      	ldr	r2, [pc, #372]	; (8004e74 <HAL_DMA_Init+0x1d0>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d02c      	beq.n	8004d5c <HAL_DMA_Init+0xb8>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a5c      	ldr	r2, [pc, #368]	; (8004e78 <HAL_DMA_Init+0x1d4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d027      	beq.n	8004d5c <HAL_DMA_Init+0xb8>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a5a      	ldr	r2, [pc, #360]	; (8004e7c <HAL_DMA_Init+0x1d8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d022      	beq.n	8004d5c <HAL_DMA_Init+0xb8>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a59      	ldr	r2, [pc, #356]	; (8004e80 <HAL_DMA_Init+0x1dc>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d01d      	beq.n	8004d5c <HAL_DMA_Init+0xb8>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a57      	ldr	r2, [pc, #348]	; (8004e84 <HAL_DMA_Init+0x1e0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d018      	beq.n	8004d5c <HAL_DMA_Init+0xb8>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a56      	ldr	r2, [pc, #344]	; (8004e88 <HAL_DMA_Init+0x1e4>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d013      	beq.n	8004d5c <HAL_DMA_Init+0xb8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a54      	ldr	r2, [pc, #336]	; (8004e8c <HAL_DMA_Init+0x1e8>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00e      	beq.n	8004d5c <HAL_DMA_Init+0xb8>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a53      	ldr	r2, [pc, #332]	; (8004e90 <HAL_DMA_Init+0x1ec>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d009      	beq.n	8004d5c <HAL_DMA_Init+0xb8>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a51      	ldr	r2, [pc, #324]	; (8004e94 <HAL_DMA_Init+0x1f0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <HAL_DMA_Init+0xb8>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a50      	ldr	r2, [pc, #320]	; (8004e98 <HAL_DMA_Init+0x1f4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d101      	bne.n	8004d60 <HAL_DMA_Init+0xbc>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <HAL_DMA_Init+0xbe>
 8004d60:	2300      	movs	r3, #0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 813b 	beq.w	8004fde <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a37      	ldr	r2, [pc, #220]	; (8004e5c <HAL_DMA_Init+0x1b8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d04a      	beq.n	8004e18 <HAL_DMA_Init+0x174>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a36      	ldr	r2, [pc, #216]	; (8004e60 <HAL_DMA_Init+0x1bc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d045      	beq.n	8004e18 <HAL_DMA_Init+0x174>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a34      	ldr	r2, [pc, #208]	; (8004e64 <HAL_DMA_Init+0x1c0>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d040      	beq.n	8004e18 <HAL_DMA_Init+0x174>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a33      	ldr	r2, [pc, #204]	; (8004e68 <HAL_DMA_Init+0x1c4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d03b      	beq.n	8004e18 <HAL_DMA_Init+0x174>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a31      	ldr	r2, [pc, #196]	; (8004e6c <HAL_DMA_Init+0x1c8>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d036      	beq.n	8004e18 <HAL_DMA_Init+0x174>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a30      	ldr	r2, [pc, #192]	; (8004e70 <HAL_DMA_Init+0x1cc>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d031      	beq.n	8004e18 <HAL_DMA_Init+0x174>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a2e      	ldr	r2, [pc, #184]	; (8004e74 <HAL_DMA_Init+0x1d0>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d02c      	beq.n	8004e18 <HAL_DMA_Init+0x174>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a2d      	ldr	r2, [pc, #180]	; (8004e78 <HAL_DMA_Init+0x1d4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d027      	beq.n	8004e18 <HAL_DMA_Init+0x174>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a2b      	ldr	r2, [pc, #172]	; (8004e7c <HAL_DMA_Init+0x1d8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d022      	beq.n	8004e18 <HAL_DMA_Init+0x174>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a2a      	ldr	r2, [pc, #168]	; (8004e80 <HAL_DMA_Init+0x1dc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d01d      	beq.n	8004e18 <HAL_DMA_Init+0x174>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a28      	ldr	r2, [pc, #160]	; (8004e84 <HAL_DMA_Init+0x1e0>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d018      	beq.n	8004e18 <HAL_DMA_Init+0x174>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a27      	ldr	r2, [pc, #156]	; (8004e88 <HAL_DMA_Init+0x1e4>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d013      	beq.n	8004e18 <HAL_DMA_Init+0x174>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a25      	ldr	r2, [pc, #148]	; (8004e8c <HAL_DMA_Init+0x1e8>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d00e      	beq.n	8004e18 <HAL_DMA_Init+0x174>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a24      	ldr	r2, [pc, #144]	; (8004e90 <HAL_DMA_Init+0x1ec>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d009      	beq.n	8004e18 <HAL_DMA_Init+0x174>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a22      	ldr	r2, [pc, #136]	; (8004e94 <HAL_DMA_Init+0x1f0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d004      	beq.n	8004e18 <HAL_DMA_Init+0x174>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a21      	ldr	r2, [pc, #132]	; (8004e98 <HAL_DMA_Init+0x1f4>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d108      	bne.n	8004e2a <HAL_DMA_Init+0x186>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	e007      	b.n	8004e3a <HAL_DMA_Init+0x196>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e3a:	e02f      	b.n	8004e9c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e3c:	f7ff fc00 	bl	8004640 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b05      	cmp	r3, #5
 8004e48:	d928      	bls.n	8004e9c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2203      	movs	r2, #3
 8004e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e246      	b.n	80052ea <HAL_DMA_Init+0x646>
 8004e5c:	40020010 	.word	0x40020010
 8004e60:	40020028 	.word	0x40020028
 8004e64:	40020040 	.word	0x40020040
 8004e68:	40020058 	.word	0x40020058
 8004e6c:	40020070 	.word	0x40020070
 8004e70:	40020088 	.word	0x40020088
 8004e74:	400200a0 	.word	0x400200a0
 8004e78:	400200b8 	.word	0x400200b8
 8004e7c:	40020410 	.word	0x40020410
 8004e80:	40020428 	.word	0x40020428
 8004e84:	40020440 	.word	0x40020440
 8004e88:	40020458 	.word	0x40020458
 8004e8c:	40020470 	.word	0x40020470
 8004e90:	40020488 	.word	0x40020488
 8004e94:	400204a0 	.word	0x400204a0
 8004e98:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1c8      	bne.n	8004e3c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4b83      	ldr	r3, [pc, #524]	; (80050c4 <HAL_DMA_Init+0x420>)
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004ec2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ece:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004eda:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d107      	bne.n	8004f00 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004f00:	4b71      	ldr	r3, [pc, #452]	; (80050c8 <HAL_DMA_Init+0x424>)
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	4b71      	ldr	r3, [pc, #452]	; (80050cc <HAL_DMA_Init+0x428>)
 8004f06:	4013      	ands	r3, r2
 8004f08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f0c:	d328      	bcc.n	8004f60 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	2b28      	cmp	r3, #40	; 0x28
 8004f14:	d903      	bls.n	8004f1e <HAL_DMA_Init+0x27a>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f1c:	d917      	bls.n	8004f4e <HAL_DMA_Init+0x2aa>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	2b3e      	cmp	r3, #62	; 0x3e
 8004f24:	d903      	bls.n	8004f2e <HAL_DMA_Init+0x28a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2b42      	cmp	r3, #66	; 0x42
 8004f2c:	d90f      	bls.n	8004f4e <HAL_DMA_Init+0x2aa>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b46      	cmp	r3, #70	; 0x46
 8004f34:	d903      	bls.n	8004f3e <HAL_DMA_Init+0x29a>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	2b48      	cmp	r3, #72	; 0x48
 8004f3c:	d907      	bls.n	8004f4e <HAL_DMA_Init+0x2aa>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b4e      	cmp	r3, #78	; 0x4e
 8004f44:	d905      	bls.n	8004f52 <HAL_DMA_Init+0x2ae>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b52      	cmp	r3, #82	; 0x52
 8004f4c:	d801      	bhi.n	8004f52 <HAL_DMA_Init+0x2ae>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <HAL_DMA_Init+0x2b0>
 8004f52:	2300      	movs	r3, #0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f5e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 0307 	bic.w	r3, r3, #7
 8004f76:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d117      	bne.n	8004fba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00e      	beq.n	8004fba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f002 fb31 	bl	8007604 <DMA_CheckFifoParam>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d008      	beq.n	8004fba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2240      	movs	r2, #64	; 0x40
 8004fac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e197      	b.n	80052ea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f002 fa6c 	bl	80074a0 <DMA_CalcBaseAndBitshift>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	223f      	movs	r2, #63	; 0x3f
 8004fd6:	409a      	lsls	r2, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	e0cd      	b.n	800517a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a3b      	ldr	r2, [pc, #236]	; (80050d0 <HAL_DMA_Init+0x42c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d022      	beq.n	800502e <HAL_DMA_Init+0x38a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a39      	ldr	r2, [pc, #228]	; (80050d4 <HAL_DMA_Init+0x430>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d01d      	beq.n	800502e <HAL_DMA_Init+0x38a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a38      	ldr	r2, [pc, #224]	; (80050d8 <HAL_DMA_Init+0x434>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d018      	beq.n	800502e <HAL_DMA_Init+0x38a>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a36      	ldr	r2, [pc, #216]	; (80050dc <HAL_DMA_Init+0x438>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d013      	beq.n	800502e <HAL_DMA_Init+0x38a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a35      	ldr	r2, [pc, #212]	; (80050e0 <HAL_DMA_Init+0x43c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00e      	beq.n	800502e <HAL_DMA_Init+0x38a>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a33      	ldr	r2, [pc, #204]	; (80050e4 <HAL_DMA_Init+0x440>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d009      	beq.n	800502e <HAL_DMA_Init+0x38a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a32      	ldr	r2, [pc, #200]	; (80050e8 <HAL_DMA_Init+0x444>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d004      	beq.n	800502e <HAL_DMA_Init+0x38a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a30      	ldr	r2, [pc, #192]	; (80050ec <HAL_DMA_Init+0x448>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d101      	bne.n	8005032 <HAL_DMA_Init+0x38e>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <HAL_DMA_Init+0x390>
 8005032:	2300      	movs	r3, #0
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8097 	beq.w	8005168 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a24      	ldr	r2, [pc, #144]	; (80050d0 <HAL_DMA_Init+0x42c>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d021      	beq.n	8005088 <HAL_DMA_Init+0x3e4>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a22      	ldr	r2, [pc, #136]	; (80050d4 <HAL_DMA_Init+0x430>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d01c      	beq.n	8005088 <HAL_DMA_Init+0x3e4>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a21      	ldr	r2, [pc, #132]	; (80050d8 <HAL_DMA_Init+0x434>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d017      	beq.n	8005088 <HAL_DMA_Init+0x3e4>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1f      	ldr	r2, [pc, #124]	; (80050dc <HAL_DMA_Init+0x438>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d012      	beq.n	8005088 <HAL_DMA_Init+0x3e4>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1e      	ldr	r2, [pc, #120]	; (80050e0 <HAL_DMA_Init+0x43c>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d00d      	beq.n	8005088 <HAL_DMA_Init+0x3e4>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1c      	ldr	r2, [pc, #112]	; (80050e4 <HAL_DMA_Init+0x440>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d008      	beq.n	8005088 <HAL_DMA_Init+0x3e4>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1b      	ldr	r2, [pc, #108]	; (80050e8 <HAL_DMA_Init+0x444>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d003      	beq.n	8005088 <HAL_DMA_Init+0x3e4>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a19      	ldr	r2, [pc, #100]	; (80050ec <HAL_DMA_Init+0x448>)
 8005086:	4293      	cmp	r3, r2
 8005088:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2202      	movs	r2, #2
 800508e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <HAL_DMA_Init+0x44c>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	d020      	beq.n	80050f4 <HAL_DMA_Init+0x450>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b80      	cmp	r3, #128	; 0x80
 80050b8:	d102      	bne.n	80050c0 <HAL_DMA_Init+0x41c>
 80050ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050be:	e01a      	b.n	80050f6 <HAL_DMA_Init+0x452>
 80050c0:	2300      	movs	r3, #0
 80050c2:	e018      	b.n	80050f6 <HAL_DMA_Init+0x452>
 80050c4:	fe10803f 	.word	0xfe10803f
 80050c8:	5c001000 	.word	0x5c001000
 80050cc:	ffff0000 	.word	0xffff0000
 80050d0:	58025408 	.word	0x58025408
 80050d4:	5802541c 	.word	0x5802541c
 80050d8:	58025430 	.word	0x58025430
 80050dc:	58025444 	.word	0x58025444
 80050e0:	58025458 	.word	0x58025458
 80050e4:	5802546c 	.word	0x5802546c
 80050e8:	58025480 	.word	0x58025480
 80050ec:	58025494 	.word	0x58025494
 80050f0:	fffe000f 	.word	0xfffe000f
 80050f4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	68d2      	ldr	r2, [r2, #12]
 80050fa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005104:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800510c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005114:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800511c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005124:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	461a      	mov	r2, r3
 800513a:	4b6e      	ldr	r3, [pc, #440]	; (80052f4 <HAL_DMA_Init+0x650>)
 800513c:	4413      	add	r3, r2
 800513e:	4a6e      	ldr	r2, [pc, #440]	; (80052f8 <HAL_DMA_Init+0x654>)
 8005140:	fba2 2303 	umull	r2, r3, r2, r3
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	009a      	lsls	r2, r3, #2
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f002 f9a7 	bl	80074a0 <DMA_CalcBaseAndBitshift>
 8005152:	4603      	mov	r3, r0
 8005154:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	2201      	movs	r2, #1
 8005160:	409a      	lsls	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	605a      	str	r2, [r3, #4]
 8005166:	e008      	b.n	800517a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2240      	movs	r2, #64	; 0x40
 800516c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2203      	movs	r2, #3
 8005172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e0b7      	b.n	80052ea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a5f      	ldr	r2, [pc, #380]	; (80052fc <HAL_DMA_Init+0x658>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d072      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a5d      	ldr	r2, [pc, #372]	; (8005300 <HAL_DMA_Init+0x65c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d06d      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a5c      	ldr	r2, [pc, #368]	; (8005304 <HAL_DMA_Init+0x660>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d068      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a5a      	ldr	r2, [pc, #360]	; (8005308 <HAL_DMA_Init+0x664>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d063      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a59      	ldr	r2, [pc, #356]	; (800530c <HAL_DMA_Init+0x668>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d05e      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a57      	ldr	r2, [pc, #348]	; (8005310 <HAL_DMA_Init+0x66c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d059      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a56      	ldr	r2, [pc, #344]	; (8005314 <HAL_DMA_Init+0x670>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d054      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a54      	ldr	r2, [pc, #336]	; (8005318 <HAL_DMA_Init+0x674>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d04f      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a53      	ldr	r2, [pc, #332]	; (800531c <HAL_DMA_Init+0x678>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d04a      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a51      	ldr	r2, [pc, #324]	; (8005320 <HAL_DMA_Init+0x67c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d045      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a50      	ldr	r2, [pc, #320]	; (8005324 <HAL_DMA_Init+0x680>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d040      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a4e      	ldr	r2, [pc, #312]	; (8005328 <HAL_DMA_Init+0x684>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d03b      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a4d      	ldr	r2, [pc, #308]	; (800532c <HAL_DMA_Init+0x688>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d036      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a4b      	ldr	r2, [pc, #300]	; (8005330 <HAL_DMA_Init+0x68c>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d031      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a4a      	ldr	r2, [pc, #296]	; (8005334 <HAL_DMA_Init+0x690>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d02c      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a48      	ldr	r2, [pc, #288]	; (8005338 <HAL_DMA_Init+0x694>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d027      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a47      	ldr	r2, [pc, #284]	; (800533c <HAL_DMA_Init+0x698>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d022      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a45      	ldr	r2, [pc, #276]	; (8005340 <HAL_DMA_Init+0x69c>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d01d      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a44      	ldr	r2, [pc, #272]	; (8005344 <HAL_DMA_Init+0x6a0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d018      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a42      	ldr	r2, [pc, #264]	; (8005348 <HAL_DMA_Init+0x6a4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d013      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a41      	ldr	r2, [pc, #260]	; (800534c <HAL_DMA_Init+0x6a8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00e      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a3f      	ldr	r2, [pc, #252]	; (8005350 <HAL_DMA_Init+0x6ac>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d009      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a3e      	ldr	r2, [pc, #248]	; (8005354 <HAL_DMA_Init+0x6b0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d004      	beq.n	800526a <HAL_DMA_Init+0x5c6>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a3c      	ldr	r2, [pc, #240]	; (8005358 <HAL_DMA_Init+0x6b4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d101      	bne.n	800526e <HAL_DMA_Init+0x5ca>
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <HAL_DMA_Init+0x5cc>
 800526e:	2300      	movs	r3, #0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d032      	beq.n	80052da <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f002 fa41 	bl	80076fc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b80      	cmp	r3, #128	; 0x80
 8005280:	d102      	bne.n	8005288 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685a      	ldr	r2, [r3, #4]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800529c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d010      	beq.n	80052c8 <HAL_DMA_Init+0x624>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d80c      	bhi.n	80052c8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f002 fabe 	bl	8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80052c4:	605a      	str	r2, [r3, #4]
 80052c6:	e008      	b.n	80052da <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	a7fdabf8 	.word	0xa7fdabf8
 80052f8:	cccccccd 	.word	0xcccccccd
 80052fc:	40020010 	.word	0x40020010
 8005300:	40020028 	.word	0x40020028
 8005304:	40020040 	.word	0x40020040
 8005308:	40020058 	.word	0x40020058
 800530c:	40020070 	.word	0x40020070
 8005310:	40020088 	.word	0x40020088
 8005314:	400200a0 	.word	0x400200a0
 8005318:	400200b8 	.word	0x400200b8
 800531c:	40020410 	.word	0x40020410
 8005320:	40020428 	.word	0x40020428
 8005324:	40020440 	.word	0x40020440
 8005328:	40020458 	.word	0x40020458
 800532c:	40020470 	.word	0x40020470
 8005330:	40020488 	.word	0x40020488
 8005334:	400204a0 	.word	0x400204a0
 8005338:	400204b8 	.word	0x400204b8
 800533c:	58025408 	.word	0x58025408
 8005340:	5802541c 	.word	0x5802541c
 8005344:	58025430 	.word	0x58025430
 8005348:	58025444 	.word	0x58025444
 800534c:	58025458 	.word	0x58025458
 8005350:	5802546c 	.word	0x5802546c
 8005354:	58025480 	.word	0x58025480
 8005358:	58025494 	.word	0x58025494

0800535c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
 8005368:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e226      	b.n	80057c6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800537e:	2b01      	cmp	r3, #1
 8005380:	d101      	bne.n	8005386 <HAL_DMA_Start_IT+0x2a>
 8005382:	2302      	movs	r3, #2
 8005384:	e21f      	b.n	80057c6 <HAL_DMA_Start_IT+0x46a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b01      	cmp	r3, #1
 8005398:	f040 820a 	bne.w	80057b0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a68      	ldr	r2, [pc, #416]	; (8005550 <HAL_DMA_Start_IT+0x1f4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d04a      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a66      	ldr	r2, [pc, #408]	; (8005554 <HAL_DMA_Start_IT+0x1f8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d045      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a65      	ldr	r2, [pc, #404]	; (8005558 <HAL_DMA_Start_IT+0x1fc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d040      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a63      	ldr	r2, [pc, #396]	; (800555c <HAL_DMA_Start_IT+0x200>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d03b      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a62      	ldr	r2, [pc, #392]	; (8005560 <HAL_DMA_Start_IT+0x204>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d036      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a60      	ldr	r2, [pc, #384]	; (8005564 <HAL_DMA_Start_IT+0x208>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d031      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a5f      	ldr	r2, [pc, #380]	; (8005568 <HAL_DMA_Start_IT+0x20c>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d02c      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a5d      	ldr	r2, [pc, #372]	; (800556c <HAL_DMA_Start_IT+0x210>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d027      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a5c      	ldr	r2, [pc, #368]	; (8005570 <HAL_DMA_Start_IT+0x214>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d022      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a5a      	ldr	r2, [pc, #360]	; (8005574 <HAL_DMA_Start_IT+0x218>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d01d      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a59      	ldr	r2, [pc, #356]	; (8005578 <HAL_DMA_Start_IT+0x21c>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d018      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a57      	ldr	r2, [pc, #348]	; (800557c <HAL_DMA_Start_IT+0x220>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d013      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a56      	ldr	r2, [pc, #344]	; (8005580 <HAL_DMA_Start_IT+0x224>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00e      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a54      	ldr	r2, [pc, #336]	; (8005584 <HAL_DMA_Start_IT+0x228>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d009      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a53      	ldr	r2, [pc, #332]	; (8005588 <HAL_DMA_Start_IT+0x22c>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d004      	beq.n	800544a <HAL_DMA_Start_IT+0xee>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a51      	ldr	r2, [pc, #324]	; (800558c <HAL_DMA_Start_IT+0x230>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d108      	bne.n	800545c <HAL_DMA_Start_IT+0x100>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0201 	bic.w	r2, r2, #1
 8005458:	601a      	str	r2, [r3, #0]
 800545a:	e007      	b.n	800546c <HAL_DMA_Start_IT+0x110>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f022 0201 	bic.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	68f8      	ldr	r0, [r7, #12]
 8005474:	f001 fe68 	bl	8007148 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a34      	ldr	r2, [pc, #208]	; (8005550 <HAL_DMA_Start_IT+0x1f4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d04a      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a33      	ldr	r2, [pc, #204]	; (8005554 <HAL_DMA_Start_IT+0x1f8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d045      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a31      	ldr	r2, [pc, #196]	; (8005558 <HAL_DMA_Start_IT+0x1fc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d040      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a30      	ldr	r2, [pc, #192]	; (800555c <HAL_DMA_Start_IT+0x200>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d03b      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a2e      	ldr	r2, [pc, #184]	; (8005560 <HAL_DMA_Start_IT+0x204>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d036      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a2d      	ldr	r2, [pc, #180]	; (8005564 <HAL_DMA_Start_IT+0x208>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d031      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2b      	ldr	r2, [pc, #172]	; (8005568 <HAL_DMA_Start_IT+0x20c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d02c      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a2a      	ldr	r2, [pc, #168]	; (800556c <HAL_DMA_Start_IT+0x210>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d027      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a28      	ldr	r2, [pc, #160]	; (8005570 <HAL_DMA_Start_IT+0x214>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d022      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a27      	ldr	r2, [pc, #156]	; (8005574 <HAL_DMA_Start_IT+0x218>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d01d      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a25      	ldr	r2, [pc, #148]	; (8005578 <HAL_DMA_Start_IT+0x21c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d018      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a24      	ldr	r2, [pc, #144]	; (800557c <HAL_DMA_Start_IT+0x220>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d013      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a22      	ldr	r2, [pc, #136]	; (8005580 <HAL_DMA_Start_IT+0x224>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00e      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a21      	ldr	r2, [pc, #132]	; (8005584 <HAL_DMA_Start_IT+0x228>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d009      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a1f      	ldr	r2, [pc, #124]	; (8005588 <HAL_DMA_Start_IT+0x22c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_DMA_Start_IT+0x1bc>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1e      	ldr	r2, [pc, #120]	; (800558c <HAL_DMA_Start_IT+0x230>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d101      	bne.n	800551c <HAL_DMA_Start_IT+0x1c0>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <HAL_DMA_Start_IT+0x1c2>
 800551c:	2300      	movs	r3, #0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d036      	beq.n	8005590 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f023 021e 	bic.w	r2, r3, #30
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0216 	orr.w	r2, r2, #22
 8005534:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	d03e      	beq.n	80055bc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0208 	orr.w	r2, r2, #8
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e035      	b.n	80055bc <HAL_DMA_Start_IT+0x260>
 8005550:	40020010 	.word	0x40020010
 8005554:	40020028 	.word	0x40020028
 8005558:	40020040 	.word	0x40020040
 800555c:	40020058 	.word	0x40020058
 8005560:	40020070 	.word	0x40020070
 8005564:	40020088 	.word	0x40020088
 8005568:	400200a0 	.word	0x400200a0
 800556c:	400200b8 	.word	0x400200b8
 8005570:	40020410 	.word	0x40020410
 8005574:	40020428 	.word	0x40020428
 8005578:	40020440 	.word	0x40020440
 800557c:	40020458 	.word	0x40020458
 8005580:	40020470 	.word	0x40020470
 8005584:	40020488 	.word	0x40020488
 8005588:	400204a0 	.word	0x400204a0
 800558c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f023 020e 	bic.w	r2, r3, #14
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 020a 	orr.w	r2, r2, #10
 80055a2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d007      	beq.n	80055bc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0204 	orr.w	r2, r2, #4
 80055ba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a83      	ldr	r2, [pc, #524]	; (80057d0 <HAL_DMA_Start_IT+0x474>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d072      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a82      	ldr	r2, [pc, #520]	; (80057d4 <HAL_DMA_Start_IT+0x478>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d06d      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a80      	ldr	r2, [pc, #512]	; (80057d8 <HAL_DMA_Start_IT+0x47c>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d068      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a7f      	ldr	r2, [pc, #508]	; (80057dc <HAL_DMA_Start_IT+0x480>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d063      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a7d      	ldr	r2, [pc, #500]	; (80057e0 <HAL_DMA_Start_IT+0x484>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d05e      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a7c      	ldr	r2, [pc, #496]	; (80057e4 <HAL_DMA_Start_IT+0x488>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d059      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a7a      	ldr	r2, [pc, #488]	; (80057e8 <HAL_DMA_Start_IT+0x48c>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d054      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a79      	ldr	r2, [pc, #484]	; (80057ec <HAL_DMA_Start_IT+0x490>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d04f      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a77      	ldr	r2, [pc, #476]	; (80057f0 <HAL_DMA_Start_IT+0x494>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d04a      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a76      	ldr	r2, [pc, #472]	; (80057f4 <HAL_DMA_Start_IT+0x498>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d045      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a74      	ldr	r2, [pc, #464]	; (80057f8 <HAL_DMA_Start_IT+0x49c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d040      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a73      	ldr	r2, [pc, #460]	; (80057fc <HAL_DMA_Start_IT+0x4a0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d03b      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a71      	ldr	r2, [pc, #452]	; (8005800 <HAL_DMA_Start_IT+0x4a4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d036      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a70      	ldr	r2, [pc, #448]	; (8005804 <HAL_DMA_Start_IT+0x4a8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d031      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a6e      	ldr	r2, [pc, #440]	; (8005808 <HAL_DMA_Start_IT+0x4ac>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d02c      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a6d      	ldr	r2, [pc, #436]	; (800580c <HAL_DMA_Start_IT+0x4b0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d027      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a6b      	ldr	r2, [pc, #428]	; (8005810 <HAL_DMA_Start_IT+0x4b4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d022      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a6a      	ldr	r2, [pc, #424]	; (8005814 <HAL_DMA_Start_IT+0x4b8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d01d      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a68      	ldr	r2, [pc, #416]	; (8005818 <HAL_DMA_Start_IT+0x4bc>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d018      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a67      	ldr	r2, [pc, #412]	; (800581c <HAL_DMA_Start_IT+0x4c0>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d013      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a65      	ldr	r2, [pc, #404]	; (8005820 <HAL_DMA_Start_IT+0x4c4>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00e      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a64      	ldr	r2, [pc, #400]	; (8005824 <HAL_DMA_Start_IT+0x4c8>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d009      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a62      	ldr	r2, [pc, #392]	; (8005828 <HAL_DMA_Start_IT+0x4cc>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d004      	beq.n	80056ac <HAL_DMA_Start_IT+0x350>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a61      	ldr	r2, [pc, #388]	; (800582c <HAL_DMA_Start_IT+0x4d0>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d101      	bne.n	80056b0 <HAL_DMA_Start_IT+0x354>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <HAL_DMA_Start_IT+0x356>
 80056b0:	2300      	movs	r3, #0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d01a      	beq.n	80056ec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056d2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d007      	beq.n	80056ec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056ea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a37      	ldr	r2, [pc, #220]	; (80057d0 <HAL_DMA_Start_IT+0x474>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d04a      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a36      	ldr	r2, [pc, #216]	; (80057d4 <HAL_DMA_Start_IT+0x478>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d045      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a34      	ldr	r2, [pc, #208]	; (80057d8 <HAL_DMA_Start_IT+0x47c>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d040      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a33      	ldr	r2, [pc, #204]	; (80057dc <HAL_DMA_Start_IT+0x480>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d03b      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a31      	ldr	r2, [pc, #196]	; (80057e0 <HAL_DMA_Start_IT+0x484>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d036      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a30      	ldr	r2, [pc, #192]	; (80057e4 <HAL_DMA_Start_IT+0x488>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d031      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a2e      	ldr	r2, [pc, #184]	; (80057e8 <HAL_DMA_Start_IT+0x48c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d02c      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a2d      	ldr	r2, [pc, #180]	; (80057ec <HAL_DMA_Start_IT+0x490>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d027      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a2b      	ldr	r2, [pc, #172]	; (80057f0 <HAL_DMA_Start_IT+0x494>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d022      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a2a      	ldr	r2, [pc, #168]	; (80057f4 <HAL_DMA_Start_IT+0x498>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d01d      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a28      	ldr	r2, [pc, #160]	; (80057f8 <HAL_DMA_Start_IT+0x49c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d018      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a27      	ldr	r2, [pc, #156]	; (80057fc <HAL_DMA_Start_IT+0x4a0>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d013      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a25      	ldr	r2, [pc, #148]	; (8005800 <HAL_DMA_Start_IT+0x4a4>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d00e      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a24      	ldr	r2, [pc, #144]	; (8005804 <HAL_DMA_Start_IT+0x4a8>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d009      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a22      	ldr	r2, [pc, #136]	; (8005808 <HAL_DMA_Start_IT+0x4ac>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d004      	beq.n	800578c <HAL_DMA_Start_IT+0x430>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a21      	ldr	r2, [pc, #132]	; (800580c <HAL_DMA_Start_IT+0x4b0>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d108      	bne.n	800579e <HAL_DMA_Start_IT+0x442>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f042 0201 	orr.w	r2, r2, #1
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	e012      	b.n	80057c4 <HAL_DMA_Start_IT+0x468>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0201 	orr.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	e009      	b.n	80057c4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	40020010 	.word	0x40020010
 80057d4:	40020028 	.word	0x40020028
 80057d8:	40020040 	.word	0x40020040
 80057dc:	40020058 	.word	0x40020058
 80057e0:	40020070 	.word	0x40020070
 80057e4:	40020088 	.word	0x40020088
 80057e8:	400200a0 	.word	0x400200a0
 80057ec:	400200b8 	.word	0x400200b8
 80057f0:	40020410 	.word	0x40020410
 80057f4:	40020428 	.word	0x40020428
 80057f8:	40020440 	.word	0x40020440
 80057fc:	40020458 	.word	0x40020458
 8005800:	40020470 	.word	0x40020470
 8005804:	40020488 	.word	0x40020488
 8005808:	400204a0 	.word	0x400204a0
 800580c:	400204b8 	.word	0x400204b8
 8005810:	58025408 	.word	0x58025408
 8005814:	5802541c 	.word	0x5802541c
 8005818:	58025430 	.word	0x58025430
 800581c:	58025444 	.word	0x58025444
 8005820:	58025458 	.word	0x58025458
 8005824:	5802546c 	.word	0x5802546c
 8005828:	58025480 	.word	0x58025480
 800582c:	58025494 	.word	0x58025494

08005830 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005838:	f7fe ff02 	bl	8004640 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e2dc      	b.n	8005e02 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d008      	beq.n	8005866 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2280      	movs	r2, #128	; 0x80
 8005858:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e2cd      	b.n	8005e02 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a76      	ldr	r2, [pc, #472]	; (8005a44 <HAL_DMA_Abort+0x214>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d04a      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a74      	ldr	r2, [pc, #464]	; (8005a48 <HAL_DMA_Abort+0x218>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d045      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a73      	ldr	r2, [pc, #460]	; (8005a4c <HAL_DMA_Abort+0x21c>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d040      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a71      	ldr	r2, [pc, #452]	; (8005a50 <HAL_DMA_Abort+0x220>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d03b      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a70      	ldr	r2, [pc, #448]	; (8005a54 <HAL_DMA_Abort+0x224>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d036      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a6e      	ldr	r2, [pc, #440]	; (8005a58 <HAL_DMA_Abort+0x228>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d031      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a6d      	ldr	r2, [pc, #436]	; (8005a5c <HAL_DMA_Abort+0x22c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d02c      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a6b      	ldr	r2, [pc, #428]	; (8005a60 <HAL_DMA_Abort+0x230>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d027      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a6a      	ldr	r2, [pc, #424]	; (8005a64 <HAL_DMA_Abort+0x234>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d022      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a68      	ldr	r2, [pc, #416]	; (8005a68 <HAL_DMA_Abort+0x238>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01d      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a67      	ldr	r2, [pc, #412]	; (8005a6c <HAL_DMA_Abort+0x23c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d018      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a65      	ldr	r2, [pc, #404]	; (8005a70 <HAL_DMA_Abort+0x240>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a64      	ldr	r2, [pc, #400]	; (8005a74 <HAL_DMA_Abort+0x244>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00e      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a62      	ldr	r2, [pc, #392]	; (8005a78 <HAL_DMA_Abort+0x248>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d009      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a61      	ldr	r2, [pc, #388]	; (8005a7c <HAL_DMA_Abort+0x24c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d004      	beq.n	8005906 <HAL_DMA_Abort+0xd6>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a5f      	ldr	r2, [pc, #380]	; (8005a80 <HAL_DMA_Abort+0x250>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d101      	bne.n	800590a <HAL_DMA_Abort+0xda>
 8005906:	2301      	movs	r3, #1
 8005908:	e000      	b.n	800590c <HAL_DMA_Abort+0xdc>
 800590a:	2300      	movs	r3, #0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d013      	beq.n	8005938 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 021e 	bic.w	r2, r2, #30
 800591e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695a      	ldr	r2, [r3, #20]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800592e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e00a      	b.n	800594e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 020e 	bic.w	r2, r2, #14
 8005946:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a3c      	ldr	r2, [pc, #240]	; (8005a44 <HAL_DMA_Abort+0x214>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d072      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a3a      	ldr	r2, [pc, #232]	; (8005a48 <HAL_DMA_Abort+0x218>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d06d      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a39      	ldr	r2, [pc, #228]	; (8005a4c <HAL_DMA_Abort+0x21c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d068      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a37      	ldr	r2, [pc, #220]	; (8005a50 <HAL_DMA_Abort+0x220>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d063      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a36      	ldr	r2, [pc, #216]	; (8005a54 <HAL_DMA_Abort+0x224>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d05e      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a34      	ldr	r2, [pc, #208]	; (8005a58 <HAL_DMA_Abort+0x228>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d059      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a33      	ldr	r2, [pc, #204]	; (8005a5c <HAL_DMA_Abort+0x22c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d054      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a31      	ldr	r2, [pc, #196]	; (8005a60 <HAL_DMA_Abort+0x230>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d04f      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a30      	ldr	r2, [pc, #192]	; (8005a64 <HAL_DMA_Abort+0x234>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d04a      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a2e      	ldr	r2, [pc, #184]	; (8005a68 <HAL_DMA_Abort+0x238>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d045      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a2d      	ldr	r2, [pc, #180]	; (8005a6c <HAL_DMA_Abort+0x23c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d040      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a2b      	ldr	r2, [pc, #172]	; (8005a70 <HAL_DMA_Abort+0x240>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d03b      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a2a      	ldr	r2, [pc, #168]	; (8005a74 <HAL_DMA_Abort+0x244>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d036      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a28      	ldr	r2, [pc, #160]	; (8005a78 <HAL_DMA_Abort+0x248>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d031      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a27      	ldr	r2, [pc, #156]	; (8005a7c <HAL_DMA_Abort+0x24c>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d02c      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a25      	ldr	r2, [pc, #148]	; (8005a80 <HAL_DMA_Abort+0x250>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d027      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a24      	ldr	r2, [pc, #144]	; (8005a84 <HAL_DMA_Abort+0x254>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d022      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a22      	ldr	r2, [pc, #136]	; (8005a88 <HAL_DMA_Abort+0x258>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d01d      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a21      	ldr	r2, [pc, #132]	; (8005a8c <HAL_DMA_Abort+0x25c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d018      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a1f      	ldr	r2, [pc, #124]	; (8005a90 <HAL_DMA_Abort+0x260>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d013      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1e      	ldr	r2, [pc, #120]	; (8005a94 <HAL_DMA_Abort+0x264>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d00e      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a1c      	ldr	r2, [pc, #112]	; (8005a98 <HAL_DMA_Abort+0x268>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d009      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a1b      	ldr	r2, [pc, #108]	; (8005a9c <HAL_DMA_Abort+0x26c>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d004      	beq.n	8005a3e <HAL_DMA_Abort+0x20e>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a19      	ldr	r2, [pc, #100]	; (8005aa0 <HAL_DMA_Abort+0x270>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d132      	bne.n	8005aa4 <HAL_DMA_Abort+0x274>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e031      	b.n	8005aa6 <HAL_DMA_Abort+0x276>
 8005a42:	bf00      	nop
 8005a44:	40020010 	.word	0x40020010
 8005a48:	40020028 	.word	0x40020028
 8005a4c:	40020040 	.word	0x40020040
 8005a50:	40020058 	.word	0x40020058
 8005a54:	40020070 	.word	0x40020070
 8005a58:	40020088 	.word	0x40020088
 8005a5c:	400200a0 	.word	0x400200a0
 8005a60:	400200b8 	.word	0x400200b8
 8005a64:	40020410 	.word	0x40020410
 8005a68:	40020428 	.word	0x40020428
 8005a6c:	40020440 	.word	0x40020440
 8005a70:	40020458 	.word	0x40020458
 8005a74:	40020470 	.word	0x40020470
 8005a78:	40020488 	.word	0x40020488
 8005a7c:	400204a0 	.word	0x400204a0
 8005a80:	400204b8 	.word	0x400204b8
 8005a84:	58025408 	.word	0x58025408
 8005a88:	5802541c 	.word	0x5802541c
 8005a8c:	58025430 	.word	0x58025430
 8005a90:	58025444 	.word	0x58025444
 8005a94:	58025458 	.word	0x58025458
 8005a98:	5802546c 	.word	0x5802546c
 8005a9c:	58025480 	.word	0x58025480
 8005aa0:	58025494 	.word	0x58025494
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ab8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a6d      	ldr	r2, [pc, #436]	; (8005c74 <HAL_DMA_Abort+0x444>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d04a      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a6b      	ldr	r2, [pc, #428]	; (8005c78 <HAL_DMA_Abort+0x448>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d045      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a6a      	ldr	r2, [pc, #424]	; (8005c7c <HAL_DMA_Abort+0x44c>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d040      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a68      	ldr	r2, [pc, #416]	; (8005c80 <HAL_DMA_Abort+0x450>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d03b      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a67      	ldr	r2, [pc, #412]	; (8005c84 <HAL_DMA_Abort+0x454>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d036      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a65      	ldr	r2, [pc, #404]	; (8005c88 <HAL_DMA_Abort+0x458>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d031      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a64      	ldr	r2, [pc, #400]	; (8005c8c <HAL_DMA_Abort+0x45c>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d02c      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a62      	ldr	r2, [pc, #392]	; (8005c90 <HAL_DMA_Abort+0x460>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d027      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a61      	ldr	r2, [pc, #388]	; (8005c94 <HAL_DMA_Abort+0x464>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d022      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a5f      	ldr	r2, [pc, #380]	; (8005c98 <HAL_DMA_Abort+0x468>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d01d      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a5e      	ldr	r2, [pc, #376]	; (8005c9c <HAL_DMA_Abort+0x46c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d018      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a5c      	ldr	r2, [pc, #368]	; (8005ca0 <HAL_DMA_Abort+0x470>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d013      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a5b      	ldr	r2, [pc, #364]	; (8005ca4 <HAL_DMA_Abort+0x474>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00e      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a59      	ldr	r2, [pc, #356]	; (8005ca8 <HAL_DMA_Abort+0x478>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d009      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a58      	ldr	r2, [pc, #352]	; (8005cac <HAL_DMA_Abort+0x47c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d004      	beq.n	8005b5a <HAL_DMA_Abort+0x32a>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a56      	ldr	r2, [pc, #344]	; (8005cb0 <HAL_DMA_Abort+0x480>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d108      	bne.n	8005b6c <HAL_DMA_Abort+0x33c>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0201 	bic.w	r2, r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e007      	b.n	8005b7c <HAL_DMA_Abort+0x34c>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f022 0201 	bic.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005b7c:	e013      	b.n	8005ba6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005b7e:	f7fe fd5f 	bl	8004640 <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b05      	cmp	r3, #5
 8005b8a:	d90c      	bls.n	8005ba6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2220      	movs	r2, #32
 8005b90:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2203      	movs	r2, #3
 8005b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e12d      	b.n	8005e02 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0301 	and.w	r3, r3, #1
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1e5      	bne.n	8005b7e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a2f      	ldr	r2, [pc, #188]	; (8005c74 <HAL_DMA_Abort+0x444>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d04a      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a2d      	ldr	r2, [pc, #180]	; (8005c78 <HAL_DMA_Abort+0x448>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d045      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a2c      	ldr	r2, [pc, #176]	; (8005c7c <HAL_DMA_Abort+0x44c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d040      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a2a      	ldr	r2, [pc, #168]	; (8005c80 <HAL_DMA_Abort+0x450>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d03b      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a29      	ldr	r2, [pc, #164]	; (8005c84 <HAL_DMA_Abort+0x454>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d036      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a27      	ldr	r2, [pc, #156]	; (8005c88 <HAL_DMA_Abort+0x458>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d031      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a26      	ldr	r2, [pc, #152]	; (8005c8c <HAL_DMA_Abort+0x45c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d02c      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a24      	ldr	r2, [pc, #144]	; (8005c90 <HAL_DMA_Abort+0x460>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d027      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a23      	ldr	r2, [pc, #140]	; (8005c94 <HAL_DMA_Abort+0x464>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d022      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a21      	ldr	r2, [pc, #132]	; (8005c98 <HAL_DMA_Abort+0x468>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d01d      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a20      	ldr	r2, [pc, #128]	; (8005c9c <HAL_DMA_Abort+0x46c>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d018      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a1e      	ldr	r2, [pc, #120]	; (8005ca0 <HAL_DMA_Abort+0x470>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d013      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a1d      	ldr	r2, [pc, #116]	; (8005ca4 <HAL_DMA_Abort+0x474>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d00e      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a1b      	ldr	r2, [pc, #108]	; (8005ca8 <HAL_DMA_Abort+0x478>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d009      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a1a      	ldr	r2, [pc, #104]	; (8005cac <HAL_DMA_Abort+0x47c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d004      	beq.n	8005c52 <HAL_DMA_Abort+0x422>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a18      	ldr	r2, [pc, #96]	; (8005cb0 <HAL_DMA_Abort+0x480>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d101      	bne.n	8005c56 <HAL_DMA_Abort+0x426>
 8005c52:	2301      	movs	r3, #1
 8005c54:	e000      	b.n	8005c58 <HAL_DMA_Abort+0x428>
 8005c56:	2300      	movs	r3, #0
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d02b      	beq.n	8005cb4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c60:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	223f      	movs	r2, #63	; 0x3f
 8005c6c:	409a      	lsls	r2, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	609a      	str	r2, [r3, #8]
 8005c72:	e02a      	b.n	8005cca <HAL_DMA_Abort+0x49a>
 8005c74:	40020010 	.word	0x40020010
 8005c78:	40020028 	.word	0x40020028
 8005c7c:	40020040 	.word	0x40020040
 8005c80:	40020058 	.word	0x40020058
 8005c84:	40020070 	.word	0x40020070
 8005c88:	40020088 	.word	0x40020088
 8005c8c:	400200a0 	.word	0x400200a0
 8005c90:	400200b8 	.word	0x400200b8
 8005c94:	40020410 	.word	0x40020410
 8005c98:	40020428 	.word	0x40020428
 8005c9c:	40020440 	.word	0x40020440
 8005ca0:	40020458 	.word	0x40020458
 8005ca4:	40020470 	.word	0x40020470
 8005ca8:	40020488 	.word	0x40020488
 8005cac:	400204a0 	.word	0x400204a0
 8005cb0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	409a      	lsls	r2, r3
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a4f      	ldr	r2, [pc, #316]	; (8005e0c <HAL_DMA_Abort+0x5dc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d072      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a4d      	ldr	r2, [pc, #308]	; (8005e10 <HAL_DMA_Abort+0x5e0>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d06d      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a4c      	ldr	r2, [pc, #304]	; (8005e14 <HAL_DMA_Abort+0x5e4>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d068      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a4a      	ldr	r2, [pc, #296]	; (8005e18 <HAL_DMA_Abort+0x5e8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d063      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a49      	ldr	r2, [pc, #292]	; (8005e1c <HAL_DMA_Abort+0x5ec>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d05e      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a47      	ldr	r2, [pc, #284]	; (8005e20 <HAL_DMA_Abort+0x5f0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d059      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a46      	ldr	r2, [pc, #280]	; (8005e24 <HAL_DMA_Abort+0x5f4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d054      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a44      	ldr	r2, [pc, #272]	; (8005e28 <HAL_DMA_Abort+0x5f8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d04f      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a43      	ldr	r2, [pc, #268]	; (8005e2c <HAL_DMA_Abort+0x5fc>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d04a      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a41      	ldr	r2, [pc, #260]	; (8005e30 <HAL_DMA_Abort+0x600>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d045      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a40      	ldr	r2, [pc, #256]	; (8005e34 <HAL_DMA_Abort+0x604>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d040      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a3e      	ldr	r2, [pc, #248]	; (8005e38 <HAL_DMA_Abort+0x608>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d03b      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a3d      	ldr	r2, [pc, #244]	; (8005e3c <HAL_DMA_Abort+0x60c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d036      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a3b      	ldr	r2, [pc, #236]	; (8005e40 <HAL_DMA_Abort+0x610>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d031      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a3a      	ldr	r2, [pc, #232]	; (8005e44 <HAL_DMA_Abort+0x614>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d02c      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a38      	ldr	r2, [pc, #224]	; (8005e48 <HAL_DMA_Abort+0x618>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d027      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a37      	ldr	r2, [pc, #220]	; (8005e4c <HAL_DMA_Abort+0x61c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d022      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a35      	ldr	r2, [pc, #212]	; (8005e50 <HAL_DMA_Abort+0x620>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d01d      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a34      	ldr	r2, [pc, #208]	; (8005e54 <HAL_DMA_Abort+0x624>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d018      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a32      	ldr	r2, [pc, #200]	; (8005e58 <HAL_DMA_Abort+0x628>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a31      	ldr	r2, [pc, #196]	; (8005e5c <HAL_DMA_Abort+0x62c>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00e      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a2f      	ldr	r2, [pc, #188]	; (8005e60 <HAL_DMA_Abort+0x630>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d009      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a2e      	ldr	r2, [pc, #184]	; (8005e64 <HAL_DMA_Abort+0x634>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d004      	beq.n	8005dba <HAL_DMA_Abort+0x58a>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a2c      	ldr	r2, [pc, #176]	; (8005e68 <HAL_DMA_Abort+0x638>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d101      	bne.n	8005dbe <HAL_DMA_Abort+0x58e>
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e000      	b.n	8005dc0 <HAL_DMA_Abort+0x590>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d015      	beq.n	8005df0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005dcc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00c      	beq.n	8005df0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005de0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005de4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005dee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40020010 	.word	0x40020010
 8005e10:	40020028 	.word	0x40020028
 8005e14:	40020040 	.word	0x40020040
 8005e18:	40020058 	.word	0x40020058
 8005e1c:	40020070 	.word	0x40020070
 8005e20:	40020088 	.word	0x40020088
 8005e24:	400200a0 	.word	0x400200a0
 8005e28:	400200b8 	.word	0x400200b8
 8005e2c:	40020410 	.word	0x40020410
 8005e30:	40020428 	.word	0x40020428
 8005e34:	40020440 	.word	0x40020440
 8005e38:	40020458 	.word	0x40020458
 8005e3c:	40020470 	.word	0x40020470
 8005e40:	40020488 	.word	0x40020488
 8005e44:	400204a0 	.word	0x400204a0
 8005e48:	400204b8 	.word	0x400204b8
 8005e4c:	58025408 	.word	0x58025408
 8005e50:	5802541c 	.word	0x5802541c
 8005e54:	58025430 	.word	0x58025430
 8005e58:	58025444 	.word	0x58025444
 8005e5c:	58025458 	.word	0x58025458
 8005e60:	5802546c 	.word	0x5802546c
 8005e64:	58025480 	.word	0x58025480
 8005e68:	58025494 	.word	0x58025494

08005e6c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e205      	b.n	800628a <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d004      	beq.n	8005e94 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2280      	movs	r2, #128	; 0x80
 8005e8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e1fa      	b.n	800628a <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a8c      	ldr	r2, [pc, #560]	; (80060cc <HAL_DMA_Abort_IT+0x260>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d04a      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a8b      	ldr	r2, [pc, #556]	; (80060d0 <HAL_DMA_Abort_IT+0x264>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d045      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a89      	ldr	r2, [pc, #548]	; (80060d4 <HAL_DMA_Abort_IT+0x268>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d040      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a88      	ldr	r2, [pc, #544]	; (80060d8 <HAL_DMA_Abort_IT+0x26c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d03b      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a86      	ldr	r2, [pc, #536]	; (80060dc <HAL_DMA_Abort_IT+0x270>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d036      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a85      	ldr	r2, [pc, #532]	; (80060e0 <HAL_DMA_Abort_IT+0x274>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d031      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a83      	ldr	r2, [pc, #524]	; (80060e4 <HAL_DMA_Abort_IT+0x278>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d02c      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a82      	ldr	r2, [pc, #520]	; (80060e8 <HAL_DMA_Abort_IT+0x27c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d027      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a80      	ldr	r2, [pc, #512]	; (80060ec <HAL_DMA_Abort_IT+0x280>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d022      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a7f      	ldr	r2, [pc, #508]	; (80060f0 <HAL_DMA_Abort_IT+0x284>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d01d      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a7d      	ldr	r2, [pc, #500]	; (80060f4 <HAL_DMA_Abort_IT+0x288>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d018      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a7c      	ldr	r2, [pc, #496]	; (80060f8 <HAL_DMA_Abort_IT+0x28c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d013      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a7a      	ldr	r2, [pc, #488]	; (80060fc <HAL_DMA_Abort_IT+0x290>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00e      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a79      	ldr	r2, [pc, #484]	; (8006100 <HAL_DMA_Abort_IT+0x294>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d009      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a77      	ldr	r2, [pc, #476]	; (8006104 <HAL_DMA_Abort_IT+0x298>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d004      	beq.n	8005f34 <HAL_DMA_Abort_IT+0xc8>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a76      	ldr	r2, [pc, #472]	; (8006108 <HAL_DMA_Abort_IT+0x29c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d101      	bne.n	8005f38 <HAL_DMA_Abort_IT+0xcc>
 8005f34:	2301      	movs	r3, #1
 8005f36:	e000      	b.n	8005f3a <HAL_DMA_Abort_IT+0xce>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d065      	beq.n	800600a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2204      	movs	r2, #4
 8005f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a60      	ldr	r2, [pc, #384]	; (80060cc <HAL_DMA_Abort_IT+0x260>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d04a      	beq.n	8005fe6 <HAL_DMA_Abort_IT+0x17a>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a5e      	ldr	r2, [pc, #376]	; (80060d0 <HAL_DMA_Abort_IT+0x264>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d045      	beq.n	8005fe6 <HAL_DMA_Abort_IT+0x17a>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a5d      	ldr	r2, [pc, #372]	; (80060d4 <HAL_DMA_Abort_IT+0x268>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d040      	beq.n	8005fe6 <HAL_DMA_Abort_IT+0x17a>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a5b      	ldr	r2, [pc, #364]	; (80060d8 <HAL_DMA_Abort_IT+0x26c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d03b      	beq.n	8005fe6 <HAL_DMA_Abort_IT+0x17a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a5a      	ldr	r2, [pc, #360]	; (80060dc <HAL_DMA_Abort_IT+0x270>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d036      	beq.n	8005fe6 <HAL_DMA_Abort_IT+0x17a>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a58      	ldr	r2, [pc, #352]	; (80060e0 <HAL_DMA_Abort_IT+0x274>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d031      	beq.n	8005fe6 <HAL_DMA_Abort_IT+0x17a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a57      	ldr	r2, [pc, #348]	; (80060e4 <HAL_DMA_Abort_IT+0x278>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d02c      	beq.n	8005fe6 <HAL_DMA_Abort_IT+0x17a>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a55      	ldr	r2, [pc, #340]	; (80060e8 <HAL_DMA_Abort_IT+0x27c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d027      	beq.n	8005fe6 <HAL_DMA_Abort_IT+0x17a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a54      	ldr	r2, [pc, #336]	; (80060ec <HAL_DMA_Abort_IT+0x280>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d022      	beq.n	8005fe6 <HAL_DMA_Abort_IT+0x17a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a52      	ldr	r2, [pc, #328]	; (80060f0 <HAL_DMA_Abort_IT+0x284>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d01d      	beq.n	8005fe6 <HAL_DMA_Abort_IT+0x17a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a51      	ldr	r2, [pc, #324]	; (80060f4 <HAL_DMA_Abort_IT+0x288>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d018      	beq.n	8005fe6 <HAL_DMA_Abort_IT+0x17a>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a4f      	ldr	r2, [pc, #316]	; (80060f8 <HAL_DMA_Abort_IT+0x28c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d013      	beq.n	8005fe6 <HAL_DMA_Abort_IT+0x17a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a4e      	ldr	r2, [pc, #312]	; (80060fc <HAL_DMA_Abort_IT+0x290>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d00e      	beq.n	8005fe6 <HAL_DMA_Abort_IT+0x17a>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a4c      	ldr	r2, [pc, #304]	; (8006100 <HAL_DMA_Abort_IT+0x294>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d009      	beq.n	8005fe6 <HAL_DMA_Abort_IT+0x17a>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a4b      	ldr	r2, [pc, #300]	; (8006104 <HAL_DMA_Abort_IT+0x298>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d004      	beq.n	8005fe6 <HAL_DMA_Abort_IT+0x17a>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a49      	ldr	r2, [pc, #292]	; (8006108 <HAL_DMA_Abort_IT+0x29c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d108      	bne.n	8005ff8 <HAL_DMA_Abort_IT+0x18c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0201 	bic.w	r2, r2, #1
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	e147      	b.n	8006288 <HAL_DMA_Abort_IT+0x41c>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0201 	bic.w	r2, r2, #1
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	e13e      	b.n	8006288 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 020e 	bic.w	r2, r2, #14
 8006018:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a2b      	ldr	r2, [pc, #172]	; (80060cc <HAL_DMA_Abort_IT+0x260>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d04a      	beq.n	80060ba <HAL_DMA_Abort_IT+0x24e>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a29      	ldr	r2, [pc, #164]	; (80060d0 <HAL_DMA_Abort_IT+0x264>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d045      	beq.n	80060ba <HAL_DMA_Abort_IT+0x24e>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a28      	ldr	r2, [pc, #160]	; (80060d4 <HAL_DMA_Abort_IT+0x268>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d040      	beq.n	80060ba <HAL_DMA_Abort_IT+0x24e>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a26      	ldr	r2, [pc, #152]	; (80060d8 <HAL_DMA_Abort_IT+0x26c>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d03b      	beq.n	80060ba <HAL_DMA_Abort_IT+0x24e>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a25      	ldr	r2, [pc, #148]	; (80060dc <HAL_DMA_Abort_IT+0x270>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d036      	beq.n	80060ba <HAL_DMA_Abort_IT+0x24e>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a23      	ldr	r2, [pc, #140]	; (80060e0 <HAL_DMA_Abort_IT+0x274>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d031      	beq.n	80060ba <HAL_DMA_Abort_IT+0x24e>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a22      	ldr	r2, [pc, #136]	; (80060e4 <HAL_DMA_Abort_IT+0x278>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d02c      	beq.n	80060ba <HAL_DMA_Abort_IT+0x24e>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a20      	ldr	r2, [pc, #128]	; (80060e8 <HAL_DMA_Abort_IT+0x27c>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d027      	beq.n	80060ba <HAL_DMA_Abort_IT+0x24e>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a1f      	ldr	r2, [pc, #124]	; (80060ec <HAL_DMA_Abort_IT+0x280>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d022      	beq.n	80060ba <HAL_DMA_Abort_IT+0x24e>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1d      	ldr	r2, [pc, #116]	; (80060f0 <HAL_DMA_Abort_IT+0x284>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d01d      	beq.n	80060ba <HAL_DMA_Abort_IT+0x24e>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1c      	ldr	r2, [pc, #112]	; (80060f4 <HAL_DMA_Abort_IT+0x288>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d018      	beq.n	80060ba <HAL_DMA_Abort_IT+0x24e>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1a      	ldr	r2, [pc, #104]	; (80060f8 <HAL_DMA_Abort_IT+0x28c>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d013      	beq.n	80060ba <HAL_DMA_Abort_IT+0x24e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a19      	ldr	r2, [pc, #100]	; (80060fc <HAL_DMA_Abort_IT+0x290>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d00e      	beq.n	80060ba <HAL_DMA_Abort_IT+0x24e>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a17      	ldr	r2, [pc, #92]	; (8006100 <HAL_DMA_Abort_IT+0x294>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d009      	beq.n	80060ba <HAL_DMA_Abort_IT+0x24e>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a16      	ldr	r2, [pc, #88]	; (8006104 <HAL_DMA_Abort_IT+0x298>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d004      	beq.n	80060ba <HAL_DMA_Abort_IT+0x24e>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a14      	ldr	r2, [pc, #80]	; (8006108 <HAL_DMA_Abort_IT+0x29c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d128      	bne.n	800610c <HAL_DMA_Abort_IT+0x2a0>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0201 	bic.w	r2, r2, #1
 80060c8:	601a      	str	r2, [r3, #0]
 80060ca:	e027      	b.n	800611c <HAL_DMA_Abort_IT+0x2b0>
 80060cc:	40020010 	.word	0x40020010
 80060d0:	40020028 	.word	0x40020028
 80060d4:	40020040 	.word	0x40020040
 80060d8:	40020058 	.word	0x40020058
 80060dc:	40020070 	.word	0x40020070
 80060e0:	40020088 	.word	0x40020088
 80060e4:	400200a0 	.word	0x400200a0
 80060e8:	400200b8 	.word	0x400200b8
 80060ec:	40020410 	.word	0x40020410
 80060f0:	40020428 	.word	0x40020428
 80060f4:	40020440 	.word	0x40020440
 80060f8:	40020458 	.word	0x40020458
 80060fc:	40020470 	.word	0x40020470
 8006100:	40020488 	.word	0x40020488
 8006104:	400204a0 	.word	0x400204a0
 8006108:	400204b8 	.word	0x400204b8
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0201 	bic.w	r2, r2, #1
 800611a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a5c      	ldr	r2, [pc, #368]	; (8006294 <HAL_DMA_Abort_IT+0x428>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d072      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a5b      	ldr	r2, [pc, #364]	; (8006298 <HAL_DMA_Abort_IT+0x42c>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d06d      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a59      	ldr	r2, [pc, #356]	; (800629c <HAL_DMA_Abort_IT+0x430>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d068      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a58      	ldr	r2, [pc, #352]	; (80062a0 <HAL_DMA_Abort_IT+0x434>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d063      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a56      	ldr	r2, [pc, #344]	; (80062a4 <HAL_DMA_Abort_IT+0x438>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d05e      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a55      	ldr	r2, [pc, #340]	; (80062a8 <HAL_DMA_Abort_IT+0x43c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d059      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a53      	ldr	r2, [pc, #332]	; (80062ac <HAL_DMA_Abort_IT+0x440>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d054      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a52      	ldr	r2, [pc, #328]	; (80062b0 <HAL_DMA_Abort_IT+0x444>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d04f      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a50      	ldr	r2, [pc, #320]	; (80062b4 <HAL_DMA_Abort_IT+0x448>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d04a      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a4f      	ldr	r2, [pc, #316]	; (80062b8 <HAL_DMA_Abort_IT+0x44c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d045      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a4d      	ldr	r2, [pc, #308]	; (80062bc <HAL_DMA_Abort_IT+0x450>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d040      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a4c      	ldr	r2, [pc, #304]	; (80062c0 <HAL_DMA_Abort_IT+0x454>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d03b      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a4a      	ldr	r2, [pc, #296]	; (80062c4 <HAL_DMA_Abort_IT+0x458>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d036      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a49      	ldr	r2, [pc, #292]	; (80062c8 <HAL_DMA_Abort_IT+0x45c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d031      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a47      	ldr	r2, [pc, #284]	; (80062cc <HAL_DMA_Abort_IT+0x460>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d02c      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a46      	ldr	r2, [pc, #280]	; (80062d0 <HAL_DMA_Abort_IT+0x464>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d027      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a44      	ldr	r2, [pc, #272]	; (80062d4 <HAL_DMA_Abort_IT+0x468>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d022      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a43      	ldr	r2, [pc, #268]	; (80062d8 <HAL_DMA_Abort_IT+0x46c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d01d      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a41      	ldr	r2, [pc, #260]	; (80062dc <HAL_DMA_Abort_IT+0x470>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d018      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a40      	ldr	r2, [pc, #256]	; (80062e0 <HAL_DMA_Abort_IT+0x474>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d013      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a3e      	ldr	r2, [pc, #248]	; (80062e4 <HAL_DMA_Abort_IT+0x478>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d00e      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a3d      	ldr	r2, [pc, #244]	; (80062e8 <HAL_DMA_Abort_IT+0x47c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d009      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a3b      	ldr	r2, [pc, #236]	; (80062ec <HAL_DMA_Abort_IT+0x480>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d004      	beq.n	800620c <HAL_DMA_Abort_IT+0x3a0>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a3a      	ldr	r2, [pc, #232]	; (80062f0 <HAL_DMA_Abort_IT+0x484>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d101      	bne.n	8006210 <HAL_DMA_Abort_IT+0x3a4>
 800620c:	2301      	movs	r3, #1
 800620e:	e000      	b.n	8006212 <HAL_DMA_Abort_IT+0x3a6>
 8006210:	2300      	movs	r3, #0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d028      	beq.n	8006268 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006224:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006230:	f003 031f 	and.w	r3, r3, #31
 8006234:	2201      	movs	r2, #1
 8006236:	409a      	lsls	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006244:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00c      	beq.n	8006268 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006258:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800625c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006266:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	40020010 	.word	0x40020010
 8006298:	40020028 	.word	0x40020028
 800629c:	40020040 	.word	0x40020040
 80062a0:	40020058 	.word	0x40020058
 80062a4:	40020070 	.word	0x40020070
 80062a8:	40020088 	.word	0x40020088
 80062ac:	400200a0 	.word	0x400200a0
 80062b0:	400200b8 	.word	0x400200b8
 80062b4:	40020410 	.word	0x40020410
 80062b8:	40020428 	.word	0x40020428
 80062bc:	40020440 	.word	0x40020440
 80062c0:	40020458 	.word	0x40020458
 80062c4:	40020470 	.word	0x40020470
 80062c8:	40020488 	.word	0x40020488
 80062cc:	400204a0 	.word	0x400204a0
 80062d0:	400204b8 	.word	0x400204b8
 80062d4:	58025408 	.word	0x58025408
 80062d8:	5802541c 	.word	0x5802541c
 80062dc:	58025430 	.word	0x58025430
 80062e0:	58025444 	.word	0x58025444
 80062e4:	58025458 	.word	0x58025458
 80062e8:	5802546c 	.word	0x5802546c
 80062ec:	58025480 	.word	0x58025480
 80062f0:	58025494 	.word	0x58025494

080062f4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08a      	sub	sp, #40	; 0x28
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006300:	4b67      	ldr	r3, [pc, #412]	; (80064a0 <HAL_DMA_IRQHandler+0x1ac>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a67      	ldr	r2, [pc, #412]	; (80064a4 <HAL_DMA_IRQHandler+0x1b0>)
 8006306:	fba2 2303 	umull	r2, r3, r2, r3
 800630a:	0a9b      	lsrs	r3, r3, #10
 800630c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006312:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006318:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a5f      	ldr	r2, [pc, #380]	; (80064a8 <HAL_DMA_IRQHandler+0x1b4>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d04a      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xd2>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a5d      	ldr	r2, [pc, #372]	; (80064ac <HAL_DMA_IRQHandler+0x1b8>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d045      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xd2>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a5c      	ldr	r2, [pc, #368]	; (80064b0 <HAL_DMA_IRQHandler+0x1bc>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d040      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xd2>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a5a      	ldr	r2, [pc, #360]	; (80064b4 <HAL_DMA_IRQHandler+0x1c0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d03b      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xd2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a59      	ldr	r2, [pc, #356]	; (80064b8 <HAL_DMA_IRQHandler+0x1c4>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d036      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xd2>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a57      	ldr	r2, [pc, #348]	; (80064bc <HAL_DMA_IRQHandler+0x1c8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d031      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xd2>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a56      	ldr	r2, [pc, #344]	; (80064c0 <HAL_DMA_IRQHandler+0x1cc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d02c      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xd2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a54      	ldr	r2, [pc, #336]	; (80064c4 <HAL_DMA_IRQHandler+0x1d0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d027      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xd2>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a53      	ldr	r2, [pc, #332]	; (80064c8 <HAL_DMA_IRQHandler+0x1d4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d022      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xd2>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a51      	ldr	r2, [pc, #324]	; (80064cc <HAL_DMA_IRQHandler+0x1d8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01d      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xd2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a50      	ldr	r2, [pc, #320]	; (80064d0 <HAL_DMA_IRQHandler+0x1dc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d018      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xd2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a4e      	ldr	r2, [pc, #312]	; (80064d4 <HAL_DMA_IRQHandler+0x1e0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d013      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xd2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a4d      	ldr	r2, [pc, #308]	; (80064d8 <HAL_DMA_IRQHandler+0x1e4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00e      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xd2>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a4b      	ldr	r2, [pc, #300]	; (80064dc <HAL_DMA_IRQHandler+0x1e8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d009      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xd2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a4a      	ldr	r2, [pc, #296]	; (80064e0 <HAL_DMA_IRQHandler+0x1ec>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d004      	beq.n	80063c6 <HAL_DMA_IRQHandler+0xd2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a48      	ldr	r2, [pc, #288]	; (80064e4 <HAL_DMA_IRQHandler+0x1f0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d101      	bne.n	80063ca <HAL_DMA_IRQHandler+0xd6>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <HAL_DMA_IRQHandler+0xd8>
 80063ca:	2300      	movs	r3, #0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 842b 	beq.w	8006c28 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d6:	f003 031f 	and.w	r3, r3, #31
 80063da:	2208      	movs	r2, #8
 80063dc:	409a      	lsls	r2, r3
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	4013      	ands	r3, r2
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	f000 80a2 	beq.w	800652c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a2e      	ldr	r2, [pc, #184]	; (80064a8 <HAL_DMA_IRQHandler+0x1b4>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d04a      	beq.n	8006488 <HAL_DMA_IRQHandler+0x194>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a2d      	ldr	r2, [pc, #180]	; (80064ac <HAL_DMA_IRQHandler+0x1b8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d045      	beq.n	8006488 <HAL_DMA_IRQHandler+0x194>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a2b      	ldr	r2, [pc, #172]	; (80064b0 <HAL_DMA_IRQHandler+0x1bc>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d040      	beq.n	8006488 <HAL_DMA_IRQHandler+0x194>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a2a      	ldr	r2, [pc, #168]	; (80064b4 <HAL_DMA_IRQHandler+0x1c0>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d03b      	beq.n	8006488 <HAL_DMA_IRQHandler+0x194>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a28      	ldr	r2, [pc, #160]	; (80064b8 <HAL_DMA_IRQHandler+0x1c4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d036      	beq.n	8006488 <HAL_DMA_IRQHandler+0x194>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a27      	ldr	r2, [pc, #156]	; (80064bc <HAL_DMA_IRQHandler+0x1c8>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d031      	beq.n	8006488 <HAL_DMA_IRQHandler+0x194>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a25      	ldr	r2, [pc, #148]	; (80064c0 <HAL_DMA_IRQHandler+0x1cc>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d02c      	beq.n	8006488 <HAL_DMA_IRQHandler+0x194>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a24      	ldr	r2, [pc, #144]	; (80064c4 <HAL_DMA_IRQHandler+0x1d0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d027      	beq.n	8006488 <HAL_DMA_IRQHandler+0x194>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a22      	ldr	r2, [pc, #136]	; (80064c8 <HAL_DMA_IRQHandler+0x1d4>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d022      	beq.n	8006488 <HAL_DMA_IRQHandler+0x194>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a21      	ldr	r2, [pc, #132]	; (80064cc <HAL_DMA_IRQHandler+0x1d8>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d01d      	beq.n	8006488 <HAL_DMA_IRQHandler+0x194>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a1f      	ldr	r2, [pc, #124]	; (80064d0 <HAL_DMA_IRQHandler+0x1dc>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d018      	beq.n	8006488 <HAL_DMA_IRQHandler+0x194>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a1e      	ldr	r2, [pc, #120]	; (80064d4 <HAL_DMA_IRQHandler+0x1e0>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d013      	beq.n	8006488 <HAL_DMA_IRQHandler+0x194>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a1c      	ldr	r2, [pc, #112]	; (80064d8 <HAL_DMA_IRQHandler+0x1e4>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d00e      	beq.n	8006488 <HAL_DMA_IRQHandler+0x194>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a1b      	ldr	r2, [pc, #108]	; (80064dc <HAL_DMA_IRQHandler+0x1e8>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d009      	beq.n	8006488 <HAL_DMA_IRQHandler+0x194>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a19      	ldr	r2, [pc, #100]	; (80064e0 <HAL_DMA_IRQHandler+0x1ec>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d004      	beq.n	8006488 <HAL_DMA_IRQHandler+0x194>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a18      	ldr	r2, [pc, #96]	; (80064e4 <HAL_DMA_IRQHandler+0x1f0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d12f      	bne.n	80064e8 <HAL_DMA_IRQHandler+0x1f4>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0304 	and.w	r3, r3, #4
 8006492:	2b00      	cmp	r3, #0
 8006494:	bf14      	ite	ne
 8006496:	2301      	movne	r3, #1
 8006498:	2300      	moveq	r3, #0
 800649a:	b2db      	uxtb	r3, r3
 800649c:	e02e      	b.n	80064fc <HAL_DMA_IRQHandler+0x208>
 800649e:	bf00      	nop
 80064a0:	24000018 	.word	0x24000018
 80064a4:	1b4e81b5 	.word	0x1b4e81b5
 80064a8:	40020010 	.word	0x40020010
 80064ac:	40020028 	.word	0x40020028
 80064b0:	40020040 	.word	0x40020040
 80064b4:	40020058 	.word	0x40020058
 80064b8:	40020070 	.word	0x40020070
 80064bc:	40020088 	.word	0x40020088
 80064c0:	400200a0 	.word	0x400200a0
 80064c4:	400200b8 	.word	0x400200b8
 80064c8:	40020410 	.word	0x40020410
 80064cc:	40020428 	.word	0x40020428
 80064d0:	40020440 	.word	0x40020440
 80064d4:	40020458 	.word	0x40020458
 80064d8:	40020470 	.word	0x40020470
 80064dc:	40020488 	.word	0x40020488
 80064e0:	400204a0 	.word	0x400204a0
 80064e4:	400204b8 	.word	0x400204b8
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	bf14      	ite	ne
 80064f6:	2301      	movne	r3, #1
 80064f8:	2300      	moveq	r3, #0
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d015      	beq.n	800652c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f022 0204 	bic.w	r2, r2, #4
 800650e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	2208      	movs	r2, #8
 800651a:	409a      	lsls	r2, r3
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006524:	f043 0201 	orr.w	r2, r3, #1
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006530:	f003 031f 	and.w	r3, r3, #31
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	fa22 f303 	lsr.w	r3, r2, r3
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d06e      	beq.n	8006620 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a69      	ldr	r2, [pc, #420]	; (80066ec <HAL_DMA_IRQHandler+0x3f8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d04a      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x2ee>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a67      	ldr	r2, [pc, #412]	; (80066f0 <HAL_DMA_IRQHandler+0x3fc>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d045      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x2ee>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a66      	ldr	r2, [pc, #408]	; (80066f4 <HAL_DMA_IRQHandler+0x400>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d040      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x2ee>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a64      	ldr	r2, [pc, #400]	; (80066f8 <HAL_DMA_IRQHandler+0x404>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d03b      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x2ee>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a63      	ldr	r2, [pc, #396]	; (80066fc <HAL_DMA_IRQHandler+0x408>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d036      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x2ee>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a61      	ldr	r2, [pc, #388]	; (8006700 <HAL_DMA_IRQHandler+0x40c>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d031      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x2ee>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a60      	ldr	r2, [pc, #384]	; (8006704 <HAL_DMA_IRQHandler+0x410>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d02c      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x2ee>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a5e      	ldr	r2, [pc, #376]	; (8006708 <HAL_DMA_IRQHandler+0x414>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d027      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x2ee>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a5d      	ldr	r2, [pc, #372]	; (800670c <HAL_DMA_IRQHandler+0x418>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d022      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x2ee>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a5b      	ldr	r2, [pc, #364]	; (8006710 <HAL_DMA_IRQHandler+0x41c>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d01d      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x2ee>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a5a      	ldr	r2, [pc, #360]	; (8006714 <HAL_DMA_IRQHandler+0x420>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d018      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x2ee>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a58      	ldr	r2, [pc, #352]	; (8006718 <HAL_DMA_IRQHandler+0x424>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d013      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x2ee>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a57      	ldr	r2, [pc, #348]	; (800671c <HAL_DMA_IRQHandler+0x428>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00e      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x2ee>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a55      	ldr	r2, [pc, #340]	; (8006720 <HAL_DMA_IRQHandler+0x42c>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d009      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x2ee>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a54      	ldr	r2, [pc, #336]	; (8006724 <HAL_DMA_IRQHandler+0x430>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d004      	beq.n	80065e2 <HAL_DMA_IRQHandler+0x2ee>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a52      	ldr	r2, [pc, #328]	; (8006728 <HAL_DMA_IRQHandler+0x434>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d10a      	bne.n	80065f8 <HAL_DMA_IRQHandler+0x304>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	bf14      	ite	ne
 80065f0:	2301      	movne	r3, #1
 80065f2:	2300      	moveq	r3, #0
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	e003      	b.n	8006600 <HAL_DMA_IRQHandler+0x30c>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	2300      	movs	r3, #0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00d      	beq.n	8006620 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006608:	f003 031f 	and.w	r3, r3, #31
 800660c:	2201      	movs	r2, #1
 800660e:	409a      	lsls	r2, r3
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006618:	f043 0202 	orr.w	r2, r3, #2
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006624:	f003 031f 	and.w	r3, r3, #31
 8006628:	2204      	movs	r2, #4
 800662a:	409a      	lsls	r2, r3
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	4013      	ands	r3, r2
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 808f 	beq.w	8006754 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a2c      	ldr	r2, [pc, #176]	; (80066ec <HAL_DMA_IRQHandler+0x3f8>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d04a      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x3e2>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a2a      	ldr	r2, [pc, #168]	; (80066f0 <HAL_DMA_IRQHandler+0x3fc>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d045      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x3e2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a29      	ldr	r2, [pc, #164]	; (80066f4 <HAL_DMA_IRQHandler+0x400>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d040      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x3e2>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a27      	ldr	r2, [pc, #156]	; (80066f8 <HAL_DMA_IRQHandler+0x404>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d03b      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x3e2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a26      	ldr	r2, [pc, #152]	; (80066fc <HAL_DMA_IRQHandler+0x408>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d036      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x3e2>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a24      	ldr	r2, [pc, #144]	; (8006700 <HAL_DMA_IRQHandler+0x40c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d031      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x3e2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a23      	ldr	r2, [pc, #140]	; (8006704 <HAL_DMA_IRQHandler+0x410>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d02c      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x3e2>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a21      	ldr	r2, [pc, #132]	; (8006708 <HAL_DMA_IRQHandler+0x414>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d027      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x3e2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a20      	ldr	r2, [pc, #128]	; (800670c <HAL_DMA_IRQHandler+0x418>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d022      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x3e2>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4a1e      	ldr	r2, [pc, #120]	; (8006710 <HAL_DMA_IRQHandler+0x41c>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d01d      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x3e2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <HAL_DMA_IRQHandler+0x420>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d018      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x3e2>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a1b      	ldr	r2, [pc, #108]	; (8006718 <HAL_DMA_IRQHandler+0x424>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d013      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x3e2>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a1a      	ldr	r2, [pc, #104]	; (800671c <HAL_DMA_IRQHandler+0x428>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d00e      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x3e2>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a18      	ldr	r2, [pc, #96]	; (8006720 <HAL_DMA_IRQHandler+0x42c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d009      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x3e2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a17      	ldr	r2, [pc, #92]	; (8006724 <HAL_DMA_IRQHandler+0x430>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d004      	beq.n	80066d6 <HAL_DMA_IRQHandler+0x3e2>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a15      	ldr	r2, [pc, #84]	; (8006728 <HAL_DMA_IRQHandler+0x434>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d12a      	bne.n	800672c <HAL_DMA_IRQHandler+0x438>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	bf14      	ite	ne
 80066e4:	2301      	movne	r3, #1
 80066e6:	2300      	moveq	r3, #0
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	e023      	b.n	8006734 <HAL_DMA_IRQHandler+0x440>
 80066ec:	40020010 	.word	0x40020010
 80066f0:	40020028 	.word	0x40020028
 80066f4:	40020040 	.word	0x40020040
 80066f8:	40020058 	.word	0x40020058
 80066fc:	40020070 	.word	0x40020070
 8006700:	40020088 	.word	0x40020088
 8006704:	400200a0 	.word	0x400200a0
 8006708:	400200b8 	.word	0x400200b8
 800670c:	40020410 	.word	0x40020410
 8006710:	40020428 	.word	0x40020428
 8006714:	40020440 	.word	0x40020440
 8006718:	40020458 	.word	0x40020458
 800671c:	40020470 	.word	0x40020470
 8006720:	40020488 	.word	0x40020488
 8006724:	400204a0 	.word	0x400204a0
 8006728:	400204b8 	.word	0x400204b8
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2300      	movs	r3, #0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00d      	beq.n	8006754 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673c:	f003 031f 	and.w	r3, r3, #31
 8006740:	2204      	movs	r2, #4
 8006742:	409a      	lsls	r2, r3
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800674c:	f043 0204 	orr.w	r2, r3, #4
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006758:	f003 031f 	and.w	r3, r3, #31
 800675c:	2210      	movs	r2, #16
 800675e:	409a      	lsls	r2, r3
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	4013      	ands	r3, r2
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 80a6 	beq.w	80068b6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a85      	ldr	r2, [pc, #532]	; (8006984 <HAL_DMA_IRQHandler+0x690>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d04a      	beq.n	800680a <HAL_DMA_IRQHandler+0x516>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a83      	ldr	r2, [pc, #524]	; (8006988 <HAL_DMA_IRQHandler+0x694>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d045      	beq.n	800680a <HAL_DMA_IRQHandler+0x516>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a82      	ldr	r2, [pc, #520]	; (800698c <HAL_DMA_IRQHandler+0x698>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d040      	beq.n	800680a <HAL_DMA_IRQHandler+0x516>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a80      	ldr	r2, [pc, #512]	; (8006990 <HAL_DMA_IRQHandler+0x69c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d03b      	beq.n	800680a <HAL_DMA_IRQHandler+0x516>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a7f      	ldr	r2, [pc, #508]	; (8006994 <HAL_DMA_IRQHandler+0x6a0>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d036      	beq.n	800680a <HAL_DMA_IRQHandler+0x516>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a7d      	ldr	r2, [pc, #500]	; (8006998 <HAL_DMA_IRQHandler+0x6a4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d031      	beq.n	800680a <HAL_DMA_IRQHandler+0x516>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a7c      	ldr	r2, [pc, #496]	; (800699c <HAL_DMA_IRQHandler+0x6a8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d02c      	beq.n	800680a <HAL_DMA_IRQHandler+0x516>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a7a      	ldr	r2, [pc, #488]	; (80069a0 <HAL_DMA_IRQHandler+0x6ac>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d027      	beq.n	800680a <HAL_DMA_IRQHandler+0x516>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a79      	ldr	r2, [pc, #484]	; (80069a4 <HAL_DMA_IRQHandler+0x6b0>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d022      	beq.n	800680a <HAL_DMA_IRQHandler+0x516>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a77      	ldr	r2, [pc, #476]	; (80069a8 <HAL_DMA_IRQHandler+0x6b4>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d01d      	beq.n	800680a <HAL_DMA_IRQHandler+0x516>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a76      	ldr	r2, [pc, #472]	; (80069ac <HAL_DMA_IRQHandler+0x6b8>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d018      	beq.n	800680a <HAL_DMA_IRQHandler+0x516>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a74      	ldr	r2, [pc, #464]	; (80069b0 <HAL_DMA_IRQHandler+0x6bc>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d013      	beq.n	800680a <HAL_DMA_IRQHandler+0x516>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a73      	ldr	r2, [pc, #460]	; (80069b4 <HAL_DMA_IRQHandler+0x6c0>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00e      	beq.n	800680a <HAL_DMA_IRQHandler+0x516>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a71      	ldr	r2, [pc, #452]	; (80069b8 <HAL_DMA_IRQHandler+0x6c4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d009      	beq.n	800680a <HAL_DMA_IRQHandler+0x516>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a70      	ldr	r2, [pc, #448]	; (80069bc <HAL_DMA_IRQHandler+0x6c8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d004      	beq.n	800680a <HAL_DMA_IRQHandler+0x516>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a6e      	ldr	r2, [pc, #440]	; (80069c0 <HAL_DMA_IRQHandler+0x6cc>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d10a      	bne.n	8006820 <HAL_DMA_IRQHandler+0x52c>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b00      	cmp	r3, #0
 8006816:	bf14      	ite	ne
 8006818:	2301      	movne	r3, #1
 800681a:	2300      	moveq	r3, #0
 800681c:	b2db      	uxtb	r3, r3
 800681e:	e009      	b.n	8006834 <HAL_DMA_IRQHandler+0x540>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0304 	and.w	r3, r3, #4
 800682a:	2b00      	cmp	r3, #0
 800682c:	bf14      	ite	ne
 800682e:	2301      	movne	r3, #1
 8006830:	2300      	moveq	r3, #0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d03e      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683c:	f003 031f 	and.w	r3, r3, #31
 8006840:	2210      	movs	r2, #16
 8006842:	409a      	lsls	r2, r3
 8006844:	6a3b      	ldr	r3, [r7, #32]
 8006846:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d018      	beq.n	8006888 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d108      	bne.n	8006876 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d024      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	4798      	blx	r3
 8006874:	e01f      	b.n	80068b6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687a:	2b00      	cmp	r3, #0
 800687c:	d01b      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	4798      	blx	r3
 8006886:	e016      	b.n	80068b6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006892:	2b00      	cmp	r3, #0
 8006894:	d107      	bne.n	80068a6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 0208 	bic.w	r2, r2, #8
 80068a4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d003      	beq.n	80068b6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ba:	f003 031f 	and.w	r3, r3, #31
 80068be:	2220      	movs	r2, #32
 80068c0:	409a      	lsls	r2, r3
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	4013      	ands	r3, r2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 8110 	beq.w	8006aec <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a2c      	ldr	r2, [pc, #176]	; (8006984 <HAL_DMA_IRQHandler+0x690>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d04a      	beq.n	800696c <HAL_DMA_IRQHandler+0x678>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a2b      	ldr	r2, [pc, #172]	; (8006988 <HAL_DMA_IRQHandler+0x694>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d045      	beq.n	800696c <HAL_DMA_IRQHandler+0x678>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a29      	ldr	r2, [pc, #164]	; (800698c <HAL_DMA_IRQHandler+0x698>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d040      	beq.n	800696c <HAL_DMA_IRQHandler+0x678>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a28      	ldr	r2, [pc, #160]	; (8006990 <HAL_DMA_IRQHandler+0x69c>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d03b      	beq.n	800696c <HAL_DMA_IRQHandler+0x678>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a26      	ldr	r2, [pc, #152]	; (8006994 <HAL_DMA_IRQHandler+0x6a0>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d036      	beq.n	800696c <HAL_DMA_IRQHandler+0x678>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a25      	ldr	r2, [pc, #148]	; (8006998 <HAL_DMA_IRQHandler+0x6a4>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d031      	beq.n	800696c <HAL_DMA_IRQHandler+0x678>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a23      	ldr	r2, [pc, #140]	; (800699c <HAL_DMA_IRQHandler+0x6a8>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d02c      	beq.n	800696c <HAL_DMA_IRQHandler+0x678>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a22      	ldr	r2, [pc, #136]	; (80069a0 <HAL_DMA_IRQHandler+0x6ac>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d027      	beq.n	800696c <HAL_DMA_IRQHandler+0x678>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a20      	ldr	r2, [pc, #128]	; (80069a4 <HAL_DMA_IRQHandler+0x6b0>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d022      	beq.n	800696c <HAL_DMA_IRQHandler+0x678>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a1f      	ldr	r2, [pc, #124]	; (80069a8 <HAL_DMA_IRQHandler+0x6b4>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d01d      	beq.n	800696c <HAL_DMA_IRQHandler+0x678>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a1d      	ldr	r2, [pc, #116]	; (80069ac <HAL_DMA_IRQHandler+0x6b8>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d018      	beq.n	800696c <HAL_DMA_IRQHandler+0x678>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a1c      	ldr	r2, [pc, #112]	; (80069b0 <HAL_DMA_IRQHandler+0x6bc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d013      	beq.n	800696c <HAL_DMA_IRQHandler+0x678>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a1a      	ldr	r2, [pc, #104]	; (80069b4 <HAL_DMA_IRQHandler+0x6c0>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d00e      	beq.n	800696c <HAL_DMA_IRQHandler+0x678>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a19      	ldr	r2, [pc, #100]	; (80069b8 <HAL_DMA_IRQHandler+0x6c4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d009      	beq.n	800696c <HAL_DMA_IRQHandler+0x678>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a17      	ldr	r2, [pc, #92]	; (80069bc <HAL_DMA_IRQHandler+0x6c8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d004      	beq.n	800696c <HAL_DMA_IRQHandler+0x678>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a16      	ldr	r2, [pc, #88]	; (80069c0 <HAL_DMA_IRQHandler+0x6cc>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d12b      	bne.n	80069c4 <HAL_DMA_IRQHandler+0x6d0>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0310 	and.w	r3, r3, #16
 8006976:	2b00      	cmp	r3, #0
 8006978:	bf14      	ite	ne
 800697a:	2301      	movne	r3, #1
 800697c:	2300      	moveq	r3, #0
 800697e:	b2db      	uxtb	r3, r3
 8006980:	e02a      	b.n	80069d8 <HAL_DMA_IRQHandler+0x6e4>
 8006982:	bf00      	nop
 8006984:	40020010 	.word	0x40020010
 8006988:	40020028 	.word	0x40020028
 800698c:	40020040 	.word	0x40020040
 8006990:	40020058 	.word	0x40020058
 8006994:	40020070 	.word	0x40020070
 8006998:	40020088 	.word	0x40020088
 800699c:	400200a0 	.word	0x400200a0
 80069a0:	400200b8 	.word	0x400200b8
 80069a4:	40020410 	.word	0x40020410
 80069a8:	40020428 	.word	0x40020428
 80069ac:	40020440 	.word	0x40020440
 80069b0:	40020458 	.word	0x40020458
 80069b4:	40020470 	.word	0x40020470
 80069b8:	40020488 	.word	0x40020488
 80069bc:	400204a0 	.word	0x400204a0
 80069c0:	400204b8 	.word	0x400204b8
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 0302 	and.w	r3, r3, #2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	bf14      	ite	ne
 80069d2:	2301      	movne	r3, #1
 80069d4:	2300      	moveq	r3, #0
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8087 	beq.w	8006aec <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e2:	f003 031f 	and.w	r3, r3, #31
 80069e6:	2220      	movs	r2, #32
 80069e8:	409a      	lsls	r2, r3
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d139      	bne.n	8006a6e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f022 0216 	bic.w	r2, r2, #22
 8006a08:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	695a      	ldr	r2, [r3, #20]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a18:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d103      	bne.n	8006a2a <HAL_DMA_IRQHandler+0x736>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d007      	beq.n	8006a3a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0208 	bic.w	r2, r2, #8
 8006a38:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3e:	f003 031f 	and.w	r3, r3, #31
 8006a42:	223f      	movs	r2, #63	; 0x3f
 8006a44:	409a      	lsls	r2, r3
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 834a 	beq.w	80070f8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	4798      	blx	r3
          }
          return;
 8006a6c:	e344      	b.n	80070f8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d018      	beq.n	8006aae <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d108      	bne.n	8006a9c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d02c      	beq.n	8006aec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	4798      	blx	r3
 8006a9a:	e027      	b.n	8006aec <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d023      	beq.n	8006aec <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	4798      	blx	r3
 8006aac:	e01e      	b.n	8006aec <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10f      	bne.n	8006adc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0210 	bic.w	r2, r2, #16
 8006aca:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d003      	beq.n	8006aec <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f000 8306 	beq.w	8007102 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8088 	beq.w	8006c14 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2204      	movs	r2, #4
 8006b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a7a      	ldr	r2, [pc, #488]	; (8006cfc <HAL_DMA_IRQHandler+0xa08>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d04a      	beq.n	8006bac <HAL_DMA_IRQHandler+0x8b8>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a79      	ldr	r2, [pc, #484]	; (8006d00 <HAL_DMA_IRQHandler+0xa0c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d045      	beq.n	8006bac <HAL_DMA_IRQHandler+0x8b8>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a77      	ldr	r2, [pc, #476]	; (8006d04 <HAL_DMA_IRQHandler+0xa10>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d040      	beq.n	8006bac <HAL_DMA_IRQHandler+0x8b8>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a76      	ldr	r2, [pc, #472]	; (8006d08 <HAL_DMA_IRQHandler+0xa14>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d03b      	beq.n	8006bac <HAL_DMA_IRQHandler+0x8b8>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a74      	ldr	r2, [pc, #464]	; (8006d0c <HAL_DMA_IRQHandler+0xa18>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d036      	beq.n	8006bac <HAL_DMA_IRQHandler+0x8b8>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a73      	ldr	r2, [pc, #460]	; (8006d10 <HAL_DMA_IRQHandler+0xa1c>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d031      	beq.n	8006bac <HAL_DMA_IRQHandler+0x8b8>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a71      	ldr	r2, [pc, #452]	; (8006d14 <HAL_DMA_IRQHandler+0xa20>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d02c      	beq.n	8006bac <HAL_DMA_IRQHandler+0x8b8>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a70      	ldr	r2, [pc, #448]	; (8006d18 <HAL_DMA_IRQHandler+0xa24>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d027      	beq.n	8006bac <HAL_DMA_IRQHandler+0x8b8>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a6e      	ldr	r2, [pc, #440]	; (8006d1c <HAL_DMA_IRQHandler+0xa28>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d022      	beq.n	8006bac <HAL_DMA_IRQHandler+0x8b8>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a6d      	ldr	r2, [pc, #436]	; (8006d20 <HAL_DMA_IRQHandler+0xa2c>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d01d      	beq.n	8006bac <HAL_DMA_IRQHandler+0x8b8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a6b      	ldr	r2, [pc, #428]	; (8006d24 <HAL_DMA_IRQHandler+0xa30>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d018      	beq.n	8006bac <HAL_DMA_IRQHandler+0x8b8>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a6a      	ldr	r2, [pc, #424]	; (8006d28 <HAL_DMA_IRQHandler+0xa34>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d013      	beq.n	8006bac <HAL_DMA_IRQHandler+0x8b8>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a68      	ldr	r2, [pc, #416]	; (8006d2c <HAL_DMA_IRQHandler+0xa38>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00e      	beq.n	8006bac <HAL_DMA_IRQHandler+0x8b8>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a67      	ldr	r2, [pc, #412]	; (8006d30 <HAL_DMA_IRQHandler+0xa3c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d009      	beq.n	8006bac <HAL_DMA_IRQHandler+0x8b8>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a65      	ldr	r2, [pc, #404]	; (8006d34 <HAL_DMA_IRQHandler+0xa40>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d004      	beq.n	8006bac <HAL_DMA_IRQHandler+0x8b8>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a64      	ldr	r2, [pc, #400]	; (8006d38 <HAL_DMA_IRQHandler+0xa44>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d108      	bne.n	8006bbe <HAL_DMA_IRQHandler+0x8ca>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	e007      	b.n	8006bce <HAL_DMA_IRQHandler+0x8da>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0201 	bic.w	r2, r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d307      	bcc.n	8006bea <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0301 	and.w	r3, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1f2      	bne.n	8006bce <HAL_DMA_IRQHandler+0x8da>
 8006be8:	e000      	b.n	8006bec <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006bea:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d004      	beq.n	8006c04 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2203      	movs	r2, #3
 8006bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006c02:	e003      	b.n	8006c0c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	f000 8272 	beq.w	8007102 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	4798      	blx	r3
 8006c26:	e26c      	b.n	8007102 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a43      	ldr	r2, [pc, #268]	; (8006d3c <HAL_DMA_IRQHandler+0xa48>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d022      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x984>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a42      	ldr	r2, [pc, #264]	; (8006d40 <HAL_DMA_IRQHandler+0xa4c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d01d      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x984>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a40      	ldr	r2, [pc, #256]	; (8006d44 <HAL_DMA_IRQHandler+0xa50>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d018      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x984>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a3f      	ldr	r2, [pc, #252]	; (8006d48 <HAL_DMA_IRQHandler+0xa54>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d013      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x984>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a3d      	ldr	r2, [pc, #244]	; (8006d4c <HAL_DMA_IRQHandler+0xa58>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d00e      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x984>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a3c      	ldr	r2, [pc, #240]	; (8006d50 <HAL_DMA_IRQHandler+0xa5c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d009      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x984>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a3a      	ldr	r2, [pc, #232]	; (8006d54 <HAL_DMA_IRQHandler+0xa60>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d004      	beq.n	8006c78 <HAL_DMA_IRQHandler+0x984>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a39      	ldr	r2, [pc, #228]	; (8006d58 <HAL_DMA_IRQHandler+0xa64>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d101      	bne.n	8006c7c <HAL_DMA_IRQHandler+0x988>
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e000      	b.n	8006c7e <HAL_DMA_IRQHandler+0x98a>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f000 823f 	beq.w	8007102 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c90:	f003 031f 	and.w	r3, r3, #31
 8006c94:	2204      	movs	r2, #4
 8006c96:	409a      	lsls	r2, r3
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 80cd 	beq.w	8006e3c <HAL_DMA_IRQHandler+0xb48>
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f003 0304 	and.w	r3, r3, #4
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 80c7 	beq.w	8006e3c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb2:	f003 031f 	and.w	r3, r3, #31
 8006cb6:	2204      	movs	r2, #4
 8006cb8:	409a      	lsls	r2, r3
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cbe:	693b      	ldr	r3, [r7, #16]
 8006cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d049      	beq.n	8006d5c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 8210 	beq.w	80070fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ce4:	e20a      	b.n	80070fc <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 8206 	beq.w	80070fc <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cf8:	e200      	b.n	80070fc <HAL_DMA_IRQHandler+0xe08>
 8006cfa:	bf00      	nop
 8006cfc:	40020010 	.word	0x40020010
 8006d00:	40020028 	.word	0x40020028
 8006d04:	40020040 	.word	0x40020040
 8006d08:	40020058 	.word	0x40020058
 8006d0c:	40020070 	.word	0x40020070
 8006d10:	40020088 	.word	0x40020088
 8006d14:	400200a0 	.word	0x400200a0
 8006d18:	400200b8 	.word	0x400200b8
 8006d1c:	40020410 	.word	0x40020410
 8006d20:	40020428 	.word	0x40020428
 8006d24:	40020440 	.word	0x40020440
 8006d28:	40020458 	.word	0x40020458
 8006d2c:	40020470 	.word	0x40020470
 8006d30:	40020488 	.word	0x40020488
 8006d34:	400204a0 	.word	0x400204a0
 8006d38:	400204b8 	.word	0x400204b8
 8006d3c:	58025408 	.word	0x58025408
 8006d40:	5802541c 	.word	0x5802541c
 8006d44:	58025430 	.word	0x58025430
 8006d48:	58025444 	.word	0x58025444
 8006d4c:	58025458 	.word	0x58025458
 8006d50:	5802546c 	.word	0x5802546c
 8006d54:	58025480 	.word	0x58025480
 8006d58:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f003 0320 	and.w	r3, r3, #32
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d160      	bne.n	8006e28 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a8c      	ldr	r2, [pc, #560]	; (8006f9c <HAL_DMA_IRQHandler+0xca8>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d04a      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xb12>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a8a      	ldr	r2, [pc, #552]	; (8006fa0 <HAL_DMA_IRQHandler+0xcac>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d045      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xb12>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a89      	ldr	r2, [pc, #548]	; (8006fa4 <HAL_DMA_IRQHandler+0xcb0>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d040      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xb12>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a87      	ldr	r2, [pc, #540]	; (8006fa8 <HAL_DMA_IRQHandler+0xcb4>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d03b      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xb12>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a86      	ldr	r2, [pc, #536]	; (8006fac <HAL_DMA_IRQHandler+0xcb8>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d036      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xb12>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a84      	ldr	r2, [pc, #528]	; (8006fb0 <HAL_DMA_IRQHandler+0xcbc>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d031      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xb12>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a83      	ldr	r2, [pc, #524]	; (8006fb4 <HAL_DMA_IRQHandler+0xcc0>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d02c      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xb12>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a81      	ldr	r2, [pc, #516]	; (8006fb8 <HAL_DMA_IRQHandler+0xcc4>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d027      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xb12>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a80      	ldr	r2, [pc, #512]	; (8006fbc <HAL_DMA_IRQHandler+0xcc8>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d022      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xb12>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a7e      	ldr	r2, [pc, #504]	; (8006fc0 <HAL_DMA_IRQHandler+0xccc>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d01d      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xb12>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a7d      	ldr	r2, [pc, #500]	; (8006fc4 <HAL_DMA_IRQHandler+0xcd0>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d018      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xb12>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a7b      	ldr	r2, [pc, #492]	; (8006fc8 <HAL_DMA_IRQHandler+0xcd4>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d013      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xb12>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a7a      	ldr	r2, [pc, #488]	; (8006fcc <HAL_DMA_IRQHandler+0xcd8>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00e      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xb12>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a78      	ldr	r2, [pc, #480]	; (8006fd0 <HAL_DMA_IRQHandler+0xcdc>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d009      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xb12>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a77      	ldr	r2, [pc, #476]	; (8006fd4 <HAL_DMA_IRQHandler+0xce0>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d004      	beq.n	8006e06 <HAL_DMA_IRQHandler+0xb12>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a75      	ldr	r2, [pc, #468]	; (8006fd8 <HAL_DMA_IRQHandler+0xce4>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d108      	bne.n	8006e18 <HAL_DMA_IRQHandler+0xb24>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0208 	bic.w	r2, r2, #8
 8006e14:	601a      	str	r2, [r3, #0]
 8006e16:	e007      	b.n	8006e28 <HAL_DMA_IRQHandler+0xb34>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0204 	bic.w	r2, r2, #4
 8006e26:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	f000 8165 	beq.w	80070fc <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e3a:	e15f      	b.n	80070fc <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e40:	f003 031f 	and.w	r3, r3, #31
 8006e44:	2202      	movs	r2, #2
 8006e46:	409a      	lsls	r2, r3
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 80c5 	beq.w	8006fdc <HAL_DMA_IRQHandler+0xce8>
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 80bf 	beq.w	8006fdc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e62:	f003 031f 	and.w	r3, r3, #31
 8006e66:	2202      	movs	r2, #2
 8006e68:	409a      	lsls	r2, r3
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d018      	beq.n	8006eaa <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d109      	bne.n	8006e96 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f000 813a 	beq.w	8007100 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e94:	e134      	b.n	8007100 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 8130 	beq.w	8007100 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ea8:	e12a      	b.n	8007100 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f003 0320 	and.w	r3, r3, #32
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d168      	bne.n	8006f86 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a38      	ldr	r2, [pc, #224]	; (8006f9c <HAL_DMA_IRQHandler+0xca8>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d04a      	beq.n	8006f54 <HAL_DMA_IRQHandler+0xc60>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a37      	ldr	r2, [pc, #220]	; (8006fa0 <HAL_DMA_IRQHandler+0xcac>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d045      	beq.n	8006f54 <HAL_DMA_IRQHandler+0xc60>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a35      	ldr	r2, [pc, #212]	; (8006fa4 <HAL_DMA_IRQHandler+0xcb0>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d040      	beq.n	8006f54 <HAL_DMA_IRQHandler+0xc60>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a34      	ldr	r2, [pc, #208]	; (8006fa8 <HAL_DMA_IRQHandler+0xcb4>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d03b      	beq.n	8006f54 <HAL_DMA_IRQHandler+0xc60>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a32      	ldr	r2, [pc, #200]	; (8006fac <HAL_DMA_IRQHandler+0xcb8>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d036      	beq.n	8006f54 <HAL_DMA_IRQHandler+0xc60>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a31      	ldr	r2, [pc, #196]	; (8006fb0 <HAL_DMA_IRQHandler+0xcbc>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d031      	beq.n	8006f54 <HAL_DMA_IRQHandler+0xc60>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a2f      	ldr	r2, [pc, #188]	; (8006fb4 <HAL_DMA_IRQHandler+0xcc0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d02c      	beq.n	8006f54 <HAL_DMA_IRQHandler+0xc60>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a2e      	ldr	r2, [pc, #184]	; (8006fb8 <HAL_DMA_IRQHandler+0xcc4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d027      	beq.n	8006f54 <HAL_DMA_IRQHandler+0xc60>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a2c      	ldr	r2, [pc, #176]	; (8006fbc <HAL_DMA_IRQHandler+0xcc8>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d022      	beq.n	8006f54 <HAL_DMA_IRQHandler+0xc60>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a2b      	ldr	r2, [pc, #172]	; (8006fc0 <HAL_DMA_IRQHandler+0xccc>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d01d      	beq.n	8006f54 <HAL_DMA_IRQHandler+0xc60>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4a29      	ldr	r2, [pc, #164]	; (8006fc4 <HAL_DMA_IRQHandler+0xcd0>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d018      	beq.n	8006f54 <HAL_DMA_IRQHandler+0xc60>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a28      	ldr	r2, [pc, #160]	; (8006fc8 <HAL_DMA_IRQHandler+0xcd4>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d013      	beq.n	8006f54 <HAL_DMA_IRQHandler+0xc60>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a26      	ldr	r2, [pc, #152]	; (8006fcc <HAL_DMA_IRQHandler+0xcd8>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d00e      	beq.n	8006f54 <HAL_DMA_IRQHandler+0xc60>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a25      	ldr	r2, [pc, #148]	; (8006fd0 <HAL_DMA_IRQHandler+0xcdc>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d009      	beq.n	8006f54 <HAL_DMA_IRQHandler+0xc60>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a23      	ldr	r2, [pc, #140]	; (8006fd4 <HAL_DMA_IRQHandler+0xce0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d004      	beq.n	8006f54 <HAL_DMA_IRQHandler+0xc60>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a22      	ldr	r2, [pc, #136]	; (8006fd8 <HAL_DMA_IRQHandler+0xce4>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d108      	bne.n	8006f66 <HAL_DMA_IRQHandler+0xc72>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f022 0214 	bic.w	r2, r2, #20
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	e007      	b.n	8006f76 <HAL_DMA_IRQHandler+0xc82>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 020a 	bic.w	r2, r2, #10
 8006f74:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	f000 80b8 	beq.w	8007100 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f98:	e0b2      	b.n	8007100 <HAL_DMA_IRQHandler+0xe0c>
 8006f9a:	bf00      	nop
 8006f9c:	40020010 	.word	0x40020010
 8006fa0:	40020028 	.word	0x40020028
 8006fa4:	40020040 	.word	0x40020040
 8006fa8:	40020058 	.word	0x40020058
 8006fac:	40020070 	.word	0x40020070
 8006fb0:	40020088 	.word	0x40020088
 8006fb4:	400200a0 	.word	0x400200a0
 8006fb8:	400200b8 	.word	0x400200b8
 8006fbc:	40020410 	.word	0x40020410
 8006fc0:	40020428 	.word	0x40020428
 8006fc4:	40020440 	.word	0x40020440
 8006fc8:	40020458 	.word	0x40020458
 8006fcc:	40020470 	.word	0x40020470
 8006fd0:	40020488 	.word	0x40020488
 8006fd4:	400204a0 	.word	0x400204a0
 8006fd8:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	2208      	movs	r2, #8
 8006fe6:	409a      	lsls	r2, r3
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	4013      	ands	r3, r2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	f000 8088 	beq.w	8007102 <HAL_DMA_IRQHandler+0xe0e>
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f003 0308 	and.w	r3, r3, #8
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 8082 	beq.w	8007102 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a41      	ldr	r2, [pc, #260]	; (8007108 <HAL_DMA_IRQHandler+0xe14>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d04a      	beq.n	800709e <HAL_DMA_IRQHandler+0xdaa>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a3f      	ldr	r2, [pc, #252]	; (800710c <HAL_DMA_IRQHandler+0xe18>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d045      	beq.n	800709e <HAL_DMA_IRQHandler+0xdaa>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a3e      	ldr	r2, [pc, #248]	; (8007110 <HAL_DMA_IRQHandler+0xe1c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d040      	beq.n	800709e <HAL_DMA_IRQHandler+0xdaa>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a3c      	ldr	r2, [pc, #240]	; (8007114 <HAL_DMA_IRQHandler+0xe20>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d03b      	beq.n	800709e <HAL_DMA_IRQHandler+0xdaa>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a3b      	ldr	r2, [pc, #236]	; (8007118 <HAL_DMA_IRQHandler+0xe24>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d036      	beq.n	800709e <HAL_DMA_IRQHandler+0xdaa>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a39      	ldr	r2, [pc, #228]	; (800711c <HAL_DMA_IRQHandler+0xe28>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d031      	beq.n	800709e <HAL_DMA_IRQHandler+0xdaa>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a38      	ldr	r2, [pc, #224]	; (8007120 <HAL_DMA_IRQHandler+0xe2c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d02c      	beq.n	800709e <HAL_DMA_IRQHandler+0xdaa>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a36      	ldr	r2, [pc, #216]	; (8007124 <HAL_DMA_IRQHandler+0xe30>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d027      	beq.n	800709e <HAL_DMA_IRQHandler+0xdaa>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a35      	ldr	r2, [pc, #212]	; (8007128 <HAL_DMA_IRQHandler+0xe34>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d022      	beq.n	800709e <HAL_DMA_IRQHandler+0xdaa>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a33      	ldr	r2, [pc, #204]	; (800712c <HAL_DMA_IRQHandler+0xe38>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d01d      	beq.n	800709e <HAL_DMA_IRQHandler+0xdaa>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a32      	ldr	r2, [pc, #200]	; (8007130 <HAL_DMA_IRQHandler+0xe3c>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d018      	beq.n	800709e <HAL_DMA_IRQHandler+0xdaa>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a30      	ldr	r2, [pc, #192]	; (8007134 <HAL_DMA_IRQHandler+0xe40>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d013      	beq.n	800709e <HAL_DMA_IRQHandler+0xdaa>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a2f      	ldr	r2, [pc, #188]	; (8007138 <HAL_DMA_IRQHandler+0xe44>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d00e      	beq.n	800709e <HAL_DMA_IRQHandler+0xdaa>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a2d      	ldr	r2, [pc, #180]	; (800713c <HAL_DMA_IRQHandler+0xe48>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d009      	beq.n	800709e <HAL_DMA_IRQHandler+0xdaa>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a2c      	ldr	r2, [pc, #176]	; (8007140 <HAL_DMA_IRQHandler+0xe4c>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d004      	beq.n	800709e <HAL_DMA_IRQHandler+0xdaa>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a2a      	ldr	r2, [pc, #168]	; (8007144 <HAL_DMA_IRQHandler+0xe50>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d108      	bne.n	80070b0 <HAL_DMA_IRQHandler+0xdbc>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f022 021c 	bic.w	r2, r2, #28
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	e007      	b.n	80070c0 <HAL_DMA_IRQHandler+0xdcc>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 020e 	bic.w	r2, r2, #14
 80070be:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	2201      	movs	r2, #1
 80070ca:	409a      	lsls	r2, r3
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d009      	beq.n	8007102 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	4798      	blx	r3
 80070f6:	e004      	b.n	8007102 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80070f8:	bf00      	nop
 80070fa:	e002      	b.n	8007102 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80070fc:	bf00      	nop
 80070fe:	e000      	b.n	8007102 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007100:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007102:	3728      	adds	r7, #40	; 0x28
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	40020010 	.word	0x40020010
 800710c:	40020028 	.word	0x40020028
 8007110:	40020040 	.word	0x40020040
 8007114:	40020058 	.word	0x40020058
 8007118:	40020070 	.word	0x40020070
 800711c:	40020088 	.word	0x40020088
 8007120:	400200a0 	.word	0x400200a0
 8007124:	400200b8 	.word	0x400200b8
 8007128:	40020410 	.word	0x40020410
 800712c:	40020428 	.word	0x40020428
 8007130:	40020440 	.word	0x40020440
 8007134:	40020458 	.word	0x40020458
 8007138:	40020470 	.word	0x40020470
 800713c:	40020488 	.word	0x40020488
 8007140:	400204a0 	.word	0x400204a0
 8007144:	400204b8 	.word	0x400204b8

08007148 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007148:	b480      	push	{r7}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
 8007154:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007160:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a84      	ldr	r2, [pc, #528]	; (8007378 <DMA_SetConfig+0x230>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d072      	beq.n	8007252 <DMA_SetConfig+0x10a>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a82      	ldr	r2, [pc, #520]	; (800737c <DMA_SetConfig+0x234>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d06d      	beq.n	8007252 <DMA_SetConfig+0x10a>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a81      	ldr	r2, [pc, #516]	; (8007380 <DMA_SetConfig+0x238>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d068      	beq.n	8007252 <DMA_SetConfig+0x10a>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a7f      	ldr	r2, [pc, #508]	; (8007384 <DMA_SetConfig+0x23c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d063      	beq.n	8007252 <DMA_SetConfig+0x10a>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a7e      	ldr	r2, [pc, #504]	; (8007388 <DMA_SetConfig+0x240>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d05e      	beq.n	8007252 <DMA_SetConfig+0x10a>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a7c      	ldr	r2, [pc, #496]	; (800738c <DMA_SetConfig+0x244>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d059      	beq.n	8007252 <DMA_SetConfig+0x10a>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a7b      	ldr	r2, [pc, #492]	; (8007390 <DMA_SetConfig+0x248>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d054      	beq.n	8007252 <DMA_SetConfig+0x10a>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a79      	ldr	r2, [pc, #484]	; (8007394 <DMA_SetConfig+0x24c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d04f      	beq.n	8007252 <DMA_SetConfig+0x10a>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a78      	ldr	r2, [pc, #480]	; (8007398 <DMA_SetConfig+0x250>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d04a      	beq.n	8007252 <DMA_SetConfig+0x10a>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a76      	ldr	r2, [pc, #472]	; (800739c <DMA_SetConfig+0x254>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d045      	beq.n	8007252 <DMA_SetConfig+0x10a>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a75      	ldr	r2, [pc, #468]	; (80073a0 <DMA_SetConfig+0x258>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d040      	beq.n	8007252 <DMA_SetConfig+0x10a>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a73      	ldr	r2, [pc, #460]	; (80073a4 <DMA_SetConfig+0x25c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d03b      	beq.n	8007252 <DMA_SetConfig+0x10a>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a72      	ldr	r2, [pc, #456]	; (80073a8 <DMA_SetConfig+0x260>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d036      	beq.n	8007252 <DMA_SetConfig+0x10a>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a70      	ldr	r2, [pc, #448]	; (80073ac <DMA_SetConfig+0x264>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d031      	beq.n	8007252 <DMA_SetConfig+0x10a>
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a6f      	ldr	r2, [pc, #444]	; (80073b0 <DMA_SetConfig+0x268>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d02c      	beq.n	8007252 <DMA_SetConfig+0x10a>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a6d      	ldr	r2, [pc, #436]	; (80073b4 <DMA_SetConfig+0x26c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d027      	beq.n	8007252 <DMA_SetConfig+0x10a>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a6c      	ldr	r2, [pc, #432]	; (80073b8 <DMA_SetConfig+0x270>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d022      	beq.n	8007252 <DMA_SetConfig+0x10a>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a6a      	ldr	r2, [pc, #424]	; (80073bc <DMA_SetConfig+0x274>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d01d      	beq.n	8007252 <DMA_SetConfig+0x10a>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a69      	ldr	r2, [pc, #420]	; (80073c0 <DMA_SetConfig+0x278>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d018      	beq.n	8007252 <DMA_SetConfig+0x10a>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a67      	ldr	r2, [pc, #412]	; (80073c4 <DMA_SetConfig+0x27c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d013      	beq.n	8007252 <DMA_SetConfig+0x10a>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a66      	ldr	r2, [pc, #408]	; (80073c8 <DMA_SetConfig+0x280>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d00e      	beq.n	8007252 <DMA_SetConfig+0x10a>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a64      	ldr	r2, [pc, #400]	; (80073cc <DMA_SetConfig+0x284>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d009      	beq.n	8007252 <DMA_SetConfig+0x10a>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a63      	ldr	r2, [pc, #396]	; (80073d0 <DMA_SetConfig+0x288>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d004      	beq.n	8007252 <DMA_SetConfig+0x10a>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a61      	ldr	r2, [pc, #388]	; (80073d4 <DMA_SetConfig+0x28c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d101      	bne.n	8007256 <DMA_SetConfig+0x10e>
 8007252:	2301      	movs	r3, #1
 8007254:	e000      	b.n	8007258 <DMA_SetConfig+0x110>
 8007256:	2300      	movs	r3, #0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00d      	beq.n	8007278 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007264:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d004      	beq.n	8007278 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007276:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a3e      	ldr	r2, [pc, #248]	; (8007378 <DMA_SetConfig+0x230>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d04a      	beq.n	8007318 <DMA_SetConfig+0x1d0>
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a3d      	ldr	r2, [pc, #244]	; (800737c <DMA_SetConfig+0x234>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d045      	beq.n	8007318 <DMA_SetConfig+0x1d0>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a3b      	ldr	r2, [pc, #236]	; (8007380 <DMA_SetConfig+0x238>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d040      	beq.n	8007318 <DMA_SetConfig+0x1d0>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a3a      	ldr	r2, [pc, #232]	; (8007384 <DMA_SetConfig+0x23c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d03b      	beq.n	8007318 <DMA_SetConfig+0x1d0>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a38      	ldr	r2, [pc, #224]	; (8007388 <DMA_SetConfig+0x240>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d036      	beq.n	8007318 <DMA_SetConfig+0x1d0>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a37      	ldr	r2, [pc, #220]	; (800738c <DMA_SetConfig+0x244>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d031      	beq.n	8007318 <DMA_SetConfig+0x1d0>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a35      	ldr	r2, [pc, #212]	; (8007390 <DMA_SetConfig+0x248>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d02c      	beq.n	8007318 <DMA_SetConfig+0x1d0>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a34      	ldr	r2, [pc, #208]	; (8007394 <DMA_SetConfig+0x24c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d027      	beq.n	8007318 <DMA_SetConfig+0x1d0>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a32      	ldr	r2, [pc, #200]	; (8007398 <DMA_SetConfig+0x250>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d022      	beq.n	8007318 <DMA_SetConfig+0x1d0>
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a31      	ldr	r2, [pc, #196]	; (800739c <DMA_SetConfig+0x254>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d01d      	beq.n	8007318 <DMA_SetConfig+0x1d0>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a2f      	ldr	r2, [pc, #188]	; (80073a0 <DMA_SetConfig+0x258>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d018      	beq.n	8007318 <DMA_SetConfig+0x1d0>
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a2e      	ldr	r2, [pc, #184]	; (80073a4 <DMA_SetConfig+0x25c>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d013      	beq.n	8007318 <DMA_SetConfig+0x1d0>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a2c      	ldr	r2, [pc, #176]	; (80073a8 <DMA_SetConfig+0x260>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d00e      	beq.n	8007318 <DMA_SetConfig+0x1d0>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a2b      	ldr	r2, [pc, #172]	; (80073ac <DMA_SetConfig+0x264>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d009      	beq.n	8007318 <DMA_SetConfig+0x1d0>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a29      	ldr	r2, [pc, #164]	; (80073b0 <DMA_SetConfig+0x268>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d004      	beq.n	8007318 <DMA_SetConfig+0x1d0>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a28      	ldr	r2, [pc, #160]	; (80073b4 <DMA_SetConfig+0x26c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d101      	bne.n	800731c <DMA_SetConfig+0x1d4>
 8007318:	2301      	movs	r3, #1
 800731a:	e000      	b.n	800731e <DMA_SetConfig+0x1d6>
 800731c:	2300      	movs	r3, #0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d05a      	beq.n	80073d8 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007326:	f003 031f 	and.w	r3, r3, #31
 800732a:	223f      	movs	r2, #63	; 0x3f
 800732c:	409a      	lsls	r2, r3
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681a      	ldr	r2, [r3, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007340:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	2b40      	cmp	r3, #64	; 0x40
 8007350:	d108      	bne.n	8007364 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007362:	e087      	b.n	8007474 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	60da      	str	r2, [r3, #12]
}
 8007374:	e07e      	b.n	8007474 <DMA_SetConfig+0x32c>
 8007376:	bf00      	nop
 8007378:	40020010 	.word	0x40020010
 800737c:	40020028 	.word	0x40020028
 8007380:	40020040 	.word	0x40020040
 8007384:	40020058 	.word	0x40020058
 8007388:	40020070 	.word	0x40020070
 800738c:	40020088 	.word	0x40020088
 8007390:	400200a0 	.word	0x400200a0
 8007394:	400200b8 	.word	0x400200b8
 8007398:	40020410 	.word	0x40020410
 800739c:	40020428 	.word	0x40020428
 80073a0:	40020440 	.word	0x40020440
 80073a4:	40020458 	.word	0x40020458
 80073a8:	40020470 	.word	0x40020470
 80073ac:	40020488 	.word	0x40020488
 80073b0:	400204a0 	.word	0x400204a0
 80073b4:	400204b8 	.word	0x400204b8
 80073b8:	58025408 	.word	0x58025408
 80073bc:	5802541c 	.word	0x5802541c
 80073c0:	58025430 	.word	0x58025430
 80073c4:	58025444 	.word	0x58025444
 80073c8:	58025458 	.word	0x58025458
 80073cc:	5802546c 	.word	0x5802546c
 80073d0:	58025480 	.word	0x58025480
 80073d4:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a28      	ldr	r2, [pc, #160]	; (8007480 <DMA_SetConfig+0x338>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d022      	beq.n	8007428 <DMA_SetConfig+0x2e0>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a27      	ldr	r2, [pc, #156]	; (8007484 <DMA_SetConfig+0x33c>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d01d      	beq.n	8007428 <DMA_SetConfig+0x2e0>
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a25      	ldr	r2, [pc, #148]	; (8007488 <DMA_SetConfig+0x340>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d018      	beq.n	8007428 <DMA_SetConfig+0x2e0>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a24      	ldr	r2, [pc, #144]	; (800748c <DMA_SetConfig+0x344>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d013      	beq.n	8007428 <DMA_SetConfig+0x2e0>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a22      	ldr	r2, [pc, #136]	; (8007490 <DMA_SetConfig+0x348>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d00e      	beq.n	8007428 <DMA_SetConfig+0x2e0>
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a21      	ldr	r2, [pc, #132]	; (8007494 <DMA_SetConfig+0x34c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d009      	beq.n	8007428 <DMA_SetConfig+0x2e0>
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a1f      	ldr	r2, [pc, #124]	; (8007498 <DMA_SetConfig+0x350>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d004      	beq.n	8007428 <DMA_SetConfig+0x2e0>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a1e      	ldr	r2, [pc, #120]	; (800749c <DMA_SetConfig+0x354>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d101      	bne.n	800742c <DMA_SetConfig+0x2e4>
 8007428:	2301      	movs	r3, #1
 800742a:	e000      	b.n	800742e <DMA_SetConfig+0x2e6>
 800742c:	2300      	movs	r3, #0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d020      	beq.n	8007474 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007436:	f003 031f 	and.w	r3, r3, #31
 800743a:	2201      	movs	r2, #1
 800743c:	409a      	lsls	r2, r3
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	2b40      	cmp	r3, #64	; 0x40
 8007450:	d108      	bne.n	8007464 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68ba      	ldr	r2, [r7, #8]
 8007460:	60da      	str	r2, [r3, #12]
}
 8007462:	e007      	b.n	8007474 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	60da      	str	r2, [r3, #12]
}
 8007474:	bf00      	nop
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	58025408 	.word	0x58025408
 8007484:	5802541c 	.word	0x5802541c
 8007488:	58025430 	.word	0x58025430
 800748c:	58025444 	.word	0x58025444
 8007490:	58025458 	.word	0x58025458
 8007494:	5802546c 	.word	0x5802546c
 8007498:	58025480 	.word	0x58025480
 800749c:	58025494 	.word	0x58025494

080074a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a42      	ldr	r2, [pc, #264]	; (80075b8 <DMA_CalcBaseAndBitshift+0x118>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d04a      	beq.n	8007548 <DMA_CalcBaseAndBitshift+0xa8>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a41      	ldr	r2, [pc, #260]	; (80075bc <DMA_CalcBaseAndBitshift+0x11c>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d045      	beq.n	8007548 <DMA_CalcBaseAndBitshift+0xa8>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a3f      	ldr	r2, [pc, #252]	; (80075c0 <DMA_CalcBaseAndBitshift+0x120>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d040      	beq.n	8007548 <DMA_CalcBaseAndBitshift+0xa8>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a3e      	ldr	r2, [pc, #248]	; (80075c4 <DMA_CalcBaseAndBitshift+0x124>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d03b      	beq.n	8007548 <DMA_CalcBaseAndBitshift+0xa8>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a3c      	ldr	r2, [pc, #240]	; (80075c8 <DMA_CalcBaseAndBitshift+0x128>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d036      	beq.n	8007548 <DMA_CalcBaseAndBitshift+0xa8>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a3b      	ldr	r2, [pc, #236]	; (80075cc <DMA_CalcBaseAndBitshift+0x12c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d031      	beq.n	8007548 <DMA_CalcBaseAndBitshift+0xa8>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a39      	ldr	r2, [pc, #228]	; (80075d0 <DMA_CalcBaseAndBitshift+0x130>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d02c      	beq.n	8007548 <DMA_CalcBaseAndBitshift+0xa8>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a38      	ldr	r2, [pc, #224]	; (80075d4 <DMA_CalcBaseAndBitshift+0x134>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d027      	beq.n	8007548 <DMA_CalcBaseAndBitshift+0xa8>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a36      	ldr	r2, [pc, #216]	; (80075d8 <DMA_CalcBaseAndBitshift+0x138>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d022      	beq.n	8007548 <DMA_CalcBaseAndBitshift+0xa8>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a35      	ldr	r2, [pc, #212]	; (80075dc <DMA_CalcBaseAndBitshift+0x13c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d01d      	beq.n	8007548 <DMA_CalcBaseAndBitshift+0xa8>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a33      	ldr	r2, [pc, #204]	; (80075e0 <DMA_CalcBaseAndBitshift+0x140>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d018      	beq.n	8007548 <DMA_CalcBaseAndBitshift+0xa8>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a32      	ldr	r2, [pc, #200]	; (80075e4 <DMA_CalcBaseAndBitshift+0x144>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d013      	beq.n	8007548 <DMA_CalcBaseAndBitshift+0xa8>
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a30      	ldr	r2, [pc, #192]	; (80075e8 <DMA_CalcBaseAndBitshift+0x148>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d00e      	beq.n	8007548 <DMA_CalcBaseAndBitshift+0xa8>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a2f      	ldr	r2, [pc, #188]	; (80075ec <DMA_CalcBaseAndBitshift+0x14c>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d009      	beq.n	8007548 <DMA_CalcBaseAndBitshift+0xa8>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a2d      	ldr	r2, [pc, #180]	; (80075f0 <DMA_CalcBaseAndBitshift+0x150>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d004      	beq.n	8007548 <DMA_CalcBaseAndBitshift+0xa8>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4a2c      	ldr	r2, [pc, #176]	; (80075f4 <DMA_CalcBaseAndBitshift+0x154>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d101      	bne.n	800754c <DMA_CalcBaseAndBitshift+0xac>
 8007548:	2301      	movs	r3, #1
 800754a:	e000      	b.n	800754e <DMA_CalcBaseAndBitshift+0xae>
 800754c:	2300      	movs	r3, #0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d024      	beq.n	800759c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	3b10      	subs	r3, #16
 800755a:	4a27      	ldr	r2, [pc, #156]	; (80075f8 <DMA_CalcBaseAndBitshift+0x158>)
 800755c:	fba2 2303 	umull	r2, r3, r2, r3
 8007560:	091b      	lsrs	r3, r3, #4
 8007562:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	4a24      	ldr	r2, [pc, #144]	; (80075fc <DMA_CalcBaseAndBitshift+0x15c>)
 800756c:	5cd3      	ldrb	r3, [r2, r3]
 800756e:	461a      	mov	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2b03      	cmp	r3, #3
 8007578:	d908      	bls.n	800758c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	461a      	mov	r2, r3
 8007580:	4b1f      	ldr	r3, [pc, #124]	; (8007600 <DMA_CalcBaseAndBitshift+0x160>)
 8007582:	4013      	ands	r3, r2
 8007584:	1d1a      	adds	r2, r3, #4
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	659a      	str	r2, [r3, #88]	; 0x58
 800758a:	e00d      	b.n	80075a8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	461a      	mov	r2, r3
 8007592:	4b1b      	ldr	r3, [pc, #108]	; (8007600 <DMA_CalcBaseAndBitshift+0x160>)
 8007594:	4013      	ands	r3, r2
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	6593      	str	r3, [r2, #88]	; 0x58
 800759a:	e005      	b.n	80075a8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3714      	adds	r7, #20
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr
 80075b8:	40020010 	.word	0x40020010
 80075bc:	40020028 	.word	0x40020028
 80075c0:	40020040 	.word	0x40020040
 80075c4:	40020058 	.word	0x40020058
 80075c8:	40020070 	.word	0x40020070
 80075cc:	40020088 	.word	0x40020088
 80075d0:	400200a0 	.word	0x400200a0
 80075d4:	400200b8 	.word	0x400200b8
 80075d8:	40020410 	.word	0x40020410
 80075dc:	40020428 	.word	0x40020428
 80075e0:	40020440 	.word	0x40020440
 80075e4:	40020458 	.word	0x40020458
 80075e8:	40020470 	.word	0x40020470
 80075ec:	40020488 	.word	0x40020488
 80075f0:	400204a0 	.word	0x400204a0
 80075f4:	400204b8 	.word	0x400204b8
 80075f8:	aaaaaaab 	.word	0xaaaaaaab
 80075fc:	08010f28 	.word	0x08010f28
 8007600:	fffffc00 	.word	0xfffffc00

08007604 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800760c:	2300      	movs	r3, #0
 800760e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d120      	bne.n	800765a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761c:	2b03      	cmp	r3, #3
 800761e:	d858      	bhi.n	80076d2 <DMA_CheckFifoParam+0xce>
 8007620:	a201      	add	r2, pc, #4	; (adr r2, 8007628 <DMA_CheckFifoParam+0x24>)
 8007622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007626:	bf00      	nop
 8007628:	08007639 	.word	0x08007639
 800762c:	0800764b 	.word	0x0800764b
 8007630:	08007639 	.word	0x08007639
 8007634:	080076d3 	.word	0x080076d3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d048      	beq.n	80076d6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007648:	e045      	b.n	80076d6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007652:	d142      	bne.n	80076da <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007658:	e03f      	b.n	80076da <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007662:	d123      	bne.n	80076ac <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007668:	2b03      	cmp	r3, #3
 800766a:	d838      	bhi.n	80076de <DMA_CheckFifoParam+0xda>
 800766c:	a201      	add	r2, pc, #4	; (adr r2, 8007674 <DMA_CheckFifoParam+0x70>)
 800766e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007672:	bf00      	nop
 8007674:	08007685 	.word	0x08007685
 8007678:	0800768b 	.word	0x0800768b
 800767c:	08007685 	.word	0x08007685
 8007680:	0800769d 	.word	0x0800769d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	73fb      	strb	r3, [r7, #15]
        break;
 8007688:	e030      	b.n	80076ec <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007692:	2b00      	cmp	r3, #0
 8007694:	d025      	beq.n	80076e2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800769a:	e022      	b.n	80076e2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076a4:	d11f      	bne.n	80076e6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076aa:	e01c      	b.n	80076e6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d902      	bls.n	80076ba <DMA_CheckFifoParam+0xb6>
 80076b4:	2b03      	cmp	r3, #3
 80076b6:	d003      	beq.n	80076c0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80076b8:	e018      	b.n	80076ec <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	73fb      	strb	r3, [r7, #15]
        break;
 80076be:	e015      	b.n	80076ec <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00e      	beq.n	80076ea <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	73fb      	strb	r3, [r7, #15]
    break;
 80076d0:	e00b      	b.n	80076ea <DMA_CheckFifoParam+0xe6>
        break;
 80076d2:	bf00      	nop
 80076d4:	e00a      	b.n	80076ec <DMA_CheckFifoParam+0xe8>
        break;
 80076d6:	bf00      	nop
 80076d8:	e008      	b.n	80076ec <DMA_CheckFifoParam+0xe8>
        break;
 80076da:	bf00      	nop
 80076dc:	e006      	b.n	80076ec <DMA_CheckFifoParam+0xe8>
        break;
 80076de:	bf00      	nop
 80076e0:	e004      	b.n	80076ec <DMA_CheckFifoParam+0xe8>
        break;
 80076e2:	bf00      	nop
 80076e4:	e002      	b.n	80076ec <DMA_CheckFifoParam+0xe8>
        break;
 80076e6:	bf00      	nop
 80076e8:	e000      	b.n	80076ec <DMA_CheckFifoParam+0xe8>
    break;
 80076ea:	bf00      	nop
    }
  }

  return status;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3714      	adds	r7, #20
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop

080076fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a38      	ldr	r2, [pc, #224]	; (80077f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d022      	beq.n	800775a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a36      	ldr	r2, [pc, #216]	; (80077f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d01d      	beq.n	800775a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	4a35      	ldr	r2, [pc, #212]	; (80077f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d018      	beq.n	800775a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a33      	ldr	r2, [pc, #204]	; (80077fc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d013      	beq.n	800775a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a32      	ldr	r2, [pc, #200]	; (8007800 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d00e      	beq.n	800775a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a30      	ldr	r2, [pc, #192]	; (8007804 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d009      	beq.n	800775a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a2f      	ldr	r2, [pc, #188]	; (8007808 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d004      	beq.n	800775a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a2d      	ldr	r2, [pc, #180]	; (800780c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d101      	bne.n	800775e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800775a:	2301      	movs	r3, #1
 800775c:	e000      	b.n	8007760 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800775e:	2300      	movs	r3, #0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d01a      	beq.n	800779a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	3b08      	subs	r3, #8
 800776c:	4a28      	ldr	r2, [pc, #160]	; (8007810 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800776e:	fba2 2303 	umull	r2, r3, r2, r3
 8007772:	091b      	lsrs	r3, r3, #4
 8007774:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4b26      	ldr	r3, [pc, #152]	; (8007814 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800777a:	4413      	add	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	461a      	mov	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a24      	ldr	r2, [pc, #144]	; (8007818 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007788:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f003 031f 	and.w	r3, r3, #31
 8007790:	2201      	movs	r2, #1
 8007792:	409a      	lsls	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007798:	e024      	b.n	80077e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	3b10      	subs	r3, #16
 80077a2:	4a1e      	ldr	r2, [pc, #120]	; (800781c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80077a4:	fba2 2303 	umull	r2, r3, r2, r3
 80077a8:	091b      	lsrs	r3, r3, #4
 80077aa:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4a1c      	ldr	r2, [pc, #112]	; (8007820 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d806      	bhi.n	80077c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	4a1b      	ldr	r2, [pc, #108]	; (8007824 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d902      	bls.n	80077c2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	3308      	adds	r3, #8
 80077c0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4b18      	ldr	r3, [pc, #96]	; (8007828 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	461a      	mov	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a16      	ldr	r2, [pc, #88]	; (800782c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80077d4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f003 031f 	and.w	r3, r3, #31
 80077dc:	2201      	movs	r2, #1
 80077de:	409a      	lsls	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	58025408 	.word	0x58025408
 80077f4:	5802541c 	.word	0x5802541c
 80077f8:	58025430 	.word	0x58025430
 80077fc:	58025444 	.word	0x58025444
 8007800:	58025458 	.word	0x58025458
 8007804:	5802546c 	.word	0x5802546c
 8007808:	58025480 	.word	0x58025480
 800780c:	58025494 	.word	0x58025494
 8007810:	cccccccd 	.word	0xcccccccd
 8007814:	16009600 	.word	0x16009600
 8007818:	58025880 	.word	0x58025880
 800781c:	aaaaaaab 	.word	0xaaaaaaab
 8007820:	400204b8 	.word	0x400204b8
 8007824:	4002040f 	.word	0x4002040f
 8007828:	10008200 	.word	0x10008200
 800782c:	40020880 	.word	0x40020880

08007830 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007830:	b480      	push	{r7}
 8007832:	b085      	sub	sp, #20
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	b2db      	uxtb	r3, r3
 800783e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d04a      	beq.n	80078dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2b08      	cmp	r3, #8
 800784a:	d847      	bhi.n	80078dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a25      	ldr	r2, [pc, #148]	; (80078e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d022      	beq.n	800789c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a24      	ldr	r2, [pc, #144]	; (80078ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d01d      	beq.n	800789c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a22      	ldr	r2, [pc, #136]	; (80078f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d018      	beq.n	800789c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a21      	ldr	r2, [pc, #132]	; (80078f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d013      	beq.n	800789c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a1f      	ldr	r2, [pc, #124]	; (80078f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d00e      	beq.n	800789c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a1e      	ldr	r2, [pc, #120]	; (80078fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d009      	beq.n	800789c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a1c      	ldr	r2, [pc, #112]	; (8007900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d004      	beq.n	800789c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a1b      	ldr	r2, [pc, #108]	; (8007904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d101      	bne.n	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800789c:	2301      	movs	r3, #1
 800789e:	e000      	b.n	80078a2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80078a0:	2300      	movs	r3, #0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00a      	beq.n	80078bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	4b17      	ldr	r3, [pc, #92]	; (8007908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80078aa:	4413      	add	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	461a      	mov	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a15      	ldr	r2, [pc, #84]	; (800790c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80078b8:	671a      	str	r2, [r3, #112]	; 0x70
 80078ba:	e009      	b.n	80078d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	4b14      	ldr	r3, [pc, #80]	; (8007910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80078c0:	4413      	add	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	461a      	mov	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a11      	ldr	r2, [pc, #68]	; (8007914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80078ce:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	2201      	movs	r2, #1
 80078d6:	409a      	lsls	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80078dc:	bf00      	nop
 80078de:	3714      	adds	r7, #20
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	58025408 	.word	0x58025408
 80078ec:	5802541c 	.word	0x5802541c
 80078f0:	58025430 	.word	0x58025430
 80078f4:	58025444 	.word	0x58025444
 80078f8:	58025458 	.word	0x58025458
 80078fc:	5802546c 	.word	0x5802546c
 8007900:	58025480 	.word	0x58025480
 8007904:	58025494 	.word	0x58025494
 8007908:	1600963f 	.word	0x1600963f
 800790c:	58025940 	.word	0x58025940
 8007910:	1000823f 	.word	0x1000823f
 8007914:	40020940 	.word	0x40020940

08007918 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007918:	b480      	push	{r7}
 800791a:	b089      	sub	sp, #36	; 0x24
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007922:	2300      	movs	r3, #0
 8007924:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007926:	4b89      	ldr	r3, [pc, #548]	; (8007b4c <HAL_GPIO_Init+0x234>)
 8007928:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800792a:	e194      	b.n	8007c56 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	2101      	movs	r1, #1
 8007932:	69fb      	ldr	r3, [r7, #28]
 8007934:	fa01 f303 	lsl.w	r3, r1, r3
 8007938:	4013      	ands	r3, r2
 800793a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	2b00      	cmp	r3, #0
 8007940:	f000 8186 	beq.w	8007c50 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f003 0303 	and.w	r3, r3, #3
 800794c:	2b01      	cmp	r3, #1
 800794e:	d005      	beq.n	800795c <HAL_GPIO_Init+0x44>
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	f003 0303 	and.w	r3, r3, #3
 8007958:	2b02      	cmp	r3, #2
 800795a:	d130      	bne.n	80079be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	005b      	lsls	r3, r3, #1
 8007966:	2203      	movs	r2, #3
 8007968:	fa02 f303 	lsl.w	r3, r2, r3
 800796c:	43db      	mvns	r3, r3
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	4013      	ands	r3, r2
 8007972:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	68da      	ldr	r2, [r3, #12]
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	005b      	lsls	r3, r3, #1
 800797c:	fa02 f303 	lsl.w	r3, r2, r3
 8007980:	69ba      	ldr	r2, [r7, #24]
 8007982:	4313      	orrs	r3, r2
 8007984:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	69ba      	ldr	r2, [r7, #24]
 800798a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007992:	2201      	movs	r2, #1
 8007994:	69fb      	ldr	r3, [r7, #28]
 8007996:	fa02 f303 	lsl.w	r3, r2, r3
 800799a:	43db      	mvns	r3, r3
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	4013      	ands	r3, r2
 80079a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	091b      	lsrs	r3, r3, #4
 80079a8:	f003 0201 	and.w	r2, r3, #1
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d017      	beq.n	80079fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	2203      	movs	r2, #3
 80079d6:	fa02 f303 	lsl.w	r3, r2, r3
 80079da:	43db      	mvns	r3, r3
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	4013      	ands	r3, r2
 80079e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	689a      	ldr	r2, [r3, #8]
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	005b      	lsls	r3, r3, #1
 80079ea:	fa02 f303 	lsl.w	r3, r2, r3
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	69ba      	ldr	r2, [r7, #24]
 80079f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d123      	bne.n	8007a4e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	08da      	lsrs	r2, r3, #3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3208      	adds	r2, #8
 8007a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	220f      	movs	r2, #15
 8007a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a22:	43db      	mvns	r3, r3
 8007a24:	69ba      	ldr	r2, [r7, #24]
 8007a26:	4013      	ands	r3, r2
 8007a28:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	691a      	ldr	r2, [r3, #16]
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	f003 0307 	and.w	r3, r3, #7
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3a:	69ba      	ldr	r2, [r7, #24]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	08da      	lsrs	r2, r3, #3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	3208      	adds	r2, #8
 8007a48:	69b9      	ldr	r1, [r7, #24]
 8007a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	2203      	movs	r2, #3
 8007a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5e:	43db      	mvns	r3, r3
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	4013      	ands	r3, r2
 8007a64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f003 0203 	and.w	r2, r3, #3
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	005b      	lsls	r3, r3, #1
 8007a72:	fa02 f303 	lsl.w	r3, r2, r3
 8007a76:	69ba      	ldr	r2, [r7, #24]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 80e0 	beq.w	8007c50 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a90:	4b2f      	ldr	r3, [pc, #188]	; (8007b50 <HAL_GPIO_Init+0x238>)
 8007a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a96:	4a2e      	ldr	r2, [pc, #184]	; (8007b50 <HAL_GPIO_Init+0x238>)
 8007a98:	f043 0302 	orr.w	r3, r3, #2
 8007a9c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007aa0:	4b2b      	ldr	r3, [pc, #172]	; (8007b50 <HAL_GPIO_Init+0x238>)
 8007aa2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007aa6:	f003 0302 	and.w	r3, r3, #2
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007aae:	4a29      	ldr	r2, [pc, #164]	; (8007b54 <HAL_GPIO_Init+0x23c>)
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	089b      	lsrs	r3, r3, #2
 8007ab4:	3302      	adds	r3, #2
 8007ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	f003 0303 	and.w	r3, r3, #3
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	220f      	movs	r2, #15
 8007ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aca:	43db      	mvns	r3, r3
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	4a20      	ldr	r2, [pc, #128]	; (8007b58 <HAL_GPIO_Init+0x240>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d052      	beq.n	8007b80 <HAL_GPIO_Init+0x268>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	4a1f      	ldr	r2, [pc, #124]	; (8007b5c <HAL_GPIO_Init+0x244>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d031      	beq.n	8007b46 <HAL_GPIO_Init+0x22e>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4a1e      	ldr	r2, [pc, #120]	; (8007b60 <HAL_GPIO_Init+0x248>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d02b      	beq.n	8007b42 <HAL_GPIO_Init+0x22a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a1d      	ldr	r2, [pc, #116]	; (8007b64 <HAL_GPIO_Init+0x24c>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d025      	beq.n	8007b3e <HAL_GPIO_Init+0x226>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a1c      	ldr	r2, [pc, #112]	; (8007b68 <HAL_GPIO_Init+0x250>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d01f      	beq.n	8007b3a <HAL_GPIO_Init+0x222>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a1b      	ldr	r2, [pc, #108]	; (8007b6c <HAL_GPIO_Init+0x254>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d019      	beq.n	8007b36 <HAL_GPIO_Init+0x21e>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a1a      	ldr	r2, [pc, #104]	; (8007b70 <HAL_GPIO_Init+0x258>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d013      	beq.n	8007b32 <HAL_GPIO_Init+0x21a>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a19      	ldr	r2, [pc, #100]	; (8007b74 <HAL_GPIO_Init+0x25c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d00d      	beq.n	8007b2e <HAL_GPIO_Init+0x216>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a18      	ldr	r2, [pc, #96]	; (8007b78 <HAL_GPIO_Init+0x260>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d007      	beq.n	8007b2a <HAL_GPIO_Init+0x212>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a17      	ldr	r2, [pc, #92]	; (8007b7c <HAL_GPIO_Init+0x264>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d101      	bne.n	8007b26 <HAL_GPIO_Init+0x20e>
 8007b22:	2309      	movs	r3, #9
 8007b24:	e02d      	b.n	8007b82 <HAL_GPIO_Init+0x26a>
 8007b26:	230a      	movs	r3, #10
 8007b28:	e02b      	b.n	8007b82 <HAL_GPIO_Init+0x26a>
 8007b2a:	2308      	movs	r3, #8
 8007b2c:	e029      	b.n	8007b82 <HAL_GPIO_Init+0x26a>
 8007b2e:	2307      	movs	r3, #7
 8007b30:	e027      	b.n	8007b82 <HAL_GPIO_Init+0x26a>
 8007b32:	2306      	movs	r3, #6
 8007b34:	e025      	b.n	8007b82 <HAL_GPIO_Init+0x26a>
 8007b36:	2305      	movs	r3, #5
 8007b38:	e023      	b.n	8007b82 <HAL_GPIO_Init+0x26a>
 8007b3a:	2304      	movs	r3, #4
 8007b3c:	e021      	b.n	8007b82 <HAL_GPIO_Init+0x26a>
 8007b3e:	2303      	movs	r3, #3
 8007b40:	e01f      	b.n	8007b82 <HAL_GPIO_Init+0x26a>
 8007b42:	2302      	movs	r3, #2
 8007b44:	e01d      	b.n	8007b82 <HAL_GPIO_Init+0x26a>
 8007b46:	2301      	movs	r3, #1
 8007b48:	e01b      	b.n	8007b82 <HAL_GPIO_Init+0x26a>
 8007b4a:	bf00      	nop
 8007b4c:	58000080 	.word	0x58000080
 8007b50:	58024400 	.word	0x58024400
 8007b54:	58000400 	.word	0x58000400
 8007b58:	58020000 	.word	0x58020000
 8007b5c:	58020400 	.word	0x58020400
 8007b60:	58020800 	.word	0x58020800
 8007b64:	58020c00 	.word	0x58020c00
 8007b68:	58021000 	.word	0x58021000
 8007b6c:	58021400 	.word	0x58021400
 8007b70:	58021800 	.word	0x58021800
 8007b74:	58021c00 	.word	0x58021c00
 8007b78:	58022000 	.word	0x58022000
 8007b7c:	58022400 	.word	0x58022400
 8007b80:	2300      	movs	r3, #0
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	f002 0203 	and.w	r2, r2, #3
 8007b88:	0092      	lsls	r2, r2, #2
 8007b8a:	4093      	lsls	r3, r2
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b92:	4938      	ldr	r1, [pc, #224]	; (8007c74 <HAL_GPIO_Init+0x35c>)
 8007b94:	69fb      	ldr	r3, [r7, #28]
 8007b96:	089b      	lsrs	r3, r3, #2
 8007b98:	3302      	adds	r3, #2
 8007b9a:	69ba      	ldr	r2, [r7, #24]
 8007b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	43db      	mvns	r3, r3
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007bbe:	69ba      	ldr	r2, [r7, #24]
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007bc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	43db      	mvns	r3, r3
 8007bda:	69ba      	ldr	r2, [r7, #24]
 8007bdc:	4013      	ands	r3, r2
 8007bde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d003      	beq.n	8007bf4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007bec:	69ba      	ldr	r2, [r7, #24]
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	43db      	mvns	r3, r3
 8007c06:	69ba      	ldr	r2, [r7, #24]
 8007c08:	4013      	ands	r3, r2
 8007c0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d003      	beq.n	8007c20 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007c18:	69ba      	ldr	r2, [r7, #24]
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	43db      	mvns	r3, r3
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	4013      	ands	r3, r2
 8007c34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007c42:	69ba      	ldr	r2, [r7, #24]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	3301      	adds	r3, #1
 8007c54:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f47f ae63 	bne.w	800792c <HAL_GPIO_Init+0x14>
  }
}
 8007c66:	bf00      	nop
 8007c68:	bf00      	nop
 8007c6a:	3724      	adds	r7, #36	; 0x24
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	58000400 	.word	0x58000400

08007c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	460b      	mov	r3, r1
 8007c82:	807b      	strh	r3, [r7, #2]
 8007c84:	4613      	mov	r3, r2
 8007c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c88:	787b      	ldrb	r3, [r7, #1]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007c8e:	887a      	ldrh	r2, [r7, #2]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007c94:	e003      	b.n	8007c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007c96:	887b      	ldrh	r3, [r7, #2]
 8007c98:	041a      	lsls	r2, r3, #16
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	619a      	str	r2, [r3, #24]
}
 8007c9e:	bf00      	nop
 8007ca0:	370c      	adds	r7, #12
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr

08007caa <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b082      	sub	sp, #8
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007cbc:	88fb      	ldrh	r3, [r7, #6]
 8007cbe:	4013      	ands	r3, r2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d008      	beq.n	8007cd6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007cc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cc8:	88fb      	ldrh	r3, [r7, #6]
 8007cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007cce:	88fb      	ldrh	r3, [r7, #6]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7fa fe71 	bl	80029b8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007cd6:	bf00      	nop
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007ce8:	4b19      	ldr	r3, [pc, #100]	; (8007d50 <HAL_PWREx_ConfigSupply+0x70>)
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f003 0304 	and.w	r3, r3, #4
 8007cf0:	2b04      	cmp	r3, #4
 8007cf2:	d00a      	beq.n	8007d0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007cf4:	4b16      	ldr	r3, [pc, #88]	; (8007d50 <HAL_PWREx_ConfigSupply+0x70>)
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d001      	beq.n	8007d06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e01f      	b.n	8007d46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	e01d      	b.n	8007d46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d0a:	4b11      	ldr	r3, [pc, #68]	; (8007d50 <HAL_PWREx_ConfigSupply+0x70>)
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	f023 0207 	bic.w	r2, r3, #7
 8007d12:	490f      	ldr	r1, [pc, #60]	; (8007d50 <HAL_PWREx_ConfigSupply+0x70>)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d1a:	f7fc fc91 	bl	8004640 <HAL_GetTick>
 8007d1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d20:	e009      	b.n	8007d36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d22:	f7fc fc8d 	bl	8004640 <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d30:	d901      	bls.n	8007d36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007d32:	2301      	movs	r3, #1
 8007d34:	e007      	b.n	8007d46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d36:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <HAL_PWREx_ConfigSupply+0x70>)
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d42:	d1ee      	bne.n	8007d22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	58024800 	.word	0x58024800

08007d54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b08c      	sub	sp, #48	; 0x30
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d102      	bne.n	8007d68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	f000 bc1c 	b.w	80085a0 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 8087 	beq.w	8007e84 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d76:	4b9e      	ldr	r3, [pc, #632]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d80:	4b9b      	ldr	r3, [pc, #620]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d84:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d88:	2b10      	cmp	r3, #16
 8007d8a:	d007      	beq.n	8007d9c <HAL_RCC_OscConfig+0x48>
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	2b18      	cmp	r3, #24
 8007d90:	d110      	bne.n	8007db4 <HAL_RCC_OscConfig+0x60>
 8007d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d94:	f003 0303 	and.w	r3, r3, #3
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d10b      	bne.n	8007db4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d9c:	4b94      	ldr	r3, [pc, #592]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d06c      	beq.n	8007e82 <HAL_RCC_OscConfig+0x12e>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d168      	bne.n	8007e82 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e3f5      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007dbc:	d106      	bne.n	8007dcc <HAL_RCC_OscConfig+0x78>
 8007dbe:	4b8c      	ldr	r3, [pc, #560]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4a8b      	ldr	r2, [pc, #556]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dc8:	6013      	str	r3, [r2, #0]
 8007dca:	e02e      	b.n	8007e2a <HAL_RCC_OscConfig+0xd6>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10c      	bne.n	8007dee <HAL_RCC_OscConfig+0x9a>
 8007dd4:	4b86      	ldr	r3, [pc, #536]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a85      	ldr	r2, [pc, #532]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	4b83      	ldr	r3, [pc, #524]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a82      	ldr	r2, [pc, #520]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	e01d      	b.n	8007e2a <HAL_RCC_OscConfig+0xd6>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007df6:	d10c      	bne.n	8007e12 <HAL_RCC_OscConfig+0xbe>
 8007df8:	4b7d      	ldr	r3, [pc, #500]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a7c      	ldr	r2, [pc, #496]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e02:	6013      	str	r3, [r2, #0]
 8007e04:	4b7a      	ldr	r3, [pc, #488]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a79      	ldr	r2, [pc, #484]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	e00b      	b.n	8007e2a <HAL_RCC_OscConfig+0xd6>
 8007e12:	4b77      	ldr	r3, [pc, #476]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a76      	ldr	r2, [pc, #472]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	4b74      	ldr	r3, [pc, #464]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a73      	ldr	r2, [pc, #460]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e28:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d013      	beq.n	8007e5a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e32:	f7fc fc05 	bl	8004640 <HAL_GetTick>
 8007e36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e38:	e008      	b.n	8007e4c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e3a:	f7fc fc01 	bl	8004640 <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	2b64      	cmp	r3, #100	; 0x64
 8007e46:	d901      	bls.n	8007e4c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e3a9      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007e4c:	4b68      	ldr	r3, [pc, #416]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d0f0      	beq.n	8007e3a <HAL_RCC_OscConfig+0xe6>
 8007e58:	e014      	b.n	8007e84 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e5a:	f7fc fbf1 	bl	8004640 <HAL_GetTick>
 8007e5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e60:	e008      	b.n	8007e74 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007e62:	f7fc fbed 	bl	8004640 <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	2b64      	cmp	r3, #100	; 0x64
 8007e6e:	d901      	bls.n	8007e74 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e395      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007e74:	4b5e      	ldr	r3, [pc, #376]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1f0      	bne.n	8007e62 <HAL_RCC_OscConfig+0x10e>
 8007e80:	e000      	b.n	8007e84 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e82:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f000 80ca 	beq.w	8008026 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e92:	4b57      	ldr	r3, [pc, #348]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e9a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e9c:	4b54      	ldr	r3, [pc, #336]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d007      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x164>
 8007ea8:	6a3b      	ldr	r3, [r7, #32]
 8007eaa:	2b18      	cmp	r3, #24
 8007eac:	d156      	bne.n	8007f5c <HAL_RCC_OscConfig+0x208>
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	f003 0303 	and.w	r3, r3, #3
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d151      	bne.n	8007f5c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007eb8:	4b4d      	ldr	r3, [pc, #308]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d005      	beq.n	8007ed0 <HAL_RCC_OscConfig+0x17c>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e367      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ed0:	4b47      	ldr	r3, [pc, #284]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f023 0219 	bic.w	r2, r3, #25
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	4944      	ldr	r1, [pc, #272]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ee2:	f7fc fbad 	bl	8004640 <HAL_GetTick>
 8007ee6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ee8:	e008      	b.n	8007efc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007eea:	f7fc fba9 	bl	8004640 <HAL_GetTick>
 8007eee:	4602      	mov	r2, r0
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	1ad3      	subs	r3, r2, r3
 8007ef4:	2b02      	cmp	r3, #2
 8007ef6:	d901      	bls.n	8007efc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e351      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007efc:	4b3c      	ldr	r3, [pc, #240]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0304 	and.w	r3, r3, #4
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d0f0      	beq.n	8007eea <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f08:	f7fc fba6 	bl	8004658 <HAL_GetREVID>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d817      	bhi.n	8007f46 <HAL_RCC_OscConfig+0x1f2>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	2b40      	cmp	r3, #64	; 0x40
 8007f1c:	d108      	bne.n	8007f30 <HAL_RCC_OscConfig+0x1dc>
 8007f1e:	4b34      	ldr	r3, [pc, #208]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007f26:	4a32      	ldr	r2, [pc, #200]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f2c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f2e:	e07a      	b.n	8008026 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f30:	4b2f      	ldr	r3, [pc, #188]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	031b      	lsls	r3, r3, #12
 8007f3e:	492c      	ldr	r1, [pc, #176]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007f40:	4313      	orrs	r3, r2
 8007f42:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f44:	e06f      	b.n	8008026 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f46:	4b2a      	ldr	r3, [pc, #168]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	061b      	lsls	r3, r3, #24
 8007f54:	4926      	ldr	r1, [pc, #152]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f5a:	e064      	b.n	8008026 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d047      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f64:	4b22      	ldr	r3, [pc, #136]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f023 0219 	bic.w	r2, r3, #25
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	491f      	ldr	r1, [pc, #124]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f76:	f7fc fb63 	bl	8004640 <HAL_GetTick>
 8007f7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f7c:	e008      	b.n	8007f90 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f7e:	f7fc fb5f 	bl	8004640 <HAL_GetTick>
 8007f82:	4602      	mov	r2, r0
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d901      	bls.n	8007f90 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e307      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f90:	4b17      	ldr	r3, [pc, #92]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0304 	and.w	r3, r3, #4
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d0f0      	beq.n	8007f7e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f9c:	f7fc fb5c 	bl	8004658 <HAL_GetREVID>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	f241 0203 	movw	r2, #4099	; 0x1003
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d817      	bhi.n	8007fda <HAL_RCC_OscConfig+0x286>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	2b40      	cmp	r3, #64	; 0x40
 8007fb0:	d108      	bne.n	8007fc4 <HAL_RCC_OscConfig+0x270>
 8007fb2:	4b0f      	ldr	r3, [pc, #60]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007fba:	4a0d      	ldr	r2, [pc, #52]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fc0:	6053      	str	r3, [r2, #4]
 8007fc2:	e030      	b.n	8008026 <HAL_RCC_OscConfig+0x2d2>
 8007fc4:	4b0a      	ldr	r3, [pc, #40]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	031b      	lsls	r3, r3, #12
 8007fd2:	4907      	ldr	r1, [pc, #28]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	604b      	str	r3, [r1, #4]
 8007fd8:	e025      	b.n	8008026 <HAL_RCC_OscConfig+0x2d2>
 8007fda:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	061b      	lsls	r3, r3, #24
 8007fe8:	4901      	ldr	r1, [pc, #4]	; (8007ff0 <HAL_RCC_OscConfig+0x29c>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	604b      	str	r3, [r1, #4]
 8007fee:	e01a      	b.n	8008026 <HAL_RCC_OscConfig+0x2d2>
 8007ff0:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ff4:	4b9e      	ldr	r3, [pc, #632]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a9d      	ldr	r2, [pc, #628]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 8007ffa:	f023 0301 	bic.w	r3, r3, #1
 8007ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008000:	f7fc fb1e 	bl	8004640 <HAL_GetTick>
 8008004:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008006:	e008      	b.n	800801a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008008:	f7fc fb1a 	bl	8004640 <HAL_GetTick>
 800800c:	4602      	mov	r2, r0
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	2b02      	cmp	r3, #2
 8008014:	d901      	bls.n	800801a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e2c2      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800801a:	4b95      	ldr	r3, [pc, #596]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0304 	and.w	r3, r3, #4
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1f0      	bne.n	8008008 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0310 	and.w	r3, r3, #16
 800802e:	2b00      	cmp	r3, #0
 8008030:	f000 80a9 	beq.w	8008186 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008034:	4b8e      	ldr	r3, [pc, #568]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800803c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800803e:	4b8c      	ldr	r3, [pc, #560]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 8008040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008042:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	2b08      	cmp	r3, #8
 8008048:	d007      	beq.n	800805a <HAL_RCC_OscConfig+0x306>
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	2b18      	cmp	r3, #24
 800804e:	d13a      	bne.n	80080c6 <HAL_RCC_OscConfig+0x372>
 8008050:	697b      	ldr	r3, [r7, #20]
 8008052:	f003 0303 	and.w	r3, r3, #3
 8008056:	2b01      	cmp	r3, #1
 8008058:	d135      	bne.n	80080c6 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800805a:	4b85      	ldr	r3, [pc, #532]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008062:	2b00      	cmp	r3, #0
 8008064:	d005      	beq.n	8008072 <HAL_RCC_OscConfig+0x31e>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	2b80      	cmp	r3, #128	; 0x80
 800806c:	d001      	beq.n	8008072 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e296      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008072:	f7fc faf1 	bl	8004658 <HAL_GetREVID>
 8008076:	4603      	mov	r3, r0
 8008078:	f241 0203 	movw	r2, #4099	; 0x1003
 800807c:	4293      	cmp	r3, r2
 800807e:	d817      	bhi.n	80080b0 <HAL_RCC_OscConfig+0x35c>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	2b20      	cmp	r3, #32
 8008086:	d108      	bne.n	800809a <HAL_RCC_OscConfig+0x346>
 8008088:	4b79      	ldr	r3, [pc, #484]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008090:	4a77      	ldr	r2, [pc, #476]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 8008092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008096:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008098:	e075      	b.n	8008186 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800809a:	4b75      	ldr	r3, [pc, #468]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	069b      	lsls	r3, r3, #26
 80080a8:	4971      	ldr	r1, [pc, #452]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080ae:	e06a      	b.n	8008186 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080b0:	4b6f      	ldr	r3, [pc, #444]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	061b      	lsls	r3, r3, #24
 80080be:	496c      	ldr	r1, [pc, #432]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080c4:	e05f      	b.n	8008186 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	69db      	ldr	r3, [r3, #28]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d042      	beq.n	8008154 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80080ce:	4b68      	ldr	r3, [pc, #416]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a67      	ldr	r2, [pc, #412]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 80080d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080da:	f7fc fab1 	bl	8004640 <HAL_GetTick>
 80080de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080e0:	e008      	b.n	80080f4 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80080e2:	f7fc faad 	bl	8004640 <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d901      	bls.n	80080f4 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e255      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80080f4:	4b5e      	ldr	r3, [pc, #376]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d0f0      	beq.n	80080e2 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008100:	f7fc faaa 	bl	8004658 <HAL_GetREVID>
 8008104:	4603      	mov	r3, r0
 8008106:	f241 0203 	movw	r2, #4099	; 0x1003
 800810a:	4293      	cmp	r3, r2
 800810c:	d817      	bhi.n	800813e <HAL_RCC_OscConfig+0x3ea>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	2b20      	cmp	r3, #32
 8008114:	d108      	bne.n	8008128 <HAL_RCC_OscConfig+0x3d4>
 8008116:	4b56      	ldr	r3, [pc, #344]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800811e:	4a54      	ldr	r2, [pc, #336]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 8008120:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008124:	6053      	str	r3, [r2, #4]
 8008126:	e02e      	b.n	8008186 <HAL_RCC_OscConfig+0x432>
 8008128:	4b51      	ldr	r3, [pc, #324]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a1b      	ldr	r3, [r3, #32]
 8008134:	069b      	lsls	r3, r3, #26
 8008136:	494e      	ldr	r1, [pc, #312]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 8008138:	4313      	orrs	r3, r2
 800813a:	604b      	str	r3, [r1, #4]
 800813c:	e023      	b.n	8008186 <HAL_RCC_OscConfig+0x432>
 800813e:	4b4c      	ldr	r3, [pc, #304]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	061b      	lsls	r3, r3, #24
 800814c:	4948      	ldr	r1, [pc, #288]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 800814e:	4313      	orrs	r3, r2
 8008150:	60cb      	str	r3, [r1, #12]
 8008152:	e018      	b.n	8008186 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008154:	4b46      	ldr	r3, [pc, #280]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a45      	ldr	r2, [pc, #276]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 800815a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800815e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008160:	f7fc fa6e 	bl	8004640 <HAL_GetTick>
 8008164:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008166:	e008      	b.n	800817a <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008168:	f7fc fa6a 	bl	8004640 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b02      	cmp	r3, #2
 8008174:	d901      	bls.n	800817a <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e212      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800817a:	4b3d      	ldr	r3, [pc, #244]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1f0      	bne.n	8008168 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d036      	beq.n	8008200 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d019      	beq.n	80081ce <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800819a:	4b35      	ldr	r3, [pc, #212]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 800819c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800819e:	4a34      	ldr	r2, [pc, #208]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 80081a0:	f043 0301 	orr.w	r3, r3, #1
 80081a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081a6:	f7fc fa4b 	bl	8004640 <HAL_GetTick>
 80081aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081ac:	e008      	b.n	80081c0 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081ae:	f7fc fa47 	bl	8004640 <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d901      	bls.n	80081c0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80081bc:	2303      	movs	r3, #3
 80081be:	e1ef      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80081c0:	4b2b      	ldr	r3, [pc, #172]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 80081c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d0f0      	beq.n	80081ae <HAL_RCC_OscConfig+0x45a>
 80081cc:	e018      	b.n	8008200 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081ce:	4b28      	ldr	r3, [pc, #160]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 80081d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081d2:	4a27      	ldr	r2, [pc, #156]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 80081d4:	f023 0301 	bic.w	r3, r3, #1
 80081d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081da:	f7fc fa31 	bl	8004640 <HAL_GetTick>
 80081de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80081e0:	e008      	b.n	80081f4 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081e2:	f7fc fa2d 	bl	8004640 <HAL_GetTick>
 80081e6:	4602      	mov	r2, r0
 80081e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ea:	1ad3      	subs	r3, r2, r3
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	d901      	bls.n	80081f4 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e1d5      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80081f4:	4b1e      	ldr	r3, [pc, #120]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 80081f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081f8:	f003 0302 	and.w	r3, r3, #2
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d1f0      	bne.n	80081e2 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0320 	and.w	r3, r3, #32
 8008208:	2b00      	cmp	r3, #0
 800820a:	d039      	beq.n	8008280 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	699b      	ldr	r3, [r3, #24]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d019      	beq.n	8008248 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008214:	4b16      	ldr	r3, [pc, #88]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a15      	ldr	r2, [pc, #84]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 800821a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800821e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008220:	f7fc fa0e 	bl	8004640 <HAL_GetTick>
 8008224:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008226:	e008      	b.n	800823a <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008228:	f7fc fa0a 	bl	8004640 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b02      	cmp	r3, #2
 8008234:	d901      	bls.n	800823a <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e1b2      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800823a:	4b0d      	ldr	r3, [pc, #52]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0f0      	beq.n	8008228 <HAL_RCC_OscConfig+0x4d4>
 8008246:	e01b      	b.n	8008280 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008248:	4b09      	ldr	r3, [pc, #36]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a08      	ldr	r2, [pc, #32]	; (8008270 <HAL_RCC_OscConfig+0x51c>)
 800824e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008252:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008254:	f7fc f9f4 	bl	8004640 <HAL_GetTick>
 8008258:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800825a:	e00b      	b.n	8008274 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800825c:	f7fc f9f0 	bl	8004640 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b02      	cmp	r3, #2
 8008268:	d904      	bls.n	8008274 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e198      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
 800826e:	bf00      	nop
 8008270:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008274:	4ba3      	ldr	r3, [pc, #652]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1ed      	bne.n	800825c <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	f000 8081 	beq.w	8008390 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800828e:	4b9e      	ldr	r3, [pc, #632]	; (8008508 <HAL_RCC_OscConfig+0x7b4>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a9d      	ldr	r2, [pc, #628]	; (8008508 <HAL_RCC_OscConfig+0x7b4>)
 8008294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008298:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800829a:	f7fc f9d1 	bl	8004640 <HAL_GetTick>
 800829e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082a0:	e008      	b.n	80082b4 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80082a2:	f7fc f9cd 	bl	8004640 <HAL_GetTick>
 80082a6:	4602      	mov	r2, r0
 80082a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	2b64      	cmp	r3, #100	; 0x64
 80082ae:	d901      	bls.n	80082b4 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e175      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80082b4:	4b94      	ldr	r3, [pc, #592]	; (8008508 <HAL_RCC_OscConfig+0x7b4>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d0f0      	beq.n	80082a2 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d106      	bne.n	80082d6 <HAL_RCC_OscConfig+0x582>
 80082c8:	4b8e      	ldr	r3, [pc, #568]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80082ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082cc:	4a8d      	ldr	r2, [pc, #564]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80082ce:	f043 0301 	orr.w	r3, r3, #1
 80082d2:	6713      	str	r3, [r2, #112]	; 0x70
 80082d4:	e02d      	b.n	8008332 <HAL_RCC_OscConfig+0x5de>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10c      	bne.n	80082f8 <HAL_RCC_OscConfig+0x5a4>
 80082de:	4b89      	ldr	r3, [pc, #548]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80082e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e2:	4a88      	ldr	r2, [pc, #544]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80082e4:	f023 0301 	bic.w	r3, r3, #1
 80082e8:	6713      	str	r3, [r2, #112]	; 0x70
 80082ea:	4b86      	ldr	r3, [pc, #536]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80082ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ee:	4a85      	ldr	r2, [pc, #532]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80082f0:	f023 0304 	bic.w	r3, r3, #4
 80082f4:	6713      	str	r3, [r2, #112]	; 0x70
 80082f6:	e01c      	b.n	8008332 <HAL_RCC_OscConfig+0x5de>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	689b      	ldr	r3, [r3, #8]
 80082fc:	2b05      	cmp	r3, #5
 80082fe:	d10c      	bne.n	800831a <HAL_RCC_OscConfig+0x5c6>
 8008300:	4b80      	ldr	r3, [pc, #512]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008304:	4a7f      	ldr	r2, [pc, #508]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008306:	f043 0304 	orr.w	r3, r3, #4
 800830a:	6713      	str	r3, [r2, #112]	; 0x70
 800830c:	4b7d      	ldr	r3, [pc, #500]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 800830e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008310:	4a7c      	ldr	r2, [pc, #496]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008312:	f043 0301 	orr.w	r3, r3, #1
 8008316:	6713      	str	r3, [r2, #112]	; 0x70
 8008318:	e00b      	b.n	8008332 <HAL_RCC_OscConfig+0x5de>
 800831a:	4b7a      	ldr	r3, [pc, #488]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 800831c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800831e:	4a79      	ldr	r2, [pc, #484]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008320:	f023 0301 	bic.w	r3, r3, #1
 8008324:	6713      	str	r3, [r2, #112]	; 0x70
 8008326:	4b77      	ldr	r3, [pc, #476]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832a:	4a76      	ldr	r2, [pc, #472]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 800832c:	f023 0304 	bic.w	r3, r3, #4
 8008330:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d015      	beq.n	8008366 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800833a:	f7fc f981 	bl	8004640 <HAL_GetTick>
 800833e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008340:	e00a      	b.n	8008358 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008342:	f7fc f97d 	bl	8004640 <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008350:	4293      	cmp	r3, r2
 8008352:	d901      	bls.n	8008358 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e123      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008358:	4b6a      	ldr	r3, [pc, #424]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 800835a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835c:	f003 0302 	and.w	r3, r3, #2
 8008360:	2b00      	cmp	r3, #0
 8008362:	d0ee      	beq.n	8008342 <HAL_RCC_OscConfig+0x5ee>
 8008364:	e014      	b.n	8008390 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008366:	f7fc f96b 	bl	8004640 <HAL_GetTick>
 800836a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800836c:	e00a      	b.n	8008384 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800836e:	f7fc f967 	bl	8004640 <HAL_GetTick>
 8008372:	4602      	mov	r2, r0
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	f241 3288 	movw	r2, #5000	; 0x1388
 800837c:	4293      	cmp	r3, r2
 800837e:	d901      	bls.n	8008384 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8008380:	2303      	movs	r3, #3
 8008382:	e10d      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008384:	4b5f      	ldr	r3, [pc, #380]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008388:	f003 0302 	and.w	r3, r3, #2
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1ee      	bne.n	800836e <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 8102 	beq.w	800859e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800839a:	4b5a      	ldr	r3, [pc, #360]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80083a2:	2b18      	cmp	r3, #24
 80083a4:	f000 80bd 	beq.w	8008522 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	f040 8095 	bne.w	80084dc <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083b2:	4b54      	ldr	r3, [pc, #336]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a53      	ldr	r2, [pc, #332]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80083b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083be:	f7fc f93f 	bl	8004640 <HAL_GetTick>
 80083c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083c4:	e008      	b.n	80083d8 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083c6:	f7fc f93b 	bl	8004640 <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d901      	bls.n	80083d8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e0e3      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80083d8:	4b4a      	ldr	r3, [pc, #296]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1f0      	bne.n	80083c6 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80083e4:	4b47      	ldr	r3, [pc, #284]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80083e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083e8:	4b48      	ldr	r3, [pc, #288]	; (800850c <HAL_RCC_OscConfig+0x7b8>)
 80083ea:	4013      	ands	r3, r2
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80083f4:	0112      	lsls	r2, r2, #4
 80083f6:	430a      	orrs	r2, r1
 80083f8:	4942      	ldr	r1, [pc, #264]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	628b      	str	r3, [r1, #40]	; 0x28
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008402:	3b01      	subs	r3, #1
 8008404:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840c:	3b01      	subs	r3, #1
 800840e:	025b      	lsls	r3, r3, #9
 8008410:	b29b      	uxth	r3, r3
 8008412:	431a      	orrs	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	3b01      	subs	r3, #1
 800841a:	041b      	lsls	r3, r3, #16
 800841c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008420:	431a      	orrs	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008426:	3b01      	subs	r3, #1
 8008428:	061b      	lsls	r3, r3, #24
 800842a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800842e:	4935      	ldr	r1, [pc, #212]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008430:	4313      	orrs	r3, r2
 8008432:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8008434:	4b33      	ldr	r3, [pc, #204]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008438:	4a32      	ldr	r2, [pc, #200]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 800843a:	f023 0301 	bic.w	r3, r3, #1
 800843e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008440:	4b30      	ldr	r3, [pc, #192]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008444:	4b32      	ldr	r3, [pc, #200]	; (8008510 <HAL_RCC_OscConfig+0x7bc>)
 8008446:	4013      	ands	r3, r2
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800844c:	00d2      	lsls	r2, r2, #3
 800844e:	492d      	ldr	r1, [pc, #180]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008450:	4313      	orrs	r3, r2
 8008452:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008454:	4b2b      	ldr	r3, [pc, #172]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008458:	f023 020c 	bic.w	r2, r3, #12
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008460:	4928      	ldr	r1, [pc, #160]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008462:	4313      	orrs	r3, r2
 8008464:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008466:	4b27      	ldr	r3, [pc, #156]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846a:	f023 0202 	bic.w	r2, r3, #2
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008472:	4924      	ldr	r1, [pc, #144]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008474:	4313      	orrs	r3, r2
 8008476:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008478:	4b22      	ldr	r3, [pc, #136]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 800847a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800847c:	4a21      	ldr	r2, [pc, #132]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 800847e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008482:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008484:	4b1f      	ldr	r3, [pc, #124]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008488:	4a1e      	ldr	r2, [pc, #120]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 800848a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800848e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008490:	4b1c      	ldr	r3, [pc, #112]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008494:	4a1b      	ldr	r2, [pc, #108]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 8008496:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800849a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800849c:	4b19      	ldr	r3, [pc, #100]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 800849e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a0:	4a18      	ldr	r2, [pc, #96]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80084a2:	f043 0301 	orr.w	r3, r3, #1
 80084a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084a8:	4b16      	ldr	r3, [pc, #88]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a15      	ldr	r2, [pc, #84]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80084ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b4:	f7fc f8c4 	bl	8004640 <HAL_GetTick>
 80084b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084ba:	e008      	b.n	80084ce <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084bc:	f7fc f8c0 	bl	8004640 <HAL_GetTick>
 80084c0:	4602      	mov	r2, r0
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	1ad3      	subs	r3, r2, r3
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d901      	bls.n	80084ce <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e068      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084ce:	4b0d      	ldr	r3, [pc, #52]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d0f0      	beq.n	80084bc <HAL_RCC_OscConfig+0x768>
 80084da:	e060      	b.n	800859e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084dc:	4b09      	ldr	r3, [pc, #36]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a08      	ldr	r2, [pc, #32]	; (8008504 <HAL_RCC_OscConfig+0x7b0>)
 80084e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e8:	f7fc f8aa 	bl	8004640 <HAL_GetTick>
 80084ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80084ee:	e011      	b.n	8008514 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084f0:	f7fc f8a6 	bl	8004640 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d90a      	bls.n	8008514 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e04e      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
 8008502:	bf00      	nop
 8008504:	58024400 	.word	0x58024400
 8008508:	58024800 	.word	0x58024800
 800850c:	fffffc0c 	.word	0xfffffc0c
 8008510:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008514:	4b24      	ldr	r3, [pc, #144]	; (80085a8 <HAL_RCC_OscConfig+0x854>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d1e7      	bne.n	80084f0 <HAL_RCC_OscConfig+0x79c>
 8008520:	e03d      	b.n	800859e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008522:	4b21      	ldr	r3, [pc, #132]	; (80085a8 <HAL_RCC_OscConfig+0x854>)
 8008524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008526:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008528:	4b1f      	ldr	r3, [pc, #124]	; (80085a8 <HAL_RCC_OscConfig+0x854>)
 800852a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008532:	2b01      	cmp	r3, #1
 8008534:	d031      	beq.n	800859a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	f003 0203 	and.w	r2, r3, #3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008540:	429a      	cmp	r2, r3
 8008542:	d12a      	bne.n	800859a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	091b      	lsrs	r3, r3, #4
 8008548:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008550:	429a      	cmp	r2, r3
 8008552:	d122      	bne.n	800859a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855e:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008560:	429a      	cmp	r2, r3
 8008562:	d11a      	bne.n	800859a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	0a5b      	lsrs	r3, r3, #9
 8008568:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008570:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008572:	429a      	cmp	r2, r3
 8008574:	d111      	bne.n	800859a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	0c1b      	lsrs	r3, r3, #16
 800857a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008582:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008584:	429a      	cmp	r2, r3
 8008586:	d108      	bne.n	800859a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	0e1b      	lsrs	r3, r3, #24
 800858c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008594:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008596:	429a      	cmp	r2, r3
 8008598:	d001      	beq.n	800859e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e000      	b.n	80085a0 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3730      	adds	r7, #48	; 0x30
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	58024400 	.word	0x58024400

080085ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e19c      	b.n	80088fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80085c0:	4b8a      	ldr	r3, [pc, #552]	; (80087ec <HAL_RCC_ClockConfig+0x240>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f003 030f 	and.w	r3, r3, #15
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d910      	bls.n	80085f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ce:	4b87      	ldr	r3, [pc, #540]	; (80087ec <HAL_RCC_ClockConfig+0x240>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f023 020f 	bic.w	r2, r3, #15
 80085d6:	4985      	ldr	r1, [pc, #532]	; (80087ec <HAL_RCC_ClockConfig+0x240>)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	4313      	orrs	r3, r2
 80085dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085de:	4b83      	ldr	r3, [pc, #524]	; (80087ec <HAL_RCC_ClockConfig+0x240>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 030f 	and.w	r3, r3, #15
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d001      	beq.n	80085f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e184      	b.n	80088fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0304 	and.w	r3, r3, #4
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d010      	beq.n	800861e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	691a      	ldr	r2, [r3, #16]
 8008600:	4b7b      	ldr	r3, [pc, #492]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008608:	429a      	cmp	r2, r3
 800860a:	d908      	bls.n	800861e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800860c:	4b78      	ldr	r3, [pc, #480]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	4975      	ldr	r1, [pc, #468]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 800861a:	4313      	orrs	r3, r2
 800861c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0308 	and.w	r3, r3, #8
 8008626:	2b00      	cmp	r3, #0
 8008628:	d010      	beq.n	800864c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	695a      	ldr	r2, [r3, #20]
 800862e:	4b70      	ldr	r3, [pc, #448]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008636:	429a      	cmp	r2, r3
 8008638:	d908      	bls.n	800864c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800863a:	4b6d      	ldr	r3, [pc, #436]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	496a      	ldr	r1, [pc, #424]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 8008648:	4313      	orrs	r3, r2
 800864a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0310 	and.w	r3, r3, #16
 8008654:	2b00      	cmp	r3, #0
 8008656:	d010      	beq.n	800867a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	699a      	ldr	r2, [r3, #24]
 800865c:	4b64      	ldr	r3, [pc, #400]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008664:	429a      	cmp	r2, r3
 8008666:	d908      	bls.n	800867a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008668:	4b61      	ldr	r3, [pc, #388]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	495e      	ldr	r1, [pc, #376]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 8008676:	4313      	orrs	r3, r2
 8008678:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0320 	and.w	r3, r3, #32
 8008682:	2b00      	cmp	r3, #0
 8008684:	d010      	beq.n	80086a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	69da      	ldr	r2, [r3, #28]
 800868a:	4b59      	ldr	r3, [pc, #356]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008692:	429a      	cmp	r2, r3
 8008694:	d908      	bls.n	80086a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008696:	4b56      	ldr	r3, [pc, #344]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	4953      	ldr	r1, [pc, #332]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 80086a4:	4313      	orrs	r3, r2
 80086a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d010      	beq.n	80086d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	4b4d      	ldr	r3, [pc, #308]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	f003 030f 	and.w	r3, r3, #15
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d908      	bls.n	80086d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80086c4:	4b4a      	ldr	r3, [pc, #296]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 80086c6:	699b      	ldr	r3, [r3, #24]
 80086c8:	f023 020f 	bic.w	r2, r3, #15
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	4947      	ldr	r1, [pc, #284]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0301 	and.w	r3, r3, #1
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d055      	beq.n	800878e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80086e2:	4b43      	ldr	r3, [pc, #268]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	4940      	ldr	r1, [pc, #256]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d107      	bne.n	800870c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80086fc:	4b3c      	ldr	r3, [pc, #240]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d121      	bne.n	800874c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008708:	2301      	movs	r3, #1
 800870a:	e0f6      	b.n	80088fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	2b03      	cmp	r3, #3
 8008712:	d107      	bne.n	8008724 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008714:	4b36      	ldr	r3, [pc, #216]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d115      	bne.n	800874c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e0ea      	b.n	80088fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d107      	bne.n	800873c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800872c:	4b30      	ldr	r3, [pc, #192]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008734:	2b00      	cmp	r3, #0
 8008736:	d109      	bne.n	800874c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	e0de      	b.n	80088fa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800873c:	4b2c      	ldr	r3, [pc, #176]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0304 	and.w	r3, r3, #4
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008748:	2301      	movs	r3, #1
 800874a:	e0d6      	b.n	80088fa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800874c:	4b28      	ldr	r3, [pc, #160]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	f023 0207 	bic.w	r2, r3, #7
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	4925      	ldr	r1, [pc, #148]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 800875a:	4313      	orrs	r3, r2
 800875c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800875e:	f7fb ff6f 	bl	8004640 <HAL_GetTick>
 8008762:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008764:	e00a      	b.n	800877c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008766:	f7fb ff6b 	bl	8004640 <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	f241 3288 	movw	r2, #5000	; 0x1388
 8008774:	4293      	cmp	r3, r2
 8008776:	d901      	bls.n	800877c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	e0be      	b.n	80088fa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800877c:	4b1c      	ldr	r3, [pc, #112]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 800877e:	691b      	ldr	r3, [r3, #16]
 8008780:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	00db      	lsls	r3, r3, #3
 800878a:	429a      	cmp	r2, r3
 800878c:	d1eb      	bne.n	8008766 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d010      	beq.n	80087bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68da      	ldr	r2, [r3, #12]
 800879e:	4b14      	ldr	r3, [pc, #80]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	f003 030f 	and.w	r3, r3, #15
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d208      	bcs.n	80087bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087aa:	4b11      	ldr	r3, [pc, #68]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 80087ac:	699b      	ldr	r3, [r3, #24]
 80087ae:	f023 020f 	bic.w	r2, r3, #15
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	490e      	ldr	r1, [pc, #56]	; (80087f0 <HAL_RCC_ClockConfig+0x244>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80087bc:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <HAL_RCC_ClockConfig+0x240>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 030f 	and.w	r3, r3, #15
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d214      	bcs.n	80087f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ca:	4b08      	ldr	r3, [pc, #32]	; (80087ec <HAL_RCC_ClockConfig+0x240>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f023 020f 	bic.w	r2, r3, #15
 80087d2:	4906      	ldr	r1, [pc, #24]	; (80087ec <HAL_RCC_ClockConfig+0x240>)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087da:	4b04      	ldr	r3, [pc, #16]	; (80087ec <HAL_RCC_ClockConfig+0x240>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 030f 	and.w	r3, r3, #15
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d005      	beq.n	80087f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e086      	b.n	80088fa <HAL_RCC_ClockConfig+0x34e>
 80087ec:	52002000 	.word	0x52002000
 80087f0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0304 	and.w	r3, r3, #4
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d010      	beq.n	8008822 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	691a      	ldr	r2, [r3, #16]
 8008804:	4b3f      	ldr	r3, [pc, #252]	; (8008904 <HAL_RCC_ClockConfig+0x358>)
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800880c:	429a      	cmp	r2, r3
 800880e:	d208      	bcs.n	8008822 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008810:	4b3c      	ldr	r3, [pc, #240]	; (8008904 <HAL_RCC_ClockConfig+0x358>)
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	4939      	ldr	r1, [pc, #228]	; (8008904 <HAL_RCC_ClockConfig+0x358>)
 800881e:	4313      	orrs	r3, r2
 8008820:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0308 	and.w	r3, r3, #8
 800882a:	2b00      	cmp	r3, #0
 800882c:	d010      	beq.n	8008850 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	695a      	ldr	r2, [r3, #20]
 8008832:	4b34      	ldr	r3, [pc, #208]	; (8008904 <HAL_RCC_ClockConfig+0x358>)
 8008834:	69db      	ldr	r3, [r3, #28]
 8008836:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800883a:	429a      	cmp	r2, r3
 800883c:	d208      	bcs.n	8008850 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800883e:	4b31      	ldr	r3, [pc, #196]	; (8008904 <HAL_RCC_ClockConfig+0x358>)
 8008840:	69db      	ldr	r3, [r3, #28]
 8008842:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	695b      	ldr	r3, [r3, #20]
 800884a:	492e      	ldr	r1, [pc, #184]	; (8008904 <HAL_RCC_ClockConfig+0x358>)
 800884c:	4313      	orrs	r3, r2
 800884e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0310 	and.w	r3, r3, #16
 8008858:	2b00      	cmp	r3, #0
 800885a:	d010      	beq.n	800887e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	699a      	ldr	r2, [r3, #24]
 8008860:	4b28      	ldr	r3, [pc, #160]	; (8008904 <HAL_RCC_ClockConfig+0x358>)
 8008862:	69db      	ldr	r3, [r3, #28]
 8008864:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008868:	429a      	cmp	r2, r3
 800886a:	d208      	bcs.n	800887e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800886c:	4b25      	ldr	r3, [pc, #148]	; (8008904 <HAL_RCC_ClockConfig+0x358>)
 800886e:	69db      	ldr	r3, [r3, #28]
 8008870:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	4922      	ldr	r1, [pc, #136]	; (8008904 <HAL_RCC_ClockConfig+0x358>)
 800887a:	4313      	orrs	r3, r2
 800887c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 0320 	and.w	r3, r3, #32
 8008886:	2b00      	cmp	r3, #0
 8008888:	d010      	beq.n	80088ac <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	69da      	ldr	r2, [r3, #28]
 800888e:	4b1d      	ldr	r3, [pc, #116]	; (8008904 <HAL_RCC_ClockConfig+0x358>)
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008896:	429a      	cmp	r2, r3
 8008898:	d208      	bcs.n	80088ac <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800889a:	4b1a      	ldr	r3, [pc, #104]	; (8008904 <HAL_RCC_ClockConfig+0x358>)
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	4917      	ldr	r1, [pc, #92]	; (8008904 <HAL_RCC_ClockConfig+0x358>)
 80088a8:	4313      	orrs	r3, r2
 80088aa:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80088ac:	f000 f834 	bl	8008918 <HAL_RCC_GetSysClockFreq>
 80088b0:	4602      	mov	r2, r0
 80088b2:	4b14      	ldr	r3, [pc, #80]	; (8008904 <HAL_RCC_ClockConfig+0x358>)
 80088b4:	699b      	ldr	r3, [r3, #24]
 80088b6:	0a1b      	lsrs	r3, r3, #8
 80088b8:	f003 030f 	and.w	r3, r3, #15
 80088bc:	4912      	ldr	r1, [pc, #72]	; (8008908 <HAL_RCC_ClockConfig+0x35c>)
 80088be:	5ccb      	ldrb	r3, [r1, r3]
 80088c0:	f003 031f 	and.w	r3, r3, #31
 80088c4:	fa22 f303 	lsr.w	r3, r2, r3
 80088c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80088ca:	4b0e      	ldr	r3, [pc, #56]	; (8008904 <HAL_RCC_ClockConfig+0x358>)
 80088cc:	699b      	ldr	r3, [r3, #24]
 80088ce:	f003 030f 	and.w	r3, r3, #15
 80088d2:	4a0d      	ldr	r2, [pc, #52]	; (8008908 <HAL_RCC_ClockConfig+0x35c>)
 80088d4:	5cd3      	ldrb	r3, [r2, r3]
 80088d6:	f003 031f 	and.w	r3, r3, #31
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	fa22 f303 	lsr.w	r3, r2, r3
 80088e0:	4a0a      	ldr	r2, [pc, #40]	; (800890c <HAL_RCC_ClockConfig+0x360>)
 80088e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80088e4:	4a0a      	ldr	r2, [pc, #40]	; (8008910 <HAL_RCC_ClockConfig+0x364>)
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80088ea:	4b0a      	ldr	r3, [pc, #40]	; (8008914 <HAL_RCC_ClockConfig+0x368>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fb fe5c 	bl	80045ac <HAL_InitTick>
 80088f4:	4603      	mov	r3, r0
 80088f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80088f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	58024400 	.word	0x58024400
 8008908:	08010f18 	.word	0x08010f18
 800890c:	2400001c 	.word	0x2400001c
 8008910:	24000018 	.word	0x24000018
 8008914:	24000020 	.word	0x24000020

08008918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008918:	b480      	push	{r7}
 800891a:	b089      	sub	sp, #36	; 0x24
 800891c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800891e:	4bb3      	ldr	r3, [pc, #716]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008926:	2b18      	cmp	r3, #24
 8008928:	f200 8155 	bhi.w	8008bd6 <HAL_RCC_GetSysClockFreq+0x2be>
 800892c:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <HAL_RCC_GetSysClockFreq+0x1c>)
 800892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008932:	bf00      	nop
 8008934:	08008999 	.word	0x08008999
 8008938:	08008bd7 	.word	0x08008bd7
 800893c:	08008bd7 	.word	0x08008bd7
 8008940:	08008bd7 	.word	0x08008bd7
 8008944:	08008bd7 	.word	0x08008bd7
 8008948:	08008bd7 	.word	0x08008bd7
 800894c:	08008bd7 	.word	0x08008bd7
 8008950:	08008bd7 	.word	0x08008bd7
 8008954:	080089bf 	.word	0x080089bf
 8008958:	08008bd7 	.word	0x08008bd7
 800895c:	08008bd7 	.word	0x08008bd7
 8008960:	08008bd7 	.word	0x08008bd7
 8008964:	08008bd7 	.word	0x08008bd7
 8008968:	08008bd7 	.word	0x08008bd7
 800896c:	08008bd7 	.word	0x08008bd7
 8008970:	08008bd7 	.word	0x08008bd7
 8008974:	080089c5 	.word	0x080089c5
 8008978:	08008bd7 	.word	0x08008bd7
 800897c:	08008bd7 	.word	0x08008bd7
 8008980:	08008bd7 	.word	0x08008bd7
 8008984:	08008bd7 	.word	0x08008bd7
 8008988:	08008bd7 	.word	0x08008bd7
 800898c:	08008bd7 	.word	0x08008bd7
 8008990:	08008bd7 	.word	0x08008bd7
 8008994:	080089cb 	.word	0x080089cb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008998:	4b94      	ldr	r3, [pc, #592]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0320 	and.w	r3, r3, #32
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d009      	beq.n	80089b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80089a4:	4b91      	ldr	r3, [pc, #580]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	08db      	lsrs	r3, r3, #3
 80089aa:	f003 0303 	and.w	r3, r3, #3
 80089ae:	4a90      	ldr	r2, [pc, #576]	; (8008bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089b0:	fa22 f303 	lsr.w	r3, r2, r3
 80089b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80089b6:	e111      	b.n	8008bdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80089b8:	4b8d      	ldr	r3, [pc, #564]	; (8008bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80089ba:	61bb      	str	r3, [r7, #24]
    break;
 80089bc:	e10e      	b.n	8008bdc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80089be:	4b8d      	ldr	r3, [pc, #564]	; (8008bf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089c0:	61bb      	str	r3, [r7, #24]
    break;
 80089c2:	e10b      	b.n	8008bdc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80089c4:	4b8c      	ldr	r3, [pc, #560]	; (8008bf8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80089c6:	61bb      	str	r3, [r7, #24]
    break;
 80089c8:	e108      	b.n	8008bdc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089ca:	4b88      	ldr	r3, [pc, #544]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ce:	f003 0303 	and.w	r3, r3, #3
 80089d2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80089d4:	4b85      	ldr	r3, [pc, #532]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d8:	091b      	lsrs	r3, r3, #4
 80089da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089de:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80089e0:	4b82      	ldr	r3, [pc, #520]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e4:	f003 0301 	and.w	r3, r3, #1
 80089e8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80089ea:	4b80      	ldr	r3, [pc, #512]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80089ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ee:	08db      	lsrs	r3, r3, #3
 80089f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	fb02 f303 	mul.w	r3, r2, r3
 80089fa:	ee07 3a90 	vmov	s15, r3
 80089fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a02:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	f000 80e1 	beq.w	8008bd0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	f000 8083 	beq.w	8008b1c <HAL_RCC_GetSysClockFreq+0x204>
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	f200 80a1 	bhi.w	8008b60 <HAL_RCC_GetSysClockFreq+0x248>
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d003      	beq.n	8008a2c <HAL_RCC_GetSysClockFreq+0x114>
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d056      	beq.n	8008ad8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a2a:	e099      	b.n	8008b60 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a2c:	4b6f      	ldr	r3, [pc, #444]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0320 	and.w	r3, r3, #32
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d02d      	beq.n	8008a94 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a38:	4b6c      	ldr	r3, [pc, #432]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	08db      	lsrs	r3, r3, #3
 8008a3e:	f003 0303 	and.w	r3, r3, #3
 8008a42:	4a6b      	ldr	r2, [pc, #428]	; (8008bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a44:	fa22 f303 	lsr.w	r3, r2, r3
 8008a48:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	ee07 3a90 	vmov	s15, r3
 8008a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	ee07 3a90 	vmov	s15, r3
 8008a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a62:	4b62      	ldr	r3, [pc, #392]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a6a:	ee07 3a90 	vmov	s15, r3
 8008a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8008a76:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008a92:	e087      	b.n	8008ba4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	ee07 3a90 	vmov	s15, r3
 8008a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008c00 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aa6:	4b51      	ldr	r3, [pc, #324]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aae:	ee07 3a90 	vmov	s15, r3
 8008ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008aba:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ad6:	e065      	b.n	8008ba4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	ee07 3a90 	vmov	s15, r3
 8008ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008c04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aea:	4b40      	ldr	r3, [pc, #256]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008af2:	ee07 3a90 	vmov	s15, r3
 8008af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8008afe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b1a:	e043      	b.n	8008ba4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	ee07 3a90 	vmov	s15, r3
 8008b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b26:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008c08 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b2e:	4b2f      	ldr	r3, [pc, #188]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b36:	ee07 3a90 	vmov	s15, r3
 8008b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b42:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b5e:	e021      	b.n	8008ba4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008c04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b72:	4b1e      	ldr	r3, [pc, #120]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b7a:	ee07 3a90 	vmov	s15, r3
 8008b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b86:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ba2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008ba4:	4b11      	ldr	r3, [pc, #68]	; (8008bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba8:	0a5b      	lsrs	r3, r3, #9
 8008baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bae:	3301      	adds	r3, #1
 8008bb0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	ee07 3a90 	vmov	s15, r3
 8008bb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bc8:	ee17 3a90 	vmov	r3, s15
 8008bcc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008bce:	e005      	b.n	8008bdc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	61bb      	str	r3, [r7, #24]
    break;
 8008bd4:	e002      	b.n	8008bdc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008bd6:	4b07      	ldr	r3, [pc, #28]	; (8008bf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008bd8:	61bb      	str	r3, [r7, #24]
    break;
 8008bda:	bf00      	nop
  }

  return sysclockfreq;
 8008bdc:	69bb      	ldr	r3, [r7, #24]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3724      	adds	r7, #36	; 0x24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr
 8008bea:	bf00      	nop
 8008bec:	58024400 	.word	0x58024400
 8008bf0:	03d09000 	.word	0x03d09000
 8008bf4:	003d0900 	.word	0x003d0900
 8008bf8:	02dc6c00 	.word	0x02dc6c00
 8008bfc:	46000000 	.word	0x46000000
 8008c00:	4c742400 	.word	0x4c742400
 8008c04:	4a742400 	.word	0x4a742400
 8008c08:	4c371b00 	.word	0x4c371b00

08008c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c12:	f7ff fe81 	bl	8008918 <HAL_RCC_GetSysClockFreq>
 8008c16:	4602      	mov	r2, r0
 8008c18:	4b10      	ldr	r3, [pc, #64]	; (8008c5c <HAL_RCC_GetHCLKFreq+0x50>)
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	0a1b      	lsrs	r3, r3, #8
 8008c1e:	f003 030f 	and.w	r3, r3, #15
 8008c22:	490f      	ldr	r1, [pc, #60]	; (8008c60 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c24:	5ccb      	ldrb	r3, [r1, r3]
 8008c26:	f003 031f 	and.w	r3, r3, #31
 8008c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c30:	4b0a      	ldr	r3, [pc, #40]	; (8008c5c <HAL_RCC_GetHCLKFreq+0x50>)
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	f003 030f 	and.w	r3, r3, #15
 8008c38:	4a09      	ldr	r2, [pc, #36]	; (8008c60 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c3a:	5cd3      	ldrb	r3, [r2, r3]
 8008c3c:	f003 031f 	and.w	r3, r3, #31
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	fa22 f303 	lsr.w	r3, r2, r3
 8008c46:	4a07      	ldr	r2, [pc, #28]	; (8008c64 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008c4a:	4a07      	ldr	r2, [pc, #28]	; (8008c68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008c50:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <HAL_RCC_GetHCLKFreq+0x58>)
 8008c52:	681b      	ldr	r3, [r3, #0]
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3708      	adds	r7, #8
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	58024400 	.word	0x58024400
 8008c60:	08010f18 	.word	0x08010f18
 8008c64:	2400001c 	.word	0x2400001c
 8008c68:	24000018 	.word	0x24000018

08008c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008c70:	f7ff ffcc 	bl	8008c0c <HAL_RCC_GetHCLKFreq>
 8008c74:	4602      	mov	r2, r0
 8008c76:	4b06      	ldr	r3, [pc, #24]	; (8008c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	091b      	lsrs	r3, r3, #4
 8008c7c:	f003 0307 	and.w	r3, r3, #7
 8008c80:	4904      	ldr	r1, [pc, #16]	; (8008c94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c82:	5ccb      	ldrb	r3, [r1, r3]
 8008c84:	f003 031f 	and.w	r3, r3, #31
 8008c88:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	58024400 	.word	0x58024400
 8008c94:	08010f18 	.word	0x08010f18

08008c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008c9c:	f7ff ffb6 	bl	8008c0c <HAL_RCC_GetHCLKFreq>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	4b06      	ldr	r3, [pc, #24]	; (8008cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ca4:	69db      	ldr	r3, [r3, #28]
 8008ca6:	0a1b      	lsrs	r3, r3, #8
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	4904      	ldr	r1, [pc, #16]	; (8008cc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008cae:	5ccb      	ldrb	r3, [r1, r3]
 8008cb0:	f003 031f 	and.w	r3, r3, #31
 8008cb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	58024400 	.word	0x58024400
 8008cc0:	08010f18 	.word	0x08010f18

08008cc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b086      	sub	sp, #24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ccc:	2300      	movs	r3, #0
 8008cce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d03f      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ce4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ce8:	d02a      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008cea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008cee:	d824      	bhi.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008cf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cf4:	d018      	beq.n	8008d28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008cf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cfa:	d81e      	bhi.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d003      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d04:	d007      	beq.n	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008d06:	e018      	b.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d08:	4bab      	ldr	r3, [pc, #684]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0c:	4aaa      	ldr	r2, [pc, #680]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008d14:	e015      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3304      	adds	r3, #4
 8008d1a:	2102      	movs	r1, #2
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f001 f9cf 	bl	800a0c0 <RCCEx_PLL2_Config>
 8008d22:	4603      	mov	r3, r0
 8008d24:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008d26:	e00c      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3324      	adds	r3, #36	; 0x24
 8008d2c:	2102      	movs	r1, #2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f001 fa78 	bl	800a224 <RCCEx_PLL3_Config>
 8008d34:	4603      	mov	r3, r0
 8008d36:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008d38:	e003      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8008d3e:	e000      	b.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d109      	bne.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008d48:	4b9b      	ldr	r3, [pc, #620]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d54:	4998      	ldr	r1, [pc, #608]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	650b      	str	r3, [r1, #80]	; 0x50
 8008d5a:	e001      	b.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
 8008d5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d03d      	beq.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d70:	2b04      	cmp	r3, #4
 8008d72:	d826      	bhi.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008d74:	a201      	add	r2, pc, #4	; (adr r2, 8008d7c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d7a:	bf00      	nop
 8008d7c:	08008d91 	.word	0x08008d91
 8008d80:	08008d9f 	.word	0x08008d9f
 8008d84:	08008db1 	.word	0x08008db1
 8008d88:	08008dc9 	.word	0x08008dc9
 8008d8c:	08008dc9 	.word	0x08008dc9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d90:	4b89      	ldr	r3, [pc, #548]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d94:	4a88      	ldr	r2, [pc, #544]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008d9c:	e015      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	3304      	adds	r3, #4
 8008da2:	2100      	movs	r1, #0
 8008da4:	4618      	mov	r0, r3
 8008da6:	f001 f98b 	bl	800a0c0 <RCCEx_PLL2_Config>
 8008daa:	4603      	mov	r3, r0
 8008dac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008dae:	e00c      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	3324      	adds	r3, #36	; 0x24
 8008db4:	2100      	movs	r1, #0
 8008db6:	4618      	mov	r0, r3
 8008db8:	f001 fa34 	bl	800a224 <RCCEx_PLL3_Config>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008dc0:	e003      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8008dc6:	e000      	b.n	8008dca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008dca:	7dfb      	ldrb	r3, [r7, #23]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d109      	bne.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008dd0:	4b79      	ldr	r3, [pc, #484]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dd4:	f023 0207 	bic.w	r2, r3, #7
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ddc:	4976      	ldr	r1, [pc, #472]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dde:	4313      	orrs	r3, r2
 8008de0:	650b      	str	r3, [r1, #80]	; 0x50
 8008de2:	e001      	b.n	8008de8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de4:	7dfb      	ldrb	r3, [r7, #23]
 8008de6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d042      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dfc:	d02b      	beq.n	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e02:	d825      	bhi.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008e04:	2bc0      	cmp	r3, #192	; 0xc0
 8008e06:	d028      	beq.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008e08:	2bc0      	cmp	r3, #192	; 0xc0
 8008e0a:	d821      	bhi.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008e0c:	2b80      	cmp	r3, #128	; 0x80
 8008e0e:	d016      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008e10:	2b80      	cmp	r3, #128	; 0x80
 8008e12:	d81d      	bhi.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d002      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008e18:	2b40      	cmp	r3, #64	; 0x40
 8008e1a:	d007      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008e1c:	e018      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e1e:	4b66      	ldr	r3, [pc, #408]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e22:	4a65      	ldr	r2, [pc, #404]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008e2a:	e017      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3304      	adds	r3, #4
 8008e30:	2100      	movs	r1, #0
 8008e32:	4618      	mov	r0, r3
 8008e34:	f001 f944 	bl	800a0c0 <RCCEx_PLL2_Config>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008e3c:	e00e      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	3324      	adds	r3, #36	; 0x24
 8008e42:	2100      	movs	r1, #0
 8008e44:	4618      	mov	r0, r3
 8008e46:	f001 f9ed 	bl	800a224 <RCCEx_PLL3_Config>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008e4e:	e005      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e50:	2301      	movs	r3, #1
 8008e52:	75fb      	strb	r3, [r7, #23]
      break;
 8008e54:	e002      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008e56:	bf00      	nop
 8008e58:	e000      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e5c:	7dfb      	ldrb	r3, [r7, #23]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d109      	bne.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008e62:	4b55      	ldr	r3, [pc, #340]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e66:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e6e:	4952      	ldr	r1, [pc, #328]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e70:	4313      	orrs	r3, r2
 8008e72:	650b      	str	r3, [r1, #80]	; 0x50
 8008e74:	e001      	b.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e76:	7dfb      	ldrb	r3, [r7, #23]
 8008e78:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d049      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008e8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e90:	d030      	beq.n	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008e92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e96:	d82a      	bhi.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008e98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e9c:	d02c      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008e9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008ea2:	d824      	bhi.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ea8:	d018      	beq.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008eae:	d81e      	bhi.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d003      	beq.n	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008eb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008eb8:	d007      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008eba:	e018      	b.n	8008eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ebc:	4b3e      	ldr	r3, [pc, #248]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec0:	4a3d      	ldr	r2, [pc, #244]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ec8:	e017      	b.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	2100      	movs	r1, #0
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f001 f8f5 	bl	800a0c0 <RCCEx_PLL2_Config>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008eda:	e00e      	b.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3324      	adds	r3, #36	; 0x24
 8008ee0:	2100      	movs	r1, #0
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f001 f99e 	bl	800a224 <RCCEx_PLL3_Config>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008eec:	e005      	b.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ef2:	e002      	b.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008ef4:	bf00      	nop
 8008ef6:	e000      	b.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008efa:	7dfb      	ldrb	r3, [r7, #23]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008f00:	4b2d      	ldr	r3, [pc, #180]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f04:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f0e:	492a      	ldr	r1, [pc, #168]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f10:	4313      	orrs	r3, r2
 8008f12:	658b      	str	r3, [r1, #88]	; 0x58
 8008f14:	e001      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d04c      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f30:	d030      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008f32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f36:	d82a      	bhi.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008f38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f3c:	d02c      	beq.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008f3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f42:	d824      	bhi.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008f44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f48:	d018      	beq.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f4e:	d81e      	bhi.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d003      	beq.n	8008f5c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f58:	d007      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008f5a:	e018      	b.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f5c:	4b16      	ldr	r3, [pc, #88]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f60:	4a15      	ldr	r2, [pc, #84]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f68:	e017      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	2100      	movs	r1, #0
 8008f70:	4618      	mov	r0, r3
 8008f72:	f001 f8a5 	bl	800a0c0 <RCCEx_PLL2_Config>
 8008f76:	4603      	mov	r3, r0
 8008f78:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008f7a:	e00e      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	3324      	adds	r3, #36	; 0x24
 8008f80:	2100      	movs	r1, #0
 8008f82:	4618      	mov	r0, r3
 8008f84:	f001 f94e 	bl	800a224 <RCCEx_PLL3_Config>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f8c:	e005      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	75fb      	strb	r3, [r7, #23]
      break;
 8008f92:	e002      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008f94:	bf00      	nop
 8008f96:	e000      	b.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8008f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f9a:	7dfb      	ldrb	r3, [r7, #23]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10d      	bne.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008fa0:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fa4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008fae:	4902      	ldr	r1, [pc, #8]	; (8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	658b      	str	r3, [r1, #88]	; 0x58
 8008fb4:	e004      	b.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8008fb6:	bf00      	nop
 8008fb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fbc:	7dfb      	ldrb	r3, [r7, #23]
 8008fbe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d032      	beq.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fd0:	2b30      	cmp	r3, #48	; 0x30
 8008fd2:	d01c      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008fd4:	2b30      	cmp	r3, #48	; 0x30
 8008fd6:	d817      	bhi.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008fd8:	2b20      	cmp	r3, #32
 8008fda:	d00c      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008fdc:	2b20      	cmp	r3, #32
 8008fde:	d813      	bhi.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d016      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008fe4:	2b10      	cmp	r3, #16
 8008fe6:	d10f      	bne.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fe8:	4baf      	ldr	r3, [pc, #700]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fec:	4aae      	ldr	r2, [pc, #696]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008ff4:	e00e      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	3304      	adds	r3, #4
 8008ffa:	2102      	movs	r1, #2
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f001 f85f 	bl	800a0c0 <RCCEx_PLL2_Config>
 8009002:	4603      	mov	r3, r0
 8009004:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009006:	e005      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	75fb      	strb	r3, [r7, #23]
      break;
 800900c:	e002      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800900e:	bf00      	nop
 8009010:	e000      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009014:	7dfb      	ldrb	r3, [r7, #23]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d109      	bne.n	800902e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800901a:	4ba3      	ldr	r3, [pc, #652]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800901c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800901e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009026:	49a0      	ldr	r1, [pc, #640]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009028:	4313      	orrs	r3, r2
 800902a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800902c:	e001      	b.n	8009032 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800902e:	7dfb      	ldrb	r3, [r7, #23]
 8009030:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800903a:	2b00      	cmp	r3, #0
 800903c:	d047      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009046:	d030      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8009048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800904c:	d82a      	bhi.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800904e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009052:	d02c      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8009054:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009058:	d824      	bhi.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800905a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800905e:	d018      	beq.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8009060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009064:	d81e      	bhi.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8009066:	2b00      	cmp	r3, #0
 8009068:	d003      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800906a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800906e:	d007      	beq.n	8009080 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8009070:	e018      	b.n	80090a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009072:	4b8d      	ldr	r3, [pc, #564]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009076:	4a8c      	ldr	r2, [pc, #560]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800907c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800907e:	e017      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	3304      	adds	r3, #4
 8009084:	2100      	movs	r1, #0
 8009086:	4618      	mov	r0, r3
 8009088:	f001 f81a 	bl	800a0c0 <RCCEx_PLL2_Config>
 800908c:	4603      	mov	r3, r0
 800908e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009090:	e00e      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	3324      	adds	r3, #36	; 0x24
 8009096:	2100      	movs	r1, #0
 8009098:	4618      	mov	r0, r3
 800909a:	f001 f8c3 	bl	800a224 <RCCEx_PLL3_Config>
 800909e:	4603      	mov	r3, r0
 80090a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80090a2:	e005      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	75fb      	strb	r3, [r7, #23]
      break;
 80090a8:	e002      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80090aa:	bf00      	nop
 80090ac:	e000      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80090ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d109      	bne.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80090b6:	4b7c      	ldr	r3, [pc, #496]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80090b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090ba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090c2:	4979      	ldr	r1, [pc, #484]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80090c4:	4313      	orrs	r3, r2
 80090c6:	650b      	str	r3, [r1, #80]	; 0x50
 80090c8:	e001      	b.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090ca:	7dfb      	ldrb	r3, [r7, #23]
 80090cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d049      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80090e2:	d02e      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80090e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80090e8:	d828      	bhi.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80090ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80090ee:	d02a      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x482>
 80090f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80090f4:	d822      	bhi.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x478>
 80090f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80090fa:	d026      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x486>
 80090fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009100:	d81c      	bhi.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009106:	d010      	beq.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8009108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800910c:	d816      	bhi.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x478>
 800910e:	2b00      	cmp	r3, #0
 8009110:	d01d      	beq.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8009112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009116:	d111      	bne.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	3304      	adds	r3, #4
 800911c:	2101      	movs	r1, #1
 800911e:	4618      	mov	r0, r3
 8009120:	f000 ffce 	bl	800a0c0 <RCCEx_PLL2_Config>
 8009124:	4603      	mov	r3, r0
 8009126:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009128:	e012      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	3324      	adds	r3, #36	; 0x24
 800912e:	2101      	movs	r1, #1
 8009130:	4618      	mov	r0, r3
 8009132:	f001 f877 	bl	800a224 <RCCEx_PLL3_Config>
 8009136:	4603      	mov	r3, r0
 8009138:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800913a:	e009      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800913c:	2301      	movs	r3, #1
 800913e:	75fb      	strb	r3, [r7, #23]
      break;
 8009140:	e006      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009142:	bf00      	nop
 8009144:	e004      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8009146:	bf00      	nop
 8009148:	e002      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800914a:	bf00      	nop
 800914c:	e000      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800914e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009150:	7dfb      	ldrb	r3, [r7, #23]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d109      	bne.n	800916a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009156:	4b54      	ldr	r3, [pc, #336]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800915a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009162:	4951      	ldr	r1, [pc, #324]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009164:	4313      	orrs	r3, r2
 8009166:	650b      	str	r3, [r1, #80]	; 0x50
 8009168:	e001      	b.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d04b      	beq.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009184:	d02e      	beq.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8009186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800918a:	d828      	bhi.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800918c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009190:	d02a      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009196:	d822      	bhi.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009198:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800919c:	d026      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x528>
 800919e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80091a2:	d81c      	bhi.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80091a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091a8:	d010      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x508>
 80091aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091ae:	d816      	bhi.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d01d      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80091b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091b8:	d111      	bne.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	3304      	adds	r3, #4
 80091be:	2101      	movs	r1, #1
 80091c0:	4618      	mov	r0, r3
 80091c2:	f000 ff7d 	bl	800a0c0 <RCCEx_PLL2_Config>
 80091c6:	4603      	mov	r3, r0
 80091c8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80091ca:	e012      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	3324      	adds	r3, #36	; 0x24
 80091d0:	2101      	movs	r1, #1
 80091d2:	4618      	mov	r0, r3
 80091d4:	f001 f826 	bl	800a224 <RCCEx_PLL3_Config>
 80091d8:	4603      	mov	r3, r0
 80091da:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80091dc:	e009      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	75fb      	strb	r3, [r7, #23]
      break;
 80091e2:	e006      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80091e4:	bf00      	nop
 80091e6:	e004      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80091e8:	bf00      	nop
 80091ea:	e002      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80091ec:	bf00      	nop
 80091ee:	e000      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80091f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10a      	bne.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80091f8:	4b2b      	ldr	r3, [pc, #172]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80091fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091fc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009206:	4928      	ldr	r1, [pc, #160]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009208:	4313      	orrs	r3, r2
 800920a:	658b      	str	r3, [r1, #88]	; 0x58
 800920c:	e001      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800920e:	7dfb      	ldrb	r3, [r7, #23]
 8009210:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d02f      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009226:	d00e      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800922c:	d814      	bhi.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800922e:	2b00      	cmp	r3, #0
 8009230:	d015      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009236:	d10f      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009238:	4b1b      	ldr	r3, [pc, #108]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800923a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800923c:	4a1a      	ldr	r2, [pc, #104]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800923e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009242:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009244:	e00c      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	3304      	adds	r3, #4
 800924a:	2101      	movs	r1, #1
 800924c:	4618      	mov	r0, r3
 800924e:	f000 ff37 	bl	800a0c0 <RCCEx_PLL2_Config>
 8009252:	4603      	mov	r3, r0
 8009254:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009256:	e003      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009258:	2301      	movs	r3, #1
 800925a:	75fb      	strb	r3, [r7, #23]
      break;
 800925c:	e000      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800925e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009260:	7dfb      	ldrb	r3, [r7, #23]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d109      	bne.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009266:	4b10      	ldr	r3, [pc, #64]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009272:	490d      	ldr	r1, [pc, #52]	; (80092a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009274:	4313      	orrs	r3, r2
 8009276:	650b      	str	r3, [r1, #80]	; 0x50
 8009278:	e001      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800927a:	7dfb      	ldrb	r3, [r7, #23]
 800927c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d033      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928e:	2b03      	cmp	r3, #3
 8009290:	d81c      	bhi.n	80092cc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009292:	a201      	add	r2, pc, #4	; (adr r2, 8009298 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8009294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009298:	080092d3 	.word	0x080092d3
 800929c:	080092ad 	.word	0x080092ad
 80092a0:	080092bb 	.word	0x080092bb
 80092a4:	080092d3 	.word	0x080092d3
 80092a8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ac:	4bb8      	ldr	r3, [pc, #736]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80092ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b0:	4ab7      	ldr	r2, [pc, #732]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80092b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80092b8:	e00c      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	3304      	adds	r3, #4
 80092be:	2102      	movs	r1, #2
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 fefd 	bl	800a0c0 <RCCEx_PLL2_Config>
 80092c6:	4603      	mov	r3, r0
 80092c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80092ca:	e003      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	75fb      	strb	r3, [r7, #23]
      break;
 80092d0:	e000      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80092d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092d4:	7dfb      	ldrb	r3, [r7, #23]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d109      	bne.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80092da:	4bad      	ldr	r3, [pc, #692]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80092dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092de:	f023 0203 	bic.w	r2, r3, #3
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e6:	49aa      	ldr	r1, [pc, #680]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80092e8:	4313      	orrs	r3, r2
 80092ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 80092ec:	e001      	b.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ee:	7dfb      	ldrb	r3, [r7, #23]
 80092f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	f000 8086 	beq.w	800940c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009300:	4ba4      	ldr	r3, [pc, #656]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4aa3      	ldr	r2, [pc, #652]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800930a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800930c:	f7fb f998 	bl	8004640 <HAL_GetTick>
 8009310:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009312:	e009      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009314:	f7fb f994 	bl	8004640 <HAL_GetTick>
 8009318:	4602      	mov	r2, r0
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	1ad3      	subs	r3, r2, r3
 800931e:	2b64      	cmp	r3, #100	; 0x64
 8009320:	d902      	bls.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009322:	2303      	movs	r3, #3
 8009324:	75fb      	strb	r3, [r7, #23]
        break;
 8009326:	e005      	b.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009328:	4b9a      	ldr	r3, [pc, #616]	; (8009594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0ef      	beq.n	8009314 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009334:	7dfb      	ldrb	r3, [r7, #23]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d166      	bne.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800933a:	4b95      	ldr	r3, [pc, #596]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800933c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009344:	4053      	eors	r3, r2
 8009346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800934a:	2b00      	cmp	r3, #0
 800934c:	d013      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800934e:	4b90      	ldr	r3, [pc, #576]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009356:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009358:	4b8d      	ldr	r3, [pc, #564]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800935a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800935c:	4a8c      	ldr	r2, [pc, #560]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800935e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009362:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009364:	4b8a      	ldr	r3, [pc, #552]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009368:	4a89      	ldr	r2, [pc, #548]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800936a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800936e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009370:	4a87      	ldr	r2, [pc, #540]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800937c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009380:	d115      	bne.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009382:	f7fb f95d 	bl	8004640 <HAL_GetTick>
 8009386:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009388:	e00b      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800938a:	f7fb f959 	bl	8004640 <HAL_GetTick>
 800938e:	4602      	mov	r2, r0
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	1ad3      	subs	r3, r2, r3
 8009394:	f241 3288 	movw	r2, #5000	; 0x1388
 8009398:	4293      	cmp	r3, r2
 800939a:	d902      	bls.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800939c:	2303      	movs	r3, #3
 800939e:	75fb      	strb	r3, [r7, #23]
            break;
 80093a0:	e005      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093a2:	4b7b      	ldr	r3, [pc, #492]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093a6:	f003 0302 	and.w	r3, r3, #2
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0ed      	beq.n	800938a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80093ae:	7dfb      	ldrb	r3, [r7, #23]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d126      	bne.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80093ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80093c2:	d10d      	bne.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80093c4:	4b72      	ldr	r3, [pc, #456]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093c6:	691b      	ldr	r3, [r3, #16]
 80093c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80093d2:	0919      	lsrs	r1, r3, #4
 80093d4:	4b70      	ldr	r3, [pc, #448]	; (8009598 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80093d6:	400b      	ands	r3, r1
 80093d8:	496d      	ldr	r1, [pc, #436]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093da:	4313      	orrs	r3, r2
 80093dc:	610b      	str	r3, [r1, #16]
 80093de:	e005      	b.n	80093ec <HAL_RCCEx_PeriphCLKConfig+0x728>
 80093e0:	4b6b      	ldr	r3, [pc, #428]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	4a6a      	ldr	r2, [pc, #424]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093e6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80093ea:	6113      	str	r3, [r2, #16]
 80093ec:	4b68      	ldr	r3, [pc, #416]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80093f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093fa:	4965      	ldr	r1, [pc, #404]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093fc:	4313      	orrs	r3, r2
 80093fe:	670b      	str	r3, [r1, #112]	; 0x70
 8009400:	e004      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	75bb      	strb	r3, [r7, #22]
 8009406:	e001      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009408:	7dfb      	ldrb	r3, [r7, #23]
 800940a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0301 	and.w	r3, r3, #1
 8009414:	2b00      	cmp	r3, #0
 8009416:	d07e      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800941c:	2b28      	cmp	r3, #40	; 0x28
 800941e:	d867      	bhi.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009420:	a201      	add	r2, pc, #4	; (adr r2, 8009428 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009426:	bf00      	nop
 8009428:	080094f7 	.word	0x080094f7
 800942c:	080094f1 	.word	0x080094f1
 8009430:	080094f1 	.word	0x080094f1
 8009434:	080094f1 	.word	0x080094f1
 8009438:	080094f1 	.word	0x080094f1
 800943c:	080094f1 	.word	0x080094f1
 8009440:	080094f1 	.word	0x080094f1
 8009444:	080094f1 	.word	0x080094f1
 8009448:	080094cd 	.word	0x080094cd
 800944c:	080094f1 	.word	0x080094f1
 8009450:	080094f1 	.word	0x080094f1
 8009454:	080094f1 	.word	0x080094f1
 8009458:	080094f1 	.word	0x080094f1
 800945c:	080094f1 	.word	0x080094f1
 8009460:	080094f1 	.word	0x080094f1
 8009464:	080094f1 	.word	0x080094f1
 8009468:	080094df 	.word	0x080094df
 800946c:	080094f1 	.word	0x080094f1
 8009470:	080094f1 	.word	0x080094f1
 8009474:	080094f1 	.word	0x080094f1
 8009478:	080094f1 	.word	0x080094f1
 800947c:	080094f1 	.word	0x080094f1
 8009480:	080094f1 	.word	0x080094f1
 8009484:	080094f1 	.word	0x080094f1
 8009488:	080094f7 	.word	0x080094f7
 800948c:	080094f1 	.word	0x080094f1
 8009490:	080094f1 	.word	0x080094f1
 8009494:	080094f1 	.word	0x080094f1
 8009498:	080094f1 	.word	0x080094f1
 800949c:	080094f1 	.word	0x080094f1
 80094a0:	080094f1 	.word	0x080094f1
 80094a4:	080094f1 	.word	0x080094f1
 80094a8:	080094f7 	.word	0x080094f7
 80094ac:	080094f1 	.word	0x080094f1
 80094b0:	080094f1 	.word	0x080094f1
 80094b4:	080094f1 	.word	0x080094f1
 80094b8:	080094f1 	.word	0x080094f1
 80094bc:	080094f1 	.word	0x080094f1
 80094c0:	080094f1 	.word	0x080094f1
 80094c4:	080094f1 	.word	0x080094f1
 80094c8:	080094f7 	.word	0x080094f7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	3304      	adds	r3, #4
 80094d0:	2101      	movs	r1, #1
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 fdf4 	bl	800a0c0 <RCCEx_PLL2_Config>
 80094d8:	4603      	mov	r3, r0
 80094da:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80094dc:	e00c      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	3324      	adds	r3, #36	; 0x24
 80094e2:	2101      	movs	r1, #1
 80094e4:	4618      	mov	r0, r3
 80094e6:	f000 fe9d 	bl	800a224 <RCCEx_PLL3_Config>
 80094ea:	4603      	mov	r3, r0
 80094ec:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80094ee:	e003      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	75fb      	strb	r3, [r7, #23]
      break;
 80094f4:	e000      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80094f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094f8:	7dfb      	ldrb	r3, [r7, #23]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d109      	bne.n	8009512 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80094fe:	4b24      	ldr	r3, [pc, #144]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009502:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800950a:	4921      	ldr	r1, [pc, #132]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800950c:	4313      	orrs	r3, r2
 800950e:	654b      	str	r3, [r1, #84]	; 0x54
 8009510:	e001      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009512:	7dfb      	ldrb	r3, [r7, #23]
 8009514:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 0302 	and.w	r3, r3, #2
 800951e:	2b00      	cmp	r3, #0
 8009520:	d03e      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009526:	2b05      	cmp	r3, #5
 8009528:	d820      	bhi.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800952a:	a201      	add	r2, pc, #4	; (adr r2, 8009530 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800952c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009530:	08009573 	.word	0x08009573
 8009534:	08009549 	.word	0x08009549
 8009538:	0800955b 	.word	0x0800955b
 800953c:	08009573 	.word	0x08009573
 8009540:	08009573 	.word	0x08009573
 8009544:	08009573 	.word	0x08009573
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	3304      	adds	r3, #4
 800954c:	2101      	movs	r1, #1
 800954e:	4618      	mov	r0, r3
 8009550:	f000 fdb6 	bl	800a0c0 <RCCEx_PLL2_Config>
 8009554:	4603      	mov	r3, r0
 8009556:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8009558:	e00c      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	3324      	adds	r3, #36	; 0x24
 800955e:	2101      	movs	r1, #1
 8009560:	4618      	mov	r0, r3
 8009562:	f000 fe5f 	bl	800a224 <RCCEx_PLL3_Config>
 8009566:	4603      	mov	r3, r0
 8009568:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800956a:	e003      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	75fb      	strb	r3, [r7, #23]
      break;
 8009570:	e000      	b.n	8009574 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8009572:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009574:	7dfb      	ldrb	r3, [r7, #23]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d110      	bne.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800957a:	4b05      	ldr	r3, [pc, #20]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800957c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800957e:	f023 0207 	bic.w	r2, r3, #7
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009586:	4902      	ldr	r1, [pc, #8]	; (8009590 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009588:	4313      	orrs	r3, r2
 800958a:	654b      	str	r3, [r1, #84]	; 0x54
 800958c:	e008      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800958e:	bf00      	nop
 8009590:	58024400 	.word	0x58024400
 8009594:	58024800 	.word	0x58024800
 8009598:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 0304 	and.w	r3, r3, #4
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d039      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095b2:	2b05      	cmp	r3, #5
 80095b4:	d820      	bhi.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80095b6:	a201      	add	r2, pc, #4	; (adr r2, 80095bc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80095b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095bc:	080095ff 	.word	0x080095ff
 80095c0:	080095d5 	.word	0x080095d5
 80095c4:	080095e7 	.word	0x080095e7
 80095c8:	080095ff 	.word	0x080095ff
 80095cc:	080095ff 	.word	0x080095ff
 80095d0:	080095ff 	.word	0x080095ff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	3304      	adds	r3, #4
 80095d8:	2101      	movs	r1, #1
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 fd70 	bl	800a0c0 <RCCEx_PLL2_Config>
 80095e0:	4603      	mov	r3, r0
 80095e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80095e4:	e00c      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	3324      	adds	r3, #36	; 0x24
 80095ea:	2101      	movs	r1, #1
 80095ec:	4618      	mov	r0, r3
 80095ee:	f000 fe19 	bl	800a224 <RCCEx_PLL3_Config>
 80095f2:	4603      	mov	r3, r0
 80095f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80095f6:	e003      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	75fb      	strb	r3, [r7, #23]
      break;
 80095fc:	e000      	b.n	8009600 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 80095fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009600:	7dfb      	ldrb	r3, [r7, #23]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d10a      	bne.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009606:	4bb7      	ldr	r3, [pc, #732]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800960a:	f023 0207 	bic.w	r2, r3, #7
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009614:	49b3      	ldr	r1, [pc, #716]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009616:	4313      	orrs	r3, r2
 8009618:	658b      	str	r3, [r1, #88]	; 0x58
 800961a:	e001      	b.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800961c:	7dfb      	ldrb	r3, [r7, #23]
 800961e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0320 	and.w	r3, r3, #32
 8009628:	2b00      	cmp	r3, #0
 800962a:	d04b      	beq.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009636:	d02e      	beq.n	8009696 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8009638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800963c:	d828      	bhi.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800963e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009642:	d02a      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009648:	d822      	bhi.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800964a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800964e:	d026      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8009650:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009654:	d81c      	bhi.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800965a:	d010      	beq.n	800967e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800965c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009660:	d816      	bhi.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8009662:	2b00      	cmp	r3, #0
 8009664:	d01d      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8009666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800966a:	d111      	bne.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	3304      	adds	r3, #4
 8009670:	2100      	movs	r1, #0
 8009672:	4618      	mov	r0, r3
 8009674:	f000 fd24 	bl	800a0c0 <RCCEx_PLL2_Config>
 8009678:	4603      	mov	r3, r0
 800967a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800967c:	e012      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	3324      	adds	r3, #36	; 0x24
 8009682:	2102      	movs	r1, #2
 8009684:	4618      	mov	r0, r3
 8009686:	f000 fdcd 	bl	800a224 <RCCEx_PLL3_Config>
 800968a:	4603      	mov	r3, r0
 800968c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800968e:	e009      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	75fb      	strb	r3, [r7, #23]
      break;
 8009694:	e006      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009696:	bf00      	nop
 8009698:	e004      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800969a:	bf00      	nop
 800969c:	e002      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800969e:	bf00      	nop
 80096a0:	e000      	b.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80096a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80096a4:	7dfb      	ldrb	r3, [r7, #23]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10a      	bne.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80096aa:	4b8e      	ldr	r3, [pc, #568]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80096ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096b8:	498a      	ldr	r1, [pc, #552]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80096ba:	4313      	orrs	r3, r2
 80096bc:	654b      	str	r3, [r1, #84]	; 0x54
 80096be:	e001      	b.n	80096c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
 80096c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d04b      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80096da:	d02e      	beq.n	800973a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80096dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80096e0:	d828      	bhi.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80096e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096e6:	d02a      	beq.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80096e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096ec:	d822      	bhi.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80096ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096f2:	d026      	beq.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80096f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096f8:	d81c      	bhi.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80096fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096fe:	d010      	beq.n	8009722 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009704:	d816      	bhi.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009706:	2b00      	cmp	r3, #0
 8009708:	d01d      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800970a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800970e:	d111      	bne.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	3304      	adds	r3, #4
 8009714:	2100      	movs	r1, #0
 8009716:	4618      	mov	r0, r3
 8009718:	f000 fcd2 	bl	800a0c0 <RCCEx_PLL2_Config>
 800971c:	4603      	mov	r3, r0
 800971e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009720:	e012      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	3324      	adds	r3, #36	; 0x24
 8009726:	2102      	movs	r1, #2
 8009728:	4618      	mov	r0, r3
 800972a:	f000 fd7b 	bl	800a224 <RCCEx_PLL3_Config>
 800972e:	4603      	mov	r3, r0
 8009730:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009732:	e009      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	75fb      	strb	r3, [r7, #23]
      break;
 8009738:	e006      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800973a:	bf00      	nop
 800973c:	e004      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800973e:	bf00      	nop
 8009740:	e002      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009742:	bf00      	nop
 8009744:	e000      	b.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8009746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009748:	7dfb      	ldrb	r3, [r7, #23]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10a      	bne.n	8009764 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800974e:	4b65      	ldr	r3, [pc, #404]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009752:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800975c:	4961      	ldr	r1, [pc, #388]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800975e:	4313      	orrs	r3, r2
 8009760:	658b      	str	r3, [r1, #88]	; 0x58
 8009762:	e001      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009764:	7dfb      	ldrb	r3, [r7, #23]
 8009766:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009770:	2b00      	cmp	r3, #0
 8009772:	d04b      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800977a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800977e:	d02e      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8009780:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009784:	d828      	bhi.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800978a:	d02a      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800978c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009790:	d822      	bhi.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009792:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009796:	d026      	beq.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009798:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800979c:	d81c      	bhi.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800979e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097a2:	d010      	beq.n	80097c6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80097a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097a8:	d816      	bhi.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d01d      	beq.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80097ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097b2:	d111      	bne.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	3304      	adds	r3, #4
 80097b8:	2100      	movs	r1, #0
 80097ba:	4618      	mov	r0, r3
 80097bc:	f000 fc80 	bl	800a0c0 <RCCEx_PLL2_Config>
 80097c0:	4603      	mov	r3, r0
 80097c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80097c4:	e012      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	3324      	adds	r3, #36	; 0x24
 80097ca:	2102      	movs	r1, #2
 80097cc:	4618      	mov	r0, r3
 80097ce:	f000 fd29 	bl	800a224 <RCCEx_PLL3_Config>
 80097d2:	4603      	mov	r3, r0
 80097d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80097d6:	e009      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097d8:	2301      	movs	r3, #1
 80097da:	75fb      	strb	r3, [r7, #23]
      break;
 80097dc:	e006      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80097de:	bf00      	nop
 80097e0:	e004      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80097e2:	bf00      	nop
 80097e4:	e002      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80097e6:	bf00      	nop
 80097e8:	e000      	b.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80097ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097ec:	7dfb      	ldrb	r3, [r7, #23]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10a      	bne.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80097f2:	4b3c      	ldr	r3, [pc, #240]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80097f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009800:	4938      	ldr	r1, [pc, #224]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009802:	4313      	orrs	r3, r2
 8009804:	658b      	str	r3, [r1, #88]	; 0x58
 8009806:	e001      	b.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009808:	7dfb      	ldrb	r3, [r7, #23]
 800980a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0308 	and.w	r3, r3, #8
 8009814:	2b00      	cmp	r3, #0
 8009816:	d01a      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800981e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009822:	d10a      	bne.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3324      	adds	r3, #36	; 0x24
 8009828:	2102      	movs	r1, #2
 800982a:	4618      	mov	r0, r3
 800982c:	f000 fcfa 	bl	800a224 <RCCEx_PLL3_Config>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800983a:	4b2a      	ldr	r3, [pc, #168]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800983c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009848:	4926      	ldr	r1, [pc, #152]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800984a:	4313      	orrs	r3, r2
 800984c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0310 	and.w	r3, r3, #16
 8009856:	2b00      	cmp	r3, #0
 8009858:	d01a      	beq.n	8009890 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009864:	d10a      	bne.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	3324      	adds	r3, #36	; 0x24
 800986a:	2102      	movs	r1, #2
 800986c:	4618      	mov	r0, r3
 800986e:	f000 fcd9 	bl	800a224 <RCCEx_PLL3_Config>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	d001      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800987c:	4b19      	ldr	r3, [pc, #100]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800987e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800988a:	4916      	ldr	r1, [pc, #88]	; (80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800988c:	4313      	orrs	r3, r2
 800988e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009898:	2b00      	cmp	r3, #0
 800989a:	d036      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80098a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098a6:	d01f      	beq.n	80098e8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80098a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098ac:	d817      	bhi.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 80098b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098b6:	d009      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 80098b8:	e011      	b.n	80098de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	3304      	adds	r3, #4
 80098be:	2100      	movs	r1, #0
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 fbfd 	bl	800a0c0 <RCCEx_PLL2_Config>
 80098c6:	4603      	mov	r3, r0
 80098c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80098ca:	e00e      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	3324      	adds	r3, #36	; 0x24
 80098d0:	2102      	movs	r1, #2
 80098d2:	4618      	mov	r0, r3
 80098d4:	f000 fca6 	bl	800a224 <RCCEx_PLL3_Config>
 80098d8:	4603      	mov	r3, r0
 80098da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80098dc:	e005      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	75fb      	strb	r3, [r7, #23]
      break;
 80098e2:	e002      	b.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
 80098e4:	58024400 	.word	0x58024400
      break;
 80098e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80098ea:	7dfb      	ldrb	r3, [r7, #23]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10a      	bne.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80098f0:	4b93      	ldr	r3, [pc, #588]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80098f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80098fe:	4990      	ldr	r1, [pc, #576]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009900:	4313      	orrs	r3, r2
 8009902:	658b      	str	r3, [r1, #88]	; 0x58
 8009904:	e001      	b.n	800990a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d033      	beq.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800991c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009920:	d01c      	beq.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009922:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009926:	d816      	bhi.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800992c:	d003      	beq.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800992e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009932:	d007      	beq.n	8009944 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8009934:	e00f      	b.n	8009956 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009936:	4b82      	ldr	r3, [pc, #520]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800993a:	4a81      	ldr	r2, [pc, #516]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800993c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009940:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8009942:	e00c      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	3324      	adds	r3, #36	; 0x24
 8009948:	2101      	movs	r1, #1
 800994a:	4618      	mov	r0, r3
 800994c:	f000 fc6a 	bl	800a224 <RCCEx_PLL3_Config>
 8009950:	4603      	mov	r3, r0
 8009952:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8009954:	e003      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	75fb      	strb	r3, [r7, #23]
      break;
 800995a:	e000      	b.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800995c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800995e:	7dfb      	ldrb	r3, [r7, #23]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d10a      	bne.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009964:	4b76      	ldr	r3, [pc, #472]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009968:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009972:	4973      	ldr	r1, [pc, #460]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009974:	4313      	orrs	r3, r2
 8009976:	654b      	str	r3, [r1, #84]	; 0x54
 8009978:	e001      	b.n	800997e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800997a:	7dfb      	ldrb	r3, [r7, #23]
 800997c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d029      	beq.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800998e:	2b00      	cmp	r3, #0
 8009990:	d003      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8009992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009996:	d007      	beq.n	80099a8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8009998:	e00f      	b.n	80099ba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800999a:	4b69      	ldr	r3, [pc, #420]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800999c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999e:	4a68      	ldr	r2, [pc, #416]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80099a6:	e00b      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3304      	adds	r3, #4
 80099ac:	2102      	movs	r1, #2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 fb86 	bl	800a0c0 <RCCEx_PLL2_Config>
 80099b4:	4603      	mov	r3, r0
 80099b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80099b8:	e002      	b.n	80099c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 80099ba:	2301      	movs	r3, #1
 80099bc:	75fb      	strb	r3, [r7, #23]
      break;
 80099be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099c0:	7dfb      	ldrb	r3, [r7, #23]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d109      	bne.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80099c6:	4b5e      	ldr	r3, [pc, #376]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099d2:	495b      	ldr	r1, [pc, #364]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099d4:	4313      	orrs	r3, r2
 80099d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80099d8:	e001      	b.n	80099de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099da:	7dfb      	ldrb	r3, [r7, #23]
 80099dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00a      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	3324      	adds	r3, #36	; 0x24
 80099ee:	2102      	movs	r1, #2
 80099f0:	4618      	mov	r0, r3
 80099f2:	f000 fc17 	bl	800a224 <RCCEx_PLL3_Config>
 80099f6:	4603      	mov	r3, r0
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d001      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d030      	beq.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a14:	d017      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a1a:	d811      	bhi.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a20:	d013      	beq.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a26:	d80b      	bhi.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d010      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a30:	d106      	bne.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a32:	4b43      	ldr	r3, [pc, #268]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a36:	4a42      	ldr	r2, [pc, #264]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009a3e:	e007      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	75fb      	strb	r3, [r7, #23]
      break;
 8009a44:	e004      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009a46:	bf00      	nop
 8009a48:	e002      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009a4a:	bf00      	nop
 8009a4c:	e000      	b.n	8009a50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a50:	7dfb      	ldrb	r3, [r7, #23]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d109      	bne.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a56:	4b3a      	ldr	r3, [pc, #232]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a62:	4937      	ldr	r1, [pc, #220]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a64:	4313      	orrs	r3, r2
 8009a66:	654b      	str	r3, [r1, #84]	; 0x54
 8009a68:	e001      	b.n	8009a6e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a6a:	7dfb      	ldrb	r3, [r7, #23]
 8009a6c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d008      	beq.n	8009a8c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009a7a:	4b31      	ldr	r3, [pc, #196]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009a86:	492e      	ldr	r1, [pc, #184]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d009      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009a98:	4b29      	ldr	r3, [pc, #164]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a9a:	691b      	ldr	r3, [r3, #16]
 8009a9c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009aa6:	4926      	ldr	r1, [pc, #152]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d008      	beq.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009ab8:	4b21      	ldr	r3, [pc, #132]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009abc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ac4:	491e      	ldr	r1, [pc, #120]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00d      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009ad6:	4b1a      	ldr	r3, [pc, #104]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	4a19      	ldr	r2, [pc, #100]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009adc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ae0:	6113      	str	r3, [r2, #16]
 8009ae2:	4b17      	ldr	r3, [pc, #92]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ae4:	691a      	ldr	r2, [r3, #16]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009aec:	4914      	ldr	r1, [pc, #80]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009aee:	4313      	orrs	r3, r2
 8009af0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	da08      	bge.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009afa:	4b11      	ldr	r3, [pc, #68]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009afe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b06:	490e      	ldr	r1, [pc, #56]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d009      	beq.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009b18:	4b09      	ldr	r3, [pc, #36]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b26:	4906      	ldr	r1, [pc, #24]	; (8009b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009b2c:	7dbb      	ldrb	r3, [r7, #22]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d101      	bne.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009b32:	2300      	movs	r3, #0
 8009b34:	e000      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3718      	adds	r7, #24
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	58024400 	.word	0x58024400

08009b44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009b48:	f7ff f860 	bl	8008c0c <HAL_RCC_GetHCLKFreq>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	4b06      	ldr	r3, [pc, #24]	; (8009b68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009b50:	6a1b      	ldr	r3, [r3, #32]
 8009b52:	091b      	lsrs	r3, r3, #4
 8009b54:	f003 0307 	and.w	r3, r3, #7
 8009b58:	4904      	ldr	r1, [pc, #16]	; (8009b6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009b5a:	5ccb      	ldrb	r3, [r1, r3]
 8009b5c:	f003 031f 	and.w	r3, r3, #31
 8009b60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	58024400 	.word	0x58024400
 8009b6c:	08010f18 	.word	0x08010f18

08009b70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b089      	sub	sp, #36	; 0x24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b78:	4ba1      	ldr	r3, [pc, #644]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b7c:	f003 0303 	and.w	r3, r3, #3
 8009b80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009b82:	4b9f      	ldr	r3, [pc, #636]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b86:	0b1b      	lsrs	r3, r3, #12
 8009b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009b8e:	4b9c      	ldr	r3, [pc, #624]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b92:	091b      	lsrs	r3, r3, #4
 8009b94:	f003 0301 	and.w	r3, r3, #1
 8009b98:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009b9a:	4b99      	ldr	r3, [pc, #612]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b9e:	08db      	lsrs	r3, r3, #3
 8009ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ba4:	693a      	ldr	r2, [r7, #16]
 8009ba6:	fb02 f303 	mul.w	r3, r2, r3
 8009baa:	ee07 3a90 	vmov	s15, r3
 8009bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	f000 8111 	beq.w	8009de0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	f000 8083 	beq.w	8009ccc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	2b02      	cmp	r3, #2
 8009bca:	f200 80a1 	bhi.w	8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d003      	beq.n	8009bdc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d056      	beq.n	8009c88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009bda:	e099      	b.n	8009d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bdc:	4b88      	ldr	r3, [pc, #544]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0320 	and.w	r3, r3, #32
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d02d      	beq.n	8009c44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009be8:	4b85      	ldr	r3, [pc, #532]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	08db      	lsrs	r3, r3, #3
 8009bee:	f003 0303 	and.w	r3, r3, #3
 8009bf2:	4a84      	ldr	r2, [pc, #528]	; (8009e04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8009bf8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	ee07 3a90 	vmov	s15, r3
 8009c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c12:	4b7b      	ldr	r3, [pc, #492]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c3e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009c42:	e087      	b.n	8009d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009e0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c56:	4b6a      	ldr	r3, [pc, #424]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c5e:	ee07 3a90 	vmov	s15, r3
 8009c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c82:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c86:	e065      	b.n	8009d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	ee07 3a90 	vmov	s15, r3
 8009c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009e10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c9a:	4b59      	ldr	r3, [pc, #356]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca2:	ee07 3a90 	vmov	s15, r3
 8009ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cc6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cca:	e043      	b.n	8009d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	ee07 3a90 	vmov	s15, r3
 8009cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009e14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cde:	4b48      	ldr	r3, [pc, #288]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d0e:	e021      	b.n	8009d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	ee07 3a90 	vmov	s15, r3
 8009d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009e10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d22:	4b37      	ldr	r3, [pc, #220]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d2a:	ee07 3a90 	vmov	s15, r3
 8009d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009e08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009d54:	4b2a      	ldr	r3, [pc, #168]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d58:	0a5b      	lsrs	r3, r3, #9
 8009d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d5e:	ee07 3a90 	vmov	s15, r3
 8009d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d7a:	ee17 2a90 	vmov	r2, s15
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009d82:	4b1f      	ldr	r3, [pc, #124]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d86:	0c1b      	lsrs	r3, r3, #16
 8009d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d8c:	ee07 3a90 	vmov	s15, r3
 8009d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009da8:	ee17 2a90 	vmov	r2, s15
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009db0:	4b13      	ldr	r3, [pc, #76]	; (8009e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009db4:	0e1b      	lsrs	r3, r3, #24
 8009db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dd6:	ee17 2a90 	vmov	r2, s15
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009dde:	e008      	b.n	8009df2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2200      	movs	r2, #0
 8009df0:	609a      	str	r2, [r3, #8]
}
 8009df2:	bf00      	nop
 8009df4:	3724      	adds	r7, #36	; 0x24
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	58024400 	.word	0x58024400
 8009e04:	03d09000 	.word	0x03d09000
 8009e08:	46000000 	.word	0x46000000
 8009e0c:	4c742400 	.word	0x4c742400
 8009e10:	4a742400 	.word	0x4a742400
 8009e14:	4c371b00 	.word	0x4c371b00

08009e18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b089      	sub	sp, #36	; 0x24
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e20:	4ba1      	ldr	r3, [pc, #644]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e24:	f003 0303 	and.w	r3, r3, #3
 8009e28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009e2a:	4b9f      	ldr	r3, [pc, #636]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e2e:	0d1b      	lsrs	r3, r3, #20
 8009e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009e36:	4b9c      	ldr	r3, [pc, #624]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3a:	0a1b      	lsrs	r3, r3, #8
 8009e3c:	f003 0301 	and.w	r3, r3, #1
 8009e40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009e42:	4b99      	ldr	r3, [pc, #612]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e46:	08db      	lsrs	r3, r3, #3
 8009e48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	fb02 f303 	mul.w	r3, r2, r3
 8009e52:	ee07 3a90 	vmov	s15, r3
 8009e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	f000 8111 	beq.w	800a088 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	f000 8083 	beq.w	8009f74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	2b02      	cmp	r3, #2
 8009e72:	f200 80a1 	bhi.w	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d003      	beq.n	8009e84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009e7c:	69bb      	ldr	r3, [r7, #24]
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d056      	beq.n	8009f30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009e82:	e099      	b.n	8009fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e84:	4b88      	ldr	r3, [pc, #544]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f003 0320 	and.w	r3, r3, #32
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d02d      	beq.n	8009eec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009e90:	4b85      	ldr	r3, [pc, #532]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	08db      	lsrs	r3, r3, #3
 8009e96:	f003 0303 	and.w	r3, r3, #3
 8009e9a:	4a84      	ldr	r2, [pc, #528]	; (800a0ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009ea0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	ee07 3a90 	vmov	s15, r3
 8009ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	ee07 3a90 	vmov	s15, r3
 8009eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009eba:	4b7b      	ldr	r3, [pc, #492]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ece:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ee6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009eea:	e087      	b.n	8009ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	ee07 3a90 	vmov	s15, r3
 8009ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ef6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a0b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009efe:	4b6a      	ldr	r3, [pc, #424]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f06:	ee07 3a90 	vmov	s15, r3
 8009f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f12:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f2e:	e065      	b.n	8009ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	ee07 3a90 	vmov	s15, r3
 8009f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f42:	4b59      	ldr	r3, [pc, #356]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f56:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f72:	e043      	b.n	8009ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	ee07 3a90 	vmov	s15, r3
 8009f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a0bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f86:	4b48      	ldr	r3, [pc, #288]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f8e:	ee07 3a90 	vmov	s15, r3
 8009f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fb6:	e021      	b.n	8009ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	ee07 3a90 	vmov	s15, r3
 8009fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fc2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a0b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fca:	4b37      	ldr	r3, [pc, #220]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fd2:	ee07 3a90 	vmov	s15, r3
 8009fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fde:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a0b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ff6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ffa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009ffc:	4b2a      	ldr	r3, [pc, #168]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a000:	0a5b      	lsrs	r3, r3, #9
 800a002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a006:	ee07 3a90 	vmov	s15, r3
 800a00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a00e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a012:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a016:	edd7 6a07 	vldr	s13, [r7, #28]
 800a01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a022:	ee17 2a90 	vmov	r2, s15
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a02a:	4b1f      	ldr	r3, [pc, #124]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02e:	0c1b      	lsrs	r3, r3, #16
 800a030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a034:	ee07 3a90 	vmov	s15, r3
 800a038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a03c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a040:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a044:	edd7 6a07 	vldr	s13, [r7, #28]
 800a048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a04c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a050:	ee17 2a90 	vmov	r2, s15
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a058:	4b13      	ldr	r3, [pc, #76]	; (800a0a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05c:	0e1b      	lsrs	r3, r3, #24
 800a05e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a062:	ee07 3a90 	vmov	s15, r3
 800a066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a06a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a06e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a072:	edd7 6a07 	vldr	s13, [r7, #28]
 800a076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a07a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a07e:	ee17 2a90 	vmov	r2, s15
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a086:	e008      	b.n	800a09a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	609a      	str	r2, [r3, #8]
}
 800a09a:	bf00      	nop
 800a09c:	3724      	adds	r7, #36	; 0x24
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	58024400 	.word	0x58024400
 800a0ac:	03d09000 	.word	0x03d09000
 800a0b0:	46000000 	.word	0x46000000
 800a0b4:	4c742400 	.word	0x4c742400
 800a0b8:	4a742400 	.word	0x4a742400
 800a0bc:	4c371b00 	.word	0x4c371b00

0800a0c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a0ce:	4b53      	ldr	r3, [pc, #332]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d2:	f003 0303 	and.w	r3, r3, #3
 800a0d6:	2b03      	cmp	r3, #3
 800a0d8:	d101      	bne.n	800a0de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	e099      	b.n	800a212 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a0de:	4b4f      	ldr	r3, [pc, #316]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a4e      	ldr	r2, [pc, #312]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a0e4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a0e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0ea:	f7fa faa9 	bl	8004640 <HAL_GetTick>
 800a0ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a0f0:	e008      	b.n	800a104 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a0f2:	f7fa faa5 	bl	8004640 <HAL_GetTick>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	1ad3      	subs	r3, r2, r3
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d901      	bls.n	800a104 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a100:	2303      	movs	r3, #3
 800a102:	e086      	b.n	800a212 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a104:	4b45      	ldr	r3, [pc, #276]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1f0      	bne.n	800a0f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a110:	4b42      	ldr	r3, [pc, #264]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a114:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	031b      	lsls	r3, r3, #12
 800a11e:	493f      	ldr	r1, [pc, #252]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a120:	4313      	orrs	r3, r2
 800a122:	628b      	str	r3, [r1, #40]	; 0x28
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	3b01      	subs	r3, #1
 800a12a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	689b      	ldr	r3, [r3, #8]
 800a132:	3b01      	subs	r3, #1
 800a134:	025b      	lsls	r3, r3, #9
 800a136:	b29b      	uxth	r3, r3
 800a138:	431a      	orrs	r2, r3
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	3b01      	subs	r3, #1
 800a140:	041b      	lsls	r3, r3, #16
 800a142:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a146:	431a      	orrs	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	3b01      	subs	r3, #1
 800a14e:	061b      	lsls	r3, r3, #24
 800a150:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a154:	4931      	ldr	r1, [pc, #196]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a156:	4313      	orrs	r3, r2
 800a158:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a15a:	4b30      	ldr	r3, [pc, #192]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	492d      	ldr	r1, [pc, #180]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a168:	4313      	orrs	r3, r2
 800a16a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a16c:	4b2b      	ldr	r3, [pc, #172]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a170:	f023 0220 	bic.w	r2, r3, #32
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	4928      	ldr	r1, [pc, #160]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a17a:	4313      	orrs	r3, r2
 800a17c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a17e:	4b27      	ldr	r3, [pc, #156]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a182:	4a26      	ldr	r2, [pc, #152]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a184:	f023 0310 	bic.w	r3, r3, #16
 800a188:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a18a:	4b24      	ldr	r3, [pc, #144]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a18c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a18e:	4b24      	ldr	r3, [pc, #144]	; (800a220 <RCCEx_PLL2_Config+0x160>)
 800a190:	4013      	ands	r3, r2
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	69d2      	ldr	r2, [r2, #28]
 800a196:	00d2      	lsls	r2, r2, #3
 800a198:	4920      	ldr	r1, [pc, #128]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a19a:	4313      	orrs	r3, r2
 800a19c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a19e:	4b1f      	ldr	r3, [pc, #124]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a2:	4a1e      	ldr	r2, [pc, #120]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a1a4:	f043 0310 	orr.w	r3, r3, #16
 800a1a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d106      	bne.n	800a1be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a1b0:	4b1a      	ldr	r3, [pc, #104]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b4:	4a19      	ldr	r2, [pc, #100]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a1b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a1ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1bc:	e00f      	b.n	800a1de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d106      	bne.n	800a1d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a1c4:	4b15      	ldr	r3, [pc, #84]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c8:	4a14      	ldr	r2, [pc, #80]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a1ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a1d0:	e005      	b.n	800a1de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a1d2:	4b12      	ldr	r3, [pc, #72]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d6:	4a11      	ldr	r2, [pc, #68]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a1d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a1de:	4b0f      	ldr	r3, [pc, #60]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a0e      	ldr	r2, [pc, #56]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a1e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a1e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1ea:	f7fa fa29 	bl	8004640 <HAL_GetTick>
 800a1ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a1f0:	e008      	b.n	800a204 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a1f2:	f7fa fa25 	bl	8004640 <HAL_GetTick>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	2b02      	cmp	r3, #2
 800a1fe:	d901      	bls.n	800a204 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a200:	2303      	movs	r3, #3
 800a202:	e006      	b.n	800a212 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a204:	4b05      	ldr	r3, [pc, #20]	; (800a21c <RCCEx_PLL2_Config+0x15c>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d0f0      	beq.n	800a1f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a210:	7bfb      	ldrb	r3, [r7, #15]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	58024400 	.word	0x58024400
 800a220:	ffff0007 	.word	0xffff0007

0800a224 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b084      	sub	sp, #16
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a22e:	2300      	movs	r3, #0
 800a230:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a232:	4b53      	ldr	r3, [pc, #332]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a236:	f003 0303 	and.w	r3, r3, #3
 800a23a:	2b03      	cmp	r3, #3
 800a23c:	d101      	bne.n	800a242 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e099      	b.n	800a376 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a242:	4b4f      	ldr	r3, [pc, #316]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a4e      	ldr	r2, [pc, #312]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a24c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a24e:	f7fa f9f7 	bl	8004640 <HAL_GetTick>
 800a252:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a254:	e008      	b.n	800a268 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a256:	f7fa f9f3 	bl	8004640 <HAL_GetTick>
 800a25a:	4602      	mov	r2, r0
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	1ad3      	subs	r3, r2, r3
 800a260:	2b02      	cmp	r3, #2
 800a262:	d901      	bls.n	800a268 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a264:	2303      	movs	r3, #3
 800a266:	e086      	b.n	800a376 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a268:	4b45      	ldr	r3, [pc, #276]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a270:	2b00      	cmp	r3, #0
 800a272:	d1f0      	bne.n	800a256 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a274:	4b42      	ldr	r3, [pc, #264]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a278:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	051b      	lsls	r3, r3, #20
 800a282:	493f      	ldr	r1, [pc, #252]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a284:	4313      	orrs	r3, r2
 800a286:	628b      	str	r3, [r1, #40]	; 0x28
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	3b01      	subs	r3, #1
 800a28e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	689b      	ldr	r3, [r3, #8]
 800a296:	3b01      	subs	r3, #1
 800a298:	025b      	lsls	r3, r3, #9
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	431a      	orrs	r2, r3
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	3b01      	subs	r3, #1
 800a2a4:	041b      	lsls	r3, r3, #16
 800a2a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a2aa:	431a      	orrs	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	061b      	lsls	r3, r3, #24
 800a2b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a2b8:	4931      	ldr	r1, [pc, #196]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a2be:	4b30      	ldr	r3, [pc, #192]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	695b      	ldr	r3, [r3, #20]
 800a2ca:	492d      	ldr	r1, [pc, #180]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a2d0:	4b2b      	ldr	r3, [pc, #172]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	4928      	ldr	r1, [pc, #160]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a2e2:	4b27      	ldr	r3, [pc, #156]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a2e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e6:	4a26      	ldr	r2, [pc, #152]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a2e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a2ee:	4b24      	ldr	r3, [pc, #144]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a2f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2f2:	4b24      	ldr	r3, [pc, #144]	; (800a384 <RCCEx_PLL3_Config+0x160>)
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	69d2      	ldr	r2, [r2, #28]
 800a2fa:	00d2      	lsls	r2, r2, #3
 800a2fc:	4920      	ldr	r1, [pc, #128]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a302:	4b1f      	ldr	r3, [pc, #124]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a306:	4a1e      	ldr	r2, [pc, #120]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a30c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d106      	bne.n	800a322 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a314:	4b1a      	ldr	r3, [pc, #104]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a318:	4a19      	ldr	r2, [pc, #100]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a31a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a31e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a320:	e00f      	b.n	800a342 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d106      	bne.n	800a336 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a328:	4b15      	ldr	r3, [pc, #84]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32c:	4a14      	ldr	r2, [pc, #80]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a32e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a332:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a334:	e005      	b.n	800a342 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a336:	4b12      	ldr	r3, [pc, #72]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33a:	4a11      	ldr	r2, [pc, #68]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a33c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a340:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a342:	4b0f      	ldr	r3, [pc, #60]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a0e      	ldr	r2, [pc, #56]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a34c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a34e:	f7fa f977 	bl	8004640 <HAL_GetTick>
 800a352:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a354:	e008      	b.n	800a368 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a356:	f7fa f973 	bl	8004640 <HAL_GetTick>
 800a35a:	4602      	mov	r2, r0
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	2b02      	cmp	r3, #2
 800a362:	d901      	bls.n	800a368 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a364:	2303      	movs	r3, #3
 800a366:	e006      	b.n	800a376 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a368:	4b05      	ldr	r3, [pc, #20]	; (800a380 <RCCEx_PLL3_Config+0x15c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d0f0      	beq.n	800a356 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a374:	7bfb      	ldrb	r3, [r7, #15]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	58024400 	.word	0x58024400
 800a384:	ffff0007 	.word	0xffff0007

0800a388 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d101      	bne.n	800a39a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e0f1      	b.n	800a57e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2200      	movs	r2, #0
 800a39e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a78      	ldr	r2, [pc, #480]	; (800a588 <HAL_SPI_Init+0x200>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d00f      	beq.n	800a3ca <HAL_SPI_Init+0x42>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a77      	ldr	r2, [pc, #476]	; (800a58c <HAL_SPI_Init+0x204>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d00a      	beq.n	800a3ca <HAL_SPI_Init+0x42>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a75      	ldr	r2, [pc, #468]	; (800a590 <HAL_SPI_Init+0x208>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d005      	beq.n	800a3ca <HAL_SPI_Init+0x42>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	68db      	ldr	r3, [r3, #12]
 800a3c2:	2b0f      	cmp	r3, #15
 800a3c4:	d901      	bls.n	800a3ca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e0d9      	b.n	800a57e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f8e2 	bl	800a594 <SPI_GetPacketSize>
 800a3d0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a6c      	ldr	r2, [pc, #432]	; (800a588 <HAL_SPI_Init+0x200>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d00c      	beq.n	800a3f6 <HAL_SPI_Init+0x6e>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a6a      	ldr	r2, [pc, #424]	; (800a58c <HAL_SPI_Init+0x204>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d007      	beq.n	800a3f6 <HAL_SPI_Init+0x6e>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a69      	ldr	r2, [pc, #420]	; (800a590 <HAL_SPI_Init+0x208>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d002      	beq.n	800a3f6 <HAL_SPI_Init+0x6e>
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b08      	cmp	r3, #8
 800a3f4:	d811      	bhi.n	800a41a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a3fa:	4a63      	ldr	r2, [pc, #396]	; (800a588 <HAL_SPI_Init+0x200>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d009      	beq.n	800a414 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a61      	ldr	r2, [pc, #388]	; (800a58c <HAL_SPI_Init+0x204>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d004      	beq.n	800a414 <HAL_SPI_Init+0x8c>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4a60      	ldr	r2, [pc, #384]	; (800a590 <HAL_SPI_Init+0x208>)
 800a410:	4293      	cmp	r3, r2
 800a412:	d104      	bne.n	800a41e <HAL_SPI_Init+0x96>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2b10      	cmp	r3, #16
 800a418:	d901      	bls.n	800a41e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e0af      	b.n	800a57e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b00      	cmp	r3, #0
 800a428:	d106      	bne.n	800a438 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f7f8 fc82 	bl	8002d3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2202      	movs	r2, #2
 800a43c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f022 0201 	bic.w	r2, r2, #1
 800a44e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a45a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a464:	d119      	bne.n	800a49a <HAL_SPI_Init+0x112>
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a46e:	d103      	bne.n	800a478 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a474:	2b00      	cmp	r3, #0
 800a476:	d008      	beq.n	800a48a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10c      	bne.n	800a49a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a484:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a488:	d107      	bne.n	800a49a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a498:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	69da      	ldr	r2, [r3, #28]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	431a      	orrs	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ac:	ea42 0103 	orr.w	r1, r2, r3
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	68da      	ldr	r2, [r3, #12]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	430a      	orrs	r2, r1
 800a4ba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c4:	431a      	orrs	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ca:	431a      	orrs	r2, r3
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	431a      	orrs	r2, r3
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	691b      	ldr	r3, [r3, #16]
 800a4d6:	431a      	orrs	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	695b      	ldr	r3, [r3, #20]
 800a4dc:	431a      	orrs	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	431a      	orrs	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	431a      	orrs	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4ee:	431a      	orrs	r2, r3
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	431a      	orrs	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4fa:	ea42 0103 	orr.w	r1, r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	430a      	orrs	r2, r1
 800a508:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d113      	bne.n	800a53a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a524:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a538:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	f022 0201 	bic.w	r2, r2, #1
 800a548:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00a      	beq.n	800a56c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	430a      	orrs	r2, r1
 800a56a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2200      	movs	r2, #0
 800a570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a57c:	2300      	movs	r3, #0
}
 800a57e:	4618      	mov	r0, r3
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
 800a586:	bf00      	nop
 800a588:	40013000 	.word	0x40013000
 800a58c:	40003800 	.word	0x40003800
 800a590:	40003c00 	.word	0x40003c00

0800a594 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a594:	b480      	push	{r7}
 800a596:	b085      	sub	sp, #20
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a0:	095b      	lsrs	r3, r3, #5
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a5ae:	68bb      	ldr	r3, [r7, #8]
 800a5b0:	3307      	adds	r3, #7
 800a5b2:	08db      	lsrs	r3, r3, #3
 800a5b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	68fa      	ldr	r2, [r7, #12]
 800a5ba:	fb02 f303 	mul.w	r3, r2, r3
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d101      	bne.n	800a5dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e049      	b.n	800a670 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d106      	bne.n	800a5f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f7f9 fa41 	bl	8003a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2202      	movs	r2, #2
 800a5fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	3304      	adds	r3, #4
 800a606:	4619      	mov	r1, r3
 800a608:	4610      	mov	r0, r2
 800a60a:	f000 fd71 	bl	800b0f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2201      	movs	r2, #1
 800a612:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2201      	movs	r2, #1
 800a61a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2201      	movs	r2, #1
 800a622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2201      	movs	r2, #1
 800a632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2201      	movs	r2, #1
 800a642:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2201      	movs	r2, #1
 800a65a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a686:	b2db      	uxtb	r3, r3
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d001      	beq.n	800a690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e054      	b.n	800a73a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2202      	movs	r2, #2
 800a694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68da      	ldr	r2, [r3, #12]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f042 0201 	orr.w	r2, r2, #1
 800a6a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a26      	ldr	r2, [pc, #152]	; (800a748 <HAL_TIM_Base_Start_IT+0xd0>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d022      	beq.n	800a6f8 <HAL_TIM_Base_Start_IT+0x80>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6ba:	d01d      	beq.n	800a6f8 <HAL_TIM_Base_Start_IT+0x80>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a22      	ldr	r2, [pc, #136]	; (800a74c <HAL_TIM_Base_Start_IT+0xd4>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d018      	beq.n	800a6f8 <HAL_TIM_Base_Start_IT+0x80>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a21      	ldr	r2, [pc, #132]	; (800a750 <HAL_TIM_Base_Start_IT+0xd8>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d013      	beq.n	800a6f8 <HAL_TIM_Base_Start_IT+0x80>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a1f      	ldr	r2, [pc, #124]	; (800a754 <HAL_TIM_Base_Start_IT+0xdc>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d00e      	beq.n	800a6f8 <HAL_TIM_Base_Start_IT+0x80>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a1e      	ldr	r2, [pc, #120]	; (800a758 <HAL_TIM_Base_Start_IT+0xe0>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d009      	beq.n	800a6f8 <HAL_TIM_Base_Start_IT+0x80>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a1c      	ldr	r2, [pc, #112]	; (800a75c <HAL_TIM_Base_Start_IT+0xe4>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d004      	beq.n	800a6f8 <HAL_TIM_Base_Start_IT+0x80>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a1b      	ldr	r2, [pc, #108]	; (800a760 <HAL_TIM_Base_Start_IT+0xe8>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d115      	bne.n	800a724 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	689a      	ldr	r2, [r3, #8]
 800a6fe:	4b19      	ldr	r3, [pc, #100]	; (800a764 <HAL_TIM_Base_Start_IT+0xec>)
 800a700:	4013      	ands	r3, r2
 800a702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2b06      	cmp	r3, #6
 800a708:	d015      	beq.n	800a736 <HAL_TIM_Base_Start_IT+0xbe>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a710:	d011      	beq.n	800a736 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f042 0201 	orr.w	r2, r2, #1
 800a720:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a722:	e008      	b.n	800a736 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	f042 0201 	orr.w	r2, r2, #1
 800a732:	601a      	str	r2, [r3, #0]
 800a734:	e000      	b.n	800a738 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a736:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3714      	adds	r7, #20
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr
 800a746:	bf00      	nop
 800a748:	40010000 	.word	0x40010000
 800a74c:	40000400 	.word	0x40000400
 800a750:	40000800 	.word	0x40000800
 800a754:	40000c00 	.word	0x40000c00
 800a758:	40010400 	.word	0x40010400
 800a75c:	40001800 	.word	0x40001800
 800a760:	40014000 	.word	0x40014000
 800a764:	00010007 	.word	0x00010007

0800a768 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b082      	sub	sp, #8
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	e049      	b.n	800a80e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b00      	cmp	r3, #0
 800a784:	d106      	bne.n	800a794 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2200      	movs	r2, #0
 800a78a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 f841 	bl	800a816 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2202      	movs	r2, #2
 800a798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681a      	ldr	r2, [r3, #0]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	f000 fca2 	bl	800b0f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a816:	b480      	push	{r7}
 800a818:	b083      	sub	sp, #12
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
	...

0800a82c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d109      	bne.n	800a850 <HAL_TIM_PWM_Start+0x24>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a842:	b2db      	uxtb	r3, r3
 800a844:	2b01      	cmp	r3, #1
 800a846:	bf14      	ite	ne
 800a848:	2301      	movne	r3, #1
 800a84a:	2300      	moveq	r3, #0
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	e03c      	b.n	800a8ca <HAL_TIM_PWM_Start+0x9e>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2b04      	cmp	r3, #4
 800a854:	d109      	bne.n	800a86a <HAL_TIM_PWM_Start+0x3e>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	2b01      	cmp	r3, #1
 800a860:	bf14      	ite	ne
 800a862:	2301      	movne	r3, #1
 800a864:	2300      	moveq	r3, #0
 800a866:	b2db      	uxtb	r3, r3
 800a868:	e02f      	b.n	800a8ca <HAL_TIM_PWM_Start+0x9e>
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2b08      	cmp	r3, #8
 800a86e:	d109      	bne.n	800a884 <HAL_TIM_PWM_Start+0x58>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a876:	b2db      	uxtb	r3, r3
 800a878:	2b01      	cmp	r3, #1
 800a87a:	bf14      	ite	ne
 800a87c:	2301      	movne	r3, #1
 800a87e:	2300      	moveq	r3, #0
 800a880:	b2db      	uxtb	r3, r3
 800a882:	e022      	b.n	800a8ca <HAL_TIM_PWM_Start+0x9e>
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	2b0c      	cmp	r3, #12
 800a888:	d109      	bne.n	800a89e <HAL_TIM_PWM_Start+0x72>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b01      	cmp	r3, #1
 800a894:	bf14      	ite	ne
 800a896:	2301      	movne	r3, #1
 800a898:	2300      	moveq	r3, #0
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	e015      	b.n	800a8ca <HAL_TIM_PWM_Start+0x9e>
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2b10      	cmp	r3, #16
 800a8a2:	d109      	bne.n	800a8b8 <HAL_TIM_PWM_Start+0x8c>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8aa:	b2db      	uxtb	r3, r3
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	bf14      	ite	ne
 800a8b0:	2301      	movne	r3, #1
 800a8b2:	2300      	moveq	r3, #0
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	e008      	b.n	800a8ca <HAL_TIM_PWM_Start+0x9e>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	bf14      	ite	ne
 800a8c4:	2301      	movne	r3, #1
 800a8c6:	2300      	moveq	r3, #0
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d001      	beq.n	800a8d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e0a1      	b.n	800aa16 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d104      	bne.n	800a8e2 <HAL_TIM_PWM_Start+0xb6>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2202      	movs	r2, #2
 800a8dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a8e0:	e023      	b.n	800a92a <HAL_TIM_PWM_Start+0xfe>
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	d104      	bne.n	800a8f2 <HAL_TIM_PWM_Start+0xc6>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2202      	movs	r2, #2
 800a8ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a8f0:	e01b      	b.n	800a92a <HAL_TIM_PWM_Start+0xfe>
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	2b08      	cmp	r3, #8
 800a8f6:	d104      	bne.n	800a902 <HAL_TIM_PWM_Start+0xd6>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2202      	movs	r2, #2
 800a8fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a900:	e013      	b.n	800a92a <HAL_TIM_PWM_Start+0xfe>
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	2b0c      	cmp	r3, #12
 800a906:	d104      	bne.n	800a912 <HAL_TIM_PWM_Start+0xe6>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	2202      	movs	r2, #2
 800a90c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a910:	e00b      	b.n	800a92a <HAL_TIM_PWM_Start+0xfe>
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	2b10      	cmp	r3, #16
 800a916:	d104      	bne.n	800a922 <HAL_TIM_PWM_Start+0xf6>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2202      	movs	r2, #2
 800a91c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a920:	e003      	b.n	800a92a <HAL_TIM_PWM_Start+0xfe>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2202      	movs	r2, #2
 800a926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	2201      	movs	r2, #1
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	4618      	mov	r0, r3
 800a934:	f000 ffea 	bl	800b90c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a38      	ldr	r2, [pc, #224]	; (800aa20 <HAL_TIM_PWM_Start+0x1f4>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d013      	beq.n	800a96a <HAL_TIM_PWM_Start+0x13e>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	4a37      	ldr	r2, [pc, #220]	; (800aa24 <HAL_TIM_PWM_Start+0x1f8>)
 800a948:	4293      	cmp	r3, r2
 800a94a:	d00e      	beq.n	800a96a <HAL_TIM_PWM_Start+0x13e>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	4a35      	ldr	r2, [pc, #212]	; (800aa28 <HAL_TIM_PWM_Start+0x1fc>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d009      	beq.n	800a96a <HAL_TIM_PWM_Start+0x13e>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	4a34      	ldr	r2, [pc, #208]	; (800aa2c <HAL_TIM_PWM_Start+0x200>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d004      	beq.n	800a96a <HAL_TIM_PWM_Start+0x13e>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a32      	ldr	r2, [pc, #200]	; (800aa30 <HAL_TIM_PWM_Start+0x204>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d101      	bne.n	800a96e <HAL_TIM_PWM_Start+0x142>
 800a96a:	2301      	movs	r3, #1
 800a96c:	e000      	b.n	800a970 <HAL_TIM_PWM_Start+0x144>
 800a96e:	2300      	movs	r3, #0
 800a970:	2b00      	cmp	r3, #0
 800a972:	d007      	beq.n	800a984 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a982:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	4a25      	ldr	r2, [pc, #148]	; (800aa20 <HAL_TIM_PWM_Start+0x1f4>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d022      	beq.n	800a9d4 <HAL_TIM_PWM_Start+0x1a8>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a996:	d01d      	beq.n	800a9d4 <HAL_TIM_PWM_Start+0x1a8>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a25      	ldr	r2, [pc, #148]	; (800aa34 <HAL_TIM_PWM_Start+0x208>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d018      	beq.n	800a9d4 <HAL_TIM_PWM_Start+0x1a8>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a24      	ldr	r2, [pc, #144]	; (800aa38 <HAL_TIM_PWM_Start+0x20c>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d013      	beq.n	800a9d4 <HAL_TIM_PWM_Start+0x1a8>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	4a22      	ldr	r2, [pc, #136]	; (800aa3c <HAL_TIM_PWM_Start+0x210>)
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	d00e      	beq.n	800a9d4 <HAL_TIM_PWM_Start+0x1a8>
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a1a      	ldr	r2, [pc, #104]	; (800aa24 <HAL_TIM_PWM_Start+0x1f8>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d009      	beq.n	800a9d4 <HAL_TIM_PWM_Start+0x1a8>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a1e      	ldr	r2, [pc, #120]	; (800aa40 <HAL_TIM_PWM_Start+0x214>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d004      	beq.n	800a9d4 <HAL_TIM_PWM_Start+0x1a8>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a16      	ldr	r2, [pc, #88]	; (800aa28 <HAL_TIM_PWM_Start+0x1fc>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d115      	bne.n	800aa00 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	689a      	ldr	r2, [r3, #8]
 800a9da:	4b1a      	ldr	r3, [pc, #104]	; (800aa44 <HAL_TIM_PWM_Start+0x218>)
 800a9dc:	4013      	ands	r3, r2
 800a9de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2b06      	cmp	r3, #6
 800a9e4:	d015      	beq.n	800aa12 <HAL_TIM_PWM_Start+0x1e6>
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ec:	d011      	beq.n	800aa12 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f042 0201 	orr.w	r2, r2, #1
 800a9fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9fe:	e008      	b.n	800aa12 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f042 0201 	orr.w	r2, r2, #1
 800aa0e:	601a      	str	r2, [r3, #0]
 800aa10:	e000      	b.n	800aa14 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	bf00      	nop
 800aa20:	40010000 	.word	0x40010000
 800aa24:	40010400 	.word	0x40010400
 800aa28:	40014000 	.word	0x40014000
 800aa2c:	40014400 	.word	0x40014400
 800aa30:	40014800 	.word	0x40014800
 800aa34:	40000400 	.word	0x40000400
 800aa38:	40000800 	.word	0x40000800
 800aa3c:	40000c00 	.word	0x40000c00
 800aa40:	40001800 	.word	0x40001800
 800aa44:	00010007 	.word	0x00010007

0800aa48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b082      	sub	sp, #8
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	691b      	ldr	r3, [r3, #16]
 800aa56:	f003 0302 	and.w	r3, r3, #2
 800aa5a:	2b02      	cmp	r3, #2
 800aa5c:	d122      	bne.n	800aaa4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	68db      	ldr	r3, [r3, #12]
 800aa64:	f003 0302 	and.w	r3, r3, #2
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d11b      	bne.n	800aaa4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f06f 0202 	mvn.w	r2, #2
 800aa74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2201      	movs	r2, #1
 800aa7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	699b      	ldr	r3, [r3, #24]
 800aa82:	f003 0303 	and.w	r3, r3, #3
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d003      	beq.n	800aa92 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f000 fb12 	bl	800b0b4 <HAL_TIM_IC_CaptureCallback>
 800aa90:	e005      	b.n	800aa9e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f000 fb04 	bl	800b0a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aa98:	6878      	ldr	r0, [r7, #4]
 800aa9a:	f000 fb15 	bl	800b0c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	691b      	ldr	r3, [r3, #16]
 800aaaa:	f003 0304 	and.w	r3, r3, #4
 800aaae:	2b04      	cmp	r3, #4
 800aab0:	d122      	bne.n	800aaf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68db      	ldr	r3, [r3, #12]
 800aab8:	f003 0304 	and.w	r3, r3, #4
 800aabc:	2b04      	cmp	r3, #4
 800aabe:	d11b      	bne.n	800aaf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f06f 0204 	mvn.w	r2, #4
 800aac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2202      	movs	r2, #2
 800aace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d003      	beq.n	800aae6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 fae8 	bl	800b0b4 <HAL_TIM_IC_CaptureCallback>
 800aae4:	e005      	b.n	800aaf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fada 	bl	800b0a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 faeb 	bl	800b0c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	f003 0308 	and.w	r3, r3, #8
 800ab02:	2b08      	cmp	r3, #8
 800ab04:	d122      	bne.n	800ab4c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	f003 0308 	and.w	r3, r3, #8
 800ab10:	2b08      	cmp	r3, #8
 800ab12:	d11b      	bne.n	800ab4c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f06f 0208 	mvn.w	r2, #8
 800ab1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2204      	movs	r2, #4
 800ab22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	69db      	ldr	r3, [r3, #28]
 800ab2a:	f003 0303 	and.w	r3, r3, #3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d003      	beq.n	800ab3a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fabe 	bl	800b0b4 <HAL_TIM_IC_CaptureCallback>
 800ab38:	e005      	b.n	800ab46 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fab0 	bl	800b0a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 fac1 	bl	800b0c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	f003 0310 	and.w	r3, r3, #16
 800ab56:	2b10      	cmp	r3, #16
 800ab58:	d122      	bne.n	800aba0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68db      	ldr	r3, [r3, #12]
 800ab60:	f003 0310 	and.w	r3, r3, #16
 800ab64:	2b10      	cmp	r3, #16
 800ab66:	d11b      	bne.n	800aba0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f06f 0210 	mvn.w	r2, #16
 800ab70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2208      	movs	r2, #8
 800ab76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	69db      	ldr	r3, [r3, #28]
 800ab7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab86:	6878      	ldr	r0, [r7, #4]
 800ab88:	f000 fa94 	bl	800b0b4 <HAL_TIM_IC_CaptureCallback>
 800ab8c:	e005      	b.n	800ab9a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fa86 	bl	800b0a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 fa97 	bl	800b0c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	691b      	ldr	r3, [r3, #16]
 800aba6:	f003 0301 	and.w	r3, r3, #1
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d10e      	bne.n	800abcc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	68db      	ldr	r3, [r3, #12]
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d107      	bne.n	800abcc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f06f 0201 	mvn.w	r2, #1
 800abc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7f7 fa26 	bl	8002018 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd6:	2b80      	cmp	r3, #128	; 0x80
 800abd8:	d10e      	bne.n	800abf8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abe4:	2b80      	cmp	r3, #128	; 0x80
 800abe6:	d107      	bne.n	800abf8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800abf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 ffc6 	bl	800bb84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	691b      	ldr	r3, [r3, #16]
 800abfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac06:	d10e      	bne.n	800ac26 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac12:	2b80      	cmp	r3, #128	; 0x80
 800ac14:	d107      	bne.n	800ac26 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 ffb9 	bl	800bb98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac30:	2b40      	cmp	r3, #64	; 0x40
 800ac32:	d10e      	bne.n	800ac52 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac3e:	2b40      	cmp	r3, #64	; 0x40
 800ac40:	d107      	bne.n	800ac52 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 fa45 	bl	800b0dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	f003 0320 	and.w	r3, r3, #32
 800ac5c:	2b20      	cmp	r3, #32
 800ac5e:	d10e      	bne.n	800ac7e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	2b20      	cmp	r3, #32
 800ac6c:	d107      	bne.n	800ac7e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f06f 0220 	mvn.w	r2, #32
 800ac76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 ff79 	bl	800bb70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac7e:	bf00      	nop
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b086      	sub	sp, #24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d101      	bne.n	800aca6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aca2:	2302      	movs	r3, #2
 800aca4:	e0ff      	b.n	800aea6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2201      	movs	r2, #1
 800acaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2b14      	cmp	r3, #20
 800acb2:	f200 80f0 	bhi.w	800ae96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800acb6:	a201      	add	r2, pc, #4	; (adr r2, 800acbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800acb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acbc:	0800ad11 	.word	0x0800ad11
 800acc0:	0800ae97 	.word	0x0800ae97
 800acc4:	0800ae97 	.word	0x0800ae97
 800acc8:	0800ae97 	.word	0x0800ae97
 800accc:	0800ad51 	.word	0x0800ad51
 800acd0:	0800ae97 	.word	0x0800ae97
 800acd4:	0800ae97 	.word	0x0800ae97
 800acd8:	0800ae97 	.word	0x0800ae97
 800acdc:	0800ad93 	.word	0x0800ad93
 800ace0:	0800ae97 	.word	0x0800ae97
 800ace4:	0800ae97 	.word	0x0800ae97
 800ace8:	0800ae97 	.word	0x0800ae97
 800acec:	0800add3 	.word	0x0800add3
 800acf0:	0800ae97 	.word	0x0800ae97
 800acf4:	0800ae97 	.word	0x0800ae97
 800acf8:	0800ae97 	.word	0x0800ae97
 800acfc:	0800ae15 	.word	0x0800ae15
 800ad00:	0800ae97 	.word	0x0800ae97
 800ad04:	0800ae97 	.word	0x0800ae97
 800ad08:	0800ae97 	.word	0x0800ae97
 800ad0c:	0800ae55 	.word	0x0800ae55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68b9      	ldr	r1, [r7, #8]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f000 fa84 	bl	800b224 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	699a      	ldr	r2, [r3, #24]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f042 0208 	orr.w	r2, r2, #8
 800ad2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	699a      	ldr	r2, [r3, #24]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f022 0204 	bic.w	r2, r2, #4
 800ad3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	6999      	ldr	r1, [r3, #24]
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	691a      	ldr	r2, [r3, #16]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	430a      	orrs	r2, r1
 800ad4c:	619a      	str	r2, [r3, #24]
      break;
 800ad4e:	e0a5      	b.n	800ae9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68b9      	ldr	r1, [r7, #8]
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 faf4 	bl	800b344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	699a      	ldr	r2, [r3, #24]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	699a      	ldr	r2, [r3, #24]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	6999      	ldr	r1, [r3, #24]
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	021a      	lsls	r2, r3, #8
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	430a      	orrs	r2, r1
 800ad8e:	619a      	str	r2, [r3, #24]
      break;
 800ad90:	e084      	b.n	800ae9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68b9      	ldr	r1, [r7, #8]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f000 fb5d 	bl	800b458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	69da      	ldr	r2, [r3, #28]
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f042 0208 	orr.w	r2, r2, #8
 800adac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	69da      	ldr	r2, [r3, #28]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f022 0204 	bic.w	r2, r2, #4
 800adbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	69d9      	ldr	r1, [r3, #28]
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	691a      	ldr	r2, [r3, #16]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	61da      	str	r2, [r3, #28]
      break;
 800add0:	e064      	b.n	800ae9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68b9      	ldr	r1, [r7, #8]
 800add8:	4618      	mov	r0, r3
 800adda:	f000 fbc5 	bl	800b568 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	69da      	ldr	r2, [r3, #28]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	69da      	ldr	r2, [r3, #28]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	69d9      	ldr	r1, [r3, #28]
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	021a      	lsls	r2, r3, #8
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	430a      	orrs	r2, r1
 800ae10:	61da      	str	r2, [r3, #28]
      break;
 800ae12:	e043      	b.n	800ae9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68b9      	ldr	r1, [r7, #8]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f000 fc0e 	bl	800b63c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f042 0208 	orr.w	r2, r2, #8
 800ae2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f022 0204 	bic.w	r2, r2, #4
 800ae3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	691a      	ldr	r2, [r3, #16]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae52:	e023      	b.n	800ae9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	68b9      	ldr	r1, [r7, #8]
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f000 fc52 	bl	800b704 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	691b      	ldr	r3, [r3, #16]
 800ae8a:	021a      	lsls	r2, r3, #8
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	430a      	orrs	r2, r1
 800ae92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ae94:	e002      	b.n	800ae9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	75fb      	strb	r3, [r7, #23]
      break;
 800ae9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aea4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3718      	adds	r7, #24
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop

0800aeb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d101      	bne.n	800aecc <HAL_TIM_ConfigClockSource+0x1c>
 800aec8:	2302      	movs	r3, #2
 800aeca:	e0dc      	b.n	800b086 <HAL_TIM_ConfigClockSource+0x1d6>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2202      	movs	r2, #2
 800aed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aee4:	68ba      	ldr	r2, [r7, #8]
 800aee6:	4b6a      	ldr	r3, [pc, #424]	; (800b090 <HAL_TIM_ConfigClockSource+0x1e0>)
 800aee8:	4013      	ands	r3, r2
 800aeea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aef2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68ba      	ldr	r2, [r7, #8]
 800aefa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a64      	ldr	r2, [pc, #400]	; (800b094 <HAL_TIM_ConfigClockSource+0x1e4>)
 800af02:	4293      	cmp	r3, r2
 800af04:	f000 80a9 	beq.w	800b05a <HAL_TIM_ConfigClockSource+0x1aa>
 800af08:	4a62      	ldr	r2, [pc, #392]	; (800b094 <HAL_TIM_ConfigClockSource+0x1e4>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	f200 80ae 	bhi.w	800b06c <HAL_TIM_ConfigClockSource+0x1bc>
 800af10:	4a61      	ldr	r2, [pc, #388]	; (800b098 <HAL_TIM_ConfigClockSource+0x1e8>)
 800af12:	4293      	cmp	r3, r2
 800af14:	f000 80a1 	beq.w	800b05a <HAL_TIM_ConfigClockSource+0x1aa>
 800af18:	4a5f      	ldr	r2, [pc, #380]	; (800b098 <HAL_TIM_ConfigClockSource+0x1e8>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	f200 80a6 	bhi.w	800b06c <HAL_TIM_ConfigClockSource+0x1bc>
 800af20:	4a5e      	ldr	r2, [pc, #376]	; (800b09c <HAL_TIM_ConfigClockSource+0x1ec>)
 800af22:	4293      	cmp	r3, r2
 800af24:	f000 8099 	beq.w	800b05a <HAL_TIM_ConfigClockSource+0x1aa>
 800af28:	4a5c      	ldr	r2, [pc, #368]	; (800b09c <HAL_TIM_ConfigClockSource+0x1ec>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	f200 809e 	bhi.w	800b06c <HAL_TIM_ConfigClockSource+0x1bc>
 800af30:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af34:	f000 8091 	beq.w	800b05a <HAL_TIM_ConfigClockSource+0x1aa>
 800af38:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800af3c:	f200 8096 	bhi.w	800b06c <HAL_TIM_ConfigClockSource+0x1bc>
 800af40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af44:	f000 8089 	beq.w	800b05a <HAL_TIM_ConfigClockSource+0x1aa>
 800af48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af4c:	f200 808e 	bhi.w	800b06c <HAL_TIM_ConfigClockSource+0x1bc>
 800af50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af54:	d03e      	beq.n	800afd4 <HAL_TIM_ConfigClockSource+0x124>
 800af56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af5a:	f200 8087 	bhi.w	800b06c <HAL_TIM_ConfigClockSource+0x1bc>
 800af5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af62:	f000 8086 	beq.w	800b072 <HAL_TIM_ConfigClockSource+0x1c2>
 800af66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af6a:	d87f      	bhi.n	800b06c <HAL_TIM_ConfigClockSource+0x1bc>
 800af6c:	2b70      	cmp	r3, #112	; 0x70
 800af6e:	d01a      	beq.n	800afa6 <HAL_TIM_ConfigClockSource+0xf6>
 800af70:	2b70      	cmp	r3, #112	; 0x70
 800af72:	d87b      	bhi.n	800b06c <HAL_TIM_ConfigClockSource+0x1bc>
 800af74:	2b60      	cmp	r3, #96	; 0x60
 800af76:	d050      	beq.n	800b01a <HAL_TIM_ConfigClockSource+0x16a>
 800af78:	2b60      	cmp	r3, #96	; 0x60
 800af7a:	d877      	bhi.n	800b06c <HAL_TIM_ConfigClockSource+0x1bc>
 800af7c:	2b50      	cmp	r3, #80	; 0x50
 800af7e:	d03c      	beq.n	800affa <HAL_TIM_ConfigClockSource+0x14a>
 800af80:	2b50      	cmp	r3, #80	; 0x50
 800af82:	d873      	bhi.n	800b06c <HAL_TIM_ConfigClockSource+0x1bc>
 800af84:	2b40      	cmp	r3, #64	; 0x40
 800af86:	d058      	beq.n	800b03a <HAL_TIM_ConfigClockSource+0x18a>
 800af88:	2b40      	cmp	r3, #64	; 0x40
 800af8a:	d86f      	bhi.n	800b06c <HAL_TIM_ConfigClockSource+0x1bc>
 800af8c:	2b30      	cmp	r3, #48	; 0x30
 800af8e:	d064      	beq.n	800b05a <HAL_TIM_ConfigClockSource+0x1aa>
 800af90:	2b30      	cmp	r3, #48	; 0x30
 800af92:	d86b      	bhi.n	800b06c <HAL_TIM_ConfigClockSource+0x1bc>
 800af94:	2b20      	cmp	r3, #32
 800af96:	d060      	beq.n	800b05a <HAL_TIM_ConfigClockSource+0x1aa>
 800af98:	2b20      	cmp	r3, #32
 800af9a:	d867      	bhi.n	800b06c <HAL_TIM_ConfigClockSource+0x1bc>
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d05c      	beq.n	800b05a <HAL_TIM_ConfigClockSource+0x1aa>
 800afa0:	2b10      	cmp	r3, #16
 800afa2:	d05a      	beq.n	800b05a <HAL_TIM_ConfigClockSource+0x1aa>
 800afa4:	e062      	b.n	800b06c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6818      	ldr	r0, [r3, #0]
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	6899      	ldr	r1, [r3, #8]
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	685a      	ldr	r2, [r3, #4]
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	f000 fc89 	bl	800b8cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800afc2:	68bb      	ldr	r3, [r7, #8]
 800afc4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800afc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	68ba      	ldr	r2, [r7, #8]
 800afd0:	609a      	str	r2, [r3, #8]
      break;
 800afd2:	e04f      	b.n	800b074 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6818      	ldr	r0, [r3, #0]
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	6899      	ldr	r1, [r3, #8]
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	f000 fc72 	bl	800b8cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	689a      	ldr	r2, [r3, #8]
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aff6:	609a      	str	r2, [r3, #8]
      break;
 800aff8:	e03c      	b.n	800b074 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6818      	ldr	r0, [r3, #0]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	6859      	ldr	r1, [r3, #4]
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	461a      	mov	r2, r3
 800b008:	f000 fbe2 	bl	800b7d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2150      	movs	r1, #80	; 0x50
 800b012:	4618      	mov	r0, r3
 800b014:	f000 fc3c 	bl	800b890 <TIM_ITRx_SetConfig>
      break;
 800b018:	e02c      	b.n	800b074 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6818      	ldr	r0, [r3, #0]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	6859      	ldr	r1, [r3, #4]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	461a      	mov	r2, r3
 800b028:	f000 fc01 	bl	800b82e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	2160      	movs	r1, #96	; 0x60
 800b032:	4618      	mov	r0, r3
 800b034:	f000 fc2c 	bl	800b890 <TIM_ITRx_SetConfig>
      break;
 800b038:	e01c      	b.n	800b074 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6818      	ldr	r0, [r3, #0]
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	6859      	ldr	r1, [r3, #4]
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	68db      	ldr	r3, [r3, #12]
 800b046:	461a      	mov	r2, r3
 800b048:	f000 fbc2 	bl	800b7d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2140      	movs	r1, #64	; 0x40
 800b052:	4618      	mov	r0, r3
 800b054:	f000 fc1c 	bl	800b890 <TIM_ITRx_SetConfig>
      break;
 800b058:	e00c      	b.n	800b074 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4619      	mov	r1, r3
 800b064:	4610      	mov	r0, r2
 800b066:	f000 fc13 	bl	800b890 <TIM_ITRx_SetConfig>
      break;
 800b06a:	e003      	b.n	800b074 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	73fb      	strb	r3, [r7, #15]
      break;
 800b070:	e000      	b.n	800b074 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b072:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2201      	movs	r2, #1
 800b078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b084:	7bfb      	ldrb	r3, [r7, #15]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3710      	adds	r7, #16
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	ffceff88 	.word	0xffceff88
 800b094:	00100040 	.word	0x00100040
 800b098:	00100030 	.word	0x00100030
 800b09c:	00100020 	.word	0x00100020

0800b0a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b0bc:	bf00      	nop
 800b0be:	370c      	adds	r7, #12
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr

0800b0c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b083      	sub	sp, #12
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b0d0:	bf00      	nop
 800b0d2:	370c      	adds	r7, #12
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0da:	4770      	bx	lr

0800b0dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b0dc:	b480      	push	{r7}
 800b0de:	b083      	sub	sp, #12
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b0e4:	bf00      	nop
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a40      	ldr	r2, [pc, #256]	; (800b204 <TIM_Base_SetConfig+0x114>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d013      	beq.n	800b130 <TIM_Base_SetConfig+0x40>
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b10e:	d00f      	beq.n	800b130 <TIM_Base_SetConfig+0x40>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	4a3d      	ldr	r2, [pc, #244]	; (800b208 <TIM_Base_SetConfig+0x118>)
 800b114:	4293      	cmp	r3, r2
 800b116:	d00b      	beq.n	800b130 <TIM_Base_SetConfig+0x40>
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4a3c      	ldr	r2, [pc, #240]	; (800b20c <TIM_Base_SetConfig+0x11c>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d007      	beq.n	800b130 <TIM_Base_SetConfig+0x40>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	4a3b      	ldr	r2, [pc, #236]	; (800b210 <TIM_Base_SetConfig+0x120>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d003      	beq.n	800b130 <TIM_Base_SetConfig+0x40>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	4a3a      	ldr	r2, [pc, #232]	; (800b214 <TIM_Base_SetConfig+0x124>)
 800b12c:	4293      	cmp	r3, r2
 800b12e:	d108      	bne.n	800b142 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	68fa      	ldr	r2, [r7, #12]
 800b13e:	4313      	orrs	r3, r2
 800b140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	4a2f      	ldr	r2, [pc, #188]	; (800b204 <TIM_Base_SetConfig+0x114>)
 800b146:	4293      	cmp	r3, r2
 800b148:	d01f      	beq.n	800b18a <TIM_Base_SetConfig+0x9a>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b150:	d01b      	beq.n	800b18a <TIM_Base_SetConfig+0x9a>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	4a2c      	ldr	r2, [pc, #176]	; (800b208 <TIM_Base_SetConfig+0x118>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d017      	beq.n	800b18a <TIM_Base_SetConfig+0x9a>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a2b      	ldr	r2, [pc, #172]	; (800b20c <TIM_Base_SetConfig+0x11c>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d013      	beq.n	800b18a <TIM_Base_SetConfig+0x9a>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a2a      	ldr	r2, [pc, #168]	; (800b210 <TIM_Base_SetConfig+0x120>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d00f      	beq.n	800b18a <TIM_Base_SetConfig+0x9a>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a29      	ldr	r2, [pc, #164]	; (800b214 <TIM_Base_SetConfig+0x124>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d00b      	beq.n	800b18a <TIM_Base_SetConfig+0x9a>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a28      	ldr	r2, [pc, #160]	; (800b218 <TIM_Base_SetConfig+0x128>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d007      	beq.n	800b18a <TIM_Base_SetConfig+0x9a>
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	4a27      	ldr	r2, [pc, #156]	; (800b21c <TIM_Base_SetConfig+0x12c>)
 800b17e:	4293      	cmp	r3, r2
 800b180:	d003      	beq.n	800b18a <TIM_Base_SetConfig+0x9a>
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4a26      	ldr	r2, [pc, #152]	; (800b220 <TIM_Base_SetConfig+0x130>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d108      	bne.n	800b19c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b190:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	68fa      	ldr	r2, [r7, #12]
 800b198:	4313      	orrs	r3, r2
 800b19a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	695b      	ldr	r3, [r3, #20]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	689a      	ldr	r2, [r3, #8]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	681a      	ldr	r2, [r3, #0]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a10      	ldr	r2, [pc, #64]	; (800b204 <TIM_Base_SetConfig+0x114>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d00f      	beq.n	800b1e8 <TIM_Base_SetConfig+0xf8>
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a12      	ldr	r2, [pc, #72]	; (800b214 <TIM_Base_SetConfig+0x124>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d00b      	beq.n	800b1e8 <TIM_Base_SetConfig+0xf8>
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a11      	ldr	r2, [pc, #68]	; (800b218 <TIM_Base_SetConfig+0x128>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d007      	beq.n	800b1e8 <TIM_Base_SetConfig+0xf8>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a10      	ldr	r2, [pc, #64]	; (800b21c <TIM_Base_SetConfig+0x12c>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d003      	beq.n	800b1e8 <TIM_Base_SetConfig+0xf8>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a0f      	ldr	r2, [pc, #60]	; (800b220 <TIM_Base_SetConfig+0x130>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d103      	bne.n	800b1f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	691a      	ldr	r2, [r3, #16]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	615a      	str	r2, [r3, #20]
}
 800b1f6:	bf00      	nop
 800b1f8:	3714      	adds	r7, #20
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr
 800b202:	bf00      	nop
 800b204:	40010000 	.word	0x40010000
 800b208:	40000400 	.word	0x40000400
 800b20c:	40000800 	.word	0x40000800
 800b210:	40000c00 	.word	0x40000c00
 800b214:	40010400 	.word	0x40010400
 800b218:	40014000 	.word	0x40014000
 800b21c:	40014400 	.word	0x40014400
 800b220:	40014800 	.word	0x40014800

0800b224 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b224:	b480      	push	{r7}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a1b      	ldr	r3, [r3, #32]
 800b232:	f023 0201 	bic.w	r2, r3, #1
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6a1b      	ldr	r3, [r3, #32]
 800b23e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	699b      	ldr	r3, [r3, #24]
 800b24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	4b37      	ldr	r3, [pc, #220]	; (800b32c <TIM_OC1_SetConfig+0x108>)
 800b250:	4013      	ands	r3, r2
 800b252:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f023 0303 	bic.w	r3, r3, #3
 800b25a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	4313      	orrs	r3, r2
 800b264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f023 0302 	bic.w	r3, r3, #2
 800b26c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	697a      	ldr	r2, [r7, #20]
 800b274:	4313      	orrs	r3, r2
 800b276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a2d      	ldr	r2, [pc, #180]	; (800b330 <TIM_OC1_SetConfig+0x10c>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d00f      	beq.n	800b2a0 <TIM_OC1_SetConfig+0x7c>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a2c      	ldr	r2, [pc, #176]	; (800b334 <TIM_OC1_SetConfig+0x110>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d00b      	beq.n	800b2a0 <TIM_OC1_SetConfig+0x7c>
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4a2b      	ldr	r2, [pc, #172]	; (800b338 <TIM_OC1_SetConfig+0x114>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d007      	beq.n	800b2a0 <TIM_OC1_SetConfig+0x7c>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	4a2a      	ldr	r2, [pc, #168]	; (800b33c <TIM_OC1_SetConfig+0x118>)
 800b294:	4293      	cmp	r3, r2
 800b296:	d003      	beq.n	800b2a0 <TIM_OC1_SetConfig+0x7c>
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	4a29      	ldr	r2, [pc, #164]	; (800b340 <TIM_OC1_SetConfig+0x11c>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d10c      	bne.n	800b2ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	f023 0308 	bic.w	r3, r3, #8
 800b2a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	68db      	ldr	r3, [r3, #12]
 800b2ac:	697a      	ldr	r2, [r7, #20]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f023 0304 	bic.w	r3, r3, #4
 800b2b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a1c      	ldr	r2, [pc, #112]	; (800b330 <TIM_OC1_SetConfig+0x10c>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d00f      	beq.n	800b2e2 <TIM_OC1_SetConfig+0xbe>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a1b      	ldr	r2, [pc, #108]	; (800b334 <TIM_OC1_SetConfig+0x110>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d00b      	beq.n	800b2e2 <TIM_OC1_SetConfig+0xbe>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	4a1a      	ldr	r2, [pc, #104]	; (800b338 <TIM_OC1_SetConfig+0x114>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d007      	beq.n	800b2e2 <TIM_OC1_SetConfig+0xbe>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a19      	ldr	r2, [pc, #100]	; (800b33c <TIM_OC1_SetConfig+0x118>)
 800b2d6:	4293      	cmp	r3, r2
 800b2d8:	d003      	beq.n	800b2e2 <TIM_OC1_SetConfig+0xbe>
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a18      	ldr	r2, [pc, #96]	; (800b340 <TIM_OC1_SetConfig+0x11c>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d111      	bne.n	800b306 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b2e2:	693b      	ldr	r3, [r7, #16]
 800b2e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b2e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	695b      	ldr	r3, [r3, #20]
 800b2f6:	693a      	ldr	r2, [r7, #16]
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	699b      	ldr	r3, [r3, #24]
 800b300:	693a      	ldr	r2, [r7, #16]
 800b302:	4313      	orrs	r3, r2
 800b304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	68fa      	ldr	r2, [r7, #12]
 800b310:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	697a      	ldr	r2, [r7, #20]
 800b31e:	621a      	str	r2, [r3, #32]
}
 800b320:	bf00      	nop
 800b322:	371c      	adds	r7, #28
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	fffeff8f 	.word	0xfffeff8f
 800b330:	40010000 	.word	0x40010000
 800b334:	40010400 	.word	0x40010400
 800b338:	40014000 	.word	0x40014000
 800b33c:	40014400 	.word	0x40014400
 800b340:	40014800 	.word	0x40014800

0800b344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b344:	b480      	push	{r7}
 800b346:	b087      	sub	sp, #28
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6a1b      	ldr	r3, [r3, #32]
 800b352:	f023 0210 	bic.w	r2, r3, #16
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6a1b      	ldr	r3, [r3, #32]
 800b35e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	699b      	ldr	r3, [r3, #24]
 800b36a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	4b34      	ldr	r3, [pc, #208]	; (800b440 <TIM_OC2_SetConfig+0xfc>)
 800b370:	4013      	ands	r3, r2
 800b372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b37a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	021b      	lsls	r3, r3, #8
 800b382:	68fa      	ldr	r2, [r7, #12]
 800b384:	4313      	orrs	r3, r2
 800b386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	f023 0320 	bic.w	r3, r3, #32
 800b38e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	011b      	lsls	r3, r3, #4
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	4313      	orrs	r3, r2
 800b39a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a29      	ldr	r2, [pc, #164]	; (800b444 <TIM_OC2_SetConfig+0x100>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d003      	beq.n	800b3ac <TIM_OC2_SetConfig+0x68>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a28      	ldr	r2, [pc, #160]	; (800b448 <TIM_OC2_SetConfig+0x104>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d10d      	bne.n	800b3c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b3b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	68db      	ldr	r3, [r3, #12]
 800b3b8:	011b      	lsls	r3, r3, #4
 800b3ba:	697a      	ldr	r2, [r7, #20]
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4a1e      	ldr	r2, [pc, #120]	; (800b444 <TIM_OC2_SetConfig+0x100>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d00f      	beq.n	800b3f0 <TIM_OC2_SetConfig+0xac>
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	4a1d      	ldr	r2, [pc, #116]	; (800b448 <TIM_OC2_SetConfig+0x104>)
 800b3d4:	4293      	cmp	r3, r2
 800b3d6:	d00b      	beq.n	800b3f0 <TIM_OC2_SetConfig+0xac>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	4a1c      	ldr	r2, [pc, #112]	; (800b44c <TIM_OC2_SetConfig+0x108>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d007      	beq.n	800b3f0 <TIM_OC2_SetConfig+0xac>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	4a1b      	ldr	r2, [pc, #108]	; (800b450 <TIM_OC2_SetConfig+0x10c>)
 800b3e4:	4293      	cmp	r3, r2
 800b3e6:	d003      	beq.n	800b3f0 <TIM_OC2_SetConfig+0xac>
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	4a1a      	ldr	r2, [pc, #104]	; (800b454 <TIM_OC2_SetConfig+0x110>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d113      	bne.n	800b418 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b3f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b3fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	695b      	ldr	r3, [r3, #20]
 800b404:	009b      	lsls	r3, r3, #2
 800b406:	693a      	ldr	r2, [r7, #16]
 800b408:	4313      	orrs	r3, r2
 800b40a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	699b      	ldr	r3, [r3, #24]
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	4313      	orrs	r3, r2
 800b416:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	693a      	ldr	r2, [r7, #16]
 800b41c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	68fa      	ldr	r2, [r7, #12]
 800b422:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	685a      	ldr	r2, [r3, #4]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	621a      	str	r2, [r3, #32]
}
 800b432:	bf00      	nop
 800b434:	371c      	adds	r7, #28
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	feff8fff 	.word	0xfeff8fff
 800b444:	40010000 	.word	0x40010000
 800b448:	40010400 	.word	0x40010400
 800b44c:	40014000 	.word	0x40014000
 800b450:	40014400 	.word	0x40014400
 800b454:	40014800 	.word	0x40014800

0800b458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b458:	b480      	push	{r7}
 800b45a:	b087      	sub	sp, #28
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6a1b      	ldr	r3, [r3, #32]
 800b466:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a1b      	ldr	r3, [r3, #32]
 800b472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	69db      	ldr	r3, [r3, #28]
 800b47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	4b33      	ldr	r3, [pc, #204]	; (800b550 <TIM_OC3_SetConfig+0xf8>)
 800b484:	4013      	ands	r3, r2
 800b486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f023 0303 	bic.w	r3, r3, #3
 800b48e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	4313      	orrs	r3, r2
 800b498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b4a2:	683b      	ldr	r3, [r7, #0]
 800b4a4:	689b      	ldr	r3, [r3, #8]
 800b4a6:	021b      	lsls	r3, r3, #8
 800b4a8:	697a      	ldr	r2, [r7, #20]
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	4a28      	ldr	r2, [pc, #160]	; (800b554 <TIM_OC3_SetConfig+0xfc>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d003      	beq.n	800b4be <TIM_OC3_SetConfig+0x66>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	4a27      	ldr	r2, [pc, #156]	; (800b558 <TIM_OC3_SetConfig+0x100>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d10d      	bne.n	800b4da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b4be:	697b      	ldr	r3, [r7, #20]
 800b4c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	68db      	ldr	r3, [r3, #12]
 800b4ca:	021b      	lsls	r3, r3, #8
 800b4cc:	697a      	ldr	r2, [r7, #20]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b4d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a1d      	ldr	r2, [pc, #116]	; (800b554 <TIM_OC3_SetConfig+0xfc>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d00f      	beq.n	800b502 <TIM_OC3_SetConfig+0xaa>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	4a1c      	ldr	r2, [pc, #112]	; (800b558 <TIM_OC3_SetConfig+0x100>)
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d00b      	beq.n	800b502 <TIM_OC3_SetConfig+0xaa>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a1b      	ldr	r2, [pc, #108]	; (800b55c <TIM_OC3_SetConfig+0x104>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d007      	beq.n	800b502 <TIM_OC3_SetConfig+0xaa>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a1a      	ldr	r2, [pc, #104]	; (800b560 <TIM_OC3_SetConfig+0x108>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d003      	beq.n	800b502 <TIM_OC3_SetConfig+0xaa>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a19      	ldr	r2, [pc, #100]	; (800b564 <TIM_OC3_SetConfig+0x10c>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d113      	bne.n	800b52a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b502:	693b      	ldr	r3, [r7, #16]
 800b504:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	695b      	ldr	r3, [r3, #20]
 800b516:	011b      	lsls	r3, r3, #4
 800b518:	693a      	ldr	r2, [r7, #16]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	699b      	ldr	r3, [r3, #24]
 800b522:	011b      	lsls	r3, r3, #4
 800b524:	693a      	ldr	r2, [r7, #16]
 800b526:	4313      	orrs	r3, r2
 800b528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	693a      	ldr	r2, [r7, #16]
 800b52e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	68fa      	ldr	r2, [r7, #12]
 800b534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	685a      	ldr	r2, [r3, #4]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	697a      	ldr	r2, [r7, #20]
 800b542:	621a      	str	r2, [r3, #32]
}
 800b544:	bf00      	nop
 800b546:	371c      	adds	r7, #28
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	fffeff8f 	.word	0xfffeff8f
 800b554:	40010000 	.word	0x40010000
 800b558:	40010400 	.word	0x40010400
 800b55c:	40014000 	.word	0x40014000
 800b560:	40014400 	.word	0x40014400
 800b564:	40014800 	.word	0x40014800

0800b568 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b568:	b480      	push	{r7}
 800b56a:	b087      	sub	sp, #28
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6a1b      	ldr	r3, [r3, #32]
 800b576:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a1b      	ldr	r3, [r3, #32]
 800b582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	685b      	ldr	r3, [r3, #4]
 800b588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	69db      	ldr	r3, [r3, #28]
 800b58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b590:	68fa      	ldr	r2, [r7, #12]
 800b592:	4b24      	ldr	r3, [pc, #144]	; (800b624 <TIM_OC4_SetConfig+0xbc>)
 800b594:	4013      	ands	r3, r2
 800b596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	021b      	lsls	r3, r3, #8
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	031b      	lsls	r3, r3, #12
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a19      	ldr	r2, [pc, #100]	; (800b628 <TIM_OC4_SetConfig+0xc0>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d00f      	beq.n	800b5e8 <TIM_OC4_SetConfig+0x80>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a18      	ldr	r2, [pc, #96]	; (800b62c <TIM_OC4_SetConfig+0xc4>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d00b      	beq.n	800b5e8 <TIM_OC4_SetConfig+0x80>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a17      	ldr	r2, [pc, #92]	; (800b630 <TIM_OC4_SetConfig+0xc8>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d007      	beq.n	800b5e8 <TIM_OC4_SetConfig+0x80>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4a16      	ldr	r2, [pc, #88]	; (800b634 <TIM_OC4_SetConfig+0xcc>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d003      	beq.n	800b5e8 <TIM_OC4_SetConfig+0x80>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4a15      	ldr	r2, [pc, #84]	; (800b638 <TIM_OC4_SetConfig+0xd0>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d109      	bne.n	800b5fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b5ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	019b      	lsls	r3, r3, #6
 800b5f6:	697a      	ldr	r2, [r7, #20]
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	697a      	ldr	r2, [r7, #20]
 800b600:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	68fa      	ldr	r2, [r7, #12]
 800b606:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	685a      	ldr	r2, [r3, #4]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	693a      	ldr	r2, [r7, #16]
 800b614:	621a      	str	r2, [r3, #32]
}
 800b616:	bf00      	nop
 800b618:	371c      	adds	r7, #28
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	feff8fff 	.word	0xfeff8fff
 800b628:	40010000 	.word	0x40010000
 800b62c:	40010400 	.word	0x40010400
 800b630:	40014000 	.word	0x40014000
 800b634:	40014400 	.word	0x40014400
 800b638:	40014800 	.word	0x40014800

0800b63c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b087      	sub	sp, #28
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a1b      	ldr	r3, [r3, #32]
 800b64a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6a1b      	ldr	r3, [r3, #32]
 800b656:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	4b21      	ldr	r3, [pc, #132]	; (800b6ec <TIM_OC5_SetConfig+0xb0>)
 800b668:	4013      	ands	r3, r2
 800b66a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	4313      	orrs	r3, r2
 800b674:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b67c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	041b      	lsls	r3, r3, #16
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	4313      	orrs	r3, r2
 800b688:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	4a18      	ldr	r2, [pc, #96]	; (800b6f0 <TIM_OC5_SetConfig+0xb4>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d00f      	beq.n	800b6b2 <TIM_OC5_SetConfig+0x76>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	4a17      	ldr	r2, [pc, #92]	; (800b6f4 <TIM_OC5_SetConfig+0xb8>)
 800b696:	4293      	cmp	r3, r2
 800b698:	d00b      	beq.n	800b6b2 <TIM_OC5_SetConfig+0x76>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a16      	ldr	r2, [pc, #88]	; (800b6f8 <TIM_OC5_SetConfig+0xbc>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d007      	beq.n	800b6b2 <TIM_OC5_SetConfig+0x76>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a15      	ldr	r2, [pc, #84]	; (800b6fc <TIM_OC5_SetConfig+0xc0>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d003      	beq.n	800b6b2 <TIM_OC5_SetConfig+0x76>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a14      	ldr	r2, [pc, #80]	; (800b700 <TIM_OC5_SetConfig+0xc4>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d109      	bne.n	800b6c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b6b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	695b      	ldr	r3, [r3, #20]
 800b6be:	021b      	lsls	r3, r3, #8
 800b6c0:	697a      	ldr	r2, [r7, #20]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	697a      	ldr	r2, [r7, #20]
 800b6ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b6d2:	683b      	ldr	r3, [r7, #0]
 800b6d4:	685a      	ldr	r2, [r3, #4]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	621a      	str	r2, [r3, #32]
}
 800b6e0:	bf00      	nop
 800b6e2:	371c      	adds	r7, #28
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr
 800b6ec:	fffeff8f 	.word	0xfffeff8f
 800b6f0:	40010000 	.word	0x40010000
 800b6f4:	40010400 	.word	0x40010400
 800b6f8:	40014000 	.word	0x40014000
 800b6fc:	40014400 	.word	0x40014400
 800b700:	40014800 	.word	0x40014800

0800b704 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b704:	b480      	push	{r7}
 800b706:	b087      	sub	sp, #28
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6a1b      	ldr	r3, [r3, #32]
 800b71e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b72a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	4b22      	ldr	r3, [pc, #136]	; (800b7b8 <TIM_OC6_SetConfig+0xb4>)
 800b730:	4013      	ands	r3, r2
 800b732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	021b      	lsls	r3, r3, #8
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b746:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	051b      	lsls	r3, r3, #20
 800b74e:	693a      	ldr	r2, [r7, #16]
 800b750:	4313      	orrs	r3, r2
 800b752:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4a19      	ldr	r2, [pc, #100]	; (800b7bc <TIM_OC6_SetConfig+0xb8>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d00f      	beq.n	800b77c <TIM_OC6_SetConfig+0x78>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	4a18      	ldr	r2, [pc, #96]	; (800b7c0 <TIM_OC6_SetConfig+0xbc>)
 800b760:	4293      	cmp	r3, r2
 800b762:	d00b      	beq.n	800b77c <TIM_OC6_SetConfig+0x78>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4a17      	ldr	r2, [pc, #92]	; (800b7c4 <TIM_OC6_SetConfig+0xc0>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d007      	beq.n	800b77c <TIM_OC6_SetConfig+0x78>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	4a16      	ldr	r2, [pc, #88]	; (800b7c8 <TIM_OC6_SetConfig+0xc4>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d003      	beq.n	800b77c <TIM_OC6_SetConfig+0x78>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	4a15      	ldr	r2, [pc, #84]	; (800b7cc <TIM_OC6_SetConfig+0xc8>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d109      	bne.n	800b790 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b77c:	697b      	ldr	r3, [r7, #20]
 800b77e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b782:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	695b      	ldr	r3, [r3, #20]
 800b788:	029b      	lsls	r3, r3, #10
 800b78a:	697a      	ldr	r2, [r7, #20]
 800b78c:	4313      	orrs	r3, r2
 800b78e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	685a      	ldr	r2, [r3, #4]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	693a      	ldr	r2, [r7, #16]
 800b7a8:	621a      	str	r2, [r3, #32]
}
 800b7aa:	bf00      	nop
 800b7ac:	371c      	adds	r7, #28
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	feff8fff 	.word	0xfeff8fff
 800b7bc:	40010000 	.word	0x40010000
 800b7c0:	40010400 	.word	0x40010400
 800b7c4:	40014000 	.word	0x40014000
 800b7c8:	40014400 	.word	0x40014400
 800b7cc:	40014800 	.word	0x40014800

0800b7d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b087      	sub	sp, #28
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6a1b      	ldr	r3, [r3, #32]
 800b7e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	6a1b      	ldr	r3, [r3, #32]
 800b7e6:	f023 0201 	bic.w	r2, r3, #1
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	011b      	lsls	r3, r3, #4
 800b800:	693a      	ldr	r2, [r7, #16]
 800b802:	4313      	orrs	r3, r2
 800b804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	f023 030a 	bic.w	r3, r3, #10
 800b80c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b80e:	697a      	ldr	r2, [r7, #20]
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	4313      	orrs	r3, r2
 800b814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	697a      	ldr	r2, [r7, #20]
 800b820:	621a      	str	r2, [r3, #32]
}
 800b822:	bf00      	nop
 800b824:	371c      	adds	r7, #28
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b82e:	b480      	push	{r7}
 800b830:	b087      	sub	sp, #28
 800b832:	af00      	add	r7, sp, #0
 800b834:	60f8      	str	r0, [r7, #12]
 800b836:	60b9      	str	r1, [r7, #8]
 800b838:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	6a1b      	ldr	r3, [r3, #32]
 800b83e:	f023 0210 	bic.w	r2, r3, #16
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	699b      	ldr	r3, [r3, #24]
 800b84a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6a1b      	ldr	r3, [r3, #32]
 800b850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b858:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	031b      	lsls	r3, r3, #12
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	4313      	orrs	r3, r2
 800b862:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b86a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b86c:	68bb      	ldr	r3, [r7, #8]
 800b86e:	011b      	lsls	r3, r3, #4
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	4313      	orrs	r3, r2
 800b874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	697a      	ldr	r2, [r7, #20]
 800b87a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	693a      	ldr	r2, [r7, #16]
 800b880:	621a      	str	r2, [r3, #32]
}
 800b882:	bf00      	nop
 800b884:	371c      	adds	r7, #28
 800b886:	46bd      	mov	sp, r7
 800b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88c:	4770      	bx	lr
	...

0800b890 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b890:	b480      	push	{r7}
 800b892:	b085      	sub	sp, #20
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
 800b898:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	689b      	ldr	r3, [r3, #8]
 800b89e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8a0:	68fa      	ldr	r2, [r7, #12]
 800b8a2:	4b09      	ldr	r3, [pc, #36]	; (800b8c8 <TIM_ITRx_SetConfig+0x38>)
 800b8a4:	4013      	ands	r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8a8:	683a      	ldr	r2, [r7, #0]
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	4313      	orrs	r3, r2
 800b8ae:	f043 0307 	orr.w	r3, r3, #7
 800b8b2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	68fa      	ldr	r2, [r7, #12]
 800b8b8:	609a      	str	r2, [r3, #8]
}
 800b8ba:	bf00      	nop
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	ffcfff8f 	.word	0xffcfff8f

0800b8cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b087      	sub	sp, #28
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
 800b8d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	689b      	ldr	r3, [r3, #8]
 800b8de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b8e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	021a      	lsls	r2, r3, #8
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	431a      	orrs	r2, r3
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	697a      	ldr	r2, [r7, #20]
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	609a      	str	r2, [r3, #8]
}
 800b900:	bf00      	nop
 800b902:	371c      	adds	r7, #28
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr

0800b90c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b087      	sub	sp, #28
 800b910:	af00      	add	r7, sp, #0
 800b912:	60f8      	str	r0, [r7, #12]
 800b914:	60b9      	str	r1, [r7, #8]
 800b916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	f003 031f 	and.w	r3, r3, #31
 800b91e:	2201      	movs	r2, #1
 800b920:	fa02 f303 	lsl.w	r3, r2, r3
 800b924:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	6a1a      	ldr	r2, [r3, #32]
 800b92a:	697b      	ldr	r3, [r7, #20]
 800b92c:	43db      	mvns	r3, r3
 800b92e:	401a      	ands	r2, r3
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	6a1a      	ldr	r2, [r3, #32]
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	f003 031f 	and.w	r3, r3, #31
 800b93e:	6879      	ldr	r1, [r7, #4]
 800b940:	fa01 f303 	lsl.w	r3, r1, r3
 800b944:	431a      	orrs	r2, r3
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	621a      	str	r2, [r3, #32]
}
 800b94a:	bf00      	nop
 800b94c:	371c      	adds	r7, #28
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr
	...

0800b958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b958:	b480      	push	{r7}
 800b95a:	b085      	sub	sp, #20
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d101      	bne.n	800b970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b96c:	2302      	movs	r3, #2
 800b96e:	e06d      	b.n	800ba4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2201      	movs	r2, #1
 800b974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2202      	movs	r2, #2
 800b97c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4a30      	ldr	r2, [pc, #192]	; (800ba58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d004      	beq.n	800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	4a2f      	ldr	r2, [pc, #188]	; (800ba5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b9a0:	4293      	cmp	r3, r2
 800b9a2:	d108      	bne.n	800b9b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b9aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	4a20      	ldr	r2, [pc, #128]	; (800ba58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	d022      	beq.n	800ba20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9e2:	d01d      	beq.n	800ba20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a1d      	ldr	r2, [pc, #116]	; (800ba60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d018      	beq.n	800ba20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	4a1c      	ldr	r2, [pc, #112]	; (800ba64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b9f4:	4293      	cmp	r3, r2
 800b9f6:	d013      	beq.n	800ba20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a1a      	ldr	r2, [pc, #104]	; (800ba68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d00e      	beq.n	800ba20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4a15      	ldr	r2, [pc, #84]	; (800ba5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ba08:	4293      	cmp	r3, r2
 800ba0a:	d009      	beq.n	800ba20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a16      	ldr	r2, [pc, #88]	; (800ba6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d004      	beq.n	800ba20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a15      	ldr	r2, [pc, #84]	; (800ba70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d10c      	bne.n	800ba3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	4313      	orrs	r3, r2
 800ba30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	68ba      	ldr	r2, [r7, #8]
 800ba38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3714      	adds	r7, #20
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr
 800ba58:	40010000 	.word	0x40010000
 800ba5c:	40010400 	.word	0x40010400
 800ba60:	40000400 	.word	0x40000400
 800ba64:	40000800 	.word	0x40000800
 800ba68:	40000c00 	.word	0x40000c00
 800ba6c:	40001800 	.word	0x40001800
 800ba70:	40014000 	.word	0x40014000

0800ba74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d101      	bne.n	800ba90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	e065      	b.n	800bb5c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2201      	movs	r2, #1
 800ba94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	4313      	orrs	r3, r2
 800baa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	4313      	orrs	r3, r2
 800bac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	4313      	orrs	r3, r2
 800bace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	691b      	ldr	r3, [r3, #16]
 800bada:	4313      	orrs	r3, r2
 800badc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	695b      	ldr	r3, [r3, #20]
 800bae8:	4313      	orrs	r3, r2
 800baea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf6:	4313      	orrs	r3, r2
 800baf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	041b      	lsls	r3, r3, #16
 800bb06:	4313      	orrs	r3, r2
 800bb08:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a16      	ldr	r2, [pc, #88]	; (800bb68 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d004      	beq.n	800bb1e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a14      	ldr	r2, [pc, #80]	; (800bb6c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d115      	bne.n	800bb4a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb28:	051b      	lsls	r3, r3, #20
 800bb2a:	4313      	orrs	r3, r2
 800bb2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	69db      	ldr	r3, [r3, #28]
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	6a1b      	ldr	r3, [r3, #32]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68fa      	ldr	r2, [r7, #12]
 800bb50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb5a:	2300      	movs	r3, #0
}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3714      	adds	r7, #20
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr
 800bb68:	40010000 	.word	0x40010000
 800bb6c:	40010400 	.word	0x40010400

0800bb70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b083      	sub	sp, #12
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bb78:	bf00      	nop
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bb8c:	bf00      	nop
 800bb8e:	370c      	adds	r7, #12
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bba0:	bf00      	nop
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d101      	bne.n	800bbbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e042      	b.n	800bc44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d106      	bne.n	800bbd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f7f8 fa4f 	bl	8004074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2224      	movs	r2, #36	; 0x24
 800bbda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	681a      	ldr	r2, [r3, #0]
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f022 0201 	bic.w	r2, r2, #1
 800bbec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fdee 	bl	800c7d0 <UART_SetConfig>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b01      	cmp	r3, #1
 800bbf8:	d101      	bne.n	800bbfe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	e022      	b.n	800bc44 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d002      	beq.n	800bc0c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f001 fb42 	bl	800d290 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	685a      	ldr	r2, [r3, #4]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	689a      	ldr	r2, [r3, #8]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f042 0201 	orr.w	r2, r2, #1
 800bc3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f001 fbc9 	bl	800d3d4 <UART_CheckIdleState>
 800bc42:	4603      	mov	r3, r0
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3708      	adds	r7, #8
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b08a      	sub	sp, #40	; 0x28
 800bc50:	af02      	add	r7, sp, #8
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	603b      	str	r3, [r7, #0]
 800bc58:	4613      	mov	r3, r2
 800bc5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc62:	2b20      	cmp	r3, #32
 800bc64:	f040 8083 	bne.w	800bd6e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d002      	beq.n	800bc74 <HAL_UART_Transmit+0x28>
 800bc6e:	88fb      	ldrh	r3, [r7, #6]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d101      	bne.n	800bc78 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	e07b      	b.n	800bd70 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc7e:	2b01      	cmp	r3, #1
 800bc80:	d101      	bne.n	800bc86 <HAL_UART_Transmit+0x3a>
 800bc82:	2302      	movs	r3, #2
 800bc84:	e074      	b.n	800bd70 <HAL_UART_Transmit+0x124>
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	2201      	movs	r2, #1
 800bc8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2200      	movs	r2, #0
 800bc92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2221      	movs	r2, #33	; 0x21
 800bc9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc9e:	f7f8 fccf 	bl	8004640 <HAL_GetTick>
 800bca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	88fa      	ldrh	r2, [r7, #6]
 800bca8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	88fa      	ldrh	r2, [r7, #6]
 800bcb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcbc:	d108      	bne.n	800bcd0 <HAL_UART_Transmit+0x84>
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d104      	bne.n	800bcd0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	61bb      	str	r3, [r7, #24]
 800bcce:	e003      	b.n	800bcd8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bce0:	e02c      	b.n	800bd3c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	9300      	str	r3, [sp, #0]
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	2200      	movs	r2, #0
 800bcea:	2180      	movs	r1, #128	; 0x80
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	f001 fbbc 	bl	800d46a <UART_WaitOnFlagUntilTimeout>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d001      	beq.n	800bcfc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bcf8:	2303      	movs	r3, #3
 800bcfa:	e039      	b.n	800bd70 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bcfc:	69fb      	ldr	r3, [r7, #28]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10b      	bne.n	800bd1a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bd02:	69bb      	ldr	r3, [r7, #24]
 800bd04:	881b      	ldrh	r3, [r3, #0]
 800bd06:	461a      	mov	r2, r3
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	3302      	adds	r3, #2
 800bd16:	61bb      	str	r3, [r7, #24]
 800bd18:	e007      	b.n	800bd2a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	781a      	ldrb	r2, [r3, #0]
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	3301      	adds	r3, #1
 800bd28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	3b01      	subs	r3, #1
 800bd34:	b29a      	uxth	r2, r3
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d1cc      	bne.n	800bce2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	2140      	movs	r1, #64	; 0x40
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	f001 fb89 	bl	800d46a <UART_WaitOnFlagUntilTimeout>
 800bd58:	4603      	mov	r3, r0
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d001      	beq.n	800bd62 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800bd5e:	2303      	movs	r3, #3
 800bd60:	e006      	b.n	800bd70 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	2220      	movs	r2, #32
 800bd66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	e000      	b.n	800bd70 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bd6e:	2302      	movs	r3, #2
  }
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3720      	adds	r7, #32
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b08a      	sub	sp, #40	; 0x28
 800bd7c:	af02      	add	r7, sp, #8
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	603b      	str	r3, [r7, #0]
 800bd84:	4613      	mov	r3, r2
 800bd86:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd8e:	2b20      	cmp	r3, #32
 800bd90:	f040 80c0 	bne.w	800bf14 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d002      	beq.n	800bda0 <HAL_UART_Receive+0x28>
 800bd9a:	88fb      	ldrh	r3, [r7, #6]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d101      	bne.n	800bda4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	e0b8      	b.n	800bf16 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bdaa:	2b01      	cmp	r3, #1
 800bdac:	d101      	bne.n	800bdb2 <HAL_UART_Receive+0x3a>
 800bdae:	2302      	movs	r3, #2
 800bdb0:	e0b1      	b.n	800bf16 <HAL_UART_Receive+0x19e>
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2222      	movs	r2, #34	; 0x22
 800bdc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2200      	movs	r2, #0
 800bdce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bdd0:	f7f8 fc36 	bl	8004640 <HAL_GetTick>
 800bdd4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	88fa      	ldrh	r2, [r7, #6]
 800bdda:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	88fa      	ldrh	r2, [r7, #6]
 800bde2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdee:	d10e      	bne.n	800be0e <HAL_UART_Receive+0x96>
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	691b      	ldr	r3, [r3, #16]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d105      	bne.n	800be04 <HAL_UART_Receive+0x8c>
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bdfe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be02:	e02d      	b.n	800be60 <HAL_UART_Receive+0xe8>
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	22ff      	movs	r2, #255	; 0xff
 800be08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be0c:	e028      	b.n	800be60 <HAL_UART_Receive+0xe8>
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d10d      	bne.n	800be32 <HAL_UART_Receive+0xba>
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	691b      	ldr	r3, [r3, #16]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d104      	bne.n	800be28 <HAL_UART_Receive+0xb0>
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	22ff      	movs	r2, #255	; 0xff
 800be22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be26:	e01b      	b.n	800be60 <HAL_UART_Receive+0xe8>
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	227f      	movs	r2, #127	; 0x7f
 800be2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be30:	e016      	b.n	800be60 <HAL_UART_Receive+0xe8>
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be3a:	d10d      	bne.n	800be58 <HAL_UART_Receive+0xe0>
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	691b      	ldr	r3, [r3, #16]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d104      	bne.n	800be4e <HAL_UART_Receive+0xd6>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	227f      	movs	r2, #127	; 0x7f
 800be48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be4c:	e008      	b.n	800be60 <HAL_UART_Receive+0xe8>
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	223f      	movs	r2, #63	; 0x3f
 800be52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be56:	e003      	b.n	800be60 <HAL_UART_Receive+0xe8>
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800be66:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be70:	d108      	bne.n	800be84 <HAL_UART_Receive+0x10c>
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	2b00      	cmp	r3, #0
 800be78:	d104      	bne.n	800be84 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800be7a:	2300      	movs	r3, #0
 800be7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	61bb      	str	r3, [r7, #24]
 800be82:	e003      	b.n	800be8c <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800be88:	2300      	movs	r3, #0
 800be8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2200      	movs	r2, #0
 800be90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800be94:	e032      	b.n	800befc <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	9300      	str	r3, [sp, #0]
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	2200      	movs	r2, #0
 800be9e:	2120      	movs	r1, #32
 800bea0:	68f8      	ldr	r0, [r7, #12]
 800bea2:	f001 fae2 	bl	800d46a <UART_WaitOnFlagUntilTimeout>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800beac:	2303      	movs	r3, #3
 800beae:	e032      	b.n	800bf16 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10c      	bne.n	800bed0 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bebc:	b29a      	uxth	r2, r3
 800bebe:	8a7b      	ldrh	r3, [r7, #18]
 800bec0:	4013      	ands	r3, r2
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	3302      	adds	r3, #2
 800becc:	61bb      	str	r3, [r7, #24]
 800bece:	e00c      	b.n	800beea <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	8a7b      	ldrh	r3, [r7, #18]
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	4013      	ands	r3, r2
 800bede:	b2da      	uxtb	r2, r3
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	3301      	adds	r3, #1
 800bee8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	3b01      	subs	r3, #1
 800bef4:	b29a      	uxth	r2, r3
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d1c6      	bne.n	800be96 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2220      	movs	r2, #32
 800bf0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	e000      	b.n	800bf16 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800bf14:	2302      	movs	r3, #2
  }
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3720      	adds	r7, #32
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
	...

0800bf20 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b08a      	sub	sp, #40	; 0x28
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	60b9      	str	r1, [r7, #8]
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bf34:	2b20      	cmp	r3, #32
 800bf36:	d17a      	bne.n	800c02e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d002      	beq.n	800bf44 <HAL_UART_Transmit_DMA+0x24>
 800bf3e:	88fb      	ldrh	r3, [r7, #6]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d101      	bne.n	800bf48 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	e073      	b.n	800c030 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf4e:	2b01      	cmp	r3, #1
 800bf50:	d101      	bne.n	800bf56 <HAL_UART_Transmit_DMA+0x36>
 800bf52:	2302      	movs	r3, #2
 800bf54:	e06c      	b.n	800c030 <HAL_UART_Transmit_DMA+0x110>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2201      	movs	r2, #1
 800bf5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	88fa      	ldrh	r2, [r7, #6]
 800bf68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	88fa      	ldrh	r2, [r7, #6]
 800bf70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2200      	movs	r2, #0
 800bf78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2221      	movs	r2, #33	; 0x21
 800bf80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d02c      	beq.n	800bfe6 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf90:	4a29      	ldr	r2, [pc, #164]	; (800c038 <HAL_UART_Transmit_DMA+0x118>)
 800bf92:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf98:	4a28      	ldr	r2, [pc, #160]	; (800c03c <HAL_UART_Transmit_DMA+0x11c>)
 800bf9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfa0:	4a27      	ldr	r2, [pc, #156]	; (800c040 <HAL_UART_Transmit_DMA+0x120>)
 800bfa2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfb4:	4619      	mov	r1, r3
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	3328      	adds	r3, #40	; 0x28
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	88fb      	ldrh	r3, [r7, #6]
 800bfc0:	f7f9 f9cc 	bl	800535c <HAL_DMA_Start_IT>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00d      	beq.n	800bfe6 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2210      	movs	r2, #16
 800bfce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2220      	movs	r2, #32
 800bfde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e024      	b.n	800c030 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2240      	movs	r2, #64	; 0x40
 800bfec:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	3308      	adds	r3, #8
 800bffc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	e853 3f00 	ldrex	r3, [r3]
 800c004:	613b      	str	r3, [r7, #16]
   return(result);
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c00c:	627b      	str	r3, [r7, #36]	; 0x24
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	3308      	adds	r3, #8
 800c014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c016:	623a      	str	r2, [r7, #32]
 800c018:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01a:	69f9      	ldr	r1, [r7, #28]
 800c01c:	6a3a      	ldr	r2, [r7, #32]
 800c01e:	e841 2300 	strex	r3, r2, [r1]
 800c022:	61bb      	str	r3, [r7, #24]
   return(result);
 800c024:	69bb      	ldr	r3, [r7, #24]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1e5      	bne.n	800bff6 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	e000      	b.n	800c030 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c02e:	2302      	movs	r3, #2
  }
}
 800c030:	4618      	mov	r0, r3
 800c032:	3728      	adds	r7, #40	; 0x28
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	0800d89d 	.word	0x0800d89d
 800c03c:	0800d933 	.word	0x0800d933
 800c040:	0800daa9 	.word	0x0800daa9

0800c044 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b0ba      	sub	sp, #232	; 0xe8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	69db      	ldr	r3, [r3, #28]
 800c052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c06a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c06e:	f640 030f 	movw	r3, #2063	; 0x80f
 800c072:	4013      	ands	r3, r2
 800c074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d11b      	bne.n	800c0b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c084:	f003 0320 	and.w	r3, r3, #32
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d015      	beq.n	800c0b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c08c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c090:	f003 0320 	and.w	r3, r3, #32
 800c094:	2b00      	cmp	r3, #0
 800c096:	d105      	bne.n	800c0a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c09c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d009      	beq.n	800c0b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f000 835a 	beq.w	800c762 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	4798      	blx	r3
      }
      return;
 800c0b6:	e354      	b.n	800c762 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c0b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f000 811f 	beq.w	800c300 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c0c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c0c6:	4b8b      	ldr	r3, [pc, #556]	; (800c2f4 <HAL_UART_IRQHandler+0x2b0>)
 800c0c8:	4013      	ands	r3, r2
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d106      	bne.n	800c0dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c0ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c0d2:	4b89      	ldr	r3, [pc, #548]	; (800c2f8 <HAL_UART_IRQHandler+0x2b4>)
 800c0d4:	4013      	ands	r3, r2
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 8112 	beq.w	800c300 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0e0:	f003 0301 	and.w	r3, r3, #1
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d011      	beq.n	800c10c <HAL_UART_IRQHandler+0xc8>
 800c0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d00b      	beq.n	800c10c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c102:	f043 0201 	orr.w	r2, r3, #1
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c10c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c110:	f003 0302 	and.w	r3, r3, #2
 800c114:	2b00      	cmp	r3, #0
 800c116:	d011      	beq.n	800c13c <HAL_UART_IRQHandler+0xf8>
 800c118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c11c:	f003 0301 	and.w	r3, r3, #1
 800c120:	2b00      	cmp	r3, #0
 800c122:	d00b      	beq.n	800c13c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2202      	movs	r2, #2
 800c12a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c132:	f043 0204 	orr.w	r2, r3, #4
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c140:	f003 0304 	and.w	r3, r3, #4
 800c144:	2b00      	cmp	r3, #0
 800c146:	d011      	beq.n	800c16c <HAL_UART_IRQHandler+0x128>
 800c148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c14c:	f003 0301 	and.w	r3, r3, #1
 800c150:	2b00      	cmp	r3, #0
 800c152:	d00b      	beq.n	800c16c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2204      	movs	r2, #4
 800c15a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c162:	f043 0202 	orr.w	r2, r3, #2
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c170:	f003 0308 	and.w	r3, r3, #8
 800c174:	2b00      	cmp	r3, #0
 800c176:	d017      	beq.n	800c1a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c178:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c17c:	f003 0320 	and.w	r3, r3, #32
 800c180:	2b00      	cmp	r3, #0
 800c182:	d105      	bne.n	800c190 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c184:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c188:	4b5a      	ldr	r3, [pc, #360]	; (800c2f4 <HAL_UART_IRQHandler+0x2b0>)
 800c18a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d00b      	beq.n	800c1a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2208      	movs	r2, #8
 800c196:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c19e:	f043 0208 	orr.w	r2, r3, #8
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c1a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d012      	beq.n	800c1da <HAL_UART_IRQHandler+0x196>
 800c1b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00c      	beq.n	800c1da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c1c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1d0:	f043 0220 	orr.w	r2, r3, #32
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	f000 82c0 	beq.w	800c766 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c1e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ea:	f003 0320 	and.w	r3, r3, #32
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d013      	beq.n	800c21a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c1f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1f6:	f003 0320 	and.w	r3, r3, #32
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d105      	bne.n	800c20a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c1fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c206:	2b00      	cmp	r3, #0
 800c208:	d007      	beq.n	800c21a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d003      	beq.n	800c21a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c220:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c22e:	2b40      	cmp	r3, #64	; 0x40
 800c230:	d005      	beq.n	800c23e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c232:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c236:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d04f      	beq.n	800c2de <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f001 fac6 	bl	800d7d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	689b      	ldr	r3, [r3, #8]
 800c24a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c24e:	2b40      	cmp	r3, #64	; 0x40
 800c250:	d141      	bne.n	800c2d6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	3308      	adds	r3, #8
 800c258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c25c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c260:	e853 3f00 	ldrex	r3, [r3]
 800c264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c268:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c26c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c270:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	3308      	adds	r3, #8
 800c27a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c27e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c282:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c286:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c28a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c28e:	e841 2300 	strex	r3, r2, [r1]
 800c292:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c296:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d1d9      	bne.n	800c252 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d013      	beq.n	800c2ce <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2aa:	4a14      	ldr	r2, [pc, #80]	; (800c2fc <HAL_UART_IRQHandler+0x2b8>)
 800c2ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f7f9 fdda 	bl	8005e6c <HAL_DMA_Abort_IT>
 800c2b8:	4603      	mov	r3, r0
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d017      	beq.n	800c2ee <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c2c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2cc:	e00f      	b.n	800c2ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fa74 	bl	800c7bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2d4:	e00b      	b.n	800c2ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 fa70 	bl	800c7bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2dc:	e007      	b.n	800c2ee <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 fa6c 	bl	800c7bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c2ec:	e23b      	b.n	800c766 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2ee:	bf00      	nop
    return;
 800c2f0:	e239      	b.n	800c766 <HAL_UART_IRQHandler+0x722>
 800c2f2:	bf00      	nop
 800c2f4:	10000001 	.word	0x10000001
 800c2f8:	04000120 	.word	0x04000120
 800c2fc:	0800db29 	.word	0x0800db29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c304:	2b01      	cmp	r3, #1
 800c306:	f040 81ce 	bne.w	800c6a6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c30a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c30e:	f003 0310 	and.w	r3, r3, #16
 800c312:	2b00      	cmp	r3, #0
 800c314:	f000 81c7 	beq.w	800c6a6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c31c:	f003 0310 	and.w	r3, r3, #16
 800c320:	2b00      	cmp	r3, #0
 800c322:	f000 81c0 	beq.w	800c6a6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	2210      	movs	r2, #16
 800c32c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	689b      	ldr	r3, [r3, #8]
 800c334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c338:	2b40      	cmp	r3, #64	; 0x40
 800c33a:	f040 813b 	bne.w	800c5b4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a8b      	ldr	r2, [pc, #556]	; (800c574 <HAL_UART_IRQHandler+0x530>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d059      	beq.n	800c3fe <HAL_UART_IRQHandler+0x3ba>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a89      	ldr	r2, [pc, #548]	; (800c578 <HAL_UART_IRQHandler+0x534>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d053      	beq.n	800c3fe <HAL_UART_IRQHandler+0x3ba>
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a87      	ldr	r2, [pc, #540]	; (800c57c <HAL_UART_IRQHandler+0x538>)
 800c35e:	4293      	cmp	r3, r2
 800c360:	d04d      	beq.n	800c3fe <HAL_UART_IRQHandler+0x3ba>
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	4a85      	ldr	r2, [pc, #532]	; (800c580 <HAL_UART_IRQHandler+0x53c>)
 800c36a:	4293      	cmp	r3, r2
 800c36c:	d047      	beq.n	800c3fe <HAL_UART_IRQHandler+0x3ba>
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a83      	ldr	r2, [pc, #524]	; (800c584 <HAL_UART_IRQHandler+0x540>)
 800c376:	4293      	cmp	r3, r2
 800c378:	d041      	beq.n	800c3fe <HAL_UART_IRQHandler+0x3ba>
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a81      	ldr	r2, [pc, #516]	; (800c588 <HAL_UART_IRQHandler+0x544>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d03b      	beq.n	800c3fe <HAL_UART_IRQHandler+0x3ba>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a7f      	ldr	r2, [pc, #508]	; (800c58c <HAL_UART_IRQHandler+0x548>)
 800c38e:	4293      	cmp	r3, r2
 800c390:	d035      	beq.n	800c3fe <HAL_UART_IRQHandler+0x3ba>
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	4a7d      	ldr	r2, [pc, #500]	; (800c590 <HAL_UART_IRQHandler+0x54c>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d02f      	beq.n	800c3fe <HAL_UART_IRQHandler+0x3ba>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a7b      	ldr	r2, [pc, #492]	; (800c594 <HAL_UART_IRQHandler+0x550>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d029      	beq.n	800c3fe <HAL_UART_IRQHandler+0x3ba>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	4a79      	ldr	r2, [pc, #484]	; (800c598 <HAL_UART_IRQHandler+0x554>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d023      	beq.n	800c3fe <HAL_UART_IRQHandler+0x3ba>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a77      	ldr	r2, [pc, #476]	; (800c59c <HAL_UART_IRQHandler+0x558>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d01d      	beq.n	800c3fe <HAL_UART_IRQHandler+0x3ba>
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	4a75      	ldr	r2, [pc, #468]	; (800c5a0 <HAL_UART_IRQHandler+0x55c>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d017      	beq.n	800c3fe <HAL_UART_IRQHandler+0x3ba>
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a73      	ldr	r2, [pc, #460]	; (800c5a4 <HAL_UART_IRQHandler+0x560>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	d011      	beq.n	800c3fe <HAL_UART_IRQHandler+0x3ba>
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a71      	ldr	r2, [pc, #452]	; (800c5a8 <HAL_UART_IRQHandler+0x564>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	d00b      	beq.n	800c3fe <HAL_UART_IRQHandler+0x3ba>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a6f      	ldr	r2, [pc, #444]	; (800c5ac <HAL_UART_IRQHandler+0x568>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	d005      	beq.n	800c3fe <HAL_UART_IRQHandler+0x3ba>
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4a6d      	ldr	r2, [pc, #436]	; (800c5b0 <HAL_UART_IRQHandler+0x56c>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	d105      	bne.n	800c40a <HAL_UART_IRQHandler+0x3c6>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	685b      	ldr	r3, [r3, #4]
 800c406:	b29b      	uxth	r3, r3
 800c408:	e004      	b.n	800c414 <HAL_UART_IRQHandler+0x3d0>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	b29b      	uxth	r3, r3
 800c414:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c418:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	f000 81a4 	beq.w	800c76a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c428:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c42c:	429a      	cmp	r2, r3
 800c42e:	f080 819c 	bcs.w	800c76a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c438:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c440:	69db      	ldr	r3, [r3, #28]
 800c442:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c446:	f000 8086 	beq.w	800c556 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c452:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c456:	e853 3f00 	ldrex	r3, [r3]
 800c45a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c45e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c462:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c466:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	461a      	mov	r2, r3
 800c470:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c474:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c478:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c480:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c484:	e841 2300 	strex	r3, r2, [r1]
 800c488:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c48c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1da      	bne.n	800c44a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	3308      	adds	r3, #8
 800c49a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c49e:	e853 3f00 	ldrex	r3, [r3]
 800c4a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c4a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4a6:	f023 0301 	bic.w	r3, r3, #1
 800c4aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	3308      	adds	r3, #8
 800c4b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c4b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c4bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c4c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c4c4:	e841 2300 	strex	r3, r2, [r1]
 800c4c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c4ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d1e1      	bne.n	800c494 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	3308      	adds	r3, #8
 800c4d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4da:	e853 3f00 	ldrex	r3, [r3]
 800c4de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c4e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	3308      	adds	r3, #8
 800c4f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c4f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c4f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c4fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c4fc:	e841 2300 	strex	r3, r2, [r1]
 800c500:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c502:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1e3      	bne.n	800c4d0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2220      	movs	r2, #32
 800c50c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c51e:	e853 3f00 	ldrex	r3, [r3]
 800c522:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c526:	f023 0310 	bic.w	r3, r3, #16
 800c52a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	461a      	mov	r2, r3
 800c534:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c538:	65bb      	str	r3, [r7, #88]	; 0x58
 800c53a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c53e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c540:	e841 2300 	strex	r3, r2, [r1]
 800c544:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d1e4      	bne.n	800c516 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c550:	4618      	mov	r0, r3
 800c552:	f7f9 f96d 	bl	8005830 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c562:	b29b      	uxth	r3, r3
 800c564:	1ad3      	subs	r3, r2, r3
 800c566:	b29b      	uxth	r3, r3
 800c568:	4619      	mov	r1, r3
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f7f4 fe96 	bl	800129c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c570:	e0fb      	b.n	800c76a <HAL_UART_IRQHandler+0x726>
 800c572:	bf00      	nop
 800c574:	40020010 	.word	0x40020010
 800c578:	40020028 	.word	0x40020028
 800c57c:	40020040 	.word	0x40020040
 800c580:	40020058 	.word	0x40020058
 800c584:	40020070 	.word	0x40020070
 800c588:	40020088 	.word	0x40020088
 800c58c:	400200a0 	.word	0x400200a0
 800c590:	400200b8 	.word	0x400200b8
 800c594:	40020410 	.word	0x40020410
 800c598:	40020428 	.word	0x40020428
 800c59c:	40020440 	.word	0x40020440
 800c5a0:	40020458 	.word	0x40020458
 800c5a4:	40020470 	.word	0x40020470
 800c5a8:	40020488 	.word	0x40020488
 800c5ac:	400204a0 	.word	0x400204a0
 800c5b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	1ad3      	subs	r3, r2, r3
 800c5c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	f000 80cc 	beq.w	800c76e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c5d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	f000 80c7 	beq.w	800c76e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e8:	e853 3f00 	ldrex	r3, [r3]
 800c5ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c602:	647b      	str	r3, [r7, #68]	; 0x44
 800c604:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c606:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c608:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c60a:	e841 2300 	strex	r3, r2, [r1]
 800c60e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c610:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1e4      	bne.n	800c5e0 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	3308      	adds	r3, #8
 800c61c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c620:	e853 3f00 	ldrex	r3, [r3]
 800c624:	623b      	str	r3, [r7, #32]
   return(result);
 800c626:	6a3a      	ldr	r2, [r7, #32]
 800c628:	4b54      	ldr	r3, [pc, #336]	; (800c77c <HAL_UART_IRQHandler+0x738>)
 800c62a:	4013      	ands	r3, r2
 800c62c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	3308      	adds	r3, #8
 800c636:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c63a:	633a      	str	r2, [r7, #48]	; 0x30
 800c63c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c63e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c642:	e841 2300 	strex	r3, r2, [r1]
 800c646:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d1e3      	bne.n	800c616 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2220      	movs	r2, #32
 800c652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2200      	movs	r2, #0
 800c65a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2200      	movs	r2, #0
 800c660:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c668:	693b      	ldr	r3, [r7, #16]
 800c66a:	e853 3f00 	ldrex	r3, [r3]
 800c66e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f023 0310 	bic.w	r3, r3, #16
 800c676:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	461a      	mov	r2, r3
 800c680:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c684:	61fb      	str	r3, [r7, #28]
 800c686:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c688:	69b9      	ldr	r1, [r7, #24]
 800c68a:	69fa      	ldr	r2, [r7, #28]
 800c68c:	e841 2300 	strex	r3, r2, [r1]
 800c690:	617b      	str	r3, [r7, #20]
   return(result);
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d1e4      	bne.n	800c662 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c69c:	4619      	mov	r1, r3
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f7f4 fdfc 	bl	800129c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c6a4:	e063      	b.n	800c76e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c6a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00e      	beq.n	800c6d0 <HAL_UART_IRQHandler+0x68c>
 800c6b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d008      	beq.n	800c6d0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c6c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c6c8:	6878      	ldr	r0, [r7, #4]
 800c6ca:	f001 fa6e 	bl	800dbaa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c6ce:	e051      	b.n	800c774 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d014      	beq.n	800c706 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c6dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d105      	bne.n	800c6f4 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c6e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d008      	beq.n	800c706 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d03a      	beq.n	800c772 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	4798      	blx	r3
    }
    return;
 800c704:	e035      	b.n	800c772 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c70a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d009      	beq.n	800c726 <HAL_UART_IRQHandler+0x6e2>
 800c712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d003      	beq.n	800c726 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f001 fa18 	bl	800db54 <UART_EndTransmit_IT>
    return;
 800c724:	e026      	b.n	800c774 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c72a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d009      	beq.n	800c746 <HAL_UART_IRQHandler+0x702>
 800c732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c736:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d003      	beq.n	800c746 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f001 fa47 	bl	800dbd2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c744:	e016      	b.n	800c774 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c74a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d010      	beq.n	800c774 <HAL_UART_IRQHandler+0x730>
 800c752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c756:	2b00      	cmp	r3, #0
 800c758:	da0c      	bge.n	800c774 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f001 fa2f 	bl	800dbbe <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c760:	e008      	b.n	800c774 <HAL_UART_IRQHandler+0x730>
      return;
 800c762:	bf00      	nop
 800c764:	e006      	b.n	800c774 <HAL_UART_IRQHandler+0x730>
    return;
 800c766:	bf00      	nop
 800c768:	e004      	b.n	800c774 <HAL_UART_IRQHandler+0x730>
      return;
 800c76a:	bf00      	nop
 800c76c:	e002      	b.n	800c774 <HAL_UART_IRQHandler+0x730>
      return;
 800c76e:	bf00      	nop
 800c770:	e000      	b.n	800c774 <HAL_UART_IRQHandler+0x730>
    return;
 800c772:	bf00      	nop
  }
}
 800c774:	37e8      	adds	r7, #232	; 0xe8
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}
 800c77a:	bf00      	nop
 800c77c:	effffffe 	.word	0xeffffffe

0800c780 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c780:	b480      	push	{r7}
 800c782:	b083      	sub	sp, #12
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c788:	bf00      	nop
 800c78a:	370c      	adds	r7, #12
 800c78c:	46bd      	mov	sp, r7
 800c78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c792:	4770      	bx	lr

0800c794 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c79c:	bf00      	nop
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c7b0:	bf00      	nop
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c7c4:	bf00      	nop
 800c7c6:	370c      	adds	r7, #12
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7d0:	b5b0      	push	{r4, r5, r7, lr}
 800c7d2:	b08e      	sub	sp, #56	; 0x38
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	689a      	ldr	r2, [r3, #8]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	691b      	ldr	r3, [r3, #16]
 800c7e6:	431a      	orrs	r2, r3
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	695b      	ldr	r3, [r3, #20]
 800c7ec:	431a      	orrs	r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	69db      	ldr	r3, [r3, #28]
 800c7f2:	4313      	orrs	r3, r2
 800c7f4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	4bbf      	ldr	r3, [pc, #764]	; (800cafc <UART_SetConfig+0x32c>)
 800c7fe:	4013      	ands	r3, r2
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	6812      	ldr	r2, [r2, #0]
 800c804:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c806:	430b      	orrs	r3, r1
 800c808:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	68da      	ldr	r2, [r3, #12]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	430a      	orrs	r2, r1
 800c81e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	699b      	ldr	r3, [r3, #24]
 800c824:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4ab5      	ldr	r2, [pc, #724]	; (800cb00 <UART_SetConfig+0x330>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d004      	beq.n	800c83a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6a1b      	ldr	r3, [r3, #32]
 800c834:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c836:	4313      	orrs	r3, r2
 800c838:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	689a      	ldr	r2, [r3, #8]
 800c840:	4bb0      	ldr	r3, [pc, #704]	; (800cb04 <UART_SetConfig+0x334>)
 800c842:	4013      	ands	r3, r2
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	6812      	ldr	r2, [r2, #0]
 800c848:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c84a:	430b      	orrs	r3, r1
 800c84c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c854:	f023 010f 	bic.w	r1, r3, #15
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	430a      	orrs	r2, r1
 800c862:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	4aa7      	ldr	r2, [pc, #668]	; (800cb08 <UART_SetConfig+0x338>)
 800c86a:	4293      	cmp	r3, r2
 800c86c:	d176      	bne.n	800c95c <UART_SetConfig+0x18c>
 800c86e:	4ba7      	ldr	r3, [pc, #668]	; (800cb0c <UART_SetConfig+0x33c>)
 800c870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c872:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c876:	2b28      	cmp	r3, #40	; 0x28
 800c878:	d86c      	bhi.n	800c954 <UART_SetConfig+0x184>
 800c87a:	a201      	add	r2, pc, #4	; (adr r2, 800c880 <UART_SetConfig+0xb0>)
 800c87c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c880:	0800c925 	.word	0x0800c925
 800c884:	0800c955 	.word	0x0800c955
 800c888:	0800c955 	.word	0x0800c955
 800c88c:	0800c955 	.word	0x0800c955
 800c890:	0800c955 	.word	0x0800c955
 800c894:	0800c955 	.word	0x0800c955
 800c898:	0800c955 	.word	0x0800c955
 800c89c:	0800c955 	.word	0x0800c955
 800c8a0:	0800c92d 	.word	0x0800c92d
 800c8a4:	0800c955 	.word	0x0800c955
 800c8a8:	0800c955 	.word	0x0800c955
 800c8ac:	0800c955 	.word	0x0800c955
 800c8b0:	0800c955 	.word	0x0800c955
 800c8b4:	0800c955 	.word	0x0800c955
 800c8b8:	0800c955 	.word	0x0800c955
 800c8bc:	0800c955 	.word	0x0800c955
 800c8c0:	0800c935 	.word	0x0800c935
 800c8c4:	0800c955 	.word	0x0800c955
 800c8c8:	0800c955 	.word	0x0800c955
 800c8cc:	0800c955 	.word	0x0800c955
 800c8d0:	0800c955 	.word	0x0800c955
 800c8d4:	0800c955 	.word	0x0800c955
 800c8d8:	0800c955 	.word	0x0800c955
 800c8dc:	0800c955 	.word	0x0800c955
 800c8e0:	0800c93d 	.word	0x0800c93d
 800c8e4:	0800c955 	.word	0x0800c955
 800c8e8:	0800c955 	.word	0x0800c955
 800c8ec:	0800c955 	.word	0x0800c955
 800c8f0:	0800c955 	.word	0x0800c955
 800c8f4:	0800c955 	.word	0x0800c955
 800c8f8:	0800c955 	.word	0x0800c955
 800c8fc:	0800c955 	.word	0x0800c955
 800c900:	0800c945 	.word	0x0800c945
 800c904:	0800c955 	.word	0x0800c955
 800c908:	0800c955 	.word	0x0800c955
 800c90c:	0800c955 	.word	0x0800c955
 800c910:	0800c955 	.word	0x0800c955
 800c914:	0800c955 	.word	0x0800c955
 800c918:	0800c955 	.word	0x0800c955
 800c91c:	0800c955 	.word	0x0800c955
 800c920:	0800c94d 	.word	0x0800c94d
 800c924:	2301      	movs	r3, #1
 800c926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c92a:	e222      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800c92c:	2304      	movs	r3, #4
 800c92e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c932:	e21e      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800c934:	2308      	movs	r3, #8
 800c936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c93a:	e21a      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800c93c:	2310      	movs	r3, #16
 800c93e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c942:	e216      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800c944:	2320      	movs	r3, #32
 800c946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c94a:	e212      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800c94c:	2340      	movs	r3, #64	; 0x40
 800c94e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c952:	e20e      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800c954:	2380      	movs	r3, #128	; 0x80
 800c956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c95a:	e20a      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	4a6b      	ldr	r2, [pc, #428]	; (800cb10 <UART_SetConfig+0x340>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d130      	bne.n	800c9c8 <UART_SetConfig+0x1f8>
 800c966:	4b69      	ldr	r3, [pc, #420]	; (800cb0c <UART_SetConfig+0x33c>)
 800c968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c96a:	f003 0307 	and.w	r3, r3, #7
 800c96e:	2b05      	cmp	r3, #5
 800c970:	d826      	bhi.n	800c9c0 <UART_SetConfig+0x1f0>
 800c972:	a201      	add	r2, pc, #4	; (adr r2, 800c978 <UART_SetConfig+0x1a8>)
 800c974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c978:	0800c991 	.word	0x0800c991
 800c97c:	0800c999 	.word	0x0800c999
 800c980:	0800c9a1 	.word	0x0800c9a1
 800c984:	0800c9a9 	.word	0x0800c9a9
 800c988:	0800c9b1 	.word	0x0800c9b1
 800c98c:	0800c9b9 	.word	0x0800c9b9
 800c990:	2300      	movs	r3, #0
 800c992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c996:	e1ec      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800c998:	2304      	movs	r3, #4
 800c99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c99e:	e1e8      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800c9a0:	2308      	movs	r3, #8
 800c9a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a6:	e1e4      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800c9a8:	2310      	movs	r3, #16
 800c9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ae:	e1e0      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800c9b0:	2320      	movs	r3, #32
 800c9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9b6:	e1dc      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800c9b8:	2340      	movs	r3, #64	; 0x40
 800c9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9be:	e1d8      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800c9c0:	2380      	movs	r3, #128	; 0x80
 800c9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9c6:	e1d4      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a51      	ldr	r2, [pc, #324]	; (800cb14 <UART_SetConfig+0x344>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d130      	bne.n	800ca34 <UART_SetConfig+0x264>
 800c9d2:	4b4e      	ldr	r3, [pc, #312]	; (800cb0c <UART_SetConfig+0x33c>)
 800c9d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9d6:	f003 0307 	and.w	r3, r3, #7
 800c9da:	2b05      	cmp	r3, #5
 800c9dc:	d826      	bhi.n	800ca2c <UART_SetConfig+0x25c>
 800c9de:	a201      	add	r2, pc, #4	; (adr r2, 800c9e4 <UART_SetConfig+0x214>)
 800c9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e4:	0800c9fd 	.word	0x0800c9fd
 800c9e8:	0800ca05 	.word	0x0800ca05
 800c9ec:	0800ca0d 	.word	0x0800ca0d
 800c9f0:	0800ca15 	.word	0x0800ca15
 800c9f4:	0800ca1d 	.word	0x0800ca1d
 800c9f8:	0800ca25 	.word	0x0800ca25
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca02:	e1b6      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ca04:	2304      	movs	r3, #4
 800ca06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca0a:	e1b2      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ca0c:	2308      	movs	r3, #8
 800ca0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca12:	e1ae      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ca14:	2310      	movs	r3, #16
 800ca16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca1a:	e1aa      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ca1c:	2320      	movs	r3, #32
 800ca1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca22:	e1a6      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ca24:	2340      	movs	r3, #64	; 0x40
 800ca26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca2a:	e1a2      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ca2c:	2380      	movs	r3, #128	; 0x80
 800ca2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca32:	e19e      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4a37      	ldr	r2, [pc, #220]	; (800cb18 <UART_SetConfig+0x348>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d130      	bne.n	800caa0 <UART_SetConfig+0x2d0>
 800ca3e:	4b33      	ldr	r3, [pc, #204]	; (800cb0c <UART_SetConfig+0x33c>)
 800ca40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca42:	f003 0307 	and.w	r3, r3, #7
 800ca46:	2b05      	cmp	r3, #5
 800ca48:	d826      	bhi.n	800ca98 <UART_SetConfig+0x2c8>
 800ca4a:	a201      	add	r2, pc, #4	; (adr r2, 800ca50 <UART_SetConfig+0x280>)
 800ca4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca50:	0800ca69 	.word	0x0800ca69
 800ca54:	0800ca71 	.word	0x0800ca71
 800ca58:	0800ca79 	.word	0x0800ca79
 800ca5c:	0800ca81 	.word	0x0800ca81
 800ca60:	0800ca89 	.word	0x0800ca89
 800ca64:	0800ca91 	.word	0x0800ca91
 800ca68:	2300      	movs	r3, #0
 800ca6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca6e:	e180      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ca70:	2304      	movs	r3, #4
 800ca72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca76:	e17c      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ca78:	2308      	movs	r3, #8
 800ca7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca7e:	e178      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ca80:	2310      	movs	r3, #16
 800ca82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca86:	e174      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ca88:	2320      	movs	r3, #32
 800ca8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca8e:	e170      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ca90:	2340      	movs	r3, #64	; 0x40
 800ca92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca96:	e16c      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ca98:	2380      	movs	r3, #128	; 0x80
 800ca9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca9e:	e168      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	4a1d      	ldr	r2, [pc, #116]	; (800cb1c <UART_SetConfig+0x34c>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d142      	bne.n	800cb30 <UART_SetConfig+0x360>
 800caaa:	4b18      	ldr	r3, [pc, #96]	; (800cb0c <UART_SetConfig+0x33c>)
 800caac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caae:	f003 0307 	and.w	r3, r3, #7
 800cab2:	2b05      	cmp	r3, #5
 800cab4:	d838      	bhi.n	800cb28 <UART_SetConfig+0x358>
 800cab6:	a201      	add	r2, pc, #4	; (adr r2, 800cabc <UART_SetConfig+0x2ec>)
 800cab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cabc:	0800cad5 	.word	0x0800cad5
 800cac0:	0800cadd 	.word	0x0800cadd
 800cac4:	0800cae5 	.word	0x0800cae5
 800cac8:	0800caed 	.word	0x0800caed
 800cacc:	0800caf5 	.word	0x0800caf5
 800cad0:	0800cb21 	.word	0x0800cb21
 800cad4:	2300      	movs	r3, #0
 800cad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cada:	e14a      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cadc:	2304      	movs	r3, #4
 800cade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cae2:	e146      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cae4:	2308      	movs	r3, #8
 800cae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caea:	e142      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800caec:	2310      	movs	r3, #16
 800caee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caf2:	e13e      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800caf4:	2320      	movs	r3, #32
 800caf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cafa:	e13a      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cafc:	cfff69f3 	.word	0xcfff69f3
 800cb00:	58000c00 	.word	0x58000c00
 800cb04:	11fff4ff 	.word	0x11fff4ff
 800cb08:	40011000 	.word	0x40011000
 800cb0c:	58024400 	.word	0x58024400
 800cb10:	40004400 	.word	0x40004400
 800cb14:	40004800 	.word	0x40004800
 800cb18:	40004c00 	.word	0x40004c00
 800cb1c:	40005000 	.word	0x40005000
 800cb20:	2340      	movs	r3, #64	; 0x40
 800cb22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb26:	e124      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cb28:	2380      	movs	r3, #128	; 0x80
 800cb2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb2e:	e120      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	4acc      	ldr	r2, [pc, #816]	; (800ce68 <UART_SetConfig+0x698>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d176      	bne.n	800cc28 <UART_SetConfig+0x458>
 800cb3a:	4bcc      	ldr	r3, [pc, #816]	; (800ce6c <UART_SetConfig+0x69c>)
 800cb3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb42:	2b28      	cmp	r3, #40	; 0x28
 800cb44:	d86c      	bhi.n	800cc20 <UART_SetConfig+0x450>
 800cb46:	a201      	add	r2, pc, #4	; (adr r2, 800cb4c <UART_SetConfig+0x37c>)
 800cb48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4c:	0800cbf1 	.word	0x0800cbf1
 800cb50:	0800cc21 	.word	0x0800cc21
 800cb54:	0800cc21 	.word	0x0800cc21
 800cb58:	0800cc21 	.word	0x0800cc21
 800cb5c:	0800cc21 	.word	0x0800cc21
 800cb60:	0800cc21 	.word	0x0800cc21
 800cb64:	0800cc21 	.word	0x0800cc21
 800cb68:	0800cc21 	.word	0x0800cc21
 800cb6c:	0800cbf9 	.word	0x0800cbf9
 800cb70:	0800cc21 	.word	0x0800cc21
 800cb74:	0800cc21 	.word	0x0800cc21
 800cb78:	0800cc21 	.word	0x0800cc21
 800cb7c:	0800cc21 	.word	0x0800cc21
 800cb80:	0800cc21 	.word	0x0800cc21
 800cb84:	0800cc21 	.word	0x0800cc21
 800cb88:	0800cc21 	.word	0x0800cc21
 800cb8c:	0800cc01 	.word	0x0800cc01
 800cb90:	0800cc21 	.word	0x0800cc21
 800cb94:	0800cc21 	.word	0x0800cc21
 800cb98:	0800cc21 	.word	0x0800cc21
 800cb9c:	0800cc21 	.word	0x0800cc21
 800cba0:	0800cc21 	.word	0x0800cc21
 800cba4:	0800cc21 	.word	0x0800cc21
 800cba8:	0800cc21 	.word	0x0800cc21
 800cbac:	0800cc09 	.word	0x0800cc09
 800cbb0:	0800cc21 	.word	0x0800cc21
 800cbb4:	0800cc21 	.word	0x0800cc21
 800cbb8:	0800cc21 	.word	0x0800cc21
 800cbbc:	0800cc21 	.word	0x0800cc21
 800cbc0:	0800cc21 	.word	0x0800cc21
 800cbc4:	0800cc21 	.word	0x0800cc21
 800cbc8:	0800cc21 	.word	0x0800cc21
 800cbcc:	0800cc11 	.word	0x0800cc11
 800cbd0:	0800cc21 	.word	0x0800cc21
 800cbd4:	0800cc21 	.word	0x0800cc21
 800cbd8:	0800cc21 	.word	0x0800cc21
 800cbdc:	0800cc21 	.word	0x0800cc21
 800cbe0:	0800cc21 	.word	0x0800cc21
 800cbe4:	0800cc21 	.word	0x0800cc21
 800cbe8:	0800cc21 	.word	0x0800cc21
 800cbec:	0800cc19 	.word	0x0800cc19
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbf6:	e0bc      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cbf8:	2304      	movs	r3, #4
 800cbfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cbfe:	e0b8      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cc00:	2308      	movs	r3, #8
 800cc02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc06:	e0b4      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cc08:	2310      	movs	r3, #16
 800cc0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc0e:	e0b0      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cc10:	2320      	movs	r3, #32
 800cc12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc16:	e0ac      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cc18:	2340      	movs	r3, #64	; 0x40
 800cc1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc1e:	e0a8      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cc20:	2380      	movs	r3, #128	; 0x80
 800cc22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc26:	e0a4      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a90      	ldr	r2, [pc, #576]	; (800ce70 <UART_SetConfig+0x6a0>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d130      	bne.n	800cc94 <UART_SetConfig+0x4c4>
 800cc32:	4b8e      	ldr	r3, [pc, #568]	; (800ce6c <UART_SetConfig+0x69c>)
 800cc34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc36:	f003 0307 	and.w	r3, r3, #7
 800cc3a:	2b05      	cmp	r3, #5
 800cc3c:	d826      	bhi.n	800cc8c <UART_SetConfig+0x4bc>
 800cc3e:	a201      	add	r2, pc, #4	; (adr r2, 800cc44 <UART_SetConfig+0x474>)
 800cc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc44:	0800cc5d 	.word	0x0800cc5d
 800cc48:	0800cc65 	.word	0x0800cc65
 800cc4c:	0800cc6d 	.word	0x0800cc6d
 800cc50:	0800cc75 	.word	0x0800cc75
 800cc54:	0800cc7d 	.word	0x0800cc7d
 800cc58:	0800cc85 	.word	0x0800cc85
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc62:	e086      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cc64:	2304      	movs	r3, #4
 800cc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc6a:	e082      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cc6c:	2308      	movs	r3, #8
 800cc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc72:	e07e      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cc74:	2310      	movs	r3, #16
 800cc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc7a:	e07a      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cc7c:	2320      	movs	r3, #32
 800cc7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc82:	e076      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cc84:	2340      	movs	r3, #64	; 0x40
 800cc86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc8a:	e072      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cc8c:	2380      	movs	r3, #128	; 0x80
 800cc8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc92:	e06e      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4a76      	ldr	r2, [pc, #472]	; (800ce74 <UART_SetConfig+0x6a4>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d130      	bne.n	800cd00 <UART_SetConfig+0x530>
 800cc9e:	4b73      	ldr	r3, [pc, #460]	; (800ce6c <UART_SetConfig+0x69c>)
 800cca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cca2:	f003 0307 	and.w	r3, r3, #7
 800cca6:	2b05      	cmp	r3, #5
 800cca8:	d826      	bhi.n	800ccf8 <UART_SetConfig+0x528>
 800ccaa:	a201      	add	r2, pc, #4	; (adr r2, 800ccb0 <UART_SetConfig+0x4e0>)
 800ccac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb0:	0800ccc9 	.word	0x0800ccc9
 800ccb4:	0800ccd1 	.word	0x0800ccd1
 800ccb8:	0800ccd9 	.word	0x0800ccd9
 800ccbc:	0800cce1 	.word	0x0800cce1
 800ccc0:	0800cce9 	.word	0x0800cce9
 800ccc4:	0800ccf1 	.word	0x0800ccf1
 800ccc8:	2300      	movs	r3, #0
 800ccca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccce:	e050      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ccd0:	2304      	movs	r3, #4
 800ccd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccd6:	e04c      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ccd8:	2308      	movs	r3, #8
 800ccda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccde:	e048      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cce0:	2310      	movs	r3, #16
 800cce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cce6:	e044      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cce8:	2320      	movs	r3, #32
 800ccea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccee:	e040      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ccf0:	2340      	movs	r3, #64	; 0x40
 800ccf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccf6:	e03c      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800ccf8:	2380      	movs	r3, #128	; 0x80
 800ccfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccfe:	e038      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a5c      	ldr	r2, [pc, #368]	; (800ce78 <UART_SetConfig+0x6a8>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d130      	bne.n	800cd6c <UART_SetConfig+0x59c>
 800cd0a:	4b58      	ldr	r3, [pc, #352]	; (800ce6c <UART_SetConfig+0x69c>)
 800cd0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd0e:	f003 0307 	and.w	r3, r3, #7
 800cd12:	2b05      	cmp	r3, #5
 800cd14:	d826      	bhi.n	800cd64 <UART_SetConfig+0x594>
 800cd16:	a201      	add	r2, pc, #4	; (adr r2, 800cd1c <UART_SetConfig+0x54c>)
 800cd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd1c:	0800cd35 	.word	0x0800cd35
 800cd20:	0800cd3d 	.word	0x0800cd3d
 800cd24:	0800cd45 	.word	0x0800cd45
 800cd28:	0800cd4d 	.word	0x0800cd4d
 800cd2c:	0800cd55 	.word	0x0800cd55
 800cd30:	0800cd5d 	.word	0x0800cd5d
 800cd34:	2302      	movs	r3, #2
 800cd36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd3a:	e01a      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cd3c:	2304      	movs	r3, #4
 800cd3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd42:	e016      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cd44:	2308      	movs	r3, #8
 800cd46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd4a:	e012      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cd4c:	2310      	movs	r3, #16
 800cd4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd52:	e00e      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cd54:	2320      	movs	r3, #32
 800cd56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd5a:	e00a      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cd5c:	2340      	movs	r3, #64	; 0x40
 800cd5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd62:	e006      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cd64:	2380      	movs	r3, #128	; 0x80
 800cd66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd6a:	e002      	b.n	800cd72 <UART_SetConfig+0x5a2>
 800cd6c:	2380      	movs	r3, #128	; 0x80
 800cd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	4a40      	ldr	r2, [pc, #256]	; (800ce78 <UART_SetConfig+0x6a8>)
 800cd78:	4293      	cmp	r3, r2
 800cd7a:	f040 80ef 	bne.w	800cf5c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cd7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cd82:	2b20      	cmp	r3, #32
 800cd84:	dc46      	bgt.n	800ce14 <UART_SetConfig+0x644>
 800cd86:	2b02      	cmp	r3, #2
 800cd88:	f2c0 8081 	blt.w	800ce8e <UART_SetConfig+0x6be>
 800cd8c:	3b02      	subs	r3, #2
 800cd8e:	2b1e      	cmp	r3, #30
 800cd90:	d87d      	bhi.n	800ce8e <UART_SetConfig+0x6be>
 800cd92:	a201      	add	r2, pc, #4	; (adr r2, 800cd98 <UART_SetConfig+0x5c8>)
 800cd94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd98:	0800ce1b 	.word	0x0800ce1b
 800cd9c:	0800ce8f 	.word	0x0800ce8f
 800cda0:	0800ce23 	.word	0x0800ce23
 800cda4:	0800ce8f 	.word	0x0800ce8f
 800cda8:	0800ce8f 	.word	0x0800ce8f
 800cdac:	0800ce8f 	.word	0x0800ce8f
 800cdb0:	0800ce33 	.word	0x0800ce33
 800cdb4:	0800ce8f 	.word	0x0800ce8f
 800cdb8:	0800ce8f 	.word	0x0800ce8f
 800cdbc:	0800ce8f 	.word	0x0800ce8f
 800cdc0:	0800ce8f 	.word	0x0800ce8f
 800cdc4:	0800ce8f 	.word	0x0800ce8f
 800cdc8:	0800ce8f 	.word	0x0800ce8f
 800cdcc:	0800ce8f 	.word	0x0800ce8f
 800cdd0:	0800ce43 	.word	0x0800ce43
 800cdd4:	0800ce8f 	.word	0x0800ce8f
 800cdd8:	0800ce8f 	.word	0x0800ce8f
 800cddc:	0800ce8f 	.word	0x0800ce8f
 800cde0:	0800ce8f 	.word	0x0800ce8f
 800cde4:	0800ce8f 	.word	0x0800ce8f
 800cde8:	0800ce8f 	.word	0x0800ce8f
 800cdec:	0800ce8f 	.word	0x0800ce8f
 800cdf0:	0800ce8f 	.word	0x0800ce8f
 800cdf4:	0800ce8f 	.word	0x0800ce8f
 800cdf8:	0800ce8f 	.word	0x0800ce8f
 800cdfc:	0800ce8f 	.word	0x0800ce8f
 800ce00:	0800ce8f 	.word	0x0800ce8f
 800ce04:	0800ce8f 	.word	0x0800ce8f
 800ce08:	0800ce8f 	.word	0x0800ce8f
 800ce0c:	0800ce8f 	.word	0x0800ce8f
 800ce10:	0800ce81 	.word	0x0800ce81
 800ce14:	2b40      	cmp	r3, #64	; 0x40
 800ce16:	d036      	beq.n	800ce86 <UART_SetConfig+0x6b6>
 800ce18:	e039      	b.n	800ce8e <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ce1a:	f7fc fe93 	bl	8009b44 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce1e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ce20:	e03b      	b.n	800ce9a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce22:	f107 0314 	add.w	r3, r7, #20
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7fc fea2 	bl	8009b70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce30:	e033      	b.n	800ce9a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce32:	f107 0308 	add.w	r3, r7, #8
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7fc ffee 	bl	8009e18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce40:	e02b      	b.n	800ce9a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce42:	4b0a      	ldr	r3, [pc, #40]	; (800ce6c <UART_SetConfig+0x69c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f003 0320 	and.w	r3, r3, #32
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d009      	beq.n	800ce62 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ce4e:	4b07      	ldr	r3, [pc, #28]	; (800ce6c <UART_SetConfig+0x69c>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	08db      	lsrs	r3, r3, #3
 800ce54:	f003 0303 	and.w	r3, r3, #3
 800ce58:	4a08      	ldr	r2, [pc, #32]	; (800ce7c <UART_SetConfig+0x6ac>)
 800ce5a:	fa22 f303 	lsr.w	r3, r2, r3
 800ce5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ce60:	e01b      	b.n	800ce9a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ce62:	4b06      	ldr	r3, [pc, #24]	; (800ce7c <UART_SetConfig+0x6ac>)
 800ce64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce66:	e018      	b.n	800ce9a <UART_SetConfig+0x6ca>
 800ce68:	40011400 	.word	0x40011400
 800ce6c:	58024400 	.word	0x58024400
 800ce70:	40007800 	.word	0x40007800
 800ce74:	40007c00 	.word	0x40007c00
 800ce78:	58000c00 	.word	0x58000c00
 800ce7c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ce80:	4bc4      	ldr	r3, [pc, #784]	; (800d194 <UART_SetConfig+0x9c4>)
 800ce82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce84:	e009      	b.n	800ce9a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ce8c:	e005      	b.n	800ce9a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ce92:	2301      	movs	r3, #1
 800ce94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ce98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ce9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	f000 81da 	beq.w	800d256 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cea6:	4abc      	ldr	r2, [pc, #752]	; (800d198 <UART_SetConfig+0x9c8>)
 800cea8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ceac:	461a      	mov	r2, r3
 800ceae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ceb4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	685a      	ldr	r2, [r3, #4]
 800ceba:	4613      	mov	r3, r2
 800cebc:	005b      	lsls	r3, r3, #1
 800cebe:	4413      	add	r3, r2
 800cec0:	6a3a      	ldr	r2, [r7, #32]
 800cec2:	429a      	cmp	r2, r3
 800cec4:	d305      	bcc.n	800ced2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cecc:	6a3a      	ldr	r2, [r7, #32]
 800cece:	429a      	cmp	r2, r3
 800ced0:	d903      	bls.n	800ceda <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800ced2:	2301      	movs	r3, #1
 800ced4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ced8:	e1bd      	b.n	800d256 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ceda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cedc:	4618      	mov	r0, r3
 800cede:	f04f 0100 	mov.w	r1, #0
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cee6:	4aac      	ldr	r2, [pc, #688]	; (800d198 <UART_SetConfig+0x9c8>)
 800cee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	f04f 0300 	mov.w	r3, #0
 800cef2:	f7f3 fa4d 	bl	8000390 <__aeabi_uldivmod>
 800cef6:	4602      	mov	r2, r0
 800cef8:	460b      	mov	r3, r1
 800cefa:	4610      	mov	r0, r2
 800cefc:	4619      	mov	r1, r3
 800cefe:	f04f 0200 	mov.w	r2, #0
 800cf02:	f04f 0300 	mov.w	r3, #0
 800cf06:	020b      	lsls	r3, r1, #8
 800cf08:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf0c:	0202      	lsls	r2, r0, #8
 800cf0e:	6879      	ldr	r1, [r7, #4]
 800cf10:	6849      	ldr	r1, [r1, #4]
 800cf12:	0849      	lsrs	r1, r1, #1
 800cf14:	4608      	mov	r0, r1
 800cf16:	f04f 0100 	mov.w	r1, #0
 800cf1a:	1814      	adds	r4, r2, r0
 800cf1c:	eb43 0501 	adc.w	r5, r3, r1
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	461a      	mov	r2, r3
 800cf26:	f04f 0300 	mov.w	r3, #0
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	4629      	mov	r1, r5
 800cf2e:	f7f3 fa2f 	bl	8000390 <__aeabi_uldivmod>
 800cf32:	4602      	mov	r2, r0
 800cf34:	460b      	mov	r3, r1
 800cf36:	4613      	mov	r3, r2
 800cf38:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cf3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf40:	d308      	bcc.n	800cf54 <UART_SetConfig+0x784>
 800cf42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cf48:	d204      	bcs.n	800cf54 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf50:	60da      	str	r2, [r3, #12]
 800cf52:	e180      	b.n	800d256 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800cf54:	2301      	movs	r3, #1
 800cf56:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cf5a:	e17c      	b.n	800d256 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	69db      	ldr	r3, [r3, #28]
 800cf60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf64:	f040 80be 	bne.w	800d0e4 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800cf68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf6c:	2b20      	cmp	r3, #32
 800cf6e:	dc49      	bgt.n	800d004 <UART_SetConfig+0x834>
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	db7c      	blt.n	800d06e <UART_SetConfig+0x89e>
 800cf74:	2b20      	cmp	r3, #32
 800cf76:	d87a      	bhi.n	800d06e <UART_SetConfig+0x89e>
 800cf78:	a201      	add	r2, pc, #4	; (adr r2, 800cf80 <UART_SetConfig+0x7b0>)
 800cf7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf7e:	bf00      	nop
 800cf80:	0800d00b 	.word	0x0800d00b
 800cf84:	0800d013 	.word	0x0800d013
 800cf88:	0800d06f 	.word	0x0800d06f
 800cf8c:	0800d06f 	.word	0x0800d06f
 800cf90:	0800d01b 	.word	0x0800d01b
 800cf94:	0800d06f 	.word	0x0800d06f
 800cf98:	0800d06f 	.word	0x0800d06f
 800cf9c:	0800d06f 	.word	0x0800d06f
 800cfa0:	0800d02b 	.word	0x0800d02b
 800cfa4:	0800d06f 	.word	0x0800d06f
 800cfa8:	0800d06f 	.word	0x0800d06f
 800cfac:	0800d06f 	.word	0x0800d06f
 800cfb0:	0800d06f 	.word	0x0800d06f
 800cfb4:	0800d06f 	.word	0x0800d06f
 800cfb8:	0800d06f 	.word	0x0800d06f
 800cfbc:	0800d06f 	.word	0x0800d06f
 800cfc0:	0800d03b 	.word	0x0800d03b
 800cfc4:	0800d06f 	.word	0x0800d06f
 800cfc8:	0800d06f 	.word	0x0800d06f
 800cfcc:	0800d06f 	.word	0x0800d06f
 800cfd0:	0800d06f 	.word	0x0800d06f
 800cfd4:	0800d06f 	.word	0x0800d06f
 800cfd8:	0800d06f 	.word	0x0800d06f
 800cfdc:	0800d06f 	.word	0x0800d06f
 800cfe0:	0800d06f 	.word	0x0800d06f
 800cfe4:	0800d06f 	.word	0x0800d06f
 800cfe8:	0800d06f 	.word	0x0800d06f
 800cfec:	0800d06f 	.word	0x0800d06f
 800cff0:	0800d06f 	.word	0x0800d06f
 800cff4:	0800d06f 	.word	0x0800d06f
 800cff8:	0800d06f 	.word	0x0800d06f
 800cffc:	0800d06f 	.word	0x0800d06f
 800d000:	0800d061 	.word	0x0800d061
 800d004:	2b40      	cmp	r3, #64	; 0x40
 800d006:	d02e      	beq.n	800d066 <UART_SetConfig+0x896>
 800d008:	e031      	b.n	800d06e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d00a:	f7fb fe2f 	bl	8008c6c <HAL_RCC_GetPCLK1Freq>
 800d00e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d010:	e033      	b.n	800d07a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d012:	f7fb fe41 	bl	8008c98 <HAL_RCC_GetPCLK2Freq>
 800d016:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d018:	e02f      	b.n	800d07a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d01a:	f107 0314 	add.w	r3, r7, #20
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fc fda6 	bl	8009b70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d024:	69bb      	ldr	r3, [r7, #24]
 800d026:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d028:	e027      	b.n	800d07a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d02a:	f107 0308 	add.w	r3, r7, #8
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fc fef2 	bl	8009e18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d038:	e01f      	b.n	800d07a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d03a:	4b58      	ldr	r3, [pc, #352]	; (800d19c <UART_SetConfig+0x9cc>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f003 0320 	and.w	r3, r3, #32
 800d042:	2b00      	cmp	r3, #0
 800d044:	d009      	beq.n	800d05a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d046:	4b55      	ldr	r3, [pc, #340]	; (800d19c <UART_SetConfig+0x9cc>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	08db      	lsrs	r3, r3, #3
 800d04c:	f003 0303 	and.w	r3, r3, #3
 800d050:	4a53      	ldr	r2, [pc, #332]	; (800d1a0 <UART_SetConfig+0x9d0>)
 800d052:	fa22 f303 	lsr.w	r3, r2, r3
 800d056:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d058:	e00f      	b.n	800d07a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d05a:	4b51      	ldr	r3, [pc, #324]	; (800d1a0 <UART_SetConfig+0x9d0>)
 800d05c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d05e:	e00c      	b.n	800d07a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d060:	4b4c      	ldr	r3, [pc, #304]	; (800d194 <UART_SetConfig+0x9c4>)
 800d062:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d064:	e009      	b.n	800d07a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d06a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d06c:	e005      	b.n	800d07a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d06e:	2300      	movs	r3, #0
 800d070:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d072:	2301      	movs	r3, #1
 800d074:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d078:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d07a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f000 80ea 	beq.w	800d256 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d086:	4a44      	ldr	r2, [pc, #272]	; (800d198 <UART_SetConfig+0x9c8>)
 800d088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d08c:	461a      	mov	r2, r3
 800d08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d090:	fbb3 f3f2 	udiv	r3, r3, r2
 800d094:	005a      	lsls	r2, r3, #1
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	085b      	lsrs	r3, r3, #1
 800d09c:	441a      	add	r2, r3
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	685b      	ldr	r3, [r3, #4]
 800d0a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0a6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0aa:	2b0f      	cmp	r3, #15
 800d0ac:	d916      	bls.n	800d0dc <UART_SetConfig+0x90c>
 800d0ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0b4:	d212      	bcs.n	800d0dc <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0b8:	b29b      	uxth	r3, r3
 800d0ba:	f023 030f 	bic.w	r3, r3, #15
 800d0be:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0c2:	085b      	lsrs	r3, r3, #1
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	f003 0307 	and.w	r3, r3, #7
 800d0ca:	b29a      	uxth	r2, r3
 800d0cc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d0d8:	60da      	str	r2, [r3, #12]
 800d0da:	e0bc      	b.n	800d256 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d0dc:	2301      	movs	r3, #1
 800d0de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d0e2:	e0b8      	b.n	800d256 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d0e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d0e8:	2b20      	cmp	r3, #32
 800d0ea:	dc4b      	bgt.n	800d184 <UART_SetConfig+0x9b4>
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f2c0 8087 	blt.w	800d200 <UART_SetConfig+0xa30>
 800d0f2:	2b20      	cmp	r3, #32
 800d0f4:	f200 8084 	bhi.w	800d200 <UART_SetConfig+0xa30>
 800d0f8:	a201      	add	r2, pc, #4	; (adr r2, 800d100 <UART_SetConfig+0x930>)
 800d0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0fe:	bf00      	nop
 800d100:	0800d18b 	.word	0x0800d18b
 800d104:	0800d1a5 	.word	0x0800d1a5
 800d108:	0800d201 	.word	0x0800d201
 800d10c:	0800d201 	.word	0x0800d201
 800d110:	0800d1ad 	.word	0x0800d1ad
 800d114:	0800d201 	.word	0x0800d201
 800d118:	0800d201 	.word	0x0800d201
 800d11c:	0800d201 	.word	0x0800d201
 800d120:	0800d1bd 	.word	0x0800d1bd
 800d124:	0800d201 	.word	0x0800d201
 800d128:	0800d201 	.word	0x0800d201
 800d12c:	0800d201 	.word	0x0800d201
 800d130:	0800d201 	.word	0x0800d201
 800d134:	0800d201 	.word	0x0800d201
 800d138:	0800d201 	.word	0x0800d201
 800d13c:	0800d201 	.word	0x0800d201
 800d140:	0800d1cd 	.word	0x0800d1cd
 800d144:	0800d201 	.word	0x0800d201
 800d148:	0800d201 	.word	0x0800d201
 800d14c:	0800d201 	.word	0x0800d201
 800d150:	0800d201 	.word	0x0800d201
 800d154:	0800d201 	.word	0x0800d201
 800d158:	0800d201 	.word	0x0800d201
 800d15c:	0800d201 	.word	0x0800d201
 800d160:	0800d201 	.word	0x0800d201
 800d164:	0800d201 	.word	0x0800d201
 800d168:	0800d201 	.word	0x0800d201
 800d16c:	0800d201 	.word	0x0800d201
 800d170:	0800d201 	.word	0x0800d201
 800d174:	0800d201 	.word	0x0800d201
 800d178:	0800d201 	.word	0x0800d201
 800d17c:	0800d201 	.word	0x0800d201
 800d180:	0800d1f3 	.word	0x0800d1f3
 800d184:	2b40      	cmp	r3, #64	; 0x40
 800d186:	d037      	beq.n	800d1f8 <UART_SetConfig+0xa28>
 800d188:	e03a      	b.n	800d200 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d18a:	f7fb fd6f 	bl	8008c6c <HAL_RCC_GetPCLK1Freq>
 800d18e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d190:	e03c      	b.n	800d20c <UART_SetConfig+0xa3c>
 800d192:	bf00      	nop
 800d194:	003d0900 	.word	0x003d0900
 800d198:	08010f30 	.word	0x08010f30
 800d19c:	58024400 	.word	0x58024400
 800d1a0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1a4:	f7fb fd78 	bl	8008c98 <HAL_RCC_GetPCLK2Freq>
 800d1a8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d1aa:	e02f      	b.n	800d20c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1ac:	f107 0314 	add.w	r3, r7, #20
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7fc fcdd 	bl	8009b70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1ba:	e027      	b.n	800d20c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1bc:	f107 0308 	add.w	r3, r7, #8
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7fc fe29 	bl	8009e18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1ca:	e01f      	b.n	800d20c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1cc:	4b2c      	ldr	r3, [pc, #176]	; (800d280 <UART_SetConfig+0xab0>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f003 0320 	and.w	r3, r3, #32
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d009      	beq.n	800d1ec <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d1d8:	4b29      	ldr	r3, [pc, #164]	; (800d280 <UART_SetConfig+0xab0>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	08db      	lsrs	r3, r3, #3
 800d1de:	f003 0303 	and.w	r3, r3, #3
 800d1e2:	4a28      	ldr	r2, [pc, #160]	; (800d284 <UART_SetConfig+0xab4>)
 800d1e4:	fa22 f303 	lsr.w	r3, r2, r3
 800d1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d1ea:	e00f      	b.n	800d20c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d1ec:	4b25      	ldr	r3, [pc, #148]	; (800d284 <UART_SetConfig+0xab4>)
 800d1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1f0:	e00c      	b.n	800d20c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d1f2:	4b25      	ldr	r3, [pc, #148]	; (800d288 <UART_SetConfig+0xab8>)
 800d1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1f6:	e009      	b.n	800d20c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d1fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d1fe:	e005      	b.n	800d20c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d200:	2300      	movs	r3, #0
 800d202:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d204:	2301      	movs	r3, #1
 800d206:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d20a:	bf00      	nop
    }

    if (pclk != 0U)
 800d20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d021      	beq.n	800d256 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d216:	4a1d      	ldr	r2, [pc, #116]	; (800d28c <UART_SetConfig+0xabc>)
 800d218:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d21c:	461a      	mov	r2, r3
 800d21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d220:	fbb3 f2f2 	udiv	r2, r3, r2
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	085b      	lsrs	r3, r3, #1
 800d22a:	441a      	add	r2, r3
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	fbb2 f3f3 	udiv	r3, r2, r3
 800d234:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d238:	2b0f      	cmp	r3, #15
 800d23a:	d909      	bls.n	800d250 <UART_SetConfig+0xa80>
 800d23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d242:	d205      	bcs.n	800d250 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d246:	b29a      	uxth	r2, r3
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	60da      	str	r2, [r3, #12]
 800d24e:	e002      	b.n	800d256 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d250:	2301      	movs	r3, #1
 800d252:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2201      	movs	r2, #1
 800d25a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	2201      	movs	r2, #1
 800d262:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2200      	movs	r2, #0
 800d26a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2200      	movs	r2, #0
 800d270:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d272:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d276:	4618      	mov	r0, r3
 800d278:	3738      	adds	r7, #56	; 0x38
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bdb0      	pop	{r4, r5, r7, pc}
 800d27e:	bf00      	nop
 800d280:	58024400 	.word	0x58024400
 800d284:	03d09000 	.word	0x03d09000
 800d288:	003d0900 	.word	0x003d0900
 800d28c:	08010f30 	.word	0x08010f30

0800d290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d290:	b480      	push	{r7}
 800d292:	b083      	sub	sp, #12
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d29c:	f003 0301 	and.w	r3, r3, #1
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d00a      	beq.n	800d2ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	685b      	ldr	r3, [r3, #4]
 800d2aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	430a      	orrs	r2, r1
 800d2b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2be:	f003 0302 	and.w	r3, r3, #2
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00a      	beq.n	800d2dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	430a      	orrs	r2, r1
 800d2da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2e0:	f003 0304 	and.w	r3, r3, #4
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d00a      	beq.n	800d2fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	430a      	orrs	r2, r1
 800d2fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d302:	f003 0308 	and.w	r3, r3, #8
 800d306:	2b00      	cmp	r3, #0
 800d308:	d00a      	beq.n	800d320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	430a      	orrs	r2, r1
 800d31e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d324:	f003 0310 	and.w	r3, r3, #16
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d00a      	beq.n	800d342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	689b      	ldr	r3, [r3, #8]
 800d332:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	430a      	orrs	r2, r1
 800d340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d346:	f003 0320 	and.w	r3, r3, #32
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d00a      	beq.n	800d364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	430a      	orrs	r2, r1
 800d362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d01a      	beq.n	800d3a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	430a      	orrs	r2, r1
 800d384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d38a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d38e:	d10a      	bne.n	800d3a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	430a      	orrs	r2, r1
 800d3a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d00a      	beq.n	800d3c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	430a      	orrs	r2, r1
 800d3c6:	605a      	str	r2, [r3, #4]
  }
}
 800d3c8:	bf00      	nop
 800d3ca:	370c      	adds	r7, #12
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr

0800d3d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b086      	sub	sp, #24
 800d3d8:	af02      	add	r7, sp, #8
 800d3da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d3e4:	f7f7 f92c 	bl	8004640 <HAL_GetTick>
 800d3e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f003 0308 	and.w	r3, r3, #8
 800d3f4:	2b08      	cmp	r3, #8
 800d3f6:	d10e      	bne.n	800d416 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d3f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d3fc:	9300      	str	r3, [sp, #0]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2200      	movs	r2, #0
 800d402:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 f82f 	bl	800d46a <UART_WaitOnFlagUntilTimeout>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d412:	2303      	movs	r3, #3
 800d414:	e025      	b.n	800d462 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f003 0304 	and.w	r3, r3, #4
 800d420:	2b04      	cmp	r3, #4
 800d422:	d10e      	bne.n	800d442 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d424:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2200      	movs	r2, #0
 800d42e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 f819 	bl	800d46a <UART_WaitOnFlagUntilTimeout>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d001      	beq.n	800d442 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d43e:	2303      	movs	r3, #3
 800d440:	e00f      	b.n	800d462 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2220      	movs	r2, #32
 800d446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2220      	movs	r2, #32
 800d44e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2200      	movs	r2, #0
 800d456:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2200      	movs	r2, #0
 800d45c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d460:	2300      	movs	r3, #0
}
 800d462:	4618      	mov	r0, r3
 800d464:	3710      	adds	r7, #16
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}

0800d46a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d46a:	b580      	push	{r7, lr}
 800d46c:	b09c      	sub	sp, #112	; 0x70
 800d46e:	af00      	add	r7, sp, #0
 800d470:	60f8      	str	r0, [r7, #12]
 800d472:	60b9      	str	r1, [r7, #8]
 800d474:	603b      	str	r3, [r7, #0]
 800d476:	4613      	mov	r3, r2
 800d478:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d47a:	e0a9      	b.n	800d5d0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d47c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d482:	f000 80a5 	beq.w	800d5d0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d486:	f7f7 f8db 	bl	8004640 <HAL_GetTick>
 800d48a:	4602      	mov	r2, r0
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	1ad3      	subs	r3, r2, r3
 800d490:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d492:	429a      	cmp	r2, r3
 800d494:	d302      	bcc.n	800d49c <UART_WaitOnFlagUntilTimeout+0x32>
 800d496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d140      	bne.n	800d51e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4a4:	e853 3f00 	ldrex	r3, [r3]
 800d4a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d4aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d4b0:	667b      	str	r3, [r7, #100]	; 0x64
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d4c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d4c2:	e841 2300 	strex	r3, r2, [r1]
 800d4c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d4c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d1e6      	bne.n	800d49c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	3308      	adds	r3, #8
 800d4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4d8:	e853 3f00 	ldrex	r3, [r3]
 800d4dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d4de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d4e0:	f023 0301 	bic.w	r3, r3, #1
 800d4e4:	663b      	str	r3, [r7, #96]	; 0x60
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	3308      	adds	r3, #8
 800d4ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d4ee:	64ba      	str	r2, [r7, #72]	; 0x48
 800d4f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d4f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4f6:	e841 2300 	strex	r3, r2, [r1]
 800d4fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d4fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d1e5      	bne.n	800d4ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2220      	movs	r2, #32
 800d506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2220      	movs	r2, #32
 800d50e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2200      	movs	r2, #0
 800d516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d51a:	2303      	movs	r3, #3
 800d51c:	e069      	b.n	800d5f2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f003 0304 	and.w	r3, r3, #4
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d051      	beq.n	800d5d0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	69db      	ldr	r3, [r3, #28]
 800d532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d53a:	d149      	bne.n	800d5d0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d544:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d54e:	e853 3f00 	ldrex	r3, [r3]
 800d552:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d556:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d55a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	461a      	mov	r2, r3
 800d562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d564:	637b      	str	r3, [r7, #52]	; 0x34
 800d566:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d568:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d56a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d56c:	e841 2300 	strex	r3, r2, [r1]
 800d570:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d574:	2b00      	cmp	r3, #0
 800d576:	d1e6      	bne.n	800d546 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	3308      	adds	r3, #8
 800d57e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	e853 3f00 	ldrex	r3, [r3]
 800d586:	613b      	str	r3, [r7, #16]
   return(result);
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	f023 0301 	bic.w	r3, r3, #1
 800d58e:	66bb      	str	r3, [r7, #104]	; 0x68
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	3308      	adds	r3, #8
 800d596:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d598:	623a      	str	r2, [r7, #32]
 800d59a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d59c:	69f9      	ldr	r1, [r7, #28]
 800d59e:	6a3a      	ldr	r2, [r7, #32]
 800d5a0:	e841 2300 	strex	r3, r2, [r1]
 800d5a4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d5a6:	69bb      	ldr	r3, [r7, #24]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d1e5      	bne.n	800d578 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2220      	movs	r2, #32
 800d5b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2220      	movs	r2, #32
 800d5b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2220      	movs	r2, #32
 800d5c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d5cc:	2303      	movs	r3, #3
 800d5ce:	e010      	b.n	800d5f2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	69da      	ldr	r2, [r3, #28]
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	4013      	ands	r3, r2
 800d5da:	68ba      	ldr	r2, [r7, #8]
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	bf0c      	ite	eq
 800d5e0:	2301      	moveq	r3, #1
 800d5e2:	2300      	movne	r3, #0
 800d5e4:	b2db      	uxtb	r3, r3
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	79fb      	ldrb	r3, [r7, #7]
 800d5ea:	429a      	cmp	r2, r3
 800d5ec:	f43f af46 	beq.w	800d47c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d5f0:	2300      	movs	r3, #0
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3770      	adds	r7, #112	; 0x70
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
	...

0800d5fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b096      	sub	sp, #88	; 0x58
 800d600:	af00      	add	r7, sp, #0
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	4613      	mov	r3, r2
 800d608:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	68ba      	ldr	r2, [r7, #8]
 800d60e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	88fa      	ldrh	r2, [r7, #6]
 800d614:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	2200      	movs	r2, #0
 800d61c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2222      	movs	r2, #34	; 0x22
 800d624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d02c      	beq.n	800d68a <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d634:	4a42      	ldr	r2, [pc, #264]	; (800d740 <UART_Start_Receive_DMA+0x144>)
 800d636:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d63c:	4a41      	ldr	r2, [pc, #260]	; (800d744 <UART_Start_Receive_DMA+0x148>)
 800d63e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d644:	4a40      	ldr	r2, [pc, #256]	; (800d748 <UART_Start_Receive_DMA+0x14c>)
 800d646:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d64c:	2200      	movs	r2, #0
 800d64e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	3324      	adds	r3, #36	; 0x24
 800d65a:	4619      	mov	r1, r3
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d660:	461a      	mov	r2, r3
 800d662:	88fb      	ldrh	r3, [r7, #6]
 800d664:	f7f7 fe7a 	bl	800535c <HAL_DMA_Start_IT>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d00d      	beq.n	800d68a <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	2210      	movs	r2, #16
 800d672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2200      	movs	r2, #0
 800d67a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	2220      	movs	r2, #32
 800d682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d686:	2301      	movs	r3, #1
 800d688:	e055      	b.n	800d736 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	691b      	ldr	r3, [r3, #16]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d018      	beq.n	800d6cc <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6a2:	e853 3f00 	ldrex	r3, [r3]
 800d6a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d6a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d6ae:	657b      	str	r3, [r7, #84]	; 0x54
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	461a      	mov	r2, r3
 800d6b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d6ba:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d6be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d6c0:	e841 2300 	strex	r3, r2, [r1]
 800d6c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d6c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1e6      	bne.n	800d69a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	3308      	adds	r3, #8
 800d6d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d6:	e853 3f00 	ldrex	r3, [r3]
 800d6da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6de:	f043 0301 	orr.w	r3, r3, #1
 800d6e2:	653b      	str	r3, [r7, #80]	; 0x50
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	3308      	adds	r3, #8
 800d6ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6ec:	637a      	str	r2, [r7, #52]	; 0x34
 800d6ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d6f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6f4:	e841 2300 	strex	r3, r2, [r1]
 800d6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1e5      	bne.n	800d6cc <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3308      	adds	r3, #8
 800d706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	e853 3f00 	ldrex	r3, [r3]
 800d70e:	613b      	str	r3, [r7, #16]
   return(result);
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d716:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	3308      	adds	r3, #8
 800d71e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d720:	623a      	str	r2, [r7, #32]
 800d722:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d724:	69f9      	ldr	r1, [r7, #28]
 800d726:	6a3a      	ldr	r2, [r7, #32]
 800d728:	e841 2300 	strex	r3, r2, [r1]
 800d72c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d72e:	69bb      	ldr	r3, [r7, #24]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d1e5      	bne.n	800d700 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3758      	adds	r7, #88	; 0x58
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
 800d73e:	bf00      	nop
 800d740:	0800d94f 	.word	0x0800d94f
 800d744:	0800da71 	.word	0x0800da71
 800d748:	0800daa9 	.word	0x0800daa9

0800d74c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b08f      	sub	sp, #60	; 0x3c
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d75a:	6a3b      	ldr	r3, [r7, #32]
 800d75c:	e853 3f00 	ldrex	r3, [r3]
 800d760:	61fb      	str	r3, [r7, #28]
   return(result);
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d768:	637b      	str	r3, [r7, #52]	; 0x34
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	461a      	mov	r2, r3
 800d770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d772:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d774:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d77a:	e841 2300 	strex	r3, r2, [r1]
 800d77e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d782:	2b00      	cmp	r3, #0
 800d784:	d1e6      	bne.n	800d754 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	3308      	adds	r3, #8
 800d78c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	e853 3f00 	ldrex	r3, [r3]
 800d794:	60bb      	str	r3, [r7, #8]
   return(result);
 800d796:	68bb      	ldr	r3, [r7, #8]
 800d798:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d79c:	633b      	str	r3, [r7, #48]	; 0x30
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	3308      	adds	r3, #8
 800d7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7a6:	61ba      	str	r2, [r7, #24]
 800d7a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7aa:	6979      	ldr	r1, [r7, #20]
 800d7ac:	69ba      	ldr	r2, [r7, #24]
 800d7ae:	e841 2300 	strex	r3, r2, [r1]
 800d7b2:	613b      	str	r3, [r7, #16]
   return(result);
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d1e5      	bne.n	800d786 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2220      	movs	r2, #32
 800d7be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d7c2:	bf00      	nop
 800d7c4:	373c      	adds	r7, #60	; 0x3c
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7cc:	4770      	bx	lr
	...

0800d7d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b095      	sub	sp, #84	; 0x54
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e0:	e853 3f00 	ldrex	r3, [r3]
 800d7e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d7ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	461a      	mov	r2, r3
 800d7f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7f6:	643b      	str	r3, [r7, #64]	; 0x40
 800d7f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d7fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7fe:	e841 2300 	strex	r3, r2, [r1]
 800d802:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d806:	2b00      	cmp	r3, #0
 800d808:	d1e6      	bne.n	800d7d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	3308      	adds	r3, #8
 800d810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	e853 3f00 	ldrex	r3, [r3]
 800d818:	61fb      	str	r3, [r7, #28]
   return(result);
 800d81a:	69fa      	ldr	r2, [r7, #28]
 800d81c:	4b1e      	ldr	r3, [pc, #120]	; (800d898 <UART_EndRxTransfer+0xc8>)
 800d81e:	4013      	ands	r3, r2
 800d820:	64bb      	str	r3, [r7, #72]	; 0x48
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	3308      	adds	r3, #8
 800d828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d82a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d82c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d82e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d832:	e841 2300 	strex	r3, r2, [r1]
 800d836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d1e5      	bne.n	800d80a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d842:	2b01      	cmp	r3, #1
 800d844:	d118      	bne.n	800d878 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	e853 3f00 	ldrex	r3, [r3]
 800d852:	60bb      	str	r3, [r7, #8]
   return(result);
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	f023 0310 	bic.w	r3, r3, #16
 800d85a:	647b      	str	r3, [r7, #68]	; 0x44
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	461a      	mov	r2, r3
 800d862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d864:	61bb      	str	r3, [r7, #24]
 800d866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d868:	6979      	ldr	r1, [r7, #20]
 800d86a:	69ba      	ldr	r2, [r7, #24]
 800d86c:	e841 2300 	strex	r3, r2, [r1]
 800d870:	613b      	str	r3, [r7, #16]
   return(result);
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d1e6      	bne.n	800d846 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2220      	movs	r2, #32
 800d87c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	2200      	movs	r2, #0
 800d884:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2200      	movs	r2, #0
 800d88a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d88c:	bf00      	nop
 800d88e:	3754      	adds	r7, #84	; 0x54
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr
 800d898:	effffffe 	.word	0xeffffffe

0800d89c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b090      	sub	sp, #64	; 0x40
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a8:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	69db      	ldr	r3, [r3, #28]
 800d8ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d8b2:	d037      	beq.n	800d924 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	3308      	adds	r3, #8
 800d8c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c6:	e853 3f00 	ldrex	r3, [r3]
 800d8ca:	623b      	str	r3, [r7, #32]
   return(result);
 800d8cc:	6a3b      	ldr	r3, [r7, #32]
 800d8ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800d8d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	3308      	adds	r3, #8
 800d8da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8dc:	633a      	str	r2, [r7, #48]	; 0x30
 800d8de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8e4:	e841 2300 	strex	r3, r2, [r1]
 800d8e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d1e5      	bne.n	800d8bc <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d8f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	e853 3f00 	ldrex	r3, [r3]
 800d8fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d904:	637b      	str	r3, [r7, #52]	; 0x34
 800d906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	461a      	mov	r2, r3
 800d90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d90e:	61fb      	str	r3, [r7, #28]
 800d910:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d912:	69b9      	ldr	r1, [r7, #24]
 800d914:	69fa      	ldr	r2, [r7, #28]
 800d916:	e841 2300 	strex	r3, r2, [r1]
 800d91a:	617b      	str	r3, [r7, #20]
   return(result);
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d1e6      	bne.n	800d8f0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d922:	e002      	b.n	800d92a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d924:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d926:	f7fe ff2b 	bl	800c780 <HAL_UART_TxCpltCallback>
}
 800d92a:	bf00      	nop
 800d92c:	3740      	adds	r7, #64	; 0x40
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d932:	b580      	push	{r7, lr}
 800d934:	b084      	sub	sp, #16
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d93e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f7fe ff27 	bl	800c794 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d946:	bf00      	nop
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}

0800d94e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b09c      	sub	sp, #112	; 0x70
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d95a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	69db      	ldr	r3, [r3, #28]
 800d960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d964:	d071      	beq.n	800da4a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d968:	2200      	movs	r2, #0
 800d96a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d96e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d976:	e853 3f00 	ldrex	r3, [r3]
 800d97a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d97c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d97e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d982:	66bb      	str	r3, [r7, #104]	; 0x68
 800d984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	461a      	mov	r2, r3
 800d98a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d98c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d98e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d990:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d992:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d994:	e841 2300 	strex	r3, r2, [r1]
 800d998:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d99a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d1e6      	bne.n	800d96e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	3308      	adds	r3, #8
 800d9a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9aa:	e853 3f00 	ldrex	r3, [r3]
 800d9ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9b2:	f023 0301 	bic.w	r3, r3, #1
 800d9b6:	667b      	str	r3, [r7, #100]	; 0x64
 800d9b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	3308      	adds	r3, #8
 800d9be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d9c0:	647a      	str	r2, [r7, #68]	; 0x44
 800d9c2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d9c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9c8:	e841 2300 	strex	r3, r2, [r1]
 800d9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d9ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d1e5      	bne.n	800d9a0 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	3308      	adds	r3, #8
 800d9da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9de:	e853 3f00 	ldrex	r3, [r3]
 800d9e2:	623b      	str	r3, [r7, #32]
   return(result);
 800d9e4:	6a3b      	ldr	r3, [r7, #32]
 800d9e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9ea:	663b      	str	r3, [r7, #96]	; 0x60
 800d9ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	3308      	adds	r3, #8
 800d9f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d9f4:	633a      	str	r2, [r7, #48]	; 0x30
 800d9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9fc:	e841 2300 	strex	r3, r2, [r1]
 800da00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da04:	2b00      	cmp	r3, #0
 800da06:	d1e5      	bne.n	800d9d4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800da08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da0a:	2220      	movs	r2, #32
 800da0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da14:	2b01      	cmp	r3, #1
 800da16:	d118      	bne.n	800da4a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	e853 3f00 	ldrex	r3, [r3]
 800da24:	60fb      	str	r3, [r7, #12]
   return(result);
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f023 0310 	bic.w	r3, r3, #16
 800da2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	461a      	mov	r2, r3
 800da34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da36:	61fb      	str	r3, [r7, #28]
 800da38:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da3a:	69b9      	ldr	r1, [r7, #24]
 800da3c:	69fa      	ldr	r2, [r7, #28]
 800da3e:	e841 2300 	strex	r3, r2, [r1]
 800da42:	617b      	str	r3, [r7, #20]
   return(result);
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d1e6      	bne.n	800da18 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d107      	bne.n	800da62 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da58:	4619      	mov	r1, r3
 800da5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800da5c:	f7f3 fc1e 	bl	800129c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da60:	e002      	b.n	800da68 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800da62:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800da64:	f7f4 ff9e 	bl	80029a4 <HAL_UART_RxCpltCallback>
}
 800da68:	bf00      	nop
 800da6a:	3770      	adds	r7, #112	; 0x70
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}

0800da70 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b084      	sub	sp, #16
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da7c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da82:	2b01      	cmp	r3, #1
 800da84:	d109      	bne.n	800da9a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da8c:	085b      	lsrs	r3, r3, #1
 800da8e:	b29b      	uxth	r3, r3
 800da90:	4619      	mov	r1, r3
 800da92:	68f8      	ldr	r0, [r7, #12]
 800da94:	f7f3 fc02 	bl	800129c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800da98:	e002      	b.n	800daa0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800da9a:	68f8      	ldr	r0, [r7, #12]
 800da9c:	f7fe fe84 	bl	800c7a8 <HAL_UART_RxHalfCpltCallback>
}
 800daa0:	bf00      	nop
 800daa2:	3710      	adds	r7, #16
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b086      	sub	sp, #24
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dab6:	697b      	ldr	r3, [r7, #20]
 800dab8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dabc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dac4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	689b      	ldr	r3, [r3, #8]
 800dacc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dad0:	2b80      	cmp	r3, #128	; 0x80
 800dad2:	d109      	bne.n	800dae8 <UART_DMAError+0x40>
 800dad4:	693b      	ldr	r3, [r7, #16]
 800dad6:	2b21      	cmp	r3, #33	; 0x21
 800dad8:	d106      	bne.n	800dae8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	2200      	movs	r2, #0
 800dade:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800dae2:	6978      	ldr	r0, [r7, #20]
 800dae4:	f7ff fe32 	bl	800d74c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daf2:	2b40      	cmp	r3, #64	; 0x40
 800daf4:	d109      	bne.n	800db0a <UART_DMAError+0x62>
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2b22      	cmp	r3, #34	; 0x22
 800dafa:	d106      	bne.n	800db0a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800dafc:	697b      	ldr	r3, [r7, #20]
 800dafe:	2200      	movs	r2, #0
 800db00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800db04:	6978      	ldr	r0, [r7, #20]
 800db06:	f7ff fe63 	bl	800d7d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db10:	f043 0210 	orr.w	r2, r3, #16
 800db14:	697b      	ldr	r3, [r7, #20]
 800db16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db1a:	6978      	ldr	r0, [r7, #20]
 800db1c:	f7fe fe4e 	bl	800c7bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db20:	bf00      	nop
 800db22:	3718      	adds	r7, #24
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b084      	sub	sp, #16
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	2200      	movs	r2, #0
 800db3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2200      	movs	r2, #0
 800db42:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f7fe fe38 	bl	800c7bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db4c:	bf00      	nop
 800db4e:	3710      	adds	r7, #16
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}

0800db54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b088      	sub	sp, #32
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	e853 3f00 	ldrex	r3, [r3]
 800db68:	60bb      	str	r3, [r7, #8]
   return(result);
 800db6a:	68bb      	ldr	r3, [r7, #8]
 800db6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db70:	61fb      	str	r3, [r7, #28]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	461a      	mov	r2, r3
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	61bb      	str	r3, [r7, #24]
 800db7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db7e:	6979      	ldr	r1, [r7, #20]
 800db80:	69ba      	ldr	r2, [r7, #24]
 800db82:	e841 2300 	strex	r3, r2, [r1]
 800db86:	613b      	str	r3, [r7, #16]
   return(result);
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1e6      	bne.n	800db5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	2220      	movs	r2, #32
 800db92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7fe fdef 	bl	800c780 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dba2:	bf00      	nop
 800dba4:	3720      	adds	r7, #32
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dbaa:	b480      	push	{r7}
 800dbac:	b083      	sub	sp, #12
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dbb2:	bf00      	nop
 800dbb4:	370c      	adds	r7, #12
 800dbb6:	46bd      	mov	sp, r7
 800dbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbc:	4770      	bx	lr

0800dbbe <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dbbe:	b480      	push	{r7}
 800dbc0:	b083      	sub	sp, #12
 800dbc2:	af00      	add	r7, sp, #0
 800dbc4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dbc6:	bf00      	nop
 800dbc8:	370c      	adds	r7, #12
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd0:	4770      	bx	lr

0800dbd2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dbd2:	b480      	push	{r7}
 800dbd4:	b083      	sub	sp, #12
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dbda:	bf00      	nop
 800dbdc:	370c      	adds	r7, #12
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr

0800dbe6 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b084      	sub	sp, #16
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dbf4:	2b01      	cmp	r3, #1
 800dbf6:	d101      	bne.n	800dbfc <HAL_UARTEx_EnableFifoMode+0x16>
 800dbf8:	2302      	movs	r3, #2
 800dbfa:	e02b      	b.n	800dc54 <HAL_UARTEx_EnableFifoMode+0x6e>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2224      	movs	r2, #36	; 0x24
 800dc08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	f022 0201 	bic.w	r2, r2, #1
 800dc22:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800dc32:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	68fa      	ldr	r2, [r7, #12]
 800dc3a:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f000 f91f 	bl	800de80 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2220      	movs	r2, #32
 800dc46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dc52:	2300      	movs	r3, #0
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3710      	adds	r7, #16
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b085      	sub	sp, #20
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc6a:	2b01      	cmp	r3, #1
 800dc6c:	d101      	bne.n	800dc72 <HAL_UARTEx_DisableFifoMode+0x16>
 800dc6e:	2302      	movs	r3, #2
 800dc70:	e027      	b.n	800dcc2 <HAL_UARTEx_DisableFifoMode+0x66>
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2201      	movs	r2, #1
 800dc76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2224      	movs	r2, #36	; 0x24
 800dc7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f022 0201 	bic.w	r2, r2, #1
 800dc98:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dca0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2200      	movs	r2, #0
 800dca6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	68fa      	ldr	r2, [r7, #12]
 800dcae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2220      	movs	r2, #32
 800dcb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcc0:	2300      	movs	r3, #0
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3714      	adds	r7, #20
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dccc:	4770      	bx	lr

0800dcce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dcce:	b580      	push	{r7, lr}
 800dcd0:	b084      	sub	sp, #16
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	6078      	str	r0, [r7, #4]
 800dcd6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d101      	bne.n	800dce6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dce2:	2302      	movs	r3, #2
 800dce4:	e02d      	b.n	800dd42 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2201      	movs	r2, #1
 800dcea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2224      	movs	r2, #36	; 0x24
 800dcf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	681a      	ldr	r2, [r3, #0]
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	f022 0201 	bic.w	r2, r2, #1
 800dd0c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	683a      	ldr	r2, [r7, #0]
 800dd1e:	430a      	orrs	r2, r1
 800dd20:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd22:	6878      	ldr	r0, [r7, #4]
 800dd24:	f000 f8ac 	bl	800de80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	68fa      	ldr	r2, [r7, #12]
 800dd2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2220      	movs	r2, #32
 800dd34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd40:	2300      	movs	r3, #0
}
 800dd42:	4618      	mov	r0, r3
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b084      	sub	sp, #16
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
 800dd52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d101      	bne.n	800dd62 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dd5e:	2302      	movs	r3, #2
 800dd60:	e02d      	b.n	800ddbe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2201      	movs	r2, #1
 800dd66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2224      	movs	r2, #36	; 0x24
 800dd6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	681a      	ldr	r2, [r3, #0]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f022 0201 	bic.w	r2, r2, #1
 800dd88:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	689b      	ldr	r3, [r3, #8]
 800dd90:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	683a      	ldr	r2, [r7, #0]
 800dd9a:	430a      	orrs	r2, r1
 800dd9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 f86e 	bl	800de80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	68fa      	ldr	r2, [r7, #12]
 800ddaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2220      	movs	r2, #32
 800ddb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ddbc:	2300      	movs	r3, #0
}
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	3710      	adds	r7, #16
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b08c      	sub	sp, #48	; 0x30
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	60f8      	str	r0, [r7, #12]
 800ddce:	60b9      	str	r1, [r7, #8]
 800ddd0:	4613      	mov	r3, r2
 800ddd2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddda:	2b20      	cmp	r3, #32
 800dddc:	d14a      	bne.n	800de74 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d002      	beq.n	800ddea <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800dde4:	88fb      	ldrh	r3, [r7, #6]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d101      	bne.n	800ddee <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800ddea:	2301      	movs	r3, #1
 800ddec:	e043      	b.n	800de76 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d101      	bne.n	800ddfc <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800ddf8:	2302      	movs	r3, #2
 800ddfa:	e03c      	b.n	800de76 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	2201      	movs	r2, #1
 800de00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	2201      	movs	r2, #1
 800de08:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800de0a:	88fb      	ldrh	r3, [r7, #6]
 800de0c:	461a      	mov	r2, r3
 800de0e:	68b9      	ldr	r1, [r7, #8]
 800de10:	68f8      	ldr	r0, [r7, #12]
 800de12:	f7ff fbf3 	bl	800d5fc <UART_Start_Receive_DMA>
 800de16:	4603      	mov	r3, r0
 800de18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800de1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de20:	2b00      	cmp	r3, #0
 800de22:	d124      	bne.n	800de6e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de28:	2b01      	cmp	r3, #1
 800de2a:	d11d      	bne.n	800de68 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	2210      	movs	r2, #16
 800de32:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	e853 3f00 	ldrex	r3, [r3]
 800de40:	617b      	str	r3, [r7, #20]
   return(result);
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	f043 0310 	orr.w	r3, r3, #16
 800de48:	62bb      	str	r3, [r7, #40]	; 0x28
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	461a      	mov	r2, r3
 800de50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de52:	627b      	str	r3, [r7, #36]	; 0x24
 800de54:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de56:	6a39      	ldr	r1, [r7, #32]
 800de58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de5a:	e841 2300 	strex	r3, r2, [r1]
 800de5e:	61fb      	str	r3, [r7, #28]
   return(result);
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d1e6      	bne.n	800de34 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800de66:	e002      	b.n	800de6e <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800de68:	2301      	movs	r3, #1
 800de6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800de6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de72:	e000      	b.n	800de76 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800de74:	2302      	movs	r3, #2
  }
}
 800de76:	4618      	mov	r0, r3
 800de78:	3730      	adds	r7, #48	; 0x30
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
	...

0800de80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de80:	b480      	push	{r7}
 800de82:	b085      	sub	sp, #20
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d108      	bne.n	800dea2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2201      	movs	r2, #1
 800de9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dea0:	e031      	b.n	800df06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dea2:	2310      	movs	r3, #16
 800dea4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dea6:	2310      	movs	r3, #16
 800dea8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	689b      	ldr	r3, [r3, #8]
 800deb0:	0e5b      	lsrs	r3, r3, #25
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	f003 0307 	and.w	r3, r3, #7
 800deb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	0f5b      	lsrs	r3, r3, #29
 800dec2:	b2db      	uxtb	r3, r3
 800dec4:	f003 0307 	and.w	r3, r3, #7
 800dec8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800deca:	7bbb      	ldrb	r3, [r7, #14]
 800decc:	7b3a      	ldrb	r2, [r7, #12]
 800dece:	4911      	ldr	r1, [pc, #68]	; (800df14 <UARTEx_SetNbDataToProcess+0x94>)
 800ded0:	5c8a      	ldrb	r2, [r1, r2]
 800ded2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ded6:	7b3a      	ldrb	r2, [r7, #12]
 800ded8:	490f      	ldr	r1, [pc, #60]	; (800df18 <UARTEx_SetNbDataToProcess+0x98>)
 800deda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dedc:	fb93 f3f2 	sdiv	r3, r3, r2
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dee8:	7bfb      	ldrb	r3, [r7, #15]
 800deea:	7b7a      	ldrb	r2, [r7, #13]
 800deec:	4909      	ldr	r1, [pc, #36]	; (800df14 <UARTEx_SetNbDataToProcess+0x94>)
 800deee:	5c8a      	ldrb	r2, [r1, r2]
 800def0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800def4:	7b7a      	ldrb	r2, [r7, #13]
 800def6:	4908      	ldr	r1, [pc, #32]	; (800df18 <UARTEx_SetNbDataToProcess+0x98>)
 800def8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800defa:	fb93 f3f2 	sdiv	r3, r3, r2
 800defe:	b29a      	uxth	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800df06:	bf00      	nop
 800df08:	3714      	adds	r7, #20
 800df0a:	46bd      	mov	sp, r7
 800df0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df10:	4770      	bx	lr
 800df12:	bf00      	nop
 800df14:	08010f48 	.word	0x08010f48
 800df18:	08010f50 	.word	0x08010f50

0800df1c <checkint>:
 800df1c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800df20:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800df24:	429a      	cmp	r2, r3
 800df26:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df28:	dd2b      	ble.n	800df82 <checkint+0x66>
 800df2a:	f240 4333 	movw	r3, #1075	; 0x433
 800df2e:	429a      	cmp	r2, r3
 800df30:	dc25      	bgt.n	800df7e <checkint+0x62>
 800df32:	1a9b      	subs	r3, r3, r2
 800df34:	f1a3 0620 	sub.w	r6, r3, #32
 800df38:	f04f 32ff 	mov.w	r2, #4294967295
 800df3c:	fa02 f606 	lsl.w	r6, r2, r6
 800df40:	fa02 f403 	lsl.w	r4, r2, r3
 800df44:	f1c3 0520 	rsb	r5, r3, #32
 800df48:	4334      	orrs	r4, r6
 800df4a:	fa22 f505 	lsr.w	r5, r2, r5
 800df4e:	432c      	orrs	r4, r5
 800df50:	409a      	lsls	r2, r3
 800df52:	ea20 0602 	bic.w	r6, r0, r2
 800df56:	ea21 0704 	bic.w	r7, r1, r4
 800df5a:	ea56 0207 	orrs.w	r2, r6, r7
 800df5e:	f1a3 0420 	sub.w	r4, r3, #32
 800df62:	f1c3 0220 	rsb	r2, r3, #32
 800df66:	d10c      	bne.n	800df82 <checkint+0x66>
 800df68:	40d8      	lsrs	r0, r3
 800df6a:	fa01 f302 	lsl.w	r3, r1, r2
 800df6e:	4318      	orrs	r0, r3
 800df70:	40e1      	lsrs	r1, r4
 800df72:	4308      	orrs	r0, r1
 800df74:	f000 0301 	and.w	r3, r0, #1
 800df78:	f1c3 0002 	rsb	r0, r3, #2
 800df7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df7e:	2002      	movs	r0, #2
 800df80:	e7fc      	b.n	800df7c <checkint+0x60>
 800df82:	2000      	movs	r0, #0
 800df84:	e7fa      	b.n	800df7c <checkint+0x60>
	...

0800df88 <pow>:
 800df88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df8c:	ed2d 8b0a 	vpush	{d8-d12}
 800df90:	b09b      	sub	sp, #108	; 0x6c
 800df92:	ed8d 0b02 	vstr	d0, [sp, #8]
 800df96:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800df9a:	ed8d 1b00 	vstr	d1, [sp]
 800df9e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800dfa2:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dfa6:	f109 30ff 	add.w	r0, r9, #4294967295
 800dfaa:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800dfae:	4288      	cmp	r0, r1
 800dfb0:	46cc      	mov	ip, r9
 800dfb2:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800dfb6:	d806      	bhi.n	800dfc6 <pow+0x3e>
 800dfb8:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800dfbc:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800dfc0:	297f      	cmp	r1, #127	; 0x7f
 800dfc2:	f240 81ab 	bls.w	800e31c <pow+0x394>
 800dfc6:	19b1      	adds	r1, r6, r6
 800dfc8:	9104      	str	r1, [sp, #16]
 800dfca:	eb47 0107 	adc.w	r1, r7, r7
 800dfce:	9105      	str	r1, [sp, #20]
 800dfd0:	9904      	ldr	r1, [sp, #16]
 800dfd2:	f111 31ff 	adds.w	r1, r1, #4294967295
 800dfd6:	460a      	mov	r2, r1
 800dfd8:	9905      	ldr	r1, [sp, #20]
 800dfda:	f141 31ff 	adc.w	r1, r1, #4294967295
 800dfde:	460b      	mov	r3, r1
 800dfe0:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800dfe4:	f06f 0001 	mvn.w	r0, #1
 800dfe8:	4299      	cmp	r1, r3
 800dfea:	bf08      	it	eq
 800dfec:	4290      	cmpeq	r0, r2
 800dfee:	d260      	bcs.n	800e0b2 <pow+0x12a>
 800dff0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dff4:	4313      	orrs	r3, r2
 800dff6:	d11a      	bne.n	800e02e <pow+0xa6>
 800dff8:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800dffc:	1923      	adds	r3, r4, r4
 800dffe:	930c      	str	r3, [sp, #48]	; 0x30
 800e000:	eb42 0302 	adc.w	r3, r2, r2
 800e004:	930d      	str	r3, [sp, #52]	; 0x34
 800e006:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e00a:	4bcf      	ldr	r3, [pc, #828]	; (800e348 <pow+0x3c0>)
 800e00c:	2200      	movs	r2, #0
 800e00e:	428b      	cmp	r3, r1
 800e010:	bf08      	it	eq
 800e012:	4282      	cmpeq	r2, r0
 800e014:	f080 8265 	bcs.w	800e4e2 <pow+0x55a>
 800e018:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e01c:	ed9d 6b00 	vldr	d6, [sp]
 800e020:	ee37 0b06 	vadd.f64	d0, d7, d6
 800e024:	b01b      	add	sp, #108	; 0x6c
 800e026:	ecbd 8b0a 	vpop	{d8-d12}
 800e02a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e02e:	49c7      	ldr	r1, [pc, #796]	; (800e34c <pow+0x3c4>)
 800e030:	2000      	movs	r0, #0
 800e032:	428d      	cmp	r5, r1
 800e034:	bf08      	it	eq
 800e036:	4284      	cmpeq	r4, r0
 800e038:	d10b      	bne.n	800e052 <pow+0xca>
 800e03a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e03e:	19b3      	adds	r3, r6, r6
 800e040:	930e      	str	r3, [sp, #56]	; 0x38
 800e042:	eb42 0302 	adc.w	r3, r2, r2
 800e046:	930f      	str	r3, [sp, #60]	; 0x3c
 800e048:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e04c:	4bbe      	ldr	r3, [pc, #760]	; (800e348 <pow+0x3c0>)
 800e04e:	2200      	movs	r2, #0
 800e050:	e7dd      	b.n	800e00e <pow+0x86>
 800e052:	1921      	adds	r1, r4, r4
 800e054:	9106      	str	r1, [sp, #24]
 800e056:	eb45 0105 	adc.w	r1, r5, r5
 800e05a:	9107      	str	r1, [sp, #28]
 800e05c:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e060:	49bb      	ldr	r1, [pc, #748]	; (800e350 <pow+0x3c8>)
 800e062:	2000      	movs	r0, #0
 800e064:	42a1      	cmp	r1, r4
 800e066:	bf08      	it	eq
 800e068:	4298      	cmpeq	r0, r3
 800e06a:	d3d5      	bcc.n	800e018 <pow+0x90>
 800e06c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e070:	428c      	cmp	r4, r1
 800e072:	bf08      	it	eq
 800e074:	4283      	cmpeq	r3, r0
 800e076:	d1cf      	bne.n	800e018 <pow+0x90>
 800e078:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e07c:	49b5      	ldr	r1, [pc, #724]	; (800e354 <pow+0x3cc>)
 800e07e:	2000      	movs	r0, #0
 800e080:	428c      	cmp	r4, r1
 800e082:	bf08      	it	eq
 800e084:	4283      	cmpeq	r3, r0
 800e086:	f000 822c 	beq.w	800e4e2 <pow+0x55a>
 800e08a:	49b3      	ldr	r1, [pc, #716]	; (800e358 <pow+0x3d0>)
 800e08c:	f04f 30ff 	mov.w	r0, #4294967295
 800e090:	42a1      	cmp	r1, r4
 800e092:	bf08      	it	eq
 800e094:	4298      	cmpeq	r0, r3
 800e096:	ea6f 0307 	mvn.w	r3, r7
 800e09a:	bf34      	ite	cc
 800e09c:	2201      	movcc	r2, #1
 800e09e:	2200      	movcs	r2, #0
 800e0a0:	0fdb      	lsrs	r3, r3, #31
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	f040 821a 	bne.w	800e4dc <pow+0x554>
 800e0a8:	ed9d 7b00 	vldr	d7, [sp]
 800e0ac:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e0b0:	e7b8      	b.n	800e024 <pow+0x9c>
 800e0b2:	1923      	adds	r3, r4, r4
 800e0b4:	9308      	str	r3, [sp, #32]
 800e0b6:	eb45 0305 	adc.w	r3, r5, r5
 800e0ba:	9309      	str	r3, [sp, #36]	; 0x24
 800e0bc:	9b08      	ldr	r3, [sp, #32]
 800e0be:	f113 33ff 	adds.w	r3, r3, #4294967295
 800e0c2:	9310      	str	r3, [sp, #64]	; 0x40
 800e0c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0c6:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e0ca:	9311      	str	r3, [sp, #68]	; 0x44
 800e0cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e0d0:	4299      	cmp	r1, r3
 800e0d2:	bf08      	it	eq
 800e0d4:	4290      	cmpeq	r0, r2
 800e0d6:	d22d      	bcs.n	800e134 <pow+0x1ac>
 800e0d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0dc:	2c00      	cmp	r4, #0
 800e0de:	f175 0300 	sbcs.w	r3, r5, #0
 800e0e2:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e0e6:	da16      	bge.n	800e116 <pow+0x18e>
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	4639      	mov	r1, r7
 800e0ec:	f7ff ff16 	bl	800df1c <checkint>
 800e0f0:	2801      	cmp	r0, #1
 800e0f2:	d110      	bne.n	800e116 <pow+0x18e>
 800e0f4:	eeb1 0b40 	vneg.f64	d0, d0
 800e0f8:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800e0fc:	4323      	orrs	r3, r4
 800e0fe:	d10c      	bne.n	800e11a <pow+0x192>
 800e100:	2e00      	cmp	r6, #0
 800e102:	f177 0300 	sbcs.w	r3, r7, #0
 800e106:	da8d      	bge.n	800e024 <pow+0x9c>
 800e108:	b01b      	add	sp, #108	; 0x6c
 800e10a:	ecbd 8b0a 	vpop	{d8-d12}
 800e10e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e112:	f000 ba29 	b.w	800e568 <__math_divzero>
 800e116:	2000      	movs	r0, #0
 800e118:	e7ee      	b.n	800e0f8 <pow+0x170>
 800e11a:	2e00      	cmp	r6, #0
 800e11c:	f177 0300 	sbcs.w	r3, r7, #0
 800e120:	da80      	bge.n	800e024 <pow+0x9c>
 800e122:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e126:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e12a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800e12e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800e132:	e777      	b.n	800e024 <pow+0x9c>
 800e134:	2c00      	cmp	r4, #0
 800e136:	f175 0300 	sbcs.w	r3, r5, #0
 800e13a:	da35      	bge.n	800e1a8 <pow+0x220>
 800e13c:	4630      	mov	r0, r6
 800e13e:	4639      	mov	r1, r7
 800e140:	f7ff feec 	bl	800df1c <checkint>
 800e144:	b940      	cbnz	r0, 800e158 <pow+0x1d0>
 800e146:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e14a:	b01b      	add	sp, #108	; 0x6c
 800e14c:	ecbd 8b0a 	vpop	{d8-d12}
 800e150:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	f000 ba20 	b.w	800e598 <__math_invalid>
 800e158:	2801      	cmp	r0, #1
 800e15a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e15e:	bf14      	ite	ne
 800e160:	2000      	movne	r0, #0
 800e162:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800e166:	461d      	mov	r5, r3
 800e168:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800e16c:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800e170:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800e174:	2a7f      	cmp	r2, #127	; 0x7f
 800e176:	d933      	bls.n	800e1e0 <pow+0x258>
 800e178:	4974      	ldr	r1, [pc, #464]	; (800e34c <pow+0x3c4>)
 800e17a:	2000      	movs	r0, #0
 800e17c:	428d      	cmp	r5, r1
 800e17e:	bf08      	it	eq
 800e180:	4284      	cmpeq	r4, r0
 800e182:	f000 81ae 	beq.w	800e4e2 <pow+0x55a>
 800e186:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d80e      	bhi.n	800e1ac <pow+0x224>
 800e18e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e192:	ed9d 7b00 	vldr	d7, [sp]
 800e196:	42a9      	cmp	r1, r5
 800e198:	bf08      	it	eq
 800e19a:	42a0      	cmpeq	r0, r4
 800e19c:	bf34      	ite	cc
 800e19e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800e1a2:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800e1a6:	e73d      	b.n	800e024 <pow+0x9c>
 800e1a8:	2000      	movs	r0, #0
 800e1aa:	e7df      	b.n	800e16c <pow+0x1e4>
 800e1ac:	42a9      	cmp	r1, r5
 800e1ae:	bf08      	it	eq
 800e1b0:	42a0      	cmpeq	r0, r4
 800e1b2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e1b6:	bf2c      	ite	cs
 800e1b8:	2301      	movcs	r3, #1
 800e1ba:	2300      	movcc	r3, #0
 800e1bc:	4590      	cmp	r8, r2
 800e1be:	bf8c      	ite	hi
 800e1c0:	f04f 0800 	movhi.w	r8, #0
 800e1c4:	f04f 0801 	movls.w	r8, #1
 800e1c8:	4543      	cmp	r3, r8
 800e1ca:	f04f 0000 	mov.w	r0, #0
 800e1ce:	f000 80af 	beq.w	800e330 <pow+0x3a8>
 800e1d2:	b01b      	add	sp, #108	; 0x6c
 800e1d4:	ecbd 8b0a 	vpop	{d8-d12}
 800e1d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1dc:	f000 b9bc 	b.w	800e558 <__math_oflow>
 800e1e0:	f1bc 0f00 	cmp.w	ip, #0
 800e1e4:	d10e      	bne.n	800e204 <pow+0x27c>
 800e1e6:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e340 <pow+0x3b8>
 800e1ea:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e1ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e1f2:	ec57 6b17 	vmov	r6, r7, d7
 800e1f6:	4b59      	ldr	r3, [pc, #356]	; (800e35c <pow+0x3d4>)
 800e1f8:	2100      	movs	r1, #0
 800e1fa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e1fe:	1874      	adds	r4, r6, r1
 800e200:	eb42 0503 	adc.w	r5, r2, r3
 800e204:	2300      	movs	r3, #0
 800e206:	18e3      	adds	r3, r4, r3
 800e208:	4b55      	ldr	r3, [pc, #340]	; (800e360 <pow+0x3d8>)
 800e20a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e20e:	eb45 0303 	adc.w	r3, r5, r3
 800e212:	1519      	asrs	r1, r3, #20
 800e214:	ee03 1a10 	vmov	s6, r1
 800e218:	0d1e      	lsrs	r6, r3, #20
 800e21a:	2100      	movs	r1, #0
 800e21c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800e220:	0536      	lsls	r6, r6, #20
 800e222:	1a63      	subs	r3, r4, r1
 800e224:	9312      	str	r3, [sp, #72]	; 0x48
 800e226:	eb65 0306 	sbc.w	r3, r5, r6
 800e22a:	9313      	str	r3, [sp, #76]	; 0x4c
 800e22c:	4b4d      	ldr	r3, [pc, #308]	; (800e364 <pow+0x3dc>)
 800e22e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800e232:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e236:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800e23a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e23e:	ed93 7b00 	vldr	d7, [r3]
 800e242:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800e246:	ed93 4b02 	vldr	d4, [r3, #8]
 800e24a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800e24e:	eea3 5b07 	vfma.f64	d5, d3, d7
 800e252:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800e256:	ee36 9b05 	vadd.f64	d9, d6, d5
 800e25a:	ee35 5b49 	vsub.f64	d5, d5, d9
 800e25e:	eea3 7b04 	vfma.f64	d7, d3, d4
 800e262:	ed93 4b04 	vldr	d4, [r3, #16]
 800e266:	ee35 5b06 	vadd.f64	d5, d5, d6
 800e26a:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e26e:	ee26 4b04 	vmul.f64	d4, d6, d4
 800e272:	ed93 3b08 	vldr	d3, [r3, #32]
 800e276:	ee26 0b04 	vmul.f64	d0, d6, d4
 800e27a:	eeb0 8b40 	vmov.f64	d8, d0
 800e27e:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800e282:	ed93 4b06 	vldr	d4, [r3, #24]
 800e286:	ee26 ab00 	vmul.f64	d10, d6, d0
 800e28a:	ee39 1b00 	vadd.f64	d1, d9, d0
 800e28e:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800e292:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e296:	ee39 9b41 	vsub.f64	d9, d9, d1
 800e29a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800e29e:	ee37 8b08 	vadd.f64	d8, d7, d8
 800e2a2:	ee39 9b00 	vadd.f64	d9, d9, d0
 800e2a6:	eea6 3b02 	vfma.f64	d3, d6, d2
 800e2aa:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800e2ae:	ee38 9b09 	vadd.f64	d9, d8, d9
 800e2b2:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800e2b6:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800e2ba:	ed9d 6b00 	vldr	d6, [sp]
 800e2be:	eea0 3b02 	vfma.f64	d3, d0, d2
 800e2c2:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e2c6:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800e2ca:	ee31 7b09 	vadd.f64	d7, d1, d9
 800e2ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e2d2:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e2d6:	eeb0 3b46 	vmov.f64	d3, d6
 800e2da:	ee31 1b47 	vsub.f64	d1, d1, d7
 800e2de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2e2:	ee31 9b09 	vadd.f64	d9, d1, d9
 800e2e6:	ed9d 6b00 	vldr	d6, [sp]
 800e2ea:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800e2ee:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800e2f2:	193c      	adds	r4, r7, r4
 800e2f4:	2c3e      	cmp	r4, #62	; 0x3e
 800e2f6:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800e2fa:	eea6 3b09 	vfma.f64	d3, d6, d9
 800e2fe:	d934      	bls.n	800e36a <pow+0x3e2>
 800e300:	428c      	cmp	r4, r1
 800e302:	da0d      	bge.n	800e320 <pow+0x398>
 800e304:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e308:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e30c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e310:	2800      	cmp	r0, #0
 800e312:	f43f ae87 	beq.w	800e024 <pow+0x9c>
 800e316:	eeb1 0b40 	vneg.f64	d0, d0
 800e31a:	e683      	b.n	800e024 <pow+0x9c>
 800e31c:	2000      	movs	r0, #0
 800e31e:	e771      	b.n	800e204 <pow+0x27c>
 800e320:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800e324:	d920      	bls.n	800e368 <pow+0x3e0>
 800e326:	2a00      	cmp	r2, #0
 800e328:	f173 0300 	sbcs.w	r3, r3, #0
 800e32c:	f6bf af51 	bge.w	800e1d2 <pow+0x24a>
 800e330:	b01b      	add	sp, #108	; 0x6c
 800e332:	ecbd 8b0a 	vpop	{d8-d12}
 800e336:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e33a:	f000 b905 	b.w	800e548 <__math_uflow>
 800e33e:	bf00      	nop
 800e340:	00000000 	.word	0x00000000
 800e344:	43300000 	.word	0x43300000
 800e348:	fff00000 	.word	0xfff00000
 800e34c:	3ff00000 	.word	0x3ff00000
 800e350:	ffe00000 	.word	0xffe00000
 800e354:	7fe00000 	.word	0x7fe00000
 800e358:	7fdfffff 	.word	0x7fdfffff
 800e35c:	fcc00000 	.word	0xfcc00000
 800e360:	c0196aab 	.word	0xc0196aab
 800e364:	08010f58 	.word	0x08010f58
 800e368:	460f      	mov	r7, r1
 800e36a:	4e65      	ldr	r6, [pc, #404]	; (800e500 <pow+0x578>)
 800e36c:	ed9d 4b02 	vldr	d4, [sp, #8]
 800e370:	ed96 6b02 	vldr	d6, [r6, #8]
 800e374:	ed96 7b00 	vldr	d7, [r6]
 800e378:	eeb0 5b46 	vmov.f64	d5, d6
 800e37c:	eea4 5b07 	vfma.f64	d5, d4, d7
 800e380:	ed8d 5b00 	vstr	d5, [sp]
 800e384:	ee35 6b46 	vsub.f64	d6, d5, d6
 800e388:	eeb0 5b44 	vmov.f64	d5, d4
 800e38c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e390:	ed96 7b04 	vldr	d7, [r6, #16]
 800e394:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800e398:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e39c:	eeb0 7b45 	vmov.f64	d7, d5
 800e3a0:	ed96 5b06 	vldr	d5, [r6, #24]
 800e3a4:	1849      	adds	r1, r1, r1
 800e3a6:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800e3aa:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800e3ae:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e3b2:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800e3b6:	ee33 3b07 	vadd.f64	d3, d3, d7
 800e3ba:	ee23 6b03 	vmul.f64	d6, d3, d3
 800e3be:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800e3c2:	ed96 5b08 	vldr	d5, [r6, #32]
 800e3c6:	ee33 7b07 	vadd.f64	d7, d3, d7
 800e3ca:	1814      	adds	r4, r2, r0
 800e3cc:	0365      	lsls	r5, r4, #13
 800e3ce:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800e3d2:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e3d6:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e3da:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800e3de:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e3e2:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800e3e6:	2000      	movs	r0, #0
 800e3e8:	eb10 0a04 	adds.w	sl, r0, r4
 800e3ec:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e3f0:	eb45 0b0c 	adc.w	fp, r5, ip
 800e3f4:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e3f8:	2f00      	cmp	r7, #0
 800e3fa:	d16a      	bne.n	800e4d2 <pow+0x54a>
 800e3fc:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800e400:	4639      	mov	r1, r7
 800e402:	ea50 0301 	orrs.w	r3, r0, r1
 800e406:	f04f 0300 	mov.w	r3, #0
 800e40a:	d115      	bne.n	800e438 <pow+0x4b0>
 800e40c:	eb1a 0303 	adds.w	r3, sl, r3
 800e410:	ee0b 3a10 	vmov	s22, r3
 800e414:	4b3b      	ldr	r3, [pc, #236]	; (800e504 <pow+0x57c>)
 800e416:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800e4e8 <pow+0x560>
 800e41a:	eb4b 0303 	adc.w	r3, fp, r3
 800e41e:	ee0b 3a90 	vmov	s23, r3
 800e422:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800e426:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800e42a:	b01b      	add	sp, #108	; 0x6c
 800e42c:	ecbd 8b0a 	vpop	{d8-d12}
 800e430:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e434:	f000 b8c8 	b.w	800e5c8 <__math_check_oflow>
 800e438:	eb1a 0303 	adds.w	r3, sl, r3
 800e43c:	930a      	str	r3, [sp, #40]	; 0x28
 800e43e:	4b32      	ldr	r3, [pc, #200]	; (800e508 <pow+0x580>)
 800e440:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e444:	eb4b 0303 	adc.w	r3, fp, r3
 800e448:	930b      	str	r3, [sp, #44]	; 0x2c
 800e44a:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e44e:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e452:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e456:	eeb0 3bc7 	vabs.f64	d3, d7
 800e45a:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800e45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e462:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800e4f0 <pow+0x568>
 800e466:	d52b      	bpl.n	800e4c0 <pow+0x538>
 800e468:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e46c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e474:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800e478:	ee35 6b06 	vadd.f64	d6, d5, d6
 800e47c:	bf48      	it	mi
 800e47e:	eeb0 4b43 	vmovmi.f64	d4, d3
 800e482:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e486:	ee34 5b43 	vsub.f64	d5, d4, d3
 800e48a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e48e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e492:	ee37 7b03 	vadd.f64	d7, d7, d3
 800e496:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e49a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4a2:	d105      	bne.n	800e4b0 <pow+0x528>
 800e4a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e4a6:	463a      	mov	r2, r7
 800e4a8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e4ac:	ec43 2b17 	vmov	d7, r2, r3
 800e4b0:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800e4b4:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800e4b8:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e4bc:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800e4c0:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e4c4:	b01b      	add	sp, #108	; 0x6c
 800e4c6:	ecbd 8b0a 	vpop	{d8-d12}
 800e4ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ce:	f000 b872 	b.w	800e5b6 <__math_check_uflow>
 800e4d2:	ec4b ab10 	vmov	d0, sl, fp
 800e4d6:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e4da:	e5a3      	b.n	800e024 <pow+0x9c>
 800e4dc:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800e4f8 <pow+0x570>
 800e4e0:	e5a0      	b.n	800e024 <pow+0x9c>
 800e4e2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e4e6:	e59d      	b.n	800e024 <pow+0x9c>
 800e4e8:	00000000 	.word	0x00000000
 800e4ec:	7f000000 	.word	0x7f000000
 800e4f0:	00000000 	.word	0x00000000
 800e4f4:	00100000 	.word	0x00100000
	...
 800e500:	08011fa0 	.word	0x08011fa0
 800e504:	c0f00000 	.word	0xc0f00000
 800e508:	3fe00000 	.word	0x3fe00000

0800e50c <with_errno>:
 800e50c:	b513      	push	{r0, r1, r4, lr}
 800e50e:	4604      	mov	r4, r0
 800e510:	ed8d 0b00 	vstr	d0, [sp]
 800e514:	f000 f86c 	bl	800e5f0 <__errno>
 800e518:	ed9d 0b00 	vldr	d0, [sp]
 800e51c:	6004      	str	r4, [r0, #0]
 800e51e:	b002      	add	sp, #8
 800e520:	bd10      	pop	{r4, pc}

0800e522 <xflow>:
 800e522:	b082      	sub	sp, #8
 800e524:	b158      	cbz	r0, 800e53e <xflow+0x1c>
 800e526:	eeb1 7b40 	vneg.f64	d7, d0
 800e52a:	ed8d 7b00 	vstr	d7, [sp]
 800e52e:	ed9d 7b00 	vldr	d7, [sp]
 800e532:	2022      	movs	r0, #34	; 0x22
 800e534:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e538:	b002      	add	sp, #8
 800e53a:	f7ff bfe7 	b.w	800e50c <with_errno>
 800e53e:	eeb0 7b40 	vmov.f64	d7, d0
 800e542:	e7f2      	b.n	800e52a <xflow+0x8>
 800e544:	0000      	movs	r0, r0
	...

0800e548 <__math_uflow>:
 800e548:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e550 <__math_uflow+0x8>
 800e54c:	f7ff bfe9 	b.w	800e522 <xflow>
 800e550:	00000000 	.word	0x00000000
 800e554:	10000000 	.word	0x10000000

0800e558 <__math_oflow>:
 800e558:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e560 <__math_oflow+0x8>
 800e55c:	f7ff bfe1 	b.w	800e522 <xflow>
 800e560:	00000000 	.word	0x00000000
 800e564:	70000000 	.word	0x70000000

0800e568 <__math_divzero>:
 800e568:	b082      	sub	sp, #8
 800e56a:	2800      	cmp	r0, #0
 800e56c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e570:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800e574:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800e578:	ed8d 7b00 	vstr	d7, [sp]
 800e57c:	ed9d 0b00 	vldr	d0, [sp]
 800e580:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800e590 <__math_divzero+0x28>
 800e584:	2022      	movs	r0, #34	; 0x22
 800e586:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e58a:	b002      	add	sp, #8
 800e58c:	f7ff bfbe 	b.w	800e50c <with_errno>
	...

0800e598 <__math_invalid>:
 800e598:	eeb0 7b40 	vmov.f64	d7, d0
 800e59c:	eeb4 7b47 	vcmp.f64	d7, d7
 800e5a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5a4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e5a8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e5ac:	d602      	bvs.n	800e5b4 <__math_invalid+0x1c>
 800e5ae:	2021      	movs	r0, #33	; 0x21
 800e5b0:	f7ff bfac 	b.w	800e50c <with_errno>
 800e5b4:	4770      	bx	lr

0800e5b6 <__math_check_uflow>:
 800e5b6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5be:	d102      	bne.n	800e5c6 <__math_check_uflow+0x10>
 800e5c0:	2022      	movs	r0, #34	; 0x22
 800e5c2:	f7ff bfa3 	b.w	800e50c <with_errno>
 800e5c6:	4770      	bx	lr

0800e5c8 <__math_check_oflow>:
 800e5c8:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800e5e8 <__math_check_oflow+0x20>
 800e5cc:	eeb0 7bc0 	vabs.f64	d7, d0
 800e5d0:	eeb4 7b46 	vcmp.f64	d7, d6
 800e5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5d8:	dd02      	ble.n	800e5e0 <__math_check_oflow+0x18>
 800e5da:	2022      	movs	r0, #34	; 0x22
 800e5dc:	f7ff bf96 	b.w	800e50c <with_errno>
 800e5e0:	4770      	bx	lr
 800e5e2:	bf00      	nop
 800e5e4:	f3af 8000 	nop.w
 800e5e8:	ffffffff 	.word	0xffffffff
 800e5ec:	7fefffff 	.word	0x7fefffff

0800e5f0 <__errno>:
 800e5f0:	4b01      	ldr	r3, [pc, #4]	; (800e5f8 <__errno+0x8>)
 800e5f2:	6818      	ldr	r0, [r3, #0]
 800e5f4:	4770      	bx	lr
 800e5f6:	bf00      	nop
 800e5f8:	24000028 	.word	0x24000028

0800e5fc <__libc_init_array>:
 800e5fc:	b570      	push	{r4, r5, r6, lr}
 800e5fe:	4d0d      	ldr	r5, [pc, #52]	; (800e634 <__libc_init_array+0x38>)
 800e600:	4c0d      	ldr	r4, [pc, #52]	; (800e638 <__libc_init_array+0x3c>)
 800e602:	1b64      	subs	r4, r4, r5
 800e604:	10a4      	asrs	r4, r4, #2
 800e606:	2600      	movs	r6, #0
 800e608:	42a6      	cmp	r6, r4
 800e60a:	d109      	bne.n	800e620 <__libc_init_array+0x24>
 800e60c:	4d0b      	ldr	r5, [pc, #44]	; (800e63c <__libc_init_array+0x40>)
 800e60e:	4c0c      	ldr	r4, [pc, #48]	; (800e640 <__libc_init_array+0x44>)
 800e610:	f002 fc60 	bl	8010ed4 <_init>
 800e614:	1b64      	subs	r4, r4, r5
 800e616:	10a4      	asrs	r4, r4, #2
 800e618:	2600      	movs	r6, #0
 800e61a:	42a6      	cmp	r6, r4
 800e61c:	d105      	bne.n	800e62a <__libc_init_array+0x2e>
 800e61e:	bd70      	pop	{r4, r5, r6, pc}
 800e620:	f855 3b04 	ldr.w	r3, [r5], #4
 800e624:	4798      	blx	r3
 800e626:	3601      	adds	r6, #1
 800e628:	e7ee      	b.n	800e608 <__libc_init_array+0xc>
 800e62a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e62e:	4798      	blx	r3
 800e630:	3601      	adds	r6, #1
 800e632:	e7f2      	b.n	800e61a <__libc_init_array+0x1e>
 800e634:	08012bfc 	.word	0x08012bfc
 800e638:	08012bfc 	.word	0x08012bfc
 800e63c:	08012bfc 	.word	0x08012bfc
 800e640:	08012c04 	.word	0x08012c04

0800e644 <memcpy>:
 800e644:	440a      	add	r2, r1
 800e646:	4291      	cmp	r1, r2
 800e648:	f100 33ff 	add.w	r3, r0, #4294967295
 800e64c:	d100      	bne.n	800e650 <memcpy+0xc>
 800e64e:	4770      	bx	lr
 800e650:	b510      	push	{r4, lr}
 800e652:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e65a:	4291      	cmp	r1, r2
 800e65c:	d1f9      	bne.n	800e652 <memcpy+0xe>
 800e65e:	bd10      	pop	{r4, pc}

0800e660 <memset>:
 800e660:	4402      	add	r2, r0
 800e662:	4603      	mov	r3, r0
 800e664:	4293      	cmp	r3, r2
 800e666:	d100      	bne.n	800e66a <memset+0xa>
 800e668:	4770      	bx	lr
 800e66a:	f803 1b01 	strb.w	r1, [r3], #1
 800e66e:	e7f9      	b.n	800e664 <memset+0x4>

0800e670 <__cvt>:
 800e670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e672:	ed2d 8b02 	vpush	{d8}
 800e676:	eeb0 8b40 	vmov.f64	d8, d0
 800e67a:	b085      	sub	sp, #20
 800e67c:	4617      	mov	r7, r2
 800e67e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e680:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e682:	ee18 2a90 	vmov	r2, s17
 800e686:	f025 0520 	bic.w	r5, r5, #32
 800e68a:	2a00      	cmp	r2, #0
 800e68c:	bfb6      	itet	lt
 800e68e:	222d      	movlt	r2, #45	; 0x2d
 800e690:	2200      	movge	r2, #0
 800e692:	eeb1 8b40 	vneglt.f64	d8, d0
 800e696:	2d46      	cmp	r5, #70	; 0x46
 800e698:	460c      	mov	r4, r1
 800e69a:	701a      	strb	r2, [r3, #0]
 800e69c:	d004      	beq.n	800e6a8 <__cvt+0x38>
 800e69e:	2d45      	cmp	r5, #69	; 0x45
 800e6a0:	d100      	bne.n	800e6a4 <__cvt+0x34>
 800e6a2:	3401      	adds	r4, #1
 800e6a4:	2102      	movs	r1, #2
 800e6a6:	e000      	b.n	800e6aa <__cvt+0x3a>
 800e6a8:	2103      	movs	r1, #3
 800e6aa:	ab03      	add	r3, sp, #12
 800e6ac:	9301      	str	r3, [sp, #4]
 800e6ae:	ab02      	add	r3, sp, #8
 800e6b0:	9300      	str	r3, [sp, #0]
 800e6b2:	4622      	mov	r2, r4
 800e6b4:	4633      	mov	r3, r6
 800e6b6:	eeb0 0b48 	vmov.f64	d0, d8
 800e6ba:	f000 fca9 	bl	800f010 <_dtoa_r>
 800e6be:	2d47      	cmp	r5, #71	; 0x47
 800e6c0:	d109      	bne.n	800e6d6 <__cvt+0x66>
 800e6c2:	07fb      	lsls	r3, r7, #31
 800e6c4:	d407      	bmi.n	800e6d6 <__cvt+0x66>
 800e6c6:	9b03      	ldr	r3, [sp, #12]
 800e6c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e6ca:	1a1b      	subs	r3, r3, r0
 800e6cc:	6013      	str	r3, [r2, #0]
 800e6ce:	b005      	add	sp, #20
 800e6d0:	ecbd 8b02 	vpop	{d8}
 800e6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6d6:	2d46      	cmp	r5, #70	; 0x46
 800e6d8:	eb00 0204 	add.w	r2, r0, r4
 800e6dc:	d10c      	bne.n	800e6f8 <__cvt+0x88>
 800e6de:	7803      	ldrb	r3, [r0, #0]
 800e6e0:	2b30      	cmp	r3, #48	; 0x30
 800e6e2:	d107      	bne.n	800e6f4 <__cvt+0x84>
 800e6e4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6ec:	bf1c      	itt	ne
 800e6ee:	f1c4 0401 	rsbne	r4, r4, #1
 800e6f2:	6034      	strne	r4, [r6, #0]
 800e6f4:	6833      	ldr	r3, [r6, #0]
 800e6f6:	441a      	add	r2, r3
 800e6f8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e700:	bf08      	it	eq
 800e702:	9203      	streq	r2, [sp, #12]
 800e704:	2130      	movs	r1, #48	; 0x30
 800e706:	9b03      	ldr	r3, [sp, #12]
 800e708:	4293      	cmp	r3, r2
 800e70a:	d2dc      	bcs.n	800e6c6 <__cvt+0x56>
 800e70c:	1c5c      	adds	r4, r3, #1
 800e70e:	9403      	str	r4, [sp, #12]
 800e710:	7019      	strb	r1, [r3, #0]
 800e712:	e7f8      	b.n	800e706 <__cvt+0x96>

0800e714 <__exponent>:
 800e714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e716:	4603      	mov	r3, r0
 800e718:	2900      	cmp	r1, #0
 800e71a:	bfb8      	it	lt
 800e71c:	4249      	neglt	r1, r1
 800e71e:	f803 2b02 	strb.w	r2, [r3], #2
 800e722:	bfb4      	ite	lt
 800e724:	222d      	movlt	r2, #45	; 0x2d
 800e726:	222b      	movge	r2, #43	; 0x2b
 800e728:	2909      	cmp	r1, #9
 800e72a:	7042      	strb	r2, [r0, #1]
 800e72c:	dd2a      	ble.n	800e784 <__exponent+0x70>
 800e72e:	f10d 0407 	add.w	r4, sp, #7
 800e732:	46a4      	mov	ip, r4
 800e734:	270a      	movs	r7, #10
 800e736:	46a6      	mov	lr, r4
 800e738:	460a      	mov	r2, r1
 800e73a:	fb91 f6f7 	sdiv	r6, r1, r7
 800e73e:	fb07 1516 	mls	r5, r7, r6, r1
 800e742:	3530      	adds	r5, #48	; 0x30
 800e744:	2a63      	cmp	r2, #99	; 0x63
 800e746:	f104 34ff 	add.w	r4, r4, #4294967295
 800e74a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e74e:	4631      	mov	r1, r6
 800e750:	dcf1      	bgt.n	800e736 <__exponent+0x22>
 800e752:	3130      	adds	r1, #48	; 0x30
 800e754:	f1ae 0502 	sub.w	r5, lr, #2
 800e758:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e75c:	1c44      	adds	r4, r0, #1
 800e75e:	4629      	mov	r1, r5
 800e760:	4561      	cmp	r1, ip
 800e762:	d30a      	bcc.n	800e77a <__exponent+0x66>
 800e764:	f10d 0209 	add.w	r2, sp, #9
 800e768:	eba2 020e 	sub.w	r2, r2, lr
 800e76c:	4565      	cmp	r5, ip
 800e76e:	bf88      	it	hi
 800e770:	2200      	movhi	r2, #0
 800e772:	4413      	add	r3, r2
 800e774:	1a18      	subs	r0, r3, r0
 800e776:	b003      	add	sp, #12
 800e778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e77a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e77e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e782:	e7ed      	b.n	800e760 <__exponent+0x4c>
 800e784:	2330      	movs	r3, #48	; 0x30
 800e786:	3130      	adds	r1, #48	; 0x30
 800e788:	7083      	strb	r3, [r0, #2]
 800e78a:	70c1      	strb	r1, [r0, #3]
 800e78c:	1d03      	adds	r3, r0, #4
 800e78e:	e7f1      	b.n	800e774 <__exponent+0x60>

0800e790 <_printf_float>:
 800e790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e794:	b08b      	sub	sp, #44	; 0x2c
 800e796:	460c      	mov	r4, r1
 800e798:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e79c:	4616      	mov	r6, r2
 800e79e:	461f      	mov	r7, r3
 800e7a0:	4605      	mov	r5, r0
 800e7a2:	f001 f9b7 	bl	800fb14 <_localeconv_r>
 800e7a6:	f8d0 b000 	ldr.w	fp, [r0]
 800e7aa:	4658      	mov	r0, fp
 800e7ac:	f7f1 fd98 	bl	80002e0 <strlen>
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	9308      	str	r3, [sp, #32]
 800e7b4:	f8d8 3000 	ldr.w	r3, [r8]
 800e7b8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e7bc:	6822      	ldr	r2, [r4, #0]
 800e7be:	3307      	adds	r3, #7
 800e7c0:	f023 0307 	bic.w	r3, r3, #7
 800e7c4:	f103 0108 	add.w	r1, r3, #8
 800e7c8:	f8c8 1000 	str.w	r1, [r8]
 800e7cc:	4682      	mov	sl, r0
 800e7ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e7d2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e7d6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ea38 <_printf_float+0x2a8>
 800e7da:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e7de:	eeb0 6bc0 	vabs.f64	d6, d0
 800e7e2:	eeb4 6b47 	vcmp.f64	d6, d7
 800e7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7ea:	dd24      	ble.n	800e836 <_printf_float+0xa6>
 800e7ec:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7f4:	d502      	bpl.n	800e7fc <_printf_float+0x6c>
 800e7f6:	232d      	movs	r3, #45	; 0x2d
 800e7f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7fc:	4b90      	ldr	r3, [pc, #576]	; (800ea40 <_printf_float+0x2b0>)
 800e7fe:	4891      	ldr	r0, [pc, #580]	; (800ea44 <_printf_float+0x2b4>)
 800e800:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e804:	bf94      	ite	ls
 800e806:	4698      	movls	r8, r3
 800e808:	4680      	movhi	r8, r0
 800e80a:	2303      	movs	r3, #3
 800e80c:	6123      	str	r3, [r4, #16]
 800e80e:	f022 0204 	bic.w	r2, r2, #4
 800e812:	2300      	movs	r3, #0
 800e814:	6022      	str	r2, [r4, #0]
 800e816:	9304      	str	r3, [sp, #16]
 800e818:	9700      	str	r7, [sp, #0]
 800e81a:	4633      	mov	r3, r6
 800e81c:	aa09      	add	r2, sp, #36	; 0x24
 800e81e:	4621      	mov	r1, r4
 800e820:	4628      	mov	r0, r5
 800e822:	f000 f9d3 	bl	800ebcc <_printf_common>
 800e826:	3001      	adds	r0, #1
 800e828:	f040 808a 	bne.w	800e940 <_printf_float+0x1b0>
 800e82c:	f04f 30ff 	mov.w	r0, #4294967295
 800e830:	b00b      	add	sp, #44	; 0x2c
 800e832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e836:	eeb4 0b40 	vcmp.f64	d0, d0
 800e83a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e83e:	d709      	bvc.n	800e854 <_printf_float+0xc4>
 800e840:	ee10 3a90 	vmov	r3, s1
 800e844:	2b00      	cmp	r3, #0
 800e846:	bfbc      	itt	lt
 800e848:	232d      	movlt	r3, #45	; 0x2d
 800e84a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e84e:	487e      	ldr	r0, [pc, #504]	; (800ea48 <_printf_float+0x2b8>)
 800e850:	4b7e      	ldr	r3, [pc, #504]	; (800ea4c <_printf_float+0x2bc>)
 800e852:	e7d5      	b.n	800e800 <_printf_float+0x70>
 800e854:	6863      	ldr	r3, [r4, #4]
 800e856:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e85a:	9104      	str	r1, [sp, #16]
 800e85c:	1c59      	adds	r1, r3, #1
 800e85e:	d13c      	bne.n	800e8da <_printf_float+0x14a>
 800e860:	2306      	movs	r3, #6
 800e862:	6063      	str	r3, [r4, #4]
 800e864:	2300      	movs	r3, #0
 800e866:	9303      	str	r3, [sp, #12]
 800e868:	ab08      	add	r3, sp, #32
 800e86a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e86e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e872:	ab07      	add	r3, sp, #28
 800e874:	6861      	ldr	r1, [r4, #4]
 800e876:	9300      	str	r3, [sp, #0]
 800e878:	6022      	str	r2, [r4, #0]
 800e87a:	f10d 031b 	add.w	r3, sp, #27
 800e87e:	4628      	mov	r0, r5
 800e880:	f7ff fef6 	bl	800e670 <__cvt>
 800e884:	9b04      	ldr	r3, [sp, #16]
 800e886:	9907      	ldr	r1, [sp, #28]
 800e888:	2b47      	cmp	r3, #71	; 0x47
 800e88a:	4680      	mov	r8, r0
 800e88c:	d108      	bne.n	800e8a0 <_printf_float+0x110>
 800e88e:	1cc8      	adds	r0, r1, #3
 800e890:	db02      	blt.n	800e898 <_printf_float+0x108>
 800e892:	6863      	ldr	r3, [r4, #4]
 800e894:	4299      	cmp	r1, r3
 800e896:	dd41      	ble.n	800e91c <_printf_float+0x18c>
 800e898:	f1a9 0902 	sub.w	r9, r9, #2
 800e89c:	fa5f f989 	uxtb.w	r9, r9
 800e8a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e8a4:	d820      	bhi.n	800e8e8 <_printf_float+0x158>
 800e8a6:	3901      	subs	r1, #1
 800e8a8:	464a      	mov	r2, r9
 800e8aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e8ae:	9107      	str	r1, [sp, #28]
 800e8b0:	f7ff ff30 	bl	800e714 <__exponent>
 800e8b4:	9a08      	ldr	r2, [sp, #32]
 800e8b6:	9004      	str	r0, [sp, #16]
 800e8b8:	1813      	adds	r3, r2, r0
 800e8ba:	2a01      	cmp	r2, #1
 800e8bc:	6123      	str	r3, [r4, #16]
 800e8be:	dc02      	bgt.n	800e8c6 <_printf_float+0x136>
 800e8c0:	6822      	ldr	r2, [r4, #0]
 800e8c2:	07d2      	lsls	r2, r2, #31
 800e8c4:	d501      	bpl.n	800e8ca <_printf_float+0x13a>
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	6123      	str	r3, [r4, #16]
 800e8ca:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d0a2      	beq.n	800e818 <_printf_float+0x88>
 800e8d2:	232d      	movs	r3, #45	; 0x2d
 800e8d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8d8:	e79e      	b.n	800e818 <_printf_float+0x88>
 800e8da:	9904      	ldr	r1, [sp, #16]
 800e8dc:	2947      	cmp	r1, #71	; 0x47
 800e8de:	d1c1      	bne.n	800e864 <_printf_float+0xd4>
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d1bf      	bne.n	800e864 <_printf_float+0xd4>
 800e8e4:	2301      	movs	r3, #1
 800e8e6:	e7bc      	b.n	800e862 <_printf_float+0xd2>
 800e8e8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e8ec:	d118      	bne.n	800e920 <_printf_float+0x190>
 800e8ee:	2900      	cmp	r1, #0
 800e8f0:	6863      	ldr	r3, [r4, #4]
 800e8f2:	dd0b      	ble.n	800e90c <_printf_float+0x17c>
 800e8f4:	6121      	str	r1, [r4, #16]
 800e8f6:	b913      	cbnz	r3, 800e8fe <_printf_float+0x16e>
 800e8f8:	6822      	ldr	r2, [r4, #0]
 800e8fa:	07d0      	lsls	r0, r2, #31
 800e8fc:	d502      	bpl.n	800e904 <_printf_float+0x174>
 800e8fe:	3301      	adds	r3, #1
 800e900:	440b      	add	r3, r1
 800e902:	6123      	str	r3, [r4, #16]
 800e904:	2300      	movs	r3, #0
 800e906:	65a1      	str	r1, [r4, #88]	; 0x58
 800e908:	9304      	str	r3, [sp, #16]
 800e90a:	e7de      	b.n	800e8ca <_printf_float+0x13a>
 800e90c:	b913      	cbnz	r3, 800e914 <_printf_float+0x184>
 800e90e:	6822      	ldr	r2, [r4, #0]
 800e910:	07d2      	lsls	r2, r2, #31
 800e912:	d501      	bpl.n	800e918 <_printf_float+0x188>
 800e914:	3302      	adds	r3, #2
 800e916:	e7f4      	b.n	800e902 <_printf_float+0x172>
 800e918:	2301      	movs	r3, #1
 800e91a:	e7f2      	b.n	800e902 <_printf_float+0x172>
 800e91c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e920:	9b08      	ldr	r3, [sp, #32]
 800e922:	4299      	cmp	r1, r3
 800e924:	db05      	blt.n	800e932 <_printf_float+0x1a2>
 800e926:	6823      	ldr	r3, [r4, #0]
 800e928:	6121      	str	r1, [r4, #16]
 800e92a:	07d8      	lsls	r0, r3, #31
 800e92c:	d5ea      	bpl.n	800e904 <_printf_float+0x174>
 800e92e:	1c4b      	adds	r3, r1, #1
 800e930:	e7e7      	b.n	800e902 <_printf_float+0x172>
 800e932:	2900      	cmp	r1, #0
 800e934:	bfd4      	ite	le
 800e936:	f1c1 0202 	rsble	r2, r1, #2
 800e93a:	2201      	movgt	r2, #1
 800e93c:	4413      	add	r3, r2
 800e93e:	e7e0      	b.n	800e902 <_printf_float+0x172>
 800e940:	6823      	ldr	r3, [r4, #0]
 800e942:	055a      	lsls	r2, r3, #21
 800e944:	d407      	bmi.n	800e956 <_printf_float+0x1c6>
 800e946:	6923      	ldr	r3, [r4, #16]
 800e948:	4642      	mov	r2, r8
 800e94a:	4631      	mov	r1, r6
 800e94c:	4628      	mov	r0, r5
 800e94e:	47b8      	blx	r7
 800e950:	3001      	adds	r0, #1
 800e952:	d12a      	bne.n	800e9aa <_printf_float+0x21a>
 800e954:	e76a      	b.n	800e82c <_printf_float+0x9c>
 800e956:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e95a:	f240 80e2 	bls.w	800eb22 <_printf_float+0x392>
 800e95e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e962:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e96a:	d133      	bne.n	800e9d4 <_printf_float+0x244>
 800e96c:	4a38      	ldr	r2, [pc, #224]	; (800ea50 <_printf_float+0x2c0>)
 800e96e:	2301      	movs	r3, #1
 800e970:	4631      	mov	r1, r6
 800e972:	4628      	mov	r0, r5
 800e974:	47b8      	blx	r7
 800e976:	3001      	adds	r0, #1
 800e978:	f43f af58 	beq.w	800e82c <_printf_float+0x9c>
 800e97c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e980:	429a      	cmp	r2, r3
 800e982:	db02      	blt.n	800e98a <_printf_float+0x1fa>
 800e984:	6823      	ldr	r3, [r4, #0]
 800e986:	07d8      	lsls	r0, r3, #31
 800e988:	d50f      	bpl.n	800e9aa <_printf_float+0x21a>
 800e98a:	4653      	mov	r3, sl
 800e98c:	465a      	mov	r2, fp
 800e98e:	4631      	mov	r1, r6
 800e990:	4628      	mov	r0, r5
 800e992:	47b8      	blx	r7
 800e994:	3001      	adds	r0, #1
 800e996:	f43f af49 	beq.w	800e82c <_printf_float+0x9c>
 800e99a:	f04f 0800 	mov.w	r8, #0
 800e99e:	f104 091a 	add.w	r9, r4, #26
 800e9a2:	9b08      	ldr	r3, [sp, #32]
 800e9a4:	3b01      	subs	r3, #1
 800e9a6:	4543      	cmp	r3, r8
 800e9a8:	dc09      	bgt.n	800e9be <_printf_float+0x22e>
 800e9aa:	6823      	ldr	r3, [r4, #0]
 800e9ac:	079b      	lsls	r3, r3, #30
 800e9ae:	f100 8108 	bmi.w	800ebc2 <_printf_float+0x432>
 800e9b2:	68e0      	ldr	r0, [r4, #12]
 800e9b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9b6:	4298      	cmp	r0, r3
 800e9b8:	bfb8      	it	lt
 800e9ba:	4618      	movlt	r0, r3
 800e9bc:	e738      	b.n	800e830 <_printf_float+0xa0>
 800e9be:	2301      	movs	r3, #1
 800e9c0:	464a      	mov	r2, r9
 800e9c2:	4631      	mov	r1, r6
 800e9c4:	4628      	mov	r0, r5
 800e9c6:	47b8      	blx	r7
 800e9c8:	3001      	adds	r0, #1
 800e9ca:	f43f af2f 	beq.w	800e82c <_printf_float+0x9c>
 800e9ce:	f108 0801 	add.w	r8, r8, #1
 800e9d2:	e7e6      	b.n	800e9a2 <_printf_float+0x212>
 800e9d4:	9b07      	ldr	r3, [sp, #28]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	dc3c      	bgt.n	800ea54 <_printf_float+0x2c4>
 800e9da:	4a1d      	ldr	r2, [pc, #116]	; (800ea50 <_printf_float+0x2c0>)
 800e9dc:	2301      	movs	r3, #1
 800e9de:	4631      	mov	r1, r6
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	47b8      	blx	r7
 800e9e4:	3001      	adds	r0, #1
 800e9e6:	f43f af21 	beq.w	800e82c <_printf_float+0x9c>
 800e9ea:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e9ee:	4313      	orrs	r3, r2
 800e9f0:	d102      	bne.n	800e9f8 <_printf_float+0x268>
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	07d9      	lsls	r1, r3, #31
 800e9f6:	d5d8      	bpl.n	800e9aa <_printf_float+0x21a>
 800e9f8:	4653      	mov	r3, sl
 800e9fa:	465a      	mov	r2, fp
 800e9fc:	4631      	mov	r1, r6
 800e9fe:	4628      	mov	r0, r5
 800ea00:	47b8      	blx	r7
 800ea02:	3001      	adds	r0, #1
 800ea04:	f43f af12 	beq.w	800e82c <_printf_float+0x9c>
 800ea08:	f04f 0900 	mov.w	r9, #0
 800ea0c:	f104 0a1a 	add.w	sl, r4, #26
 800ea10:	9b07      	ldr	r3, [sp, #28]
 800ea12:	425b      	negs	r3, r3
 800ea14:	454b      	cmp	r3, r9
 800ea16:	dc01      	bgt.n	800ea1c <_printf_float+0x28c>
 800ea18:	9b08      	ldr	r3, [sp, #32]
 800ea1a:	e795      	b.n	800e948 <_printf_float+0x1b8>
 800ea1c:	2301      	movs	r3, #1
 800ea1e:	4652      	mov	r2, sl
 800ea20:	4631      	mov	r1, r6
 800ea22:	4628      	mov	r0, r5
 800ea24:	47b8      	blx	r7
 800ea26:	3001      	adds	r0, #1
 800ea28:	f43f af00 	beq.w	800e82c <_printf_float+0x9c>
 800ea2c:	f109 0901 	add.w	r9, r9, #1
 800ea30:	e7ee      	b.n	800ea10 <_printf_float+0x280>
 800ea32:	bf00      	nop
 800ea34:	f3af 8000 	nop.w
 800ea38:	ffffffff 	.word	0xffffffff
 800ea3c:	7fefffff 	.word	0x7fefffff
 800ea40:	08012814 	.word	0x08012814
 800ea44:	08012818 	.word	0x08012818
 800ea48:	08012820 	.word	0x08012820
 800ea4c:	0801281c 	.word	0x0801281c
 800ea50:	08012824 	.word	0x08012824
 800ea54:	9a08      	ldr	r2, [sp, #32]
 800ea56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	bfa8      	it	ge
 800ea5c:	461a      	movge	r2, r3
 800ea5e:	2a00      	cmp	r2, #0
 800ea60:	4691      	mov	r9, r2
 800ea62:	dc38      	bgt.n	800ead6 <_printf_float+0x346>
 800ea64:	2300      	movs	r3, #0
 800ea66:	9305      	str	r3, [sp, #20]
 800ea68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ea6c:	f104 021a 	add.w	r2, r4, #26
 800ea70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ea72:	9905      	ldr	r1, [sp, #20]
 800ea74:	9304      	str	r3, [sp, #16]
 800ea76:	eba3 0309 	sub.w	r3, r3, r9
 800ea7a:	428b      	cmp	r3, r1
 800ea7c:	dc33      	bgt.n	800eae6 <_printf_float+0x356>
 800ea7e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	db3c      	blt.n	800eb00 <_printf_float+0x370>
 800ea86:	6823      	ldr	r3, [r4, #0]
 800ea88:	07da      	lsls	r2, r3, #31
 800ea8a:	d439      	bmi.n	800eb00 <_printf_float+0x370>
 800ea8c:	9a08      	ldr	r2, [sp, #32]
 800ea8e:	9b04      	ldr	r3, [sp, #16]
 800ea90:	9907      	ldr	r1, [sp, #28]
 800ea92:	1ad3      	subs	r3, r2, r3
 800ea94:	eba2 0901 	sub.w	r9, r2, r1
 800ea98:	4599      	cmp	r9, r3
 800ea9a:	bfa8      	it	ge
 800ea9c:	4699      	movge	r9, r3
 800ea9e:	f1b9 0f00 	cmp.w	r9, #0
 800eaa2:	dc35      	bgt.n	800eb10 <_printf_float+0x380>
 800eaa4:	f04f 0800 	mov.w	r8, #0
 800eaa8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eaac:	f104 0a1a 	add.w	sl, r4, #26
 800eab0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800eab4:	1a9b      	subs	r3, r3, r2
 800eab6:	eba3 0309 	sub.w	r3, r3, r9
 800eaba:	4543      	cmp	r3, r8
 800eabc:	f77f af75 	ble.w	800e9aa <_printf_float+0x21a>
 800eac0:	2301      	movs	r3, #1
 800eac2:	4652      	mov	r2, sl
 800eac4:	4631      	mov	r1, r6
 800eac6:	4628      	mov	r0, r5
 800eac8:	47b8      	blx	r7
 800eaca:	3001      	adds	r0, #1
 800eacc:	f43f aeae 	beq.w	800e82c <_printf_float+0x9c>
 800ead0:	f108 0801 	add.w	r8, r8, #1
 800ead4:	e7ec      	b.n	800eab0 <_printf_float+0x320>
 800ead6:	4613      	mov	r3, r2
 800ead8:	4631      	mov	r1, r6
 800eada:	4642      	mov	r2, r8
 800eadc:	4628      	mov	r0, r5
 800eade:	47b8      	blx	r7
 800eae0:	3001      	adds	r0, #1
 800eae2:	d1bf      	bne.n	800ea64 <_printf_float+0x2d4>
 800eae4:	e6a2      	b.n	800e82c <_printf_float+0x9c>
 800eae6:	2301      	movs	r3, #1
 800eae8:	4631      	mov	r1, r6
 800eaea:	4628      	mov	r0, r5
 800eaec:	9204      	str	r2, [sp, #16]
 800eaee:	47b8      	blx	r7
 800eaf0:	3001      	adds	r0, #1
 800eaf2:	f43f ae9b 	beq.w	800e82c <_printf_float+0x9c>
 800eaf6:	9b05      	ldr	r3, [sp, #20]
 800eaf8:	9a04      	ldr	r2, [sp, #16]
 800eafa:	3301      	adds	r3, #1
 800eafc:	9305      	str	r3, [sp, #20]
 800eafe:	e7b7      	b.n	800ea70 <_printf_float+0x2e0>
 800eb00:	4653      	mov	r3, sl
 800eb02:	465a      	mov	r2, fp
 800eb04:	4631      	mov	r1, r6
 800eb06:	4628      	mov	r0, r5
 800eb08:	47b8      	blx	r7
 800eb0a:	3001      	adds	r0, #1
 800eb0c:	d1be      	bne.n	800ea8c <_printf_float+0x2fc>
 800eb0e:	e68d      	b.n	800e82c <_printf_float+0x9c>
 800eb10:	9a04      	ldr	r2, [sp, #16]
 800eb12:	464b      	mov	r3, r9
 800eb14:	4442      	add	r2, r8
 800eb16:	4631      	mov	r1, r6
 800eb18:	4628      	mov	r0, r5
 800eb1a:	47b8      	blx	r7
 800eb1c:	3001      	adds	r0, #1
 800eb1e:	d1c1      	bne.n	800eaa4 <_printf_float+0x314>
 800eb20:	e684      	b.n	800e82c <_printf_float+0x9c>
 800eb22:	9a08      	ldr	r2, [sp, #32]
 800eb24:	2a01      	cmp	r2, #1
 800eb26:	dc01      	bgt.n	800eb2c <_printf_float+0x39c>
 800eb28:	07db      	lsls	r3, r3, #31
 800eb2a:	d537      	bpl.n	800eb9c <_printf_float+0x40c>
 800eb2c:	2301      	movs	r3, #1
 800eb2e:	4642      	mov	r2, r8
 800eb30:	4631      	mov	r1, r6
 800eb32:	4628      	mov	r0, r5
 800eb34:	47b8      	blx	r7
 800eb36:	3001      	adds	r0, #1
 800eb38:	f43f ae78 	beq.w	800e82c <_printf_float+0x9c>
 800eb3c:	4653      	mov	r3, sl
 800eb3e:	465a      	mov	r2, fp
 800eb40:	4631      	mov	r1, r6
 800eb42:	4628      	mov	r0, r5
 800eb44:	47b8      	blx	r7
 800eb46:	3001      	adds	r0, #1
 800eb48:	f43f ae70 	beq.w	800e82c <_printf_float+0x9c>
 800eb4c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800eb50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eb54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb58:	d01b      	beq.n	800eb92 <_printf_float+0x402>
 800eb5a:	9b08      	ldr	r3, [sp, #32]
 800eb5c:	f108 0201 	add.w	r2, r8, #1
 800eb60:	3b01      	subs	r3, #1
 800eb62:	4631      	mov	r1, r6
 800eb64:	4628      	mov	r0, r5
 800eb66:	47b8      	blx	r7
 800eb68:	3001      	adds	r0, #1
 800eb6a:	d10e      	bne.n	800eb8a <_printf_float+0x3fa>
 800eb6c:	e65e      	b.n	800e82c <_printf_float+0x9c>
 800eb6e:	2301      	movs	r3, #1
 800eb70:	464a      	mov	r2, r9
 800eb72:	4631      	mov	r1, r6
 800eb74:	4628      	mov	r0, r5
 800eb76:	47b8      	blx	r7
 800eb78:	3001      	adds	r0, #1
 800eb7a:	f43f ae57 	beq.w	800e82c <_printf_float+0x9c>
 800eb7e:	f108 0801 	add.w	r8, r8, #1
 800eb82:	9b08      	ldr	r3, [sp, #32]
 800eb84:	3b01      	subs	r3, #1
 800eb86:	4543      	cmp	r3, r8
 800eb88:	dcf1      	bgt.n	800eb6e <_printf_float+0x3de>
 800eb8a:	9b04      	ldr	r3, [sp, #16]
 800eb8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eb90:	e6db      	b.n	800e94a <_printf_float+0x1ba>
 800eb92:	f04f 0800 	mov.w	r8, #0
 800eb96:	f104 091a 	add.w	r9, r4, #26
 800eb9a:	e7f2      	b.n	800eb82 <_printf_float+0x3f2>
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	4642      	mov	r2, r8
 800eba0:	e7df      	b.n	800eb62 <_printf_float+0x3d2>
 800eba2:	2301      	movs	r3, #1
 800eba4:	464a      	mov	r2, r9
 800eba6:	4631      	mov	r1, r6
 800eba8:	4628      	mov	r0, r5
 800ebaa:	47b8      	blx	r7
 800ebac:	3001      	adds	r0, #1
 800ebae:	f43f ae3d 	beq.w	800e82c <_printf_float+0x9c>
 800ebb2:	f108 0801 	add.w	r8, r8, #1
 800ebb6:	68e3      	ldr	r3, [r4, #12]
 800ebb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ebba:	1a5b      	subs	r3, r3, r1
 800ebbc:	4543      	cmp	r3, r8
 800ebbe:	dcf0      	bgt.n	800eba2 <_printf_float+0x412>
 800ebc0:	e6f7      	b.n	800e9b2 <_printf_float+0x222>
 800ebc2:	f04f 0800 	mov.w	r8, #0
 800ebc6:	f104 0919 	add.w	r9, r4, #25
 800ebca:	e7f4      	b.n	800ebb6 <_printf_float+0x426>

0800ebcc <_printf_common>:
 800ebcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebd0:	4616      	mov	r6, r2
 800ebd2:	4699      	mov	r9, r3
 800ebd4:	688a      	ldr	r2, [r1, #8]
 800ebd6:	690b      	ldr	r3, [r1, #16]
 800ebd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ebdc:	4293      	cmp	r3, r2
 800ebde:	bfb8      	it	lt
 800ebe0:	4613      	movlt	r3, r2
 800ebe2:	6033      	str	r3, [r6, #0]
 800ebe4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ebe8:	4607      	mov	r7, r0
 800ebea:	460c      	mov	r4, r1
 800ebec:	b10a      	cbz	r2, 800ebf2 <_printf_common+0x26>
 800ebee:	3301      	adds	r3, #1
 800ebf0:	6033      	str	r3, [r6, #0]
 800ebf2:	6823      	ldr	r3, [r4, #0]
 800ebf4:	0699      	lsls	r1, r3, #26
 800ebf6:	bf42      	ittt	mi
 800ebf8:	6833      	ldrmi	r3, [r6, #0]
 800ebfa:	3302      	addmi	r3, #2
 800ebfc:	6033      	strmi	r3, [r6, #0]
 800ebfe:	6825      	ldr	r5, [r4, #0]
 800ec00:	f015 0506 	ands.w	r5, r5, #6
 800ec04:	d106      	bne.n	800ec14 <_printf_common+0x48>
 800ec06:	f104 0a19 	add.w	sl, r4, #25
 800ec0a:	68e3      	ldr	r3, [r4, #12]
 800ec0c:	6832      	ldr	r2, [r6, #0]
 800ec0e:	1a9b      	subs	r3, r3, r2
 800ec10:	42ab      	cmp	r3, r5
 800ec12:	dc26      	bgt.n	800ec62 <_printf_common+0x96>
 800ec14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec18:	1e13      	subs	r3, r2, #0
 800ec1a:	6822      	ldr	r2, [r4, #0]
 800ec1c:	bf18      	it	ne
 800ec1e:	2301      	movne	r3, #1
 800ec20:	0692      	lsls	r2, r2, #26
 800ec22:	d42b      	bmi.n	800ec7c <_printf_common+0xb0>
 800ec24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec28:	4649      	mov	r1, r9
 800ec2a:	4638      	mov	r0, r7
 800ec2c:	47c0      	blx	r8
 800ec2e:	3001      	adds	r0, #1
 800ec30:	d01e      	beq.n	800ec70 <_printf_common+0xa4>
 800ec32:	6823      	ldr	r3, [r4, #0]
 800ec34:	68e5      	ldr	r5, [r4, #12]
 800ec36:	6832      	ldr	r2, [r6, #0]
 800ec38:	f003 0306 	and.w	r3, r3, #6
 800ec3c:	2b04      	cmp	r3, #4
 800ec3e:	bf08      	it	eq
 800ec40:	1aad      	subeq	r5, r5, r2
 800ec42:	68a3      	ldr	r3, [r4, #8]
 800ec44:	6922      	ldr	r2, [r4, #16]
 800ec46:	bf0c      	ite	eq
 800ec48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ec4c:	2500      	movne	r5, #0
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	bfc4      	itt	gt
 800ec52:	1a9b      	subgt	r3, r3, r2
 800ec54:	18ed      	addgt	r5, r5, r3
 800ec56:	2600      	movs	r6, #0
 800ec58:	341a      	adds	r4, #26
 800ec5a:	42b5      	cmp	r5, r6
 800ec5c:	d11a      	bne.n	800ec94 <_printf_common+0xc8>
 800ec5e:	2000      	movs	r0, #0
 800ec60:	e008      	b.n	800ec74 <_printf_common+0xa8>
 800ec62:	2301      	movs	r3, #1
 800ec64:	4652      	mov	r2, sl
 800ec66:	4649      	mov	r1, r9
 800ec68:	4638      	mov	r0, r7
 800ec6a:	47c0      	blx	r8
 800ec6c:	3001      	adds	r0, #1
 800ec6e:	d103      	bne.n	800ec78 <_printf_common+0xac>
 800ec70:	f04f 30ff 	mov.w	r0, #4294967295
 800ec74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec78:	3501      	adds	r5, #1
 800ec7a:	e7c6      	b.n	800ec0a <_printf_common+0x3e>
 800ec7c:	18e1      	adds	r1, r4, r3
 800ec7e:	1c5a      	adds	r2, r3, #1
 800ec80:	2030      	movs	r0, #48	; 0x30
 800ec82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ec86:	4422      	add	r2, r4
 800ec88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ec8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ec90:	3302      	adds	r3, #2
 800ec92:	e7c7      	b.n	800ec24 <_printf_common+0x58>
 800ec94:	2301      	movs	r3, #1
 800ec96:	4622      	mov	r2, r4
 800ec98:	4649      	mov	r1, r9
 800ec9a:	4638      	mov	r0, r7
 800ec9c:	47c0      	blx	r8
 800ec9e:	3001      	adds	r0, #1
 800eca0:	d0e6      	beq.n	800ec70 <_printf_common+0xa4>
 800eca2:	3601      	adds	r6, #1
 800eca4:	e7d9      	b.n	800ec5a <_printf_common+0x8e>
	...

0800eca8 <_printf_i>:
 800eca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ecac:	460c      	mov	r4, r1
 800ecae:	4691      	mov	r9, r2
 800ecb0:	7e27      	ldrb	r7, [r4, #24]
 800ecb2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ecb4:	2f78      	cmp	r7, #120	; 0x78
 800ecb6:	4680      	mov	r8, r0
 800ecb8:	469a      	mov	sl, r3
 800ecba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ecbe:	d807      	bhi.n	800ecd0 <_printf_i+0x28>
 800ecc0:	2f62      	cmp	r7, #98	; 0x62
 800ecc2:	d80a      	bhi.n	800ecda <_printf_i+0x32>
 800ecc4:	2f00      	cmp	r7, #0
 800ecc6:	f000 80d8 	beq.w	800ee7a <_printf_i+0x1d2>
 800ecca:	2f58      	cmp	r7, #88	; 0x58
 800eccc:	f000 80a3 	beq.w	800ee16 <_printf_i+0x16e>
 800ecd0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ecd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ecd8:	e03a      	b.n	800ed50 <_printf_i+0xa8>
 800ecda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ecde:	2b15      	cmp	r3, #21
 800ece0:	d8f6      	bhi.n	800ecd0 <_printf_i+0x28>
 800ece2:	a001      	add	r0, pc, #4	; (adr r0, 800ece8 <_printf_i+0x40>)
 800ece4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ece8:	0800ed41 	.word	0x0800ed41
 800ecec:	0800ed55 	.word	0x0800ed55
 800ecf0:	0800ecd1 	.word	0x0800ecd1
 800ecf4:	0800ecd1 	.word	0x0800ecd1
 800ecf8:	0800ecd1 	.word	0x0800ecd1
 800ecfc:	0800ecd1 	.word	0x0800ecd1
 800ed00:	0800ed55 	.word	0x0800ed55
 800ed04:	0800ecd1 	.word	0x0800ecd1
 800ed08:	0800ecd1 	.word	0x0800ecd1
 800ed0c:	0800ecd1 	.word	0x0800ecd1
 800ed10:	0800ecd1 	.word	0x0800ecd1
 800ed14:	0800ee61 	.word	0x0800ee61
 800ed18:	0800ed85 	.word	0x0800ed85
 800ed1c:	0800ee43 	.word	0x0800ee43
 800ed20:	0800ecd1 	.word	0x0800ecd1
 800ed24:	0800ecd1 	.word	0x0800ecd1
 800ed28:	0800ee83 	.word	0x0800ee83
 800ed2c:	0800ecd1 	.word	0x0800ecd1
 800ed30:	0800ed85 	.word	0x0800ed85
 800ed34:	0800ecd1 	.word	0x0800ecd1
 800ed38:	0800ecd1 	.word	0x0800ecd1
 800ed3c:	0800ee4b 	.word	0x0800ee4b
 800ed40:	680b      	ldr	r3, [r1, #0]
 800ed42:	1d1a      	adds	r2, r3, #4
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	600a      	str	r2, [r1, #0]
 800ed48:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ed4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed50:	2301      	movs	r3, #1
 800ed52:	e0a3      	b.n	800ee9c <_printf_i+0x1f4>
 800ed54:	6825      	ldr	r5, [r4, #0]
 800ed56:	6808      	ldr	r0, [r1, #0]
 800ed58:	062e      	lsls	r6, r5, #24
 800ed5a:	f100 0304 	add.w	r3, r0, #4
 800ed5e:	d50a      	bpl.n	800ed76 <_printf_i+0xce>
 800ed60:	6805      	ldr	r5, [r0, #0]
 800ed62:	600b      	str	r3, [r1, #0]
 800ed64:	2d00      	cmp	r5, #0
 800ed66:	da03      	bge.n	800ed70 <_printf_i+0xc8>
 800ed68:	232d      	movs	r3, #45	; 0x2d
 800ed6a:	426d      	negs	r5, r5
 800ed6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ed70:	485e      	ldr	r0, [pc, #376]	; (800eeec <_printf_i+0x244>)
 800ed72:	230a      	movs	r3, #10
 800ed74:	e019      	b.n	800edaa <_printf_i+0x102>
 800ed76:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ed7a:	6805      	ldr	r5, [r0, #0]
 800ed7c:	600b      	str	r3, [r1, #0]
 800ed7e:	bf18      	it	ne
 800ed80:	b22d      	sxthne	r5, r5
 800ed82:	e7ef      	b.n	800ed64 <_printf_i+0xbc>
 800ed84:	680b      	ldr	r3, [r1, #0]
 800ed86:	6825      	ldr	r5, [r4, #0]
 800ed88:	1d18      	adds	r0, r3, #4
 800ed8a:	6008      	str	r0, [r1, #0]
 800ed8c:	0628      	lsls	r0, r5, #24
 800ed8e:	d501      	bpl.n	800ed94 <_printf_i+0xec>
 800ed90:	681d      	ldr	r5, [r3, #0]
 800ed92:	e002      	b.n	800ed9a <_printf_i+0xf2>
 800ed94:	0669      	lsls	r1, r5, #25
 800ed96:	d5fb      	bpl.n	800ed90 <_printf_i+0xe8>
 800ed98:	881d      	ldrh	r5, [r3, #0]
 800ed9a:	4854      	ldr	r0, [pc, #336]	; (800eeec <_printf_i+0x244>)
 800ed9c:	2f6f      	cmp	r7, #111	; 0x6f
 800ed9e:	bf0c      	ite	eq
 800eda0:	2308      	moveq	r3, #8
 800eda2:	230a      	movne	r3, #10
 800eda4:	2100      	movs	r1, #0
 800eda6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800edaa:	6866      	ldr	r6, [r4, #4]
 800edac:	60a6      	str	r6, [r4, #8]
 800edae:	2e00      	cmp	r6, #0
 800edb0:	bfa2      	ittt	ge
 800edb2:	6821      	ldrge	r1, [r4, #0]
 800edb4:	f021 0104 	bicge.w	r1, r1, #4
 800edb8:	6021      	strge	r1, [r4, #0]
 800edba:	b90d      	cbnz	r5, 800edc0 <_printf_i+0x118>
 800edbc:	2e00      	cmp	r6, #0
 800edbe:	d04d      	beq.n	800ee5c <_printf_i+0x1b4>
 800edc0:	4616      	mov	r6, r2
 800edc2:	fbb5 f1f3 	udiv	r1, r5, r3
 800edc6:	fb03 5711 	mls	r7, r3, r1, r5
 800edca:	5dc7      	ldrb	r7, [r0, r7]
 800edcc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800edd0:	462f      	mov	r7, r5
 800edd2:	42bb      	cmp	r3, r7
 800edd4:	460d      	mov	r5, r1
 800edd6:	d9f4      	bls.n	800edc2 <_printf_i+0x11a>
 800edd8:	2b08      	cmp	r3, #8
 800edda:	d10b      	bne.n	800edf4 <_printf_i+0x14c>
 800eddc:	6823      	ldr	r3, [r4, #0]
 800edde:	07df      	lsls	r7, r3, #31
 800ede0:	d508      	bpl.n	800edf4 <_printf_i+0x14c>
 800ede2:	6923      	ldr	r3, [r4, #16]
 800ede4:	6861      	ldr	r1, [r4, #4]
 800ede6:	4299      	cmp	r1, r3
 800ede8:	bfde      	ittt	le
 800edea:	2330      	movle	r3, #48	; 0x30
 800edec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800edf0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800edf4:	1b92      	subs	r2, r2, r6
 800edf6:	6122      	str	r2, [r4, #16]
 800edf8:	f8cd a000 	str.w	sl, [sp]
 800edfc:	464b      	mov	r3, r9
 800edfe:	aa03      	add	r2, sp, #12
 800ee00:	4621      	mov	r1, r4
 800ee02:	4640      	mov	r0, r8
 800ee04:	f7ff fee2 	bl	800ebcc <_printf_common>
 800ee08:	3001      	adds	r0, #1
 800ee0a:	d14c      	bne.n	800eea6 <_printf_i+0x1fe>
 800ee0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee10:	b004      	add	sp, #16
 800ee12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee16:	4835      	ldr	r0, [pc, #212]	; (800eeec <_printf_i+0x244>)
 800ee18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ee1c:	6823      	ldr	r3, [r4, #0]
 800ee1e:	680e      	ldr	r6, [r1, #0]
 800ee20:	061f      	lsls	r7, r3, #24
 800ee22:	f856 5b04 	ldr.w	r5, [r6], #4
 800ee26:	600e      	str	r6, [r1, #0]
 800ee28:	d514      	bpl.n	800ee54 <_printf_i+0x1ac>
 800ee2a:	07d9      	lsls	r1, r3, #31
 800ee2c:	bf44      	itt	mi
 800ee2e:	f043 0320 	orrmi.w	r3, r3, #32
 800ee32:	6023      	strmi	r3, [r4, #0]
 800ee34:	b91d      	cbnz	r5, 800ee3e <_printf_i+0x196>
 800ee36:	6823      	ldr	r3, [r4, #0]
 800ee38:	f023 0320 	bic.w	r3, r3, #32
 800ee3c:	6023      	str	r3, [r4, #0]
 800ee3e:	2310      	movs	r3, #16
 800ee40:	e7b0      	b.n	800eda4 <_printf_i+0xfc>
 800ee42:	6823      	ldr	r3, [r4, #0]
 800ee44:	f043 0320 	orr.w	r3, r3, #32
 800ee48:	6023      	str	r3, [r4, #0]
 800ee4a:	2378      	movs	r3, #120	; 0x78
 800ee4c:	4828      	ldr	r0, [pc, #160]	; (800eef0 <_printf_i+0x248>)
 800ee4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ee52:	e7e3      	b.n	800ee1c <_printf_i+0x174>
 800ee54:	065e      	lsls	r6, r3, #25
 800ee56:	bf48      	it	mi
 800ee58:	b2ad      	uxthmi	r5, r5
 800ee5a:	e7e6      	b.n	800ee2a <_printf_i+0x182>
 800ee5c:	4616      	mov	r6, r2
 800ee5e:	e7bb      	b.n	800edd8 <_printf_i+0x130>
 800ee60:	680b      	ldr	r3, [r1, #0]
 800ee62:	6826      	ldr	r6, [r4, #0]
 800ee64:	6960      	ldr	r0, [r4, #20]
 800ee66:	1d1d      	adds	r5, r3, #4
 800ee68:	600d      	str	r5, [r1, #0]
 800ee6a:	0635      	lsls	r5, r6, #24
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	d501      	bpl.n	800ee74 <_printf_i+0x1cc>
 800ee70:	6018      	str	r0, [r3, #0]
 800ee72:	e002      	b.n	800ee7a <_printf_i+0x1d2>
 800ee74:	0671      	lsls	r1, r6, #25
 800ee76:	d5fb      	bpl.n	800ee70 <_printf_i+0x1c8>
 800ee78:	8018      	strh	r0, [r3, #0]
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	6123      	str	r3, [r4, #16]
 800ee7e:	4616      	mov	r6, r2
 800ee80:	e7ba      	b.n	800edf8 <_printf_i+0x150>
 800ee82:	680b      	ldr	r3, [r1, #0]
 800ee84:	1d1a      	adds	r2, r3, #4
 800ee86:	600a      	str	r2, [r1, #0]
 800ee88:	681e      	ldr	r6, [r3, #0]
 800ee8a:	6862      	ldr	r2, [r4, #4]
 800ee8c:	2100      	movs	r1, #0
 800ee8e:	4630      	mov	r0, r6
 800ee90:	f7f1 fa2e 	bl	80002f0 <memchr>
 800ee94:	b108      	cbz	r0, 800ee9a <_printf_i+0x1f2>
 800ee96:	1b80      	subs	r0, r0, r6
 800ee98:	6060      	str	r0, [r4, #4]
 800ee9a:	6863      	ldr	r3, [r4, #4]
 800ee9c:	6123      	str	r3, [r4, #16]
 800ee9e:	2300      	movs	r3, #0
 800eea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eea4:	e7a8      	b.n	800edf8 <_printf_i+0x150>
 800eea6:	6923      	ldr	r3, [r4, #16]
 800eea8:	4632      	mov	r2, r6
 800eeaa:	4649      	mov	r1, r9
 800eeac:	4640      	mov	r0, r8
 800eeae:	47d0      	blx	sl
 800eeb0:	3001      	adds	r0, #1
 800eeb2:	d0ab      	beq.n	800ee0c <_printf_i+0x164>
 800eeb4:	6823      	ldr	r3, [r4, #0]
 800eeb6:	079b      	lsls	r3, r3, #30
 800eeb8:	d413      	bmi.n	800eee2 <_printf_i+0x23a>
 800eeba:	68e0      	ldr	r0, [r4, #12]
 800eebc:	9b03      	ldr	r3, [sp, #12]
 800eebe:	4298      	cmp	r0, r3
 800eec0:	bfb8      	it	lt
 800eec2:	4618      	movlt	r0, r3
 800eec4:	e7a4      	b.n	800ee10 <_printf_i+0x168>
 800eec6:	2301      	movs	r3, #1
 800eec8:	4632      	mov	r2, r6
 800eeca:	4649      	mov	r1, r9
 800eecc:	4640      	mov	r0, r8
 800eece:	47d0      	blx	sl
 800eed0:	3001      	adds	r0, #1
 800eed2:	d09b      	beq.n	800ee0c <_printf_i+0x164>
 800eed4:	3501      	adds	r5, #1
 800eed6:	68e3      	ldr	r3, [r4, #12]
 800eed8:	9903      	ldr	r1, [sp, #12]
 800eeda:	1a5b      	subs	r3, r3, r1
 800eedc:	42ab      	cmp	r3, r5
 800eede:	dcf2      	bgt.n	800eec6 <_printf_i+0x21e>
 800eee0:	e7eb      	b.n	800eeba <_printf_i+0x212>
 800eee2:	2500      	movs	r5, #0
 800eee4:	f104 0619 	add.w	r6, r4, #25
 800eee8:	e7f5      	b.n	800eed6 <_printf_i+0x22e>
 800eeea:	bf00      	nop
 800eeec:	08012826 	.word	0x08012826
 800eef0:	08012837 	.word	0x08012837

0800eef4 <quorem>:
 800eef4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eef8:	6903      	ldr	r3, [r0, #16]
 800eefa:	690c      	ldr	r4, [r1, #16]
 800eefc:	42a3      	cmp	r3, r4
 800eefe:	4607      	mov	r7, r0
 800ef00:	f2c0 8081 	blt.w	800f006 <quorem+0x112>
 800ef04:	3c01      	subs	r4, #1
 800ef06:	f101 0814 	add.w	r8, r1, #20
 800ef0a:	f100 0514 	add.w	r5, r0, #20
 800ef0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef12:	9301      	str	r3, [sp, #4]
 800ef14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ef24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef28:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef2c:	d331      	bcc.n	800ef92 <quorem+0x9e>
 800ef2e:	f04f 0e00 	mov.w	lr, #0
 800ef32:	4640      	mov	r0, r8
 800ef34:	46ac      	mov	ip, r5
 800ef36:	46f2      	mov	sl, lr
 800ef38:	f850 2b04 	ldr.w	r2, [r0], #4
 800ef3c:	b293      	uxth	r3, r2
 800ef3e:	fb06 e303 	mla	r3, r6, r3, lr
 800ef42:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	ebaa 0303 	sub.w	r3, sl, r3
 800ef4c:	0c12      	lsrs	r2, r2, #16
 800ef4e:	f8dc a000 	ldr.w	sl, [ip]
 800ef52:	fb06 e202 	mla	r2, r6, r2, lr
 800ef56:	fa13 f38a 	uxtah	r3, r3, sl
 800ef5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ef5e:	fa1f fa82 	uxth.w	sl, r2
 800ef62:	f8dc 2000 	ldr.w	r2, [ip]
 800ef66:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ef6a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef74:	4581      	cmp	r9, r0
 800ef76:	f84c 3b04 	str.w	r3, [ip], #4
 800ef7a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ef7e:	d2db      	bcs.n	800ef38 <quorem+0x44>
 800ef80:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef84:	b92b      	cbnz	r3, 800ef92 <quorem+0x9e>
 800ef86:	9b01      	ldr	r3, [sp, #4]
 800ef88:	3b04      	subs	r3, #4
 800ef8a:	429d      	cmp	r5, r3
 800ef8c:	461a      	mov	r2, r3
 800ef8e:	d32e      	bcc.n	800efee <quorem+0xfa>
 800ef90:	613c      	str	r4, [r7, #16]
 800ef92:	4638      	mov	r0, r7
 800ef94:	f001 f848 	bl	8010028 <__mcmp>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	db24      	blt.n	800efe6 <quorem+0xf2>
 800ef9c:	3601      	adds	r6, #1
 800ef9e:	4628      	mov	r0, r5
 800efa0:	f04f 0c00 	mov.w	ip, #0
 800efa4:	f858 2b04 	ldr.w	r2, [r8], #4
 800efa8:	f8d0 e000 	ldr.w	lr, [r0]
 800efac:	b293      	uxth	r3, r2
 800efae:	ebac 0303 	sub.w	r3, ip, r3
 800efb2:	0c12      	lsrs	r2, r2, #16
 800efb4:	fa13 f38e 	uxtah	r3, r3, lr
 800efb8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800efbc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800efc0:	b29b      	uxth	r3, r3
 800efc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efc6:	45c1      	cmp	r9, r8
 800efc8:	f840 3b04 	str.w	r3, [r0], #4
 800efcc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800efd0:	d2e8      	bcs.n	800efa4 <quorem+0xb0>
 800efd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efda:	b922      	cbnz	r2, 800efe6 <quorem+0xf2>
 800efdc:	3b04      	subs	r3, #4
 800efde:	429d      	cmp	r5, r3
 800efe0:	461a      	mov	r2, r3
 800efe2:	d30a      	bcc.n	800effa <quorem+0x106>
 800efe4:	613c      	str	r4, [r7, #16]
 800efe6:	4630      	mov	r0, r6
 800efe8:	b003      	add	sp, #12
 800efea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efee:	6812      	ldr	r2, [r2, #0]
 800eff0:	3b04      	subs	r3, #4
 800eff2:	2a00      	cmp	r2, #0
 800eff4:	d1cc      	bne.n	800ef90 <quorem+0x9c>
 800eff6:	3c01      	subs	r4, #1
 800eff8:	e7c7      	b.n	800ef8a <quorem+0x96>
 800effa:	6812      	ldr	r2, [r2, #0]
 800effc:	3b04      	subs	r3, #4
 800effe:	2a00      	cmp	r2, #0
 800f000:	d1f0      	bne.n	800efe4 <quorem+0xf0>
 800f002:	3c01      	subs	r4, #1
 800f004:	e7eb      	b.n	800efde <quorem+0xea>
 800f006:	2000      	movs	r0, #0
 800f008:	e7ee      	b.n	800efe8 <quorem+0xf4>
 800f00a:	0000      	movs	r0, r0
 800f00c:	0000      	movs	r0, r0
	...

0800f010 <_dtoa_r>:
 800f010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f014:	ec59 8b10 	vmov	r8, r9, d0
 800f018:	b095      	sub	sp, #84	; 0x54
 800f01a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f01c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800f01e:	9107      	str	r1, [sp, #28]
 800f020:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f024:	4606      	mov	r6, r0
 800f026:	9209      	str	r2, [sp, #36]	; 0x24
 800f028:	9310      	str	r3, [sp, #64]	; 0x40
 800f02a:	b975      	cbnz	r5, 800f04a <_dtoa_r+0x3a>
 800f02c:	2010      	movs	r0, #16
 800f02e:	f000 fd75 	bl	800fb1c <malloc>
 800f032:	4602      	mov	r2, r0
 800f034:	6270      	str	r0, [r6, #36]	; 0x24
 800f036:	b920      	cbnz	r0, 800f042 <_dtoa_r+0x32>
 800f038:	4bab      	ldr	r3, [pc, #684]	; (800f2e8 <_dtoa_r+0x2d8>)
 800f03a:	21ea      	movs	r1, #234	; 0xea
 800f03c:	48ab      	ldr	r0, [pc, #684]	; (800f2ec <_dtoa_r+0x2dc>)
 800f03e:	f001 f9bd 	bl	80103bc <__assert_func>
 800f042:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f046:	6005      	str	r5, [r0, #0]
 800f048:	60c5      	str	r5, [r0, #12]
 800f04a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f04c:	6819      	ldr	r1, [r3, #0]
 800f04e:	b151      	cbz	r1, 800f066 <_dtoa_r+0x56>
 800f050:	685a      	ldr	r2, [r3, #4]
 800f052:	604a      	str	r2, [r1, #4]
 800f054:	2301      	movs	r3, #1
 800f056:	4093      	lsls	r3, r2
 800f058:	608b      	str	r3, [r1, #8]
 800f05a:	4630      	mov	r0, r6
 800f05c:	f000 fda6 	bl	800fbac <_Bfree>
 800f060:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f062:	2200      	movs	r2, #0
 800f064:	601a      	str	r2, [r3, #0]
 800f066:	f1b9 0300 	subs.w	r3, r9, #0
 800f06a:	bfbb      	ittet	lt
 800f06c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f070:	9303      	strlt	r3, [sp, #12]
 800f072:	2300      	movge	r3, #0
 800f074:	2201      	movlt	r2, #1
 800f076:	bfac      	ite	ge
 800f078:	6023      	strge	r3, [r4, #0]
 800f07a:	6022      	strlt	r2, [r4, #0]
 800f07c:	4b9c      	ldr	r3, [pc, #624]	; (800f2f0 <_dtoa_r+0x2e0>)
 800f07e:	9c03      	ldr	r4, [sp, #12]
 800f080:	43a3      	bics	r3, r4
 800f082:	d11a      	bne.n	800f0ba <_dtoa_r+0xaa>
 800f084:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f086:	f242 730f 	movw	r3, #9999	; 0x270f
 800f08a:	6013      	str	r3, [r2, #0]
 800f08c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800f090:	ea53 0308 	orrs.w	r3, r3, r8
 800f094:	f000 8512 	beq.w	800fabc <_dtoa_r+0xaac>
 800f098:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f09a:	b953      	cbnz	r3, 800f0b2 <_dtoa_r+0xa2>
 800f09c:	4b95      	ldr	r3, [pc, #596]	; (800f2f4 <_dtoa_r+0x2e4>)
 800f09e:	e01f      	b.n	800f0e0 <_dtoa_r+0xd0>
 800f0a0:	4b95      	ldr	r3, [pc, #596]	; (800f2f8 <_dtoa_r+0x2e8>)
 800f0a2:	9300      	str	r3, [sp, #0]
 800f0a4:	3308      	adds	r3, #8
 800f0a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f0a8:	6013      	str	r3, [r2, #0]
 800f0aa:	9800      	ldr	r0, [sp, #0]
 800f0ac:	b015      	add	sp, #84	; 0x54
 800f0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b2:	4b90      	ldr	r3, [pc, #576]	; (800f2f4 <_dtoa_r+0x2e4>)
 800f0b4:	9300      	str	r3, [sp, #0]
 800f0b6:	3303      	adds	r3, #3
 800f0b8:	e7f5      	b.n	800f0a6 <_dtoa_r+0x96>
 800f0ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f0be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0c6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f0ca:	d10b      	bne.n	800f0e4 <_dtoa_r+0xd4>
 800f0cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f0ce:	2301      	movs	r3, #1
 800f0d0:	6013      	str	r3, [r2, #0]
 800f0d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	f000 84ee 	beq.w	800fab6 <_dtoa_r+0xaa6>
 800f0da:	4888      	ldr	r0, [pc, #544]	; (800f2fc <_dtoa_r+0x2ec>)
 800f0dc:	6018      	str	r0, [r3, #0]
 800f0de:	1e43      	subs	r3, r0, #1
 800f0e0:	9300      	str	r3, [sp, #0]
 800f0e2:	e7e2      	b.n	800f0aa <_dtoa_r+0x9a>
 800f0e4:	a913      	add	r1, sp, #76	; 0x4c
 800f0e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f0ea:	aa12      	add	r2, sp, #72	; 0x48
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	f001 f83f 	bl	8010170 <__d2b>
 800f0f2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800f0f6:	4605      	mov	r5, r0
 800f0f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f0fa:	2900      	cmp	r1, #0
 800f0fc:	d047      	beq.n	800f18e <_dtoa_r+0x17e>
 800f0fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f100:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f104:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f108:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f10c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f110:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f114:	2400      	movs	r4, #0
 800f116:	ec43 2b16 	vmov	d6, r2, r3
 800f11a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f11e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800f2d0 <_dtoa_r+0x2c0>
 800f122:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f126:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800f2d8 <_dtoa_r+0x2c8>
 800f12a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f12e:	eeb0 7b46 	vmov.f64	d7, d6
 800f132:	ee06 1a90 	vmov	s13, r1
 800f136:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800f13a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800f2e0 <_dtoa_r+0x2d0>
 800f13e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f142:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f146:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f14e:	ee16 ba90 	vmov	fp, s13
 800f152:	9411      	str	r4, [sp, #68]	; 0x44
 800f154:	d508      	bpl.n	800f168 <_dtoa_r+0x158>
 800f156:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f15a:	eeb4 6b47 	vcmp.f64	d6, d7
 800f15e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f162:	bf18      	it	ne
 800f164:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f168:	f1bb 0f16 	cmp.w	fp, #22
 800f16c:	d832      	bhi.n	800f1d4 <_dtoa_r+0x1c4>
 800f16e:	4b64      	ldr	r3, [pc, #400]	; (800f300 <_dtoa_r+0x2f0>)
 800f170:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f174:	ed93 7b00 	vldr	d7, [r3]
 800f178:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800f17c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f184:	d501      	bpl.n	800f18a <_dtoa_r+0x17a>
 800f186:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f18a:	2300      	movs	r3, #0
 800f18c:	e023      	b.n	800f1d6 <_dtoa_r+0x1c6>
 800f18e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f190:	4401      	add	r1, r0
 800f192:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800f196:	2b20      	cmp	r3, #32
 800f198:	bfc3      	ittte	gt
 800f19a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f19e:	fa04 f303 	lslgt.w	r3, r4, r3
 800f1a2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800f1a6:	f1c3 0320 	rsble	r3, r3, #32
 800f1aa:	bfc6      	itte	gt
 800f1ac:	fa28 f804 	lsrgt.w	r8, r8, r4
 800f1b0:	ea43 0308 	orrgt.w	r3, r3, r8
 800f1b4:	fa08 f303 	lslle.w	r3, r8, r3
 800f1b8:	ee07 3a90 	vmov	s15, r3
 800f1bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f1c0:	3901      	subs	r1, #1
 800f1c2:	ed8d 7b00 	vstr	d7, [sp]
 800f1c6:	9c01      	ldr	r4, [sp, #4]
 800f1c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f1cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800f1d0:	2401      	movs	r4, #1
 800f1d2:	e7a0      	b.n	800f116 <_dtoa_r+0x106>
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	930f      	str	r3, [sp, #60]	; 0x3c
 800f1d8:	1a43      	subs	r3, r0, r1
 800f1da:	1e5a      	subs	r2, r3, #1
 800f1dc:	bf45      	ittet	mi
 800f1de:	f1c3 0301 	rsbmi	r3, r3, #1
 800f1e2:	9305      	strmi	r3, [sp, #20]
 800f1e4:	2300      	movpl	r3, #0
 800f1e6:	2300      	movmi	r3, #0
 800f1e8:	9206      	str	r2, [sp, #24]
 800f1ea:	bf54      	ite	pl
 800f1ec:	9305      	strpl	r3, [sp, #20]
 800f1ee:	9306      	strmi	r3, [sp, #24]
 800f1f0:	f1bb 0f00 	cmp.w	fp, #0
 800f1f4:	db18      	blt.n	800f228 <_dtoa_r+0x218>
 800f1f6:	9b06      	ldr	r3, [sp, #24]
 800f1f8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800f1fc:	445b      	add	r3, fp
 800f1fe:	9306      	str	r3, [sp, #24]
 800f200:	2300      	movs	r3, #0
 800f202:	9a07      	ldr	r2, [sp, #28]
 800f204:	2a09      	cmp	r2, #9
 800f206:	d849      	bhi.n	800f29c <_dtoa_r+0x28c>
 800f208:	2a05      	cmp	r2, #5
 800f20a:	bfc4      	itt	gt
 800f20c:	3a04      	subgt	r2, #4
 800f20e:	9207      	strgt	r2, [sp, #28]
 800f210:	9a07      	ldr	r2, [sp, #28]
 800f212:	f1a2 0202 	sub.w	r2, r2, #2
 800f216:	bfcc      	ite	gt
 800f218:	2400      	movgt	r4, #0
 800f21a:	2401      	movle	r4, #1
 800f21c:	2a03      	cmp	r2, #3
 800f21e:	d848      	bhi.n	800f2b2 <_dtoa_r+0x2a2>
 800f220:	e8df f002 	tbb	[pc, r2]
 800f224:	3a2c2e0b 	.word	0x3a2c2e0b
 800f228:	9b05      	ldr	r3, [sp, #20]
 800f22a:	2200      	movs	r2, #0
 800f22c:	eba3 030b 	sub.w	r3, r3, fp
 800f230:	9305      	str	r3, [sp, #20]
 800f232:	920e      	str	r2, [sp, #56]	; 0x38
 800f234:	f1cb 0300 	rsb	r3, fp, #0
 800f238:	e7e3      	b.n	800f202 <_dtoa_r+0x1f2>
 800f23a:	2200      	movs	r2, #0
 800f23c:	9208      	str	r2, [sp, #32]
 800f23e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f240:	2a00      	cmp	r2, #0
 800f242:	dc39      	bgt.n	800f2b8 <_dtoa_r+0x2a8>
 800f244:	f04f 0a01 	mov.w	sl, #1
 800f248:	46d1      	mov	r9, sl
 800f24a:	4652      	mov	r2, sl
 800f24c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f250:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f252:	2100      	movs	r1, #0
 800f254:	6079      	str	r1, [r7, #4]
 800f256:	2004      	movs	r0, #4
 800f258:	f100 0c14 	add.w	ip, r0, #20
 800f25c:	4594      	cmp	ip, r2
 800f25e:	6879      	ldr	r1, [r7, #4]
 800f260:	d92f      	bls.n	800f2c2 <_dtoa_r+0x2b2>
 800f262:	4630      	mov	r0, r6
 800f264:	930c      	str	r3, [sp, #48]	; 0x30
 800f266:	f000 fc61 	bl	800fb2c <_Balloc>
 800f26a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f26c:	9000      	str	r0, [sp, #0]
 800f26e:	4602      	mov	r2, r0
 800f270:	2800      	cmp	r0, #0
 800f272:	d149      	bne.n	800f308 <_dtoa_r+0x2f8>
 800f274:	4b23      	ldr	r3, [pc, #140]	; (800f304 <_dtoa_r+0x2f4>)
 800f276:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f27a:	e6df      	b.n	800f03c <_dtoa_r+0x2c>
 800f27c:	2201      	movs	r2, #1
 800f27e:	e7dd      	b.n	800f23c <_dtoa_r+0x22c>
 800f280:	2200      	movs	r2, #0
 800f282:	9208      	str	r2, [sp, #32]
 800f284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f286:	eb0b 0a02 	add.w	sl, fp, r2
 800f28a:	f10a 0901 	add.w	r9, sl, #1
 800f28e:	464a      	mov	r2, r9
 800f290:	2a01      	cmp	r2, #1
 800f292:	bfb8      	it	lt
 800f294:	2201      	movlt	r2, #1
 800f296:	e7db      	b.n	800f250 <_dtoa_r+0x240>
 800f298:	2201      	movs	r2, #1
 800f29a:	e7f2      	b.n	800f282 <_dtoa_r+0x272>
 800f29c:	2401      	movs	r4, #1
 800f29e:	2200      	movs	r2, #0
 800f2a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f2a4:	f04f 3aff 	mov.w	sl, #4294967295
 800f2a8:	2100      	movs	r1, #0
 800f2aa:	46d1      	mov	r9, sl
 800f2ac:	2212      	movs	r2, #18
 800f2ae:	9109      	str	r1, [sp, #36]	; 0x24
 800f2b0:	e7ce      	b.n	800f250 <_dtoa_r+0x240>
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	9208      	str	r2, [sp, #32]
 800f2b6:	e7f5      	b.n	800f2a4 <_dtoa_r+0x294>
 800f2b8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800f2bc:	46d1      	mov	r9, sl
 800f2be:	4652      	mov	r2, sl
 800f2c0:	e7c6      	b.n	800f250 <_dtoa_r+0x240>
 800f2c2:	3101      	adds	r1, #1
 800f2c4:	6079      	str	r1, [r7, #4]
 800f2c6:	0040      	lsls	r0, r0, #1
 800f2c8:	e7c6      	b.n	800f258 <_dtoa_r+0x248>
 800f2ca:	bf00      	nop
 800f2cc:	f3af 8000 	nop.w
 800f2d0:	636f4361 	.word	0x636f4361
 800f2d4:	3fd287a7 	.word	0x3fd287a7
 800f2d8:	8b60c8b3 	.word	0x8b60c8b3
 800f2dc:	3fc68a28 	.word	0x3fc68a28
 800f2e0:	509f79fb 	.word	0x509f79fb
 800f2e4:	3fd34413 	.word	0x3fd34413
 800f2e8:	08012855 	.word	0x08012855
 800f2ec:	0801286c 	.word	0x0801286c
 800f2f0:	7ff00000 	.word	0x7ff00000
 800f2f4:	08012851 	.word	0x08012851
 800f2f8:	08012848 	.word	0x08012848
 800f2fc:	08012825 	.word	0x08012825
 800f300:	08012968 	.word	0x08012968
 800f304:	080128cb 	.word	0x080128cb
 800f308:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f30a:	9900      	ldr	r1, [sp, #0]
 800f30c:	6011      	str	r1, [r2, #0]
 800f30e:	f1b9 0f0e 	cmp.w	r9, #14
 800f312:	d872      	bhi.n	800f3fa <_dtoa_r+0x3ea>
 800f314:	2c00      	cmp	r4, #0
 800f316:	d070      	beq.n	800f3fa <_dtoa_r+0x3ea>
 800f318:	f1bb 0f00 	cmp.w	fp, #0
 800f31c:	f340 80a6 	ble.w	800f46c <_dtoa_r+0x45c>
 800f320:	49ca      	ldr	r1, [pc, #808]	; (800f64c <_dtoa_r+0x63c>)
 800f322:	f00b 020f 	and.w	r2, fp, #15
 800f326:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f32a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f32e:	ed92 7b00 	vldr	d7, [r2]
 800f332:	ea4f 112b 	mov.w	r1, fp, asr #4
 800f336:	f000 808d 	beq.w	800f454 <_dtoa_r+0x444>
 800f33a:	4ac5      	ldr	r2, [pc, #788]	; (800f650 <_dtoa_r+0x640>)
 800f33c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800f340:	ed92 6b08 	vldr	d6, [r2, #32]
 800f344:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800f348:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f34c:	f001 010f 	and.w	r1, r1, #15
 800f350:	2203      	movs	r2, #3
 800f352:	48bf      	ldr	r0, [pc, #764]	; (800f650 <_dtoa_r+0x640>)
 800f354:	2900      	cmp	r1, #0
 800f356:	d17f      	bne.n	800f458 <_dtoa_r+0x448>
 800f358:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f35c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f360:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f364:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f366:	2900      	cmp	r1, #0
 800f368:	f000 80b2 	beq.w	800f4d0 <_dtoa_r+0x4c0>
 800f36c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f370:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f374:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f37c:	f140 80a8 	bpl.w	800f4d0 <_dtoa_r+0x4c0>
 800f380:	f1b9 0f00 	cmp.w	r9, #0
 800f384:	f000 80a4 	beq.w	800f4d0 <_dtoa_r+0x4c0>
 800f388:	f1ba 0f00 	cmp.w	sl, #0
 800f38c:	dd31      	ble.n	800f3f2 <_dtoa_r+0x3e2>
 800f38e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f392:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f396:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f39a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f39e:	3201      	adds	r2, #1
 800f3a0:	4650      	mov	r0, sl
 800f3a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f3a6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f3aa:	ee07 2a90 	vmov	s15, r2
 800f3ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f3b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f3b6:	ed8d 5b02 	vstr	d5, [sp, #8]
 800f3ba:	9c03      	ldr	r4, [sp, #12]
 800f3bc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f3c0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	f040 8086 	bne.w	800f4d6 <_dtoa_r+0x4c6>
 800f3ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f3ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f3d2:	ec42 1b17 	vmov	d7, r1, r2
 800f3d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3de:	f300 8272 	bgt.w	800f8c6 <_dtoa_r+0x8b6>
 800f3e2:	eeb1 7b47 	vneg.f64	d7, d7
 800f3e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ee:	f100 8267 	bmi.w	800f8c0 <_dtoa_r+0x8b0>
 800f3f2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800f3f6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800f3fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f3fc:	2a00      	cmp	r2, #0
 800f3fe:	f2c0 8129 	blt.w	800f654 <_dtoa_r+0x644>
 800f402:	f1bb 0f0e 	cmp.w	fp, #14
 800f406:	f300 8125 	bgt.w	800f654 <_dtoa_r+0x644>
 800f40a:	4b90      	ldr	r3, [pc, #576]	; (800f64c <_dtoa_r+0x63c>)
 800f40c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f410:	ed93 6b00 	vldr	d6, [r3]
 800f414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f416:	2b00      	cmp	r3, #0
 800f418:	f280 80c3 	bge.w	800f5a2 <_dtoa_r+0x592>
 800f41c:	f1b9 0f00 	cmp.w	r9, #0
 800f420:	f300 80bf 	bgt.w	800f5a2 <_dtoa_r+0x592>
 800f424:	f040 824c 	bne.w	800f8c0 <_dtoa_r+0x8b0>
 800f428:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f42c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f430:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f434:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f43c:	464c      	mov	r4, r9
 800f43e:	464f      	mov	r7, r9
 800f440:	f280 8222 	bge.w	800f888 <_dtoa_r+0x878>
 800f444:	f8dd 8000 	ldr.w	r8, [sp]
 800f448:	2331      	movs	r3, #49	; 0x31
 800f44a:	f808 3b01 	strb.w	r3, [r8], #1
 800f44e:	f10b 0b01 	add.w	fp, fp, #1
 800f452:	e21e      	b.n	800f892 <_dtoa_r+0x882>
 800f454:	2202      	movs	r2, #2
 800f456:	e77c      	b.n	800f352 <_dtoa_r+0x342>
 800f458:	07cc      	lsls	r4, r1, #31
 800f45a:	d504      	bpl.n	800f466 <_dtoa_r+0x456>
 800f45c:	ed90 6b00 	vldr	d6, [r0]
 800f460:	3201      	adds	r2, #1
 800f462:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f466:	1049      	asrs	r1, r1, #1
 800f468:	3008      	adds	r0, #8
 800f46a:	e773      	b.n	800f354 <_dtoa_r+0x344>
 800f46c:	d02e      	beq.n	800f4cc <_dtoa_r+0x4bc>
 800f46e:	f1cb 0100 	rsb	r1, fp, #0
 800f472:	4a76      	ldr	r2, [pc, #472]	; (800f64c <_dtoa_r+0x63c>)
 800f474:	f001 000f 	and.w	r0, r1, #15
 800f478:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f47c:	ed92 7b00 	vldr	d7, [r2]
 800f480:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800f484:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f488:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f48c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800f490:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f494:	486e      	ldr	r0, [pc, #440]	; (800f650 <_dtoa_r+0x640>)
 800f496:	1109      	asrs	r1, r1, #4
 800f498:	2400      	movs	r4, #0
 800f49a:	2202      	movs	r2, #2
 800f49c:	b939      	cbnz	r1, 800f4ae <_dtoa_r+0x49e>
 800f49e:	2c00      	cmp	r4, #0
 800f4a0:	f43f af60 	beq.w	800f364 <_dtoa_r+0x354>
 800f4a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f4a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4ac:	e75a      	b.n	800f364 <_dtoa_r+0x354>
 800f4ae:	07cf      	lsls	r7, r1, #31
 800f4b0:	d509      	bpl.n	800f4c6 <_dtoa_r+0x4b6>
 800f4b2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800f4b6:	ed90 7b00 	vldr	d7, [r0]
 800f4ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f4be:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f4c2:	3201      	adds	r2, #1
 800f4c4:	2401      	movs	r4, #1
 800f4c6:	1049      	asrs	r1, r1, #1
 800f4c8:	3008      	adds	r0, #8
 800f4ca:	e7e7      	b.n	800f49c <_dtoa_r+0x48c>
 800f4cc:	2202      	movs	r2, #2
 800f4ce:	e749      	b.n	800f364 <_dtoa_r+0x354>
 800f4d0:	465f      	mov	r7, fp
 800f4d2:	4648      	mov	r0, r9
 800f4d4:	e765      	b.n	800f3a2 <_dtoa_r+0x392>
 800f4d6:	ec42 1b17 	vmov	d7, r1, r2
 800f4da:	4a5c      	ldr	r2, [pc, #368]	; (800f64c <_dtoa_r+0x63c>)
 800f4dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f4e0:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f4e4:	9a00      	ldr	r2, [sp, #0]
 800f4e6:	1814      	adds	r4, r2, r0
 800f4e8:	9a08      	ldr	r2, [sp, #32]
 800f4ea:	b352      	cbz	r2, 800f542 <_dtoa_r+0x532>
 800f4ec:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f4f0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f4f4:	f8dd 8000 	ldr.w	r8, [sp]
 800f4f8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f4fc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f500:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f504:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f508:	ee14 2a90 	vmov	r2, s9
 800f50c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f510:	3230      	adds	r2, #48	; 0x30
 800f512:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f516:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f51a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f51e:	f808 2b01 	strb.w	r2, [r8], #1
 800f522:	d439      	bmi.n	800f598 <_dtoa_r+0x588>
 800f524:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f528:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f52c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f530:	d472      	bmi.n	800f618 <_dtoa_r+0x608>
 800f532:	45a0      	cmp	r8, r4
 800f534:	f43f af5d 	beq.w	800f3f2 <_dtoa_r+0x3e2>
 800f538:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f53c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f540:	e7e0      	b.n	800f504 <_dtoa_r+0x4f4>
 800f542:	f8dd 8000 	ldr.w	r8, [sp]
 800f546:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f54a:	4621      	mov	r1, r4
 800f54c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f550:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f554:	ee14 2a90 	vmov	r2, s9
 800f558:	3230      	adds	r2, #48	; 0x30
 800f55a:	f808 2b01 	strb.w	r2, [r8], #1
 800f55e:	45a0      	cmp	r8, r4
 800f560:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f564:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f568:	d118      	bne.n	800f59c <_dtoa_r+0x58c>
 800f56a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f56e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f572:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f57a:	dc4d      	bgt.n	800f618 <_dtoa_r+0x608>
 800f57c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f580:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f588:	f57f af33 	bpl.w	800f3f2 <_dtoa_r+0x3e2>
 800f58c:	4688      	mov	r8, r1
 800f58e:	3901      	subs	r1, #1
 800f590:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f594:	2b30      	cmp	r3, #48	; 0x30
 800f596:	d0f9      	beq.n	800f58c <_dtoa_r+0x57c>
 800f598:	46bb      	mov	fp, r7
 800f59a:	e02a      	b.n	800f5f2 <_dtoa_r+0x5e2>
 800f59c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f5a0:	e7d6      	b.n	800f550 <_dtoa_r+0x540>
 800f5a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5a6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f5aa:	f8dd 8000 	ldr.w	r8, [sp]
 800f5ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f5b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f5b6:	ee15 3a10 	vmov	r3, s10
 800f5ba:	3330      	adds	r3, #48	; 0x30
 800f5bc:	f808 3b01 	strb.w	r3, [r8], #1
 800f5c0:	9b00      	ldr	r3, [sp, #0]
 800f5c2:	eba8 0303 	sub.w	r3, r8, r3
 800f5c6:	4599      	cmp	r9, r3
 800f5c8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f5cc:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f5d0:	d133      	bne.n	800f63a <_dtoa_r+0x62a>
 800f5d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f5d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f5da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5de:	dc1a      	bgt.n	800f616 <_dtoa_r+0x606>
 800f5e0:	eeb4 7b46 	vcmp.f64	d7, d6
 800f5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5e8:	d103      	bne.n	800f5f2 <_dtoa_r+0x5e2>
 800f5ea:	ee15 3a10 	vmov	r3, s10
 800f5ee:	07d9      	lsls	r1, r3, #31
 800f5f0:	d411      	bmi.n	800f616 <_dtoa_r+0x606>
 800f5f2:	4629      	mov	r1, r5
 800f5f4:	4630      	mov	r0, r6
 800f5f6:	f000 fad9 	bl	800fbac <_Bfree>
 800f5fa:	2300      	movs	r3, #0
 800f5fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f5fe:	f888 3000 	strb.w	r3, [r8]
 800f602:	f10b 0301 	add.w	r3, fp, #1
 800f606:	6013      	str	r3, [r2, #0]
 800f608:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	f43f ad4d 	beq.w	800f0aa <_dtoa_r+0x9a>
 800f610:	f8c3 8000 	str.w	r8, [r3]
 800f614:	e549      	b.n	800f0aa <_dtoa_r+0x9a>
 800f616:	465f      	mov	r7, fp
 800f618:	4643      	mov	r3, r8
 800f61a:	4698      	mov	r8, r3
 800f61c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f620:	2a39      	cmp	r2, #57	; 0x39
 800f622:	d106      	bne.n	800f632 <_dtoa_r+0x622>
 800f624:	9a00      	ldr	r2, [sp, #0]
 800f626:	429a      	cmp	r2, r3
 800f628:	d1f7      	bne.n	800f61a <_dtoa_r+0x60a>
 800f62a:	9900      	ldr	r1, [sp, #0]
 800f62c:	2230      	movs	r2, #48	; 0x30
 800f62e:	3701      	adds	r7, #1
 800f630:	700a      	strb	r2, [r1, #0]
 800f632:	781a      	ldrb	r2, [r3, #0]
 800f634:	3201      	adds	r2, #1
 800f636:	701a      	strb	r2, [r3, #0]
 800f638:	e7ae      	b.n	800f598 <_dtoa_r+0x588>
 800f63a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f63e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f646:	d1b2      	bne.n	800f5ae <_dtoa_r+0x59e>
 800f648:	e7d3      	b.n	800f5f2 <_dtoa_r+0x5e2>
 800f64a:	bf00      	nop
 800f64c:	08012968 	.word	0x08012968
 800f650:	08012940 	.word	0x08012940
 800f654:	9908      	ldr	r1, [sp, #32]
 800f656:	2900      	cmp	r1, #0
 800f658:	f000 80d1 	beq.w	800f7fe <_dtoa_r+0x7ee>
 800f65c:	9907      	ldr	r1, [sp, #28]
 800f65e:	2901      	cmp	r1, #1
 800f660:	f300 80b4 	bgt.w	800f7cc <_dtoa_r+0x7bc>
 800f664:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f666:	2900      	cmp	r1, #0
 800f668:	f000 80ac 	beq.w	800f7c4 <_dtoa_r+0x7b4>
 800f66c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f670:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f674:	461c      	mov	r4, r3
 800f676:	930a      	str	r3, [sp, #40]	; 0x28
 800f678:	9b05      	ldr	r3, [sp, #20]
 800f67a:	4413      	add	r3, r2
 800f67c:	9305      	str	r3, [sp, #20]
 800f67e:	9b06      	ldr	r3, [sp, #24]
 800f680:	2101      	movs	r1, #1
 800f682:	4413      	add	r3, r2
 800f684:	4630      	mov	r0, r6
 800f686:	9306      	str	r3, [sp, #24]
 800f688:	f000 fb4c 	bl	800fd24 <__i2b>
 800f68c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f68e:	4607      	mov	r7, r0
 800f690:	f1b8 0f00 	cmp.w	r8, #0
 800f694:	dd0d      	ble.n	800f6b2 <_dtoa_r+0x6a2>
 800f696:	9a06      	ldr	r2, [sp, #24]
 800f698:	2a00      	cmp	r2, #0
 800f69a:	dd0a      	ble.n	800f6b2 <_dtoa_r+0x6a2>
 800f69c:	4542      	cmp	r2, r8
 800f69e:	9905      	ldr	r1, [sp, #20]
 800f6a0:	bfa8      	it	ge
 800f6a2:	4642      	movge	r2, r8
 800f6a4:	1a89      	subs	r1, r1, r2
 800f6a6:	9105      	str	r1, [sp, #20]
 800f6a8:	9906      	ldr	r1, [sp, #24]
 800f6aa:	eba8 0802 	sub.w	r8, r8, r2
 800f6ae:	1a8a      	subs	r2, r1, r2
 800f6b0:	9206      	str	r2, [sp, #24]
 800f6b2:	b303      	cbz	r3, 800f6f6 <_dtoa_r+0x6e6>
 800f6b4:	9a08      	ldr	r2, [sp, #32]
 800f6b6:	2a00      	cmp	r2, #0
 800f6b8:	f000 80a6 	beq.w	800f808 <_dtoa_r+0x7f8>
 800f6bc:	2c00      	cmp	r4, #0
 800f6be:	dd13      	ble.n	800f6e8 <_dtoa_r+0x6d8>
 800f6c0:	4639      	mov	r1, r7
 800f6c2:	4622      	mov	r2, r4
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	930c      	str	r3, [sp, #48]	; 0x30
 800f6c8:	f000 fbe8 	bl	800fe9c <__pow5mult>
 800f6cc:	462a      	mov	r2, r5
 800f6ce:	4601      	mov	r1, r0
 800f6d0:	4607      	mov	r7, r0
 800f6d2:	4630      	mov	r0, r6
 800f6d4:	f000 fb3c 	bl	800fd50 <__multiply>
 800f6d8:	4629      	mov	r1, r5
 800f6da:	900a      	str	r0, [sp, #40]	; 0x28
 800f6dc:	4630      	mov	r0, r6
 800f6de:	f000 fa65 	bl	800fbac <_Bfree>
 800f6e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6e6:	4615      	mov	r5, r2
 800f6e8:	1b1a      	subs	r2, r3, r4
 800f6ea:	d004      	beq.n	800f6f6 <_dtoa_r+0x6e6>
 800f6ec:	4629      	mov	r1, r5
 800f6ee:	4630      	mov	r0, r6
 800f6f0:	f000 fbd4 	bl	800fe9c <__pow5mult>
 800f6f4:	4605      	mov	r5, r0
 800f6f6:	2101      	movs	r1, #1
 800f6f8:	4630      	mov	r0, r6
 800f6fa:	f000 fb13 	bl	800fd24 <__i2b>
 800f6fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f700:	2b00      	cmp	r3, #0
 800f702:	4604      	mov	r4, r0
 800f704:	f340 8082 	ble.w	800f80c <_dtoa_r+0x7fc>
 800f708:	461a      	mov	r2, r3
 800f70a:	4601      	mov	r1, r0
 800f70c:	4630      	mov	r0, r6
 800f70e:	f000 fbc5 	bl	800fe9c <__pow5mult>
 800f712:	9b07      	ldr	r3, [sp, #28]
 800f714:	2b01      	cmp	r3, #1
 800f716:	4604      	mov	r4, r0
 800f718:	dd7b      	ble.n	800f812 <_dtoa_r+0x802>
 800f71a:	2300      	movs	r3, #0
 800f71c:	930a      	str	r3, [sp, #40]	; 0x28
 800f71e:	6922      	ldr	r2, [r4, #16]
 800f720:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f724:	6910      	ldr	r0, [r2, #16]
 800f726:	f000 faad 	bl	800fc84 <__hi0bits>
 800f72a:	f1c0 0020 	rsb	r0, r0, #32
 800f72e:	9b06      	ldr	r3, [sp, #24]
 800f730:	4418      	add	r0, r3
 800f732:	f010 001f 	ands.w	r0, r0, #31
 800f736:	f000 808d 	beq.w	800f854 <_dtoa_r+0x844>
 800f73a:	f1c0 0220 	rsb	r2, r0, #32
 800f73e:	2a04      	cmp	r2, #4
 800f740:	f340 8086 	ble.w	800f850 <_dtoa_r+0x840>
 800f744:	f1c0 001c 	rsb	r0, r0, #28
 800f748:	9b05      	ldr	r3, [sp, #20]
 800f74a:	4403      	add	r3, r0
 800f74c:	9305      	str	r3, [sp, #20]
 800f74e:	9b06      	ldr	r3, [sp, #24]
 800f750:	4403      	add	r3, r0
 800f752:	4480      	add	r8, r0
 800f754:	9306      	str	r3, [sp, #24]
 800f756:	9b05      	ldr	r3, [sp, #20]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	dd05      	ble.n	800f768 <_dtoa_r+0x758>
 800f75c:	4629      	mov	r1, r5
 800f75e:	461a      	mov	r2, r3
 800f760:	4630      	mov	r0, r6
 800f762:	f000 fbf5 	bl	800ff50 <__lshift>
 800f766:	4605      	mov	r5, r0
 800f768:	9b06      	ldr	r3, [sp, #24]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	dd05      	ble.n	800f77a <_dtoa_r+0x76a>
 800f76e:	4621      	mov	r1, r4
 800f770:	461a      	mov	r2, r3
 800f772:	4630      	mov	r0, r6
 800f774:	f000 fbec 	bl	800ff50 <__lshift>
 800f778:	4604      	mov	r4, r0
 800f77a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d06b      	beq.n	800f858 <_dtoa_r+0x848>
 800f780:	4621      	mov	r1, r4
 800f782:	4628      	mov	r0, r5
 800f784:	f000 fc50 	bl	8010028 <__mcmp>
 800f788:	2800      	cmp	r0, #0
 800f78a:	da65      	bge.n	800f858 <_dtoa_r+0x848>
 800f78c:	2300      	movs	r3, #0
 800f78e:	4629      	mov	r1, r5
 800f790:	220a      	movs	r2, #10
 800f792:	4630      	mov	r0, r6
 800f794:	f000 fa2c 	bl	800fbf0 <__multadd>
 800f798:	9b08      	ldr	r3, [sp, #32]
 800f79a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f79e:	4605      	mov	r5, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	f000 8192 	beq.w	800faca <_dtoa_r+0xaba>
 800f7a6:	4639      	mov	r1, r7
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	220a      	movs	r2, #10
 800f7ac:	4630      	mov	r0, r6
 800f7ae:	f000 fa1f 	bl	800fbf0 <__multadd>
 800f7b2:	f1ba 0f00 	cmp.w	sl, #0
 800f7b6:	4607      	mov	r7, r0
 800f7b8:	f300 808e 	bgt.w	800f8d8 <_dtoa_r+0x8c8>
 800f7bc:	9b07      	ldr	r3, [sp, #28]
 800f7be:	2b02      	cmp	r3, #2
 800f7c0:	dc51      	bgt.n	800f866 <_dtoa_r+0x856>
 800f7c2:	e089      	b.n	800f8d8 <_dtoa_r+0x8c8>
 800f7c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f7c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f7ca:	e751      	b.n	800f670 <_dtoa_r+0x660>
 800f7cc:	f109 34ff 	add.w	r4, r9, #4294967295
 800f7d0:	42a3      	cmp	r3, r4
 800f7d2:	bfbf      	itttt	lt
 800f7d4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800f7d6:	1ae3      	sublt	r3, r4, r3
 800f7d8:	18d2      	addlt	r2, r2, r3
 800f7da:	4613      	movlt	r3, r2
 800f7dc:	bfb7      	itett	lt
 800f7de:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f7e0:	1b1c      	subge	r4, r3, r4
 800f7e2:	4623      	movlt	r3, r4
 800f7e4:	2400      	movlt	r4, #0
 800f7e6:	f1b9 0f00 	cmp.w	r9, #0
 800f7ea:	bfb5      	itete	lt
 800f7ec:	9a05      	ldrlt	r2, [sp, #20]
 800f7ee:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800f7f2:	eba2 0809 	sublt.w	r8, r2, r9
 800f7f6:	464a      	movge	r2, r9
 800f7f8:	bfb8      	it	lt
 800f7fa:	2200      	movlt	r2, #0
 800f7fc:	e73b      	b.n	800f676 <_dtoa_r+0x666>
 800f7fe:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f802:	9f08      	ldr	r7, [sp, #32]
 800f804:	461c      	mov	r4, r3
 800f806:	e743      	b.n	800f690 <_dtoa_r+0x680>
 800f808:	461a      	mov	r2, r3
 800f80a:	e76f      	b.n	800f6ec <_dtoa_r+0x6dc>
 800f80c:	9b07      	ldr	r3, [sp, #28]
 800f80e:	2b01      	cmp	r3, #1
 800f810:	dc18      	bgt.n	800f844 <_dtoa_r+0x834>
 800f812:	9b02      	ldr	r3, [sp, #8]
 800f814:	b9b3      	cbnz	r3, 800f844 <_dtoa_r+0x834>
 800f816:	9b03      	ldr	r3, [sp, #12]
 800f818:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f81c:	b9a2      	cbnz	r2, 800f848 <_dtoa_r+0x838>
 800f81e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f822:	0d12      	lsrs	r2, r2, #20
 800f824:	0512      	lsls	r2, r2, #20
 800f826:	b18a      	cbz	r2, 800f84c <_dtoa_r+0x83c>
 800f828:	9b05      	ldr	r3, [sp, #20]
 800f82a:	3301      	adds	r3, #1
 800f82c:	9305      	str	r3, [sp, #20]
 800f82e:	9b06      	ldr	r3, [sp, #24]
 800f830:	3301      	adds	r3, #1
 800f832:	9306      	str	r3, [sp, #24]
 800f834:	2301      	movs	r3, #1
 800f836:	930a      	str	r3, [sp, #40]	; 0x28
 800f838:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	f47f af6f 	bne.w	800f71e <_dtoa_r+0x70e>
 800f840:	2001      	movs	r0, #1
 800f842:	e774      	b.n	800f72e <_dtoa_r+0x71e>
 800f844:	2300      	movs	r3, #0
 800f846:	e7f6      	b.n	800f836 <_dtoa_r+0x826>
 800f848:	9b02      	ldr	r3, [sp, #8]
 800f84a:	e7f4      	b.n	800f836 <_dtoa_r+0x826>
 800f84c:	920a      	str	r2, [sp, #40]	; 0x28
 800f84e:	e7f3      	b.n	800f838 <_dtoa_r+0x828>
 800f850:	d081      	beq.n	800f756 <_dtoa_r+0x746>
 800f852:	4610      	mov	r0, r2
 800f854:	301c      	adds	r0, #28
 800f856:	e777      	b.n	800f748 <_dtoa_r+0x738>
 800f858:	f1b9 0f00 	cmp.w	r9, #0
 800f85c:	dc37      	bgt.n	800f8ce <_dtoa_r+0x8be>
 800f85e:	9b07      	ldr	r3, [sp, #28]
 800f860:	2b02      	cmp	r3, #2
 800f862:	dd34      	ble.n	800f8ce <_dtoa_r+0x8be>
 800f864:	46ca      	mov	sl, r9
 800f866:	f1ba 0f00 	cmp.w	sl, #0
 800f86a:	d10d      	bne.n	800f888 <_dtoa_r+0x878>
 800f86c:	4621      	mov	r1, r4
 800f86e:	4653      	mov	r3, sl
 800f870:	2205      	movs	r2, #5
 800f872:	4630      	mov	r0, r6
 800f874:	f000 f9bc 	bl	800fbf0 <__multadd>
 800f878:	4601      	mov	r1, r0
 800f87a:	4604      	mov	r4, r0
 800f87c:	4628      	mov	r0, r5
 800f87e:	f000 fbd3 	bl	8010028 <__mcmp>
 800f882:	2800      	cmp	r0, #0
 800f884:	f73f adde 	bgt.w	800f444 <_dtoa_r+0x434>
 800f888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f88a:	f8dd 8000 	ldr.w	r8, [sp]
 800f88e:	ea6f 0b03 	mvn.w	fp, r3
 800f892:	f04f 0900 	mov.w	r9, #0
 800f896:	4621      	mov	r1, r4
 800f898:	4630      	mov	r0, r6
 800f89a:	f000 f987 	bl	800fbac <_Bfree>
 800f89e:	2f00      	cmp	r7, #0
 800f8a0:	f43f aea7 	beq.w	800f5f2 <_dtoa_r+0x5e2>
 800f8a4:	f1b9 0f00 	cmp.w	r9, #0
 800f8a8:	d005      	beq.n	800f8b6 <_dtoa_r+0x8a6>
 800f8aa:	45b9      	cmp	r9, r7
 800f8ac:	d003      	beq.n	800f8b6 <_dtoa_r+0x8a6>
 800f8ae:	4649      	mov	r1, r9
 800f8b0:	4630      	mov	r0, r6
 800f8b2:	f000 f97b 	bl	800fbac <_Bfree>
 800f8b6:	4639      	mov	r1, r7
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	f000 f977 	bl	800fbac <_Bfree>
 800f8be:	e698      	b.n	800f5f2 <_dtoa_r+0x5e2>
 800f8c0:	2400      	movs	r4, #0
 800f8c2:	4627      	mov	r7, r4
 800f8c4:	e7e0      	b.n	800f888 <_dtoa_r+0x878>
 800f8c6:	46bb      	mov	fp, r7
 800f8c8:	4604      	mov	r4, r0
 800f8ca:	4607      	mov	r7, r0
 800f8cc:	e5ba      	b.n	800f444 <_dtoa_r+0x434>
 800f8ce:	9b08      	ldr	r3, [sp, #32]
 800f8d0:	46ca      	mov	sl, r9
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	f000 8100 	beq.w	800fad8 <_dtoa_r+0xac8>
 800f8d8:	f1b8 0f00 	cmp.w	r8, #0
 800f8dc:	dd05      	ble.n	800f8ea <_dtoa_r+0x8da>
 800f8de:	4639      	mov	r1, r7
 800f8e0:	4642      	mov	r2, r8
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	f000 fb34 	bl	800ff50 <__lshift>
 800f8e8:	4607      	mov	r7, r0
 800f8ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d05d      	beq.n	800f9ac <_dtoa_r+0x99c>
 800f8f0:	6879      	ldr	r1, [r7, #4]
 800f8f2:	4630      	mov	r0, r6
 800f8f4:	f000 f91a 	bl	800fb2c <_Balloc>
 800f8f8:	4680      	mov	r8, r0
 800f8fa:	b928      	cbnz	r0, 800f908 <_dtoa_r+0x8f8>
 800f8fc:	4b82      	ldr	r3, [pc, #520]	; (800fb08 <_dtoa_r+0xaf8>)
 800f8fe:	4602      	mov	r2, r0
 800f900:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f904:	f7ff bb9a 	b.w	800f03c <_dtoa_r+0x2c>
 800f908:	693a      	ldr	r2, [r7, #16]
 800f90a:	3202      	adds	r2, #2
 800f90c:	0092      	lsls	r2, r2, #2
 800f90e:	f107 010c 	add.w	r1, r7, #12
 800f912:	300c      	adds	r0, #12
 800f914:	f7fe fe96 	bl	800e644 <memcpy>
 800f918:	2201      	movs	r2, #1
 800f91a:	4641      	mov	r1, r8
 800f91c:	4630      	mov	r0, r6
 800f91e:	f000 fb17 	bl	800ff50 <__lshift>
 800f922:	9b00      	ldr	r3, [sp, #0]
 800f924:	3301      	adds	r3, #1
 800f926:	9305      	str	r3, [sp, #20]
 800f928:	9b00      	ldr	r3, [sp, #0]
 800f92a:	4453      	add	r3, sl
 800f92c:	9309      	str	r3, [sp, #36]	; 0x24
 800f92e:	9b02      	ldr	r3, [sp, #8]
 800f930:	f003 0301 	and.w	r3, r3, #1
 800f934:	46b9      	mov	r9, r7
 800f936:	9308      	str	r3, [sp, #32]
 800f938:	4607      	mov	r7, r0
 800f93a:	9b05      	ldr	r3, [sp, #20]
 800f93c:	4621      	mov	r1, r4
 800f93e:	3b01      	subs	r3, #1
 800f940:	4628      	mov	r0, r5
 800f942:	9302      	str	r3, [sp, #8]
 800f944:	f7ff fad6 	bl	800eef4 <quorem>
 800f948:	4603      	mov	r3, r0
 800f94a:	3330      	adds	r3, #48	; 0x30
 800f94c:	9006      	str	r0, [sp, #24]
 800f94e:	4649      	mov	r1, r9
 800f950:	4628      	mov	r0, r5
 800f952:	930a      	str	r3, [sp, #40]	; 0x28
 800f954:	f000 fb68 	bl	8010028 <__mcmp>
 800f958:	463a      	mov	r2, r7
 800f95a:	4682      	mov	sl, r0
 800f95c:	4621      	mov	r1, r4
 800f95e:	4630      	mov	r0, r6
 800f960:	f000 fb7e 	bl	8010060 <__mdiff>
 800f964:	68c2      	ldr	r2, [r0, #12]
 800f966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f968:	4680      	mov	r8, r0
 800f96a:	bb0a      	cbnz	r2, 800f9b0 <_dtoa_r+0x9a0>
 800f96c:	4601      	mov	r1, r0
 800f96e:	4628      	mov	r0, r5
 800f970:	f000 fb5a 	bl	8010028 <__mcmp>
 800f974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f976:	4602      	mov	r2, r0
 800f978:	4641      	mov	r1, r8
 800f97a:	4630      	mov	r0, r6
 800f97c:	920e      	str	r2, [sp, #56]	; 0x38
 800f97e:	930a      	str	r3, [sp, #40]	; 0x28
 800f980:	f000 f914 	bl	800fbac <_Bfree>
 800f984:	9b07      	ldr	r3, [sp, #28]
 800f986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f988:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f98c:	ea43 0102 	orr.w	r1, r3, r2
 800f990:	9b08      	ldr	r3, [sp, #32]
 800f992:	430b      	orrs	r3, r1
 800f994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f996:	d10d      	bne.n	800f9b4 <_dtoa_r+0x9a4>
 800f998:	2b39      	cmp	r3, #57	; 0x39
 800f99a:	d029      	beq.n	800f9f0 <_dtoa_r+0x9e0>
 800f99c:	f1ba 0f00 	cmp.w	sl, #0
 800f9a0:	dd01      	ble.n	800f9a6 <_dtoa_r+0x996>
 800f9a2:	9b06      	ldr	r3, [sp, #24]
 800f9a4:	3331      	adds	r3, #49	; 0x31
 800f9a6:	9a02      	ldr	r2, [sp, #8]
 800f9a8:	7013      	strb	r3, [r2, #0]
 800f9aa:	e774      	b.n	800f896 <_dtoa_r+0x886>
 800f9ac:	4638      	mov	r0, r7
 800f9ae:	e7b8      	b.n	800f922 <_dtoa_r+0x912>
 800f9b0:	2201      	movs	r2, #1
 800f9b2:	e7e1      	b.n	800f978 <_dtoa_r+0x968>
 800f9b4:	f1ba 0f00 	cmp.w	sl, #0
 800f9b8:	db06      	blt.n	800f9c8 <_dtoa_r+0x9b8>
 800f9ba:	9907      	ldr	r1, [sp, #28]
 800f9bc:	ea41 0a0a 	orr.w	sl, r1, sl
 800f9c0:	9908      	ldr	r1, [sp, #32]
 800f9c2:	ea5a 0101 	orrs.w	r1, sl, r1
 800f9c6:	d120      	bne.n	800fa0a <_dtoa_r+0x9fa>
 800f9c8:	2a00      	cmp	r2, #0
 800f9ca:	ddec      	ble.n	800f9a6 <_dtoa_r+0x996>
 800f9cc:	4629      	mov	r1, r5
 800f9ce:	2201      	movs	r2, #1
 800f9d0:	4630      	mov	r0, r6
 800f9d2:	9305      	str	r3, [sp, #20]
 800f9d4:	f000 fabc 	bl	800ff50 <__lshift>
 800f9d8:	4621      	mov	r1, r4
 800f9da:	4605      	mov	r5, r0
 800f9dc:	f000 fb24 	bl	8010028 <__mcmp>
 800f9e0:	2800      	cmp	r0, #0
 800f9e2:	9b05      	ldr	r3, [sp, #20]
 800f9e4:	dc02      	bgt.n	800f9ec <_dtoa_r+0x9dc>
 800f9e6:	d1de      	bne.n	800f9a6 <_dtoa_r+0x996>
 800f9e8:	07da      	lsls	r2, r3, #31
 800f9ea:	d5dc      	bpl.n	800f9a6 <_dtoa_r+0x996>
 800f9ec:	2b39      	cmp	r3, #57	; 0x39
 800f9ee:	d1d8      	bne.n	800f9a2 <_dtoa_r+0x992>
 800f9f0:	9a02      	ldr	r2, [sp, #8]
 800f9f2:	2339      	movs	r3, #57	; 0x39
 800f9f4:	7013      	strb	r3, [r2, #0]
 800f9f6:	4643      	mov	r3, r8
 800f9f8:	4698      	mov	r8, r3
 800f9fa:	3b01      	subs	r3, #1
 800f9fc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800fa00:	2a39      	cmp	r2, #57	; 0x39
 800fa02:	d051      	beq.n	800faa8 <_dtoa_r+0xa98>
 800fa04:	3201      	adds	r2, #1
 800fa06:	701a      	strb	r2, [r3, #0]
 800fa08:	e745      	b.n	800f896 <_dtoa_r+0x886>
 800fa0a:	2a00      	cmp	r2, #0
 800fa0c:	dd03      	ble.n	800fa16 <_dtoa_r+0xa06>
 800fa0e:	2b39      	cmp	r3, #57	; 0x39
 800fa10:	d0ee      	beq.n	800f9f0 <_dtoa_r+0x9e0>
 800fa12:	3301      	adds	r3, #1
 800fa14:	e7c7      	b.n	800f9a6 <_dtoa_r+0x996>
 800fa16:	9a05      	ldr	r2, [sp, #20]
 800fa18:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fa1a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fa1e:	428a      	cmp	r2, r1
 800fa20:	d02b      	beq.n	800fa7a <_dtoa_r+0xa6a>
 800fa22:	4629      	mov	r1, r5
 800fa24:	2300      	movs	r3, #0
 800fa26:	220a      	movs	r2, #10
 800fa28:	4630      	mov	r0, r6
 800fa2a:	f000 f8e1 	bl	800fbf0 <__multadd>
 800fa2e:	45b9      	cmp	r9, r7
 800fa30:	4605      	mov	r5, r0
 800fa32:	f04f 0300 	mov.w	r3, #0
 800fa36:	f04f 020a 	mov.w	r2, #10
 800fa3a:	4649      	mov	r1, r9
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	d107      	bne.n	800fa50 <_dtoa_r+0xa40>
 800fa40:	f000 f8d6 	bl	800fbf0 <__multadd>
 800fa44:	4681      	mov	r9, r0
 800fa46:	4607      	mov	r7, r0
 800fa48:	9b05      	ldr	r3, [sp, #20]
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	9305      	str	r3, [sp, #20]
 800fa4e:	e774      	b.n	800f93a <_dtoa_r+0x92a>
 800fa50:	f000 f8ce 	bl	800fbf0 <__multadd>
 800fa54:	4639      	mov	r1, r7
 800fa56:	4681      	mov	r9, r0
 800fa58:	2300      	movs	r3, #0
 800fa5a:	220a      	movs	r2, #10
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	f000 f8c7 	bl	800fbf0 <__multadd>
 800fa62:	4607      	mov	r7, r0
 800fa64:	e7f0      	b.n	800fa48 <_dtoa_r+0xa38>
 800fa66:	f1ba 0f00 	cmp.w	sl, #0
 800fa6a:	9a00      	ldr	r2, [sp, #0]
 800fa6c:	bfcc      	ite	gt
 800fa6e:	46d0      	movgt	r8, sl
 800fa70:	f04f 0801 	movle.w	r8, #1
 800fa74:	4490      	add	r8, r2
 800fa76:	f04f 0900 	mov.w	r9, #0
 800fa7a:	4629      	mov	r1, r5
 800fa7c:	2201      	movs	r2, #1
 800fa7e:	4630      	mov	r0, r6
 800fa80:	9302      	str	r3, [sp, #8]
 800fa82:	f000 fa65 	bl	800ff50 <__lshift>
 800fa86:	4621      	mov	r1, r4
 800fa88:	4605      	mov	r5, r0
 800fa8a:	f000 facd 	bl	8010028 <__mcmp>
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	dcb1      	bgt.n	800f9f6 <_dtoa_r+0x9e6>
 800fa92:	d102      	bne.n	800fa9a <_dtoa_r+0xa8a>
 800fa94:	9b02      	ldr	r3, [sp, #8]
 800fa96:	07db      	lsls	r3, r3, #31
 800fa98:	d4ad      	bmi.n	800f9f6 <_dtoa_r+0x9e6>
 800fa9a:	4643      	mov	r3, r8
 800fa9c:	4698      	mov	r8, r3
 800fa9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800faa2:	2a30      	cmp	r2, #48	; 0x30
 800faa4:	d0fa      	beq.n	800fa9c <_dtoa_r+0xa8c>
 800faa6:	e6f6      	b.n	800f896 <_dtoa_r+0x886>
 800faa8:	9a00      	ldr	r2, [sp, #0]
 800faaa:	429a      	cmp	r2, r3
 800faac:	d1a4      	bne.n	800f9f8 <_dtoa_r+0x9e8>
 800faae:	f10b 0b01 	add.w	fp, fp, #1
 800fab2:	2331      	movs	r3, #49	; 0x31
 800fab4:	e778      	b.n	800f9a8 <_dtoa_r+0x998>
 800fab6:	4b15      	ldr	r3, [pc, #84]	; (800fb0c <_dtoa_r+0xafc>)
 800fab8:	f7ff bb12 	b.w	800f0e0 <_dtoa_r+0xd0>
 800fabc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	f47f aaee 	bne.w	800f0a0 <_dtoa_r+0x90>
 800fac4:	4b12      	ldr	r3, [pc, #72]	; (800fb10 <_dtoa_r+0xb00>)
 800fac6:	f7ff bb0b 	b.w	800f0e0 <_dtoa_r+0xd0>
 800faca:	f1ba 0f00 	cmp.w	sl, #0
 800face:	dc03      	bgt.n	800fad8 <_dtoa_r+0xac8>
 800fad0:	9b07      	ldr	r3, [sp, #28]
 800fad2:	2b02      	cmp	r3, #2
 800fad4:	f73f aec7 	bgt.w	800f866 <_dtoa_r+0x856>
 800fad8:	f8dd 8000 	ldr.w	r8, [sp]
 800fadc:	4621      	mov	r1, r4
 800fade:	4628      	mov	r0, r5
 800fae0:	f7ff fa08 	bl	800eef4 <quorem>
 800fae4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fae8:	f808 3b01 	strb.w	r3, [r8], #1
 800faec:	9a00      	ldr	r2, [sp, #0]
 800faee:	eba8 0202 	sub.w	r2, r8, r2
 800faf2:	4592      	cmp	sl, r2
 800faf4:	ddb7      	ble.n	800fa66 <_dtoa_r+0xa56>
 800faf6:	4629      	mov	r1, r5
 800faf8:	2300      	movs	r3, #0
 800fafa:	220a      	movs	r2, #10
 800fafc:	4630      	mov	r0, r6
 800fafe:	f000 f877 	bl	800fbf0 <__multadd>
 800fb02:	4605      	mov	r5, r0
 800fb04:	e7ea      	b.n	800fadc <_dtoa_r+0xacc>
 800fb06:	bf00      	nop
 800fb08:	080128cb 	.word	0x080128cb
 800fb0c:	08012824 	.word	0x08012824
 800fb10:	08012848 	.word	0x08012848

0800fb14 <_localeconv_r>:
 800fb14:	4800      	ldr	r0, [pc, #0]	; (800fb18 <_localeconv_r+0x4>)
 800fb16:	4770      	bx	lr
 800fb18:	2400017c 	.word	0x2400017c

0800fb1c <malloc>:
 800fb1c:	4b02      	ldr	r3, [pc, #8]	; (800fb28 <malloc+0xc>)
 800fb1e:	4601      	mov	r1, r0
 800fb20:	6818      	ldr	r0, [r3, #0]
 800fb22:	f000 bbe1 	b.w	80102e8 <_malloc_r>
 800fb26:	bf00      	nop
 800fb28:	24000028 	.word	0x24000028

0800fb2c <_Balloc>:
 800fb2c:	b570      	push	{r4, r5, r6, lr}
 800fb2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fb30:	4604      	mov	r4, r0
 800fb32:	460d      	mov	r5, r1
 800fb34:	b976      	cbnz	r6, 800fb54 <_Balloc+0x28>
 800fb36:	2010      	movs	r0, #16
 800fb38:	f7ff fff0 	bl	800fb1c <malloc>
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	6260      	str	r0, [r4, #36]	; 0x24
 800fb40:	b920      	cbnz	r0, 800fb4c <_Balloc+0x20>
 800fb42:	4b18      	ldr	r3, [pc, #96]	; (800fba4 <_Balloc+0x78>)
 800fb44:	4818      	ldr	r0, [pc, #96]	; (800fba8 <_Balloc+0x7c>)
 800fb46:	2166      	movs	r1, #102	; 0x66
 800fb48:	f000 fc38 	bl	80103bc <__assert_func>
 800fb4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fb50:	6006      	str	r6, [r0, #0]
 800fb52:	60c6      	str	r6, [r0, #12]
 800fb54:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fb56:	68f3      	ldr	r3, [r6, #12]
 800fb58:	b183      	cbz	r3, 800fb7c <_Balloc+0x50>
 800fb5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fb62:	b9b8      	cbnz	r0, 800fb94 <_Balloc+0x68>
 800fb64:	2101      	movs	r1, #1
 800fb66:	fa01 f605 	lsl.w	r6, r1, r5
 800fb6a:	1d72      	adds	r2, r6, #5
 800fb6c:	0092      	lsls	r2, r2, #2
 800fb6e:	4620      	mov	r0, r4
 800fb70:	f000 fb5a 	bl	8010228 <_calloc_r>
 800fb74:	b160      	cbz	r0, 800fb90 <_Balloc+0x64>
 800fb76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fb7a:	e00e      	b.n	800fb9a <_Balloc+0x6e>
 800fb7c:	2221      	movs	r2, #33	; 0x21
 800fb7e:	2104      	movs	r1, #4
 800fb80:	4620      	mov	r0, r4
 800fb82:	f000 fb51 	bl	8010228 <_calloc_r>
 800fb86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fb88:	60f0      	str	r0, [r6, #12]
 800fb8a:	68db      	ldr	r3, [r3, #12]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d1e4      	bne.n	800fb5a <_Balloc+0x2e>
 800fb90:	2000      	movs	r0, #0
 800fb92:	bd70      	pop	{r4, r5, r6, pc}
 800fb94:	6802      	ldr	r2, [r0, #0]
 800fb96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fba0:	e7f7      	b.n	800fb92 <_Balloc+0x66>
 800fba2:	bf00      	nop
 800fba4:	08012855 	.word	0x08012855
 800fba8:	080128dc 	.word	0x080128dc

0800fbac <_Bfree>:
 800fbac:	b570      	push	{r4, r5, r6, lr}
 800fbae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fbb0:	4605      	mov	r5, r0
 800fbb2:	460c      	mov	r4, r1
 800fbb4:	b976      	cbnz	r6, 800fbd4 <_Bfree+0x28>
 800fbb6:	2010      	movs	r0, #16
 800fbb8:	f7ff ffb0 	bl	800fb1c <malloc>
 800fbbc:	4602      	mov	r2, r0
 800fbbe:	6268      	str	r0, [r5, #36]	; 0x24
 800fbc0:	b920      	cbnz	r0, 800fbcc <_Bfree+0x20>
 800fbc2:	4b09      	ldr	r3, [pc, #36]	; (800fbe8 <_Bfree+0x3c>)
 800fbc4:	4809      	ldr	r0, [pc, #36]	; (800fbec <_Bfree+0x40>)
 800fbc6:	218a      	movs	r1, #138	; 0x8a
 800fbc8:	f000 fbf8 	bl	80103bc <__assert_func>
 800fbcc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbd0:	6006      	str	r6, [r0, #0]
 800fbd2:	60c6      	str	r6, [r0, #12]
 800fbd4:	b13c      	cbz	r4, 800fbe6 <_Bfree+0x3a>
 800fbd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fbd8:	6862      	ldr	r2, [r4, #4]
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fbe0:	6021      	str	r1, [r4, #0]
 800fbe2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fbe6:	bd70      	pop	{r4, r5, r6, pc}
 800fbe8:	08012855 	.word	0x08012855
 800fbec:	080128dc 	.word	0x080128dc

0800fbf0 <__multadd>:
 800fbf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbf4:	690e      	ldr	r6, [r1, #16]
 800fbf6:	4607      	mov	r7, r0
 800fbf8:	4698      	mov	r8, r3
 800fbfa:	460c      	mov	r4, r1
 800fbfc:	f101 0014 	add.w	r0, r1, #20
 800fc00:	2300      	movs	r3, #0
 800fc02:	6805      	ldr	r5, [r0, #0]
 800fc04:	b2a9      	uxth	r1, r5
 800fc06:	fb02 8101 	mla	r1, r2, r1, r8
 800fc0a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fc0e:	0c2d      	lsrs	r5, r5, #16
 800fc10:	fb02 c505 	mla	r5, r2, r5, ip
 800fc14:	b289      	uxth	r1, r1
 800fc16:	3301      	adds	r3, #1
 800fc18:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fc1c:	429e      	cmp	r6, r3
 800fc1e:	f840 1b04 	str.w	r1, [r0], #4
 800fc22:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fc26:	dcec      	bgt.n	800fc02 <__multadd+0x12>
 800fc28:	f1b8 0f00 	cmp.w	r8, #0
 800fc2c:	d022      	beq.n	800fc74 <__multadd+0x84>
 800fc2e:	68a3      	ldr	r3, [r4, #8]
 800fc30:	42b3      	cmp	r3, r6
 800fc32:	dc19      	bgt.n	800fc68 <__multadd+0x78>
 800fc34:	6861      	ldr	r1, [r4, #4]
 800fc36:	4638      	mov	r0, r7
 800fc38:	3101      	adds	r1, #1
 800fc3a:	f7ff ff77 	bl	800fb2c <_Balloc>
 800fc3e:	4605      	mov	r5, r0
 800fc40:	b928      	cbnz	r0, 800fc4e <__multadd+0x5e>
 800fc42:	4602      	mov	r2, r0
 800fc44:	4b0d      	ldr	r3, [pc, #52]	; (800fc7c <__multadd+0x8c>)
 800fc46:	480e      	ldr	r0, [pc, #56]	; (800fc80 <__multadd+0x90>)
 800fc48:	21b5      	movs	r1, #181	; 0xb5
 800fc4a:	f000 fbb7 	bl	80103bc <__assert_func>
 800fc4e:	6922      	ldr	r2, [r4, #16]
 800fc50:	3202      	adds	r2, #2
 800fc52:	f104 010c 	add.w	r1, r4, #12
 800fc56:	0092      	lsls	r2, r2, #2
 800fc58:	300c      	adds	r0, #12
 800fc5a:	f7fe fcf3 	bl	800e644 <memcpy>
 800fc5e:	4621      	mov	r1, r4
 800fc60:	4638      	mov	r0, r7
 800fc62:	f7ff ffa3 	bl	800fbac <_Bfree>
 800fc66:	462c      	mov	r4, r5
 800fc68:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fc6c:	3601      	adds	r6, #1
 800fc6e:	f8c3 8014 	str.w	r8, [r3, #20]
 800fc72:	6126      	str	r6, [r4, #16]
 800fc74:	4620      	mov	r0, r4
 800fc76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc7a:	bf00      	nop
 800fc7c:	080128cb 	.word	0x080128cb
 800fc80:	080128dc 	.word	0x080128dc

0800fc84 <__hi0bits>:
 800fc84:	0c03      	lsrs	r3, r0, #16
 800fc86:	041b      	lsls	r3, r3, #16
 800fc88:	b9d3      	cbnz	r3, 800fcc0 <__hi0bits+0x3c>
 800fc8a:	0400      	lsls	r0, r0, #16
 800fc8c:	2310      	movs	r3, #16
 800fc8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fc92:	bf04      	itt	eq
 800fc94:	0200      	lsleq	r0, r0, #8
 800fc96:	3308      	addeq	r3, #8
 800fc98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fc9c:	bf04      	itt	eq
 800fc9e:	0100      	lsleq	r0, r0, #4
 800fca0:	3304      	addeq	r3, #4
 800fca2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fca6:	bf04      	itt	eq
 800fca8:	0080      	lsleq	r0, r0, #2
 800fcaa:	3302      	addeq	r3, #2
 800fcac:	2800      	cmp	r0, #0
 800fcae:	db05      	blt.n	800fcbc <__hi0bits+0x38>
 800fcb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fcb4:	f103 0301 	add.w	r3, r3, #1
 800fcb8:	bf08      	it	eq
 800fcba:	2320      	moveq	r3, #32
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	4770      	bx	lr
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	e7e4      	b.n	800fc8e <__hi0bits+0xa>

0800fcc4 <__lo0bits>:
 800fcc4:	6803      	ldr	r3, [r0, #0]
 800fcc6:	f013 0207 	ands.w	r2, r3, #7
 800fcca:	4601      	mov	r1, r0
 800fccc:	d00b      	beq.n	800fce6 <__lo0bits+0x22>
 800fcce:	07da      	lsls	r2, r3, #31
 800fcd0:	d424      	bmi.n	800fd1c <__lo0bits+0x58>
 800fcd2:	0798      	lsls	r0, r3, #30
 800fcd4:	bf49      	itett	mi
 800fcd6:	085b      	lsrmi	r3, r3, #1
 800fcd8:	089b      	lsrpl	r3, r3, #2
 800fcda:	2001      	movmi	r0, #1
 800fcdc:	600b      	strmi	r3, [r1, #0]
 800fcde:	bf5c      	itt	pl
 800fce0:	600b      	strpl	r3, [r1, #0]
 800fce2:	2002      	movpl	r0, #2
 800fce4:	4770      	bx	lr
 800fce6:	b298      	uxth	r0, r3
 800fce8:	b9b0      	cbnz	r0, 800fd18 <__lo0bits+0x54>
 800fcea:	0c1b      	lsrs	r3, r3, #16
 800fcec:	2010      	movs	r0, #16
 800fcee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fcf2:	bf04      	itt	eq
 800fcf4:	0a1b      	lsreq	r3, r3, #8
 800fcf6:	3008      	addeq	r0, #8
 800fcf8:	071a      	lsls	r2, r3, #28
 800fcfa:	bf04      	itt	eq
 800fcfc:	091b      	lsreq	r3, r3, #4
 800fcfe:	3004      	addeq	r0, #4
 800fd00:	079a      	lsls	r2, r3, #30
 800fd02:	bf04      	itt	eq
 800fd04:	089b      	lsreq	r3, r3, #2
 800fd06:	3002      	addeq	r0, #2
 800fd08:	07da      	lsls	r2, r3, #31
 800fd0a:	d403      	bmi.n	800fd14 <__lo0bits+0x50>
 800fd0c:	085b      	lsrs	r3, r3, #1
 800fd0e:	f100 0001 	add.w	r0, r0, #1
 800fd12:	d005      	beq.n	800fd20 <__lo0bits+0x5c>
 800fd14:	600b      	str	r3, [r1, #0]
 800fd16:	4770      	bx	lr
 800fd18:	4610      	mov	r0, r2
 800fd1a:	e7e8      	b.n	800fcee <__lo0bits+0x2a>
 800fd1c:	2000      	movs	r0, #0
 800fd1e:	4770      	bx	lr
 800fd20:	2020      	movs	r0, #32
 800fd22:	4770      	bx	lr

0800fd24 <__i2b>:
 800fd24:	b510      	push	{r4, lr}
 800fd26:	460c      	mov	r4, r1
 800fd28:	2101      	movs	r1, #1
 800fd2a:	f7ff feff 	bl	800fb2c <_Balloc>
 800fd2e:	4602      	mov	r2, r0
 800fd30:	b928      	cbnz	r0, 800fd3e <__i2b+0x1a>
 800fd32:	4b05      	ldr	r3, [pc, #20]	; (800fd48 <__i2b+0x24>)
 800fd34:	4805      	ldr	r0, [pc, #20]	; (800fd4c <__i2b+0x28>)
 800fd36:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fd3a:	f000 fb3f 	bl	80103bc <__assert_func>
 800fd3e:	2301      	movs	r3, #1
 800fd40:	6144      	str	r4, [r0, #20]
 800fd42:	6103      	str	r3, [r0, #16]
 800fd44:	bd10      	pop	{r4, pc}
 800fd46:	bf00      	nop
 800fd48:	080128cb 	.word	0x080128cb
 800fd4c:	080128dc 	.word	0x080128dc

0800fd50 <__multiply>:
 800fd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd54:	4614      	mov	r4, r2
 800fd56:	690a      	ldr	r2, [r1, #16]
 800fd58:	6923      	ldr	r3, [r4, #16]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	bfb8      	it	lt
 800fd5e:	460b      	movlt	r3, r1
 800fd60:	460d      	mov	r5, r1
 800fd62:	bfbc      	itt	lt
 800fd64:	4625      	movlt	r5, r4
 800fd66:	461c      	movlt	r4, r3
 800fd68:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fd6c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fd70:	68ab      	ldr	r3, [r5, #8]
 800fd72:	6869      	ldr	r1, [r5, #4]
 800fd74:	eb0a 0709 	add.w	r7, sl, r9
 800fd78:	42bb      	cmp	r3, r7
 800fd7a:	b085      	sub	sp, #20
 800fd7c:	bfb8      	it	lt
 800fd7e:	3101      	addlt	r1, #1
 800fd80:	f7ff fed4 	bl	800fb2c <_Balloc>
 800fd84:	b930      	cbnz	r0, 800fd94 <__multiply+0x44>
 800fd86:	4602      	mov	r2, r0
 800fd88:	4b42      	ldr	r3, [pc, #264]	; (800fe94 <__multiply+0x144>)
 800fd8a:	4843      	ldr	r0, [pc, #268]	; (800fe98 <__multiply+0x148>)
 800fd8c:	f240 115d 	movw	r1, #349	; 0x15d
 800fd90:	f000 fb14 	bl	80103bc <__assert_func>
 800fd94:	f100 0614 	add.w	r6, r0, #20
 800fd98:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fd9c:	4633      	mov	r3, r6
 800fd9e:	2200      	movs	r2, #0
 800fda0:	4543      	cmp	r3, r8
 800fda2:	d31e      	bcc.n	800fde2 <__multiply+0x92>
 800fda4:	f105 0c14 	add.w	ip, r5, #20
 800fda8:	f104 0314 	add.w	r3, r4, #20
 800fdac:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fdb0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fdb4:	9202      	str	r2, [sp, #8]
 800fdb6:	ebac 0205 	sub.w	r2, ip, r5
 800fdba:	3a15      	subs	r2, #21
 800fdbc:	f022 0203 	bic.w	r2, r2, #3
 800fdc0:	3204      	adds	r2, #4
 800fdc2:	f105 0115 	add.w	r1, r5, #21
 800fdc6:	458c      	cmp	ip, r1
 800fdc8:	bf38      	it	cc
 800fdca:	2204      	movcc	r2, #4
 800fdcc:	9201      	str	r2, [sp, #4]
 800fdce:	9a02      	ldr	r2, [sp, #8]
 800fdd0:	9303      	str	r3, [sp, #12]
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d808      	bhi.n	800fde8 <__multiply+0x98>
 800fdd6:	2f00      	cmp	r7, #0
 800fdd8:	dc55      	bgt.n	800fe86 <__multiply+0x136>
 800fdda:	6107      	str	r7, [r0, #16]
 800fddc:	b005      	add	sp, #20
 800fdde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde2:	f843 2b04 	str.w	r2, [r3], #4
 800fde6:	e7db      	b.n	800fda0 <__multiply+0x50>
 800fde8:	f8b3 a000 	ldrh.w	sl, [r3]
 800fdec:	f1ba 0f00 	cmp.w	sl, #0
 800fdf0:	d020      	beq.n	800fe34 <__multiply+0xe4>
 800fdf2:	f105 0e14 	add.w	lr, r5, #20
 800fdf6:	46b1      	mov	r9, r6
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fdfe:	f8d9 b000 	ldr.w	fp, [r9]
 800fe02:	b2a1      	uxth	r1, r4
 800fe04:	fa1f fb8b 	uxth.w	fp, fp
 800fe08:	fb0a b101 	mla	r1, sl, r1, fp
 800fe0c:	4411      	add	r1, r2
 800fe0e:	f8d9 2000 	ldr.w	r2, [r9]
 800fe12:	0c24      	lsrs	r4, r4, #16
 800fe14:	0c12      	lsrs	r2, r2, #16
 800fe16:	fb0a 2404 	mla	r4, sl, r4, r2
 800fe1a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fe1e:	b289      	uxth	r1, r1
 800fe20:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fe24:	45f4      	cmp	ip, lr
 800fe26:	f849 1b04 	str.w	r1, [r9], #4
 800fe2a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fe2e:	d8e4      	bhi.n	800fdfa <__multiply+0xaa>
 800fe30:	9901      	ldr	r1, [sp, #4]
 800fe32:	5072      	str	r2, [r6, r1]
 800fe34:	9a03      	ldr	r2, [sp, #12]
 800fe36:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fe3a:	3304      	adds	r3, #4
 800fe3c:	f1b9 0f00 	cmp.w	r9, #0
 800fe40:	d01f      	beq.n	800fe82 <__multiply+0x132>
 800fe42:	6834      	ldr	r4, [r6, #0]
 800fe44:	f105 0114 	add.w	r1, r5, #20
 800fe48:	46b6      	mov	lr, r6
 800fe4a:	f04f 0a00 	mov.w	sl, #0
 800fe4e:	880a      	ldrh	r2, [r1, #0]
 800fe50:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fe54:	fb09 b202 	mla	r2, r9, r2, fp
 800fe58:	4492      	add	sl, r2
 800fe5a:	b2a4      	uxth	r4, r4
 800fe5c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fe60:	f84e 4b04 	str.w	r4, [lr], #4
 800fe64:	f851 4b04 	ldr.w	r4, [r1], #4
 800fe68:	f8be 2000 	ldrh.w	r2, [lr]
 800fe6c:	0c24      	lsrs	r4, r4, #16
 800fe6e:	fb09 2404 	mla	r4, r9, r4, r2
 800fe72:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fe76:	458c      	cmp	ip, r1
 800fe78:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fe7c:	d8e7      	bhi.n	800fe4e <__multiply+0xfe>
 800fe7e:	9a01      	ldr	r2, [sp, #4]
 800fe80:	50b4      	str	r4, [r6, r2]
 800fe82:	3604      	adds	r6, #4
 800fe84:	e7a3      	b.n	800fdce <__multiply+0x7e>
 800fe86:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d1a5      	bne.n	800fdda <__multiply+0x8a>
 800fe8e:	3f01      	subs	r7, #1
 800fe90:	e7a1      	b.n	800fdd6 <__multiply+0x86>
 800fe92:	bf00      	nop
 800fe94:	080128cb 	.word	0x080128cb
 800fe98:	080128dc 	.word	0x080128dc

0800fe9c <__pow5mult>:
 800fe9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fea0:	4615      	mov	r5, r2
 800fea2:	f012 0203 	ands.w	r2, r2, #3
 800fea6:	4606      	mov	r6, r0
 800fea8:	460f      	mov	r7, r1
 800feaa:	d007      	beq.n	800febc <__pow5mult+0x20>
 800feac:	4c25      	ldr	r4, [pc, #148]	; (800ff44 <__pow5mult+0xa8>)
 800feae:	3a01      	subs	r2, #1
 800feb0:	2300      	movs	r3, #0
 800feb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800feb6:	f7ff fe9b 	bl	800fbf0 <__multadd>
 800feba:	4607      	mov	r7, r0
 800febc:	10ad      	asrs	r5, r5, #2
 800febe:	d03d      	beq.n	800ff3c <__pow5mult+0xa0>
 800fec0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fec2:	b97c      	cbnz	r4, 800fee4 <__pow5mult+0x48>
 800fec4:	2010      	movs	r0, #16
 800fec6:	f7ff fe29 	bl	800fb1c <malloc>
 800feca:	4602      	mov	r2, r0
 800fecc:	6270      	str	r0, [r6, #36]	; 0x24
 800fece:	b928      	cbnz	r0, 800fedc <__pow5mult+0x40>
 800fed0:	4b1d      	ldr	r3, [pc, #116]	; (800ff48 <__pow5mult+0xac>)
 800fed2:	481e      	ldr	r0, [pc, #120]	; (800ff4c <__pow5mult+0xb0>)
 800fed4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fed8:	f000 fa70 	bl	80103bc <__assert_func>
 800fedc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fee0:	6004      	str	r4, [r0, #0]
 800fee2:	60c4      	str	r4, [r0, #12]
 800fee4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fee8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800feec:	b94c      	cbnz	r4, 800ff02 <__pow5mult+0x66>
 800feee:	f240 2171 	movw	r1, #625	; 0x271
 800fef2:	4630      	mov	r0, r6
 800fef4:	f7ff ff16 	bl	800fd24 <__i2b>
 800fef8:	2300      	movs	r3, #0
 800fefa:	f8c8 0008 	str.w	r0, [r8, #8]
 800fefe:	4604      	mov	r4, r0
 800ff00:	6003      	str	r3, [r0, #0]
 800ff02:	f04f 0900 	mov.w	r9, #0
 800ff06:	07eb      	lsls	r3, r5, #31
 800ff08:	d50a      	bpl.n	800ff20 <__pow5mult+0x84>
 800ff0a:	4639      	mov	r1, r7
 800ff0c:	4622      	mov	r2, r4
 800ff0e:	4630      	mov	r0, r6
 800ff10:	f7ff ff1e 	bl	800fd50 <__multiply>
 800ff14:	4639      	mov	r1, r7
 800ff16:	4680      	mov	r8, r0
 800ff18:	4630      	mov	r0, r6
 800ff1a:	f7ff fe47 	bl	800fbac <_Bfree>
 800ff1e:	4647      	mov	r7, r8
 800ff20:	106d      	asrs	r5, r5, #1
 800ff22:	d00b      	beq.n	800ff3c <__pow5mult+0xa0>
 800ff24:	6820      	ldr	r0, [r4, #0]
 800ff26:	b938      	cbnz	r0, 800ff38 <__pow5mult+0x9c>
 800ff28:	4622      	mov	r2, r4
 800ff2a:	4621      	mov	r1, r4
 800ff2c:	4630      	mov	r0, r6
 800ff2e:	f7ff ff0f 	bl	800fd50 <__multiply>
 800ff32:	6020      	str	r0, [r4, #0]
 800ff34:	f8c0 9000 	str.w	r9, [r0]
 800ff38:	4604      	mov	r4, r0
 800ff3a:	e7e4      	b.n	800ff06 <__pow5mult+0x6a>
 800ff3c:	4638      	mov	r0, r7
 800ff3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff42:	bf00      	nop
 800ff44:	08012a30 	.word	0x08012a30
 800ff48:	08012855 	.word	0x08012855
 800ff4c:	080128dc 	.word	0x080128dc

0800ff50 <__lshift>:
 800ff50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff54:	460c      	mov	r4, r1
 800ff56:	6849      	ldr	r1, [r1, #4]
 800ff58:	6923      	ldr	r3, [r4, #16]
 800ff5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ff5e:	68a3      	ldr	r3, [r4, #8]
 800ff60:	4607      	mov	r7, r0
 800ff62:	4691      	mov	r9, r2
 800ff64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ff68:	f108 0601 	add.w	r6, r8, #1
 800ff6c:	42b3      	cmp	r3, r6
 800ff6e:	db0b      	blt.n	800ff88 <__lshift+0x38>
 800ff70:	4638      	mov	r0, r7
 800ff72:	f7ff fddb 	bl	800fb2c <_Balloc>
 800ff76:	4605      	mov	r5, r0
 800ff78:	b948      	cbnz	r0, 800ff8e <__lshift+0x3e>
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	4b28      	ldr	r3, [pc, #160]	; (8010020 <__lshift+0xd0>)
 800ff7e:	4829      	ldr	r0, [pc, #164]	; (8010024 <__lshift+0xd4>)
 800ff80:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ff84:	f000 fa1a 	bl	80103bc <__assert_func>
 800ff88:	3101      	adds	r1, #1
 800ff8a:	005b      	lsls	r3, r3, #1
 800ff8c:	e7ee      	b.n	800ff6c <__lshift+0x1c>
 800ff8e:	2300      	movs	r3, #0
 800ff90:	f100 0114 	add.w	r1, r0, #20
 800ff94:	f100 0210 	add.w	r2, r0, #16
 800ff98:	4618      	mov	r0, r3
 800ff9a:	4553      	cmp	r3, sl
 800ff9c:	db33      	blt.n	8010006 <__lshift+0xb6>
 800ff9e:	6920      	ldr	r0, [r4, #16]
 800ffa0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ffa4:	f104 0314 	add.w	r3, r4, #20
 800ffa8:	f019 091f 	ands.w	r9, r9, #31
 800ffac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ffb0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ffb4:	d02b      	beq.n	801000e <__lshift+0xbe>
 800ffb6:	f1c9 0e20 	rsb	lr, r9, #32
 800ffba:	468a      	mov	sl, r1
 800ffbc:	2200      	movs	r2, #0
 800ffbe:	6818      	ldr	r0, [r3, #0]
 800ffc0:	fa00 f009 	lsl.w	r0, r0, r9
 800ffc4:	4302      	orrs	r2, r0
 800ffc6:	f84a 2b04 	str.w	r2, [sl], #4
 800ffca:	f853 2b04 	ldr.w	r2, [r3], #4
 800ffce:	459c      	cmp	ip, r3
 800ffd0:	fa22 f20e 	lsr.w	r2, r2, lr
 800ffd4:	d8f3      	bhi.n	800ffbe <__lshift+0x6e>
 800ffd6:	ebac 0304 	sub.w	r3, ip, r4
 800ffda:	3b15      	subs	r3, #21
 800ffdc:	f023 0303 	bic.w	r3, r3, #3
 800ffe0:	3304      	adds	r3, #4
 800ffe2:	f104 0015 	add.w	r0, r4, #21
 800ffe6:	4584      	cmp	ip, r0
 800ffe8:	bf38      	it	cc
 800ffea:	2304      	movcc	r3, #4
 800ffec:	50ca      	str	r2, [r1, r3]
 800ffee:	b10a      	cbz	r2, 800fff4 <__lshift+0xa4>
 800fff0:	f108 0602 	add.w	r6, r8, #2
 800fff4:	3e01      	subs	r6, #1
 800fff6:	4638      	mov	r0, r7
 800fff8:	612e      	str	r6, [r5, #16]
 800fffa:	4621      	mov	r1, r4
 800fffc:	f7ff fdd6 	bl	800fbac <_Bfree>
 8010000:	4628      	mov	r0, r5
 8010002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010006:	f842 0f04 	str.w	r0, [r2, #4]!
 801000a:	3301      	adds	r3, #1
 801000c:	e7c5      	b.n	800ff9a <__lshift+0x4a>
 801000e:	3904      	subs	r1, #4
 8010010:	f853 2b04 	ldr.w	r2, [r3], #4
 8010014:	f841 2f04 	str.w	r2, [r1, #4]!
 8010018:	459c      	cmp	ip, r3
 801001a:	d8f9      	bhi.n	8010010 <__lshift+0xc0>
 801001c:	e7ea      	b.n	800fff4 <__lshift+0xa4>
 801001e:	bf00      	nop
 8010020:	080128cb 	.word	0x080128cb
 8010024:	080128dc 	.word	0x080128dc

08010028 <__mcmp>:
 8010028:	b530      	push	{r4, r5, lr}
 801002a:	6902      	ldr	r2, [r0, #16]
 801002c:	690c      	ldr	r4, [r1, #16]
 801002e:	1b12      	subs	r2, r2, r4
 8010030:	d10e      	bne.n	8010050 <__mcmp+0x28>
 8010032:	f100 0314 	add.w	r3, r0, #20
 8010036:	3114      	adds	r1, #20
 8010038:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801003c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010040:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010044:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010048:	42a5      	cmp	r5, r4
 801004a:	d003      	beq.n	8010054 <__mcmp+0x2c>
 801004c:	d305      	bcc.n	801005a <__mcmp+0x32>
 801004e:	2201      	movs	r2, #1
 8010050:	4610      	mov	r0, r2
 8010052:	bd30      	pop	{r4, r5, pc}
 8010054:	4283      	cmp	r3, r0
 8010056:	d3f3      	bcc.n	8010040 <__mcmp+0x18>
 8010058:	e7fa      	b.n	8010050 <__mcmp+0x28>
 801005a:	f04f 32ff 	mov.w	r2, #4294967295
 801005e:	e7f7      	b.n	8010050 <__mcmp+0x28>

08010060 <__mdiff>:
 8010060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010064:	460c      	mov	r4, r1
 8010066:	4606      	mov	r6, r0
 8010068:	4611      	mov	r1, r2
 801006a:	4620      	mov	r0, r4
 801006c:	4617      	mov	r7, r2
 801006e:	f7ff ffdb 	bl	8010028 <__mcmp>
 8010072:	1e05      	subs	r5, r0, #0
 8010074:	d110      	bne.n	8010098 <__mdiff+0x38>
 8010076:	4629      	mov	r1, r5
 8010078:	4630      	mov	r0, r6
 801007a:	f7ff fd57 	bl	800fb2c <_Balloc>
 801007e:	b930      	cbnz	r0, 801008e <__mdiff+0x2e>
 8010080:	4b39      	ldr	r3, [pc, #228]	; (8010168 <__mdiff+0x108>)
 8010082:	4602      	mov	r2, r0
 8010084:	f240 2132 	movw	r1, #562	; 0x232
 8010088:	4838      	ldr	r0, [pc, #224]	; (801016c <__mdiff+0x10c>)
 801008a:	f000 f997 	bl	80103bc <__assert_func>
 801008e:	2301      	movs	r3, #1
 8010090:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010094:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010098:	bfa4      	itt	ge
 801009a:	463b      	movge	r3, r7
 801009c:	4627      	movge	r7, r4
 801009e:	4630      	mov	r0, r6
 80100a0:	6879      	ldr	r1, [r7, #4]
 80100a2:	bfa6      	itte	ge
 80100a4:	461c      	movge	r4, r3
 80100a6:	2500      	movge	r5, #0
 80100a8:	2501      	movlt	r5, #1
 80100aa:	f7ff fd3f 	bl	800fb2c <_Balloc>
 80100ae:	b920      	cbnz	r0, 80100ba <__mdiff+0x5a>
 80100b0:	4b2d      	ldr	r3, [pc, #180]	; (8010168 <__mdiff+0x108>)
 80100b2:	4602      	mov	r2, r0
 80100b4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80100b8:	e7e6      	b.n	8010088 <__mdiff+0x28>
 80100ba:	693e      	ldr	r6, [r7, #16]
 80100bc:	60c5      	str	r5, [r0, #12]
 80100be:	6925      	ldr	r5, [r4, #16]
 80100c0:	f107 0114 	add.w	r1, r7, #20
 80100c4:	f104 0914 	add.w	r9, r4, #20
 80100c8:	f100 0e14 	add.w	lr, r0, #20
 80100cc:	f107 0210 	add.w	r2, r7, #16
 80100d0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80100d4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80100d8:	46f2      	mov	sl, lr
 80100da:	2700      	movs	r7, #0
 80100dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80100e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80100e4:	fa1f f883 	uxth.w	r8, r3
 80100e8:	fa17 f78b 	uxtah	r7, r7, fp
 80100ec:	0c1b      	lsrs	r3, r3, #16
 80100ee:	eba7 0808 	sub.w	r8, r7, r8
 80100f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80100f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80100fa:	fa1f f888 	uxth.w	r8, r8
 80100fe:	141f      	asrs	r7, r3, #16
 8010100:	454d      	cmp	r5, r9
 8010102:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010106:	f84a 3b04 	str.w	r3, [sl], #4
 801010a:	d8e7      	bhi.n	80100dc <__mdiff+0x7c>
 801010c:	1b2b      	subs	r3, r5, r4
 801010e:	3b15      	subs	r3, #21
 8010110:	f023 0303 	bic.w	r3, r3, #3
 8010114:	3304      	adds	r3, #4
 8010116:	3415      	adds	r4, #21
 8010118:	42a5      	cmp	r5, r4
 801011a:	bf38      	it	cc
 801011c:	2304      	movcc	r3, #4
 801011e:	4419      	add	r1, r3
 8010120:	4473      	add	r3, lr
 8010122:	469e      	mov	lr, r3
 8010124:	460d      	mov	r5, r1
 8010126:	4565      	cmp	r5, ip
 8010128:	d30e      	bcc.n	8010148 <__mdiff+0xe8>
 801012a:	f10c 0203 	add.w	r2, ip, #3
 801012e:	1a52      	subs	r2, r2, r1
 8010130:	f022 0203 	bic.w	r2, r2, #3
 8010134:	3903      	subs	r1, #3
 8010136:	458c      	cmp	ip, r1
 8010138:	bf38      	it	cc
 801013a:	2200      	movcc	r2, #0
 801013c:	441a      	add	r2, r3
 801013e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010142:	b17b      	cbz	r3, 8010164 <__mdiff+0x104>
 8010144:	6106      	str	r6, [r0, #16]
 8010146:	e7a5      	b.n	8010094 <__mdiff+0x34>
 8010148:	f855 8b04 	ldr.w	r8, [r5], #4
 801014c:	fa17 f488 	uxtah	r4, r7, r8
 8010150:	1422      	asrs	r2, r4, #16
 8010152:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8010156:	b2a4      	uxth	r4, r4
 8010158:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801015c:	f84e 4b04 	str.w	r4, [lr], #4
 8010160:	1417      	asrs	r7, r2, #16
 8010162:	e7e0      	b.n	8010126 <__mdiff+0xc6>
 8010164:	3e01      	subs	r6, #1
 8010166:	e7ea      	b.n	801013e <__mdiff+0xde>
 8010168:	080128cb 	.word	0x080128cb
 801016c:	080128dc 	.word	0x080128dc

08010170 <__d2b>:
 8010170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010174:	4689      	mov	r9, r1
 8010176:	2101      	movs	r1, #1
 8010178:	ec57 6b10 	vmov	r6, r7, d0
 801017c:	4690      	mov	r8, r2
 801017e:	f7ff fcd5 	bl	800fb2c <_Balloc>
 8010182:	4604      	mov	r4, r0
 8010184:	b930      	cbnz	r0, 8010194 <__d2b+0x24>
 8010186:	4602      	mov	r2, r0
 8010188:	4b25      	ldr	r3, [pc, #148]	; (8010220 <__d2b+0xb0>)
 801018a:	4826      	ldr	r0, [pc, #152]	; (8010224 <__d2b+0xb4>)
 801018c:	f240 310a 	movw	r1, #778	; 0x30a
 8010190:	f000 f914 	bl	80103bc <__assert_func>
 8010194:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010198:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801019c:	bb35      	cbnz	r5, 80101ec <__d2b+0x7c>
 801019e:	2e00      	cmp	r6, #0
 80101a0:	9301      	str	r3, [sp, #4]
 80101a2:	d028      	beq.n	80101f6 <__d2b+0x86>
 80101a4:	4668      	mov	r0, sp
 80101a6:	9600      	str	r6, [sp, #0]
 80101a8:	f7ff fd8c 	bl	800fcc4 <__lo0bits>
 80101ac:	9900      	ldr	r1, [sp, #0]
 80101ae:	b300      	cbz	r0, 80101f2 <__d2b+0x82>
 80101b0:	9a01      	ldr	r2, [sp, #4]
 80101b2:	f1c0 0320 	rsb	r3, r0, #32
 80101b6:	fa02 f303 	lsl.w	r3, r2, r3
 80101ba:	430b      	orrs	r3, r1
 80101bc:	40c2      	lsrs	r2, r0
 80101be:	6163      	str	r3, [r4, #20]
 80101c0:	9201      	str	r2, [sp, #4]
 80101c2:	9b01      	ldr	r3, [sp, #4]
 80101c4:	61a3      	str	r3, [r4, #24]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	bf14      	ite	ne
 80101ca:	2202      	movne	r2, #2
 80101cc:	2201      	moveq	r2, #1
 80101ce:	6122      	str	r2, [r4, #16]
 80101d0:	b1d5      	cbz	r5, 8010208 <__d2b+0x98>
 80101d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80101d6:	4405      	add	r5, r0
 80101d8:	f8c9 5000 	str.w	r5, [r9]
 80101dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80101e0:	f8c8 0000 	str.w	r0, [r8]
 80101e4:	4620      	mov	r0, r4
 80101e6:	b003      	add	sp, #12
 80101e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80101ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80101f0:	e7d5      	b.n	801019e <__d2b+0x2e>
 80101f2:	6161      	str	r1, [r4, #20]
 80101f4:	e7e5      	b.n	80101c2 <__d2b+0x52>
 80101f6:	a801      	add	r0, sp, #4
 80101f8:	f7ff fd64 	bl	800fcc4 <__lo0bits>
 80101fc:	9b01      	ldr	r3, [sp, #4]
 80101fe:	6163      	str	r3, [r4, #20]
 8010200:	2201      	movs	r2, #1
 8010202:	6122      	str	r2, [r4, #16]
 8010204:	3020      	adds	r0, #32
 8010206:	e7e3      	b.n	80101d0 <__d2b+0x60>
 8010208:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801020c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010210:	f8c9 0000 	str.w	r0, [r9]
 8010214:	6918      	ldr	r0, [r3, #16]
 8010216:	f7ff fd35 	bl	800fc84 <__hi0bits>
 801021a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801021e:	e7df      	b.n	80101e0 <__d2b+0x70>
 8010220:	080128cb 	.word	0x080128cb
 8010224:	080128dc 	.word	0x080128dc

08010228 <_calloc_r>:
 8010228:	b513      	push	{r0, r1, r4, lr}
 801022a:	434a      	muls	r2, r1
 801022c:	4611      	mov	r1, r2
 801022e:	9201      	str	r2, [sp, #4]
 8010230:	f000 f85a 	bl	80102e8 <_malloc_r>
 8010234:	4604      	mov	r4, r0
 8010236:	b118      	cbz	r0, 8010240 <_calloc_r+0x18>
 8010238:	9a01      	ldr	r2, [sp, #4]
 801023a:	2100      	movs	r1, #0
 801023c:	f7fe fa10 	bl	800e660 <memset>
 8010240:	4620      	mov	r0, r4
 8010242:	b002      	add	sp, #8
 8010244:	bd10      	pop	{r4, pc}
	...

08010248 <_free_r>:
 8010248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801024a:	2900      	cmp	r1, #0
 801024c:	d048      	beq.n	80102e0 <_free_r+0x98>
 801024e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010252:	9001      	str	r0, [sp, #4]
 8010254:	2b00      	cmp	r3, #0
 8010256:	f1a1 0404 	sub.w	r4, r1, #4
 801025a:	bfb8      	it	lt
 801025c:	18e4      	addlt	r4, r4, r3
 801025e:	f000 f8ef 	bl	8010440 <__malloc_lock>
 8010262:	4a20      	ldr	r2, [pc, #128]	; (80102e4 <_free_r+0x9c>)
 8010264:	9801      	ldr	r0, [sp, #4]
 8010266:	6813      	ldr	r3, [r2, #0]
 8010268:	4615      	mov	r5, r2
 801026a:	b933      	cbnz	r3, 801027a <_free_r+0x32>
 801026c:	6063      	str	r3, [r4, #4]
 801026e:	6014      	str	r4, [r2, #0]
 8010270:	b003      	add	sp, #12
 8010272:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010276:	f000 b8e9 	b.w	801044c <__malloc_unlock>
 801027a:	42a3      	cmp	r3, r4
 801027c:	d90b      	bls.n	8010296 <_free_r+0x4e>
 801027e:	6821      	ldr	r1, [r4, #0]
 8010280:	1862      	adds	r2, r4, r1
 8010282:	4293      	cmp	r3, r2
 8010284:	bf04      	itt	eq
 8010286:	681a      	ldreq	r2, [r3, #0]
 8010288:	685b      	ldreq	r3, [r3, #4]
 801028a:	6063      	str	r3, [r4, #4]
 801028c:	bf04      	itt	eq
 801028e:	1852      	addeq	r2, r2, r1
 8010290:	6022      	streq	r2, [r4, #0]
 8010292:	602c      	str	r4, [r5, #0]
 8010294:	e7ec      	b.n	8010270 <_free_r+0x28>
 8010296:	461a      	mov	r2, r3
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	b10b      	cbz	r3, 80102a0 <_free_r+0x58>
 801029c:	42a3      	cmp	r3, r4
 801029e:	d9fa      	bls.n	8010296 <_free_r+0x4e>
 80102a0:	6811      	ldr	r1, [r2, #0]
 80102a2:	1855      	adds	r5, r2, r1
 80102a4:	42a5      	cmp	r5, r4
 80102a6:	d10b      	bne.n	80102c0 <_free_r+0x78>
 80102a8:	6824      	ldr	r4, [r4, #0]
 80102aa:	4421      	add	r1, r4
 80102ac:	1854      	adds	r4, r2, r1
 80102ae:	42a3      	cmp	r3, r4
 80102b0:	6011      	str	r1, [r2, #0]
 80102b2:	d1dd      	bne.n	8010270 <_free_r+0x28>
 80102b4:	681c      	ldr	r4, [r3, #0]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	6053      	str	r3, [r2, #4]
 80102ba:	4421      	add	r1, r4
 80102bc:	6011      	str	r1, [r2, #0]
 80102be:	e7d7      	b.n	8010270 <_free_r+0x28>
 80102c0:	d902      	bls.n	80102c8 <_free_r+0x80>
 80102c2:	230c      	movs	r3, #12
 80102c4:	6003      	str	r3, [r0, #0]
 80102c6:	e7d3      	b.n	8010270 <_free_r+0x28>
 80102c8:	6825      	ldr	r5, [r4, #0]
 80102ca:	1961      	adds	r1, r4, r5
 80102cc:	428b      	cmp	r3, r1
 80102ce:	bf04      	itt	eq
 80102d0:	6819      	ldreq	r1, [r3, #0]
 80102d2:	685b      	ldreq	r3, [r3, #4]
 80102d4:	6063      	str	r3, [r4, #4]
 80102d6:	bf04      	itt	eq
 80102d8:	1949      	addeq	r1, r1, r5
 80102da:	6021      	streq	r1, [r4, #0]
 80102dc:	6054      	str	r4, [r2, #4]
 80102de:	e7c7      	b.n	8010270 <_free_r+0x28>
 80102e0:	b003      	add	sp, #12
 80102e2:	bd30      	pop	{r4, r5, pc}
 80102e4:	24000520 	.word	0x24000520

080102e8 <_malloc_r>:
 80102e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ea:	1ccd      	adds	r5, r1, #3
 80102ec:	f025 0503 	bic.w	r5, r5, #3
 80102f0:	3508      	adds	r5, #8
 80102f2:	2d0c      	cmp	r5, #12
 80102f4:	bf38      	it	cc
 80102f6:	250c      	movcc	r5, #12
 80102f8:	2d00      	cmp	r5, #0
 80102fa:	4606      	mov	r6, r0
 80102fc:	db01      	blt.n	8010302 <_malloc_r+0x1a>
 80102fe:	42a9      	cmp	r1, r5
 8010300:	d903      	bls.n	801030a <_malloc_r+0x22>
 8010302:	230c      	movs	r3, #12
 8010304:	6033      	str	r3, [r6, #0]
 8010306:	2000      	movs	r0, #0
 8010308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801030a:	f000 f899 	bl	8010440 <__malloc_lock>
 801030e:	4921      	ldr	r1, [pc, #132]	; (8010394 <_malloc_r+0xac>)
 8010310:	680a      	ldr	r2, [r1, #0]
 8010312:	4614      	mov	r4, r2
 8010314:	b99c      	cbnz	r4, 801033e <_malloc_r+0x56>
 8010316:	4f20      	ldr	r7, [pc, #128]	; (8010398 <_malloc_r+0xb0>)
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	b923      	cbnz	r3, 8010326 <_malloc_r+0x3e>
 801031c:	4621      	mov	r1, r4
 801031e:	4630      	mov	r0, r6
 8010320:	f000 f83c 	bl	801039c <_sbrk_r>
 8010324:	6038      	str	r0, [r7, #0]
 8010326:	4629      	mov	r1, r5
 8010328:	4630      	mov	r0, r6
 801032a:	f000 f837 	bl	801039c <_sbrk_r>
 801032e:	1c43      	adds	r3, r0, #1
 8010330:	d123      	bne.n	801037a <_malloc_r+0x92>
 8010332:	230c      	movs	r3, #12
 8010334:	6033      	str	r3, [r6, #0]
 8010336:	4630      	mov	r0, r6
 8010338:	f000 f888 	bl	801044c <__malloc_unlock>
 801033c:	e7e3      	b.n	8010306 <_malloc_r+0x1e>
 801033e:	6823      	ldr	r3, [r4, #0]
 8010340:	1b5b      	subs	r3, r3, r5
 8010342:	d417      	bmi.n	8010374 <_malloc_r+0x8c>
 8010344:	2b0b      	cmp	r3, #11
 8010346:	d903      	bls.n	8010350 <_malloc_r+0x68>
 8010348:	6023      	str	r3, [r4, #0]
 801034a:	441c      	add	r4, r3
 801034c:	6025      	str	r5, [r4, #0]
 801034e:	e004      	b.n	801035a <_malloc_r+0x72>
 8010350:	6863      	ldr	r3, [r4, #4]
 8010352:	42a2      	cmp	r2, r4
 8010354:	bf0c      	ite	eq
 8010356:	600b      	streq	r3, [r1, #0]
 8010358:	6053      	strne	r3, [r2, #4]
 801035a:	4630      	mov	r0, r6
 801035c:	f000 f876 	bl	801044c <__malloc_unlock>
 8010360:	f104 000b 	add.w	r0, r4, #11
 8010364:	1d23      	adds	r3, r4, #4
 8010366:	f020 0007 	bic.w	r0, r0, #7
 801036a:	1ac2      	subs	r2, r0, r3
 801036c:	d0cc      	beq.n	8010308 <_malloc_r+0x20>
 801036e:	1a1b      	subs	r3, r3, r0
 8010370:	50a3      	str	r3, [r4, r2]
 8010372:	e7c9      	b.n	8010308 <_malloc_r+0x20>
 8010374:	4622      	mov	r2, r4
 8010376:	6864      	ldr	r4, [r4, #4]
 8010378:	e7cc      	b.n	8010314 <_malloc_r+0x2c>
 801037a:	1cc4      	adds	r4, r0, #3
 801037c:	f024 0403 	bic.w	r4, r4, #3
 8010380:	42a0      	cmp	r0, r4
 8010382:	d0e3      	beq.n	801034c <_malloc_r+0x64>
 8010384:	1a21      	subs	r1, r4, r0
 8010386:	4630      	mov	r0, r6
 8010388:	f000 f808 	bl	801039c <_sbrk_r>
 801038c:	3001      	adds	r0, #1
 801038e:	d1dd      	bne.n	801034c <_malloc_r+0x64>
 8010390:	e7cf      	b.n	8010332 <_malloc_r+0x4a>
 8010392:	bf00      	nop
 8010394:	24000520 	.word	0x24000520
 8010398:	24000524 	.word	0x24000524

0801039c <_sbrk_r>:
 801039c:	b538      	push	{r3, r4, r5, lr}
 801039e:	4d06      	ldr	r5, [pc, #24]	; (80103b8 <_sbrk_r+0x1c>)
 80103a0:	2300      	movs	r3, #0
 80103a2:	4604      	mov	r4, r0
 80103a4:	4608      	mov	r0, r1
 80103a6:	602b      	str	r3, [r5, #0]
 80103a8:	f7f2 feae 	bl	8003108 <_sbrk>
 80103ac:	1c43      	adds	r3, r0, #1
 80103ae:	d102      	bne.n	80103b6 <_sbrk_r+0x1a>
 80103b0:	682b      	ldr	r3, [r5, #0]
 80103b2:	b103      	cbz	r3, 80103b6 <_sbrk_r+0x1a>
 80103b4:	6023      	str	r3, [r4, #0]
 80103b6:	bd38      	pop	{r3, r4, r5, pc}
 80103b8:	24000d24 	.word	0x24000d24

080103bc <__assert_func>:
 80103bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80103be:	4614      	mov	r4, r2
 80103c0:	461a      	mov	r2, r3
 80103c2:	4b09      	ldr	r3, [pc, #36]	; (80103e8 <__assert_func+0x2c>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	4605      	mov	r5, r0
 80103c8:	68d8      	ldr	r0, [r3, #12]
 80103ca:	b14c      	cbz	r4, 80103e0 <__assert_func+0x24>
 80103cc:	4b07      	ldr	r3, [pc, #28]	; (80103ec <__assert_func+0x30>)
 80103ce:	9100      	str	r1, [sp, #0]
 80103d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80103d4:	4906      	ldr	r1, [pc, #24]	; (80103f0 <__assert_func+0x34>)
 80103d6:	462b      	mov	r3, r5
 80103d8:	f000 f80e 	bl	80103f8 <fiprintf>
 80103dc:	f000 fa64 	bl	80108a8 <abort>
 80103e0:	4b04      	ldr	r3, [pc, #16]	; (80103f4 <__assert_func+0x38>)
 80103e2:	461c      	mov	r4, r3
 80103e4:	e7f3      	b.n	80103ce <__assert_func+0x12>
 80103e6:	bf00      	nop
 80103e8:	24000028 	.word	0x24000028
 80103ec:	08012a3c 	.word	0x08012a3c
 80103f0:	08012a49 	.word	0x08012a49
 80103f4:	08012a77 	.word	0x08012a77

080103f8 <fiprintf>:
 80103f8:	b40e      	push	{r1, r2, r3}
 80103fa:	b503      	push	{r0, r1, lr}
 80103fc:	4601      	mov	r1, r0
 80103fe:	ab03      	add	r3, sp, #12
 8010400:	4805      	ldr	r0, [pc, #20]	; (8010418 <fiprintf+0x20>)
 8010402:	f853 2b04 	ldr.w	r2, [r3], #4
 8010406:	6800      	ldr	r0, [r0, #0]
 8010408:	9301      	str	r3, [sp, #4]
 801040a:	f000 f84f 	bl	80104ac <_vfiprintf_r>
 801040e:	b002      	add	sp, #8
 8010410:	f85d eb04 	ldr.w	lr, [sp], #4
 8010414:	b003      	add	sp, #12
 8010416:	4770      	bx	lr
 8010418:	24000028 	.word	0x24000028

0801041c <__ascii_mbtowc>:
 801041c:	b082      	sub	sp, #8
 801041e:	b901      	cbnz	r1, 8010422 <__ascii_mbtowc+0x6>
 8010420:	a901      	add	r1, sp, #4
 8010422:	b142      	cbz	r2, 8010436 <__ascii_mbtowc+0x1a>
 8010424:	b14b      	cbz	r3, 801043a <__ascii_mbtowc+0x1e>
 8010426:	7813      	ldrb	r3, [r2, #0]
 8010428:	600b      	str	r3, [r1, #0]
 801042a:	7812      	ldrb	r2, [r2, #0]
 801042c:	1e10      	subs	r0, r2, #0
 801042e:	bf18      	it	ne
 8010430:	2001      	movne	r0, #1
 8010432:	b002      	add	sp, #8
 8010434:	4770      	bx	lr
 8010436:	4610      	mov	r0, r2
 8010438:	e7fb      	b.n	8010432 <__ascii_mbtowc+0x16>
 801043a:	f06f 0001 	mvn.w	r0, #1
 801043e:	e7f8      	b.n	8010432 <__ascii_mbtowc+0x16>

08010440 <__malloc_lock>:
 8010440:	4801      	ldr	r0, [pc, #4]	; (8010448 <__malloc_lock+0x8>)
 8010442:	f000 bbf1 	b.w	8010c28 <__retarget_lock_acquire_recursive>
 8010446:	bf00      	nop
 8010448:	24000d2c 	.word	0x24000d2c

0801044c <__malloc_unlock>:
 801044c:	4801      	ldr	r0, [pc, #4]	; (8010454 <__malloc_unlock+0x8>)
 801044e:	f000 bbec 	b.w	8010c2a <__retarget_lock_release_recursive>
 8010452:	bf00      	nop
 8010454:	24000d2c 	.word	0x24000d2c

08010458 <__sfputc_r>:
 8010458:	6893      	ldr	r3, [r2, #8]
 801045a:	3b01      	subs	r3, #1
 801045c:	2b00      	cmp	r3, #0
 801045e:	b410      	push	{r4}
 8010460:	6093      	str	r3, [r2, #8]
 8010462:	da08      	bge.n	8010476 <__sfputc_r+0x1e>
 8010464:	6994      	ldr	r4, [r2, #24]
 8010466:	42a3      	cmp	r3, r4
 8010468:	db01      	blt.n	801046e <__sfputc_r+0x16>
 801046a:	290a      	cmp	r1, #10
 801046c:	d103      	bne.n	8010476 <__sfputc_r+0x1e>
 801046e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010472:	f000 b94b 	b.w	801070c <__swbuf_r>
 8010476:	6813      	ldr	r3, [r2, #0]
 8010478:	1c58      	adds	r0, r3, #1
 801047a:	6010      	str	r0, [r2, #0]
 801047c:	7019      	strb	r1, [r3, #0]
 801047e:	4608      	mov	r0, r1
 8010480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010484:	4770      	bx	lr

08010486 <__sfputs_r>:
 8010486:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010488:	4606      	mov	r6, r0
 801048a:	460f      	mov	r7, r1
 801048c:	4614      	mov	r4, r2
 801048e:	18d5      	adds	r5, r2, r3
 8010490:	42ac      	cmp	r4, r5
 8010492:	d101      	bne.n	8010498 <__sfputs_r+0x12>
 8010494:	2000      	movs	r0, #0
 8010496:	e007      	b.n	80104a8 <__sfputs_r+0x22>
 8010498:	f814 1b01 	ldrb.w	r1, [r4], #1
 801049c:	463a      	mov	r2, r7
 801049e:	4630      	mov	r0, r6
 80104a0:	f7ff ffda 	bl	8010458 <__sfputc_r>
 80104a4:	1c43      	adds	r3, r0, #1
 80104a6:	d1f3      	bne.n	8010490 <__sfputs_r+0xa>
 80104a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080104ac <_vfiprintf_r>:
 80104ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104b0:	460d      	mov	r5, r1
 80104b2:	b09d      	sub	sp, #116	; 0x74
 80104b4:	4614      	mov	r4, r2
 80104b6:	4698      	mov	r8, r3
 80104b8:	4606      	mov	r6, r0
 80104ba:	b118      	cbz	r0, 80104c4 <_vfiprintf_r+0x18>
 80104bc:	6983      	ldr	r3, [r0, #24]
 80104be:	b90b      	cbnz	r3, 80104c4 <_vfiprintf_r+0x18>
 80104c0:	f000 fb14 	bl	8010aec <__sinit>
 80104c4:	4b89      	ldr	r3, [pc, #548]	; (80106ec <_vfiprintf_r+0x240>)
 80104c6:	429d      	cmp	r5, r3
 80104c8:	d11b      	bne.n	8010502 <_vfiprintf_r+0x56>
 80104ca:	6875      	ldr	r5, [r6, #4]
 80104cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104ce:	07d9      	lsls	r1, r3, #31
 80104d0:	d405      	bmi.n	80104de <_vfiprintf_r+0x32>
 80104d2:	89ab      	ldrh	r3, [r5, #12]
 80104d4:	059a      	lsls	r2, r3, #22
 80104d6:	d402      	bmi.n	80104de <_vfiprintf_r+0x32>
 80104d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104da:	f000 fba5 	bl	8010c28 <__retarget_lock_acquire_recursive>
 80104de:	89ab      	ldrh	r3, [r5, #12]
 80104e0:	071b      	lsls	r3, r3, #28
 80104e2:	d501      	bpl.n	80104e8 <_vfiprintf_r+0x3c>
 80104e4:	692b      	ldr	r3, [r5, #16]
 80104e6:	b9eb      	cbnz	r3, 8010524 <_vfiprintf_r+0x78>
 80104e8:	4629      	mov	r1, r5
 80104ea:	4630      	mov	r0, r6
 80104ec:	f000 f96e 	bl	80107cc <__swsetup_r>
 80104f0:	b1c0      	cbz	r0, 8010524 <_vfiprintf_r+0x78>
 80104f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104f4:	07dc      	lsls	r4, r3, #31
 80104f6:	d50e      	bpl.n	8010516 <_vfiprintf_r+0x6a>
 80104f8:	f04f 30ff 	mov.w	r0, #4294967295
 80104fc:	b01d      	add	sp, #116	; 0x74
 80104fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010502:	4b7b      	ldr	r3, [pc, #492]	; (80106f0 <_vfiprintf_r+0x244>)
 8010504:	429d      	cmp	r5, r3
 8010506:	d101      	bne.n	801050c <_vfiprintf_r+0x60>
 8010508:	68b5      	ldr	r5, [r6, #8]
 801050a:	e7df      	b.n	80104cc <_vfiprintf_r+0x20>
 801050c:	4b79      	ldr	r3, [pc, #484]	; (80106f4 <_vfiprintf_r+0x248>)
 801050e:	429d      	cmp	r5, r3
 8010510:	bf08      	it	eq
 8010512:	68f5      	ldreq	r5, [r6, #12]
 8010514:	e7da      	b.n	80104cc <_vfiprintf_r+0x20>
 8010516:	89ab      	ldrh	r3, [r5, #12]
 8010518:	0598      	lsls	r0, r3, #22
 801051a:	d4ed      	bmi.n	80104f8 <_vfiprintf_r+0x4c>
 801051c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801051e:	f000 fb84 	bl	8010c2a <__retarget_lock_release_recursive>
 8010522:	e7e9      	b.n	80104f8 <_vfiprintf_r+0x4c>
 8010524:	2300      	movs	r3, #0
 8010526:	9309      	str	r3, [sp, #36]	; 0x24
 8010528:	2320      	movs	r3, #32
 801052a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801052e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010532:	2330      	movs	r3, #48	; 0x30
 8010534:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80106f8 <_vfiprintf_r+0x24c>
 8010538:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801053c:	f04f 0901 	mov.w	r9, #1
 8010540:	4623      	mov	r3, r4
 8010542:	469a      	mov	sl, r3
 8010544:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010548:	b10a      	cbz	r2, 801054e <_vfiprintf_r+0xa2>
 801054a:	2a25      	cmp	r2, #37	; 0x25
 801054c:	d1f9      	bne.n	8010542 <_vfiprintf_r+0x96>
 801054e:	ebba 0b04 	subs.w	fp, sl, r4
 8010552:	d00b      	beq.n	801056c <_vfiprintf_r+0xc0>
 8010554:	465b      	mov	r3, fp
 8010556:	4622      	mov	r2, r4
 8010558:	4629      	mov	r1, r5
 801055a:	4630      	mov	r0, r6
 801055c:	f7ff ff93 	bl	8010486 <__sfputs_r>
 8010560:	3001      	adds	r0, #1
 8010562:	f000 80aa 	beq.w	80106ba <_vfiprintf_r+0x20e>
 8010566:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010568:	445a      	add	r2, fp
 801056a:	9209      	str	r2, [sp, #36]	; 0x24
 801056c:	f89a 3000 	ldrb.w	r3, [sl]
 8010570:	2b00      	cmp	r3, #0
 8010572:	f000 80a2 	beq.w	80106ba <_vfiprintf_r+0x20e>
 8010576:	2300      	movs	r3, #0
 8010578:	f04f 32ff 	mov.w	r2, #4294967295
 801057c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010580:	f10a 0a01 	add.w	sl, sl, #1
 8010584:	9304      	str	r3, [sp, #16]
 8010586:	9307      	str	r3, [sp, #28]
 8010588:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801058c:	931a      	str	r3, [sp, #104]	; 0x68
 801058e:	4654      	mov	r4, sl
 8010590:	2205      	movs	r2, #5
 8010592:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010596:	4858      	ldr	r0, [pc, #352]	; (80106f8 <_vfiprintf_r+0x24c>)
 8010598:	f7ef feaa 	bl	80002f0 <memchr>
 801059c:	9a04      	ldr	r2, [sp, #16]
 801059e:	b9d8      	cbnz	r0, 80105d8 <_vfiprintf_r+0x12c>
 80105a0:	06d1      	lsls	r1, r2, #27
 80105a2:	bf44      	itt	mi
 80105a4:	2320      	movmi	r3, #32
 80105a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105aa:	0713      	lsls	r3, r2, #28
 80105ac:	bf44      	itt	mi
 80105ae:	232b      	movmi	r3, #43	; 0x2b
 80105b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105b4:	f89a 3000 	ldrb.w	r3, [sl]
 80105b8:	2b2a      	cmp	r3, #42	; 0x2a
 80105ba:	d015      	beq.n	80105e8 <_vfiprintf_r+0x13c>
 80105bc:	9a07      	ldr	r2, [sp, #28]
 80105be:	4654      	mov	r4, sl
 80105c0:	2000      	movs	r0, #0
 80105c2:	f04f 0c0a 	mov.w	ip, #10
 80105c6:	4621      	mov	r1, r4
 80105c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105cc:	3b30      	subs	r3, #48	; 0x30
 80105ce:	2b09      	cmp	r3, #9
 80105d0:	d94e      	bls.n	8010670 <_vfiprintf_r+0x1c4>
 80105d2:	b1b0      	cbz	r0, 8010602 <_vfiprintf_r+0x156>
 80105d4:	9207      	str	r2, [sp, #28]
 80105d6:	e014      	b.n	8010602 <_vfiprintf_r+0x156>
 80105d8:	eba0 0308 	sub.w	r3, r0, r8
 80105dc:	fa09 f303 	lsl.w	r3, r9, r3
 80105e0:	4313      	orrs	r3, r2
 80105e2:	9304      	str	r3, [sp, #16]
 80105e4:	46a2      	mov	sl, r4
 80105e6:	e7d2      	b.n	801058e <_vfiprintf_r+0xe2>
 80105e8:	9b03      	ldr	r3, [sp, #12]
 80105ea:	1d19      	adds	r1, r3, #4
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	9103      	str	r1, [sp, #12]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	bfbb      	ittet	lt
 80105f4:	425b      	neglt	r3, r3
 80105f6:	f042 0202 	orrlt.w	r2, r2, #2
 80105fa:	9307      	strge	r3, [sp, #28]
 80105fc:	9307      	strlt	r3, [sp, #28]
 80105fe:	bfb8      	it	lt
 8010600:	9204      	strlt	r2, [sp, #16]
 8010602:	7823      	ldrb	r3, [r4, #0]
 8010604:	2b2e      	cmp	r3, #46	; 0x2e
 8010606:	d10c      	bne.n	8010622 <_vfiprintf_r+0x176>
 8010608:	7863      	ldrb	r3, [r4, #1]
 801060a:	2b2a      	cmp	r3, #42	; 0x2a
 801060c:	d135      	bne.n	801067a <_vfiprintf_r+0x1ce>
 801060e:	9b03      	ldr	r3, [sp, #12]
 8010610:	1d1a      	adds	r2, r3, #4
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	9203      	str	r2, [sp, #12]
 8010616:	2b00      	cmp	r3, #0
 8010618:	bfb8      	it	lt
 801061a:	f04f 33ff 	movlt.w	r3, #4294967295
 801061e:	3402      	adds	r4, #2
 8010620:	9305      	str	r3, [sp, #20]
 8010622:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010708 <_vfiprintf_r+0x25c>
 8010626:	7821      	ldrb	r1, [r4, #0]
 8010628:	2203      	movs	r2, #3
 801062a:	4650      	mov	r0, sl
 801062c:	f7ef fe60 	bl	80002f0 <memchr>
 8010630:	b140      	cbz	r0, 8010644 <_vfiprintf_r+0x198>
 8010632:	2340      	movs	r3, #64	; 0x40
 8010634:	eba0 000a 	sub.w	r0, r0, sl
 8010638:	fa03 f000 	lsl.w	r0, r3, r0
 801063c:	9b04      	ldr	r3, [sp, #16]
 801063e:	4303      	orrs	r3, r0
 8010640:	3401      	adds	r4, #1
 8010642:	9304      	str	r3, [sp, #16]
 8010644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010648:	482c      	ldr	r0, [pc, #176]	; (80106fc <_vfiprintf_r+0x250>)
 801064a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801064e:	2206      	movs	r2, #6
 8010650:	f7ef fe4e 	bl	80002f0 <memchr>
 8010654:	2800      	cmp	r0, #0
 8010656:	d03f      	beq.n	80106d8 <_vfiprintf_r+0x22c>
 8010658:	4b29      	ldr	r3, [pc, #164]	; (8010700 <_vfiprintf_r+0x254>)
 801065a:	bb1b      	cbnz	r3, 80106a4 <_vfiprintf_r+0x1f8>
 801065c:	9b03      	ldr	r3, [sp, #12]
 801065e:	3307      	adds	r3, #7
 8010660:	f023 0307 	bic.w	r3, r3, #7
 8010664:	3308      	adds	r3, #8
 8010666:	9303      	str	r3, [sp, #12]
 8010668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801066a:	443b      	add	r3, r7
 801066c:	9309      	str	r3, [sp, #36]	; 0x24
 801066e:	e767      	b.n	8010540 <_vfiprintf_r+0x94>
 8010670:	fb0c 3202 	mla	r2, ip, r2, r3
 8010674:	460c      	mov	r4, r1
 8010676:	2001      	movs	r0, #1
 8010678:	e7a5      	b.n	80105c6 <_vfiprintf_r+0x11a>
 801067a:	2300      	movs	r3, #0
 801067c:	3401      	adds	r4, #1
 801067e:	9305      	str	r3, [sp, #20]
 8010680:	4619      	mov	r1, r3
 8010682:	f04f 0c0a 	mov.w	ip, #10
 8010686:	4620      	mov	r0, r4
 8010688:	f810 2b01 	ldrb.w	r2, [r0], #1
 801068c:	3a30      	subs	r2, #48	; 0x30
 801068e:	2a09      	cmp	r2, #9
 8010690:	d903      	bls.n	801069a <_vfiprintf_r+0x1ee>
 8010692:	2b00      	cmp	r3, #0
 8010694:	d0c5      	beq.n	8010622 <_vfiprintf_r+0x176>
 8010696:	9105      	str	r1, [sp, #20]
 8010698:	e7c3      	b.n	8010622 <_vfiprintf_r+0x176>
 801069a:	fb0c 2101 	mla	r1, ip, r1, r2
 801069e:	4604      	mov	r4, r0
 80106a0:	2301      	movs	r3, #1
 80106a2:	e7f0      	b.n	8010686 <_vfiprintf_r+0x1da>
 80106a4:	ab03      	add	r3, sp, #12
 80106a6:	9300      	str	r3, [sp, #0]
 80106a8:	462a      	mov	r2, r5
 80106aa:	4b16      	ldr	r3, [pc, #88]	; (8010704 <_vfiprintf_r+0x258>)
 80106ac:	a904      	add	r1, sp, #16
 80106ae:	4630      	mov	r0, r6
 80106b0:	f7fe f86e 	bl	800e790 <_printf_float>
 80106b4:	4607      	mov	r7, r0
 80106b6:	1c78      	adds	r0, r7, #1
 80106b8:	d1d6      	bne.n	8010668 <_vfiprintf_r+0x1bc>
 80106ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106bc:	07d9      	lsls	r1, r3, #31
 80106be:	d405      	bmi.n	80106cc <_vfiprintf_r+0x220>
 80106c0:	89ab      	ldrh	r3, [r5, #12]
 80106c2:	059a      	lsls	r2, r3, #22
 80106c4:	d402      	bmi.n	80106cc <_vfiprintf_r+0x220>
 80106c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106c8:	f000 faaf 	bl	8010c2a <__retarget_lock_release_recursive>
 80106cc:	89ab      	ldrh	r3, [r5, #12]
 80106ce:	065b      	lsls	r3, r3, #25
 80106d0:	f53f af12 	bmi.w	80104f8 <_vfiprintf_r+0x4c>
 80106d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80106d6:	e711      	b.n	80104fc <_vfiprintf_r+0x50>
 80106d8:	ab03      	add	r3, sp, #12
 80106da:	9300      	str	r3, [sp, #0]
 80106dc:	462a      	mov	r2, r5
 80106de:	4b09      	ldr	r3, [pc, #36]	; (8010704 <_vfiprintf_r+0x258>)
 80106e0:	a904      	add	r1, sp, #16
 80106e2:	4630      	mov	r0, r6
 80106e4:	f7fe fae0 	bl	800eca8 <_printf_i>
 80106e8:	e7e4      	b.n	80106b4 <_vfiprintf_r+0x208>
 80106ea:	bf00      	nop
 80106ec:	08012bb4 	.word	0x08012bb4
 80106f0:	08012bd4 	.word	0x08012bd4
 80106f4:	08012b94 	.word	0x08012b94
 80106f8:	08012a82 	.word	0x08012a82
 80106fc:	08012a8c 	.word	0x08012a8c
 8010700:	0800e791 	.word	0x0800e791
 8010704:	08010487 	.word	0x08010487
 8010708:	08012a88 	.word	0x08012a88

0801070c <__swbuf_r>:
 801070c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801070e:	460e      	mov	r6, r1
 8010710:	4614      	mov	r4, r2
 8010712:	4605      	mov	r5, r0
 8010714:	b118      	cbz	r0, 801071e <__swbuf_r+0x12>
 8010716:	6983      	ldr	r3, [r0, #24]
 8010718:	b90b      	cbnz	r3, 801071e <__swbuf_r+0x12>
 801071a:	f000 f9e7 	bl	8010aec <__sinit>
 801071e:	4b21      	ldr	r3, [pc, #132]	; (80107a4 <__swbuf_r+0x98>)
 8010720:	429c      	cmp	r4, r3
 8010722:	d12b      	bne.n	801077c <__swbuf_r+0x70>
 8010724:	686c      	ldr	r4, [r5, #4]
 8010726:	69a3      	ldr	r3, [r4, #24]
 8010728:	60a3      	str	r3, [r4, #8]
 801072a:	89a3      	ldrh	r3, [r4, #12]
 801072c:	071a      	lsls	r2, r3, #28
 801072e:	d52f      	bpl.n	8010790 <__swbuf_r+0x84>
 8010730:	6923      	ldr	r3, [r4, #16]
 8010732:	b36b      	cbz	r3, 8010790 <__swbuf_r+0x84>
 8010734:	6923      	ldr	r3, [r4, #16]
 8010736:	6820      	ldr	r0, [r4, #0]
 8010738:	1ac0      	subs	r0, r0, r3
 801073a:	6963      	ldr	r3, [r4, #20]
 801073c:	b2f6      	uxtb	r6, r6
 801073e:	4283      	cmp	r3, r0
 8010740:	4637      	mov	r7, r6
 8010742:	dc04      	bgt.n	801074e <__swbuf_r+0x42>
 8010744:	4621      	mov	r1, r4
 8010746:	4628      	mov	r0, r5
 8010748:	f000 f93c 	bl	80109c4 <_fflush_r>
 801074c:	bb30      	cbnz	r0, 801079c <__swbuf_r+0x90>
 801074e:	68a3      	ldr	r3, [r4, #8]
 8010750:	3b01      	subs	r3, #1
 8010752:	60a3      	str	r3, [r4, #8]
 8010754:	6823      	ldr	r3, [r4, #0]
 8010756:	1c5a      	adds	r2, r3, #1
 8010758:	6022      	str	r2, [r4, #0]
 801075a:	701e      	strb	r6, [r3, #0]
 801075c:	6963      	ldr	r3, [r4, #20]
 801075e:	3001      	adds	r0, #1
 8010760:	4283      	cmp	r3, r0
 8010762:	d004      	beq.n	801076e <__swbuf_r+0x62>
 8010764:	89a3      	ldrh	r3, [r4, #12]
 8010766:	07db      	lsls	r3, r3, #31
 8010768:	d506      	bpl.n	8010778 <__swbuf_r+0x6c>
 801076a:	2e0a      	cmp	r6, #10
 801076c:	d104      	bne.n	8010778 <__swbuf_r+0x6c>
 801076e:	4621      	mov	r1, r4
 8010770:	4628      	mov	r0, r5
 8010772:	f000 f927 	bl	80109c4 <_fflush_r>
 8010776:	b988      	cbnz	r0, 801079c <__swbuf_r+0x90>
 8010778:	4638      	mov	r0, r7
 801077a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801077c:	4b0a      	ldr	r3, [pc, #40]	; (80107a8 <__swbuf_r+0x9c>)
 801077e:	429c      	cmp	r4, r3
 8010780:	d101      	bne.n	8010786 <__swbuf_r+0x7a>
 8010782:	68ac      	ldr	r4, [r5, #8]
 8010784:	e7cf      	b.n	8010726 <__swbuf_r+0x1a>
 8010786:	4b09      	ldr	r3, [pc, #36]	; (80107ac <__swbuf_r+0xa0>)
 8010788:	429c      	cmp	r4, r3
 801078a:	bf08      	it	eq
 801078c:	68ec      	ldreq	r4, [r5, #12]
 801078e:	e7ca      	b.n	8010726 <__swbuf_r+0x1a>
 8010790:	4621      	mov	r1, r4
 8010792:	4628      	mov	r0, r5
 8010794:	f000 f81a 	bl	80107cc <__swsetup_r>
 8010798:	2800      	cmp	r0, #0
 801079a:	d0cb      	beq.n	8010734 <__swbuf_r+0x28>
 801079c:	f04f 37ff 	mov.w	r7, #4294967295
 80107a0:	e7ea      	b.n	8010778 <__swbuf_r+0x6c>
 80107a2:	bf00      	nop
 80107a4:	08012bb4 	.word	0x08012bb4
 80107a8:	08012bd4 	.word	0x08012bd4
 80107ac:	08012b94 	.word	0x08012b94

080107b0 <__ascii_wctomb>:
 80107b0:	b149      	cbz	r1, 80107c6 <__ascii_wctomb+0x16>
 80107b2:	2aff      	cmp	r2, #255	; 0xff
 80107b4:	bf85      	ittet	hi
 80107b6:	238a      	movhi	r3, #138	; 0x8a
 80107b8:	6003      	strhi	r3, [r0, #0]
 80107ba:	700a      	strbls	r2, [r1, #0]
 80107bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80107c0:	bf98      	it	ls
 80107c2:	2001      	movls	r0, #1
 80107c4:	4770      	bx	lr
 80107c6:	4608      	mov	r0, r1
 80107c8:	4770      	bx	lr
	...

080107cc <__swsetup_r>:
 80107cc:	4b32      	ldr	r3, [pc, #200]	; (8010898 <__swsetup_r+0xcc>)
 80107ce:	b570      	push	{r4, r5, r6, lr}
 80107d0:	681d      	ldr	r5, [r3, #0]
 80107d2:	4606      	mov	r6, r0
 80107d4:	460c      	mov	r4, r1
 80107d6:	b125      	cbz	r5, 80107e2 <__swsetup_r+0x16>
 80107d8:	69ab      	ldr	r3, [r5, #24]
 80107da:	b913      	cbnz	r3, 80107e2 <__swsetup_r+0x16>
 80107dc:	4628      	mov	r0, r5
 80107de:	f000 f985 	bl	8010aec <__sinit>
 80107e2:	4b2e      	ldr	r3, [pc, #184]	; (801089c <__swsetup_r+0xd0>)
 80107e4:	429c      	cmp	r4, r3
 80107e6:	d10f      	bne.n	8010808 <__swsetup_r+0x3c>
 80107e8:	686c      	ldr	r4, [r5, #4]
 80107ea:	89a3      	ldrh	r3, [r4, #12]
 80107ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107f0:	0719      	lsls	r1, r3, #28
 80107f2:	d42c      	bmi.n	801084e <__swsetup_r+0x82>
 80107f4:	06dd      	lsls	r5, r3, #27
 80107f6:	d411      	bmi.n	801081c <__swsetup_r+0x50>
 80107f8:	2309      	movs	r3, #9
 80107fa:	6033      	str	r3, [r6, #0]
 80107fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010800:	81a3      	strh	r3, [r4, #12]
 8010802:	f04f 30ff 	mov.w	r0, #4294967295
 8010806:	e03e      	b.n	8010886 <__swsetup_r+0xba>
 8010808:	4b25      	ldr	r3, [pc, #148]	; (80108a0 <__swsetup_r+0xd4>)
 801080a:	429c      	cmp	r4, r3
 801080c:	d101      	bne.n	8010812 <__swsetup_r+0x46>
 801080e:	68ac      	ldr	r4, [r5, #8]
 8010810:	e7eb      	b.n	80107ea <__swsetup_r+0x1e>
 8010812:	4b24      	ldr	r3, [pc, #144]	; (80108a4 <__swsetup_r+0xd8>)
 8010814:	429c      	cmp	r4, r3
 8010816:	bf08      	it	eq
 8010818:	68ec      	ldreq	r4, [r5, #12]
 801081a:	e7e6      	b.n	80107ea <__swsetup_r+0x1e>
 801081c:	0758      	lsls	r0, r3, #29
 801081e:	d512      	bpl.n	8010846 <__swsetup_r+0x7a>
 8010820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010822:	b141      	cbz	r1, 8010836 <__swsetup_r+0x6a>
 8010824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010828:	4299      	cmp	r1, r3
 801082a:	d002      	beq.n	8010832 <__swsetup_r+0x66>
 801082c:	4630      	mov	r0, r6
 801082e:	f7ff fd0b 	bl	8010248 <_free_r>
 8010832:	2300      	movs	r3, #0
 8010834:	6363      	str	r3, [r4, #52]	; 0x34
 8010836:	89a3      	ldrh	r3, [r4, #12]
 8010838:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801083c:	81a3      	strh	r3, [r4, #12]
 801083e:	2300      	movs	r3, #0
 8010840:	6063      	str	r3, [r4, #4]
 8010842:	6923      	ldr	r3, [r4, #16]
 8010844:	6023      	str	r3, [r4, #0]
 8010846:	89a3      	ldrh	r3, [r4, #12]
 8010848:	f043 0308 	orr.w	r3, r3, #8
 801084c:	81a3      	strh	r3, [r4, #12]
 801084e:	6923      	ldr	r3, [r4, #16]
 8010850:	b94b      	cbnz	r3, 8010866 <__swsetup_r+0x9a>
 8010852:	89a3      	ldrh	r3, [r4, #12]
 8010854:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801085c:	d003      	beq.n	8010866 <__swsetup_r+0x9a>
 801085e:	4621      	mov	r1, r4
 8010860:	4630      	mov	r0, r6
 8010862:	f000 fa07 	bl	8010c74 <__smakebuf_r>
 8010866:	89a0      	ldrh	r0, [r4, #12]
 8010868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801086c:	f010 0301 	ands.w	r3, r0, #1
 8010870:	d00a      	beq.n	8010888 <__swsetup_r+0xbc>
 8010872:	2300      	movs	r3, #0
 8010874:	60a3      	str	r3, [r4, #8]
 8010876:	6963      	ldr	r3, [r4, #20]
 8010878:	425b      	negs	r3, r3
 801087a:	61a3      	str	r3, [r4, #24]
 801087c:	6923      	ldr	r3, [r4, #16]
 801087e:	b943      	cbnz	r3, 8010892 <__swsetup_r+0xc6>
 8010880:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010884:	d1ba      	bne.n	80107fc <__swsetup_r+0x30>
 8010886:	bd70      	pop	{r4, r5, r6, pc}
 8010888:	0781      	lsls	r1, r0, #30
 801088a:	bf58      	it	pl
 801088c:	6963      	ldrpl	r3, [r4, #20]
 801088e:	60a3      	str	r3, [r4, #8]
 8010890:	e7f4      	b.n	801087c <__swsetup_r+0xb0>
 8010892:	2000      	movs	r0, #0
 8010894:	e7f7      	b.n	8010886 <__swsetup_r+0xba>
 8010896:	bf00      	nop
 8010898:	24000028 	.word	0x24000028
 801089c:	08012bb4 	.word	0x08012bb4
 80108a0:	08012bd4 	.word	0x08012bd4
 80108a4:	08012b94 	.word	0x08012b94

080108a8 <abort>:
 80108a8:	b508      	push	{r3, lr}
 80108aa:	2006      	movs	r0, #6
 80108ac:	f000 fa4a 	bl	8010d44 <raise>
 80108b0:	2001      	movs	r0, #1
 80108b2:	f7f2 fbb1 	bl	8003018 <_exit>
	...

080108b8 <__sflush_r>:
 80108b8:	898a      	ldrh	r2, [r1, #12]
 80108ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108be:	4605      	mov	r5, r0
 80108c0:	0710      	lsls	r0, r2, #28
 80108c2:	460c      	mov	r4, r1
 80108c4:	d458      	bmi.n	8010978 <__sflush_r+0xc0>
 80108c6:	684b      	ldr	r3, [r1, #4]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	dc05      	bgt.n	80108d8 <__sflush_r+0x20>
 80108cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	dc02      	bgt.n	80108d8 <__sflush_r+0x20>
 80108d2:	2000      	movs	r0, #0
 80108d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108da:	2e00      	cmp	r6, #0
 80108dc:	d0f9      	beq.n	80108d2 <__sflush_r+0x1a>
 80108de:	2300      	movs	r3, #0
 80108e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80108e4:	682f      	ldr	r7, [r5, #0]
 80108e6:	602b      	str	r3, [r5, #0]
 80108e8:	d032      	beq.n	8010950 <__sflush_r+0x98>
 80108ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80108ec:	89a3      	ldrh	r3, [r4, #12]
 80108ee:	075a      	lsls	r2, r3, #29
 80108f0:	d505      	bpl.n	80108fe <__sflush_r+0x46>
 80108f2:	6863      	ldr	r3, [r4, #4]
 80108f4:	1ac0      	subs	r0, r0, r3
 80108f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108f8:	b10b      	cbz	r3, 80108fe <__sflush_r+0x46>
 80108fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80108fc:	1ac0      	subs	r0, r0, r3
 80108fe:	2300      	movs	r3, #0
 8010900:	4602      	mov	r2, r0
 8010902:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010904:	6a21      	ldr	r1, [r4, #32]
 8010906:	4628      	mov	r0, r5
 8010908:	47b0      	blx	r6
 801090a:	1c43      	adds	r3, r0, #1
 801090c:	89a3      	ldrh	r3, [r4, #12]
 801090e:	d106      	bne.n	801091e <__sflush_r+0x66>
 8010910:	6829      	ldr	r1, [r5, #0]
 8010912:	291d      	cmp	r1, #29
 8010914:	d82c      	bhi.n	8010970 <__sflush_r+0xb8>
 8010916:	4a2a      	ldr	r2, [pc, #168]	; (80109c0 <__sflush_r+0x108>)
 8010918:	40ca      	lsrs	r2, r1
 801091a:	07d6      	lsls	r6, r2, #31
 801091c:	d528      	bpl.n	8010970 <__sflush_r+0xb8>
 801091e:	2200      	movs	r2, #0
 8010920:	6062      	str	r2, [r4, #4]
 8010922:	04d9      	lsls	r1, r3, #19
 8010924:	6922      	ldr	r2, [r4, #16]
 8010926:	6022      	str	r2, [r4, #0]
 8010928:	d504      	bpl.n	8010934 <__sflush_r+0x7c>
 801092a:	1c42      	adds	r2, r0, #1
 801092c:	d101      	bne.n	8010932 <__sflush_r+0x7a>
 801092e:	682b      	ldr	r3, [r5, #0]
 8010930:	b903      	cbnz	r3, 8010934 <__sflush_r+0x7c>
 8010932:	6560      	str	r0, [r4, #84]	; 0x54
 8010934:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010936:	602f      	str	r7, [r5, #0]
 8010938:	2900      	cmp	r1, #0
 801093a:	d0ca      	beq.n	80108d2 <__sflush_r+0x1a>
 801093c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010940:	4299      	cmp	r1, r3
 8010942:	d002      	beq.n	801094a <__sflush_r+0x92>
 8010944:	4628      	mov	r0, r5
 8010946:	f7ff fc7f 	bl	8010248 <_free_r>
 801094a:	2000      	movs	r0, #0
 801094c:	6360      	str	r0, [r4, #52]	; 0x34
 801094e:	e7c1      	b.n	80108d4 <__sflush_r+0x1c>
 8010950:	6a21      	ldr	r1, [r4, #32]
 8010952:	2301      	movs	r3, #1
 8010954:	4628      	mov	r0, r5
 8010956:	47b0      	blx	r6
 8010958:	1c41      	adds	r1, r0, #1
 801095a:	d1c7      	bne.n	80108ec <__sflush_r+0x34>
 801095c:	682b      	ldr	r3, [r5, #0]
 801095e:	2b00      	cmp	r3, #0
 8010960:	d0c4      	beq.n	80108ec <__sflush_r+0x34>
 8010962:	2b1d      	cmp	r3, #29
 8010964:	d001      	beq.n	801096a <__sflush_r+0xb2>
 8010966:	2b16      	cmp	r3, #22
 8010968:	d101      	bne.n	801096e <__sflush_r+0xb6>
 801096a:	602f      	str	r7, [r5, #0]
 801096c:	e7b1      	b.n	80108d2 <__sflush_r+0x1a>
 801096e:	89a3      	ldrh	r3, [r4, #12]
 8010970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010974:	81a3      	strh	r3, [r4, #12]
 8010976:	e7ad      	b.n	80108d4 <__sflush_r+0x1c>
 8010978:	690f      	ldr	r7, [r1, #16]
 801097a:	2f00      	cmp	r7, #0
 801097c:	d0a9      	beq.n	80108d2 <__sflush_r+0x1a>
 801097e:	0793      	lsls	r3, r2, #30
 8010980:	680e      	ldr	r6, [r1, #0]
 8010982:	bf08      	it	eq
 8010984:	694b      	ldreq	r3, [r1, #20]
 8010986:	600f      	str	r7, [r1, #0]
 8010988:	bf18      	it	ne
 801098a:	2300      	movne	r3, #0
 801098c:	eba6 0807 	sub.w	r8, r6, r7
 8010990:	608b      	str	r3, [r1, #8]
 8010992:	f1b8 0f00 	cmp.w	r8, #0
 8010996:	dd9c      	ble.n	80108d2 <__sflush_r+0x1a>
 8010998:	6a21      	ldr	r1, [r4, #32]
 801099a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801099c:	4643      	mov	r3, r8
 801099e:	463a      	mov	r2, r7
 80109a0:	4628      	mov	r0, r5
 80109a2:	47b0      	blx	r6
 80109a4:	2800      	cmp	r0, #0
 80109a6:	dc06      	bgt.n	80109b6 <__sflush_r+0xfe>
 80109a8:	89a3      	ldrh	r3, [r4, #12]
 80109aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109ae:	81a3      	strh	r3, [r4, #12]
 80109b0:	f04f 30ff 	mov.w	r0, #4294967295
 80109b4:	e78e      	b.n	80108d4 <__sflush_r+0x1c>
 80109b6:	4407      	add	r7, r0
 80109b8:	eba8 0800 	sub.w	r8, r8, r0
 80109bc:	e7e9      	b.n	8010992 <__sflush_r+0xda>
 80109be:	bf00      	nop
 80109c0:	20400001 	.word	0x20400001

080109c4 <_fflush_r>:
 80109c4:	b538      	push	{r3, r4, r5, lr}
 80109c6:	690b      	ldr	r3, [r1, #16]
 80109c8:	4605      	mov	r5, r0
 80109ca:	460c      	mov	r4, r1
 80109cc:	b913      	cbnz	r3, 80109d4 <_fflush_r+0x10>
 80109ce:	2500      	movs	r5, #0
 80109d0:	4628      	mov	r0, r5
 80109d2:	bd38      	pop	{r3, r4, r5, pc}
 80109d4:	b118      	cbz	r0, 80109de <_fflush_r+0x1a>
 80109d6:	6983      	ldr	r3, [r0, #24]
 80109d8:	b90b      	cbnz	r3, 80109de <_fflush_r+0x1a>
 80109da:	f000 f887 	bl	8010aec <__sinit>
 80109de:	4b14      	ldr	r3, [pc, #80]	; (8010a30 <_fflush_r+0x6c>)
 80109e0:	429c      	cmp	r4, r3
 80109e2:	d11b      	bne.n	8010a1c <_fflush_r+0x58>
 80109e4:	686c      	ldr	r4, [r5, #4]
 80109e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d0ef      	beq.n	80109ce <_fflush_r+0xa>
 80109ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80109f0:	07d0      	lsls	r0, r2, #31
 80109f2:	d404      	bmi.n	80109fe <_fflush_r+0x3a>
 80109f4:	0599      	lsls	r1, r3, #22
 80109f6:	d402      	bmi.n	80109fe <_fflush_r+0x3a>
 80109f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109fa:	f000 f915 	bl	8010c28 <__retarget_lock_acquire_recursive>
 80109fe:	4628      	mov	r0, r5
 8010a00:	4621      	mov	r1, r4
 8010a02:	f7ff ff59 	bl	80108b8 <__sflush_r>
 8010a06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a08:	07da      	lsls	r2, r3, #31
 8010a0a:	4605      	mov	r5, r0
 8010a0c:	d4e0      	bmi.n	80109d0 <_fflush_r+0xc>
 8010a0e:	89a3      	ldrh	r3, [r4, #12]
 8010a10:	059b      	lsls	r3, r3, #22
 8010a12:	d4dd      	bmi.n	80109d0 <_fflush_r+0xc>
 8010a14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a16:	f000 f908 	bl	8010c2a <__retarget_lock_release_recursive>
 8010a1a:	e7d9      	b.n	80109d0 <_fflush_r+0xc>
 8010a1c:	4b05      	ldr	r3, [pc, #20]	; (8010a34 <_fflush_r+0x70>)
 8010a1e:	429c      	cmp	r4, r3
 8010a20:	d101      	bne.n	8010a26 <_fflush_r+0x62>
 8010a22:	68ac      	ldr	r4, [r5, #8]
 8010a24:	e7df      	b.n	80109e6 <_fflush_r+0x22>
 8010a26:	4b04      	ldr	r3, [pc, #16]	; (8010a38 <_fflush_r+0x74>)
 8010a28:	429c      	cmp	r4, r3
 8010a2a:	bf08      	it	eq
 8010a2c:	68ec      	ldreq	r4, [r5, #12]
 8010a2e:	e7da      	b.n	80109e6 <_fflush_r+0x22>
 8010a30:	08012bb4 	.word	0x08012bb4
 8010a34:	08012bd4 	.word	0x08012bd4
 8010a38:	08012b94 	.word	0x08012b94

08010a3c <std>:
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	b510      	push	{r4, lr}
 8010a40:	4604      	mov	r4, r0
 8010a42:	e9c0 3300 	strd	r3, r3, [r0]
 8010a46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a4a:	6083      	str	r3, [r0, #8]
 8010a4c:	8181      	strh	r1, [r0, #12]
 8010a4e:	6643      	str	r3, [r0, #100]	; 0x64
 8010a50:	81c2      	strh	r2, [r0, #14]
 8010a52:	6183      	str	r3, [r0, #24]
 8010a54:	4619      	mov	r1, r3
 8010a56:	2208      	movs	r2, #8
 8010a58:	305c      	adds	r0, #92	; 0x5c
 8010a5a:	f7fd fe01 	bl	800e660 <memset>
 8010a5e:	4b05      	ldr	r3, [pc, #20]	; (8010a74 <std+0x38>)
 8010a60:	6263      	str	r3, [r4, #36]	; 0x24
 8010a62:	4b05      	ldr	r3, [pc, #20]	; (8010a78 <std+0x3c>)
 8010a64:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a66:	4b05      	ldr	r3, [pc, #20]	; (8010a7c <std+0x40>)
 8010a68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a6a:	4b05      	ldr	r3, [pc, #20]	; (8010a80 <std+0x44>)
 8010a6c:	6224      	str	r4, [r4, #32]
 8010a6e:	6323      	str	r3, [r4, #48]	; 0x30
 8010a70:	bd10      	pop	{r4, pc}
 8010a72:	bf00      	nop
 8010a74:	08010d7d 	.word	0x08010d7d
 8010a78:	08010d9f 	.word	0x08010d9f
 8010a7c:	08010dd7 	.word	0x08010dd7
 8010a80:	08010dfb 	.word	0x08010dfb

08010a84 <_cleanup_r>:
 8010a84:	4901      	ldr	r1, [pc, #4]	; (8010a8c <_cleanup_r+0x8>)
 8010a86:	f000 b8af 	b.w	8010be8 <_fwalk_reent>
 8010a8a:	bf00      	nop
 8010a8c:	080109c5 	.word	0x080109c5

08010a90 <__sfmoreglue>:
 8010a90:	b570      	push	{r4, r5, r6, lr}
 8010a92:	1e4a      	subs	r2, r1, #1
 8010a94:	2568      	movs	r5, #104	; 0x68
 8010a96:	4355      	muls	r5, r2
 8010a98:	460e      	mov	r6, r1
 8010a9a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a9e:	f7ff fc23 	bl	80102e8 <_malloc_r>
 8010aa2:	4604      	mov	r4, r0
 8010aa4:	b140      	cbz	r0, 8010ab8 <__sfmoreglue+0x28>
 8010aa6:	2100      	movs	r1, #0
 8010aa8:	e9c0 1600 	strd	r1, r6, [r0]
 8010aac:	300c      	adds	r0, #12
 8010aae:	60a0      	str	r0, [r4, #8]
 8010ab0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010ab4:	f7fd fdd4 	bl	800e660 <memset>
 8010ab8:	4620      	mov	r0, r4
 8010aba:	bd70      	pop	{r4, r5, r6, pc}

08010abc <__sfp_lock_acquire>:
 8010abc:	4801      	ldr	r0, [pc, #4]	; (8010ac4 <__sfp_lock_acquire+0x8>)
 8010abe:	f000 b8b3 	b.w	8010c28 <__retarget_lock_acquire_recursive>
 8010ac2:	bf00      	nop
 8010ac4:	24000d30 	.word	0x24000d30

08010ac8 <__sfp_lock_release>:
 8010ac8:	4801      	ldr	r0, [pc, #4]	; (8010ad0 <__sfp_lock_release+0x8>)
 8010aca:	f000 b8ae 	b.w	8010c2a <__retarget_lock_release_recursive>
 8010ace:	bf00      	nop
 8010ad0:	24000d30 	.word	0x24000d30

08010ad4 <__sinit_lock_acquire>:
 8010ad4:	4801      	ldr	r0, [pc, #4]	; (8010adc <__sinit_lock_acquire+0x8>)
 8010ad6:	f000 b8a7 	b.w	8010c28 <__retarget_lock_acquire_recursive>
 8010ada:	bf00      	nop
 8010adc:	24000d2b 	.word	0x24000d2b

08010ae0 <__sinit_lock_release>:
 8010ae0:	4801      	ldr	r0, [pc, #4]	; (8010ae8 <__sinit_lock_release+0x8>)
 8010ae2:	f000 b8a2 	b.w	8010c2a <__retarget_lock_release_recursive>
 8010ae6:	bf00      	nop
 8010ae8:	24000d2b 	.word	0x24000d2b

08010aec <__sinit>:
 8010aec:	b510      	push	{r4, lr}
 8010aee:	4604      	mov	r4, r0
 8010af0:	f7ff fff0 	bl	8010ad4 <__sinit_lock_acquire>
 8010af4:	69a3      	ldr	r3, [r4, #24]
 8010af6:	b11b      	cbz	r3, 8010b00 <__sinit+0x14>
 8010af8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010afc:	f7ff bff0 	b.w	8010ae0 <__sinit_lock_release>
 8010b00:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010b04:	6523      	str	r3, [r4, #80]	; 0x50
 8010b06:	4b13      	ldr	r3, [pc, #76]	; (8010b54 <__sinit+0x68>)
 8010b08:	4a13      	ldr	r2, [pc, #76]	; (8010b58 <__sinit+0x6c>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	62a2      	str	r2, [r4, #40]	; 0x28
 8010b0e:	42a3      	cmp	r3, r4
 8010b10:	bf04      	itt	eq
 8010b12:	2301      	moveq	r3, #1
 8010b14:	61a3      	streq	r3, [r4, #24]
 8010b16:	4620      	mov	r0, r4
 8010b18:	f000 f820 	bl	8010b5c <__sfp>
 8010b1c:	6060      	str	r0, [r4, #4]
 8010b1e:	4620      	mov	r0, r4
 8010b20:	f000 f81c 	bl	8010b5c <__sfp>
 8010b24:	60a0      	str	r0, [r4, #8]
 8010b26:	4620      	mov	r0, r4
 8010b28:	f000 f818 	bl	8010b5c <__sfp>
 8010b2c:	2200      	movs	r2, #0
 8010b2e:	60e0      	str	r0, [r4, #12]
 8010b30:	2104      	movs	r1, #4
 8010b32:	6860      	ldr	r0, [r4, #4]
 8010b34:	f7ff ff82 	bl	8010a3c <std>
 8010b38:	68a0      	ldr	r0, [r4, #8]
 8010b3a:	2201      	movs	r2, #1
 8010b3c:	2109      	movs	r1, #9
 8010b3e:	f7ff ff7d 	bl	8010a3c <std>
 8010b42:	68e0      	ldr	r0, [r4, #12]
 8010b44:	2202      	movs	r2, #2
 8010b46:	2112      	movs	r1, #18
 8010b48:	f7ff ff78 	bl	8010a3c <std>
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	61a3      	str	r3, [r4, #24]
 8010b50:	e7d2      	b.n	8010af8 <__sinit+0xc>
 8010b52:	bf00      	nop
 8010b54:	08012810 	.word	0x08012810
 8010b58:	08010a85 	.word	0x08010a85

08010b5c <__sfp>:
 8010b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b5e:	4607      	mov	r7, r0
 8010b60:	f7ff ffac 	bl	8010abc <__sfp_lock_acquire>
 8010b64:	4b1e      	ldr	r3, [pc, #120]	; (8010be0 <__sfp+0x84>)
 8010b66:	681e      	ldr	r6, [r3, #0]
 8010b68:	69b3      	ldr	r3, [r6, #24]
 8010b6a:	b913      	cbnz	r3, 8010b72 <__sfp+0x16>
 8010b6c:	4630      	mov	r0, r6
 8010b6e:	f7ff ffbd 	bl	8010aec <__sinit>
 8010b72:	3648      	adds	r6, #72	; 0x48
 8010b74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b78:	3b01      	subs	r3, #1
 8010b7a:	d503      	bpl.n	8010b84 <__sfp+0x28>
 8010b7c:	6833      	ldr	r3, [r6, #0]
 8010b7e:	b30b      	cbz	r3, 8010bc4 <__sfp+0x68>
 8010b80:	6836      	ldr	r6, [r6, #0]
 8010b82:	e7f7      	b.n	8010b74 <__sfp+0x18>
 8010b84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b88:	b9d5      	cbnz	r5, 8010bc0 <__sfp+0x64>
 8010b8a:	4b16      	ldr	r3, [pc, #88]	; (8010be4 <__sfp+0x88>)
 8010b8c:	60e3      	str	r3, [r4, #12]
 8010b8e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b92:	6665      	str	r5, [r4, #100]	; 0x64
 8010b94:	f000 f847 	bl	8010c26 <__retarget_lock_init_recursive>
 8010b98:	f7ff ff96 	bl	8010ac8 <__sfp_lock_release>
 8010b9c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010ba0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010ba4:	6025      	str	r5, [r4, #0]
 8010ba6:	61a5      	str	r5, [r4, #24]
 8010ba8:	2208      	movs	r2, #8
 8010baa:	4629      	mov	r1, r5
 8010bac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010bb0:	f7fd fd56 	bl	800e660 <memset>
 8010bb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010bb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bc0:	3468      	adds	r4, #104	; 0x68
 8010bc2:	e7d9      	b.n	8010b78 <__sfp+0x1c>
 8010bc4:	2104      	movs	r1, #4
 8010bc6:	4638      	mov	r0, r7
 8010bc8:	f7ff ff62 	bl	8010a90 <__sfmoreglue>
 8010bcc:	4604      	mov	r4, r0
 8010bce:	6030      	str	r0, [r6, #0]
 8010bd0:	2800      	cmp	r0, #0
 8010bd2:	d1d5      	bne.n	8010b80 <__sfp+0x24>
 8010bd4:	f7ff ff78 	bl	8010ac8 <__sfp_lock_release>
 8010bd8:	230c      	movs	r3, #12
 8010bda:	603b      	str	r3, [r7, #0]
 8010bdc:	e7ee      	b.n	8010bbc <__sfp+0x60>
 8010bde:	bf00      	nop
 8010be0:	08012810 	.word	0x08012810
 8010be4:	ffff0001 	.word	0xffff0001

08010be8 <_fwalk_reent>:
 8010be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bec:	4606      	mov	r6, r0
 8010bee:	4688      	mov	r8, r1
 8010bf0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010bf4:	2700      	movs	r7, #0
 8010bf6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010bfa:	f1b9 0901 	subs.w	r9, r9, #1
 8010bfe:	d505      	bpl.n	8010c0c <_fwalk_reent+0x24>
 8010c00:	6824      	ldr	r4, [r4, #0]
 8010c02:	2c00      	cmp	r4, #0
 8010c04:	d1f7      	bne.n	8010bf6 <_fwalk_reent+0xe>
 8010c06:	4638      	mov	r0, r7
 8010c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c0c:	89ab      	ldrh	r3, [r5, #12]
 8010c0e:	2b01      	cmp	r3, #1
 8010c10:	d907      	bls.n	8010c22 <_fwalk_reent+0x3a>
 8010c12:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c16:	3301      	adds	r3, #1
 8010c18:	d003      	beq.n	8010c22 <_fwalk_reent+0x3a>
 8010c1a:	4629      	mov	r1, r5
 8010c1c:	4630      	mov	r0, r6
 8010c1e:	47c0      	blx	r8
 8010c20:	4307      	orrs	r7, r0
 8010c22:	3568      	adds	r5, #104	; 0x68
 8010c24:	e7e9      	b.n	8010bfa <_fwalk_reent+0x12>

08010c26 <__retarget_lock_init_recursive>:
 8010c26:	4770      	bx	lr

08010c28 <__retarget_lock_acquire_recursive>:
 8010c28:	4770      	bx	lr

08010c2a <__retarget_lock_release_recursive>:
 8010c2a:	4770      	bx	lr

08010c2c <__swhatbuf_r>:
 8010c2c:	b570      	push	{r4, r5, r6, lr}
 8010c2e:	460e      	mov	r6, r1
 8010c30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c34:	2900      	cmp	r1, #0
 8010c36:	b096      	sub	sp, #88	; 0x58
 8010c38:	4614      	mov	r4, r2
 8010c3a:	461d      	mov	r5, r3
 8010c3c:	da07      	bge.n	8010c4e <__swhatbuf_r+0x22>
 8010c3e:	2300      	movs	r3, #0
 8010c40:	602b      	str	r3, [r5, #0]
 8010c42:	89b3      	ldrh	r3, [r6, #12]
 8010c44:	061a      	lsls	r2, r3, #24
 8010c46:	d410      	bmi.n	8010c6a <__swhatbuf_r+0x3e>
 8010c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c4c:	e00e      	b.n	8010c6c <__swhatbuf_r+0x40>
 8010c4e:	466a      	mov	r2, sp
 8010c50:	f000 f8fa 	bl	8010e48 <_fstat_r>
 8010c54:	2800      	cmp	r0, #0
 8010c56:	dbf2      	blt.n	8010c3e <__swhatbuf_r+0x12>
 8010c58:	9a01      	ldr	r2, [sp, #4]
 8010c5a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010c5e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010c62:	425a      	negs	r2, r3
 8010c64:	415a      	adcs	r2, r3
 8010c66:	602a      	str	r2, [r5, #0]
 8010c68:	e7ee      	b.n	8010c48 <__swhatbuf_r+0x1c>
 8010c6a:	2340      	movs	r3, #64	; 0x40
 8010c6c:	2000      	movs	r0, #0
 8010c6e:	6023      	str	r3, [r4, #0]
 8010c70:	b016      	add	sp, #88	; 0x58
 8010c72:	bd70      	pop	{r4, r5, r6, pc}

08010c74 <__smakebuf_r>:
 8010c74:	898b      	ldrh	r3, [r1, #12]
 8010c76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c78:	079d      	lsls	r5, r3, #30
 8010c7a:	4606      	mov	r6, r0
 8010c7c:	460c      	mov	r4, r1
 8010c7e:	d507      	bpl.n	8010c90 <__smakebuf_r+0x1c>
 8010c80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c84:	6023      	str	r3, [r4, #0]
 8010c86:	6123      	str	r3, [r4, #16]
 8010c88:	2301      	movs	r3, #1
 8010c8a:	6163      	str	r3, [r4, #20]
 8010c8c:	b002      	add	sp, #8
 8010c8e:	bd70      	pop	{r4, r5, r6, pc}
 8010c90:	ab01      	add	r3, sp, #4
 8010c92:	466a      	mov	r2, sp
 8010c94:	f7ff ffca 	bl	8010c2c <__swhatbuf_r>
 8010c98:	9900      	ldr	r1, [sp, #0]
 8010c9a:	4605      	mov	r5, r0
 8010c9c:	4630      	mov	r0, r6
 8010c9e:	f7ff fb23 	bl	80102e8 <_malloc_r>
 8010ca2:	b948      	cbnz	r0, 8010cb8 <__smakebuf_r+0x44>
 8010ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ca8:	059a      	lsls	r2, r3, #22
 8010caa:	d4ef      	bmi.n	8010c8c <__smakebuf_r+0x18>
 8010cac:	f023 0303 	bic.w	r3, r3, #3
 8010cb0:	f043 0302 	orr.w	r3, r3, #2
 8010cb4:	81a3      	strh	r3, [r4, #12]
 8010cb6:	e7e3      	b.n	8010c80 <__smakebuf_r+0xc>
 8010cb8:	4b0d      	ldr	r3, [pc, #52]	; (8010cf0 <__smakebuf_r+0x7c>)
 8010cba:	62b3      	str	r3, [r6, #40]	; 0x28
 8010cbc:	89a3      	ldrh	r3, [r4, #12]
 8010cbe:	6020      	str	r0, [r4, #0]
 8010cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cc4:	81a3      	strh	r3, [r4, #12]
 8010cc6:	9b00      	ldr	r3, [sp, #0]
 8010cc8:	6163      	str	r3, [r4, #20]
 8010cca:	9b01      	ldr	r3, [sp, #4]
 8010ccc:	6120      	str	r0, [r4, #16]
 8010cce:	b15b      	cbz	r3, 8010ce8 <__smakebuf_r+0x74>
 8010cd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010cd4:	4630      	mov	r0, r6
 8010cd6:	f000 f8c9 	bl	8010e6c <_isatty_r>
 8010cda:	b128      	cbz	r0, 8010ce8 <__smakebuf_r+0x74>
 8010cdc:	89a3      	ldrh	r3, [r4, #12]
 8010cde:	f023 0303 	bic.w	r3, r3, #3
 8010ce2:	f043 0301 	orr.w	r3, r3, #1
 8010ce6:	81a3      	strh	r3, [r4, #12]
 8010ce8:	89a0      	ldrh	r0, [r4, #12]
 8010cea:	4305      	orrs	r5, r0
 8010cec:	81a5      	strh	r5, [r4, #12]
 8010cee:	e7cd      	b.n	8010c8c <__smakebuf_r+0x18>
 8010cf0:	08010a85 	.word	0x08010a85

08010cf4 <_raise_r>:
 8010cf4:	291f      	cmp	r1, #31
 8010cf6:	b538      	push	{r3, r4, r5, lr}
 8010cf8:	4604      	mov	r4, r0
 8010cfa:	460d      	mov	r5, r1
 8010cfc:	d904      	bls.n	8010d08 <_raise_r+0x14>
 8010cfe:	2316      	movs	r3, #22
 8010d00:	6003      	str	r3, [r0, #0]
 8010d02:	f04f 30ff 	mov.w	r0, #4294967295
 8010d06:	bd38      	pop	{r3, r4, r5, pc}
 8010d08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010d0a:	b112      	cbz	r2, 8010d12 <_raise_r+0x1e>
 8010d0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d10:	b94b      	cbnz	r3, 8010d26 <_raise_r+0x32>
 8010d12:	4620      	mov	r0, r4
 8010d14:	f000 f830 	bl	8010d78 <_getpid_r>
 8010d18:	462a      	mov	r2, r5
 8010d1a:	4601      	mov	r1, r0
 8010d1c:	4620      	mov	r0, r4
 8010d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d22:	f000 b817 	b.w	8010d54 <_kill_r>
 8010d26:	2b01      	cmp	r3, #1
 8010d28:	d00a      	beq.n	8010d40 <_raise_r+0x4c>
 8010d2a:	1c59      	adds	r1, r3, #1
 8010d2c:	d103      	bne.n	8010d36 <_raise_r+0x42>
 8010d2e:	2316      	movs	r3, #22
 8010d30:	6003      	str	r3, [r0, #0]
 8010d32:	2001      	movs	r0, #1
 8010d34:	e7e7      	b.n	8010d06 <_raise_r+0x12>
 8010d36:	2400      	movs	r4, #0
 8010d38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010d3c:	4628      	mov	r0, r5
 8010d3e:	4798      	blx	r3
 8010d40:	2000      	movs	r0, #0
 8010d42:	e7e0      	b.n	8010d06 <_raise_r+0x12>

08010d44 <raise>:
 8010d44:	4b02      	ldr	r3, [pc, #8]	; (8010d50 <raise+0xc>)
 8010d46:	4601      	mov	r1, r0
 8010d48:	6818      	ldr	r0, [r3, #0]
 8010d4a:	f7ff bfd3 	b.w	8010cf4 <_raise_r>
 8010d4e:	bf00      	nop
 8010d50:	24000028 	.word	0x24000028

08010d54 <_kill_r>:
 8010d54:	b538      	push	{r3, r4, r5, lr}
 8010d56:	4d07      	ldr	r5, [pc, #28]	; (8010d74 <_kill_r+0x20>)
 8010d58:	2300      	movs	r3, #0
 8010d5a:	4604      	mov	r4, r0
 8010d5c:	4608      	mov	r0, r1
 8010d5e:	4611      	mov	r1, r2
 8010d60:	602b      	str	r3, [r5, #0]
 8010d62:	f7f2 f949 	bl	8002ff8 <_kill>
 8010d66:	1c43      	adds	r3, r0, #1
 8010d68:	d102      	bne.n	8010d70 <_kill_r+0x1c>
 8010d6a:	682b      	ldr	r3, [r5, #0]
 8010d6c:	b103      	cbz	r3, 8010d70 <_kill_r+0x1c>
 8010d6e:	6023      	str	r3, [r4, #0]
 8010d70:	bd38      	pop	{r3, r4, r5, pc}
 8010d72:	bf00      	nop
 8010d74:	24000d24 	.word	0x24000d24

08010d78 <_getpid_r>:
 8010d78:	f7f2 b936 	b.w	8002fe8 <_getpid>

08010d7c <__sread>:
 8010d7c:	b510      	push	{r4, lr}
 8010d7e:	460c      	mov	r4, r1
 8010d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d84:	f000 f894 	bl	8010eb0 <_read_r>
 8010d88:	2800      	cmp	r0, #0
 8010d8a:	bfab      	itete	ge
 8010d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8010d90:	181b      	addge	r3, r3, r0
 8010d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d96:	bfac      	ite	ge
 8010d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d9a:	81a3      	strhlt	r3, [r4, #12]
 8010d9c:	bd10      	pop	{r4, pc}

08010d9e <__swrite>:
 8010d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010da2:	461f      	mov	r7, r3
 8010da4:	898b      	ldrh	r3, [r1, #12]
 8010da6:	05db      	lsls	r3, r3, #23
 8010da8:	4605      	mov	r5, r0
 8010daa:	460c      	mov	r4, r1
 8010dac:	4616      	mov	r6, r2
 8010dae:	d505      	bpl.n	8010dbc <__swrite+0x1e>
 8010db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010db4:	2302      	movs	r3, #2
 8010db6:	2200      	movs	r2, #0
 8010db8:	f000 f868 	bl	8010e8c <_lseek_r>
 8010dbc:	89a3      	ldrh	r3, [r4, #12]
 8010dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010dc6:	81a3      	strh	r3, [r4, #12]
 8010dc8:	4632      	mov	r2, r6
 8010dca:	463b      	mov	r3, r7
 8010dcc:	4628      	mov	r0, r5
 8010dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dd2:	f000 b817 	b.w	8010e04 <_write_r>

08010dd6 <__sseek>:
 8010dd6:	b510      	push	{r4, lr}
 8010dd8:	460c      	mov	r4, r1
 8010dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dde:	f000 f855 	bl	8010e8c <_lseek_r>
 8010de2:	1c43      	adds	r3, r0, #1
 8010de4:	89a3      	ldrh	r3, [r4, #12]
 8010de6:	bf15      	itete	ne
 8010de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8010dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010df2:	81a3      	strheq	r3, [r4, #12]
 8010df4:	bf18      	it	ne
 8010df6:	81a3      	strhne	r3, [r4, #12]
 8010df8:	bd10      	pop	{r4, pc}

08010dfa <__sclose>:
 8010dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dfe:	f000 b813 	b.w	8010e28 <_close_r>
	...

08010e04 <_write_r>:
 8010e04:	b538      	push	{r3, r4, r5, lr}
 8010e06:	4d07      	ldr	r5, [pc, #28]	; (8010e24 <_write_r+0x20>)
 8010e08:	4604      	mov	r4, r0
 8010e0a:	4608      	mov	r0, r1
 8010e0c:	4611      	mov	r1, r2
 8010e0e:	2200      	movs	r2, #0
 8010e10:	602a      	str	r2, [r5, #0]
 8010e12:	461a      	mov	r2, r3
 8010e14:	f7f2 f927 	bl	8003066 <_write>
 8010e18:	1c43      	adds	r3, r0, #1
 8010e1a:	d102      	bne.n	8010e22 <_write_r+0x1e>
 8010e1c:	682b      	ldr	r3, [r5, #0]
 8010e1e:	b103      	cbz	r3, 8010e22 <_write_r+0x1e>
 8010e20:	6023      	str	r3, [r4, #0]
 8010e22:	bd38      	pop	{r3, r4, r5, pc}
 8010e24:	24000d24 	.word	0x24000d24

08010e28 <_close_r>:
 8010e28:	b538      	push	{r3, r4, r5, lr}
 8010e2a:	4d06      	ldr	r5, [pc, #24]	; (8010e44 <_close_r+0x1c>)
 8010e2c:	2300      	movs	r3, #0
 8010e2e:	4604      	mov	r4, r0
 8010e30:	4608      	mov	r0, r1
 8010e32:	602b      	str	r3, [r5, #0]
 8010e34:	f7f2 f933 	bl	800309e <_close>
 8010e38:	1c43      	adds	r3, r0, #1
 8010e3a:	d102      	bne.n	8010e42 <_close_r+0x1a>
 8010e3c:	682b      	ldr	r3, [r5, #0]
 8010e3e:	b103      	cbz	r3, 8010e42 <_close_r+0x1a>
 8010e40:	6023      	str	r3, [r4, #0]
 8010e42:	bd38      	pop	{r3, r4, r5, pc}
 8010e44:	24000d24 	.word	0x24000d24

08010e48 <_fstat_r>:
 8010e48:	b538      	push	{r3, r4, r5, lr}
 8010e4a:	4d07      	ldr	r5, [pc, #28]	; (8010e68 <_fstat_r+0x20>)
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	4604      	mov	r4, r0
 8010e50:	4608      	mov	r0, r1
 8010e52:	4611      	mov	r1, r2
 8010e54:	602b      	str	r3, [r5, #0]
 8010e56:	f7f2 f92e 	bl	80030b6 <_fstat>
 8010e5a:	1c43      	adds	r3, r0, #1
 8010e5c:	d102      	bne.n	8010e64 <_fstat_r+0x1c>
 8010e5e:	682b      	ldr	r3, [r5, #0]
 8010e60:	b103      	cbz	r3, 8010e64 <_fstat_r+0x1c>
 8010e62:	6023      	str	r3, [r4, #0]
 8010e64:	bd38      	pop	{r3, r4, r5, pc}
 8010e66:	bf00      	nop
 8010e68:	24000d24 	.word	0x24000d24

08010e6c <_isatty_r>:
 8010e6c:	b538      	push	{r3, r4, r5, lr}
 8010e6e:	4d06      	ldr	r5, [pc, #24]	; (8010e88 <_isatty_r+0x1c>)
 8010e70:	2300      	movs	r3, #0
 8010e72:	4604      	mov	r4, r0
 8010e74:	4608      	mov	r0, r1
 8010e76:	602b      	str	r3, [r5, #0]
 8010e78:	f7f2 f92d 	bl	80030d6 <_isatty>
 8010e7c:	1c43      	adds	r3, r0, #1
 8010e7e:	d102      	bne.n	8010e86 <_isatty_r+0x1a>
 8010e80:	682b      	ldr	r3, [r5, #0]
 8010e82:	b103      	cbz	r3, 8010e86 <_isatty_r+0x1a>
 8010e84:	6023      	str	r3, [r4, #0]
 8010e86:	bd38      	pop	{r3, r4, r5, pc}
 8010e88:	24000d24 	.word	0x24000d24

08010e8c <_lseek_r>:
 8010e8c:	b538      	push	{r3, r4, r5, lr}
 8010e8e:	4d07      	ldr	r5, [pc, #28]	; (8010eac <_lseek_r+0x20>)
 8010e90:	4604      	mov	r4, r0
 8010e92:	4608      	mov	r0, r1
 8010e94:	4611      	mov	r1, r2
 8010e96:	2200      	movs	r2, #0
 8010e98:	602a      	str	r2, [r5, #0]
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	f7f2 f926 	bl	80030ec <_lseek>
 8010ea0:	1c43      	adds	r3, r0, #1
 8010ea2:	d102      	bne.n	8010eaa <_lseek_r+0x1e>
 8010ea4:	682b      	ldr	r3, [r5, #0]
 8010ea6:	b103      	cbz	r3, 8010eaa <_lseek_r+0x1e>
 8010ea8:	6023      	str	r3, [r4, #0]
 8010eaa:	bd38      	pop	{r3, r4, r5, pc}
 8010eac:	24000d24 	.word	0x24000d24

08010eb0 <_read_r>:
 8010eb0:	b538      	push	{r3, r4, r5, lr}
 8010eb2:	4d07      	ldr	r5, [pc, #28]	; (8010ed0 <_read_r+0x20>)
 8010eb4:	4604      	mov	r4, r0
 8010eb6:	4608      	mov	r0, r1
 8010eb8:	4611      	mov	r1, r2
 8010eba:	2200      	movs	r2, #0
 8010ebc:	602a      	str	r2, [r5, #0]
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	f7f2 f8b4 	bl	800302c <_read>
 8010ec4:	1c43      	adds	r3, r0, #1
 8010ec6:	d102      	bne.n	8010ece <_read_r+0x1e>
 8010ec8:	682b      	ldr	r3, [r5, #0]
 8010eca:	b103      	cbz	r3, 8010ece <_read_r+0x1e>
 8010ecc:	6023      	str	r3, [r4, #0]
 8010ece:	bd38      	pop	{r3, r4, r5, pc}
 8010ed0:	24000d24 	.word	0x24000d24

08010ed4 <_init>:
 8010ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ed6:	bf00      	nop
 8010ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010eda:	bc08      	pop	{r3}
 8010edc:	469e      	mov	lr, r3
 8010ede:	4770      	bx	lr

08010ee0 <_fini>:
 8010ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ee2:	bf00      	nop
 8010ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010ee6:	bc08      	pop	{r3}
 8010ee8:	469e      	mov	lr, r3
 8010eea:	4770      	bx	lr
