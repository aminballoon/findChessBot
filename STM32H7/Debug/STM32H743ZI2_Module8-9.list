
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000126d4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e7c  08012978  08012978  00022978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080147f4  080147f4  000247f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080147fc  080147fc  000247fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08014804  08014804  00024804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000220  24000000  0801480c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000df4  24000220  08014a2c  00030220  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24001014  08014a2c  00031014  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b695  00000000  00000000  0003024e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005759  00000000  00000000  0006b8e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016b8  00000000  00000000  00071040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001510  00000000  00000000  000726f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e1f7  00000000  00000000  00073c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00022a80  00000000  00000000  000b1dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016dc6c  00000000  00000000  000d487f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002424eb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007194  00000000  00000000  00242540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000220 	.word	0x24000220
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801295c 	.word	0x0801295c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000224 	.word	0x24000224
 80002dc:	0801295c 	.word	0x0801295c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96e 	b.w	80009fc <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468c      	mov	ip, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8083 	bne.w	800084e <__udivmoddi4+0x116>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d947      	bls.n	80007de <__udivmoddi4+0xa6>
 800074e:	fab2 f282 	clz	r2, r2
 8000752:	b142      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000754:	f1c2 0020 	rsb	r0, r2, #32
 8000758:	fa24 f000 	lsr.w	r0, r4, r0
 800075c:	4091      	lsls	r1, r2
 800075e:	4097      	lsls	r7, r2
 8000760:	ea40 0c01 	orr.w	ip, r0, r1
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbbc f6f8 	udiv	r6, ip, r8
 8000770:	fa1f fe87 	uxth.w	lr, r7
 8000774:	fb08 c116 	mls	r1, r8, r6, ip
 8000778:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077c:	fb06 f10e 	mul.w	r1, r6, lr
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	f106 30ff 	add.w	r0, r6, #4294967295
 800078a:	f080 8119 	bcs.w	80009c0 <__udivmoddi4+0x288>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8116 	bls.w	80009c0 <__udivmoddi4+0x288>
 8000794:	3e02      	subs	r6, #2
 8000796:	443b      	add	r3, r7
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a0:	fb08 3310 	mls	r3, r8, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	193c      	adds	r4, r7, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8105 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 80007ba:	45a6      	cmp	lr, r4
 80007bc:	f240 8102 	bls.w	80009c4 <__udivmoddi4+0x28c>
 80007c0:	3802      	subs	r0, #2
 80007c2:	443c      	add	r4, r7
 80007c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	2600      	movs	r6, #0
 80007ce:	b11d      	cbz	r5, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c5 4300 	strd	r4, r3, [r5]
 80007d8:	4631      	mov	r1, r6
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	b902      	cbnz	r2, 80007e2 <__udivmoddi4+0xaa>
 80007e0:	deff      	udf	#255	; 0xff
 80007e2:	fab2 f282 	clz	r2, r2
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d150      	bne.n	800088c <__udivmoddi4+0x154>
 80007ea:	1bcb      	subs	r3, r1, r7
 80007ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	2601      	movs	r6, #1
 80007f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007fa:	0c21      	lsrs	r1, r4, #16
 80007fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb08 f30c 	mul.w	r3, r8, ip
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0xe4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0xe2>
 8000814:	428b      	cmp	r3, r1
 8000816:	f200 80e9 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 800081a:	4684      	mov	ip, r0
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1110 	mls	r1, lr, r0, r1
 8000828:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x10c>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x10a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80d9 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e7bf      	b.n	80007ce <__udivmoddi4+0x96>
 800084e:	428b      	cmp	r3, r1
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x12e>
 8000852:	2d00      	cmp	r5, #0
 8000854:	f000 80b1 	beq.w	80009ba <__udivmoddi4+0x282>
 8000858:	2600      	movs	r6, #0
 800085a:	e9c5 0100 	strd	r0, r1, [r5]
 800085e:	4630      	mov	r0, r6
 8000860:	4631      	mov	r1, r6
 8000862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000866:	fab3 f683 	clz	r6, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d14a      	bne.n	8000904 <__udivmoddi4+0x1cc>
 800086e:	428b      	cmp	r3, r1
 8000870:	d302      	bcc.n	8000878 <__udivmoddi4+0x140>
 8000872:	4282      	cmp	r2, r0
 8000874:	f200 80b8 	bhi.w	80009e8 <__udivmoddi4+0x2b0>
 8000878:	1a84      	subs	r4, r0, r2
 800087a:	eb61 0103 	sbc.w	r1, r1, r3
 800087e:	2001      	movs	r0, #1
 8000880:	468c      	mov	ip, r1
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0a8      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000886:	e9c5 4c00 	strd	r4, ip, [r5]
 800088a:	e7a5      	b.n	80007d8 <__udivmoddi4+0xa0>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f603 	lsr.w	r6, r0, r3
 8000894:	4097      	lsls	r7, r2
 8000896:	fa01 f002 	lsl.w	r0, r1, r2
 800089a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089e:	40d9      	lsrs	r1, r3
 80008a0:	4330      	orrs	r0, r6
 80008a2:	0c03      	lsrs	r3, r0, #16
 80008a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008a8:	fa1f f887 	uxth.w	r8, r7
 80008ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80008b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b4:	fb06 f108 	mul.w	r1, r6, r8
 80008b8:	4299      	cmp	r1, r3
 80008ba:	fa04 f402 	lsl.w	r4, r4, r2
 80008be:	d909      	bls.n	80008d4 <__udivmoddi4+0x19c>
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008c6:	f080 808d 	bcs.w	80009e4 <__udivmoddi4+0x2ac>
 80008ca:	4299      	cmp	r1, r3
 80008cc:	f240 808a 	bls.w	80009e4 <__udivmoddi4+0x2ac>
 80008d0:	3e02      	subs	r6, #2
 80008d2:	443b      	add	r3, r7
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b281      	uxth	r1, r0
 80008d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e4:	fb00 f308 	mul.w	r3, r0, r8
 80008e8:	428b      	cmp	r3, r1
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x1c4>
 80008ec:	1879      	adds	r1, r7, r1
 80008ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f2:	d273      	bcs.n	80009dc <__udivmoddi4+0x2a4>
 80008f4:	428b      	cmp	r3, r1
 80008f6:	d971      	bls.n	80009dc <__udivmoddi4+0x2a4>
 80008f8:	3802      	subs	r0, #2
 80008fa:	4439      	add	r1, r7
 80008fc:	1acb      	subs	r3, r1, r3
 80008fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000902:	e778      	b.n	80007f6 <__udivmoddi4+0xbe>
 8000904:	f1c6 0c20 	rsb	ip, r6, #32
 8000908:	fa03 f406 	lsl.w	r4, r3, r6
 800090c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000910:	431c      	orrs	r4, r3
 8000912:	fa20 f70c 	lsr.w	r7, r0, ip
 8000916:	fa01 f306 	lsl.w	r3, r1, r6
 800091a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800091e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000922:	431f      	orrs	r7, r3
 8000924:	0c3b      	lsrs	r3, r7, #16
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fa1f f884 	uxth.w	r8, r4
 800092e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000932:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000936:	fb09 fa08 	mul.w	sl, r9, r8
 800093a:	458a      	cmp	sl, r1
 800093c:	fa02 f206 	lsl.w	r2, r2, r6
 8000940:	fa00 f306 	lsl.w	r3, r0, r6
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x220>
 8000946:	1861      	adds	r1, r4, r1
 8000948:	f109 30ff 	add.w	r0, r9, #4294967295
 800094c:	d248      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 800094e:	458a      	cmp	sl, r1
 8000950:	d946      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 8000952:	f1a9 0902 	sub.w	r9, r9, #2
 8000956:	4421      	add	r1, r4
 8000958:	eba1 010a 	sub.w	r1, r1, sl
 800095c:	b2bf      	uxth	r7, r7
 800095e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000962:	fb0e 1110 	mls	r1, lr, r0, r1
 8000966:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800096a:	fb00 f808 	mul.w	r8, r0, r8
 800096e:	45b8      	cmp	r8, r7
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x24a>
 8000972:	19e7      	adds	r7, r4, r7
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d22e      	bcs.n	80009d8 <__udivmoddi4+0x2a0>
 800097a:	45b8      	cmp	r8, r7
 800097c:	d92c      	bls.n	80009d8 <__udivmoddi4+0x2a0>
 800097e:	3802      	subs	r0, #2
 8000980:	4427      	add	r7, r4
 8000982:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000986:	eba7 0708 	sub.w	r7, r7, r8
 800098a:	fba0 8902 	umull	r8, r9, r0, r2
 800098e:	454f      	cmp	r7, r9
 8000990:	46c6      	mov	lr, r8
 8000992:	4649      	mov	r1, r9
 8000994:	d31a      	bcc.n	80009cc <__udivmoddi4+0x294>
 8000996:	d017      	beq.n	80009c8 <__udivmoddi4+0x290>
 8000998:	b15d      	cbz	r5, 80009b2 <__udivmoddi4+0x27a>
 800099a:	ebb3 020e 	subs.w	r2, r3, lr
 800099e:	eb67 0701 	sbc.w	r7, r7, r1
 80009a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009a6:	40f2      	lsrs	r2, r6
 80009a8:	ea4c 0202 	orr.w	r2, ip, r2
 80009ac:	40f7      	lsrs	r7, r6
 80009ae:	e9c5 2700 	strd	r2, r7, [r5]
 80009b2:	2600      	movs	r6, #0
 80009b4:	4631      	mov	r1, r6
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e70b      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0x60>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6fd      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009c8:	4543      	cmp	r3, r8
 80009ca:	d2e5      	bcs.n	8000998 <__udivmoddi4+0x260>
 80009cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009d0:	eb69 0104 	sbc.w	r1, r9, r4
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7df      	b.n	8000998 <__udivmoddi4+0x260>
 80009d8:	4608      	mov	r0, r1
 80009da:	e7d2      	b.n	8000982 <__udivmoddi4+0x24a>
 80009dc:	4660      	mov	r0, ip
 80009de:	e78d      	b.n	80008fc <__udivmoddi4+0x1c4>
 80009e0:	4681      	mov	r9, r0
 80009e2:	e7b9      	b.n	8000958 <__udivmoddi4+0x220>
 80009e4:	4666      	mov	r6, ip
 80009e6:	e775      	b.n	80008d4 <__udivmoddi4+0x19c>
 80009e8:	4630      	mov	r0, r6
 80009ea:	e74a      	b.n	8000882 <__udivmoddi4+0x14a>
 80009ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f0:	4439      	add	r1, r7
 80009f2:	e713      	b.n	800081c <__udivmoddi4+0xe4>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	e724      	b.n	8000844 <__udivmoddi4+0x10c>
 80009fa:	bf00      	nop

080009fc <__aeabi_idiv0>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	601a      	str	r2, [r3, #0]
	this->address = _address;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	729a      	strb	r2, [r3, #10]
}
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

}
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f103 010a 	add.w	r1, r3, #10
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	2201      	movs	r2, #1
 8000a54:	f00c faf4 	bl	800d040 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f103 010c 	add.w	r1, r3, #12
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	2202      	movs	r2, #2
 8000a66:	f00c fb81 	bl	800d16c <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	899b      	ldrh	r3, [r3, #12]
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	899b      	ldrh	r3, [r3, #12]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	0bdb      	lsrs	r3, r3, #15
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	765a      	strb	r2, [r3, #25]
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(this->address), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	899b      	ldrh	r3, [r3, #12]
 8000aa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000aac:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	899b      	ldrh	r3, [r3, #12]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	899b      	ldrh	r3, [r3, #12]
 8000abe:	105b      	asrs	r3, r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	737b      	strb	r3, [r7, #13]
 8000acc:	7b7b      	ldrb	r3, [r7, #13]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d820      	bhi.n	8000b14 <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	899b      	ldrh	r3, [r3, #12]
 8000ad6:	109b      	asrs	r3, r3, #2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	899b      	ldrh	r3, [r3, #12]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	b25a      	sxtb	r2, r3
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4053      	eors	r3, r2
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	899b      	ldrh	r3, [r3, #12]
 8000af8:	105b      	asrs	r3, r3, #1
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	b25a      	sxtb	r2, r3
 8000b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b06:	4053      	eors	r3, r2
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000b0c:	7b7b      	ldrb	r3, [r7, #13]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	737b      	strb	r3, [r7, #13]
 8000b12:	e7db      	b.n	8000acc <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7e1b      	ldrb	r3, [r3, #24]
 8000b34:	7bfa      	ldrb	r2, [r7, #15]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d10a      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7e5b      	ldrb	r3, [r3, #25]
 8000b3e:	7bba      	ldrb	r2, [r7, #14]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d105      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 8000b44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e003      	b.n	8000b58 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
	}
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	135b      	asrs	r3, r3, #13
			+ (this->raw_value & 0x3FFF)) * -1;
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	0392      	lsls	r2, r2, #14
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b21b      	sxth	r3, r3
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb4:	fefb 7a67 	vrintm.f32	s15, s15
 8000bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bd4:	fef8 7a67 	vrinta.f32	s15, s15
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8000be6:	b480      	push	{r7}
 8000be8:	b085      	sub	sp, #20
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	22b4      	movs	r2, #180	; 0xb4
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	761a      	strb	r2, [r3, #24]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2200      	movs	r2, #0
 8000c14:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	22ef      	movs	r2, #239	; 0xef
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
}
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4610      	mov	r0, r2
 8000c70:	f00a ffd6 	bl	800bc20 <HAL_TIM_PWM_Start>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8000c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af02      	add	r7, sp, #8
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d13f      	bne.n	8000d0e <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691c      	ldr	r4, [r3, #16]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	ee07 3a90 	vmov	s15, r3
 8000ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca8:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb4:	f7ff ff87 	bl	8000bc6 <_ZSt5roundf>
 8000cb8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8000cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ccc:	3301      	adds	r3, #1
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd6:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cde:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce2:	f7ff ff60 	bl	8000ba6 <_ZSt5floorf>
 8000ce6:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8000cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cee:	ee17 3a90 	vmov	r3, s15
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	9600      	str	r6, [sp, #0]
 8000cf6:	462b      	mov	r3, r5
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	6839      	ldr	r1, [r7, #0]
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f9cf 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000d02:	4602      	mov	r2, r0
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 8000d0c:	e176      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d13f      	bne.n	8000d96 <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691c      	ldr	r4, [r3, #16]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d26:	3301      	adds	r3, #1
 8000d28:	ee07 3a90 	vmov	s15, r3
 8000d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d30:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d38:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3c:	f7ff ff43 	bl	8000bc6 <_ZSt5roundf>
 8000d40:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8000d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d48:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	3301      	adds	r3, #1
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d66:	eeb0 0a67 	vmov.f32	s0, s15
 8000d6a:	f7ff ff1c 	bl	8000ba6 <_ZSt5floorf>
 8000d6e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8000d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d76:	ee17 3a90 	vmov	r3, s15
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	9600      	str	r6, [sp, #0]
 8000d7e:	462b      	mov	r3, r5
 8000d80:	4622      	mov	r2, r4
 8000d82:	6839      	ldr	r1, [r7, #0]
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 f98b 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d94:	e132      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b08      	cmp	r3, #8
 8000d9c:	d13f      	bne.n	8000e1e <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691c      	ldr	r4, [r3, #16]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	3301      	adds	r3, #1
 8000db0:	ee07 3a90 	vmov	s15, r3
 8000db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc4:	f7ff feff 	bl	8000bc6 <_ZSt5roundf>
 8000dc8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8000dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	3301      	adds	r3, #1
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000dea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dee:	eeb0 0a67 	vmov.f32	s0, s15
 8000df2:	f7ff fed8 	bl	8000ba6 <_ZSt5floorf>
 8000df6:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8000dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dfe:	ee17 3a90 	vmov	r3, s15
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	9600      	str	r6, [sp, #0]
 8000e06:	462b      	mov	r3, r5
 8000e08:	4622      	mov	r2, r4
 8000e0a:	6839      	ldr	r1, [r7, #0]
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 f947 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000e12:	4602      	mov	r2, r0
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e1c:	e0ee      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b0c      	cmp	r3, #12
 8000e24:	d13f      	bne.n	8000ea6 <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	691c      	ldr	r4, [r3, #16]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	3301      	adds	r3, #1
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e40:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e48:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4c:	f7ff febb 	bl	8000bc6 <_ZSt5roundf>
 8000e50:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8000e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e58:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	3301      	adds	r3, #1
 8000e66:	ee07 3a90 	vmov	s15, r3
 8000e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e6e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e76:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7a:	f7ff fe94 	bl	8000ba6 <_ZSt5floorf>
 8000e7e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8000e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e86:	ee17 3a90 	vmov	r3, s15
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	9600      	str	r6, [sp, #0]
 8000e8e:	462b      	mov	r3, r5
 8000e90:	4622      	mov	r2, r4
 8000e92:	6839      	ldr	r1, [r7, #0]
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 f903 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ea4:	e0aa      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b10      	cmp	r3, #16
 8000eac:	d144      	bne.n	8000f38 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691c      	ldr	r4, [r3, #16]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	f7ff fe77 	bl	8000bc6 <_ZSt5roundf>
 8000ed8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8000edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	3301      	adds	r3, #1
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000efa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000efe:	eeb0 0a67 	vmov.f32	s0, s15
 8000f02:	f7ff fe50 	bl	8000ba6 <_ZSt5floorf>
 8000f06:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8000f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f0e:	ee17 3a90 	vmov	r3, s15
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	9600      	str	r6, [sp, #0]
 8000f16:	462b      	mov	r3, r5
 8000f18:	4622      	mov	r2, r4
 8000f1a:	6839      	ldr	r1, [r7, #0]
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f8bf 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000f22:	4602      	mov	r2, r0
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000f2c:	e066      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8000f2e:	bf00      	nop
 8000f30:	3d4ccccd 	.word	0x3d4ccccd
 8000f34:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b14      	cmp	r3, #20
 8000f3e:	d13f      	bne.n	8000fc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691c      	ldr	r4, [r3, #16]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	3301      	adds	r3, #1
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f5a:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f62:	eeb0 0a67 	vmov.f32	s0, s15
 8000f66:	f7ff fe2e 	bl	8000bc6 <_ZSt5roundf>
 8000f6a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8000f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f72:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	3301      	adds	r3, #1
 8000f80:	ee07 3a90 	vmov	s15, r3
 8000f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f88:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f90:	eeb0 0a67 	vmov.f32	s0, s15
 8000f94:	f7ff fe07 	bl	8000ba6 <_ZSt5floorf>
 8000f98:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8000f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa0:	ee17 3a90 	vmov	r3, s15
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	9600      	str	r6, [sp, #0]
 8000fa8:	462b      	mov	r3, r5
 8000faa:	4622      	mov	r2, r4
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f876 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000fbe:	e01d      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001004 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	761a      	strb	r2, [r3, #24]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	765a      	strb	r2, [r3, #25]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7e5b      	ldrb	r3, [r3, #25]
 8001054:	f083 0301 	eor.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d106      	bne.n	800106c <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	4619      	mov	r1, r3
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff fe09 	bl	8000c7c <_ZN10ServoMotor17ServoRotateDegreeEl>
 800106a:	e000      	b.n	800106e <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 800106c:	bf00      	nop
}
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7e1b      	ldrb	r3, [r3, #24]
 8001080:	f083 0301 	eor.w	r3, r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d106      	bne.n	8001098 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	4619      	mov	r1, r3
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff fdf3 	bl	8000c7c <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001096:	e000      	b.n	800109a <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001098:	bf00      	nop
}
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	69f9      	ldr	r1, [r7, #28]
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	1a8a      	subs	r2, r1, r2
 80010ba:	fb02 f203 	mul.w	r2, r2, r3
 80010be:	6839      	ldr	r1, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	1acb      	subs	r3, r1, r3
 80010c4:	fb92 f2f3 	sdiv	r2, r2, r3
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	4413      	add	r3, r2
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e6:	eef0 7ae7 	vabs.f32	s15, s15
 80010ea:	eeb0 0a67 	vmov.f32	s0, s15
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4a18      	ldr	r2, [pc, #96]	; (800116c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001110:	619a      	str	r2, [r3, #24]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001118:	61da      	str	r2, [r3, #28]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4a15      	ldr	r2, [pc, #84]	; (8001174 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 800111e:	621a      	str	r2, [r3, #32]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	22c7      	movs	r2, #199	; 0xc7
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 60.0f;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 8001142:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001148:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 800114a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800117c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 f832 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	60da      	str	r2, [r3, #12]
}
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	41a00000 	.word	0x41a00000
 8001170:	469c4000 	.word	0x469c4000
 8001174:	43480000 	.word	0x43480000
 8001178:	42700000 	.word	0x42700000
 800117c:	00000000 	.word	0x00000000

08001180 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
}
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4610      	mov	r0, r2
 80011aa:	f00a fd39 	bl	800bc20 <HAL_TIM_PWM_Start>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	ed2d 8b02 	vpush	{d8}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	f7ff ff7e 	bl	80010d8 <_ZSt4fabsf>
 80011dc:	eeb0 7a40 	vmov.f32	s14, s0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80011e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	bf94      	ite	ls
 80011f0:	2301      	movls	r3, #1
 80011f2:	2300      	movhi	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e01b      	b.n	800123a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edd3 7a04 	vldr	s15, [r3, #16]
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	f7ff ff64 	bl	80010d8 <_ZSt4fabsf>
 8001210:	eeb0 7a40 	vmov.f32	s14, s0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edd3 7a06 	vldr	s15, [r3, #24]
 800121a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	bfac      	ite	ge
 8001224:	2301      	movge	r3, #1
 8001226:	2300      	movlt	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	e001      	b.n	800123a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001240:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80014dc <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	f2c0 80db 	blt.w	8001406 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6898      	ldr	r0, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	b29b      	uxth	r3, r3
 800125a:	2201      	movs	r2, #1
 800125c:	4619      	mov	r1, r3
 800125e:	f007 fed7 	bl	8009010 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126a:	3301      	adds	r3, #1
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001274:	edd7 7a03 	vldr	s15, [r7, #12]
 8001278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127c:	eddf 6a98 	vldr	s13, [pc, #608]	; 80014e0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001280:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001288:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800128c:	eeb0 0a67 	vmov.f32	s0, s15
 8001290:	f7ff fc99 	bl	8000bc6 <_ZSt5roundf>
 8001294:	eef0 7a40 	vmov.f32	s15, s0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a2:	ee17 2a90 	vmov	r2, s15
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d113      	bne.n	80012d8 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 80012ba:	085b      	lsrs	r3, r3, #1
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fa5b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80012c2:	eeb0 7b40 	vmov.f64	d7, d0
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012d0:	ee17 2a90 	vmov	r2, s15
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 80012d6:	e1e0      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d113      	bne.n	8001308 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fa43 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80012f2:	eeb0 7b40 	vmov.f64	d7, d0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001300:	ee17 2a90 	vmov	r2, s15
 8001304:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001306:	e1c8      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b08      	cmp	r3, #8
 800130e:	d113      	bne.n	8001338 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 800131a:	085b      	lsrs	r3, r3, #1
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fa2b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001322:	eeb0 7b40 	vmov.f64	d7, d0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001330:	ee17 2a90 	vmov	r2, s15
 8001334:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001336:	e1b0      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b0c      	cmp	r3, #12
 800133e:	d113      	bne.n	8001368 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fa13 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001352:	eeb0 7b40 	vmov.f64	d7, d0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001360:	ee17 2a90 	vmov	r2, s15
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001366:	e198      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b10      	cmp	r3, #16
 800136e:	d113      	bne.n	8001398 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800137a:	085b      	lsrs	r3, r3, #1
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f9fb 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001382:	eeb0 7b40 	vmov.f64	d7, d0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001390:	ee17 2a90 	vmov	r2, s15
 8001394:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001396:	e180      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b14      	cmp	r3, #20
 800139e:	d113      	bne.n	80013c8 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 80013aa:	085b      	lsrs	r3, r3, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f9e3 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80013b2:	eeb0 7b40 	vmov.f64	d7, d0
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80013c0:	ee17 2a90 	vmov	r2, s15
 80013c4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80013c6:	e168      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2200      	movs	r2, #0
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2200      	movs	r2, #0
 80013da:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2200      	movs	r2, #0
 80013e4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2200      	movs	r2, #0
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2200      	movs	r2, #0
 8001402:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001404:	e149      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edd3 7a04 	vldr	s15, [r3, #16]
 800140c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80014e4 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8001410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	f200 80e5 	bhi.w	80015e6 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6898      	ldr	r0, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	b29b      	uxth	r3, r3
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	f007 fdf1 	bl	8009010 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	3301      	adds	r3, #1
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001440:	ed97 0a03 	vldr	s0, [r7, #12]
 8001444:	f7ff fe48 	bl	80010d8 <_ZSt4fabsf>
 8001448:	eef0 7a40 	vmov.f32	s15, s0
 800144c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001450:	eddf 6a23 	vldr	s13, [pc, #140]	; 80014e0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001454:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800145c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	f7ff fbaf 	bl	8000bc6 <_ZSt5roundf>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001476:	ee17 2a90 	vmov	r2, s15
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d113      	bne.n	80014ac <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f971 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001496:	eeb0 7b40 	vmov.f64	d7, d0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014a4:	ee17 2a90 	vmov	r2, s15
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014aa:	e0f6      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d119      	bne.n	80014e8 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 80014be:	085b      	lsrs	r3, r3, #1
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f959 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80014c6:	eeb0 7b40 	vmov.f64	d7, d0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014d4:	ee17 2a90 	vmov	r2, s15
 80014d8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014da:	e0de      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 80014dc:	3a83126f 	.word	0x3a83126f
 80014e0:	4d64e1c0 	.word	0x4d64e1c0
 80014e4:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d113      	bne.n	8001518 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 80014fa:	085b      	lsrs	r3, r3, #1
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f93b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001502:	eeb0 7b40 	vmov.f64	d7, d0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001510:	ee17 2a90 	vmov	r2, s15
 8001514:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001516:	e0c0      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b0c      	cmp	r3, #12
 800151e:	d113      	bne.n	8001548 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f923 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001532:	eeb0 7b40 	vmov.f64	d7, d0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001540:	ee17 2a90 	vmov	r2, s15
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001546:	e0a8      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b10      	cmp	r3, #16
 800154e:	d113      	bne.n	8001578 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f90b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001562:	eeb0 7b40 	vmov.f64	d7, d0
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001570:	ee17 2a90 	vmov	r2, s15
 8001574:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001576:	e090      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b14      	cmp	r3, #20
 800157e:	d113      	bne.n	80015a8 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f8f3 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001592:	eeb0 7b40 	vmov.f64	d7, d0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80015a0:	ee17 2a90 	vmov	r2, s15
 80015a4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015a6:	e078      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2200      	movs	r2, #0
 80015e2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015e4:	e059      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d105      	bne.n	80015fa <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2200      	movs	r2, #0
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015f8:	e04f      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d105      	bne.n	800160e <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2200      	movs	r2, #0
 800160a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800160c:	e045      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b08      	cmp	r3, #8
 8001614:	d105      	bne.n	8001622 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2200      	movs	r2, #0
 800161e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001620:	e03b      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b0c      	cmp	r3, #12
 8001628:	d105      	bne.n	8001636 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001634:	e031      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b10      	cmp	r3, #16
 800163c:	d105      	bne.n	800164a <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001648:	e027      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b14      	cmp	r3, #20
 8001650:	d105      	bne.n	800165e <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800165c:	e01d      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2200      	movs	r2, #0
 800167a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2200      	movs	r2, #0
 8001698:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	ecbd 8b02 	vpop	{d8}
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop

080016a8 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 80016b4:	ed97 0a00 	vldr	s0, [r7]
 80016b8:	f7ff fd0e 	bl	80010d8 <_ZSt4fabsf>
 80016bc:	eef0 7a40 	vmov.f32	s15, s0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016e2:	eeb0 0b47 	vmov.f64	d0, d7
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ffe5 	bl	80016ce <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001704:	eeb0 7b40 	vmov.f64	d7, d0
 8001708:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	0000      	movs	r0, r0
 800171c:	0000      	movs	r0, r0
	...

08001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>:
void Stepper::StepperOpenLoopSpeed(float _speed) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001732:	edd7 7a00 	vldr	s15, [r7]
 8001736:	ee27 7a27 	vmul.f32	s14, s14, s15
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	edd3 7a08 	vldr	s15, [r3, #32]
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI)));
 8001752:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8001770 <_ZN7Stepper20StepperOpenLoopSpeedEf+0x50>
 8001756:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 800175a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800175e:	eeb0 0a67 	vmov.f32	s0, s15
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fd28 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	54442eea 	.word	0x54442eea
 8001774:	401921fb 	.word	0x401921fb

08001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	ee07 3a90 	vmov	s15, r3
 8001786:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800178a:	eeb0 0b47 	vmov.f64	d0, d7
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_CRC_Init+0x54>)
 800179e:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <MX_CRC_Init+0x58>)
 80017a0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_CRC_Init+0x54>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_CRC_Init+0x54>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_CRC_Init+0x54>)
 80017b0:	f248 0205 	movw	r2, #32773	; 0x8005
 80017b4:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <MX_CRC_Init+0x54>)
 80017b8:	2208      	movs	r2, #8
 80017ba:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_CRC_Init+0x54>)
 80017be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c2:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_CRC_Init+0x54>)
 80017c6:	2220      	movs	r2, #32
 80017c8:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_CRC_Init+0x54>)
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_CRC_Init+0x54>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_CRC_Init+0x54>)
 80017d8:	f004 fa32 	bl	8005c40 <HAL_CRC_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80017e2:	f002 fa95 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	24000808 	.word	0x24000808
 80017f0:	58024c00 	.word	0x58024c00

080017f4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_CRC_MspInit+0x3c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10e      	bne.n	8001824 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_CRC_MspInit+0x40>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180c:	4a09      	ldr	r2, [pc, #36]	; (8001834 <HAL_CRC_MspInit+0x40>)
 800180e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_CRC_MspInit+0x40>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	58024c00 	.word	0x58024c00
 8001834:	58024400 	.word	0x58024400

08001838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800183e:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <MX_DMA_Init+0x7c>)
 8001840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <MX_DMA_Init+0x7c>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <MX_DMA_Init+0x7c>)
 8001850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	200b      	movs	r0, #11
 8001862:	f004 f9ac 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001866:	200b      	movs	r0, #11
 8001868:	f004 f9c3 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	200c      	movs	r0, #12
 8001872:	f004 f9a4 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001876:	200c      	movs	r0, #12
 8001878:	f004 f9bb 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	200d      	movs	r0, #13
 8001882:	f004 f99c 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001886:	200d      	movs	r0, #13
 8001888:	f004 f9b3 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	200e      	movs	r0, #14
 8001892:	f004 f994 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001896:	200e      	movs	r0, #14
 8001898:	f004 f9ab 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	200f      	movs	r0, #15
 80018a2:	f004 f98c 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f004 f9a3 	bl	8005bf2 <HAL_NVIC_EnableIRQ>

}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	58024400 	.word	0x58024400

080018b8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ce:	4b8e      	ldr	r3, [pc, #568]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d4:	4a8c      	ldr	r2, [pc, #560]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018d6:	f043 0310 	orr.w	r3, r3, #16
 80018da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018de:	4b8a      	ldr	r3, [pc, #552]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ec:	4b86      	ldr	r3, [pc, #536]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f2:	4a85      	ldr	r2, [pc, #532]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fc:	4b82      	ldr	r3, [pc, #520]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190a:	4b7f      	ldr	r3, [pc, #508]	; (8001b08 <MX_GPIO_Init+0x250>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001910:	4a7d      	ldr	r2, [pc, #500]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191a:	4b7b      	ldr	r3, [pc, #492]	; (8001b08 <MX_GPIO_Init+0x250>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b77      	ldr	r3, [pc, #476]	; (8001b08 <MX_GPIO_Init+0x250>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192e:	4a76      	ldr	r2, [pc, #472]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001938:	4b73      	ldr	r3, [pc, #460]	; (8001b08 <MX_GPIO_Init+0x250>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b70      	ldr	r3, [pc, #448]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194c:	4a6e      	ldr	r2, [pc, #440]	; (8001b08 <MX_GPIO_Init+0x250>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001956:	4b6c      	ldr	r3, [pc, #432]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196a:	4a67      	ldr	r2, [pc, #412]	; (8001b08 <MX_GPIO_Init+0x250>)
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001974:	4b64      	ldr	r3, [pc, #400]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001982:	4b61      	ldr	r3, [pc, #388]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	4a5f      	ldr	r2, [pc, #380]	; (8001b08 <MX_GPIO_Init+0x250>)
 800198a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800198e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001992:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80019a0:	2200      	movs	r2, #0
 80019a2:	f644 2121 	movw	r1, #18977	; 0x4a21
 80019a6:	4859      	ldr	r0, [pc, #356]	; (8001b0c <MX_GPIO_Init+0x254>)
 80019a8:	f007 fb32 	bl	8009010 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f24c 0102 	movw	r1, #49154	; 0xc002
 80019b2:	4857      	ldr	r0, [pc, #348]	; (8001b10 <MX_GPIO_Init+0x258>)
 80019b4:	f007 fb2c 	bl	8009010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019be:	4855      	ldr	r0, [pc, #340]	; (8001b14 <MX_GPIO_Init+0x25c>)
 80019c0:	f007 fb26 	bl	8009010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ca:	4853      	ldr	r0, [pc, #332]	; (8001b18 <MX_GPIO_Init+0x260>)
 80019cc:	f007 fb20 	bl	8009010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d6:	4851      	ldr	r0, [pc, #324]	; (8001b1c <MX_GPIO_Init+0x264>)
 80019d8:	f007 fb1a 	bl	8009010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 80019dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	4849      	ldr	r0, [pc, #292]	; (8001b18 <MX_GPIO_Init+0x260>)
 80019f4:	f007 f95c 	bl	8008cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80019f8:	f644 2321 	movw	r3, #18977	; 0x4a21
 80019fc:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	483e      	ldr	r0, [pc, #248]	; (8001b0c <MX_GPIO_Init+0x254>)
 8001a12:	f007 f94d 	bl	8008cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001a16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4838      	ldr	r0, [pc, #224]	; (8001b10 <MX_GPIO_Init+0x258>)
 8001a2e:	f007 f93f 	bl	8008cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001a32:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4831      	ldr	r0, [pc, #196]	; (8001b10 <MX_GPIO_Init+0x258>)
 8001a4c:	f007 f930 	bl	8008cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	4619      	mov	r1, r3
 8001a68:	482a      	ldr	r0, [pc, #168]	; (8001b14 <MX_GPIO_Init+0x25c>)
 8001a6a:	f007 f921 	bl	8008cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4824      	ldr	r0, [pc, #144]	; (8001b18 <MX_GPIO_Init+0x260>)
 8001a88:	f007 f912 	bl	8008cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8001a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	481d      	ldr	r0, [pc, #116]	; (8001b1c <MX_GPIO_Init+0x264>)
 8001aa6:	f007 f903 	bl	8008cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001aaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ab0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4817      	ldr	r0, [pc, #92]	; (8001b20 <MX_GPIO_Init+0x268>)
 8001ac2:	f007 f8f5 	bl	8008cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001ac6:	23c0      	movs	r3, #192	; 0xc0
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480c      	ldr	r0, [pc, #48]	; (8001b0c <MX_GPIO_Init+0x254>)
 8001adc:	f007 f8e8 	bl	8008cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2017      	movs	r0, #23
 8001ae6:	f004 f86a 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001aea:	2017      	movs	r0, #23
 8001aec:	f004 f881 	bl	8005bf2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2028      	movs	r0, #40	; 0x28
 8001af6:	f004 f862 	bl	8005bbe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001afa:	2028      	movs	r0, #40	; 0x28
 8001afc:	f004 f879 	bl	8005bf2 <HAL_NVIC_EnableIRQ>

}
 8001b00:	bf00      	nop
 8001b02:	3730      	adds	r7, #48	; 0x30
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	58024400 	.word	0x58024400
 8001b0c:	58020400 	.word	0x58020400
 8001b10:	58021000 	.word	0x58021000
 8001b14:	58020c00 	.word	0x58020c00
 8001b18:	58020800 	.word	0x58020800
 8001b1c:	58020000 	.word	0x58020000
 8001b20:	58021800 	.word	0x58021800

08001b24 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b32:	eef0 7ae7 	vabs.f32	s15, s15
 8001b36:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b4e:	edc7 0a00 	vstr	s1, [r7]
 8001b52:	edd7 0a00 	vldr	s1, [r7]
 8001b56:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b5a:	f00e f875 	bl	800fc48 <atan2f>
 8001b5e:	eef0 7a40 	vmov.f32	s15, s0
 8001b62:	eeb0 0a67 	vmov.f32	s0, s15
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b76:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b7a:	f00d fbf5 	bl	800f368 <cosf>
 8001b7e:	eef0 7a40 	vmov.f32	s15, s0
 8001b82:	eeb0 0a67 	vmov.f32	s0, s15
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b96:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b9a:	f00d ffb5 	bl	800fb08 <sinf>
 8001b9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bb6:	ed97 0a01 	vldr	s0, [r7, #4]
 8001bba:	f00e f847 	bl	800fc4c <sqrtf>
 8001bbe:	eef0 7a40 	vmov.f32	s15, s0
 8001bc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_UARTEx_RxEventCallback>:
#define Rx_BUFFER_SIZE   20
uint8_t Old_Rx_Buffer[Rx_BUFFER_SIZE] = { 0 };
uint8_t New_Rx_Buffer[Rx_BUFFER_SIZE] = { 0 };
volatile uint16_t cmdDataSize = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001bcc:	b5b0      	push	{r4, r5, r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a99      	ldr	r2, [pc, #612]	; (8001e40 <HAL_UARTEx_RxEventCallback+0x274>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	f040 8200 	bne.w	8001fe2 <HAL_UARTEx_RxEventCallback+0x416>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 8001be2:	4a98      	ldr	r2, [pc, #608]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001be4:	4b98      	ldr	r3, [pc, #608]	; (8001e48 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001be6:	4614      	mov	r4, r2
 8001be8:	461d      	mov	r5, r3
 8001bea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bee:	682b      	ldr	r3, [r5, #0]
 8001bf0:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 8001bf2:	2214      	movs	r2, #20
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4894      	ldr	r0, [pc, #592]	; (8001e48 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001bf8:	f00e fa76 	bl	80100e8 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	f240 81de 	bls.w	8001fc0 <HAL_UARTEx_RxEventCallback+0x3f4>
 8001c04:	887b      	ldrh	r3, [r7, #2]
 8001c06:	2b14      	cmp	r3, #20
 8001c08:	f200 81da 	bhi.w	8001fc0 <HAL_UARTEx_RxEventCallback+0x3f4>
			cmdDataSize = Size - 2;	// Calculate data length.
 8001c0c:	887b      	ldrh	r3, [r7, #2]
 8001c0e:	3b02      	subs	r3, #2
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b8e      	ldr	r3, [pc, #568]	; (8001e4c <HAL_UARTEx_RxEventCallback+0x280>)
 8001c14:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 8001c16:	4b8d      	ldr	r3, [pc, #564]	; (8001e4c <HAL_UARTEx_RxEventCallback+0x280>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4989      	ldr	r1, [pc, #548]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c20:	488b      	ldr	r0, [pc, #556]	; (8001e50 <HAL_UARTEx_RxEventCallback+0x284>)
 8001c22:	f004 f871 	bl	8005d08 <HAL_CRC_Calculate>
 8001c26:	4603      	mov	r3, r0
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	4b8a      	ldr	r3, [pc, #552]	; (8001e54 <HAL_UARTEx_RxEventCallback+0x288>)
 8001c2c:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8001c2e:	4b87      	ldr	r3, [pc, #540]	; (8001e4c <HAL_UARTEx_RxEventCallback+0x280>)
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b83      	ldr	r3, [pc, #524]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c38:	5c9b      	ldrb	r3, [r3, r2]
 8001c3a:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8001c3c:	b21a      	sxth	r2, r3
 8001c3e:	4b83      	ldr	r3, [pc, #524]	; (8001e4c <HAL_UARTEx_RxEventCallback+0x280>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3301      	adds	r3, #1
 8001c46:	497f      	ldr	r1, [pc, #508]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c48:	5ccb      	ldrb	r3, [r1, r3]
 8001c4a:	b21b      	sxth	r3, r3
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8001c52:	4b81      	ldr	r3, [pc, #516]	; (8001e58 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001c54:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001c56:	4b7f      	ldr	r3, [pc, #508]	; (8001e54 <HAL_UARTEx_RxEventCallback+0x288>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	4b7e      	ldr	r3, [pc, #504]	; (8001e58 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	429a      	cmp	r2, r3
 8001c64:	bf0c      	ite	eq
 8001c66:	2301      	moveq	r3, #1
 8001c68:	2300      	movne	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 81c9 	beq.w	8002004 <HAL_UARTEx_RxEventCallback+0x438>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001c72:	2201      	movs	r2, #1
 8001c74:	2102      	movs	r1, #2
 8001c76:	4879      	ldr	r0, [pc, #484]	; (8001e5c <HAL_UARTEx_RxEventCallback+0x290>)
 8001c78:	f007 f9ca 	bl	8009010 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c82:	4877      	ldr	r0, [pc, #476]	; (8001e60 <HAL_UARTEx_RxEventCallback+0x294>)
 8001c84:	f007 f9c4 	bl	8009010 <HAL_GPIO_WritePin>
				if (Old_Rx_Buffer[0] == 0x41 && cmdDataSize == 3) {	// Joint Jog q1
 8001c88:	4b6e      	ldr	r3, [pc, #440]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b41      	cmp	r3, #65	; 0x41
 8001c8e:	d106      	bne.n	8001c9e <HAL_UARTEx_RxEventCallback+0xd2>
 8001c90:	4b6e      	ldr	r3, [pc, #440]	; (8001e4c <HAL_UARTEx_RxEventCallback+0x280>)
 8001c92:	881b      	ldrh	r3, [r3, #0]
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	2b03      	cmp	r3, #3
 8001c98:	d101      	bne.n	8001c9e <HAL_UARTEx_RxEventCallback+0xd2>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_UARTEx_RxEventCallback+0xd4>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00b      	beq.n	8001cbc <HAL_UARTEx_RxEventCallback+0xf0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001ca4:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001ca6:	785b      	ldrb	r3, [r3, #1]
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	b25a      	sxtb	r2, r3
 8001cac:	4b65      	ldr	r3, [pc, #404]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001cae:	789b      	ldrb	r3, [r3, #2]
 8001cb0:	b25b      	sxtb	r3, r3
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b25a      	sxtb	r2, r3
 8001cb6:	4b6b      	ldr	r3, [pc, #428]	; (8001e64 <HAL_UARTEx_RxEventCallback+0x298>)
 8001cb8:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001cba:	e1a3      	b.n	8002004 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x42 && cmdDataSize == 3) {// Joint Jog q2
 8001cbc:	4b61      	ldr	r3, [pc, #388]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b42      	cmp	r3, #66	; 0x42
 8001cc2:	d106      	bne.n	8001cd2 <HAL_UARTEx_RxEventCallback+0x106>
 8001cc4:	4b61      	ldr	r3, [pc, #388]	; (8001e4c <HAL_UARTEx_RxEventCallback+0x280>)
 8001cc6:	881b      	ldrh	r3, [r3, #0]
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d101      	bne.n	8001cd2 <HAL_UARTEx_RxEventCallback+0x106>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_UARTEx_RxEventCallback+0x108>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00b      	beq.n	8001cf0 <HAL_UARTEx_RxEventCallback+0x124>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq2 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001cd8:	4b5a      	ldr	r3, [pc, #360]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001cda:	785b      	ldrb	r3, [r3, #1]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	b25a      	sxtb	r2, r3
 8001ce0:	4b58      	ldr	r3, [pc, #352]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001ce2:	789b      	ldrb	r3, [r3, #2]
 8001ce4:	b25b      	sxtb	r3, r3
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	b25a      	sxtb	r2, r3
 8001cea:	4b5f      	ldr	r3, [pc, #380]	; (8001e68 <HAL_UARTEx_RxEventCallback+0x29c>)
 8001cec:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001cee:	e189      	b.n	8002004 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x43 && cmdDataSize == 3) {// Joint Jog q3
 8001cf0:	4b54      	ldr	r3, [pc, #336]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b43      	cmp	r3, #67	; 0x43
 8001cf6:	d106      	bne.n	8001d06 <HAL_UARTEx_RxEventCallback+0x13a>
 8001cf8:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <HAL_UARTEx_RxEventCallback+0x280>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	2b03      	cmp	r3, #3
 8001d00:	d101      	bne.n	8001d06 <HAL_UARTEx_RxEventCallback+0x13a>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_UARTEx_RxEventCallback+0x13c>
 8001d06:	2300      	movs	r3, #0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00b      	beq.n	8001d24 <HAL_UARTEx_RxEventCallback+0x158>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq3 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001d0c:	4b4d      	ldr	r3, [pc, #308]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d0e:	785b      	ldrb	r3, [r3, #1]
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	b25a      	sxtb	r2, r3
 8001d14:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d16:	789b      	ldrb	r3, [r3, #2]
 8001d18:	b25b      	sxtb	r3, r3
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	b25a      	sxtb	r2, r3
 8001d1e:	4b53      	ldr	r3, [pc, #332]	; (8001e6c <HAL_UARTEx_RxEventCallback+0x2a0>)
 8001d20:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d22:	e16f      	b.n	8002004 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x44 && cmdDataSize == 3) {// Joint Jog q4
 8001d24:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b44      	cmp	r3, #68	; 0x44
 8001d2a:	d106      	bne.n	8001d3a <HAL_UARTEx_RxEventCallback+0x16e>
 8001d2c:	4b47      	ldr	r3, [pc, #284]	; (8001e4c <HAL_UARTEx_RxEventCallback+0x280>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d101      	bne.n	8001d3a <HAL_UARTEx_RxEventCallback+0x16e>
 8001d36:	2301      	movs	r3, #1
 8001d38:	e000      	b.n	8001d3c <HAL_UARTEx_RxEventCallback+0x170>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00b      	beq.n	8001d58 <HAL_UARTEx_RxEventCallback+0x18c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq4 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001d40:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d42:	785b      	ldrb	r3, [r3, #1]
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b25a      	sxtb	r2, r3
 8001d48:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d4a:	789b      	ldrb	r3, [r3, #2]
 8001d4c:	b25b      	sxtb	r3, r3
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	b25a      	sxtb	r2, r3
 8001d52:	4b47      	ldr	r3, [pc, #284]	; (8001e70 <HAL_UARTEx_RxEventCallback+0x2a4>)
 8001d54:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d56:	e155      	b.n	8002004 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x51 && cmdDataSize == 3) {// Linear Jog X
 8001d58:	4b3a      	ldr	r3, [pc, #232]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b51      	cmp	r3, #81	; 0x51
 8001d5e:	d106      	bne.n	8001d6e <HAL_UARTEx_RxEventCallback+0x1a2>
 8001d60:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <HAL_UARTEx_RxEventCallback+0x280>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d101      	bne.n	8001d6e <HAL_UARTEx_RxEventCallback+0x1a2>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_UARTEx_RxEventCallback+0x1a4>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00b      	beq.n	8001d8c <HAL_UARTEx_RxEventCallback+0x1c0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001d74:	4b33      	ldr	r3, [pc, #204]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d76:	785b      	ldrb	r3, [r3, #1]
 8001d78:	021b      	lsls	r3, r3, #8
 8001d7a:	b25a      	sxtb	r2, r3
 8001d7c:	4b31      	ldr	r3, [pc, #196]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d7e:	789b      	ldrb	r3, [r3, #2]
 8001d80:	b25b      	sxtb	r3, r3
 8001d82:	4313      	orrs	r3, r2
 8001d84:	b25a      	sxtb	r2, r3
 8001d86:	4b3b      	ldr	r3, [pc, #236]	; (8001e74 <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001d88:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d8a:	e13b      	b.n	8002004 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x52 && cmdDataSize == 3) {// Linear Jog Y
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b52      	cmp	r3, #82	; 0x52
 8001d92:	d106      	bne.n	8001da2 <HAL_UARTEx_RxEventCallback+0x1d6>
 8001d94:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_UARTEx_RxEventCallback+0x280>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d101      	bne.n	8001da2 <HAL_UARTEx_RxEventCallback+0x1d6>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_UARTEx_RxEventCallback+0x1d8>
 8001da2:	2300      	movs	r3, #0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00b      	beq.n	8001dc0 <HAL_UARTEx_RxEventCallback+0x1f4>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dy = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001da8:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001daa:	785b      	ldrb	r3, [r3, #1]
 8001dac:	021b      	lsls	r3, r3, #8
 8001dae:	b25a      	sxtb	r2, r3
 8001db0:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001db2:	789b      	ldrb	r3, [r3, #2]
 8001db4:	b25b      	sxtb	r3, r3
 8001db6:	4313      	orrs	r3, r2
 8001db8:	b25a      	sxtb	r2, r3
 8001dba:	4b2f      	ldr	r3, [pc, #188]	; (8001e78 <HAL_UARTEx_RxEventCallback+0x2ac>)
 8001dbc:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001dbe:	e121      	b.n	8002004 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x53 && cmdDataSize == 3) {// Linear Jog Z
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b53      	cmp	r3, #83	; 0x53
 8001dc6:	d106      	bne.n	8001dd6 <HAL_UARTEx_RxEventCallback+0x20a>
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <HAL_UARTEx_RxEventCallback+0x280>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	2b03      	cmp	r3, #3
 8001dd0:	d101      	bne.n	8001dd6 <HAL_UARTEx_RxEventCallback+0x20a>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_UARTEx_RxEventCallback+0x20c>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00b      	beq.n	8001df4 <HAL_UARTEx_RxEventCallback+0x228>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dz = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001ddc:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001dde:	785b      	ldrb	r3, [r3, #1]
 8001de0:	021b      	lsls	r3, r3, #8
 8001de2:	b25a      	sxtb	r2, r3
 8001de4:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001de6:	789b      	ldrb	r3, [r3, #2]
 8001de8:	b25b      	sxtb	r3, r3
 8001dea:	4313      	orrs	r3, r2
 8001dec:	b25a      	sxtb	r2, r3
 8001dee:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_UARTEx_RxEventCallback+0x2b0>)
 8001df0:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001df2:	e107      	b.n	8002004 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
 8001df4:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b54      	cmp	r3, #84	; 0x54
 8001dfa:	d106      	bne.n	8001e0a <HAL_UARTEx_RxEventCallback+0x23e>
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <HAL_UARTEx_RxEventCallback+0x280>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	d101      	bne.n	8001e0a <HAL_UARTEx_RxEventCallback+0x23e>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_UARTEx_RxEventCallback+0x240>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00b      	beq.n	8001e28 <HAL_UARTEx_RxEventCallback+0x25c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001e12:	785b      	ldrb	r3, [r3, #1]
 8001e14:	021b      	lsls	r3, r3, #8
 8001e16:	b25a      	sxtb	r2, r3
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001e1a:	789b      	ldrb	r3, [r3, #2]
 8001e1c:	b25b      	sxtb	r3, r3
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	b25a      	sxtb	r2, r3
 8001e22:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <HAL_UARTEx_RxEventCallback+0x2b4>)
 8001e24:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001e26:	e0ed      	b.n	8002004 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) { // Joint Jog 4q
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x278>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b61      	cmp	r3, #97	; 0x61
 8001e2e:	d129      	bne.n	8001e84 <HAL_UARTEx_RxEventCallback+0x2b8>
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <HAL_UARTEx_RxEventCallback+0x280>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d124      	bne.n	8001e84 <HAL_UARTEx_RxEventCallback+0x2b8>
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e023      	b.n	8001e86 <HAL_UARTEx_RxEventCallback+0x2ba>
 8001e3e:	bf00      	nop
 8001e40:	24000d78 	.word	0x24000d78
 8001e44:	24000354 	.word	0x24000354
 8001e48:	24000368 	.word	0x24000368
 8001e4c:	2400037c 	.word	0x2400037c
 8001e50:	24000808 	.word	0x24000808
 8001e54:	2400034c 	.word	0x2400034c
 8001e58:	2400034e 	.word	0x2400034e
 8001e5c:	58021000 	.word	0x58021000
 8001e60:	58020400 	.word	0x58020400
 8001e64:	24000332 	.word	0x24000332
 8001e68:	24000333 	.word	0x24000333
 8001e6c:	24000334 	.word	0x24000334
 8001e70:	24000335 	.word	0x24000335
 8001e74:	24000336 	.word	0x24000336
 8001e78:	24000337 	.word	0x24000337
 8001e7c:	24000338 	.word	0x24000338
 8001e80:	24000339 	.word	0x24000339
 8001e84:	2300      	movs	r3, #0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d014      	beq.n	8001eb4 <HAL_UARTEx_RxEventCallback+0x2e8>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8001e8a:	4b94      	ldr	r3, [pc, #592]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001e8c:	785b      	ldrb	r3, [r3, #1]
 8001e8e:	b25a      	sxtb	r2, r3
 8001e90:	4b93      	ldr	r3, [pc, #588]	; (80020e0 <HAL_UARTEx_RxEventCallback+0x514>)
 8001e92:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8001e94:	4b91      	ldr	r3, [pc, #580]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001e96:	789b      	ldrb	r3, [r3, #2]
 8001e98:	b25a      	sxtb	r2, r3
 8001e9a:	4b92      	ldr	r3, [pc, #584]	; (80020e4 <HAL_UARTEx_RxEventCallback+0x518>)
 8001e9c:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8001e9e:	4b8f      	ldr	r3, [pc, #572]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001ea0:	78db      	ldrb	r3, [r3, #3]
 8001ea2:	b25a      	sxtb	r2, r3
 8001ea4:	4b90      	ldr	r3, [pc, #576]	; (80020e8 <HAL_UARTEx_RxEventCallback+0x51c>)
 8001ea6:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8001ea8:	4b8c      	ldr	r3, [pc, #560]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001eaa:	791b      	ldrb	r3, [r3, #4]
 8001eac:	b25a      	sxtb	r2, r3
 8001eae:	4b8f      	ldr	r3, [pc, #572]	; (80020ec <HAL_UARTEx_RxEventCallback+0x520>)
 8001eb0:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001eb2:	e0a7      	b.n	8002004 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) { // Linear Jog X,Y,Z,Yaw
 8001eb4:	4b89      	ldr	r3, [pc, #548]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b71      	cmp	r3, #113	; 0x71
 8001eba:	d106      	bne.n	8001eca <HAL_UARTEx_RxEventCallback+0x2fe>
 8001ebc:	4b8c      	ldr	r3, [pc, #560]	; (80020f0 <HAL_UARTEx_RxEventCallback+0x524>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d101      	bne.n	8001eca <HAL_UARTEx_RxEventCallback+0x2fe>
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e000      	b.n	8001ecc <HAL_UARTEx_RxEventCallback+0x300>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d014      	beq.n	8001efa <HAL_UARTEx_RxEventCallback+0x32e>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = Old_Rx_Buffer[1];
 8001ed0:	4b82      	ldr	r3, [pc, #520]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001ed2:	785b      	ldrb	r3, [r3, #1]
 8001ed4:	b25a      	sxtb	r2, r3
 8001ed6:	4b87      	ldr	r3, [pc, #540]	; (80020f4 <HAL_UARTEx_RxEventCallback+0x528>)
 8001ed8:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 8001eda:	4b80      	ldr	r3, [pc, #512]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001edc:	789b      	ldrb	r3, [r3, #2]
 8001ede:	b25a      	sxtb	r2, r3
 8001ee0:	4b85      	ldr	r3, [pc, #532]	; (80020f8 <HAL_UARTEx_RxEventCallback+0x52c>)
 8001ee2:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 8001ee4:	4b7d      	ldr	r3, [pc, #500]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001ee6:	78db      	ldrb	r3, [r3, #3]
 8001ee8:	b25a      	sxtb	r2, r3
 8001eea:	4b84      	ldr	r3, [pc, #528]	; (80020fc <HAL_UARTEx_RxEventCallback+0x530>)
 8001eec:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 8001eee:	4b7b      	ldr	r3, [pc, #492]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001ef0:	791b      	ldrb	r3, [r3, #4]
 8001ef2:	b25a      	sxtb	r2, r3
 8001ef4:	4b82      	ldr	r3, [pc, #520]	; (8002100 <HAL_UARTEx_RxEventCallback+0x534>)
 8001ef6:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001ef8:	e084      	b.n	8002004 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) {// Servo
 8001efa:	4b78      	ldr	r3, [pc, #480]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b81      	cmp	r3, #129	; 0x81
 8001f00:	d106      	bne.n	8001f10 <HAL_UARTEx_RxEventCallback+0x344>
 8001f02:	4b7b      	ldr	r3, [pc, #492]	; (80020f0 <HAL_UARTEx_RxEventCallback+0x524>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d101      	bne.n	8001f10 <HAL_UARTEx_RxEventCallback+0x344>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <HAL_UARTEx_RxEventCallback+0x346>
 8001f10:	2300      	movs	r3, #0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d015      	beq.n	8001f42 <HAL_UARTEx_RxEventCallback+0x376>
					gripperstate = Old_Rx_Buffer[1];
 8001f16:	4b71      	ldr	r3, [pc, #452]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f18:	785b      	ldrb	r3, [r3, #1]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	4b79      	ldr	r3, [pc, #484]	; (8002104 <HAL_UARTEx_RxEventCallback+0x538>)
 8001f1e:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 8001f20:	4b78      	ldr	r3, [pc, #480]	; (8002104 <HAL_UARTEx_RxEventCallback+0x538>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf0c      	ite	eq
 8001f28:	2301      	moveq	r3, #1
 8001f2a:	2300      	movne	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_UARTEx_RxEventCallback+0x36e>
						gripper.GripperOpen();
 8001f32:	4875      	ldr	r0, [pc, #468]	; (8002108 <HAL_UARTEx_RxEventCallback+0x53c>)
 8001f34:	f7ff f89e 	bl	8001074 <_ZN10ServoMotor11GripperOpenEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001f38:	e064      	b.n	8002004 <HAL_UARTEx_RxEventCallback+0x438>
					} else {
						gripper.GripperClose();
 8001f3a:	4873      	ldr	r0, [pc, #460]	; (8002108 <HAL_UARTEx_RxEventCallback+0x53c>)
 8001f3c:	f7ff f884 	bl	8001048 <_ZN10ServoMotor12GripperCloseEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001f40:	e060      	b.n	8002004 <HAL_UARTEx_RxEventCallback+0x438>
					}

				} else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8) {
 8001f42:	4b66      	ldr	r3, [pc, #408]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b91      	cmp	r3, #145	; 0x91
 8001f48:	d106      	bne.n	8001f58 <HAL_UARTEx_RxEventCallback+0x38c>
 8001f4a:	4b69      	ldr	r3, [pc, #420]	; (80020f0 <HAL_UARTEx_RxEventCallback+0x524>)
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d101      	bne.n	8001f58 <HAL_UARTEx_RxEventCallback+0x38c>
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <HAL_UARTEx_RxEventCallback+0x38e>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d052      	beq.n	8002004 <HAL_UARTEx_RxEventCallback+0x438>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2] ;
 8001f5e:	4b5f      	ldr	r3, [pc, #380]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f60:	785b      	ldrb	r3, [r3, #1]
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	4a5d      	ldr	r2, [pc, #372]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f66:	7892      	ldrb	r2, [r2, #2]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f72:	4b66      	ldr	r3, [pc, #408]	; (800210c <HAL_UARTEx_RxEventCallback+0x540>)
 8001f74:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
 8001f78:	4b58      	ldr	r3, [pc, #352]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f7a:	78db      	ldrb	r3, [r3, #3]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	4a57      	ldr	r2, [pc, #348]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f80:	7912      	ldrb	r2, [r2, #4]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	ee07 3a90 	vmov	s15, r3
 8001f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8c:	4b60      	ldr	r3, [pc, #384]	; (8002110 <HAL_UARTEx_RxEventCallback+0x544>)
 8001f8e:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
 8001f92:	4b52      	ldr	r3, [pc, #328]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f94:	795b      	ldrb	r3, [r3, #5]
 8001f96:	021b      	lsls	r3, r3, #8
 8001f98:	4a50      	ldr	r2, [pc, #320]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f9a:	7992      	ldrb	r2, [r2, #6]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	ee07 3a90 	vmov	s15, r3
 8001fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa6:	4b5b      	ldr	r3, [pc, #364]	; (8002114 <HAL_UARTEx_RxEventCallback+0x548>)
 8001fa8:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 8001fac:	4b4b      	ldr	r3, [pc, #300]	; (80020dc <HAL_UARTEx_RxEventCallback+0x510>)
 8001fae:	79db      	ldrb	r3, [r3, #7]
 8001fb0:	ee07 3a90 	vmov	s15, r3
 8001fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb8:	4b57      	ldr	r3, [pc, #348]	; (8002118 <HAL_UARTEx_RxEventCallback+0x54c>)
 8001fba:	edc3 7a00 	vstr	s15, [r3]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001fbe:	e021      	b.n	8002004 <HAL_UARTEx_RxEventCallback+0x438>
				}
			}
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	4855      	ldr	r0, [pc, #340]	; (800211c <HAL_UARTEx_RxEventCallback+0x550>)
 8001fc6:	f007 f823 	bl	8009010 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fd0:	4853      	ldr	r0, [pc, #332]	; (8002120 <HAL_UARTEx_RxEventCallback+0x554>)
 8001fd2:	f007 f81d 	bl	8009010 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	4952      	ldr	r1, [pc, #328]	; (8002124 <HAL_UARTEx_RxEventCallback+0x558>)
 8001fda:	4853      	ldr	r0, [pc, #332]	; (8002128 <HAL_UARTEx_RxEventCallback+0x55c>)
 8001fdc:	f00b f99a 	bl	800d314 <HAL_UART_Transmit_DMA>
 8001fe0:	e011      	b.n	8002006 <HAL_UARTEx_RxEventCallback+0x43a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	484d      	ldr	r0, [pc, #308]	; (800211c <HAL_UARTEx_RxEventCallback+0x550>)
 8001fe8:	f007 f812 	bl	8009010 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001fec:	2201      	movs	r2, #1
 8001fee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ff2:	484b      	ldr	r0, [pc, #300]	; (8002120 <HAL_UARTEx_RxEventCallback+0x554>)
 8001ff4:	f007 f80c 	bl	8009010 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 8001ff8:	2215      	movs	r2, #21
 8001ffa:	494c      	ldr	r1, [pc, #304]	; (800212c <HAL_UARTEx_RxEventCallback+0x560>)
 8001ffc:	484a      	ldr	r0, [pc, #296]	; (8002128 <HAL_UARTEx_RxEventCallback+0x55c>)
 8001ffe:	f00b f989 	bl	800d314 <HAL_UART_Transmit_DMA>
 8002002:	e000      	b.n	8002006 <HAL_UARTEx_RxEventCallback+0x43a>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8002004:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 8002006:	2214      	movs	r2, #20
 8002008:	4949      	ldr	r1, [pc, #292]	; (8002130 <HAL_UARTEx_RxEventCallback+0x564>)
 800200a:	4847      	ldr	r0, [pc, #284]	; (8002128 <HAL_UARTEx_RxEventCallback+0x55c>)
 800200c:	f00d f8d5 	bl	800f1ba <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002010:	4b48      	ldr	r3, [pc, #288]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a48      	ldr	r2, [pc, #288]	; (8002138 <HAL_UARTEx_RxEventCallback+0x56c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d04a      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x4e4>
 800201a:	4b46      	ldr	r3, [pc, #280]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a47      	ldr	r2, [pc, #284]	; (800213c <HAL_UARTEx_RxEventCallback+0x570>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d045      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002024:	4b43      	ldr	r3, [pc, #268]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a45      	ldr	r2, [pc, #276]	; (8002140 <HAL_UARTEx_RxEventCallback+0x574>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d040      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x4e4>
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a44      	ldr	r2, [pc, #272]	; (8002144 <HAL_UARTEx_RxEventCallback+0x578>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d03b      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002038:	4b3e      	ldr	r3, [pc, #248]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a42      	ldr	r2, [pc, #264]	; (8002148 <HAL_UARTEx_RxEventCallback+0x57c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d036      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002042:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a41      	ldr	r2, [pc, #260]	; (800214c <HAL_UARTEx_RxEventCallback+0x580>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d031      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x4e4>
 800204c:	4b39      	ldr	r3, [pc, #228]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a3f      	ldr	r2, [pc, #252]	; (8002150 <HAL_UARTEx_RxEventCallback+0x584>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d02c      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002056:	4b37      	ldr	r3, [pc, #220]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a3e      	ldr	r2, [pc, #248]	; (8002154 <HAL_UARTEx_RxEventCallback+0x588>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d027      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002060:	4b34      	ldr	r3, [pc, #208]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a3c      	ldr	r2, [pc, #240]	; (8002158 <HAL_UARTEx_RxEventCallback+0x58c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d022      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x4e4>
 800206a:	4b32      	ldr	r3, [pc, #200]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a3b      	ldr	r2, [pc, #236]	; (800215c <HAL_UARTEx_RxEventCallback+0x590>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d01d      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002074:	4b2f      	ldr	r3, [pc, #188]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a39      	ldr	r2, [pc, #228]	; (8002160 <HAL_UARTEx_RxEventCallback+0x594>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d018      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x4e4>
 800207e:	4b2d      	ldr	r3, [pc, #180]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a38      	ldr	r2, [pc, #224]	; (8002164 <HAL_UARTEx_RxEventCallback+0x598>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d013      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002088:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a36      	ldr	r2, [pc, #216]	; (8002168 <HAL_UARTEx_RxEventCallback+0x59c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d00e      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002092:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a35      	ldr	r2, [pc, #212]	; (800216c <HAL_UARTEx_RxEventCallback+0x5a0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d009      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x4e4>
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a33      	ldr	r2, [pc, #204]	; (8002170 <HAL_UARTEx_RxEventCallback+0x5a4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d004      	beq.n	80020b0 <HAL_UARTEx_RxEventCallback+0x4e4>
 80020a6:	4b23      	ldr	r3, [pc, #140]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a32      	ldr	r2, [pc, #200]	; (8002174 <HAL_UARTEx_RxEventCallback+0x5a8>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d108      	bne.n	80020c2 <HAL_UARTEx_RxEventCallback+0x4f6>
 80020b0:	4b20      	ldr	r3, [pc, #128]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	4b1f      	ldr	r3, [pc, #124]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0208 	bic.w	r2, r2, #8
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e008      	b.n	80020d4 <HAL_UARTEx_RxEventCallback+0x508>
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <HAL_UARTEx_RxEventCallback+0x568>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0204 	bic.w	r2, r2, #4
 80020d0:	601a      	str	r2, [r3, #0]
}
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bdb0      	pop	{r4, r5, r7, pc}
 80020dc:	24000354 	.word	0x24000354
 80020e0:	24000332 	.word	0x24000332
 80020e4:	24000333 	.word	0x24000333
 80020e8:	24000334 	.word	0x24000334
 80020ec:	24000335 	.word	0x24000335
 80020f0:	2400037c 	.word	0x2400037c
 80020f4:	24000336 	.word	0x24000336
 80020f8:	24000337 	.word	0x24000337
 80020fc:	24000338 	.word	0x24000338
 8002100:	24000339 	.word	0x24000339
 8002104:	24000350 	.word	0x24000350
 8002108:	24000314 	.word	0x24000314
 800210c:	2400033c 	.word	0x2400033c
 8002110:	24000340 	.word	0x24000340
 8002114:	24000344 	.word	0x24000344
 8002118:	24000348 	.word	0x24000348
 800211c:	58021000 	.word	0x58021000
 8002120:	58020400 	.word	0x58020400
 8002124:	08012978 	.word	0x08012978
 8002128:	24000d78 	.word	0x24000d78
 800212c:	08012988 	.word	0x08012988
 8002130:	24000368 	.word	0x24000368
 8002134:	24000d00 	.word	0x24000d00
 8002138:	40020010 	.word	0x40020010
 800213c:	40020028 	.word	0x40020028
 8002140:	40020040 	.word	0x40020040
 8002144:	40020058 	.word	0x40020058
 8002148:	40020070 	.word	0x40020070
 800214c:	40020088 	.word	0x40020088
 8002150:	400200a0 	.word	0x400200a0
 8002154:	400200b8 	.word	0x400200b8
 8002158:	40020410 	.word	0x40020410
 800215c:	40020428 	.word	0x40020428
 8002160:	40020440 	.word	0x40020440
 8002164:	40020458 	.word	0x40020458
 8002168:	40020470 	.word	0x40020470
 800216c:	40020488 	.word	0x40020488
 8002170:	400204a0 	.word	0x400204a0
 8002174:	400204b8 	.word	0x400204b8

08002178 <_ZN11robot_jointC1Ev>:
struct joint_state {
float q1, q2, q3, q4;
};
typedef struct joint_state joint_config;

struct robot_joint {
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	65da      	str	r2, [r3, #92]	; 0x5c
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	661a      	str	r2, [r3, #96]	; 0x60
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002196:	665a      	str	r2, [r3, #100]	; 0x64
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	669a      	str	r2, [r3, #104]	; 0x68
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021a6:	66da      	str	r2, [r3, #108]	; 0x6c
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f04f 0200 	mov.w	r2, #0
 80021ae:	671a      	str	r2, [r3, #112]	; 0x70
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	675a      	str	r2, [r3, #116]	; 0x74
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f04f 0200 	mov.w	r2, #0
 80021be:	679a      	str	r2, [r3, #120]	; 0x78
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a06      	ldr	r2, [pc, #24]	; (80021dc <_ZN11robot_jointC1Ev+0x64>)
 80021c4:	67da      	str	r2, [r3, #124]	; 0x7c
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a05      	ldr	r2, [pc, #20]	; (80021e0 <_ZN11robot_jointC1Ev+0x68>)
 80021ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	3dc28f5c 	.word	0x3dc28f5c
 80021e0:	387ba882 	.word	0x387ba882

080021e4 <_Z10Update_ivkffffffff>:
};
typedef struct robot_kinematic fcb_kinematic;

fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;

void Update_ivk(float q1, float q2, float q3, float q4, float Vx, float Vy, float Vz, float Wz) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b090      	sub	sp, #64	; 0x40
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	ed87 0a07 	vstr	s0, [r7, #28]
 80021ee:	edc7 0a06 	vstr	s1, [r7, #24]
 80021f2:	ed87 1a05 	vstr	s2, [r7, #20]
 80021f6:	edc7 1a04 	vstr	s3, [r7, #16]
 80021fa:	ed87 2a03 	vstr	s4, [r7, #12]
 80021fe:	edc7 2a02 	vstr	s5, [r7, #8]
 8002202:	ed87 3a01 	vstr	s6, [r7, #4]
 8002206:	edc7 3a00 	vstr	s7, [r7]
float S13 = sin(q1 + q3);
 800220a:	ed97 7a07 	vldr	s14, [r7, #28]
 800220e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002216:	eeb0 0a67 	vmov.f32	s0, s15
 800221a:	f7ff fcb7 	bl	8001b8c <_ZSt3sinf>
 800221e:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
float C13 = cos(q1 + q3);
 8002222:	ed97 7a07 	vldr	s14, [r7, #28]
 8002226:	edd7 7a05 	vldr	s15, [r7, #20]
 800222a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800222e:	eeb0 0a67 	vmov.f32	s0, s15
 8002232:	f7ff fc9b 	bl	8001b6c <_ZSt3cosf>
 8002236:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
float S3 = sin(q3);
 800223a:	ed97 0a05 	vldr	s0, [r7, #20]
 800223e:	f7ff fca5 	bl	8001b8c <_ZSt3sinf>
 8002242:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
float S1 = sin(q1);
 8002246:	ed97 0a07 	vldr	s0, [r7, #28]
 800224a:	f7ff fc9f 	bl	8001b8c <_ZSt3sinf>
 800224e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
float C1 = cos(q1);
 8002252:	ed97 0a07 	vldr	s0, [r7, #28]
 8002256:	f7ff fc89 	bl	8001b6c <_ZSt3cosf>
 800225a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
float L12 = L1 + L2;
 800225e:	4b53      	ldr	r3, [pc, #332]	; (80023ac <_Z10Update_ivkffffffff+0x1c8>)
 8002260:	ed93 7a00 	vldr	s14, [r3]
 8002264:	4b52      	ldr	r3, [pc, #328]	; (80023b0 <_Z10Update_ivkffffffff+0x1cc>)
 8002266:	edd3 7a00 	vldr	s15, [r3]
 800226a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800226e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
float L3S3 = L3 * S3;
 8002272:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <_Z10Update_ivkffffffff+0x1d0>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800227c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002280:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

w_q1 = (Vx * C13 + Vy * S13) / (S3 * L12);
 8002284:	ed97 7a03 	vldr	s14, [r7, #12]
 8002288:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800228c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002290:	edd7 6a02 	vldr	s13, [r7, #8]
 8002294:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002298:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800229c:	ee77 6a27 	vadd.f32	s13, s14, s15
 80022a0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80022a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022b0:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <_Z10Update_ivkffffffff+0x1d4>)
 80022b2:	edc3 7a00 	vstr	s15, [r3]
w_q2 = Vz;
 80022b6:	4a41      	ldr	r2, [pc, #260]	; (80023bc <_Z10Update_ivkffffffff+0x1d8>)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6013      	str	r3, [r2, #0]
w_q3 = -(Vx * (L3 * C13 + L1 * C1 + L2 * C1)) / (L3S3 * L12)
 80022bc:	4b3d      	ldr	r3, [pc, #244]	; (80023b4 <_Z10Update_ivkffffffff+0x1d0>)
 80022be:	ed93 7a00 	vldr	s14, [r3]
 80022c2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80022c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ca:	4b38      	ldr	r3, [pc, #224]	; (80023ac <_Z10Update_ivkffffffff+0x1c8>)
 80022cc:	edd3 6a00 	vldr	s13, [r3]
 80022d0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80022d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022dc:	4b34      	ldr	r3, [pc, #208]	; (80023b0 <_Z10Update_ivkffffffff+0x1cc>)
 80022de:	edd3 6a00 	vldr	s13, [r3]
 80022e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80022e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80022f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f6:	eef1 6a67 	vneg.f32	s13, s15
 80022fa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80022fe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
		- (Vy * (L3 * S13 + L1 * S1 + L2 * S1)) / (L3S3 * L12);
 800230a:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <_Z10Update_ivkffffffff+0x1d0>)
 800230c:	edd3 6a00 	vldr	s13, [r3]
 8002310:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002314:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002318:	4b24      	ldr	r3, [pc, #144]	; (80023ac <_Z10Update_ivkffffffff+0x1c8>)
 800231a:	ed93 6a00 	vldr	s12, [r3]
 800231e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002322:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002326:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800232a:	4b21      	ldr	r3, [pc, #132]	; (80023b0 <_Z10Update_ivkffffffff+0x1cc>)
 800232c:	ed93 6a00 	vldr	s12, [r3]
 8002330:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002334:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002338:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800233c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002340:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002344:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002348:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800234c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002350:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002354:	ee77 7a67 	vsub.f32	s15, s14, s15
w_q3 = -(Vx * (L3 * C13 + L1 * C1 + L2 * C1)) / (L3S3 * L12)
 8002358:	4b19      	ldr	r3, [pc, #100]	; (80023c0 <_Z10Update_ivkffffffff+0x1dc>)
 800235a:	edc3 7a00 	vstr	s15, [r3]
w_q4 = (Vx * C1 + Vy * S1 + L3 * Wz * S3) / (L3S3);
 800235e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002362:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002366:	ee27 7a27 	vmul.f32	s14, s14, s15
 800236a:	edd7 6a02 	vldr	s13, [r7, #8]
 800236e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002376:	ee37 7a27 	vadd.f32	s14, s14, s15
 800237a:	4b0e      	ldr	r3, [pc, #56]	; (80023b4 <_Z10Update_ivkffffffff+0x1d0>)
 800237c:	edd3 6a00 	vldr	s13, [r3]
 8002380:	edd7 7a00 	vldr	s15, [r7]
 8002384:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002388:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800238c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002390:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002394:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <_Z10Update_ivkffffffff+0x1e0>)
 800239e:	edc3 7a00 	vstr	s15, [r3]

};
 80023a2:	bf00      	nop
 80023a4:	3740      	adds	r7, #64	; 0x40
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	24000004 	.word	0x24000004
 80023b0:	24000008 	.word	0x24000008
 80023b4:	2400000c 	.word	0x2400000c
 80023b8:	240003cc 	.word	0x240003cc
 80023bc:	240003d0 	.word	0x240003d0
 80023c0:	240003d4 	.word	0x240003d4
 80023c4:	240003d8 	.word	0x240003d8

080023c8 <_Z12KalmanFilterf11robot_joint>:
//	v = C1 + (2.0*C2*t) + (3.0*C3*t2) + (4.0*C4*t3) + (5.0*C5*t4);
//	a = (2.0*C2) + (6.0*C3*t) + (12.0*C4*t2) + (20.0*C5*t3);
//
//}

fcb_joint KalmanFilter(float theta_k, fcb_joint joint) {
 80023c8:	b084      	sub	sp, #16
 80023ca:	b580      	push	{r7, lr}
 80023cc:	ed2d 8b08 	vpush	{d8-d11}
 80023d0:	b08a      	sub	sp, #40	; 0x28
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	ed87 0a00 	vstr	s0, [r7]
 80023da:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80023de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	bug1 = joint.Encoder;
float X1 = joint.X11;
 80023e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023e6:	627b      	str	r3, [r7, #36]	; 0x24
float X2 = joint.X21;
 80023e8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023ec:	623b      	str	r3, [r7, #32]
float P11 = joint.p11;
 80023ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023f2:	61fb      	str	r3, [r7, #28]
float P12 = joint.p12;
 80023f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023f8:	61bb      	str	r3, [r7, #24]
float P21 = joint.p21;
 80023fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023fe:	617b      	str	r3, [r7, #20]
float P22 = joint.p22;
 8002400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002404:	613b      	str	r3, [r7, #16]
float Q = joint.Q;
 8002406:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800240a:	60fb      	str	r3, [r7, #12]
float R = joint.R;
 800240c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002410:	60bb      	str	r3, [r7, #8]

joint.X11 =
		X1 + (X2 * dt)
 8002412:	4bef      	ldr	r3, [pc, #956]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002414:	ed93 7a00 	vldr	s14, [r3]
 8002418:	edd7 7a08 	vldr	s15, [r7, #32]
 800241c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002420:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002428:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
				- ((X1 - theta_k + X2 * dt)
 800242c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002430:	edd7 7a00 	vldr	s15, [r7]
 8002434:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002438:	4be5      	ldr	r3, [pc, #916]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 800243a:	edd3 6a00 	vldr	s13, [r3]
 800243e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002442:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800244a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 800244e:	4be0      	ldr	r3, [pc, #896]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002450:	ed93 7a00 	vldr	s14, [r3]
 8002454:	edd7 7a05 	vldr	s15, [r7, #20]
 8002458:	ee27 7a27 	vmul.f32	s14, s14, s15
 800245c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002464:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002468:	edd7 7a03 	vldr	s15, [r7, #12]
 800246c:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002470:	4bd7      	ldr	r3, [pc, #860]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002472:	edd3 7a00 	vldr	s15, [r3]
 8002476:	2004      	movs	r0, #4
 8002478:	eeb0 0a67 	vmov.f32	s0, s15
 800247c:	f001 fc62 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002480:	eeb0 7b40 	vmov.f64	d7, d0
 8002484:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002488:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800248c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002490:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt)))
 8002494:	4bce      	ldr	r3, [pc, #824]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002496:	ed93 7a00 	vldr	s14, [r3]
 800249a:	edd7 7a04 	vldr	s15, [r7, #16]
 800249e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80024a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024aa:	4bc9      	ldr	r3, [pc, #804]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024b8:	ee36 7b07 	vadd.f64	d7, d6, d7
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 80024bc:	ee29 9b07 	vmul.f64	d9, d9, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 80024c0:	ed97 7a07 	vldr	s14, [r7, #28]
 80024c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80024c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024cc:	4bc0      	ldr	r3, [pc, #768]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80024ce:	edd3 6a00 	vldr	s13, [r3]
 80024d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80024d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024de:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80024e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80024e6:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80024ea:	4bb9      	ldr	r3, [pc, #740]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80024ec:	edd3 7a00 	vldr	s15, [r3]
 80024f0:	2004      	movs	r0, #4
 80024f2:	eeb0 0a67 	vmov.f32	s0, s15
 80024f6:	f001 fc25 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024fa:	eeb0 7b40 	vmov.f64	d7, d0
 80024fe:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002502:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002506:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800250a:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt));
 800250e:	4bb0      	ldr	r3, [pc, #704]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002510:	ed93 7a00 	vldr	s14, [r3]
 8002514:	edd7 7a04 	vldr	s15, [r7, #16]
 8002518:	ee27 7a27 	vmul.f32	s14, s14, s15
 800251c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002520:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002524:	4baa      	ldr	r3, [pc, #680]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800252e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002532:	ee36 6b07 	vadd.f64	d6, d6, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002536:	ee89 7b06 	vdiv.f64	d7, d9, d6
				- ((X1 - theta_k + X2 * dt)
 800253a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800253e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.X11 =
 8002542:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
joint.X21 = X2
 8002546:	edd7 7a08 	vldr	s15, [r7, #32]
 800254a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21) * (X1 - theta_k + X2 * dt))
 800254e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002552:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002556:	4b9e      	ldr	r3, [pc, #632]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	2003      	movs	r0, #3
 800255e:	eeb0 0a67 	vmov.f32	s0, s15
 8002562:	f001 fbef 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002566:	eeb0 7b40 	vmov.f64	d7, d0
 800256a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800256e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002572:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002576:	4b96      	ldr	r3, [pc, #600]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002578:	ed93 7a00 	vldr	s14, [r3]
 800257c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002580:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002584:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002588:	ee36 6b07 	vadd.f64	d6, d6, d7
 800258c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002590:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002594:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002598:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800259c:	edd7 7a00 	vldr	s15, [r7]
 80025a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025a4:	4b8a      	ldr	r3, [pc, #552]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80025a6:	edd3 5a00 	vldr	s11, [r3]
 80025aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80025ae:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80025b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80025ba:	ee26 9b07 	vmul.f64	d9, d6, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 80025be:	ed97 7a07 	vldr	s14, [r7, #28]
 80025c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80025c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025ca:	4b81      	ldr	r3, [pc, #516]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80025cc:	edd3 6a00 	vldr	s13, [r3]
 80025d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80025d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025dc:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80025e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80025e4:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80025e8:	4b79      	ldr	r3, [pc, #484]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80025ea:	edd3 7a00 	vldr	s15, [r3]
 80025ee:	2004      	movs	r0, #4
 80025f0:	eeb0 0a67 	vmov.f32	s0, s15
 80025f4:	f001 fba6 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80025f8:	eeb0 7b40 	vmov.f64	d7, d0
 80025fc:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002600:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002604:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002608:	ee3a 6b07 	vadd.f64	d6, d10, d7
						+ dt * (P12 + P22 * dt));
 800260c:	4b70      	ldr	r3, [pc, #448]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 800260e:	ed93 7a00 	vldr	s14, [r3]
 8002612:	edd7 7a04 	vldr	s15, [r7, #16]
 8002616:	ee27 7a27 	vmul.f32	s14, s14, s15
 800261a:	edd7 7a06 	vldr	s15, [r7, #24]
 800261e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002622:	4b6b      	ldr	r3, [pc, #428]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002624:	edd3 7a00 	vldr	s15, [r3]
 8002628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002630:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002634:	ee89 7b06 	vdiv.f64	d7, d9, d6
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21) * (X1 - theta_k + X2 * dt))
 8002638:	ee38 7b47 	vsub.f64	d7, d8, d7
 800263c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.X21 = X2
 8002640:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
joint.p11 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002644:	4b62      	ldr	r3, [pc, #392]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002646:	ed93 7a00 	vldr	s14, [r3]
 800264a:	edd7 7a05 	vldr	s15, [r7, #20]
 800264e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002652:	edd7 7a07 	vldr	s15, [r7, #28]
 8002656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800265a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800265e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002662:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002666:	4b5a      	ldr	r3, [pc, #360]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002668:	edd3 7a00 	vldr	s15, [r3]
 800266c:	2004      	movs	r0, #4
 800266e:	eeb0 0a67 	vmov.f32	s0, s15
 8002672:	f001 fb67 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002676:	eeb0 7b40 	vmov.f64	d7, d0
 800267a:	ee29 6b07 	vmul.f64	d6, d9, d7
 800267e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002682:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002686:	ee38 6b07 	vadd.f64	d6, d8, d7
 800268a:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 800268c:	ed93 7a00 	vldr	s14, [r3]
 8002690:	edd7 7a04 	vldr	s15, [r7, #16]
 8002694:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002698:	edd7 7a06 	vldr	s15, [r7, #24]
 800269c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026a0:	4b4b      	ldr	r3, [pc, #300]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026a2:	edd3 7a00 	vldr	s15, [r3]
 80026a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80026ae:	ee36 8b07 	vadd.f64	d8, d6, d7
		/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 80026b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80026b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026be:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026c0:	edd3 6a00 	vldr	s13, [r3]
 80026c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80026c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026d0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80026d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80026d8:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80026dc:	4b3c      	ldr	r3, [pc, #240]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026de:	edd3 7a00 	vldr	s15, [r3]
 80026e2:	2004      	movs	r0, #4
 80026e4:	eeb0 0a67 	vmov.f32	s0, s15
 80026e8:	f001 fb2c 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80026ec:	eeb0 7b40 	vmov.f64	d7, d0
 80026f0:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80026f4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80026f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80026fc:	ee39 6b07 	vadd.f64	d6, d9, d7
 8002700:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002702:	ed93 7a00 	vldr	s14, [r3]
 8002706:	edd7 7a04 	vldr	s15, [r7, #16]
 800270a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800270e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002712:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002716:	4b2e      	ldr	r3, [pc, #184]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002718:	edd3 7a00 	vldr	s15, [r3]
 800271c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002720:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002724:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002728:	ee88 7b06 	vdiv.f64	d7, d8, d6
		- 1) * (P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt));
 800272c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002730:	ee37 7b46 	vsub.f64	d7, d7, d6
joint.p11 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002734:	eeb1 8b47 	vneg.f64	d8, d7
		- 1) * (P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt));
 8002738:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 800273a:	ed93 7a00 	vldr	s14, [r3]
 800273e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002742:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002746:	edd7 7a07 	vldr	s15, [r7, #28]
 800274a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800274e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002752:	edd7 7a03 	vldr	s15, [r7, #12]
 8002756:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 800275c:	edd3 7a00 	vldr	s15, [r3]
 8002760:	2004      	movs	r0, #4
 8002762:	eeb0 0a67 	vmov.f32	s0, s15
 8002766:	f001 faed 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800276a:	eeb0 7b40 	vmov.f64	d7, d0
 800276e:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8002772:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002776:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800277a:	ee39 6b07 	vadd.f64	d6, d9, d7
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002780:	ed93 7a00 	vldr	s14, [r3]
 8002784:	edd7 7a04 	vldr	s15, [r7, #16]
 8002788:	ee27 7a27 	vmul.f32	s14, s14, s15
 800278c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002790:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002794:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002796:	edd3 7a00 	vldr	s15, [r3]
 800279a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80027a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80027a6:	ee28 7b07 	vmul.f64	d7, d8, d7
 80027aa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p11 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 80027ae:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
joint.p12 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80027b4:	ed93 7a00 	vldr	s14, [r3]
 80027b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80027bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80027c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027c8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80027cc:	e002      	b.n	80027d4 <_Z12KalmanFilterf11robot_joint+0x40c>
 80027ce:	bf00      	nop
 80027d0:	24000038 	.word	0x24000038
 80027d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80027d8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80027dc:	4bef      	ldr	r3, [pc, #956]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	2004      	movs	r0, #4
 80027e4:	eeb0 0a67 	vmov.f32	s0, s15
 80027e8:	f001 faac 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027ec:	eeb0 7b40 	vmov.f64	d7, d0
 80027f0:	ee29 6b07 	vmul.f64	d6, d9, d7
 80027f4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80027f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80027fc:	ee38 6b07 	vadd.f64	d6, d8, d7
 8002800:	4be6      	ldr	r3, [pc, #920]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002802:	ed93 7a00 	vldr	s14, [r3]
 8002806:	edd7 7a04 	vldr	s15, [r7, #16]
 800280a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800280e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002812:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002816:	4be1      	ldr	r3, [pc, #900]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002818:	edd3 7a00 	vldr	s15, [r3]
 800281c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002820:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002824:	ee36 8b07 	vadd.f64	d8, d6, d7
		/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002828:	ed97 7a07 	vldr	s14, [r7, #28]
 800282c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002830:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002834:	4bd9      	ldr	r3, [pc, #868]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002836:	edd3 6a00 	vldr	s13, [r3]
 800283a:	edd7 7a05 	vldr	s15, [r7, #20]
 800283e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002846:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800284a:	edd7 7a03 	vldr	s15, [r7, #12]
 800284e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002852:	4bd2      	ldr	r3, [pc, #840]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	2004      	movs	r0, #4
 800285a:	eeb0 0a67 	vmov.f32	s0, s15
 800285e:	f001 fa71 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002862:	eeb0 7b40 	vmov.f64	d7, d0
 8002866:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800286a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800286e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002872:	ee39 6b07 	vadd.f64	d6, d9, d7
 8002876:	4bc9      	ldr	r3, [pc, #804]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002878:	ed93 7a00 	vldr	s14, [r3]
 800287c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002880:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002884:	edd7 7a06 	vldr	s15, [r7, #24]
 8002888:	ee37 7a27 	vadd.f32	s14, s14, s15
 800288c:	4bc3      	ldr	r3, [pc, #780]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002896:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800289a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800289e:	ee88 7b06 	vdiv.f64	d7, d8, d6
		- 1) * ((Q * pow(dt, 3)) / 2 + P22 * dt + P12);
 80028a2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80028a6:	ee37 7b46 	vsub.f64	d7, d7, d6
joint.p12 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 80028aa:	eeb1 8b47 	vneg.f64	d8, d7
		- 1) * ((Q * pow(dt, 3)) / 2 + P22 * dt + P12);
 80028ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80028b2:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80028b6:	4bb9      	ldr	r3, [pc, #740]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80028b8:	edd3 7a00 	vldr	s15, [r3]
 80028bc:	2003      	movs	r0, #3
 80028be:	eeb0 0a67 	vmov.f32	s0, s15
 80028c2:	f001 fa3f 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80028c6:	eeb0 7b40 	vmov.f64	d7, d0
 80028ca:	ee29 7b07 	vmul.f64	d7, d9, d7
 80028ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80028d2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80028d6:	4bb1      	ldr	r3, [pc, #708]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80028d8:	ed93 7a00 	vldr	s14, [r3]
 80028dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80028e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80028ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80028f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80028f8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80028fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p12 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002900:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
joint.p21 =
		P21 + P22 * dt + (Q * pow(dt, 3)) / 2
 8002904:	4ba5      	ldr	r3, [pc, #660]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002906:	ed93 7a00 	vldr	s14, [r3]
 800290a:	edd7 7a04 	vldr	s15, [r7, #16]
 800290e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002912:	edd7 7a05 	vldr	s15, [r7, #20]
 8002916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800291a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800291e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002922:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002926:	4b9d      	ldr	r3, [pc, #628]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002928:	edd3 7a00 	vldr	s15, [r3]
 800292c:	2003      	movs	r0, #3
 800292e:	eeb0 0a67 	vmov.f32	s0, s15
 8002932:	f001 fa07 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002936:	eeb0 7b40 	vmov.f64	d7, d0
 800293a:	ee29 6b07 	vmul.f64	d6, d9, d7
 800293e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002942:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002946:	ee38 8b07 	vadd.f64	d8, d8, d7
				- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21)
 800294a:	edd7 7a03 	vldr	s15, [r7, #12]
 800294e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002952:	4b92      	ldr	r3, [pc, #584]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	2003      	movs	r0, #3
 800295a:	eeb0 0a67 	vmov.f32	s0, s15
 800295e:	f001 f9f1 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002962:	eeb0 7b40 	vmov.f64	d7, d0
 8002966:	ee29 7b07 	vmul.f64	d7, d9, d7
 800296a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800296e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002972:	4b8a      	ldr	r3, [pc, #552]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002974:	ed93 7a00 	vldr	s14, [r3]
 8002978:	edd7 7a04 	vldr	s15, [r7, #16]
 800297c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002980:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002984:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002988:	edd7 7a05 	vldr	s15, [r7, #20]
 800298c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002990:	ee36 9b07 	vadd.f64	d9, d6, d7
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 8002994:	4b81      	ldr	r3, [pc, #516]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002996:	ed93 7a00 	vldr	s14, [r3]
 800299a:	edd7 7a05 	vldr	s15, [r7, #20]
 800299e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80029a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029aa:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80029ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80029b2:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80029b6:	4b79      	ldr	r3, [pc, #484]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80029b8:	edd3 7a00 	vldr	s15, [r3]
 80029bc:	2004      	movs	r0, #4
 80029be:	eeb0 0a67 	vmov.f32	s0, s15
 80029c2:	f001 f9bf 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80029c6:	eeb0 7b40 	vmov.f64	d7, d0
 80029ca:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80029ce:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80029d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80029d6:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt)))
 80029da:	4b70      	ldr	r3, [pc, #448]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80029dc:	ed93 7a00 	vldr	s14, [r3]
 80029e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80029e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e8:	edd7 7a06 	vldr	s15, [r7, #24]
 80029ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029f0:	4b6a      	ldr	r3, [pc, #424]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80029f2:	edd3 7a00 	vldr	s15, [r3]
 80029f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029fe:	ee36 7b07 	vadd.f64	d7, d6, d7
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 8002a02:	ee29 9b07 	vmul.f64	d9, d9, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002a06:	ed97 7a07 	vldr	s14, [r7, #28]
 8002a0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a12:	4b62      	ldr	r3, [pc, #392]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a14:	edd3 6a00 	vldr	s13, [r3]
 8002a18:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a24:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002a28:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a2c:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002a30:	4b5a      	ldr	r3, [pc, #360]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a32:	edd3 7a00 	vldr	s15, [r3]
 8002a36:	2004      	movs	r0, #4
 8002a38:	eeb0 0a67 	vmov.f32	s0, s15
 8002a3c:	f001 f982 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a40:	eeb0 7b40 	vmov.f64	d7, d0
 8002a44:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002a48:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002a4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a50:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt));
 8002a54:	4b51      	ldr	r3, [pc, #324]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a56:	ed93 7a00 	vldr	s14, [r3]
 8002a5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a62:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a6a:	4b4c      	ldr	r3, [pc, #304]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a6c:	edd3 7a00 	vldr	s15, [r3]
 8002a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a78:	ee36 6b07 	vadd.f64	d6, d6, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002a7c:	ee89 7b06 	vdiv.f64	d7, d9, d6
				- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21)
 8002a80:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002a84:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p21 =
 8002a88:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
joint.p22 = P22 + Q * pow(dt, 2)
 8002a8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a90:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002a94:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a98:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002a9c:	4b3f      	ldr	r3, [pc, #252]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a9e:	edd3 7a00 	vldr	s15, [r3]
 8002aa2:	2002      	movs	r0, #2
 8002aa4:	eeb0 0a67 	vmov.f32	s0, s15
 8002aa8:	f001 f94c 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002aac:	eeb0 7b40 	vmov.f64	d7, d0
 8002ab0:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002ab4:	ee38 8b07 	vadd.f64	d8, d8, d7
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P12)
 8002ab8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002abc:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002ac0:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002ac2:	edd3 7a00 	vldr	s15, [r3]
 8002ac6:	2003      	movs	r0, #3
 8002ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8002acc:	f001 f93a 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002ad0:	eeb0 7b40 	vmov.f64	d7, d0
 8002ad4:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002ad8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002adc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ae0:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002ae2:	ed93 7a00 	vldr	s14, [r3]
 8002ae6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002af2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002af6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002afa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002afe:	ee36 9b07 	vadd.f64	d9, d6, d7
				* ((Q * pow(dt, 3)) / 2 + P22 * dt + P21))
 8002b02:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b06:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002b0c:	edd3 7a00 	vldr	s15, [r3]
 8002b10:	2003      	movs	r0, #3
 8002b12:	eeb0 0a67 	vmov.f32	s0, s15
 8002b16:	f001 f915 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002b1a:	eeb0 7b40 	vmov.f64	d7, d0
 8002b1e:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8002b22:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002b26:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002b2c:	ed93 7a00 	vldr	s14, [r3]
 8002b30:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b3c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b40:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b48:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b4c:	ee29 9b07 	vmul.f64	d9, d9, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002b50:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002b5e:	edd3 6a00 	vldr	s13, [r3]
 8002b62:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002b72:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b76:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002b7a:	4b08      	ldr	r3, [pc, #32]	; (8002b9c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	2004      	movs	r0, #4
 8002b82:	eeb0 0a67 	vmov.f32	s0, s15
 8002b86:	f001 f8dd 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002b8a:	eeb0 7b40 	vmov.f64	d7, d0
 8002b8e:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002b92:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002b96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b9a:	e001      	b.n	8002ba0 <_Z12KalmanFilterf11robot_joint+0x7d8>
 8002b9c:	24000038 	.word	0x24000038
 8002ba0:	ee3a 6b07 	vadd.f64	d6, d10, d7
						+ dt * (P12 + P22 * dt));
 8002ba4:	4b16      	ldr	r3, [pc, #88]	; (8002c00 <_Z12KalmanFilterf11robot_joint+0x838>)
 8002ba6:	ed93 7a00 	vldr	s14, [r3]
 8002baa:	edd7 7a04 	vldr	s15, [r7, #16]
 8002bae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bb6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bba:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <_Z12KalmanFilterf11robot_joint+0x838>)
 8002bbc:	edd3 7a00 	vldr	s15, [r3]
 8002bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bc8:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002bcc:	ee89 7b06 	vdiv.f64	d7, d9, d6
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P12)
 8002bd0:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002bd4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p22 = P22 + Q * pow(dt, 2)
 8002bd8:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
//	joint.p11 = (R*(4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p12 = (2*R*(Q*dt3 + 2*p22*dt + 2*p12))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p21 = (2*R*(Q*dt3 + 2*p22*dt + 2*p21))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p22 = p22 + Q*dt2 - (((Q*dt3)/2 + p22*dt + p12)*((Q*dt3)/2 + p22*dt + p21))/(R + p11 + dt*p21 + (Q*dt4)/4 + dt*(p12 + dt*p22));

return joint;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002be4:	2284      	movs	r2, #132	; 0x84
 8002be6:	4619      	mov	r1, r3
 8002be8:	f00d fa70 	bl	80100cc <memcpy>

}
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	3728      	adds	r7, #40	; 0x28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	ecbd 8b08 	vpop	{d8-d11}
 8002bf6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bfa:	b004      	add	sp, #16
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	24000038 	.word	0x24000038

08002c04 <_Z7find_IKffff>:

joint_config find_IK(float gripper_linear_x, float gripper_linear_y,
	float gripper_linear_z, float gripper_angular_yaw) {
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b09b      	sub	sp, #108	; 0x6c
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	ed87 0a07 	vstr	s0, [r7, #28]
 8002c0e:	edc7 0a06 	vstr	s1, [r7, #24]
 8002c12:	ed87 1a05 	vstr	s2, [r7, #20]
 8002c16:	edc7 1a04 	vstr	s3, [r7, #16]
bug1 = gripper_linear_x * gripper_linear_x;
 8002c1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c22:	4b74      	ldr	r3, [pc, #464]	; (8002df4 <_Z7find_IKffff+0x1f0>)
 8002c24:	edc3 7a00 	vstr	s15, [r3]
bug2 = gripper_linear_y * gripper_linear_y;
 8002c28:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c2c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c30:	4b71      	ldr	r3, [pc, #452]	; (8002df8 <_Z7find_IKffff+0x1f4>)
 8002c32:	edc3 7a00 	vstr	s15, [r3]
bug3 = L12 * L12;
 8002c36:	4b71      	ldr	r3, [pc, #452]	; (8002dfc <_Z7find_IKffff+0x1f8>)
 8002c38:	ed93 7a00 	vldr	s14, [r3]
 8002c3c:	4b6f      	ldr	r3, [pc, #444]	; (8002dfc <_Z7find_IKffff+0x1f8>)
 8002c3e:	edd3 7a00 	vldr	s15, [r3]
 8002c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c46:	4b6e      	ldr	r3, [pc, #440]	; (8002e00 <_Z7find_IKffff+0x1fc>)
 8002c48:	edc3 7a00 	vstr	s15, [r3]
bug4 = L3 * L3;
 8002c4c:	4b6d      	ldr	r3, [pc, #436]	; (8002e04 <_Z7find_IKffff+0x200>)
 8002c4e:	ed93 7a00 	vldr	s14, [r3]
 8002c52:	4b6c      	ldr	r3, [pc, #432]	; (8002e04 <_Z7find_IKffff+0x200>)
 8002c54:	edd3 7a00 	vldr	s15, [r3]
 8002c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5c:	4b6a      	ldr	r3, [pc, #424]	; (8002e08 <_Z7find_IKffff+0x204>)
 8002c5e:	edc3 7a00 	vstr	s15, [r3]
float C3 = ((gripper_linear_x * gripper_linear_x)
 8002c62:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c66:	ee27 7aa7 	vmul.f32	s14, s15, s15
		+ (gripper_linear_y * gripper_linear_y) - (L12 * L12) - (L3 * L3))
 8002c6a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c6e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c72:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c76:	4b61      	ldr	r3, [pc, #388]	; (8002dfc <_Z7find_IKffff+0x1f8>)
 8002c78:	edd3 6a00 	vldr	s13, [r3]
 8002c7c:	4b5f      	ldr	r3, [pc, #380]	; (8002dfc <_Z7find_IKffff+0x1f8>)
 8002c7e:	edd3 7a00 	vldr	s15, [r3]
 8002c82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c8a:	4b5e      	ldr	r3, [pc, #376]	; (8002e04 <_Z7find_IKffff+0x200>)
 8002c8c:	edd3 6a00 	vldr	s13, [r3]
 8002c90:	4b5c      	ldr	r3, [pc, #368]	; (8002e04 <_Z7find_IKffff+0x200>)
 8002c92:	edd3 7a00 	vldr	s15, [r3]
 8002c96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c9a:	ee77 6a67 	vsub.f32	s13, s14, s15
		/ (2 * L12 * L3);
 8002c9e:	4b57      	ldr	r3, [pc, #348]	; (8002dfc <_Z7find_IKffff+0x1f8>)
 8002ca0:	edd3 7a00 	vldr	s15, [r3]
 8002ca4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002ca8:	4b56      	ldr	r3, [pc, #344]	; (8002e04 <_Z7find_IKffff+0x200>)
 8002caa:	edd3 7a00 	vldr	s15, [r3]
 8002cae:	ee27 7a27 	vmul.f32	s14, s14, s15
float C3 = ((gripper_linear_x * gripper_linear_x)
 8002cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cb6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
float S3 = sqrt(1 - (C3 * C3));
 8002cba:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002cbe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002cc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cca:	eeb0 0a67 	vmov.f32	s0, s15
 8002cce:	f7fe ff6d 	bl	8001bac <_ZSt4sqrtf>
 8002cd2:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
float q3 = atan2(S3, C3);
 8002cd6:	edd7 0a19 	vldr	s1, [r7, #100]	; 0x64
 8002cda:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8002cde:	f7fe ff31 	bl	8001b44 <_ZSt5atan2ff>
 8002ce2:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c

float L3S3 = L3 * S3;
 8002ce6:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <_Z7find_IKffff+0x200>)
 8002ce8:	edd3 7a00 	vldr	s15, [r3]
 8002cec:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002cf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
float L123C3 = L12 + (L3 * C3);
 8002cf8:	4b42      	ldr	r3, [pc, #264]	; (8002e04 <_Z7find_IKffff+0x200>)
 8002cfa:	ed93 7a00 	vldr	s14, [r3]
 8002cfe:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002d02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d06:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <_Z7find_IKffff+0x1f8>)
 8002d08:	edd3 7a00 	vldr	s15, [r3]
 8002d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d10:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

float S1 = (-L3S3 * gripper_linear_x) + (L123C3 * gripper_linear_y);
 8002d14:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002d18:	eeb1 7a67 	vneg.f32	s14, s15
 8002d1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d24:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002d28:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d34:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
float C1 = (L3S3 * gripper_linear_y) + (L123C3 * gripper_linear_x);
 8002d38:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002d3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d44:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002d48:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d54:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
float q1 = atan2(S1, C1);
 8002d58:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8002d5c:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002d60:	f7fe fef0 	bl	8001b44 <_ZSt5atan2ff>
 8002d64:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
float q4 = gripper_angular_yaw - q1 - q3;
 8002d68:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d6c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002d70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d74:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d7c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
float q2 = gripper_linear_z + H4 - H3 - H1;
 8002d80:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <_Z7find_IKffff+0x208>)
 8002d82:	ed93 7a00 	vldr	s14, [r3]
 8002d86:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d8e:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <_Z7find_IKffff+0x20c>)
 8002d90:	edd3 7a00 	vldr	s15, [r3]
 8002d94:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d98:	4b1e      	ldr	r3, [pc, #120]	; (8002e14 <_Z7find_IKffff+0x210>)
 8002d9a:	edd3 7a00 	vldr	s15, [r3]
 8002d9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

joint_config buff;
buff.q1 = q1;
 8002da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da8:	623b      	str	r3, [r7, #32]
buff.q2 = C3;
 8002daa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
buff.q3 = q3;
 8002dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002db0:	62bb      	str	r3, [r7, #40]	; 0x28
buff.q4 = S3;
 8002db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002db4:	62fb      	str	r3, [r7, #44]	; 0x2c

return buff;
 8002db6:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002dba:	f107 0320 	add.w	r3, r7, #32
 8002dbe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dcc:	ee06 0a10 	vmov	s12, r0
 8002dd0:	ee06 1a90 	vmov	s13, r1
 8002dd4:	ee07 2a10 	vmov	s14, r2
 8002dd8:	ee07 3a90 	vmov	s15, r3
}
 8002ddc:	eeb0 0a46 	vmov.f32	s0, s12
 8002de0:	eef0 0a66 	vmov.f32	s1, s13
 8002de4:	eeb0 1a47 	vmov.f32	s2, s14
 8002de8:	eef0 1a67 	vmov.f32	s3, s15
 8002dec:	376c      	adds	r7, #108	; 0x6c
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd90      	pop	{r4, r7, pc}
 8002df2:	bf00      	nop
 8002df4:	240003ac 	.word	0x240003ac
 8002df8:	240003b0 	.word	0x240003b0
 8002dfc:	24000010 	.word	0x24000010
 8002e00:	240003b4 	.word	0x240003b4
 8002e04:	2400000c 	.word	0x2400000c
 8002e08:	240003b8 	.word	0x240003b8
 8002e0c:	2400001c 	.word	0x2400001c
 8002e10:	24000018 	.word	0x24000018
 8002e14:	24000014 	.word	0x24000014

08002e18 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002e18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e1a:	ed2d 8b02 	vpush	{d8}
 8002e1e:	b0cf      	sub	sp, #316	; 0x13c
 8002e20:	af1e      	add	r7, sp, #120	; 0x78
 8002e22:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
// tim7 1000 Hz
// tim12 2000 Hz
// tim6 200 Hz
// tim14 500Hz

if (htim == &htim6) {	//
 8002e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e2a:	4ac9      	ldr	r2, [pc, #804]	; (8003150 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	f040 80bc 	bne.w	8002faa <HAL_TIM_PeriodElapsedCallback+0x192>

	encoderJ1.AMT21_Read();
 8002e32:	48c8      	ldr	r0, [pc, #800]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002e34:	f7fd fe03 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8002e38:	48c6      	ldr	r0, [pc, #792]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002e3a:	f7fd fe2f 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	461a      	mov	r2, r3
 8002e42:	4bc5      	ldr	r3, [pc, #788]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002e44:	701a      	strb	r2, [r3, #0]
	if (HALENCJ1OK == HAL_OK) {
 8002e46:	4bc4      	ldr	r3, [pc, #784]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_TIM_PeriodElapsedCallback+0x44>
		fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 8002e4e:	48c1      	ldr	r0, [pc, #772]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002e50:	f7fd fe88 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002e54:	4603      	mov	r3, r0
 8002e56:	461a      	mov	r2, r3
 8002e58:	4bc0      	ldr	r3, [pc, #768]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002e5a:	801a      	strh	r2, [r3, #0]
	}

	encoderJ3.AMT21_Read();
 8002e5c:	48c0      	ldr	r0, [pc, #768]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002e5e:	f7fd fdee 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
	HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8002e62:	48bf      	ldr	r0, [pc, #764]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002e64:	f7fd fe1a 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4bbd      	ldr	r3, [pc, #756]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8002e6e:	701a      	strb	r2, [r3, #0]
	if (HALENCJ3OK == HAL_OK) {
 8002e70:	4bbc      	ldr	r3, [pc, #752]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d106      	bne.n	8002e86 <HAL_TIM_PeriodElapsedCallback+0x6e>
		fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
 8002e78:	48b9      	ldr	r0, [pc, #740]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002e7a:	f7fd fe73 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	461a      	mov	r2, r3
 8002e82:	4bb9      	ldr	r3, [pc, #740]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002e84:	801a      	strh	r2, [r3, #0]
	}

	float sethome_q1 = -0.4137;
 8002e86:	4bb9      	ldr	r3, [pc, #740]	; (800316c <HAL_TIM_PeriodElapsedCallback+0x354>)
 8002e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	float sethome_q2 = 0.1;
 8002e8c:	4bb8      	ldr	r3, [pc, #736]	; (8003170 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8002e8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	float sethome_q3 =   0.9638;
 8002e92:	4bb8      	ldr	r3, [pc, #736]	; (8003174 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002e94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float sethome_yaw = -0.5501;
 8002e98:	4bb7      	ldr	r3, [pc, #732]	; (8003178 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	error_q1 = sethome_q1*2609.0 - fcb_joint1.Encoder;
 8002e9e:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002ea2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ea6:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 8003140 <HAL_TIM_PeriodElapsedCallback+0x328>
 8002eaa:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002eae:	4bab      	ldr	r3, [pc, #684]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	b21b      	sxth	r3, r3
 8002eb4:	ee07 3a90 	vmov	s15, r3
 8002eb8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ebc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002ec0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ec4:	4bad      	ldr	r3, [pc, #692]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002ec6:	edc3 7a00 	vstr	s15, [r3]
	error_q3 = sethome_q3*2609.0 - fcb_joint3.Encoder;
 8002eca:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002ece:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ed2:	ed9f 6b9b 	vldr	d6, [pc, #620]	; 8003140 <HAL_TIM_PeriodElapsedCallback+0x328>
 8002ed6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002eda:	4ba3      	ldr	r3, [pc, #652]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	b21b      	sxth	r3, r3
 8002ee0:	ee07 3a90 	vmov	s15, r3
 8002ee4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002ee8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002eec:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002ef0:	4ba3      	ldr	r3, [pc, #652]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002ef2:	edc3 7a00 	vstr	s15, [r3]

	stepperJ1.StepperSetFrequency(error_q1*-2.0);
 8002ef6:	4ba1      	ldr	r3, [pc, #644]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002ef8:	edd3 7a00 	vldr	s15, [r3]
 8002efc:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8002f00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f04:	eeb0 0a67 	vmov.f32	s0, s15
 8002f08:	489e      	ldr	r0, [pc, #632]	; (8003184 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8002f0a:	f7fe f955 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetFrequency(error_q3/3);
 8002f0e:	4b9c      	ldr	r3, [pc, #624]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002f18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f1c:	eeb0 0a47 	vmov.f32	s0, s14
 8002f20:	4899      	ldr	r0, [pc, #612]	; (8003188 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002f22:	f7fe f949 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	if (abs(error_q3) < 20.0)
 8002f26:	4b96      	ldr	r3, [pc, #600]	; (8003180 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002f28:	edd3 7a00 	vldr	s15, [r3]
 8002f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f30:	f7fe fdf8 	bl	8001b24 <_ZSt3absf>
 8002f34:	eef0 7a40 	vmov.f32	s15, s0
 8002f38:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f44:	bf4c      	ite	mi
 8002f46:	2301      	movmi	r3, #1
 8002f48:	2300      	movpl	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d004      	beq.n	8002f5a <HAL_TIM_PeriodElapsedCallback+0x142>
	{
		stepperJ3.StepperSetFrequency(0);
 8002f50:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 800318c <HAL_TIM_PeriodElapsedCallback+0x374>
 8002f54:	488c      	ldr	r0, [pc, #560]	; (8003188 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002f56:	f7fe f92f 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	}
	if ( abs(error_q1) < 15.0 )
 8002f5a:	4b88      	ldr	r3, [pc, #544]	; (800317c <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002f5c:	edd3 7a00 	vldr	s15, [r3]
 8002f60:	eeb0 0a67 	vmov.f32	s0, s15
 8002f64:	f7fe fdde 	bl	8001b24 <_ZSt3absf>
 8002f68:	eef0 7a40 	vmov.f32	s15, s0
 8002f6c:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002f70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f78:	bf4c      	ite	mi
 8002f7a:	2301      	movmi	r3, #1
 8002f7c:	2300      	movpl	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d012      	beq.n	8002faa <HAL_TIM_PeriodElapsedCallback+0x192>
	{
		State_Sethome = 0;
 8002f84:	4b82      	ldr	r3, [pc, #520]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
		stepperJ1.StepperSetFrequency(0);
 8002f8a:	ed9f 0a80 	vldr	s0, [pc, #512]	; 800318c <HAL_TIM_PeriodElapsedCallback+0x374>
 8002f8e:	487d      	ldr	r0, [pc, #500]	; (8003184 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8002f90:	f7fe f912 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
		stepperJ3.StepperSetFrequency(0);
 8002f94:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800318c <HAL_TIM_PeriodElapsedCallback+0x374>
 8002f98:	487b      	ldr	r0, [pc, #492]	; (8003188 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002f9a:	f7fe f90d 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
		HAL_TIM_Base_Stop_IT(&htim6);
 8002f9e:	486c      	ldr	r0, [pc, #432]	; (8003150 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002fa0:	f008 fdae 	bl	800bb00 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Start_IT(&htim7);
 8002fa4:	487b      	ldr	r0, [pc, #492]	; (8003194 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8002fa6:	f008 fd33 	bl	800ba10 <HAL_TIM_Base_Start_IT>

if (htim == &htim12) {	//

}

if (htim == &htim5) {	//
 8002faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fae:	4a7a      	ldr	r2, [pc, #488]	; (8003198 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	f040 81eb 	bne.w	800338c <HAL_TIM_PeriodElapsedCallback+0x574>

		encoderJ1.AMT21_Read();
 8002fb6:	4867      	ldr	r0, [pc, #412]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002fb8:	f7fd fd41 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8002fbc:	4865      	ldr	r0, [pc, #404]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002fbe:	f7fd fd6d 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b64      	ldr	r3, [pc, #400]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002fc8:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8002fca:	4b63      	ldr	r3, [pc, #396]	; (8003158 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_TIM_PeriodElapsedCallback+0x1c8>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 8002fd2:	4860      	ldr	r0, [pc, #384]	; (8003154 <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002fd4:	f7fd fdc6 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b5f      	ldr	r3, [pc, #380]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002fde:	801a      	strh	r2, [r3, #0]
//		if(HALENCJ2OK == HAL_OK){
//			encoderJ2.unwarp();
//			posJ2 = encoderJ2.getUnwarpValue();
//		}

		encoderJ3.AMT21_Read();
 8002fe0:	485f      	ldr	r0, [pc, #380]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002fe2:	f7fd fd2c 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8002fe6:	485e      	ldr	r0, [pc, #376]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002fe8:	f7fd fd58 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002fec:	4603      	mov	r3, r0
 8002fee:	461a      	mov	r2, r3
 8002ff0:	4b5c      	ldr	r3, [pc, #368]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8002ff2:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8002ff4:	4b5b      	ldr	r3, [pc, #364]	; (8003164 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d106      	bne.n	800300a <HAL_TIM_PeriodElapsedCallback+0x1f2>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
 8002ffc:	4858      	ldr	r0, [pc, #352]	; (8003160 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002ffe:	f7fd fdb1 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8003002:	4603      	mov	r3, r0
 8003004:	461a      	mov	r2, r3
 8003006:	4b58      	ldr	r3, [pc, #352]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003008:	801a      	strh	r2, [r3, #0]
//		stepperJ1.StepperSetFrequency(dq1);
//		stepperJ2.StepperSetFrequency(dq2);
//		stepperJ3.StepperSetFrequency(dq3);
//		stepperJ4.StepperSetFrequency(dq4);

		Update_ivk(fcb_joint1.Encoder / 2609.0 , 0.0,fcb_joint3.Encoder / 2609.0, 0.0, dx/1000.0, dy/1000.0, dz/1000.0, dyaw/1000.0);
 800300a:	4b54      	ldr	r3, [pc, #336]	; (800315c <HAL_TIM_PeriodElapsedCallback+0x344>)
 800300c:	881b      	ldrh	r3, [r3, #0]
 800300e:	b21b      	sxth	r3, r3
 8003010:	ee07 3a90 	vmov	s15, r3
 8003014:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003018:	ed9f 5b49 	vldr	d5, [pc, #292]	; 8003140 <HAL_TIM_PeriodElapsedCallback+0x328>
 800301c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003020:	eef7 4bc7 	vcvt.f32.f64	s9, d7
 8003024:	4b50      	ldr	r3, [pc, #320]	; (8003168 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	b21b      	sxth	r3, r3
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003032:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8003140 <HAL_TIM_PeriodElapsedCallback+0x328>
 8003036:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800303a:	eeb7 4bc7 	vcvt.f32.f64	s8, d7
 800303e:	4b57      	ldr	r3, [pc, #348]	; (800319c <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	b25b      	sxtb	r3, r3
 8003044:	ee07 3a90 	vmov	s15, r3
 8003048:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800304c:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8003148 <HAL_TIM_PeriodElapsedCallback+0x330>
 8003050:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003054:	eeb7 2bc7 	vcvt.f32.f64	s4, d7
 8003058:	4b51      	ldr	r3, [pc, #324]	; (80031a0 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	b25b      	sxtb	r3, r3
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003066:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8003148 <HAL_TIM_PeriodElapsedCallback+0x330>
 800306a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800306e:	eef7 2bc7 	vcvt.f32.f64	s5, d7
 8003072:	4b4c      	ldr	r3, [pc, #304]	; (80031a4 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	b25b      	sxtb	r3, r3
 8003078:	ee07 3a90 	vmov	s15, r3
 800307c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003080:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8003148 <HAL_TIM_PeriodElapsedCallback+0x330>
 8003084:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003088:	eeb7 3bc7 	vcvt.f32.f64	s6, d7
 800308c:	4b46      	ldr	r3, [pc, #280]	; (80031a8 <HAL_TIM_PeriodElapsedCallback+0x390>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	b25b      	sxtb	r3, r3
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800309a:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8003148 <HAL_TIM_PeriodElapsedCallback+0x330>
 800309e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80030a2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030a6:	eef0 3a67 	vmov.f32	s7, s15
 80030aa:	eddf 1a38 	vldr	s3, [pc, #224]	; 800318c <HAL_TIM_PeriodElapsedCallback+0x374>
 80030ae:	eeb0 1a44 	vmov.f32	s2, s8
 80030b2:	eddf 0a36 	vldr	s1, [pc, #216]	; 800318c <HAL_TIM_PeriodElapsedCallback+0x374>
 80030b6:	eeb0 0a64 	vmov.f32	s0, s9
 80030ba:	f7ff f893 	bl	80021e4 <_Z10Update_ivkffffffff>

		int i;
				for (i = 1 ; i<num ; i++)
 80030be:	2301      	movs	r3, #1
 80030c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80030c4:	4b39      	ldr	r3, [pc, #228]	; (80031ac <HAL_TIM_PeriodElapsedCallback+0x394>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030cc:	429a      	cmp	r2, r3
 80030ce:	da7d      	bge.n	80031cc <HAL_TIM_PeriodElapsedCallback+0x3b4>
				{
					box_q1[i-1] = box_q1[i];
 80030d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030d4:	3b01      	subs	r3, #1
 80030d6:	4936      	ldr	r1, [pc, #216]	; (80031b0 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80030d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030dc:	0092      	lsls	r2, r2, #2
 80030de:	440a      	add	r2, r1
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	4933      	ldr	r1, [pc, #204]	; (80031b0 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	601a      	str	r2, [r3, #0]
					box_q2[i-1] = box_q2[i];
 80030ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80030ee:	3b01      	subs	r3, #1
 80030f0:	4930      	ldr	r1, [pc, #192]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80030f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80030f6:	0092      	lsls	r2, r2, #2
 80030f8:	440a      	add	r2, r1
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	492d      	ldr	r1, [pc, #180]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	601a      	str	r2, [r3, #0]
					box_q3[i-1] = box_q3[i];
 8003104:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003108:	3b01      	subs	r3, #1
 800310a:	492b      	ldr	r1, [pc, #172]	; (80031b8 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800310c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003110:	0092      	lsls	r2, r2, #2
 8003112:	440a      	add	r2, r1
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	4928      	ldr	r1, [pc, #160]	; (80031b8 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	601a      	str	r2, [r3, #0]
					box_q4[i-1] = box_q4[i];
 800311e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003122:	3b01      	subs	r3, #1
 8003124:	4925      	ldr	r1, [pc, #148]	; (80031bc <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8003126:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800312a:	0092      	lsls	r2, r2, #2
 800312c:	440a      	add	r2, r1
 800312e:	6812      	ldr	r2, [r2, #0]
 8003130:	4922      	ldr	r1, [pc, #136]	; (80031bc <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	440b      	add	r3, r1
 8003136:	601a      	str	r2, [r3, #0]
 8003138:	e042      	b.n	80031c0 <HAL_TIM_PeriodElapsedCallback+0x3a8>
 800313a:	bf00      	nop
 800313c:	f3af 8000 	nop.w
 8003140:	00000000 	.word	0x00000000
 8003144:	40a46200 	.word	0x40a46200
 8003148:	00000000 	.word	0x00000000
 800314c:	408f4000 	.word	0x408f4000
 8003150:	24000a30 	.word	0x24000a30
 8003154:	2400023c 	.word	0x2400023c
 8003158:	24000330 	.word	0x24000330
 800315c:	240005ec 	.word	0x240005ec
 8003160:	24000258 	.word	0x24000258
 8003164:	24000331 	.word	0x24000331
 8003168:	240006f4 	.word	0x240006f4
 800316c:	bed3d07d 	.word	0xbed3d07d
 8003170:	3dcccccd 	.word	0x3dcccccd
 8003174:	3f76bb99 	.word	0x3f76bb99
 8003178:	bf0cd35b 	.word	0xbf0cd35b
 800317c:	24000380 	.word	0x24000380
 8003180:	24000384 	.word	0x24000384
 8003184:	24000274 	.word	0x24000274
 8003188:	240002c4 	.word	0x240002c4
 800318c:	00000000 	.word	0x00000000
 8003190:	24000000 	.word	0x24000000
 8003194:	24000bac 	.word	0x24000bac
 8003198:	2400094c 	.word	0x2400094c
 800319c:	24000336 	.word	0x24000336
 80031a0:	24000337 	.word	0x24000337
 80031a4:	24000338 	.word	0x24000338
 80031a8:	24000339 	.word	0x24000339
 80031ac:	2400003c 	.word	0x2400003c
 80031b0:	24000404 	.word	0x24000404
 80031b4:	2400047c 	.word	0x2400047c
 80031b8:	240004f4 	.word	0x240004f4
 80031bc:	2400056c 	.word	0x2400056c
				for (i = 1 ; i<num ; i++)
 80031c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80031c4:	3301      	adds	r3, #1
 80031c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80031ca:	e77b      	b.n	80030c4 <HAL_TIM_PeriodElapsedCallback+0x2ac>
				}
				 box_q1[num-1] = w_q1;
 80031cc:	4b45      	ldr	r3, [pc, #276]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	4a45      	ldr	r2, [pc, #276]	; (80032e8 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 80031d4:	6812      	ldr	r2, [r2, #0]
 80031d6:	4945      	ldr	r1, [pc, #276]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	601a      	str	r2, [r3, #0]
				 box_q2[num-1] = dz;
 80031de:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	b25a      	sxtb	r2, r3
 80031e4:	4b3f      	ldr	r3, [pc, #252]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	3b01      	subs	r3, #1
 80031ea:	ee07 2a90 	vmov	s15, r2
 80031ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031f2:	4a40      	ldr	r2, [pc, #256]	; (80032f4 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	4413      	add	r3, r2
 80031f8:	edc3 7a00 	vstr	s15, [r3]
				 box_q3[num-1] = w_q3;
 80031fc:	4b39      	ldr	r3, [pc, #228]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3b01      	subs	r3, #1
 8003202:	4a3d      	ldr	r2, [pc, #244]	; (80032f8 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	493d      	ldr	r1, [pc, #244]	; (80032fc <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	601a      	str	r2, [r3, #0]
				 box_q4[num-1] = dyaw;
 800320e:	4b3c      	ldr	r3, [pc, #240]	; (8003300 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b25a      	sxtb	r2, r3
 8003214:	4b33      	ldr	r3, [pc, #204]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3b01      	subs	r3, #1
 800321a:	ee07 2a90 	vmov	s15, r2
 800321e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003222:	4a38      	ldr	r2, [pc, #224]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	edc3 7a00 	vstr	s15, [r3]

				u_q1 = 0.0;
 800322c:	4b36      	ldr	r3, [pc, #216]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
				u_q2 = 0.0;
 8003234:	4b35      	ldr	r3, [pc, #212]	; (800330c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8003236:	f04f 0200 	mov.w	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
				u_q3 = 0.0;
 800323c:	4b34      	ldr	r3, [pc, #208]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
				u_q4 = 0.0;
 8003244:	4b33      	ldr	r3, [pc, #204]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

				for(i = 0; i < num; i++)
 800324c:	2300      	movs	r3, #0
 800324e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_TIM_PeriodElapsedCallback+0x4cc>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800325a:	429a      	cmp	r2, r3
 800325c:	da5c      	bge.n	8003318 <HAL_TIM_PeriodElapsedCallback+0x500>
				{
					u_q1 += box_q1[i];
 800325e:	4a23      	ldr	r2, [pc, #140]	; (80032ec <HAL_TIM_PeriodElapsedCallback+0x4d4>)
 8003260:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	ed93 7a00 	vldr	s14, [r3]
 800326c:	4b26      	ldr	r3, [pc, #152]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 800326e:	edd3 7a00 	vldr	s15, [r3]
 8003272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8003278:	edc3 7a00 	vstr	s15, [r3]
					u_q2 += box_q2[i];
 800327c:	4a1d      	ldr	r2, [pc, #116]	; (80032f4 <HAL_TIM_PeriodElapsedCallback+0x4dc>)
 800327e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	ed93 7a00 	vldr	s14, [r3]
 800328a:	4b20      	ldr	r3, [pc, #128]	; (800330c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003294:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8003296:	edc3 7a00 	vstr	s15, [r3]
					u_q3 += box_q3[i];
 800329a:	4a18      	ldr	r2, [pc, #96]	; (80032fc <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 800329c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	ed93 7a00 	vldr	s14, [r3]
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80032aa:	edd3 7a00 	vldr	s15, [r3]
 80032ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b2:	4b17      	ldr	r3, [pc, #92]	; (8003310 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80032b4:	edc3 7a00 	vstr	s15, [r3]
					u_q4 += box_q4[i];
 80032b8:	4a12      	ldr	r2, [pc, #72]	; (8003304 <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 80032ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	4413      	add	r3, r2
 80032c2:	ed93 7a00 	vldr	s14, [r3]
 80032c6:	4b13      	ldr	r3, [pc, #76]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d0:	4b10      	ldr	r3, [pc, #64]	; (8003314 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80032d2:	edc3 7a00 	vstr	s15, [r3]
				for(i = 0; i < num; i++)
 80032d6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032da:	3301      	adds	r3, #1
 80032dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80032e0:	e7b7      	b.n	8003252 <HAL_TIM_PeriodElapsedCallback+0x43a>
 80032e2:	bf00      	nop
 80032e4:	2400003c 	.word	0x2400003c
 80032e8:	240003cc 	.word	0x240003cc
 80032ec:	24000404 	.word	0x24000404
 80032f0:	24000338 	.word	0x24000338
 80032f4:	2400047c 	.word	0x2400047c
 80032f8:	240003d4 	.word	0x240003d4
 80032fc:	240004f4 	.word	0x240004f4
 8003300:	24000339 	.word	0x24000339
 8003304:	2400056c 	.word	0x2400056c
 8003308:	240003dc 	.word	0x240003dc
 800330c:	240003e0 	.word	0x240003e0
 8003310:	240003e4 	.word	0x240003e4
 8003314:	240003e8 	.word	0x240003e8
				}

				stepperJ1.StepperOpenLoopSpeed(u_q1/num*-1.0);
 8003318:	4bd3      	ldr	r3, [pc, #844]	; (8003668 <HAL_TIM_PeriodElapsedCallback+0x850>)
 800331a:	edd3 6a00 	vldr	s13, [r3]
 800331e:	4bd3      	ldr	r3, [pc, #844]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x854>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	ee07 3a90 	vmov	s15, r3
 8003326:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800332a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800332e:	eef1 7a67 	vneg.f32	s15, s15
 8003332:	eeb0 0a67 	vmov.f32	s0, s15
 8003336:	48ce      	ldr	r0, [pc, #824]	; (8003670 <HAL_TIM_PeriodElapsedCallback+0x858>)
 8003338:	f7fe f9f2 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
				stepperJ2.StepperSetFrequency(u_q2/3.0);
 800333c:	4bcd      	ldr	r3, [pc, #820]	; (8003674 <HAL_TIM_PeriodElapsedCallback+0x85c>)
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003346:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800334a:	eeb0 0a47 	vmov.f32	s0, s14
 800334e:	48ca      	ldr	r0, [pc, #808]	; (8003678 <HAL_TIM_PeriodElapsedCallback+0x860>)
 8003350:	f7fd ff32 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
				stepperJ3.StepperOpenLoopSpeed(u_q3/num*1.0);
 8003354:	4bc9      	ldr	r3, [pc, #804]	; (800367c <HAL_TIM_PeriodElapsedCallback+0x864>)
 8003356:	ed93 7a00 	vldr	s14, [r3]
 800335a:	4bc4      	ldr	r3, [pc, #784]	; (800366c <HAL_TIM_PeriodElapsedCallback+0x854>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003366:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800336a:	eeb0 0a66 	vmov.f32	s0, s13
 800336e:	48c4      	ldr	r0, [pc, #784]	; (8003680 <HAL_TIM_PeriodElapsedCallback+0x868>)
 8003370:	f7fe f9d6 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
				stepperJ4.StepperSetFrequency(u_q4/3.0);
 8003374:	4bc3      	ldr	r3, [pc, #780]	; (8003684 <HAL_TIM_PeriodElapsedCallback+0x86c>)
 8003376:	edd3 7a00 	vldr	s15, [r3]
 800337a:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800337e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003382:	eeb0 0a47 	vmov.f32	s0, s14
 8003386:	48c0      	ldr	r0, [pc, #768]	; (8003688 <HAL_TIM_PeriodElapsedCallback+0x870>)
 8003388:	f7fd ff16 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>


}


	if (htim == &htim7) { 	//
 800338c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003390:	4abe      	ldr	r2, [pc, #760]	; (800368c <HAL_TIM_PeriodElapsedCallback+0x874>)
 8003392:	4293      	cmp	r3, r2
 8003394:	f040 824f 	bne.w	8003836 <HAL_TIM_PeriodElapsedCallback+0xa1e>
//		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
//		if (HALENCJ3OK == HAL_OK) {
//			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
//		}

		float t_2 = t * t;
 8003398:	4bbd      	ldr	r3, [pc, #756]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x878>)
 800339a:	ed93 7a00 	vldr	s14, [r3]
 800339e:	4bbc      	ldr	r3, [pc, #752]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80033a0:	edd3 7a00 	vldr	s15, [r3]
 80033a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033a8:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
		float t_3 = t * t * t;
 80033ac:	4bb8      	ldr	r3, [pc, #736]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80033ae:	ed93 7a00 	vldr	s14, [r3]
 80033b2:	4bb7      	ldr	r3, [pc, #732]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80033b4:	edd3 7a00 	vldr	s15, [r3]
 80033b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033bc:	4bb4      	ldr	r3, [pc, #720]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80033be:	edd3 7a00 	vldr	s15, [r3]
 80033c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//		}

//		fcb_joint1.Goal_Velocity = sin(0.314 * 2 * t) * 2000;
//		fcb_joint3.Goal_Velocity = sin(0.314 * 2 * t) * 4000;

		chess_board_ang = chessboard_angular_velocity * t;
 80033ca:	4bb2      	ldr	r3, [pc, #712]	; (8003694 <HAL_TIM_PeriodElapsedCallback+0x87c>)
 80033cc:	ed93 7a00 	vldr	s14, [r3]
 80033d0:	4baf      	ldr	r3, [pc, #700]	; (8003690 <HAL_TIM_PeriodElapsedCallback+0x878>)
 80033d2:	edd3 7a00 	vldr	s15, [r3]
 80033d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033da:	4baf      	ldr	r3, [pc, #700]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x880>)
 80033dc:	edc3 7a00 	vstr	s15, [r3]

		joint_config findchessbot_joint_state;
		debug_pos_x = (0.177 * cos(chess_board_ang)) + 0.4424 ;
 80033e0:	4bad      	ldr	r3, [pc, #692]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x880>)
 80033e2:	edd3 7a00 	vldr	s15, [r3]
 80033e6:	eeb0 0a67 	vmov.f32	s0, s15
 80033ea:	f7fe fbbf 	bl	8001b6c <_ZSt3cosf>
 80033ee:	eef0 7a40 	vmov.f32	s15, s0
 80033f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80033f6:	ed9f 6b94 	vldr	d6, [pc, #592]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x830>
 80033fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033fe:	ed9f 6b94 	vldr	d6, [pc, #592]	; 8003650 <HAL_TIM_PeriodElapsedCallback+0x838>
 8003402:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003406:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800340a:	4ba4      	ldr	r3, [pc, #656]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x884>)
 800340c:	edc3 7a00 	vstr	s15, [r3]
		debug_pos_y = (0.177 * sin(chess_board_ang)) + 0.0106;
 8003410:	4ba1      	ldr	r3, [pc, #644]	; (8003698 <HAL_TIM_PeriodElapsedCallback+0x880>)
 8003412:	edd3 7a00 	vldr	s15, [r3]
 8003416:	eeb0 0a67 	vmov.f32	s0, s15
 800341a:	f7fe fbb7 	bl	8001b8c <_ZSt3sinf>
 800341e:	eef0 7a40 	vmov.f32	s15, s0
 8003422:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003426:	ed9f 6b88 	vldr	d6, [pc, #544]	; 8003648 <HAL_TIM_PeriodElapsedCallback+0x830>
 800342a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800342e:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8003658 <HAL_TIM_PeriodElapsedCallback+0x840>
 8003432:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003436:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800343a:	4b99      	ldr	r3, [pc, #612]	; (80036a0 <HAL_TIM_PeriodElapsedCallback+0x888>)
 800343c:	edc3 7a00 	vstr	s15, [r3]

		idx = (0.0106 - debug_pos_y) 		* chessboard_angular_velocity;
 8003440:	4b97      	ldr	r3, [pc, #604]	; (80036a0 <HAL_TIM_PeriodElapsedCallback+0x888>)
 8003442:	edd3 7a00 	vldr	s15, [r3]
 8003446:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800344a:	ed9f 6b83 	vldr	d6, [pc, #524]	; 8003658 <HAL_TIM_PeriodElapsedCallback+0x840>
 800344e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8003452:	4b90      	ldr	r3, [pc, #576]	; (8003694 <HAL_TIM_PeriodElapsedCallback+0x87c>)
 8003454:	edd3 7a00 	vldr	s15, [r3]
 8003458:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800345c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003460:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003464:	4b8f      	ldr	r3, [pc, #572]	; (80036a4 <HAL_TIM_PeriodElapsedCallback+0x88c>)
 8003466:	edc3 7a00 	vstr	s15, [r3]
		idy = (debug_pos_x - 0.4424) 			* chessboard_angular_velocity ;
 800346a:	4b8c      	ldr	r3, [pc, #560]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x884>)
 800346c:	edd3 7a00 	vldr	s15, [r3]
 8003470:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003474:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8003650 <HAL_TIM_PeriodElapsedCallback+0x838>
 8003478:	ee37 6b46 	vsub.f64	d6, d7, d6
 800347c:	4b85      	ldr	r3, [pc, #532]	; (8003694 <HAL_TIM_PeriodElapsedCallback+0x87c>)
 800347e:	edd3 7a00 	vldr	s15, [r3]
 8003482:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003486:	ee26 7b07 	vmul.f64	d7, d6, d7
 800348a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800348e:	4b86      	ldr	r3, [pc, #536]	; (80036a8 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003490:	edc3 7a00 	vstr	s15, [r3]

		findchessbot_joint_state = find_IK(debug_pos_x, debug_pos_y, 0, 0);
 8003494:	4b81      	ldr	r3, [pc, #516]	; (800369c <HAL_TIM_PeriodElapsedCallback+0x884>)
 8003496:	edd3 7a00 	vldr	s15, [r3]
 800349a:	4b81      	ldr	r3, [pc, #516]	; (80036a0 <HAL_TIM_PeriodElapsedCallback+0x888>)
 800349c:	ed93 7a00 	vldr	s14, [r3]
 80034a0:	eddf 1a82 	vldr	s3, [pc, #520]	; 80036ac <HAL_TIM_PeriodElapsedCallback+0x894>
 80034a4:	ed9f 1a81 	vldr	s2, [pc, #516]	; 80036ac <HAL_TIM_PeriodElapsedCallback+0x894>
 80034a8:	eef0 0a47 	vmov.f32	s1, s14
 80034ac:	eeb0 0a67 	vmov.f32	s0, s15
 80034b0:	f7ff fba8 	bl	8002c04 <_Z7find_IKffff>
 80034b4:	eeb0 6a40 	vmov.f32	s12, s0
 80034b8:	eef0 6a60 	vmov.f32	s13, s1
 80034bc:	eeb0 7a41 	vmov.f32	s14, s2
 80034c0:	eef0 7a61 	vmov.f32	s15, s3
 80034c4:	ed87 6a25 	vstr	s12, [r7, #148]	; 0x94
 80034c8:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 80034cc:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 80034d0:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		Update_ivk(fcb_joint1.Encoder / 2609.0 , 0, fcb_joint3.Encoder / 2609.0, 0, idx, idy, 0.0, 0.0);
 80034d4:	4b76      	ldr	r3, [pc, #472]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 80034d6:	881b      	ldrh	r3, [r3, #0]
 80034d8:	b21b      	sxth	r3, r3
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80034e2:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8003660 <HAL_TIM_PeriodElapsedCallback+0x848>
 80034e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80034ea:	eef7 4bc7 	vcvt.f32.f64	s9, d7
 80034ee:	4b71      	ldr	r3, [pc, #452]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	b21b      	sxth	r3, r3
 80034f4:	ee07 3a90 	vmov	s15, r3
 80034f8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80034fc:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8003660 <HAL_TIM_PeriodElapsedCallback+0x848>
 8003500:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003504:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003508:	4b66      	ldr	r3, [pc, #408]	; (80036a4 <HAL_TIM_PeriodElapsedCallback+0x88c>)
 800350a:	ed93 7a00 	vldr	s14, [r3]
 800350e:	4b66      	ldr	r3, [pc, #408]	; (80036a8 <HAL_TIM_PeriodElapsedCallback+0x890>)
 8003510:	edd3 6a00 	vldr	s13, [r3]
 8003514:	eddf 3a65 	vldr	s7, [pc, #404]	; 80036ac <HAL_TIM_PeriodElapsedCallback+0x894>
 8003518:	ed9f 3a64 	vldr	s6, [pc, #400]	; 80036ac <HAL_TIM_PeriodElapsedCallback+0x894>
 800351c:	eef0 2a66 	vmov.f32	s5, s13
 8003520:	eeb0 2a47 	vmov.f32	s4, s14
 8003524:	eddf 1a61 	vldr	s3, [pc, #388]	; 80036ac <HAL_TIM_PeriodElapsedCallback+0x894>
 8003528:	eeb0 1a67 	vmov.f32	s2, s15
 800352c:	eddf 0a5f 	vldr	s1, [pc, #380]	; 80036ac <HAL_TIM_PeriodElapsedCallback+0x894>
 8003530:	eeb0 0a64 	vmov.f32	s0, s9
 8003534:	f7fe fe56 	bl	80021e4 <_Z10Update_ivkffffffff>
//		fcb_joint3.Goal_Position = sin(chess_board_ang) * 2500.0;

//		setpointJ1 = Goal_velocity_q1;
//		setpointJ3 = Goal_velocity_q3;

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 8003538:	4b5d      	ldr	r3, [pc, #372]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 800353a:	ed93 7a01 	vldr	s14, [r3, #4]
 800353e:	4b5c      	ldr	r3, [pc, #368]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	b21b      	sxth	r3, r3
 8003544:	ee07 3a90 	vmov	s15, r3
 8003548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800354c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003550:	4b57      	ldr	r3, [pc, #348]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8003552:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 8003556:	4b57      	ldr	r3, [pc, #348]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003558:	ed93 7a01 	vldr	s14, [r3, #4]
 800355c:	4b55      	ldr	r3, [pc, #340]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b21b      	sxth	r3, r3
 8003562:	ee07 3a90 	vmov	s15, r3
 8003566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800356a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800356e:	4b51      	ldr	r3, [pc, #324]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003570:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8003574:	4b4e      	ldr	r3, [pc, #312]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8003576:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800357a:	4b4d      	ldr	r3, [pc, #308]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 800357c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003580:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003584:	4b4a      	ldr	r3, [pc, #296]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8003586:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 800358a:	4b4a      	ldr	r3, [pc, #296]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800358c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003590:	4b48      	ldr	r3, [pc, #288]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 8003592:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800359a:	4b46      	ldr	r3, [pc, #280]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 800359c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

		fcb_joint1.Kp_p = 0.0;
 80035a0:	4b43      	ldr	r3, [pc, #268]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	61da      	str	r2, [r3, #28]
		fcb_joint1.Ki_p = 0.0;
 80035a8:	4b41      	ldr	r3, [pc, #260]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	621a      	str	r2, [r3, #32]
		fcb_joint1.Kd_p = 0.0;
 80035b0:	4b3f      	ldr	r3, [pc, #252]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint1.Kp_v = 0.0;
 80035b8:	4b3d      	ldr	r3, [pc, #244]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint1.Ki_v = 0.0;
 80035c0:	4b3b      	ldr	r3, [pc, #236]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint1.Kd_v = 0.0;
 80035c8:	4b39      	ldr	r3, [pc, #228]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30

		fcb_joint3.Kp_p = 0.0;
 80035d0:	4b38      	ldr	r3, [pc, #224]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	61da      	str	r2, [r3, #28]
		fcb_joint3.Ki_p = 0.0;
 80035d8:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	621a      	str	r2, [r3, #32]
		fcb_joint3.Kd_p = 0.0;
 80035e0:	4b34      	ldr	r3, [pc, #208]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint3.Kp_v = 0.0;
 80035e8:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint3.Ki_v = 0.0;
 80035f0:	4b30      	ldr	r3, [pc, #192]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint3.Kd_v = 0.0;
 80035f8:	4b2e      	ldr	r3, [pc, #184]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x89c>)
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30

//		KalmanFilter(float theta_k,float kalman_pos,float kalman_velo,float P11,float P12,float P21,float P22);
//		KalmanFilter(fcb_joint1.Encoder/ 2609.0 , X11, X21, p11, p12, p21, p22, fcb_joint1);

		fcb_joint1 = KalmanFilter(fcb_joint1.Encoder / 2609.0, fcb_joint1);
 8003600:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b21b      	sxth	r3, r3
 8003606:	ee07 3a90 	vmov	s15, r3
 800360a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800360e:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8003660 <HAL_TIM_PeriodElapsedCallback+0x848>
 8003612:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003616:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 800361a:	4e25      	ldr	r6, [pc, #148]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 800361c:	463d      	mov	r5, r7
 800361e:	4c24      	ldr	r4, [pc, #144]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x898>)
 8003620:	4668      	mov	r0, sp
 8003622:	f104 030c 	add.w	r3, r4, #12
 8003626:	2278      	movs	r2, #120	; 0x78
 8003628:	4619      	mov	r1, r3
 800362a:	f00c fd4f 	bl	80100cc <memcpy>
 800362e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003632:	eeb0 0a48 	vmov.f32	s0, s16
 8003636:	4628      	mov	r0, r5
 8003638:	f7fe fec6 	bl	80023c8 <_Z12KalmanFilterf11robot_joint>
 800363c:	4630      	mov	r0, r6
 800363e:	463b      	mov	r3, r7
 8003640:	e03a      	b.n	80036b8 <HAL_TIM_PeriodElapsedCallback+0x8a0>
 8003642:	bf00      	nop
 8003644:	f3af 8000 	nop.w
 8003648:	9db22d0e 	.word	0x9db22d0e
 800364c:	3fc6a7ef 	.word	0x3fc6a7ef
 8003650:	16f0068e 	.word	0x16f0068e
 8003654:	3fdc5048 	.word	0x3fdc5048
 8003658:	eab367a1 	.word	0xeab367a1
 800365c:	3f85b573 	.word	0x3f85b573
 8003660:	00000000 	.word	0x00000000
 8003664:	40a46200 	.word	0x40a46200
 8003668:	240003dc 	.word	0x240003dc
 800366c:	2400003c 	.word	0x2400003c
 8003670:	24000274 	.word	0x24000274
 8003674:	240003e0 	.word	0x240003e0
 8003678:	2400029c 	.word	0x2400029c
 800367c:	240003e4 	.word	0x240003e4
 8003680:	240002c4 	.word	0x240002c4
 8003684:	240003e8 	.word	0x240003e8
 8003688:	240002ec 	.word	0x240002ec
 800368c:	24000bac 	.word	0x24000bac
 8003690:	24000398 	.word	0x24000398
 8003694:	24000034 	.word	0x24000034
 8003698:	2400038c 	.word	0x2400038c
 800369c:	24000390 	.word	0x24000390
 80036a0:	24000394 	.word	0x24000394
 80036a4:	240005e4 	.word	0x240005e4
 80036a8:	240005e8 	.word	0x240005e8
 80036ac:	00000000 	.word	0x00000000
 80036b0:	240005ec 	.word	0x240005ec
 80036b4:	240006f4 	.word	0x240006f4
 80036b8:	2284      	movs	r2, #132	; 0x84
 80036ba:	4619      	mov	r1, r3
 80036bc:	f00c fd06 	bl	80100cc <memcpy>
		fcb_joint3 = KalmanFilter(fcb_joint3.Encoder/ 2609.0 ,fcb_joint3);
 80036c0:	4b63      	ldr	r3, [pc, #396]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	b21b      	sxth	r3, r3
 80036c6:	ee07 3a90 	vmov	s15, r3
 80036ca:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80036ce:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 8003848 <HAL_TIM_PeriodElapsedCallback+0xa30>
 80036d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80036d6:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 80036da:	4e5d      	ldr	r6, [pc, #372]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80036dc:	463d      	mov	r5, r7
 80036de:	4c5c      	ldr	r4, [pc, #368]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80036e0:	4668      	mov	r0, sp
 80036e2:	f104 030c 	add.w	r3, r4, #12
 80036e6:	2278      	movs	r2, #120	; 0x78
 80036e8:	4619      	mov	r1, r3
 80036ea:	f00c fcef 	bl	80100cc <memcpy>
 80036ee:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80036f2:	eeb0 0a48 	vmov.f32	s0, s16
 80036f6:	4628      	mov	r0, r5
 80036f8:	f7fe fe66 	bl	80023c8 <_Z12KalmanFilterf11robot_joint>
 80036fc:	4630      	mov	r0, r6
 80036fe:	463b      	mov	r3, r7
 8003700:	2284      	movs	r2, #132	; 0x84
 8003702:	4619      	mov	r1, r3
 8003704:	f00c fce2 	bl	80100cc <memcpy>
//		fcb_joint3.Output_Stepper_Frequency = (fcb_joint3.Kp_p * fcb_joint3.Error_p);

//		fcb_joint1.Output_Stepper_Frequency = fcb_joint1.Goal_Position;
//		fcb_joint3.Output_Stepper_Frequency = fcb_joint3.Goal_Position;

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 8003708:	4b52      	ldr	r3, [pc, #328]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800370a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370c:	4a51      	ldr	r2, [pc, #324]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800370e:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 8003710:	4b4f      	ldr	r3, [pc, #316]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003714:	4a4e      	ldr	r2, [pc, #312]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 8003716:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint1.Old_p = fcb_joint1.Encoder;
 8003718:	4b4e      	ldr	r3, [pc, #312]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	b21b      	sxth	r3, r3
 800371e:	ee07 3a90 	vmov	s15, r3
 8003722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003726:	4b4b      	ldr	r3, [pc, #300]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8003728:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 800372c:	4b48      	ldr	r3, [pc, #288]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800372e:	881b      	ldrh	r3, [r3, #0]
 8003730:	b21b      	sxth	r3, r3
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800373a:	4b45      	ldr	r3, [pc, #276]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800373c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

//		stepperJ1.StepperSetFrequency(300.0f);

//		stepperJ3.StepperSetFrequency(0.0f);

		stepperJ1.StepperOpenLoopSpeed(-1.0 * w_q1);
 8003740:	4b45      	ldr	r3, [pc, #276]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 8003742:	edd3 7a00 	vldr	s15, [r3]
 8003746:	eef1 7a67 	vneg.f32	s15, s15
 800374a:	eeb0 0a67 	vmov.f32	s0, s15
 800374e:	4843      	ldr	r0, [pc, #268]	; (800385c <HAL_TIM_PeriodElapsedCallback+0xa44>)
 8003750:	f7fd ffe6 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
		stepperJ3.StepperOpenLoopSpeed(w_q3);
 8003754:	4b42      	ldr	r3, [pc, #264]	; (8003860 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 8003756:	edd3 7a00 	vldr	s15, [r3]
 800375a:	eeb0 0a67 	vmov.f32	s0, s15
 800375e:	4841      	ldr	r0, [pc, #260]	; (8003864 <HAL_TIM_PeriodElapsedCallback+0xa4c>)
 8003760:	f7fd ffde 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>

//		stepperJ1.StepperOpenLoopSpeed(w_q1);
//		stepperJ3.StepperOpenLoopSpeed(w_q3);

		debug_j1_x11 = fcb_joint1.X11 * 1000.0;
 8003764:	4b3b      	ldr	r3, [pc, #236]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8003766:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800376a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0xa50>
 800376e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003772:	4b3e      	ldr	r3, [pc, #248]	; (800386c <HAL_TIM_PeriodElapsedCallback+0xa54>)
 8003774:	edc3 7a00 	vstr	s15, [r3]
		debug_j3_x11 = fcb_joint3.X11 * 1000.0;
 8003778:	4b35      	ldr	r3, [pc, #212]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 800377a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800377e:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0xa50>
 8003782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003786:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <HAL_TIM_PeriodElapsedCallback+0xa58>)
 8003788:	edc3 7a00 	vstr	s15, [r3]
		debug_j1_x21 = fcb_joint1.X21 * 1000.0;
 800378c:	4b31      	ldr	r3, [pc, #196]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 800378e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003792:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0xa50>
 8003796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800379a:	4b36      	ldr	r3, [pc, #216]	; (8003874 <HAL_TIM_PeriodElapsedCallback+0xa5c>)
 800379c:	edc3 7a00 	vstr	s15, [r3]
		debug_j3_x21 = fcb_joint3.X21 * 1000.0;
 80037a0:	4b2b      	ldr	r3, [pc, #172]	; (8003850 <HAL_TIM_PeriodElapsedCallback+0xa38>)
 80037a2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80037a6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0xa50>
 80037aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ae:	4b32      	ldr	r3, [pc, #200]	; (8003878 <HAL_TIM_PeriodElapsedCallback+0xa60>)
 80037b0:	edc3 7a00 	vstr	s15, [r3]
		debug_wq1 = w_q1 * 1000.0;
 80037b4:	4b28      	ldr	r3, [pc, #160]	; (8003858 <HAL_TIM_PeriodElapsedCallback+0xa40>)
 80037b6:	edd3 7a00 	vldr	s15, [r3]
 80037ba:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0xa50>
 80037be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037c2:	4b2e      	ldr	r3, [pc, #184]	; (800387c <HAL_TIM_PeriodElapsedCallback+0xa64>)
 80037c4:	edc3 7a00 	vstr	s15, [r3]
		debug_wq3 = w_q3 * 1000.0;
 80037c8:	4b25      	ldr	r3, [pc, #148]	; (8003860 <HAL_TIM_PeriodElapsedCallback+0xa48>)
 80037ca:	edd3 7a00 	vldr	s15, [r3]
 80037ce:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003868 <HAL_TIM_PeriodElapsedCallback+0xa50>
 80037d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037d6:	4b2a      	ldr	r3, [pc, #168]	; (8003880 <HAL_TIM_PeriodElapsedCallback+0xa68>)
 80037d8:	edc3 7a00 	vstr	s15, [r3]

		t = t + (sample_time_1000);
 80037dc:	4b29      	ldr	r3, [pc, #164]	; (8003884 <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 80037de:	ed93 7a00 	vldr	s14, [r3]
 80037e2:	4b29      	ldr	r3, [pc, #164]	; (8003888 <HAL_TIM_PeriodElapsedCallback+0xa70>)
 80037e4:	edd3 7a00 	vldr	s15, [r3]
 80037e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ec:	4b25      	ldr	r3, [pc, #148]	; (8003884 <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 80037ee:	edc3 7a00 	vstr	s15, [r3]
//			t = 0.0;
//			direction_traj ^= 1;
//			unwrap_pose = fcb_joint1.Goal_Position;
//		}

		if (t >= Time_circle)
 80037f2:	4b24      	ldr	r3, [pc, #144]	; (8003884 <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 80037f4:	ed93 7a00 	vldr	s14, [r3]
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_TIM_PeriodElapsedCallback+0xa74>)
 80037fa:	edd3 7a00 	vldr	s15, [r3]
 80037fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003806:	bfac      	ite	ge
 8003808:	2301      	movge	r3, #1
 800380a:	2300      	movlt	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d011      	beq.n	8003836 <HAL_TIM_PeriodElapsedCallback+0xa1e>
				{
					t = 0.0;
 8003812:	4b1c      	ldr	r3, [pc, #112]	; (8003884 <HAL_TIM_PeriodElapsedCallback+0xa6c>)
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
					chess_board_ang = 0.0;
 800381a:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_TIM_PeriodElapsedCallback+0xa78>)
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
					direction_traj ^= 1;
 8003822:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f083 0301 	eor.w	r3, r3, #1
 800382a:	4a1a      	ldr	r2, [pc, #104]	; (8003894 <HAL_TIM_PeriodElapsedCallback+0xa7c>)
 800382c:	6013      	str	r3, [r2, #0]
					unwrap_pose =  fcb_joint1.Goal_Position;
 800382e:	4b09      	ldr	r3, [pc, #36]	; (8003854 <HAL_TIM_PeriodElapsedCallback+0xa3c>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4a19      	ldr	r2, [pc, #100]	; (8003898 <HAL_TIM_PeriodElapsedCallback+0xa80>)
 8003834:	6013      	str	r3, [r2, #0]
				}

	}
}
 8003836:	bf00      	nop
 8003838:	37c4      	adds	r7, #196	; 0xc4
 800383a:	46bd      	mov	sp, r7
 800383c:	ecbd 8b02 	vpop	{d8}
 8003840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003842:	bf00      	nop
 8003844:	f3af 8000 	nop.w
 8003848:	00000000 	.word	0x00000000
 800384c:	40a46200 	.word	0x40a46200
 8003850:	240006f4 	.word	0x240006f4
 8003854:	240005ec 	.word	0x240005ec
 8003858:	240003cc 	.word	0x240003cc
 800385c:	24000274 	.word	0x24000274
 8003860:	240003d4 	.word	0x240003d4
 8003864:	240002c4 	.word	0x240002c4
 8003868:	447a0000 	.word	0x447a0000
 800386c:	240003ec 	.word	0x240003ec
 8003870:	240003f0 	.word	0x240003f0
 8003874:	240003f4 	.word	0x240003f4
 8003878:	240003f8 	.word	0x240003f8
 800387c:	240003fc 	.word	0x240003fc
 8003880:	24000400 	.word	0x24000400
 8003884:	24000398 	.word	0x24000398
 8003888:	2400002c 	.word	0x2400002c
 800388c:	24000030 	.word	0x24000030
 8003890:	2400038c 	.word	0x2400038c
 8003894:	24000388 	.word	0x24000388
 8003898:	240003c8 	.word	0x240003c8

0800389c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80038a0:	f002 f814 	bl	80058cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80038a4:	f000 f994 	bl	8003bd0 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80038a8:	f7fe f806 	bl	80018b8 <MX_GPIO_Init>
	MX_DMA_Init();
 80038ac:	f7fd ffc4 	bl	8001838 <MX_DMA_Init>
	MX_USART3_UART_Init();
 80038b0:	f001 fd60 	bl	8005374 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 80038b4:	f000 ff64 	bl	8004780 <MX_TIM2_Init>
	MX_UART4_Init();
 80038b8:	f001 fcba 	bl	8005230 <MX_UART4_Init>
	MX_TIM4_Init();
 80038bc:	f001 f850 	bl	8004960 <MX_TIM4_Init>
	MX_SPI3_Init();
 80038c0:	f000 fbb2 	bl	8004028 <MX_SPI3_Init>
	MX_TIM1_Init();
 80038c4:	f000 feae 	bl	8004624 <MX_TIM1_Init>
	MX_TIM3_Init();
 80038c8:	f000 ffd2 	bl	8004870 <MX_TIM3_Init>
	MX_TIM5_Init();
 80038cc:	f001 f8c0 	bl	8004a50 <MX_TIM5_Init>
	MX_TIM15_Init();
 80038d0:	f001 f9fa 	bl	8004cc8 <MX_TIM15_Init>
	MX_CRC_Init();
 80038d4:	f7fd ff60 	bl	8001798 <MX_CRC_Init>
	MX_UART7_Init();
 80038d8:	f001 fcfe 	bl	80052d8 <MX_UART7_Init>
	MX_TIM6_Init();
 80038dc:	f001 f906 	bl	8004aec <MX_TIM6_Init>
	MX_TIM7_Init();
 80038e0:	f001 f93a 	bl	8004b58 <MX_TIM7_Init>
	MX_TIM12_Init();
 80038e4:	f001 f96e 	bl	8004bc4 <MX_TIM12_Init>
	MX_TIM13_Init();
 80038e8:	f001 f9a6 	bl	8004c38 <MX_TIM13_Init>
	MX_TIM14_Init();
 80038ec:	f001 f9c8 	bl	8004c80 <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80038f0:	2201      	movs	r2, #1
 80038f2:	2101      	movs	r1, #1
 80038f4:	4894      	ldr	r0, [pc, #592]	; (8003b48 <main+0x2ac>)
 80038f6:	f005 fb8b 	bl	8009010 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80038fa:	2201      	movs	r2, #1
 80038fc:	2102      	movs	r1, #2
 80038fe:	4893      	ldr	r0, [pc, #588]	; (8003b4c <main+0x2b0>)
 8003900:	f005 fb86 	bl	8009010 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003904:	2200      	movs	r2, #0
 8003906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800390a:	488f      	ldr	r0, [pc, #572]	; (8003b48 <main+0x2ac>)
 800390c:	f005 fb80 	bl	8009010 <HAL_GPIO_WritePin>

	#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 8003910:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8003b50 <main+0x2b4>
 8003914:	488f      	ldr	r0, [pc, #572]	; (8003b54 <main+0x2b8>)
 8003916:	f7fd fc4f 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(8);
 800391a:	2108      	movs	r1, #8
 800391c:	488d      	ldr	r0, [pc, #564]	; (8003b54 <main+0x2b8>)
 800391e:	f7fd fee7 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 8003922:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8003b58 <main+0x2bc>
 8003926:	488b      	ldr	r0, [pc, #556]	; (8003b54 <main+0x2b8>)
 8003928:	f7fd febe 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 800392c:	4889      	ldr	r0, [pc, #548]	; (8003b54 <main+0x2b8>)
 800392e:	f7fd fc32 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 8003932:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8003b50 <main+0x2b4>
 8003936:	4889      	ldr	r0, [pc, #548]	; (8003b5c <main+0x2c0>)
 8003938:	f7fd fc3e 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(8);
 800393c:	2108      	movs	r1, #8
 800393e:	4887      	ldr	r0, [pc, #540]	; (8003b5c <main+0x2c0>)
 8003940:	f7fd fed6 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 8003944:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003948:	4884      	ldr	r0, [pc, #528]	; (8003b5c <main+0x2c0>)
 800394a:	f7fd fead 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 800394e:	4883      	ldr	r0, [pc, #524]	; (8003b5c <main+0x2c0>)
 8003950:	f7fd fc21 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 8003954:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8003b50 <main+0x2b4>
 8003958:	4881      	ldr	r0, [pc, #516]	; (8003b60 <main+0x2c4>)
 800395a:	f7fd fc2d 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(8);
 800395e:	2108      	movs	r1, #8
 8003960:	487f      	ldr	r0, [pc, #508]	; (8003b60 <main+0x2c4>)
 8003962:	f7fd fec5 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 8003966:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 800396a:	487d      	ldr	r0, [pc, #500]	; (8003b60 <main+0x2c4>)
 800396c:	f7fd fe9c 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8003970:	487b      	ldr	r0, [pc, #492]	; (8003b60 <main+0x2c4>)
 8003972:	f7fd fc10 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 8003976:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8003b50 <main+0x2b4>
 800397a:	487a      	ldr	r0, [pc, #488]	; (8003b64 <main+0x2c8>)
 800397c:	f7fd fc1c 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(8);
 8003980:	2108      	movs	r1, #8
 8003982:	4878      	ldr	r0, [pc, #480]	; (8003b64 <main+0x2c8>)
 8003984:	f7fd feb4 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 8003988:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800398c:	4875      	ldr	r0, [pc, #468]	; (8003b64 <main+0x2c8>)
 800398e:	f7fd fe8b 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 8003992:	4874      	ldr	r0, [pc, #464]	; (8003b64 <main+0x2c8>)
 8003994:	f7fd fbff 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	//	stepperJ4.StepperSetMicrostep(1);
	//	stepperJ4.StepperSetRatio(1);

	gripper.setDegreeGripperClose(65);
 8003998:	2141      	movs	r1, #65	; 0x41
 800399a:	4873      	ldr	r0, [pc, #460]	; (8003b68 <main+0x2cc>)
 800399c:	f7fd fb43 	bl	8001026 <_ZN10ServoMotor21setDegreeGripperCloseEl>
	gripper.setDegreeGripperOpen(0);
 80039a0:	2100      	movs	r1, #0
 80039a2:	4871      	ldr	r0, [pc, #452]	; (8003b68 <main+0x2cc>)
 80039a4:	f7fd fb2e 	bl	8001004 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	//	gripper.ServoRotateDegree(90);
	gripper.ServoEnable();
 80039a8:	486f      	ldr	r0, [pc, #444]	; (8003b68 <main+0x2cc>)
 80039aa:	f7fd f957 	bl	8000c5c <_ZN10ServoMotor11ServoEnableEv>
	#endif

		HAL_TIM_Base_Start_IT(&htim5); // Jog 		100 Hz
 80039ae:	486f      	ldr	r0, [pc, #444]	; (8003b6c <main+0x2d0>)
 80039b0:	f008 f82e 	bl	800ba10 <HAL_TIM_Base_Start_IT>
		HAL_TIM_Base_Start_IT(&htim6); // Set home 	200 Hz
 80039b4:	486e      	ldr	r0, [pc, #440]	; (8003b70 <main+0x2d4>)
 80039b6:	f008 f82b 	bl	800ba10 <HAL_TIM_Base_Start_IT>
//		HAL_TIM_Base_Start_IT(&htim7); // Control 	1000 Hz
	//	HAL_TIM_Base_Start_IT(&htim12); // 			2000 Hz
	//	HAL_TIM_Base_Start_IT(&htim14); // 			500Hz

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 80039ba:	2214      	movs	r2, #20
 80039bc:	496d      	ldr	r1, [pc, #436]	; (8003b74 <main+0x2d8>)
 80039be:	486e      	ldr	r0, [pc, #440]	; (8003b78 <main+0x2dc>)
 80039c0:	f00b fbfb 	bl	800f1ba <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80039c4:	4b6d      	ldr	r3, [pc, #436]	; (8003b7c <main+0x2e0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a6d      	ldr	r2, [pc, #436]	; (8003b80 <main+0x2e4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d04a      	beq.n	8003a64 <main+0x1c8>
 80039ce:	4b6b      	ldr	r3, [pc, #428]	; (8003b7c <main+0x2e0>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a6c      	ldr	r2, [pc, #432]	; (8003b84 <main+0x2e8>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d045      	beq.n	8003a64 <main+0x1c8>
 80039d8:	4b68      	ldr	r3, [pc, #416]	; (8003b7c <main+0x2e0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a6a      	ldr	r2, [pc, #424]	; (8003b88 <main+0x2ec>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d040      	beq.n	8003a64 <main+0x1c8>
 80039e2:	4b66      	ldr	r3, [pc, #408]	; (8003b7c <main+0x2e0>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a69      	ldr	r2, [pc, #420]	; (8003b8c <main+0x2f0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d03b      	beq.n	8003a64 <main+0x1c8>
 80039ec:	4b63      	ldr	r3, [pc, #396]	; (8003b7c <main+0x2e0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a67      	ldr	r2, [pc, #412]	; (8003b90 <main+0x2f4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d036      	beq.n	8003a64 <main+0x1c8>
 80039f6:	4b61      	ldr	r3, [pc, #388]	; (8003b7c <main+0x2e0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a66      	ldr	r2, [pc, #408]	; (8003b94 <main+0x2f8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d031      	beq.n	8003a64 <main+0x1c8>
 8003a00:	4b5e      	ldr	r3, [pc, #376]	; (8003b7c <main+0x2e0>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a64      	ldr	r2, [pc, #400]	; (8003b98 <main+0x2fc>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d02c      	beq.n	8003a64 <main+0x1c8>
 8003a0a:	4b5c      	ldr	r3, [pc, #368]	; (8003b7c <main+0x2e0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a63      	ldr	r2, [pc, #396]	; (8003b9c <main+0x300>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d027      	beq.n	8003a64 <main+0x1c8>
 8003a14:	4b59      	ldr	r3, [pc, #356]	; (8003b7c <main+0x2e0>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a61      	ldr	r2, [pc, #388]	; (8003ba0 <main+0x304>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d022      	beq.n	8003a64 <main+0x1c8>
 8003a1e:	4b57      	ldr	r3, [pc, #348]	; (8003b7c <main+0x2e0>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a60      	ldr	r2, [pc, #384]	; (8003ba4 <main+0x308>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d01d      	beq.n	8003a64 <main+0x1c8>
 8003a28:	4b54      	ldr	r3, [pc, #336]	; (8003b7c <main+0x2e0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a5e      	ldr	r2, [pc, #376]	; (8003ba8 <main+0x30c>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d018      	beq.n	8003a64 <main+0x1c8>
 8003a32:	4b52      	ldr	r3, [pc, #328]	; (8003b7c <main+0x2e0>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a5d      	ldr	r2, [pc, #372]	; (8003bac <main+0x310>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <main+0x1c8>
 8003a3c:	4b4f      	ldr	r3, [pc, #316]	; (8003b7c <main+0x2e0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a5b      	ldr	r2, [pc, #364]	; (8003bb0 <main+0x314>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00e      	beq.n	8003a64 <main+0x1c8>
 8003a46:	4b4d      	ldr	r3, [pc, #308]	; (8003b7c <main+0x2e0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a5a      	ldr	r2, [pc, #360]	; (8003bb4 <main+0x318>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d009      	beq.n	8003a64 <main+0x1c8>
 8003a50:	4b4a      	ldr	r3, [pc, #296]	; (8003b7c <main+0x2e0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <main+0x31c>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d004      	beq.n	8003a64 <main+0x1c8>
 8003a5a:	4b48      	ldr	r3, [pc, #288]	; (8003b7c <main+0x2e0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a57      	ldr	r2, [pc, #348]	; (8003bbc <main+0x320>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d108      	bne.n	8003a76 <main+0x1da>
 8003a64:	4b45      	ldr	r3, [pc, #276]	; (8003b7c <main+0x2e0>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4b44      	ldr	r3, [pc, #272]	; (8003b7c <main+0x2e0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0208 	bic.w	r2, r2, #8
 8003a72:	601a      	str	r2, [r3, #0]
 8003a74:	e007      	b.n	8003a86 <main+0x1ea>
 8003a76:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <main+0x2e0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <main+0x2e0>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f022 0204 	bic.w	r2, r2, #4
 8003a84:	601a      	str	r2, [r3, #0]
//	{
//		HAL_TIM_Base_Stop_IT(&htim6); // Set home 	200 Hz
//	}

	// Backup
	fcb_joint1.Kp_p = 0.0;
 8003a86:	4b4e      	ldr	r3, [pc, #312]	; (8003bc0 <main+0x324>)
 8003a88:	f04f 0200 	mov.w	r2, #0
 8003a8c:	61da      	str	r2, [r3, #28]
	fcb_joint1.Kp_v = 0.0;
 8003a8e:	4b4c      	ldr	r3, [pc, #304]	; (8003bc0 <main+0x324>)
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint1.Ki_p = 0.0;
 8003a96:	4b4a      	ldr	r3, [pc, #296]	; (8003bc0 <main+0x324>)
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	621a      	str	r2, [r3, #32]
	fcb_joint1.Ki_v = 0.0;
 8003a9e:	4b48      	ldr	r3, [pc, #288]	; (8003bc0 <main+0x324>)
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint1.Kd_p = 0.0;
 8003aa6:	4b46      	ldr	r3, [pc, #280]	; (8003bc0 <main+0x324>)
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint1.Kd_p = 0.0;
 8003aae:	4b44      	ldr	r3, [pc, #272]	; (8003bc0 <main+0x324>)
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint2.Kp_p = 0.0;
 8003ab6:	4b43      	ldr	r3, [pc, #268]	; (8003bc4 <main+0x328>)
 8003ab8:	f04f 0200 	mov.w	r2, #0
 8003abc:	61da      	str	r2, [r3, #28]
	fcb_joint2.Kp_v = 0.0;
 8003abe:	4b41      	ldr	r3, [pc, #260]	; (8003bc4 <main+0x328>)
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint2.Ki_p = 0.0;
 8003ac6:	4b3f      	ldr	r3, [pc, #252]	; (8003bc4 <main+0x328>)
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	621a      	str	r2, [r3, #32]
	fcb_joint2.Ki_v = 0.0;
 8003ace:	4b3d      	ldr	r3, [pc, #244]	; (8003bc4 <main+0x328>)
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint2.Kd_p = 0.0;
 8003ad6:	4b3b      	ldr	r3, [pc, #236]	; (8003bc4 <main+0x328>)
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint2.Kd_p = 0.0;
 8003ade:	4b39      	ldr	r3, [pc, #228]	; (8003bc4 <main+0x328>)
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint3.Kp_p = 0.0;
 8003ae6:	4b38      	ldr	r3, [pc, #224]	; (8003bc8 <main+0x32c>)
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	61da      	str	r2, [r3, #28]
	fcb_joint3.Kp_v = 0.0;
 8003aee:	4b36      	ldr	r3, [pc, #216]	; (8003bc8 <main+0x32c>)
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint3.Ki_p = 0.0;
 8003af6:	4b34      	ldr	r3, [pc, #208]	; (8003bc8 <main+0x32c>)
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	621a      	str	r2, [r3, #32]
	fcb_joint3.Ki_v = 0.0;
 8003afe:	4b32      	ldr	r3, [pc, #200]	; (8003bc8 <main+0x32c>)
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint3.Kd_p = 0.0;
 8003b06:	4b30      	ldr	r3, [pc, #192]	; (8003bc8 <main+0x32c>)
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint3.Kd_p = 0.0;
 8003b0e:	4b2e      	ldr	r3, [pc, #184]	; (8003bc8 <main+0x32c>)
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint4.Kp_p = 0.0;
 8003b16:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <main+0x330>)
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	61da      	str	r2, [r3, #28]
	fcb_joint4.Kp_v = 0.0;
 8003b1e:	4b2b      	ldr	r3, [pc, #172]	; (8003bcc <main+0x330>)
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint4.Ki_p = 0.0;
 8003b26:	4b29      	ldr	r3, [pc, #164]	; (8003bcc <main+0x330>)
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	621a      	str	r2, [r3, #32]
	fcb_joint4.Ki_v = 0.0;
 8003b2e:	4b27      	ldr	r3, [pc, #156]	; (8003bcc <main+0x330>)
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint4.Kd_p = 0.0;
 8003b36:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <main+0x330>)
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint4.Kd_p = 0.0;
 8003b3e:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <main+0x330>)
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	625a      	str	r2, [r3, #36]	; 0x24

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8003b46:	e7fe      	b.n	8003b46 <main+0x2aa>
 8003b48:	58020400 	.word	0x58020400
 8003b4c:	58021000 	.word	0x58021000
 8003b50:	00000000 	.word	0x00000000
 8003b54:	24000274 	.word	0x24000274
 8003b58:	42280000 	.word	0x42280000
 8003b5c:	2400029c 	.word	0x2400029c
 8003b60:	240002c4 	.word	0x240002c4
 8003b64:	240002ec 	.word	0x240002ec
 8003b68:	24000314 	.word	0x24000314
 8003b6c:	2400094c 	.word	0x2400094c
 8003b70:	24000a30 	.word	0x24000a30
 8003b74:	24000368 	.word	0x24000368
 8003b78:	24000d78 	.word	0x24000d78
 8003b7c:	24000d00 	.word	0x24000d00
 8003b80:	40020010 	.word	0x40020010
 8003b84:	40020028 	.word	0x40020028
 8003b88:	40020040 	.word	0x40020040
 8003b8c:	40020058 	.word	0x40020058
 8003b90:	40020070 	.word	0x40020070
 8003b94:	40020088 	.word	0x40020088
 8003b98:	400200a0 	.word	0x400200a0
 8003b9c:	400200b8 	.word	0x400200b8
 8003ba0:	40020410 	.word	0x40020410
 8003ba4:	40020428 	.word	0x40020428
 8003ba8:	40020440 	.word	0x40020440
 8003bac:	40020458 	.word	0x40020458
 8003bb0:	40020470 	.word	0x40020470
 8003bb4:	40020488 	.word	0x40020488
 8003bb8:	400204a0 	.word	0x400204a0
 8003bbc:	400204b8 	.word	0x400204b8
 8003bc0:	240005ec 	.word	0x240005ec
 8003bc4:	24000670 	.word	0x24000670
 8003bc8:	240006f4 	.word	0x240006f4
 8003bcc:	24000778 	.word	0x24000778

08003bd0 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b09c      	sub	sp, #112	; 0x70
 8003bd4:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bda:	224c      	movs	r2, #76	; 0x4c
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f00c fa82 	bl	80100e8 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003be4:	1d3b      	adds	r3, r7, #4
 8003be6:	2220      	movs	r2, #32
 8003be8:	2100      	movs	r1, #0
 8003bea:	4618      	mov	r0, r3
 8003bec:	f00c fa7c 	bl	80100e8 <memset>

/** Supply configuration update enable
 */
HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003bf0:	2002      	movs	r0, #2
 8003bf2:	f005 fa41 	bl	8009078 <HAL_PWREx_ConfigSupply>
/** Configure the main internal regulator output voltage
 */
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	4b38      	ldr	r3, [pc, #224]	; (8003cdc <_Z18SystemClock_Configv+0x10c>)
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	4a37      	ldr	r2, [pc, #220]	; (8003cdc <_Z18SystemClock_Configv+0x10c>)
 8003c00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c04:	6193      	str	r3, [r2, #24]
 8003c06:	4b35      	ldr	r3, [pc, #212]	; (8003cdc <_Z18SystemClock_Configv+0x10c>)
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4b33      	ldr	r3, [pc, #204]	; (8003ce0 <_Z18SystemClock_Configv+0x110>)
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	4a32      	ldr	r2, [pc, #200]	; (8003ce0 <_Z18SystemClock_Configv+0x110>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c1c:	4b30      	ldr	r3, [pc, #192]	; (8003ce0 <_Z18SystemClock_Configv+0x110>)
 8003c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]

while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003c28:	4b2c      	ldr	r3, [pc, #176]	; (8003cdc <_Z18SystemClock_Configv+0x10c>)
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c34:	bf14      	ite	ne
 8003c36:	2301      	movne	r3, #1
 8003c38:	2300      	moveq	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d000      	beq.n	8003c42 <_Z18SystemClock_Configv+0x72>
 8003c40:	e7f2      	b.n	8003c28 <_Z18SystemClock_Configv+0x58>
/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c42:	2302      	movs	r3, #2
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003c46:	2301      	movs	r3, #1
 8003c48:	633b      	str	r3, [r7, #48]	; 0x30
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c4a:	2340      	movs	r3, #64	; 0x40
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c52:	2300      	movs	r3, #0
 8003c54:	64fb      	str	r3, [r7, #76]	; 0x4c
RCC_OscInitStruct.PLL.PLLM = 4;
 8003c56:	2304      	movs	r3, #4
 8003c58:	653b      	str	r3, [r7, #80]	; 0x50
RCC_OscInitStruct.PLL.PLLN = 60;
 8003c5a:	233c      	movs	r3, #60	; 0x3c
 8003c5c:	657b      	str	r3, [r7, #84]	; 0x54
RCC_OscInitStruct.PLL.PLLP = 2;
 8003c5e:	2302      	movs	r3, #2
 8003c60:	65bb      	str	r3, [r7, #88]	; 0x58
RCC_OscInitStruct.PLL.PLLQ = 6;
 8003c62:	2306      	movs	r3, #6
 8003c64:	65fb      	str	r3, [r7, #92]	; 0x5c
RCC_OscInitStruct.PLL.PLLR = 2;
 8003c66:	2302      	movs	r3, #2
 8003c68:	663b      	str	r3, [r7, #96]	; 0x60
RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003c6a:	230c      	movs	r3, #12
 8003c6c:	667b      	str	r3, [r7, #100]	; 0x64
RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	66bb      	str	r3, [r7, #104]	; 0x68
RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003c72:	2300      	movs	r3, #0
 8003c74:	66fb      	str	r3, [r7, #108]	; 0x6c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f005 fa36 	bl	80090ec <HAL_RCC_OscConfig>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	bf14      	ite	ne
 8003c86:	2301      	movne	r3, #1
 8003c88:	2300      	moveq	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d001      	beq.n	8003c94 <_Z18SystemClock_Configv+0xc4>
{
	Error_Handler();
 8003c90:	f000 f83e 	bl	8003d10 <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c94:	233f      	movs	r3, #63	; 0x3f
 8003c96:	607b      	str	r3, [r7, #4]
|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003ca4:	2340      	movs	r3, #64	; 0x40
 8003ca6:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003ca8:	2340      	movs	r3, #64	; 0x40
 8003caa:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cb0:	61fb      	str	r3, [r7, #28]
RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003cb2:	2340      	movs	r3, #64	; 0x40
 8003cb4:	623b      	str	r3, [r7, #32]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003cb6:	1d3b      	adds	r3, r7, #4
 8003cb8:	2104      	movs	r1, #4
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f005 fe42 	bl	8009944 <HAL_RCC_ClockConfig>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <_Z18SystemClock_Configv+0x104>
{
	Error_Handler();
 8003cd0:	f000 f81e 	bl	8003d10 <Error_Handler>
}
}
 8003cd4:	bf00      	nop
 8003cd6:	3770      	adds	r7, #112	; 0x70
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	58024800 	.word	0x58024800
 8003ce0:	58000400 	.word	0x58000400

08003ce4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]

}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	80fb      	strh	r3, [r7, #6]

}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
	...

08003d10 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Error_Handler_Debug */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8003d14:	2200      	movs	r2, #0
 8003d16:	2101      	movs	r1, #1
 8003d18:	4808      	ldr	r0, [pc, #32]	; (8003d3c <Error_Handler+0x2c>)
 8003d1a:	f005 f979 	bl	8009010 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2102      	movs	r1, #2
 8003d22:	4807      	ldr	r0, [pc, #28]	; (8003d40 <Error_Handler+0x30>)
 8003d24:	f005 f974 	bl	8009010 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003d2e:	4803      	ldr	r0, [pc, #12]	; (8003d3c <Error_Handler+0x2c>)
 8003d30:	f005 f96e 	bl	8009010 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d34:	b672      	cpsid	i
}
 8003d36:	bf00      	nop
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8003d38:	e7fe      	b.n	8003d38 <Error_Handler+0x28>
 8003d3a:	bf00      	nop
 8003d3c:	58020400 	.word	0x58020400
 8003d40:	58021000 	.word	0x58021000

08003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b082      	sub	sp, #8
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	ed87 0a01 	vstr	s0, [r7, #4]
 8003d4e:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8003d50:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	ee06 3a90 	vmov	s13, r3
 8003d5e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003d62:	eeb0 1b46 	vmov.f64	d1, d6
 8003d66:	eeb0 0b47 	vmov.f64	d0, d7
 8003d6a:	f00b fbe1 	bl	800f530 <pow>
 8003d6e:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8003d72:	eeb0 0b47 	vmov.f64	d0, d7
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <_Z41__static_initialization_and_destruction_0ii>:
}
/* USER CODE END Error_Handler_Debug */
}
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	f040 80df 	bne.w	8003f4c <_Z41__static_initialization_and_destruction_0ii+0x1d0>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d94:	4293      	cmp	r3, r2
 8003d96:	f040 80d9 	bne.w	8003f4c <_Z41__static_initialization_and_destruction_0ii+0x1d0>
AMT21 encoderJ1(&huart4, 0xD4);
 8003d9a:	22d4      	movs	r2, #212	; 0xd4
 8003d9c:	497c      	ldr	r1, [pc, #496]	; (8003f90 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003d9e:	487d      	ldr	r0, [pc, #500]	; (8003f94 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003da0:	f7fc fe2e 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8003da4:	22c4      	movs	r2, #196	; 0xc4
 8003da6:	497a      	ldr	r1, [pc, #488]	; (8003f90 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003da8:	487b      	ldr	r0, [pc, #492]	; (8003f98 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003daa:	f7fc fe29 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8003dae:	2320      	movs	r3, #32
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	4b7a      	ldr	r3, [pc, #488]	; (8003f9c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	497a      	ldr	r1, [pc, #488]	; (8003fa0 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8003db8:	487a      	ldr	r0, [pc, #488]	; (8003fa4 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8003dba:	f7fd f99d 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8003dbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	4b78      	ldr	r3, [pc, #480]	; (8003fa8 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	4978      	ldr	r1, [pc, #480]	; (8003fac <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8003dca:	4879      	ldr	r0, [pc, #484]	; (8003fb0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003dcc:	f7fd f994 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8003dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	4b74      	ldr	r3, [pc, #464]	; (8003fa8 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8003dd8:	2204      	movs	r2, #4
 8003dda:	4976      	ldr	r1, [pc, #472]	; (8003fb4 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8003ddc:	4876      	ldr	r0, [pc, #472]	; (8003fb8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003dde:	f7fd f98b 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8003de2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	4b6c      	ldr	r3, [pc, #432]	; (8003f9c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8003dea:	2208      	movs	r2, #8
 8003dec:	4973      	ldr	r1, [pc, #460]	; (8003fbc <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8003dee:	4874      	ldr	r0, [pc, #464]	; (8003fc0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003df0:	f7fd f982 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8003df4:	2208      	movs	r2, #8
 8003df6:	4973      	ldr	r1, [pc, #460]	; (8003fc4 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8003df8:	4873      	ldr	r0, [pc, #460]	; (8003fc8 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8003dfa:	f7fc fef4 	bl	8000be6 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
volatile const float C2_q1 = (3.0 * C0_q1) / (Time * Time);
 8003dfe:	4b73      	ldr	r3, [pc, #460]	; (8003fcc <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8003e00:	edd3 7a00 	vldr	s15, [r3]
 8003e04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e08:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003e0c:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003e10:	4b6f      	ldr	r3, [pc, #444]	; (8003fd0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003e12:	ed93 7a00 	vldr	s14, [r3]
 8003e16:	4b6e      	ldr	r3, [pc, #440]	; (8003fd0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003e18:	edd3 7a00 	vldr	s15, [r3]
 8003e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e20:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003e24:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003e28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003e2c:	4b69      	ldr	r3, [pc, #420]	; (8003fd4 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003e2e:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = (2.0 * C0_q1) / (Time * Time * Time);
 8003e32:	4b66      	ldr	r3, [pc, #408]	; (8003fcc <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8003e34:	edd3 7a00 	vldr	s15, [r3]
 8003e38:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e3c:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003e40:	4b63      	ldr	r3, [pc, #396]	; (8003fd0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003e42:	ed93 7a00 	vldr	s14, [r3]
 8003e46:	4b62      	ldr	r3, [pc, #392]	; (8003fd0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003e48:	edd3 7a00 	vldr	s15, [r3]
 8003e4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e50:	4b5f      	ldr	r3, [pc, #380]	; (8003fd0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003e52:	edd3 7a00 	vldr	s15, [r3]
 8003e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003e5e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003e62:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003e66:	4b5c      	ldr	r3, [pc, #368]	; (8003fd8 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8003e68:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = (3.0 * C0_q3) / (Time * Time);
 8003e6c:	4b5b      	ldr	r3, [pc, #364]	; (8003fdc <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8003e6e:	edd3 7a00 	vldr	s15, [r3]
 8003e72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003e76:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003e7a:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003e7e:	4b54      	ldr	r3, [pc, #336]	; (8003fd0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003e80:	ed93 7a00 	vldr	s14, [r3]
 8003e84:	4b52      	ldr	r3, [pc, #328]	; (8003fd0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003e86:	edd3 7a00 	vldr	s15, [r3]
 8003e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003e92:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003e96:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003e9a:	4b51      	ldr	r3, [pc, #324]	; (8003fe0 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8003e9c:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = (2.0 * C0_q3) / (Time * Time * Time);
 8003ea0:	4b4e      	ldr	r3, [pc, #312]	; (8003fdc <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8003ea2:	edd3 7a00 	vldr	s15, [r3]
 8003ea6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003eaa:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003eae:	4b48      	ldr	r3, [pc, #288]	; (8003fd0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003eb0:	ed93 7a00 	vldr	s14, [r3]
 8003eb4:	4b46      	ldr	r3, [pc, #280]	; (8003fd0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003eb6:	edd3 7a00 	vldr	s15, [r3]
 8003eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ebe:	4b44      	ldr	r3, [pc, #272]	; (8003fd0 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003ec0:	edd3 7a00 	vldr	s15, [r3]
 8003ec4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ec8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ecc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003ed0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ed4:	4b43      	ldr	r3, [pc, #268]	; (8003fe4 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8003ed6:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt2 = pow(dt, 2);
 8003eda:	4b43      	ldr	r3, [pc, #268]	; (8003fe8 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8003edc:	edd3 7a00 	vldr	s15, [r3]
 8003ee0:	2002      	movs	r0, #2
 8003ee2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee6:	f7ff ff2d 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003eea:	eeb0 7b40 	vmov.f64	d7, d0
 8003eee:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003ef2:	4b3e      	ldr	r3, [pc, #248]	; (8003fec <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8003ef4:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt3 = pow(dt, 3);
 8003ef8:	4b3b      	ldr	r3, [pc, #236]	; (8003fe8 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8003efa:	edd3 7a00 	vldr	s15, [r3]
 8003efe:	2003      	movs	r0, #3
 8003f00:	eeb0 0a67 	vmov.f32	s0, s15
 8003f04:	f7ff ff1e 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003f08:	eeb0 7b40 	vmov.f64	d7, d0
 8003f0c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003f10:	4b37      	ldr	r3, [pc, #220]	; (8003ff0 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8003f12:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt4 = pow(dt, 4);
 8003f16:	4b34      	ldr	r3, [pc, #208]	; (8003fe8 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8003f18:	edd3 7a00 	vldr	s15, [r3]
 8003f1c:	2004      	movs	r0, #4
 8003f1e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f22:	f7ff ff0f 	bl	8003d44 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003f26:	eeb0 7b40 	vmov.f64	d7, d0
 8003f2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003f2e:	4b31      	ldr	r3, [pc, #196]	; (8003ff4 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8003f30:	edc3 7a00 	vstr	s15, [r3]
fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;
 8003f34:	4830      	ldr	r0, [pc, #192]	; (8003ff8 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8003f36:	f7fe f91f 	bl	8002178 <_ZN11robot_jointC1Ev>
 8003f3a:	4830      	ldr	r0, [pc, #192]	; (8003ffc <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8003f3c:	f7fe f91c 	bl	8002178 <_ZN11robot_jointC1Ev>
 8003f40:	482f      	ldr	r0, [pc, #188]	; (8004000 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8003f42:	f7fe f919 	bl	8002178 <_ZN11robot_jointC1Ev>
 8003f46:	482f      	ldr	r0, [pc, #188]	; (8004004 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8003f48:	f7fe f916 	bl	8002178 <_ZN11robot_jointC1Ev>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d119      	bne.n	8003f86 <_Z41__static_initialization_and_destruction_0ii+0x20a>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d114      	bne.n	8003f86 <_Z41__static_initialization_and_destruction_0ii+0x20a>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8003f5c:	481a      	ldr	r0, [pc, #104]	; (8003fc8 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8003f5e:	f7fc fe72 	bl	8000c46 <_ZN10ServoMotorD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8003f62:	4817      	ldr	r0, [pc, #92]	; (8003fc0 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003f64:	f7fd f90c 	bl	8001180 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8003f68:	4813      	ldr	r0, [pc, #76]	; (8003fb8 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003f6a:	f7fd f909 	bl	8001180 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8003f6e:	4810      	ldr	r0, [pc, #64]	; (8003fb0 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003f70:	f7fd f906 	bl	8001180 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8003f74:	480b      	ldr	r0, [pc, #44]	; (8003fa4 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8003f76:	f7fd f903 	bl	8001180 <_ZN7StepperD1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8003f7a:	4807      	ldr	r0, [pc, #28]	; (8003f98 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003f7c:	f7fc fd54 	bl	8000a28 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8003f80:	4804      	ldr	r0, [pc, #16]	; (8003f94 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003f82:	f7fc fd51 	bl	8000a28 <_ZN5AMT21D1Ev>
}
 8003f86:	bf00      	nop
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	24000ef8 	.word	0x24000ef8
 8003f94:	2400023c 	.word	0x2400023c
 8003f98:	24000258 	.word	0x24000258
 8003f9c:	58020400 	.word	0x58020400
 8003fa0:	24000998 	.word	0x24000998
 8003fa4:	24000274 	.word	0x24000274
 8003fa8:	58021000 	.word	0x58021000
 8003fac:	24000a7c 	.word	0x24000a7c
 8003fb0:	2400029c 	.word	0x2400029c
 8003fb4:	24000900 	.word	0x24000900
 8003fb8:	240002c4 	.word	0x240002c4
 8003fbc:	24000ac8 	.word	0x24000ac8
 8003fc0:	240002ec 	.word	0x240002ec
 8003fc4:	240008b4 	.word	0x240008b4
 8003fc8:	24000314 	.word	0x24000314
 8003fcc:	24000024 	.word	0x24000024
 8003fd0:	24000020 	.word	0x24000020
 8003fd4:	2400039c 	.word	0x2400039c
 8003fd8:	240003a0 	.word	0x240003a0
 8003fdc:	24000028 	.word	0x24000028
 8003fe0:	240003a4 	.word	0x240003a4
 8003fe4:	240003a8 	.word	0x240003a8
 8003fe8:	24000038 	.word	0x24000038
 8003fec:	240003bc 	.word	0x240003bc
 8003ff0:	240003c0 	.word	0x240003c0
 8003ff4:	240003c4 	.word	0x240003c4
 8003ff8:	240005ec 	.word	0x240005ec
 8003ffc:	24000670 	.word	0x24000670
 8004000:	240006f4 	.word	0x240006f4
 8004004:	24000778 	.word	0x24000778

08004008 <_GLOBAL__sub_I_TIM_MS>:
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
 800400c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004010:	2001      	movs	r0, #1
 8004012:	f7ff feb3 	bl	8003d7c <_Z41__static_initialization_and_destruction_0ii>
 8004016:	bd80      	pop	{r7, pc}

08004018 <_GLOBAL__sub_D_TIM_MS>:
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
 800401c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004020:	2000      	movs	r0, #0
 8004022:	f7ff feab 	bl	8003d7c <_Z41__static_initialization_and_destruction_0ii>
 8004026:	bd80      	pop	{r7, pc}

08004028 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800402c:	4b27      	ldr	r3, [pc, #156]	; (80040cc <MX_SPI3_Init+0xa4>)
 800402e:	4a28      	ldr	r2, [pc, #160]	; (80040d0 <MX_SPI3_Init+0xa8>)
 8004030:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004032:	4b26      	ldr	r3, [pc, #152]	; (80040cc <MX_SPI3_Init+0xa4>)
 8004034:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004038:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <MX_SPI3_Init+0xa4>)
 800403c:	2200      	movs	r2, #0
 800403e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8004040:	4b22      	ldr	r3, [pc, #136]	; (80040cc <MX_SPI3_Init+0xa4>)
 8004042:	2203      	movs	r2, #3
 8004044:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004046:	4b21      	ldr	r3, [pc, #132]	; (80040cc <MX_SPI3_Init+0xa4>)
 8004048:	2200      	movs	r2, #0
 800404a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800404c:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <MX_SPI3_Init+0xa4>)
 800404e:	2200      	movs	r2, #0
 8004050:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004052:	4b1e      	ldr	r3, [pc, #120]	; (80040cc <MX_SPI3_Init+0xa4>)
 8004054:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004058:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800405a:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <MX_SPI3_Init+0xa4>)
 800405c:	2200      	movs	r2, #0
 800405e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <MX_SPI3_Init+0xa4>)
 8004062:	2200      	movs	r2, #0
 8004064:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004066:	4b19      	ldr	r3, [pc, #100]	; (80040cc <MX_SPI3_Init+0xa4>)
 8004068:	2200      	movs	r2, #0
 800406a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800406c:	4b17      	ldr	r3, [pc, #92]	; (80040cc <MX_SPI3_Init+0xa4>)
 800406e:	2200      	movs	r2, #0
 8004070:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8004072:	4b16      	ldr	r3, [pc, #88]	; (80040cc <MX_SPI3_Init+0xa4>)
 8004074:	2200      	movs	r2, #0
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004078:	4b14      	ldr	r3, [pc, #80]	; (80040cc <MX_SPI3_Init+0xa4>)
 800407a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800407e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004080:	4b12      	ldr	r3, [pc, #72]	; (80040cc <MX_SPI3_Init+0xa4>)
 8004082:	2200      	movs	r2, #0
 8004084:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004086:	4b11      	ldr	r3, [pc, #68]	; (80040cc <MX_SPI3_Init+0xa4>)
 8004088:	2200      	movs	r2, #0
 800408a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800408c:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <MX_SPI3_Init+0xa4>)
 800408e:	2200      	movs	r2, #0
 8004090:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004092:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <MX_SPI3_Init+0xa4>)
 8004094:	2200      	movs	r2, #0
 8004096:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004098:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <MX_SPI3_Init+0xa4>)
 800409a:	2200      	movs	r2, #0
 800409c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800409e:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <MX_SPI3_Init+0xa4>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80040a4:	4b09      	ldr	r3, [pc, #36]	; (80040cc <MX_SPI3_Init+0xa4>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80040aa:	4b08      	ldr	r3, [pc, #32]	; (80040cc <MX_SPI3_Init+0xa4>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80040b0:	4b06      	ldr	r3, [pc, #24]	; (80040cc <MX_SPI3_Init+0xa4>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80040b6:	4805      	ldr	r0, [pc, #20]	; (80040cc <MX_SPI3_Init+0xa4>)
 80040b8:	f007 fb32 	bl	800b720 <HAL_SPI_Init>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 80040c2:	f7ff fe25 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80040c6:	bf00      	nop
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	2400082c 	.word	0x2400082c
 80040d0:	40003c00 	.word	0x40003c00

080040d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b0b8      	sub	sp, #224	; 0xe0
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	60da      	str	r2, [r3, #12]
 80040ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040ec:	f107 0310 	add.w	r3, r7, #16
 80040f0:	22bc      	movs	r2, #188	; 0xbc
 80040f2:	2100      	movs	r1, #0
 80040f4:	4618      	mov	r0, r3
 80040f6:	f00b fff7 	bl	80100e8 <memset>
  if(spiHandle->Instance==SPI3)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a25      	ldr	r2, [pc, #148]	; (8004194 <HAL_SPI_MspInit+0xc0>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d142      	bne.n	800418a <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8004104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004108:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800410a:	2300      	movs	r3, #0
 800410c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800410e:	f107 0310 	add.w	r3, r7, #16
 8004112:	4618      	mov	r0, r3
 8004114:	f005 ffa2 	bl	800a05c <HAL_RCCEx_PeriphCLKConfig>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800411e:	f7ff fdf7 	bl	8003d10 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004122:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <HAL_SPI_MspInit+0xc4>)
 8004124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004128:	4a1b      	ldr	r2, [pc, #108]	; (8004198 <HAL_SPI_MspInit+0xc4>)
 800412a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_SPI_MspInit+0xc4>)
 8004134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004140:	4b15      	ldr	r3, [pc, #84]	; (8004198 <HAL_SPI_MspInit+0xc4>)
 8004142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004146:	4a14      	ldr	r2, [pc, #80]	; (8004198 <HAL_SPI_MspInit+0xc4>)
 8004148:	f043 0304 	orr.w	r3, r3, #4
 800414c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <HAL_SPI_MspInit+0xc4>)
 8004152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	60bb      	str	r3, [r7, #8]
 800415c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800415e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004162:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004166:	2302      	movs	r3, #2
 8004168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800416c:	2300      	movs	r3, #0
 800416e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004172:	2300      	movs	r3, #0
 8004174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004178:	2306      	movs	r3, #6
 800417a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800417e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004182:	4619      	mov	r1, r3
 8004184:	4805      	ldr	r0, [pc, #20]	; (800419c <HAL_SPI_MspInit+0xc8>)
 8004186:	f004 fd93 	bl	8008cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800418a:	bf00      	nop
 800418c:	37e0      	adds	r7, #224	; 0xe0
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	40003c00 	.word	0x40003c00
 8004198:	58024400 	.word	0x58024400
 800419c:	58020800 	.word	0x58020800

080041a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041a6:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <HAL_MspInit+0x30>)
 80041a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041ac:	4a08      	ldr	r2, [pc, #32]	; (80041d0 <HAL_MspInit+0x30>)
 80041ae:	f043 0302 	orr.w	r3, r3, #2
 80041b2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_MspInit+0x30>)
 80041b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	58024400 	.word	0x58024400

080041d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80041d8:	e7fe      	b.n	80041d8 <NMI_Handler+0x4>

080041da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80041da:	b480      	push	{r7}
 80041dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80041de:	e7fe      	b.n	80041de <HardFault_Handler+0x4>

080041e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80041e0:	b480      	push	{r7}
 80041e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80041e4:	e7fe      	b.n	80041e4 <MemManage_Handler+0x4>

080041e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80041e6:	b480      	push	{r7}
 80041e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80041ea:	e7fe      	b.n	80041ea <BusFault_Handler+0x4>

080041ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80041f0:	e7fe      	b.n	80041f0 <UsageFault_Handler+0x4>

080041f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80041f2:	b480      	push	{r7}
 80041f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80041f6:	bf00      	nop
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004204:	bf00      	nop
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800420e:	b480      	push	{r7}
 8004210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004212:	bf00      	nop
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004220:	f001 fbc6 	bl	80059b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8004224:	f001 fcff 	bl	8005c26 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8004228:	bf00      	nop
 800422a:	bd80      	pop	{r7, pc}

0800422c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8004230:	4802      	ldr	r0, [pc, #8]	; (800423c <DMA1_Stream0_IRQHandler+0x10>)
 8004232:	f003 fa2b 	bl	800768c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004236:	bf00      	nop
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	24000e80 	.word	0x24000e80

08004240 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004244:	4802      	ldr	r0, [pc, #8]	; (8004250 <DMA1_Stream1_IRQHandler+0x10>)
 8004246:	f003 fa21 	bl	800768c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	24000d00 	.word	0x24000d00

08004254 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004258:	4802      	ldr	r0, [pc, #8]	; (8004264 <DMA1_Stream2_IRQHandler+0x10>)
 800425a:	f003 fa17 	bl	800768c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	24000e08 	.word	0x24000e08

08004268 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800426c:	4802      	ldr	r0, [pc, #8]	; (8004278 <DMA1_Stream3_IRQHandler+0x10>)
 800426e:	f003 fa0d 	bl	800768c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	24000bf8 	.word	0x24000bf8

0800427c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8004280:	4802      	ldr	r0, [pc, #8]	; (800428c <DMA1_Stream4_IRQHandler+0x10>)
 8004282:	f003 fa03 	bl	800768c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004286:	bf00      	nop
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	24000f88 	.word	0x24000f88

08004290 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8004294:	2040      	movs	r0, #64	; 0x40
 8004296:	f004 fed4 	bl	8009042 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 800429a:	2080      	movs	r0, #128	; 0x80
 800429c:	f004 fed1 	bl	8009042 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80042a0:	bf00      	nop
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80042a8:	4802      	ldr	r0, [pc, #8]	; (80042b4 <USART3_IRQHandler+0x10>)
 80042aa:	f009 f8c5 	bl	800d438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80042ae:	bf00      	nop
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	24000d78 	.word	0x24000d78

080042b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 80042bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80042c0:	f004 febf 	bl	8009042 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 80042c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80042c8:	f004 febb 	bl	8009042 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 80042cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80042d0:	f004 feb7 	bl	8009042 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 80042d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80042d8:	f004 feb3 	bl	8009042 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80042dc:	bf00      	nop
 80042de:	bd80      	pop	{r7, pc}

080042e0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80042e4:	4802      	ldr	r0, [pc, #8]	; (80042f0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80042e6:	f007 fda9 	bl	800be3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80042ea:	bf00      	nop
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	24000b60 	.word	0x24000b60

080042f4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80042f8:	4802      	ldr	r0, [pc, #8]	; (8004304 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80042fa:	f007 fd9f 	bl	800be3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80042fe:	bf00      	nop
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	240009e4 	.word	0x240009e4

08004308 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800430c:	4802      	ldr	r0, [pc, #8]	; (8004318 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800430e:	f007 fd95 	bl	800be3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004312:	bf00      	nop
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	24000b14 	.word	0x24000b14

0800431c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004320:	4802      	ldr	r0, [pc, #8]	; (800432c <TIM5_IRQHandler+0x10>)
 8004322:	f007 fd8b 	bl	800be3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	2400094c 	.word	0x2400094c

08004330 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004334:	4802      	ldr	r0, [pc, #8]	; (8004340 <UART4_IRQHandler+0x10>)
 8004336:	f009 f87f 	bl	800d438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	24000ef8 	.word	0x24000ef8

08004344 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004348:	4802      	ldr	r0, [pc, #8]	; (8004354 <TIM6_DAC_IRQHandler+0x10>)
 800434a:	f007 fd77 	bl	800be3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	24000a30 	.word	0x24000a30

08004358 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800435c:	4802      	ldr	r0, [pc, #8]	; (8004368 <TIM7_IRQHandler+0x10>)
 800435e:	f007 fd6d 	bl	800be3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	24000bac 	.word	0x24000bac

0800436c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004370:	4802      	ldr	r0, [pc, #8]	; (800437c <UART7_IRQHandler+0x10>)
 8004372:	f009 f861 	bl	800d438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	24000c70 	.word	0x24000c70

08004380 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
	return 1;
 8004384:	2301      	movs	r3, #1
}
 8004386:	4618      	mov	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <_kill>:

int _kill(int pid, int sig)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800439a:	f00b fe6d 	bl	8010078 <__errno>
 800439e:	4603      	mov	r3, r0
 80043a0:	2216      	movs	r2, #22
 80043a2:	601a      	str	r2, [r3, #0]
	return -1;
 80043a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <_exit>:

void _exit (int status)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80043b8:	f04f 31ff 	mov.w	r1, #4294967295
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff ffe7 	bl	8004390 <_kill>
	while (1) {}		/* Make sure we hang here */
 80043c2:	e7fe      	b.n	80043c2 <_exit+0x12>

080043c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	e00a      	b.n	80043ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80043d6:	f3af 8000 	nop.w
 80043da:	4601      	mov	r1, r0
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	60ba      	str	r2, [r7, #8]
 80043e2:	b2ca      	uxtb	r2, r1
 80043e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	3301      	adds	r3, #1
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	697a      	ldr	r2, [r7, #20]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	dbf0      	blt.n	80043d6 <_read+0x12>
	}

return len;
 80043f4:	687b      	ldr	r3, [r7, #4]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80043fe:	b580      	push	{r7, lr}
 8004400:	b086      	sub	sp, #24
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800440a:	2300      	movs	r3, #0
 800440c:	617b      	str	r3, [r7, #20]
 800440e:	e009      	b.n	8004424 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	60ba      	str	r2, [r7, #8]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	4618      	mov	r0, r3
 800441a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	3301      	adds	r3, #1
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	429a      	cmp	r2, r3
 800442a:	dbf1      	blt.n	8004410 <_write+0x12>
	}
	return len;
 800442c:	687b      	ldr	r3, [r7, #4]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <_close>:

int _close(int file)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
	return -1;
 800443e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800445e:	605a      	str	r2, [r3, #4]
	return 0;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <_isatty>:

int _isatty(int file)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
	return 1;
 8004476:	2301      	movs	r3, #1
}
 8004478:	4618      	mov	r0, r3
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
	return 0;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
	...

080044a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80044a8:	4a14      	ldr	r2, [pc, #80]	; (80044fc <_sbrk+0x5c>)
 80044aa:	4b15      	ldr	r3, [pc, #84]	; (8004500 <_sbrk+0x60>)
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80044b4:	4b13      	ldr	r3, [pc, #76]	; (8004504 <_sbrk+0x64>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d102      	bne.n	80044c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80044bc:	4b11      	ldr	r3, [pc, #68]	; (8004504 <_sbrk+0x64>)
 80044be:	4a12      	ldr	r2, [pc, #72]	; (8004508 <_sbrk+0x68>)
 80044c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80044c2:	4b10      	ldr	r3, [pc, #64]	; (8004504 <_sbrk+0x64>)
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4413      	add	r3, r2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d207      	bcs.n	80044e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80044d0:	f00b fdd2 	bl	8010078 <__errno>
 80044d4:	4603      	mov	r3, r0
 80044d6:	220c      	movs	r2, #12
 80044d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80044da:	f04f 33ff 	mov.w	r3, #4294967295
 80044de:	e009      	b.n	80044f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80044e0:	4b08      	ldr	r3, [pc, #32]	; (8004504 <_sbrk+0x64>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80044e6:	4b07      	ldr	r3, [pc, #28]	; (8004504 <_sbrk+0x64>)
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4413      	add	r3, r2
 80044ee:	4a05      	ldr	r2, [pc, #20]	; (8004504 <_sbrk+0x64>)
 80044f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80044f2:	68fb      	ldr	r3, [r7, #12]
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3718      	adds	r7, #24
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	24001618 	.word	0x24001618
 8004500:	00000400 	.word	0x00000400
 8004504:	240007fc 	.word	0x240007fc
 8004508:	24001018 	.word	0x24001018

0800450c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004510:	4b39      	ldr	r3, [pc, #228]	; (80045f8 <SystemInit+0xec>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	4a38      	ldr	r2, [pc, #224]	; (80045f8 <SystemInit+0xec>)
 8004518:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800451c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004520:	4b36      	ldr	r3, [pc, #216]	; (80045fc <SystemInit+0xf0>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	2b06      	cmp	r3, #6
 800452a:	d807      	bhi.n	800453c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800452c:	4b33      	ldr	r3, [pc, #204]	; (80045fc <SystemInit+0xf0>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f023 030f 	bic.w	r3, r3, #15
 8004534:	4a31      	ldr	r2, [pc, #196]	; (80045fc <SystemInit+0xf0>)
 8004536:	f043 0307 	orr.w	r3, r3, #7
 800453a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800453c:	4b30      	ldr	r3, [pc, #192]	; (8004600 <SystemInit+0xf4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a2f      	ldr	r2, [pc, #188]	; (8004600 <SystemInit+0xf4>)
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004548:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <SystemInit+0xf4>)
 800454a:	2200      	movs	r2, #0
 800454c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800454e:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <SystemInit+0xf4>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	492b      	ldr	r1, [pc, #172]	; (8004600 <SystemInit+0xf4>)
 8004554:	4b2b      	ldr	r3, [pc, #172]	; (8004604 <SystemInit+0xf8>)
 8004556:	4013      	ands	r3, r2
 8004558:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800455a:	4b28      	ldr	r3, [pc, #160]	; (80045fc <SystemInit+0xf0>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004566:	4b25      	ldr	r3, [pc, #148]	; (80045fc <SystemInit+0xf0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f023 030f 	bic.w	r3, r3, #15
 800456e:	4a23      	ldr	r2, [pc, #140]	; (80045fc <SystemInit+0xf0>)
 8004570:	f043 0307 	orr.w	r3, r3, #7
 8004574:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004576:	4b22      	ldr	r3, [pc, #136]	; (8004600 <SystemInit+0xf4>)
 8004578:	2200      	movs	r2, #0
 800457a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800457c:	4b20      	ldr	r3, [pc, #128]	; (8004600 <SystemInit+0xf4>)
 800457e:	2200      	movs	r2, #0
 8004580:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004582:	4b1f      	ldr	r3, [pc, #124]	; (8004600 <SystemInit+0xf4>)
 8004584:	2200      	movs	r2, #0
 8004586:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004588:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <SystemInit+0xf4>)
 800458a:	4a1f      	ldr	r2, [pc, #124]	; (8004608 <SystemInit+0xfc>)
 800458c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800458e:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <SystemInit+0xf4>)
 8004590:	4a1e      	ldr	r2, [pc, #120]	; (800460c <SystemInit+0x100>)
 8004592:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004594:	4b1a      	ldr	r3, [pc, #104]	; (8004600 <SystemInit+0xf4>)
 8004596:	4a1e      	ldr	r2, [pc, #120]	; (8004610 <SystemInit+0x104>)
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800459a:	4b19      	ldr	r3, [pc, #100]	; (8004600 <SystemInit+0xf4>)
 800459c:	2200      	movs	r2, #0
 800459e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80045a0:	4b17      	ldr	r3, [pc, #92]	; (8004600 <SystemInit+0xf4>)
 80045a2:	4a1b      	ldr	r2, [pc, #108]	; (8004610 <SystemInit+0x104>)
 80045a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80045a6:	4b16      	ldr	r3, [pc, #88]	; (8004600 <SystemInit+0xf4>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80045ac:	4b14      	ldr	r3, [pc, #80]	; (8004600 <SystemInit+0xf4>)
 80045ae:	4a18      	ldr	r2, [pc, #96]	; (8004610 <SystemInit+0x104>)
 80045b0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80045b2:	4b13      	ldr	r3, [pc, #76]	; (8004600 <SystemInit+0xf4>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80045b8:	4b11      	ldr	r3, [pc, #68]	; (8004600 <SystemInit+0xf4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a10      	ldr	r2, [pc, #64]	; (8004600 <SystemInit+0xf4>)
 80045be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045c2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80045c4:	4b0e      	ldr	r3, [pc, #56]	; (8004600 <SystemInit+0xf4>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80045ca:	4b12      	ldr	r3, [pc, #72]	; (8004614 <SystemInit+0x108>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4b12      	ldr	r3, [pc, #72]	; (8004618 <SystemInit+0x10c>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045d6:	d202      	bcs.n	80045de <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80045d8:	4b10      	ldr	r3, [pc, #64]	; (800461c <SystemInit+0x110>)
 80045da:	2201      	movs	r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80045de:	4b10      	ldr	r3, [pc, #64]	; (8004620 <SystemInit+0x114>)
 80045e0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80045e4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80045e6:	4b04      	ldr	r3, [pc, #16]	; (80045f8 <SystemInit+0xec>)
 80045e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045ec:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80045ee:	bf00      	nop
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000ed00 	.word	0xe000ed00
 80045fc:	52002000 	.word	0x52002000
 8004600:	58024400 	.word	0x58024400
 8004604:	eaf6ed7f 	.word	0xeaf6ed7f
 8004608:	02020200 	.word	0x02020200
 800460c:	01ff0000 	.word	0x01ff0000
 8004610:	01010280 	.word	0x01010280
 8004614:	5c001000 	.word	0x5c001000
 8004618:	ffff0000 	.word	0xffff0000
 800461c:	51008108 	.word	0x51008108
 8004620:	52004000 	.word	0x52004000

08004624 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b09a      	sub	sp, #104	; 0x68
 8004628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800462a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
 8004632:	605a      	str	r2, [r3, #4]
 8004634:	609a      	str	r2, [r3, #8]
 8004636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004638:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004644:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	60da      	str	r2, [r3, #12]
 8004652:	611a      	str	r2, [r3, #16]
 8004654:	615a      	str	r2, [r3, #20]
 8004656:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004658:	1d3b      	adds	r3, r7, #4
 800465a:	222c      	movs	r2, #44	; 0x2c
 800465c:	2100      	movs	r1, #0
 800465e:	4618      	mov	r0, r3
 8004660:	f00b fd42 	bl	80100e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004664:	4b44      	ldr	r3, [pc, #272]	; (8004778 <MX_TIM1_Init+0x154>)
 8004666:	4a45      	ldr	r2, [pc, #276]	; (800477c <MX_TIM1_Init+0x158>)
 8004668:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 800466a:	4b43      	ldr	r3, [pc, #268]	; (8004778 <MX_TIM1_Init+0x154>)
 800466c:	22c7      	movs	r2, #199	; 0xc7
 800466e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004670:	4b41      	ldr	r3, [pc, #260]	; (8004778 <MX_TIM1_Init+0x154>)
 8004672:	2200      	movs	r2, #0
 8004674:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8004676:	4b40      	ldr	r3, [pc, #256]	; (8004778 <MX_TIM1_Init+0x154>)
 8004678:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800467c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800467e:	4b3e      	ldr	r3, [pc, #248]	; (8004778 <MX_TIM1_Init+0x154>)
 8004680:	2200      	movs	r2, #0
 8004682:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004684:	4b3c      	ldr	r3, [pc, #240]	; (8004778 <MX_TIM1_Init+0x154>)
 8004686:	2200      	movs	r2, #0
 8004688:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800468a:	4b3b      	ldr	r3, [pc, #236]	; (8004778 <MX_TIM1_Init+0x154>)
 800468c:	2280      	movs	r2, #128	; 0x80
 800468e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004690:	4839      	ldr	r0, [pc, #228]	; (8004778 <MX_TIM1_Init+0x154>)
 8004692:	f007 f966 	bl	800b962 <HAL_TIM_Base_Init>
 8004696:	4603      	mov	r3, r0
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800469c:	f7ff fb38 	bl	8003d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046a4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80046a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046aa:	4619      	mov	r1, r3
 80046ac:	4832      	ldr	r0, [pc, #200]	; (8004778 <MX_TIM1_Init+0x154>)
 80046ae:	f007 fdf9 	bl	800c2a4 <HAL_TIM_ConfigClockSource>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80046b8:	f7ff fb2a 	bl	8003d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80046bc:	482e      	ldr	r0, [pc, #184]	; (8004778 <MX_TIM1_Init+0x154>)
 80046be:	f007 fa4e 	bl	800bb5e <HAL_TIM_PWM_Init>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80046c8:	f7ff fb22 	bl	8003d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046cc:	2300      	movs	r3, #0
 80046ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80046d0:	2300      	movs	r3, #0
 80046d2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80046d8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80046dc:	4619      	mov	r1, r3
 80046de:	4826      	ldr	r0, [pc, #152]	; (8004778 <MX_TIM1_Init+0x154>)
 80046e0:	f008 fb34 	bl	800cd4c <HAL_TIMEx_MasterConfigSynchronization>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80046ea:	f7ff fb11 	bl	8003d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046ee:	2360      	movs	r3, #96	; 0x60
 80046f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80046f2:	f240 1339 	movw	r3, #313	; 0x139
 80046f6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046f8:	2300      	movs	r3, #0
 80046fa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80046fc:	2300      	movs	r3, #0
 80046fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004700:	2300      	movs	r3, #0
 8004702:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004704:	2300      	movs	r3, #0
 8004706:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004708:	2300      	movs	r3, #0
 800470a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800470c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004710:	2204      	movs	r2, #4
 8004712:	4619      	mov	r1, r3
 8004714:	4818      	ldr	r0, [pc, #96]	; (8004778 <MX_TIM1_Init+0x154>)
 8004716:	f007 fcb1 	bl	800c07c <HAL_TIM_PWM_ConfigChannel>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d001      	beq.n	8004724 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8004720:	f7ff faf6 	bl	8003d10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004724:	2300      	movs	r3, #0
 8004726:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004728:	2300      	movs	r3, #0
 800472a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004730:	2300      	movs	r3, #0
 8004732:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004734:	2300      	movs	r3, #0
 8004736:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004738:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800473c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004742:	2300      	movs	r3, #0
 8004744:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004750:	2300      	movs	r3, #0
 8004752:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004754:	1d3b      	adds	r3, r7, #4
 8004756:	4619      	mov	r1, r3
 8004758:	4807      	ldr	r0, [pc, #28]	; (8004778 <MX_TIM1_Init+0x154>)
 800475a:	f008 fb85 	bl	800ce68 <HAL_TIMEx_ConfigBreakDeadTime>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004764:	f7ff fad4 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004768:	4803      	ldr	r0, [pc, #12]	; (8004778 <MX_TIM1_Init+0x154>)
 800476a:	f000 fc85 	bl	8005078 <HAL_TIM_MspPostInit>

}
 800476e:	bf00      	nop
 8004770:	3768      	adds	r7, #104	; 0x68
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	24000a7c 	.word	0x24000a7c
 800477c:	40010000 	.word	0x40010000

08004780 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b08e      	sub	sp, #56	; 0x38
 8004784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004786:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800478a:	2200      	movs	r2, #0
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	605a      	str	r2, [r3, #4]
 8004790:	609a      	str	r2, [r3, #8]
 8004792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004794:	f107 031c 	add.w	r3, r7, #28
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]
 800479c:	605a      	str	r2, [r3, #4]
 800479e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80047a0:	463b      	mov	r3, r7
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	609a      	str	r2, [r3, #8]
 80047aa:	60da      	str	r2, [r3, #12]
 80047ac:	611a      	str	r2, [r3, #16]
 80047ae:	615a      	str	r2, [r3, #20]
 80047b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80047b2:	4b2e      	ldr	r3, [pc, #184]	; (800486c <MX_TIM2_Init+0xec>)
 80047b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80047b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 80047ba:	4b2c      	ldr	r3, [pc, #176]	; (800486c <MX_TIM2_Init+0xec>)
 80047bc:	22c7      	movs	r2, #199	; 0xc7
 80047be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047c0:	4b2a      	ldr	r3, [pc, #168]	; (800486c <MX_TIM2_Init+0xec>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 80047c6:	4b29      	ldr	r3, [pc, #164]	; (800486c <MX_TIM2_Init+0xec>)
 80047c8:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80047cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047ce:	4b27      	ldr	r3, [pc, #156]	; (800486c <MX_TIM2_Init+0xec>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047d4:	4b25      	ldr	r3, [pc, #148]	; (800486c <MX_TIM2_Init+0xec>)
 80047d6:	2280      	movs	r2, #128	; 0x80
 80047d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80047da:	4824      	ldr	r0, [pc, #144]	; (800486c <MX_TIM2_Init+0xec>)
 80047dc:	f007 f8c1 	bl	800b962 <HAL_TIM_Base_Init>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80047e6:	f7ff fa93 	bl	8003d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80047f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047f4:	4619      	mov	r1, r3
 80047f6:	481d      	ldr	r0, [pc, #116]	; (800486c <MX_TIM2_Init+0xec>)
 80047f8:	f007 fd54 	bl	800c2a4 <HAL_TIM_ConfigClockSource>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8004802:	f7ff fa85 	bl	8003d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004806:	4819      	ldr	r0, [pc, #100]	; (800486c <MX_TIM2_Init+0xec>)
 8004808:	f007 f9a9 	bl	800bb5e <HAL_TIM_PWM_Init>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8004812:	f7ff fa7d 	bl	8003d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800481a:	2300      	movs	r3, #0
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800481e:	f107 031c 	add.w	r3, r7, #28
 8004822:	4619      	mov	r1, r3
 8004824:	4811      	ldr	r0, [pc, #68]	; (800486c <MX_TIM2_Init+0xec>)
 8004826:	f008 fa91 	bl	800cd4c <HAL_TIMEx_MasterConfigSynchronization>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8004830:	f7ff fa6e 	bl	8003d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004834:	2360      	movs	r3, #96	; 0x60
 8004836:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8004838:	f240 1339 	movw	r3, #313	; 0x139
 800483c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800483e:	2300      	movs	r3, #0
 8004840:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004842:	2300      	movs	r3, #0
 8004844:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004846:	463b      	mov	r3, r7
 8004848:	2208      	movs	r2, #8
 800484a:	4619      	mov	r1, r3
 800484c:	4807      	ldr	r0, [pc, #28]	; (800486c <MX_TIM2_Init+0xec>)
 800484e:	f007 fc15 	bl	800c07c <HAL_TIM_PWM_ConfigChannel>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8004858:	f7ff fa5a 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800485c:	4803      	ldr	r0, [pc, #12]	; (800486c <MX_TIM2_Init+0xec>)
 800485e:	f000 fc0b 	bl	8005078 <HAL_TIM_MspPostInit>

}
 8004862:	bf00      	nop
 8004864:	3738      	adds	r7, #56	; 0x38
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	24000ac8 	.word	0x24000ac8

08004870 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08e      	sub	sp, #56	; 0x38
 8004874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004876:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800487a:	2200      	movs	r2, #0
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	605a      	str	r2, [r3, #4]
 8004880:	609a      	str	r2, [r3, #8]
 8004882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004884:	f107 031c 	add.w	r3, r7, #28
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004890:	463b      	mov	r3, r7
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	605a      	str	r2, [r3, #4]
 8004898:	609a      	str	r2, [r3, #8]
 800489a:	60da      	str	r2, [r3, #12]
 800489c:	611a      	str	r2, [r3, #16]
 800489e:	615a      	str	r2, [r3, #20]
 80048a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80048a2:	4b2d      	ldr	r3, [pc, #180]	; (8004958 <MX_TIM3_Init+0xe8>)
 80048a4:	4a2d      	ldr	r2, [pc, #180]	; (800495c <MX_TIM3_Init+0xec>)
 80048a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 80048a8:	4b2b      	ldr	r3, [pc, #172]	; (8004958 <MX_TIM3_Init+0xe8>)
 80048aa:	22c7      	movs	r2, #199	; 0xc7
 80048ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048ae:	4b2a      	ldr	r3, [pc, #168]	; (8004958 <MX_TIM3_Init+0xe8>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 80048b4:	4b28      	ldr	r3, [pc, #160]	; (8004958 <MX_TIM3_Init+0xe8>)
 80048b6:	f640 125f 	movw	r2, #2399	; 0x95f
 80048ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048bc:	4b26      	ldr	r3, [pc, #152]	; (8004958 <MX_TIM3_Init+0xe8>)
 80048be:	2200      	movs	r2, #0
 80048c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048c2:	4b25      	ldr	r3, [pc, #148]	; (8004958 <MX_TIM3_Init+0xe8>)
 80048c4:	2280      	movs	r2, #128	; 0x80
 80048c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80048c8:	4823      	ldr	r0, [pc, #140]	; (8004958 <MX_TIM3_Init+0xe8>)
 80048ca:	f007 f84a 	bl	800b962 <HAL_TIM_Base_Init>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80048d4:	f7ff fa1c 	bl	8003d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048dc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80048de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048e2:	4619      	mov	r1, r3
 80048e4:	481c      	ldr	r0, [pc, #112]	; (8004958 <MX_TIM3_Init+0xe8>)
 80048e6:	f007 fcdd 	bl	800c2a4 <HAL_TIM_ConfigClockSource>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80048f0:	f7ff fa0e 	bl	8003d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80048f4:	4818      	ldr	r0, [pc, #96]	; (8004958 <MX_TIM3_Init+0xe8>)
 80048f6:	f007 f932 	bl	800bb5e <HAL_TIM_PWM_Init>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8004900:	f7ff fa06 	bl	8003d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004904:	2300      	movs	r3, #0
 8004906:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004908:	2300      	movs	r3, #0
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800490c:	f107 031c 	add.w	r3, r7, #28
 8004910:	4619      	mov	r1, r3
 8004912:	4811      	ldr	r0, [pc, #68]	; (8004958 <MX_TIM3_Init+0xe8>)
 8004914:	f008 fa1a 	bl	800cd4c <HAL_TIMEx_MasterConfigSynchronization>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800491e:	f7ff f9f7 	bl	8003d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004922:	2360      	movs	r3, #96	; 0x60
 8004924:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004926:	2300      	movs	r3, #0
 8004928:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800492a:	2300      	movs	r3, #0
 800492c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800492e:	2300      	movs	r3, #0
 8004930:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004932:	463b      	mov	r3, r7
 8004934:	2200      	movs	r2, #0
 8004936:	4619      	mov	r1, r3
 8004938:	4807      	ldr	r0, [pc, #28]	; (8004958 <MX_TIM3_Init+0xe8>)
 800493a:	f007 fb9f 	bl	800c07c <HAL_TIM_PWM_ConfigChannel>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004944:	f7ff f9e4 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004948:	4803      	ldr	r0, [pc, #12]	; (8004958 <MX_TIM3_Init+0xe8>)
 800494a:	f000 fb95 	bl	8005078 <HAL_TIM_MspPostInit>

}
 800494e:	bf00      	nop
 8004950:	3738      	adds	r7, #56	; 0x38
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	24000998 	.word	0x24000998
 800495c:	40000400 	.word	0x40000400

08004960 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08e      	sub	sp, #56	; 0x38
 8004964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004966:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800496a:	2200      	movs	r2, #0
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	605a      	str	r2, [r3, #4]
 8004970:	609a      	str	r2, [r3, #8]
 8004972:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004974:	f107 031c 	add.w	r3, r7, #28
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	605a      	str	r2, [r3, #4]
 800497e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004980:	463b      	mov	r3, r7
 8004982:	2200      	movs	r2, #0
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	605a      	str	r2, [r3, #4]
 8004988:	609a      	str	r2, [r3, #8]
 800498a:	60da      	str	r2, [r3, #12]
 800498c:	611a      	str	r2, [r3, #16]
 800498e:	615a      	str	r2, [r3, #20]
 8004990:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004992:	4b2d      	ldr	r3, [pc, #180]	; (8004a48 <MX_TIM4_Init+0xe8>)
 8004994:	4a2d      	ldr	r2, [pc, #180]	; (8004a4c <MX_TIM4_Init+0xec>)
 8004996:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8004998:	4b2b      	ldr	r3, [pc, #172]	; (8004a48 <MX_TIM4_Init+0xe8>)
 800499a:	22ef      	movs	r2, #239	; 0xef
 800499c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800499e:	4b2a      	ldr	r3, [pc, #168]	; (8004a48 <MX_TIM4_Init+0xe8>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 80049a4:	4b28      	ldr	r3, [pc, #160]	; (8004a48 <MX_TIM4_Init+0xe8>)
 80049a6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80049aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049ac:	4b26      	ldr	r3, [pc, #152]	; (8004a48 <MX_TIM4_Init+0xe8>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049b2:	4b25      	ldr	r3, [pc, #148]	; (8004a48 <MX_TIM4_Init+0xe8>)
 80049b4:	2280      	movs	r2, #128	; 0x80
 80049b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80049b8:	4823      	ldr	r0, [pc, #140]	; (8004a48 <MX_TIM4_Init+0xe8>)
 80049ba:	f006 ffd2 	bl	800b962 <HAL_TIM_Base_Init>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80049c4:	f7ff f9a4 	bl	8003d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049cc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80049ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049d2:	4619      	mov	r1, r3
 80049d4:	481c      	ldr	r0, [pc, #112]	; (8004a48 <MX_TIM4_Init+0xe8>)
 80049d6:	f007 fc65 	bl	800c2a4 <HAL_TIM_ConfigClockSource>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80049e0:	f7ff f996 	bl	8003d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80049e4:	4818      	ldr	r0, [pc, #96]	; (8004a48 <MX_TIM4_Init+0xe8>)
 80049e6:	f007 f8ba 	bl	800bb5e <HAL_TIM_PWM_Init>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80049f0:	f7ff f98e 	bl	8003d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80049f4:	2300      	movs	r3, #0
 80049f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80049f8:	2300      	movs	r3, #0
 80049fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80049fc:	f107 031c 	add.w	r3, r7, #28
 8004a00:	4619      	mov	r1, r3
 8004a02:	4811      	ldr	r0, [pc, #68]	; (8004a48 <MX_TIM4_Init+0xe8>)
 8004a04:	f008 f9a2 	bl	800cd4c <HAL_TIMEx_MasterConfigSynchronization>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004a0e:	f7ff f97f 	bl	8003d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a12:	2360      	movs	r3, #96	; 0x60
 8004a14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004a16:	2300      	movs	r3, #0
 8004a18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004a22:	463b      	mov	r3, r7
 8004a24:	2208      	movs	r2, #8
 8004a26:	4619      	mov	r1, r3
 8004a28:	4807      	ldr	r0, [pc, #28]	; (8004a48 <MX_TIM4_Init+0xe8>)
 8004a2a:	f007 fb27 	bl	800c07c <HAL_TIM_PWM_ConfigChannel>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004a34:	f7ff f96c 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004a38:	4803      	ldr	r0, [pc, #12]	; (8004a48 <MX_TIM4_Init+0xe8>)
 8004a3a:	f000 fb1d 	bl	8005078 <HAL_TIM_MspPostInit>

}
 8004a3e:	bf00      	nop
 8004a40:	3738      	adds	r7, #56	; 0x38
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	240008b4 	.word	0x240008b4
 8004a4c:	40000800 	.word	0x40000800

08004a50 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b088      	sub	sp, #32
 8004a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a56:	f107 0310 	add.w	r3, r7, #16
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	609a      	str	r2, [r3, #8]
 8004a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a64:	1d3b      	adds	r3, r7, #4
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	605a      	str	r2, [r3, #4]
 8004a6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004a6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ae4 <MX_TIM5_Init+0x94>)
 8004a70:	4a1d      	ldr	r2, [pc, #116]	; (8004ae8 <MX_TIM5_Init+0x98>)
 8004a72:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <MX_TIM5_Init+0x94>)
 8004a76:	22c7      	movs	r2, #199	; 0xc7
 8004a78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ae4 <MX_TIM5_Init+0x94>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8004a80:	4b18      	ldr	r3, [pc, #96]	; (8004ae4 <MX_TIM5_Init+0x94>)
 8004a82:	f642 62df 	movw	r2, #11999	; 0x2edf
 8004a86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a88:	4b16      	ldr	r3, [pc, #88]	; (8004ae4 <MX_TIM5_Init+0x94>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a8e:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <MX_TIM5_Init+0x94>)
 8004a90:	2280      	movs	r2, #128	; 0x80
 8004a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004a94:	4813      	ldr	r0, [pc, #76]	; (8004ae4 <MX_TIM5_Init+0x94>)
 8004a96:	f006 ff64 	bl	800b962 <HAL_TIM_Base_Init>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004aa0:	f7ff f936 	bl	8003d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004aa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004aa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004aaa:	f107 0310 	add.w	r3, r7, #16
 8004aae:	4619      	mov	r1, r3
 8004ab0:	480c      	ldr	r0, [pc, #48]	; (8004ae4 <MX_TIM5_Init+0x94>)
 8004ab2:	f007 fbf7 	bl	800c2a4 <HAL_TIM_ConfigClockSource>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004abc:	f7ff f928 	bl	8003d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004ac8:	1d3b      	adds	r3, r7, #4
 8004aca:	4619      	mov	r1, r3
 8004acc:	4805      	ldr	r0, [pc, #20]	; (8004ae4 <MX_TIM5_Init+0x94>)
 8004ace:	f008 f93d 	bl	800cd4c <HAL_TIMEx_MasterConfigSynchronization>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004ad8:	f7ff f91a 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004adc:	bf00      	nop
 8004ade:	3720      	adds	r7, #32
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	2400094c 	.word	0x2400094c
 8004ae8:	40000c00 	.word	0x40000c00

08004aec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004af2:	1d3b      	adds	r3, r7, #4
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004afc:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <MX_TIM6_Init+0x64>)
 8004afe:	4a15      	ldr	r2, [pc, #84]	; (8004b54 <MX_TIM6_Init+0x68>)
 8004b00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8004b02:	4b13      	ldr	r3, [pc, #76]	; (8004b50 <MX_TIM6_Init+0x64>)
 8004b04:	22c7      	movs	r2, #199	; 0xc7
 8004b06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b08:	4b11      	ldr	r3, [pc, #68]	; (8004b50 <MX_TIM6_Init+0x64>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <MX_TIM6_Init+0x64>)
 8004b10:	f241 726f 	movw	r2, #5999	; 0x176f
 8004b14:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b16:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <MX_TIM6_Init+0x64>)
 8004b18:	2280      	movs	r2, #128	; 0x80
 8004b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004b1c:	480c      	ldr	r0, [pc, #48]	; (8004b50 <MX_TIM6_Init+0x64>)
 8004b1e:	f006 ff20 	bl	800b962 <HAL_TIM_Base_Init>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004b28:	f7ff f8f2 	bl	8003d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004b34:	1d3b      	adds	r3, r7, #4
 8004b36:	4619      	mov	r1, r3
 8004b38:	4805      	ldr	r0, [pc, #20]	; (8004b50 <MX_TIM6_Init+0x64>)
 8004b3a:	f008 f907 	bl	800cd4c <HAL_TIMEx_MasterConfigSynchronization>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d001      	beq.n	8004b48 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004b44:	f7ff f8e4 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	24000a30 	.word	0x24000a30
 8004b54:	40001000 	.word	0x40001000

08004b58 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b5e:	1d3b      	adds	r3, r7, #4
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004b68:	4b14      	ldr	r3, [pc, #80]	; (8004bbc <MX_TIM7_Init+0x64>)
 8004b6a:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <MX_TIM7_Init+0x68>)
 8004b6c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8004b6e:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <MX_TIM7_Init+0x64>)
 8004b70:	22c7      	movs	r2, #199	; 0xc7
 8004b72:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b74:	4b11      	ldr	r3, [pc, #68]	; (8004bbc <MX_TIM7_Init+0x64>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8004b7a:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <MX_TIM7_Init+0x64>)
 8004b7c:	f240 42af 	movw	r2, #1199	; 0x4af
 8004b80:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b82:	4b0e      	ldr	r3, [pc, #56]	; (8004bbc <MX_TIM7_Init+0x64>)
 8004b84:	2280      	movs	r2, #128	; 0x80
 8004b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004b88:	480c      	ldr	r0, [pc, #48]	; (8004bbc <MX_TIM7_Init+0x64>)
 8004b8a:	f006 feea 	bl	800b962 <HAL_TIM_Base_Init>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004b94:	f7ff f8bc 	bl	8003d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004ba0:	1d3b      	adds	r3, r7, #4
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4805      	ldr	r0, [pc, #20]	; (8004bbc <MX_TIM7_Init+0x64>)
 8004ba6:	f008 f8d1 	bl	800cd4c <HAL_TIMEx_MasterConfigSynchronization>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004bb0:	f7ff f8ae 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004bb4:	bf00      	nop
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	24000bac 	.word	0x24000bac
 8004bc0:	40001400 	.word	0x40001400

08004bc4 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004bca:	463b      	mov	r3, r7
 8004bcc:	2200      	movs	r2, #0
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	609a      	str	r2, [r3, #8]
 8004bd4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8004bd6:	4b16      	ldr	r3, [pc, #88]	; (8004c30 <MX_TIM12_Init+0x6c>)
 8004bd8:	4a16      	ldr	r2, [pc, #88]	; (8004c34 <MX_TIM12_Init+0x70>)
 8004bda:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8004bdc:	4b14      	ldr	r3, [pc, #80]	; (8004c30 <MX_TIM12_Init+0x6c>)
 8004bde:	22c7      	movs	r2, #199	; 0xc7
 8004be0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004be2:	4b13      	ldr	r3, [pc, #76]	; (8004c30 <MX_TIM12_Init+0x6c>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 8004be8:	4b11      	ldr	r3, [pc, #68]	; (8004c30 <MX_TIM12_Init+0x6c>)
 8004bea:	f240 2257 	movw	r2, #599	; 0x257
 8004bee:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004bf0:	4b0f      	ldr	r3, [pc, #60]	; (8004c30 <MX_TIM12_Init+0x6c>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004bf6:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <MX_TIM12_Init+0x6c>)
 8004bf8:	2280      	movs	r2, #128	; 0x80
 8004bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8004bfc:	480c      	ldr	r0, [pc, #48]	; (8004c30 <MX_TIM12_Init+0x6c>)
 8004bfe:	f006 feb0 	bl	800b962 <HAL_TIM_Base_Init>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8004c08:	f7ff f882 	bl	8003d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c10:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8004c12:	463b      	mov	r3, r7
 8004c14:	4619      	mov	r1, r3
 8004c16:	4806      	ldr	r0, [pc, #24]	; (8004c30 <MX_TIM12_Init+0x6c>)
 8004c18:	f007 fb44 	bl	800c2a4 <HAL_TIM_ConfigClockSource>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8004c22:	f7ff f875 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8004c26:	bf00      	nop
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	24000b60 	.word	0x24000b60
 8004c34:	40001800 	.word	0x40001800

08004c38 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004c3c:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <MX_TIM13_Init+0x40>)
 8004c3e:	4a0f      	ldr	r2, [pc, #60]	; (8004c7c <MX_TIM13_Init+0x44>)
 8004c40:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8004c42:	4b0d      	ldr	r3, [pc, #52]	; (8004c78 <MX_TIM13_Init+0x40>)
 8004c44:	22c7      	movs	r2, #199	; 0xc7
 8004c46:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c48:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <MX_TIM13_Init+0x40>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8004c4e:	4b0a      	ldr	r3, [pc, #40]	; (8004c78 <MX_TIM13_Init+0x40>)
 8004c50:	f240 2257 	movw	r2, #599	; 0x257
 8004c54:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c56:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <MX_TIM13_Init+0x40>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <MX_TIM13_Init+0x40>)
 8004c5e:	2280      	movs	r2, #128	; 0x80
 8004c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8004c62:	4805      	ldr	r0, [pc, #20]	; (8004c78 <MX_TIM13_Init+0x40>)
 8004c64:	f006 fe7d 	bl	800b962 <HAL_TIM_Base_Init>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8004c6e:	f7ff f84f 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8004c72:	bf00      	nop
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	240009e4 	.word	0x240009e4
 8004c7c:	40001c00 	.word	0x40001c00

08004c80 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004c84:	4b0e      	ldr	r3, [pc, #56]	; (8004cc0 <MX_TIM14_Init+0x40>)
 8004c86:	4a0f      	ldr	r2, [pc, #60]	; (8004cc4 <MX_TIM14_Init+0x44>)
 8004c88:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	; (8004cc0 <MX_TIM14_Init+0x40>)
 8004c8c:	22c7      	movs	r2, #199	; 0xc7
 8004c8e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c90:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <MX_TIM14_Init+0x40>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8004c96:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <MX_TIM14_Init+0x40>)
 8004c98:	f640 125f 	movw	r2, #2399	; 0x95f
 8004c9c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c9e:	4b08      	ldr	r3, [pc, #32]	; (8004cc0 <MX_TIM14_Init+0x40>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ca4:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <MX_TIM14_Init+0x40>)
 8004ca6:	2280      	movs	r2, #128	; 0x80
 8004ca8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004caa:	4805      	ldr	r0, [pc, #20]	; (8004cc0 <MX_TIM14_Init+0x40>)
 8004cac:	f006 fe59 	bl	800b962 <HAL_TIM_Base_Init>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8004cb6:	f7ff f82b 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004cba:	bf00      	nop
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	24000b14 	.word	0x24000b14
 8004cc4:	40002000 	.word	0x40002000

08004cc8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b09a      	sub	sp, #104	; 0x68
 8004ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004cce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	605a      	str	r2, [r3, #4]
 8004cd8:	609a      	str	r2, [r3, #8]
 8004cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cdc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	605a      	str	r2, [r3, #4]
 8004ce6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ce8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]
 8004cf0:	605a      	str	r2, [r3, #4]
 8004cf2:	609a      	str	r2, [r3, #8]
 8004cf4:	60da      	str	r2, [r3, #12]
 8004cf6:	611a      	str	r2, [r3, #16]
 8004cf8:	615a      	str	r2, [r3, #20]
 8004cfa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004cfc:	1d3b      	adds	r3, r7, #4
 8004cfe:	222c      	movs	r2, #44	; 0x2c
 8004d00:	2100      	movs	r1, #0
 8004d02:	4618      	mov	r0, r3
 8004d04:	f00b f9f0 	bl	80100e8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004d08:	4b3f      	ldr	r3, [pc, #252]	; (8004e08 <MX_TIM15_Init+0x140>)
 8004d0a:	4a40      	ldr	r2, [pc, #256]	; (8004e0c <MX_TIM15_Init+0x144>)
 8004d0c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8004d0e:	4b3e      	ldr	r3, [pc, #248]	; (8004e08 <MX_TIM15_Init+0x140>)
 8004d10:	22ef      	movs	r2, #239	; 0xef
 8004d12:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d14:	4b3c      	ldr	r3, [pc, #240]	; (8004e08 <MX_TIM15_Init+0x140>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8004d1a:	4b3b      	ldr	r3, [pc, #236]	; (8004e08 <MX_TIM15_Init+0x140>)
 8004d1c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004d20:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004d22:	4b39      	ldr	r3, [pc, #228]	; (8004e08 <MX_TIM15_Init+0x140>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004d28:	4b37      	ldr	r3, [pc, #220]	; (8004e08 <MX_TIM15_Init+0x140>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004d2e:	4b36      	ldr	r3, [pc, #216]	; (8004e08 <MX_TIM15_Init+0x140>)
 8004d30:	2280      	movs	r2, #128	; 0x80
 8004d32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004d34:	4834      	ldr	r0, [pc, #208]	; (8004e08 <MX_TIM15_Init+0x140>)
 8004d36:	f006 fe14 	bl	800b962 <HAL_TIM_Base_Init>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8004d40:	f7fe ffe6 	bl	8003d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d48:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004d4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004d4e:	4619      	mov	r1, r3
 8004d50:	482d      	ldr	r0, [pc, #180]	; (8004e08 <MX_TIM15_Init+0x140>)
 8004d52:	f007 faa7 	bl	800c2a4 <HAL_TIM_ConfigClockSource>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8004d5c:	f7fe ffd8 	bl	8003d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004d60:	4829      	ldr	r0, [pc, #164]	; (8004e08 <MX_TIM15_Init+0x140>)
 8004d62:	f006 fefc 	bl	800bb5e <HAL_TIM_PWM_Init>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8004d6c:	f7fe ffd0 	bl	8003d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d70:	2300      	movs	r3, #0
 8004d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d74:	2300      	movs	r3, #0
 8004d76:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004d78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4822      	ldr	r0, [pc, #136]	; (8004e08 <MX_TIM15_Init+0x140>)
 8004d80:	f007 ffe4 	bl	800cd4c <HAL_TIMEx_MasterConfigSynchronization>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8004d8a:	f7fe ffc1 	bl	8003d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004d8e:	2360      	movs	r3, #96	; 0x60
 8004d90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8004d92:	f240 1339 	movw	r3, #313	; 0x139
 8004d96:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004da0:	2300      	movs	r3, #0
 8004da2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004da4:	2300      	movs	r3, #0
 8004da6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004da8:	2300      	movs	r3, #0
 8004daa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004dac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004db0:	2204      	movs	r2, #4
 8004db2:	4619      	mov	r1, r3
 8004db4:	4814      	ldr	r0, [pc, #80]	; (8004e08 <MX_TIM15_Init+0x140>)
 8004db6:	f007 f961 	bl	800c07c <HAL_TIM_PWM_ConfigChannel>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8004dc0:	f7fe ffa6 	bl	8003d10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004dd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ddc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004de6:	1d3b      	adds	r3, r7, #4
 8004de8:	4619      	mov	r1, r3
 8004dea:	4807      	ldr	r0, [pc, #28]	; (8004e08 <MX_TIM15_Init+0x140>)
 8004dec:	f008 f83c 	bl	800ce68 <HAL_TIMEx_ConfigBreakDeadTime>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8004df6:	f7fe ff8b 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004dfa:	4803      	ldr	r0, [pc, #12]	; (8004e08 <MX_TIM15_Init+0x140>)
 8004dfc:	f000 f93c 	bl	8005078 <HAL_TIM_MspPostInit>

}
 8004e00:	bf00      	nop
 8004e02:	3768      	adds	r7, #104	; 0x68
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	24000900 	.word	0x24000900
 8004e0c:	40014000 	.word	0x40014000

08004e10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08e      	sub	sp, #56	; 0x38
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a8b      	ldr	r2, [pc, #556]	; (800504c <HAL_TIM_Base_MspInit+0x23c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d10f      	bne.n	8004e42 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e22:	4b8b      	ldr	r3, [pc, #556]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004e24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e28:	4a89      	ldr	r2, [pc, #548]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004e32:	4b87      	ldr	r3, [pc, #540]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004e34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004e40:	e100      	b.n	8005044 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM2)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e4a:	d10f      	bne.n	8004e6c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e4c:	4b80      	ldr	r3, [pc, #512]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e52:	4a7f      	ldr	r2, [pc, #508]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004e54:	f043 0301 	orr.w	r3, r3, #1
 8004e58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e5c:	4b7c      	ldr	r3, [pc, #496]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	633b      	str	r3, [r7, #48]	; 0x30
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004e6a:	e0eb      	b.n	8005044 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM3)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a78      	ldr	r2, [pc, #480]	; (8005054 <HAL_TIM_Base_MspInit+0x244>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d10f      	bne.n	8004e96 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004e76:	4b76      	ldr	r3, [pc, #472]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004e78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e7c:	4a74      	ldr	r2, [pc, #464]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004e7e:	f043 0302 	orr.w	r3, r3, #2
 8004e82:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004e86:	4b72      	ldr	r3, [pc, #456]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004e88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e8c:	f003 0302 	and.w	r3, r3, #2
 8004e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e94:	e0d6      	b.n	8005044 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM4)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a6f      	ldr	r2, [pc, #444]	; (8005058 <HAL_TIM_Base_MspInit+0x248>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d10f      	bne.n	8004ec0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ea0:	4b6b      	ldr	r3, [pc, #428]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ea6:	4a6a      	ldr	r2, [pc, #424]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004ea8:	f043 0304 	orr.w	r3, r3, #4
 8004eac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004eb0:	4b67      	ldr	r3, [pc, #412]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004eb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004eb6:	f003 0304 	and.w	r3, r3, #4
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004ebe:	e0c1      	b.n	8005044 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM5)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a65      	ldr	r2, [pc, #404]	; (800505c <HAL_TIM_Base_MspInit+0x24c>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d117      	bne.n	8004efa <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004eca:	4b61      	ldr	r3, [pc, #388]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ed0:	4a5f      	ldr	r2, [pc, #380]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004ed2:	f043 0308 	orr.w	r3, r3, #8
 8004ed6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004eda:	4b5d      	ldr	r3, [pc, #372]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004ee8:	2200      	movs	r2, #0
 8004eea:	2100      	movs	r1, #0
 8004eec:	2032      	movs	r0, #50	; 0x32
 8004eee:	f000 fe66 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004ef2:	2032      	movs	r0, #50	; 0x32
 8004ef4:	f000 fe7d 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
}
 8004ef8:	e0a4      	b.n	8005044 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM6)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a58      	ldr	r2, [pc, #352]	; (8005060 <HAL_TIM_Base_MspInit+0x250>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d117      	bne.n	8004f34 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004f04:	4b52      	ldr	r3, [pc, #328]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004f06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f0a:	4a51      	ldr	r2, [pc, #324]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004f0c:	f043 0310 	orr.w	r3, r3, #16
 8004f10:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f14:	4b4e      	ldr	r3, [pc, #312]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004f16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	623b      	str	r3, [r7, #32]
 8004f20:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004f22:	2200      	movs	r2, #0
 8004f24:	2100      	movs	r1, #0
 8004f26:	2036      	movs	r0, #54	; 0x36
 8004f28:	f000 fe49 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004f2c:	2036      	movs	r0, #54	; 0x36
 8004f2e:	f000 fe60 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
}
 8004f32:	e087      	b.n	8005044 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM7)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a4a      	ldr	r2, [pc, #296]	; (8005064 <HAL_TIM_Base_MspInit+0x254>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d117      	bne.n	8004f6e <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004f3e:	4b44      	ldr	r3, [pc, #272]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f44:	4a42      	ldr	r2, [pc, #264]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004f46:	f043 0320 	orr.w	r3, r3, #32
 8004f4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f4e:	4b40      	ldr	r3, [pc, #256]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2100      	movs	r1, #0
 8004f60:	2037      	movs	r0, #55	; 0x37
 8004f62:	f000 fe2c 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004f66:	2037      	movs	r0, #55	; 0x37
 8004f68:	f000 fe43 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
}
 8004f6c:	e06a      	b.n	8005044 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM12)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a3d      	ldr	r2, [pc, #244]	; (8005068 <HAL_TIM_Base_MspInit+0x258>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d117      	bne.n	8004fa8 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004f78:	4b35      	ldr	r3, [pc, #212]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f7e:	4a34      	ldr	r2, [pc, #208]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004f88:	4b31      	ldr	r3, [pc, #196]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004f8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f92:	61bb      	str	r3, [r7, #24]
 8004f94:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004f96:	2200      	movs	r2, #0
 8004f98:	2100      	movs	r1, #0
 8004f9a:	202b      	movs	r0, #43	; 0x2b
 8004f9c:	f000 fe0f 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004fa0:	202b      	movs	r0, #43	; 0x2b
 8004fa2:	f000 fe26 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
}
 8004fa6:	e04d      	b.n	8005044 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM13)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a2f      	ldr	r2, [pc, #188]	; (800506c <HAL_TIM_Base_MspInit+0x25c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d117      	bne.n	8004fe2 <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004fb2:	4b27      	ldr	r3, [pc, #156]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fb8:	4a25      	ldr	r2, [pc, #148]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004fc2:	4b23      	ldr	r3, [pc, #140]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004fc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fcc:	617b      	str	r3, [r7, #20]
 8004fce:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	202c      	movs	r0, #44	; 0x2c
 8004fd6:	f000 fdf2 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004fda:	202c      	movs	r0, #44	; 0x2c
 8004fdc:	f000 fe09 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
}
 8004fe0:	e030      	b.n	8005044 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM14)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a22      	ldr	r2, [pc, #136]	; (8005070 <HAL_TIM_Base_MspInit+0x260>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d117      	bne.n	800501c <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004fec:	4b18      	ldr	r3, [pc, #96]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ff2:	4a17      	ldr	r2, [pc, #92]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004ffc:	4b14      	ldr	r3, [pc, #80]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8004ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800500a:	2200      	movs	r2, #0
 800500c:	2100      	movs	r1, #0
 800500e:	202d      	movs	r0, #45	; 0x2d
 8005010:	f000 fdd5 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005014:	202d      	movs	r0, #45	; 0x2d
 8005016:	f000 fdec 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
}
 800501a:	e013      	b.n	8005044 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM15)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a14      	ldr	r2, [pc, #80]	; (8005074 <HAL_TIM_Base_MspInit+0x264>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d10e      	bne.n	8005044 <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005026:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8005028:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800502c:	4a08      	ldr	r2, [pc, #32]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 800502e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005032:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005036:	4b06      	ldr	r3, [pc, #24]	; (8005050 <HAL_TIM_Base_MspInit+0x240>)
 8005038:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800503c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	68fb      	ldr	r3, [r7, #12]
}
 8005044:	bf00      	nop
 8005046:	3738      	adds	r7, #56	; 0x38
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40010000 	.word	0x40010000
 8005050:	58024400 	.word	0x58024400
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40000c00 	.word	0x40000c00
 8005060:	40001000 	.word	0x40001000
 8005064:	40001400 	.word	0x40001400
 8005068:	40001800 	.word	0x40001800
 800506c:	40001c00 	.word	0x40001c00
 8005070:	40002000 	.word	0x40002000
 8005074:	40014000 	.word	0x40014000

08005078 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b08c      	sub	sp, #48	; 0x30
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005080:	f107 031c 	add.w	r3, r7, #28
 8005084:	2200      	movs	r2, #0
 8005086:	601a      	str	r2, [r3, #0]
 8005088:	605a      	str	r2, [r3, #4]
 800508a:	609a      	str	r2, [r3, #8]
 800508c:	60da      	str	r2, [r3, #12]
 800508e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a5e      	ldr	r2, [pc, #376]	; (8005210 <HAL_TIM_MspPostInit+0x198>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d120      	bne.n	80050dc <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800509a:	4b5e      	ldr	r3, [pc, #376]	; (8005214 <HAL_TIM_MspPostInit+0x19c>)
 800509c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050a0:	4a5c      	ldr	r2, [pc, #368]	; (8005214 <HAL_TIM_MspPostInit+0x19c>)
 80050a2:	f043 0310 	orr.w	r3, r3, #16
 80050a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050aa:	4b5a      	ldr	r3, [pc, #360]	; (8005214 <HAL_TIM_MspPostInit+0x19c>)
 80050ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 80050b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050be:	2302      	movs	r3, #2
 80050c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050c6:	2300      	movs	r3, #0
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80050ca:	2301      	movs	r3, #1
 80050cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 80050ce:	f107 031c 	add.w	r3, r7, #28
 80050d2:	4619      	mov	r1, r3
 80050d4:	4850      	ldr	r0, [pc, #320]	; (8005218 <HAL_TIM_MspPostInit+0x1a0>)
 80050d6:	f003 fdeb 	bl	8008cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80050da:	e094      	b.n	8005206 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e4:	d120      	bne.n	8005128 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050e6:	4b4b      	ldr	r3, [pc, #300]	; (8005214 <HAL_TIM_MspPostInit+0x19c>)
 80050e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050ec:	4a49      	ldr	r2, [pc, #292]	; (8005214 <HAL_TIM_MspPostInit+0x19c>)
 80050ee:	f043 0302 	orr.w	r3, r3, #2
 80050f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80050f6:	4b47      	ldr	r3, [pc, #284]	; (8005214 <HAL_TIM_MspPostInit+0x19c>)
 80050f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8005104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800510a:	2302      	movs	r3, #2
 800510c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800510e:	2300      	movs	r3, #0
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005112:	2300      	movs	r3, #0
 8005114:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005116:	2301      	movs	r3, #1
 8005118:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 800511a:	f107 031c 	add.w	r3, r7, #28
 800511e:	4619      	mov	r1, r3
 8005120:	483e      	ldr	r0, [pc, #248]	; (800521c <HAL_TIM_MspPostInit+0x1a4>)
 8005122:	f003 fdc5 	bl	8008cb0 <HAL_GPIO_Init>
}
 8005126:	e06e      	b.n	8005206 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a3c      	ldr	r2, [pc, #240]	; (8005220 <HAL_TIM_MspPostInit+0x1a8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d11f      	bne.n	8005172 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005132:	4b38      	ldr	r3, [pc, #224]	; (8005214 <HAL_TIM_MspPostInit+0x19c>)
 8005134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005138:	4a36      	ldr	r2, [pc, #216]	; (8005214 <HAL_TIM_MspPostInit+0x19c>)
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005142:	4b34      	ldr	r3, [pc, #208]	; (8005214 <HAL_TIM_MspPostInit+0x19c>)
 8005144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	613b      	str	r3, [r7, #16]
 800514e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8005150:	2340      	movs	r3, #64	; 0x40
 8005152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005154:	2302      	movs	r3, #2
 8005156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005158:	2300      	movs	r3, #0
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800515c:	2300      	movs	r3, #0
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005160:	2302      	movs	r3, #2
 8005162:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8005164:	f107 031c 	add.w	r3, r7, #28
 8005168:	4619      	mov	r1, r3
 800516a:	482e      	ldr	r0, [pc, #184]	; (8005224 <HAL_TIM_MspPostInit+0x1ac>)
 800516c:	f003 fda0 	bl	8008cb0 <HAL_GPIO_Init>
}
 8005170:	e049      	b.n	8005206 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a2c      	ldr	r2, [pc, #176]	; (8005228 <HAL_TIM_MspPostInit+0x1b0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d120      	bne.n	80051be <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800517c:	4b25      	ldr	r3, [pc, #148]	; (8005214 <HAL_TIM_MspPostInit+0x19c>)
 800517e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005182:	4a24      	ldr	r2, [pc, #144]	; (8005214 <HAL_TIM_MspPostInit+0x19c>)
 8005184:	f043 0302 	orr.w	r3, r3, #2
 8005188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800518c:	4b21      	ldr	r3, [pc, #132]	; (8005214 <HAL_TIM_MspPostInit+0x19c>)
 800518e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 800519a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800519e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051a0:	2302      	movs	r3, #2
 80051a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051a8:	2300      	movs	r3, #0
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80051ac:	2302      	movs	r3, #2
 80051ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 80051b0:	f107 031c 	add.w	r3, r7, #28
 80051b4:	4619      	mov	r1, r3
 80051b6:	4819      	ldr	r0, [pc, #100]	; (800521c <HAL_TIM_MspPostInit+0x1a4>)
 80051b8:	f003 fd7a 	bl	8008cb0 <HAL_GPIO_Init>
}
 80051bc:	e023      	b.n	8005206 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a1a      	ldr	r2, [pc, #104]	; (800522c <HAL_TIM_MspPostInit+0x1b4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d11e      	bne.n	8005206 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80051c8:	4b12      	ldr	r3, [pc, #72]	; (8005214 <HAL_TIM_MspPostInit+0x19c>)
 80051ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051ce:	4a11      	ldr	r2, [pc, #68]	; (8005214 <HAL_TIM_MspPostInit+0x19c>)
 80051d0:	f043 0310 	orr.w	r3, r3, #16
 80051d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80051d8:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <HAL_TIM_MspPostInit+0x19c>)
 80051da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80051de:	f003 0310 	and.w	r3, r3, #16
 80051e2:	60bb      	str	r3, [r7, #8]
 80051e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 80051e6:	2340      	movs	r3, #64	; 0x40
 80051e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ea:	2302      	movs	r3, #2
 80051ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051f2:	2300      	movs	r3, #0
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80051f6:	2304      	movs	r3, #4
 80051f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 80051fa:	f107 031c 	add.w	r3, r7, #28
 80051fe:	4619      	mov	r1, r3
 8005200:	4805      	ldr	r0, [pc, #20]	; (8005218 <HAL_TIM_MspPostInit+0x1a0>)
 8005202:	f003 fd55 	bl	8008cb0 <HAL_GPIO_Init>
}
 8005206:	bf00      	nop
 8005208:	3730      	adds	r7, #48	; 0x30
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40010000 	.word	0x40010000
 8005214:	58024400 	.word	0x58024400
 8005218:	58021000 	.word	0x58021000
 800521c:	58020400 	.word	0x58020400
 8005220:	40000400 	.word	0x40000400
 8005224:	58020000 	.word	0x58020000
 8005228:	40000800 	.word	0x40000800
 800522c:	40014000 	.word	0x40014000

08005230 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8005234:	4b25      	ldr	r3, [pc, #148]	; (80052cc <MX_UART4_Init+0x9c>)
 8005236:	4a26      	ldr	r2, [pc, #152]	; (80052d0 <MX_UART4_Init+0xa0>)
 8005238:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 800523a:	4b24      	ldr	r3, [pc, #144]	; (80052cc <MX_UART4_Init+0x9c>)
 800523c:	4a25      	ldr	r2, [pc, #148]	; (80052d4 <MX_UART4_Init+0xa4>)
 800523e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005240:	4b22      	ldr	r3, [pc, #136]	; (80052cc <MX_UART4_Init+0x9c>)
 8005242:	2200      	movs	r2, #0
 8005244:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005246:	4b21      	ldr	r3, [pc, #132]	; (80052cc <MX_UART4_Init+0x9c>)
 8005248:	2200      	movs	r2, #0
 800524a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800524c:	4b1f      	ldr	r3, [pc, #124]	; (80052cc <MX_UART4_Init+0x9c>)
 800524e:	2200      	movs	r2, #0
 8005250:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005252:	4b1e      	ldr	r3, [pc, #120]	; (80052cc <MX_UART4_Init+0x9c>)
 8005254:	220c      	movs	r2, #12
 8005256:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005258:	4b1c      	ldr	r3, [pc, #112]	; (80052cc <MX_UART4_Init+0x9c>)
 800525a:	2200      	movs	r2, #0
 800525c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800525e:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <MX_UART4_Init+0x9c>)
 8005260:	2200      	movs	r2, #0
 8005262:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005264:	4b19      	ldr	r3, [pc, #100]	; (80052cc <MX_UART4_Init+0x9c>)
 8005266:	2200      	movs	r2, #0
 8005268:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800526a:	4b18      	ldr	r3, [pc, #96]	; (80052cc <MX_UART4_Init+0x9c>)
 800526c:	2200      	movs	r2, #0
 800526e:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8005270:	4b16      	ldr	r3, [pc, #88]	; (80052cc <MX_UART4_Init+0x9c>)
 8005272:	2208      	movs	r2, #8
 8005274:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8005276:	4b15      	ldr	r3, [pc, #84]	; (80052cc <MX_UART4_Init+0x9c>)
 8005278:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800527e:	4813      	ldr	r0, [pc, #76]	; (80052cc <MX_UART4_Init+0x9c>)
 8005280:	f007 fe8e 	bl	800cfa0 <HAL_UART_Init>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 800528a:	f7fe fd41 	bl	8003d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800528e:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005292:	480e      	ldr	r0, [pc, #56]	; (80052cc <MX_UART4_Init+0x9c>)
 8005294:	f009 ff15 	bl	800f0c2 <HAL_UARTEx_SetTxFifoThreshold>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 800529e:	f7fe fd37 	bl	8003d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 80052a2:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 80052a6:	4809      	ldr	r0, [pc, #36]	; (80052cc <MX_UART4_Init+0x9c>)
 80052a8:	f009 ff49 	bl	800f13e <HAL_UARTEx_SetRxFifoThreshold>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 80052b2:	f7fe fd2d 	bl	8003d10 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80052b6:	4805      	ldr	r0, [pc, #20]	; (80052cc <MX_UART4_Init+0x9c>)
 80052b8:	f009 fe8f 	bl	800efda <HAL_UARTEx_EnableFifoMode>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 80052c2:	f7fe fd25 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80052c6:	bf00      	nop
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	24000ef8 	.word	0x24000ef8
 80052d0:	40004c00 	.word	0x40004c00
 80052d4:	001e8480 	.word	0x001e8480

080052d8 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80052dc:	4b23      	ldr	r3, [pc, #140]	; (800536c <MX_UART7_Init+0x94>)
 80052de:	4a24      	ldr	r2, [pc, #144]	; (8005370 <MX_UART7_Init+0x98>)
 80052e0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80052e2:	4b22      	ldr	r3, [pc, #136]	; (800536c <MX_UART7_Init+0x94>)
 80052e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80052e8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80052ea:	4b20      	ldr	r3, [pc, #128]	; (800536c <MX_UART7_Init+0x94>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80052f0:	4b1e      	ldr	r3, [pc, #120]	; (800536c <MX_UART7_Init+0x94>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80052f6:	4b1d      	ldr	r3, [pc, #116]	; (800536c <MX_UART7_Init+0x94>)
 80052f8:	2200      	movs	r2, #0
 80052fa:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80052fc:	4b1b      	ldr	r3, [pc, #108]	; (800536c <MX_UART7_Init+0x94>)
 80052fe:	220c      	movs	r2, #12
 8005300:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005302:	4b1a      	ldr	r3, [pc, #104]	; (800536c <MX_UART7_Init+0x94>)
 8005304:	2200      	movs	r2, #0
 8005306:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8005308:	4b18      	ldr	r3, [pc, #96]	; (800536c <MX_UART7_Init+0x94>)
 800530a:	2200      	movs	r2, #0
 800530c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800530e:	4b17      	ldr	r3, [pc, #92]	; (800536c <MX_UART7_Init+0x94>)
 8005310:	2200      	movs	r2, #0
 8005312:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005314:	4b15      	ldr	r3, [pc, #84]	; (800536c <MX_UART7_Init+0x94>)
 8005316:	2200      	movs	r2, #0
 8005318:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800531a:	4b14      	ldr	r3, [pc, #80]	; (800536c <MX_UART7_Init+0x94>)
 800531c:	2200      	movs	r2, #0
 800531e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8005320:	4812      	ldr	r0, [pc, #72]	; (800536c <MX_UART7_Init+0x94>)
 8005322:	f007 fe3d 	bl	800cfa0 <HAL_UART_Init>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 800532c:	f7fe fcf0 	bl	8003d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005330:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005334:	480d      	ldr	r0, [pc, #52]	; (800536c <MX_UART7_Init+0x94>)
 8005336:	f009 fec4 	bl	800f0c2 <HAL_UARTEx_SetTxFifoThreshold>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d001      	beq.n	8005344 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8005340:	f7fe fce6 	bl	8003d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005344:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8005348:	4808      	ldr	r0, [pc, #32]	; (800536c <MX_UART7_Init+0x94>)
 800534a:	f009 fef8 	bl	800f13e <HAL_UARTEx_SetRxFifoThreshold>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8005354:	f7fe fcdc 	bl	8003d10 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8005358:	4804      	ldr	r0, [pc, #16]	; (800536c <MX_UART7_Init+0x94>)
 800535a:	f009 fe3e 	bl	800efda <HAL_UARTEx_EnableFifoMode>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8005364:	f7fe fcd4 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8005368:	bf00      	nop
 800536a:	bd80      	pop	{r7, pc}
 800536c:	24000c70 	.word	0x24000c70
 8005370:	40007800 	.word	0x40007800

08005374 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005378:	4b22      	ldr	r3, [pc, #136]	; (8005404 <MX_USART3_UART_Init+0x90>)
 800537a:	4a23      	ldr	r2, [pc, #140]	; (8005408 <MX_USART3_UART_Init+0x94>)
 800537c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800537e:	4b21      	ldr	r3, [pc, #132]	; (8005404 <MX_USART3_UART_Init+0x90>)
 8005380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005384:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005386:	4b1f      	ldr	r3, [pc, #124]	; (8005404 <MX_USART3_UART_Init+0x90>)
 8005388:	2200      	movs	r2, #0
 800538a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800538c:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <MX_USART3_UART_Init+0x90>)
 800538e:	2200      	movs	r2, #0
 8005390:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005392:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <MX_USART3_UART_Init+0x90>)
 8005394:	2200      	movs	r2, #0
 8005396:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005398:	4b1a      	ldr	r3, [pc, #104]	; (8005404 <MX_USART3_UART_Init+0x90>)
 800539a:	220c      	movs	r2, #12
 800539c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800539e:	4b19      	ldr	r3, [pc, #100]	; (8005404 <MX_USART3_UART_Init+0x90>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80053a4:	4b17      	ldr	r3, [pc, #92]	; (8005404 <MX_USART3_UART_Init+0x90>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80053aa:	4b16      	ldr	r3, [pc, #88]	; (8005404 <MX_USART3_UART_Init+0x90>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80053b0:	4b14      	ldr	r3, [pc, #80]	; (8005404 <MX_USART3_UART_Init+0x90>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80053b6:	4b13      	ldr	r3, [pc, #76]	; (8005404 <MX_USART3_UART_Init+0x90>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80053bc:	4811      	ldr	r0, [pc, #68]	; (8005404 <MX_USART3_UART_Init+0x90>)
 80053be:	f007 fdef 	bl	800cfa0 <HAL_UART_Init>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80053c8:	f7fe fca2 	bl	8003d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053cc:	2100      	movs	r1, #0
 80053ce:	480d      	ldr	r0, [pc, #52]	; (8005404 <MX_USART3_UART_Init+0x90>)
 80053d0:	f009 fe77 	bl	800f0c2 <HAL_UARTEx_SetTxFifoThreshold>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80053da:	f7fe fc99 	bl	8003d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80053de:	2100      	movs	r1, #0
 80053e0:	4808      	ldr	r0, [pc, #32]	; (8005404 <MX_USART3_UART_Init+0x90>)
 80053e2:	f009 feac 	bl	800f13e <HAL_UARTEx_SetRxFifoThreshold>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80053ec:	f7fe fc90 	bl	8003d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80053f0:	4804      	ldr	r0, [pc, #16]	; (8005404 <MX_USART3_UART_Init+0x90>)
 80053f2:	f009 fe2d 	bl	800f050 <HAL_UARTEx_DisableFifoMode>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80053fc:	f7fe fc88 	bl	8003d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005400:	bf00      	nop
 8005402:	bd80      	pop	{r7, pc}
 8005404:	24000d78 	.word	0x24000d78
 8005408:	40004800 	.word	0x40004800

0800540c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b0bc      	sub	sp, #240	; 0xf0
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005414:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	605a      	str	r2, [r3, #4]
 800541e:	609a      	str	r2, [r3, #8]
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005424:	f107 0320 	add.w	r3, r7, #32
 8005428:	22bc      	movs	r2, #188	; 0xbc
 800542a:	2100      	movs	r1, #0
 800542c:	4618      	mov	r0, r3
 800542e:	f00a fe5b 	bl	80100e8 <memset>
  if(uartHandle->Instance==UART4)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4aa1      	ldr	r2, [pc, #644]	; (80056bc <HAL_UART_MspInit+0x2b0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	f040 80b7 	bne.w	80055ac <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800543e:	2302      	movs	r3, #2
 8005440:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005442:	2300      	movs	r3, #0
 8005444:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005448:	f107 0320 	add.w	r3, r7, #32
 800544c:	4618      	mov	r0, r3
 800544e:	f004 fe05 	bl	800a05c <HAL_RCCEx_PeriphCLKConfig>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005458:	f7fe fc5a 	bl	8003d10 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800545c:	4b98      	ldr	r3, [pc, #608]	; (80056c0 <HAL_UART_MspInit+0x2b4>)
 800545e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005462:	4a97      	ldr	r2, [pc, #604]	; (80056c0 <HAL_UART_MspInit+0x2b4>)
 8005464:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005468:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800546c:	4b94      	ldr	r3, [pc, #592]	; (80056c0 <HAL_UART_MspInit+0x2b4>)
 800546e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005472:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005476:	61fb      	str	r3, [r7, #28]
 8005478:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800547a:	4b91      	ldr	r3, [pc, #580]	; (80056c0 <HAL_UART_MspInit+0x2b4>)
 800547c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005480:	4a8f      	ldr	r2, [pc, #572]	; (80056c0 <HAL_UART_MspInit+0x2b4>)
 8005482:	f043 0308 	orr.w	r3, r3, #8
 8005486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800548a:	4b8d      	ldr	r3, [pc, #564]	; (80056c0 <HAL_UART_MspInit+0x2b4>)
 800548c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	61bb      	str	r3, [r7, #24]
 8005496:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005498:	2303      	movs	r3, #3
 800549a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800549e:	2302      	movs	r3, #2
 80054a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054aa:	2300      	movs	r3, #0
 80054ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80054b0:	2308      	movs	r3, #8
 80054b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80054ba:	4619      	mov	r1, r3
 80054bc:	4881      	ldr	r0, [pc, #516]	; (80056c4 <HAL_UART_MspInit+0x2b8>)
 80054be:	f003 fbf7 	bl	8008cb0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80054c2:	4b81      	ldr	r3, [pc, #516]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 80054c4:	4a81      	ldr	r2, [pc, #516]	; (80056cc <HAL_UART_MspInit+0x2c0>)
 80054c6:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80054c8:	4b7f      	ldr	r3, [pc, #508]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 80054ca:	223f      	movs	r2, #63	; 0x3f
 80054cc:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054ce:	4b7e      	ldr	r3, [pc, #504]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054d4:	4b7c      	ldr	r3, [pc, #496]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80054da:	4b7b      	ldr	r3, [pc, #492]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 80054dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054e0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054e2:	4b79      	ldr	r3, [pc, #484]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054e8:	4b77      	ldr	r3, [pc, #476]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80054ee:	4b76      	ldr	r3, [pc, #472]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80054f4:	4b74      	ldr	r3, [pc, #464]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 80054f6:	2200      	movs	r2, #0
 80054f8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80054fa:	4b73      	ldr	r3, [pc, #460]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 80054fc:	2204      	movs	r2, #4
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005500:	4b71      	ldr	r3, [pc, #452]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 8005502:	2203      	movs	r2, #3
 8005504:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005506:	4b70      	ldr	r3, [pc, #448]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 8005508:	2200      	movs	r2, #0
 800550a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800550c:	4b6e      	ldr	r3, [pc, #440]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 800550e:	2200      	movs	r2, #0
 8005510:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005512:	486d      	ldr	r0, [pc, #436]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 8005514:	f000 fd92 	bl	800603c <HAL_DMA_Init>
 8005518:	4603      	mov	r3, r0
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800551e:	f7fe fbf7 	bl	8003d10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a68      	ldr	r2, [pc, #416]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 8005526:	67da      	str	r2, [r3, #124]	; 0x7c
 8005528:	4a67      	ldr	r2, [pc, #412]	; (80056c8 <HAL_UART_MspInit+0x2bc>)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800552e:	4b68      	ldr	r3, [pc, #416]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 8005530:	4a68      	ldr	r2, [pc, #416]	; (80056d4 <HAL_UART_MspInit+0x2c8>)
 8005532:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8005534:	4b66      	ldr	r3, [pc, #408]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 8005536:	2240      	movs	r2, #64	; 0x40
 8005538:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800553a:	4b65      	ldr	r3, [pc, #404]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 800553c:	2240      	movs	r2, #64	; 0x40
 800553e:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005540:	4b63      	ldr	r3, [pc, #396]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 8005542:	2200      	movs	r2, #0
 8005544:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005546:	4b62      	ldr	r3, [pc, #392]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 8005548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800554c:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800554e:	4b60      	ldr	r3, [pc, #384]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 8005550:	2200      	movs	r2, #0
 8005552:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005554:	4b5e      	ldr	r3, [pc, #376]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 8005556:	2200      	movs	r2, #0
 8005558:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800555a:	4b5d      	ldr	r3, [pc, #372]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 800555c:	2200      	movs	r2, #0
 800555e:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005560:	4b5b      	ldr	r3, [pc, #364]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 8005562:	2200      	movs	r2, #0
 8005564:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005566:	4b5a      	ldr	r3, [pc, #360]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 8005568:	2204      	movs	r2, #4
 800556a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800556c:	4b58      	ldr	r3, [pc, #352]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 800556e:	2203      	movs	r2, #3
 8005570:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005572:	4b57      	ldr	r3, [pc, #348]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 8005574:	2200      	movs	r2, #0
 8005576:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005578:	4b55      	ldr	r3, [pc, #340]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 800557a:	2200      	movs	r2, #0
 800557c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800557e:	4854      	ldr	r0, [pc, #336]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 8005580:	f000 fd5c 	bl	800603c <HAL_DMA_Init>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 800558a:	f7fe fbc1 	bl	8003d10 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a4f      	ldr	r2, [pc, #316]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 8005592:	679a      	str	r2, [r3, #120]	; 0x78
 8005594:	4a4e      	ldr	r2, [pc, #312]	; (80056d0 <HAL_UART_MspInit+0x2c4>)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800559a:	2200      	movs	r2, #0
 800559c:	2100      	movs	r1, #0
 800559e:	2034      	movs	r0, #52	; 0x34
 80055a0:	f000 fb0d 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80055a4:	2034      	movs	r0, #52	; 0x34
 80055a6:	f000 fb24 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80055aa:	e153      	b.n	8005854 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART7)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a49      	ldr	r2, [pc, #292]	; (80056d8 <HAL_UART_MspInit+0x2cc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	f040 8098 	bne.w	80056e8 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80055b8:	2302      	movs	r3, #2
 80055ba:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80055bc:	2300      	movs	r3, #0
 80055be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80055c2:	f107 0320 	add.w	r3, r7, #32
 80055c6:	4618      	mov	r0, r3
 80055c8:	f004 fd48 	bl	800a05c <HAL_RCCEx_PeriphCLKConfig>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80055d2:	f7fe fb9d 	bl	8003d10 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80055d6:	4b3a      	ldr	r3, [pc, #232]	; (80056c0 <HAL_UART_MspInit+0x2b4>)
 80055d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055dc:	4a38      	ldr	r2, [pc, #224]	; (80056c0 <HAL_UART_MspInit+0x2b4>)
 80055de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80055e6:	4b36      	ldr	r3, [pc, #216]	; (80056c0 <HAL_UART_MspInit+0x2b4>)
 80055e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055f0:	617b      	str	r3, [r7, #20]
 80055f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80055f4:	4b32      	ldr	r3, [pc, #200]	; (80056c0 <HAL_UART_MspInit+0x2b4>)
 80055f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055fa:	4a31      	ldr	r2, [pc, #196]	; (80056c0 <HAL_UART_MspInit+0x2b4>)
 80055fc:	f043 0310 	orr.w	r3, r3, #16
 8005600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005604:	4b2e      	ldr	r3, [pc, #184]	; (80056c0 <HAL_UART_MspInit+0x2b4>)
 8005606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800560a:	f003 0310 	and.w	r3, r3, #16
 800560e:	613b      	str	r3, [r7, #16]
 8005610:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8005612:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005616:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800561a:	2302      	movs	r3, #2
 800561c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005620:	2300      	movs	r3, #0
 8005622:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005626:	2300      	movs	r3, #0
 8005628:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800562c:	2307      	movs	r3, #7
 800562e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005632:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005636:	4619      	mov	r1, r3
 8005638:	4828      	ldr	r0, [pc, #160]	; (80056dc <HAL_UART_MspInit+0x2d0>)
 800563a:	f003 fb39 	bl	8008cb0 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 800563e:	4b28      	ldr	r3, [pc, #160]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 8005640:	4a28      	ldr	r2, [pc, #160]	; (80056e4 <HAL_UART_MspInit+0x2d8>)
 8005642:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8005644:	4b26      	ldr	r3, [pc, #152]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 8005646:	2250      	movs	r2, #80	; 0x50
 8005648:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800564a:	4b25      	ldr	r3, [pc, #148]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 800564c:	2240      	movs	r2, #64	; 0x40
 800564e:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005650:	4b23      	ldr	r3, [pc, #140]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 8005652:	2200      	movs	r2, #0
 8005654:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005656:	4b22      	ldr	r3, [pc, #136]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 8005658:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800565c:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800565e:	4b20      	ldr	r3, [pc, #128]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 8005660:	2200      	movs	r2, #0
 8005662:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005664:	4b1e      	ldr	r3, [pc, #120]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 8005666:	2200      	movs	r2, #0
 8005668:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800566a:	4b1d      	ldr	r3, [pc, #116]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 800566c:	2200      	movs	r2, #0
 800566e:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005670:	4b1b      	ldr	r3, [pc, #108]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 8005672:	2200      	movs	r2, #0
 8005674:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005676:	4b1a      	ldr	r3, [pc, #104]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 8005678:	2204      	movs	r2, #4
 800567a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800567c:	4b18      	ldr	r3, [pc, #96]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 800567e:	2203      	movs	r2, #3
 8005680:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8005682:	4b17      	ldr	r3, [pc, #92]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 8005684:	2200      	movs	r2, #0
 8005686:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005688:	4b15      	ldr	r3, [pc, #84]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 800568a:	2200      	movs	r2, #0
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800568e:	4814      	ldr	r0, [pc, #80]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 8005690:	f000 fcd4 	bl	800603c <HAL_DMA_Init>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <HAL_UART_MspInit+0x292>
      Error_Handler();
 800569a:	f7fe fb39 	bl	8003d10 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a0f      	ldr	r2, [pc, #60]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 80056a2:	679a      	str	r2, [r3, #120]	; 0x78
 80056a4:	4a0e      	ldr	r2, [pc, #56]	; (80056e0 <HAL_UART_MspInit+0x2d4>)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 80056aa:	2200      	movs	r2, #0
 80056ac:	2100      	movs	r1, #0
 80056ae:	2052      	movs	r0, #82	; 0x52
 80056b0:	f000 fa85 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80056b4:	2052      	movs	r0, #82	; 0x52
 80056b6:	f000 fa9c 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
}
 80056ba:	e0cb      	b.n	8005854 <HAL_UART_MspInit+0x448>
 80056bc:	40004c00 	.word	0x40004c00
 80056c0:	58024400 	.word	0x58024400
 80056c4:	58020c00 	.word	0x58020c00
 80056c8:	24000bf8 	.word	0x24000bf8
 80056cc:	40020058 	.word	0x40020058
 80056d0:	24000f88 	.word	0x24000f88
 80056d4:	40020070 	.word	0x40020070
 80056d8:	40007800 	.word	0x40007800
 80056dc:	58021000 	.word	0x58021000
 80056e0:	24000e80 	.word	0x24000e80
 80056e4:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a5b      	ldr	r2, [pc, #364]	; (800585c <HAL_UART_MspInit+0x450>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	f040 80b0 	bne.w	8005854 <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80056f4:	2302      	movs	r3, #2
 80056f6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80056f8:	2300      	movs	r3, #0
 80056fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80056fe:	f107 0320 	add.w	r3, r7, #32
 8005702:	4618      	mov	r0, r3
 8005704:	f004 fcaa 	bl	800a05c <HAL_RCCEx_PeriphCLKConfig>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_UART_MspInit+0x306>
      Error_Handler();
 800570e:	f7fe faff 	bl	8003d10 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005712:	4b53      	ldr	r3, [pc, #332]	; (8005860 <HAL_UART_MspInit+0x454>)
 8005714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005718:	4a51      	ldr	r2, [pc, #324]	; (8005860 <HAL_UART_MspInit+0x454>)
 800571a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800571e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005722:	4b4f      	ldr	r3, [pc, #316]	; (8005860 <HAL_UART_MspInit+0x454>)
 8005724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005730:	4b4b      	ldr	r3, [pc, #300]	; (8005860 <HAL_UART_MspInit+0x454>)
 8005732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005736:	4a4a      	ldr	r2, [pc, #296]	; (8005860 <HAL_UART_MspInit+0x454>)
 8005738:	f043 0308 	orr.w	r3, r3, #8
 800573c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005740:	4b47      	ldr	r3, [pc, #284]	; (8005860 <HAL_UART_MspInit+0x454>)
 8005742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005746:	f003 0308 	and.w	r3, r3, #8
 800574a:	60bb      	str	r3, [r7, #8]
 800574c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800574e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005752:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005756:	2302      	movs	r3, #2
 8005758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575c:	2300      	movs	r3, #0
 800575e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005762:	2300      	movs	r3, #0
 8005764:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005768:	2307      	movs	r3, #7
 800576a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800576e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005772:	4619      	mov	r1, r3
 8005774:	483b      	ldr	r0, [pc, #236]	; (8005864 <HAL_UART_MspInit+0x458>)
 8005776:	f003 fa9b 	bl	8008cb0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800577a:	4b3b      	ldr	r3, [pc, #236]	; (8005868 <HAL_UART_MspInit+0x45c>)
 800577c:	4a3b      	ldr	r2, [pc, #236]	; (800586c <HAL_UART_MspInit+0x460>)
 800577e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005780:	4b39      	ldr	r3, [pc, #228]	; (8005868 <HAL_UART_MspInit+0x45c>)
 8005782:	222d      	movs	r2, #45	; 0x2d
 8005784:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005786:	4b38      	ldr	r3, [pc, #224]	; (8005868 <HAL_UART_MspInit+0x45c>)
 8005788:	2200      	movs	r2, #0
 800578a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800578c:	4b36      	ldr	r3, [pc, #216]	; (8005868 <HAL_UART_MspInit+0x45c>)
 800578e:	2200      	movs	r2, #0
 8005790:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005792:	4b35      	ldr	r3, [pc, #212]	; (8005868 <HAL_UART_MspInit+0x45c>)
 8005794:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005798:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800579a:	4b33      	ldr	r3, [pc, #204]	; (8005868 <HAL_UART_MspInit+0x45c>)
 800579c:	2200      	movs	r2, #0
 800579e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057a0:	4b31      	ldr	r3, [pc, #196]	; (8005868 <HAL_UART_MspInit+0x45c>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80057a6:	4b30      	ldr	r3, [pc, #192]	; (8005868 <HAL_UART_MspInit+0x45c>)
 80057a8:	2200      	movs	r2, #0
 80057aa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80057ac:	4b2e      	ldr	r3, [pc, #184]	; (8005868 <HAL_UART_MspInit+0x45c>)
 80057ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80057b2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80057b4:	4b2c      	ldr	r3, [pc, #176]	; (8005868 <HAL_UART_MspInit+0x45c>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80057ba:	482b      	ldr	r0, [pc, #172]	; (8005868 <HAL_UART_MspInit+0x45c>)
 80057bc:	f000 fc3e 	bl	800603c <HAL_DMA_Init>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_UART_MspInit+0x3be>
      Error_Handler();
 80057c6:	f7fe faa3 	bl	8003d10 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a26      	ldr	r2, [pc, #152]	; (8005868 <HAL_UART_MspInit+0x45c>)
 80057ce:	67da      	str	r2, [r3, #124]	; 0x7c
 80057d0:	4a25      	ldr	r2, [pc, #148]	; (8005868 <HAL_UART_MspInit+0x45c>)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80057d6:	4b26      	ldr	r3, [pc, #152]	; (8005870 <HAL_UART_MspInit+0x464>)
 80057d8:	4a26      	ldr	r2, [pc, #152]	; (8005874 <HAL_UART_MspInit+0x468>)
 80057da:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80057dc:	4b24      	ldr	r3, [pc, #144]	; (8005870 <HAL_UART_MspInit+0x464>)
 80057de:	222e      	movs	r2, #46	; 0x2e
 80057e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80057e2:	4b23      	ldr	r3, [pc, #140]	; (8005870 <HAL_UART_MspInit+0x464>)
 80057e4:	2240      	movs	r2, #64	; 0x40
 80057e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057e8:	4b21      	ldr	r3, [pc, #132]	; (8005870 <HAL_UART_MspInit+0x464>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80057ee:	4b20      	ldr	r3, [pc, #128]	; (8005870 <HAL_UART_MspInit+0x464>)
 80057f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057f6:	4b1e      	ldr	r3, [pc, #120]	; (8005870 <HAL_UART_MspInit+0x464>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057fc:	4b1c      	ldr	r3, [pc, #112]	; (8005870 <HAL_UART_MspInit+0x464>)
 80057fe:	2200      	movs	r2, #0
 8005800:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005802:	4b1b      	ldr	r3, [pc, #108]	; (8005870 <HAL_UART_MspInit+0x464>)
 8005804:	2200      	movs	r2, #0
 8005806:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005808:	4b19      	ldr	r3, [pc, #100]	; (8005870 <HAL_UART_MspInit+0x464>)
 800580a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800580e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005810:	4b17      	ldr	r3, [pc, #92]	; (8005870 <HAL_UART_MspInit+0x464>)
 8005812:	2204      	movs	r2, #4
 8005814:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005816:	4b16      	ldr	r3, [pc, #88]	; (8005870 <HAL_UART_MspInit+0x464>)
 8005818:	2203      	movs	r2, #3
 800581a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800581c:	4b14      	ldr	r3, [pc, #80]	; (8005870 <HAL_UART_MspInit+0x464>)
 800581e:	2200      	movs	r2, #0
 8005820:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005822:	4b13      	ldr	r3, [pc, #76]	; (8005870 <HAL_UART_MspInit+0x464>)
 8005824:	2200      	movs	r2, #0
 8005826:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005828:	4811      	ldr	r0, [pc, #68]	; (8005870 <HAL_UART_MspInit+0x464>)
 800582a:	f000 fc07 	bl	800603c <HAL_DMA_Init>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d001      	beq.n	8005838 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8005834:	f7fe fa6c 	bl	8003d10 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a0d      	ldr	r2, [pc, #52]	; (8005870 <HAL_UART_MspInit+0x464>)
 800583c:	679a      	str	r2, [r3, #120]	; 0x78
 800583e:	4a0c      	ldr	r2, [pc, #48]	; (8005870 <HAL_UART_MspInit+0x464>)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005844:	2200      	movs	r2, #0
 8005846:	2100      	movs	r1, #0
 8005848:	2027      	movs	r0, #39	; 0x27
 800584a:	f000 f9b8 	bl	8005bbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800584e:	2027      	movs	r0, #39	; 0x27
 8005850:	f000 f9cf 	bl	8005bf2 <HAL_NVIC_EnableIRQ>
}
 8005854:	bf00      	nop
 8005856:	37f0      	adds	r7, #240	; 0xf0
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	40004800 	.word	0x40004800
 8005860:	58024400 	.word	0x58024400
 8005864:	58020c00 	.word	0x58020c00
 8005868:	24000d00 	.word	0x24000d00
 800586c:	40020028 	.word	0x40020028
 8005870:	24000e08 	.word	0x24000e08
 8005874:	40020040 	.word	0x40020040

08005878 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8005878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800587c:	f7fe fe46 	bl	800450c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005880:	480c      	ldr	r0, [pc, #48]	; (80058b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005882:	490d      	ldr	r1, [pc, #52]	; (80058b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005884:	4a0d      	ldr	r2, [pc, #52]	; (80058bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005888:	e002      	b.n	8005890 <LoopCopyDataInit>

0800588a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800588a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800588c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800588e:	3304      	adds	r3, #4

08005890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005894:	d3f9      	bcc.n	800588a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005896:	4a0a      	ldr	r2, [pc, #40]	; (80058c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005898:	4c0a      	ldr	r4, [pc, #40]	; (80058c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800589a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800589c:	e001      	b.n	80058a2 <LoopFillZerobss>

0800589e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800589e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058a0:	3204      	adds	r2, #4

080058a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058a4:	d3fb      	bcc.n	800589e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80058a6:	f00a fbed 	bl	8010084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058aa:	f7fd fff7 	bl	800389c <main>
  bx  lr
 80058ae:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 80058b0:	24001618 	.word	0x24001618
  ldr r0, =_sdata
 80058b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80058b8:	24000220 	.word	0x24000220
  ldr r2, =_sidata
 80058bc:	0801480c 	.word	0x0801480c
  ldr r2, =_sbss
 80058c0:	24000220 	.word	0x24000220
  ldr r4, =_ebss
 80058c4:	24001014 	.word	0x24001014

080058c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058c8:	e7fe      	b.n	80058c8 <ADC3_IRQHandler>
	...

080058cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058d2:	2003      	movs	r0, #3
 80058d4:	f000 f968 	bl	8005ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80058d8:	f004 f9ea 	bl	8009cb0 <HAL_RCC_GetSysClockFreq>
 80058dc:	4602      	mov	r2, r0
 80058de:	4b15      	ldr	r3, [pc, #84]	; (8005934 <HAL_Init+0x68>)
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	0a1b      	lsrs	r3, r3, #8
 80058e4:	f003 030f 	and.w	r3, r3, #15
 80058e8:	4913      	ldr	r1, [pc, #76]	; (8005938 <HAL_Init+0x6c>)
 80058ea:	5ccb      	ldrb	r3, [r1, r3]
 80058ec:	f003 031f 	and.w	r3, r3, #31
 80058f0:	fa22 f303 	lsr.w	r3, r2, r3
 80058f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80058f6:	4b0f      	ldr	r3, [pc, #60]	; (8005934 <HAL_Init+0x68>)
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	4a0e      	ldr	r2, [pc, #56]	; (8005938 <HAL_Init+0x6c>)
 8005900:	5cd3      	ldrb	r3, [r2, r3]
 8005902:	f003 031f 	and.w	r3, r3, #31
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	fa22 f303 	lsr.w	r3, r2, r3
 800590c:	4a0b      	ldr	r2, [pc, #44]	; (800593c <HAL_Init+0x70>)
 800590e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005910:	4a0b      	ldr	r2, [pc, #44]	; (8005940 <HAL_Init+0x74>)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005916:	2000      	movs	r0, #0
 8005918:	f000 f814 	bl	8005944 <HAL_InitTick>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e002      	b.n	800592c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005926:	f7fe fc3b 	bl	80041a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	58024400 	.word	0x58024400
 8005938:	080129a0 	.word	0x080129a0
 800593c:	24000044 	.word	0x24000044
 8005940:	24000040 	.word	0x24000040

08005944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800594c:	4b15      	ldr	r3, [pc, #84]	; (80059a4 <HAL_InitTick+0x60>)
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e021      	b.n	800599c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005958:	4b13      	ldr	r3, [pc, #76]	; (80059a8 <HAL_InitTick+0x64>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <HAL_InitTick+0x60>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	4619      	mov	r1, r3
 8005962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005966:	fbb3 f3f1 	udiv	r3, r3, r1
 800596a:	fbb2 f3f3 	udiv	r3, r2, r3
 800596e:	4618      	mov	r0, r3
 8005970:	f000 f94d 	bl	8005c0e <HAL_SYSTICK_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e00e      	b.n	800599c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b0f      	cmp	r3, #15
 8005982:	d80a      	bhi.n	800599a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005984:	2200      	movs	r2, #0
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	f04f 30ff 	mov.w	r0, #4294967295
 800598c:	f000 f917 	bl	8005bbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005990:	4a06      	ldr	r2, [pc, #24]	; (80059ac <HAL_InitTick+0x68>)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
 8005998:	e000      	b.n	800599c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
}
 800599c:	4618      	mov	r0, r3
 800599e:	3708      	adds	r7, #8
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	2400004c 	.word	0x2400004c
 80059a8:	24000040 	.word	0x24000040
 80059ac:	24000048 	.word	0x24000048

080059b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80059b4:	4b06      	ldr	r3, [pc, #24]	; (80059d0 <HAL_IncTick+0x20>)
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <HAL_IncTick+0x24>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4413      	add	r3, r2
 80059c0:	4a04      	ldr	r2, [pc, #16]	; (80059d4 <HAL_IncTick+0x24>)
 80059c2:	6013      	str	r3, [r2, #0]
}
 80059c4:	bf00      	nop
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	2400004c 	.word	0x2400004c
 80059d4:	24001000 	.word	0x24001000

080059d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	af00      	add	r7, sp, #0
  return uwTick;
 80059dc:	4b03      	ldr	r3, [pc, #12]	; (80059ec <HAL_GetTick+0x14>)
 80059de:	681b      	ldr	r3, [r3, #0]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	24001000 	.word	0x24001000

080059f0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80059f4:	4b03      	ldr	r3, [pc, #12]	; (8005a04 <HAL_GetREVID+0x14>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	0c1b      	lsrs	r3, r3, #16
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	5c001000 	.word	0x5c001000

08005a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a18:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <__NVIC_SetPriorityGrouping+0x40>)
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a24:	4013      	ands	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a30:	4b06      	ldr	r3, [pc, #24]	; (8005a4c <__NVIC_SetPriorityGrouping+0x44>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a36:	4a04      	ldr	r2, [pc, #16]	; (8005a48 <__NVIC_SetPriorityGrouping+0x40>)
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	60d3      	str	r3, [r2, #12]
}
 8005a3c:	bf00      	nop
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	e000ed00 	.word	0xe000ed00
 8005a4c:	05fa0000 	.word	0x05fa0000

08005a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a54:	4b04      	ldr	r3, [pc, #16]	; (8005a68 <__NVIC_GetPriorityGrouping+0x18>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	0a1b      	lsrs	r3, r3, #8
 8005a5a:	f003 0307 	and.w	r3, r3, #7
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	e000ed00 	.word	0xe000ed00

08005a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	4603      	mov	r3, r0
 8005a74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005a76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	db0b      	blt.n	8005a96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a7e:	88fb      	ldrh	r3, [r7, #6]
 8005a80:	f003 021f 	and.w	r2, r3, #31
 8005a84:	4907      	ldr	r1, [pc, #28]	; (8005aa4 <__NVIC_EnableIRQ+0x38>)
 8005a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	2001      	movs	r0, #1
 8005a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	e000e100 	.word	0xe000e100

08005aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	6039      	str	r1, [r7, #0]
 8005ab2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ab4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	db0a      	blt.n	8005ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	b2da      	uxtb	r2, r3
 8005ac0:	490c      	ldr	r1, [pc, #48]	; (8005af4 <__NVIC_SetPriority+0x4c>)
 8005ac2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ac6:	0112      	lsls	r2, r2, #4
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	440b      	add	r3, r1
 8005acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ad0:	e00a      	b.n	8005ae8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	4908      	ldr	r1, [pc, #32]	; (8005af8 <__NVIC_SetPriority+0x50>)
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	3b04      	subs	r3, #4
 8005ae0:	0112      	lsls	r2, r2, #4
 8005ae2:	b2d2      	uxtb	r2, r2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	761a      	strb	r2, [r3, #24]
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr
 8005af4:	e000e100 	.word	0xe000e100
 8005af8:	e000ed00 	.word	0xe000ed00

08005afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b089      	sub	sp, #36	; 0x24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 0307 	and.w	r3, r3, #7
 8005b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	f1c3 0307 	rsb	r3, r3, #7
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	bf28      	it	cs
 8005b1a:	2304      	movcs	r3, #4
 8005b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	3304      	adds	r3, #4
 8005b22:	2b06      	cmp	r3, #6
 8005b24:	d902      	bls.n	8005b2c <NVIC_EncodePriority+0x30>
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3b03      	subs	r3, #3
 8005b2a:	e000      	b.n	8005b2e <NVIC_EncodePriority+0x32>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b30:	f04f 32ff 	mov.w	r2, #4294967295
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43da      	mvns	r2, r3
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	401a      	ands	r2, r3
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b44:	f04f 31ff 	mov.w	r1, #4294967295
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b4e:	43d9      	mvns	r1, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b54:	4313      	orrs	r3, r2
         );
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3724      	adds	r7, #36	; 0x24
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
	...

08005b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b082      	sub	sp, #8
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b74:	d301      	bcc.n	8005b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b76:	2301      	movs	r3, #1
 8005b78:	e00f      	b.n	8005b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ba4 <SysTick_Config+0x40>)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b82:	210f      	movs	r1, #15
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	f7ff ff8e 	bl	8005aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b8c:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <SysTick_Config+0x40>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b92:	4b04      	ldr	r3, [pc, #16]	; (8005ba4 <SysTick_Config+0x40>)
 8005b94:	2207      	movs	r2, #7
 8005b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	e000e010 	.word	0xe000e010

08005ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff ff29 	bl	8005a08 <__NVIC_SetPriorityGrouping>
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b086      	sub	sp, #24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	607a      	str	r2, [r7, #4]
 8005bca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005bcc:	f7ff ff40 	bl	8005a50 <__NVIC_GetPriorityGrouping>
 8005bd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	6978      	ldr	r0, [r7, #20]
 8005bd8:	f7ff ff90 	bl	8005afc <NVIC_EncodePriority>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005be2:	4611      	mov	r1, r2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff ff5f 	bl	8005aa8 <__NVIC_SetPriority>
}
 8005bea:	bf00      	nop
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff ff33 	bl	8005a6c <__NVIC_EnableIRQ>
}
 8005c06:	bf00      	nop
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f7ff ffa4 	bl	8005b64 <SysTick_Config>
 8005c1c:	4603      	mov	r3, r0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8005c2a:	f000 f802 	bl	8005c32 <HAL_SYSTICK_Callback>
}
 8005c2e:	bf00      	nop
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8005c32:	b480      	push	{r7}
 8005c34:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005c36:	bf00      	nop
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e054      	b.n	8005cfc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	7f5b      	ldrb	r3, [r3, #29]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d105      	bne.n	8005c68 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fb fdc6 	bl	80017f4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	791b      	ldrb	r3, [r3, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10c      	bne.n	8005c90 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a22      	ldr	r2, [pc, #136]	; (8005d04 <HAL_CRC_Init+0xc4>)
 8005c7c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f022 0218 	bic.w	r2, r2, #24
 8005c8c:	609a      	str	r2, [r3, #8]
 8005c8e:	e00c      	b.n	8005caa <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6899      	ldr	r1, [r3, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f948 	bl	8005f30 <HAL_CRCEx_Polynomial_Set>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e028      	b.n	8005cfc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	795b      	ldrb	r3, [r3, #5]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d105      	bne.n	8005cbe <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cba:	611a      	str	r2, [r3, #16]
 8005cbc:	e004      	b.n	8005cc8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6912      	ldr	r2, [r2, #16]
 8005cc6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	695a      	ldr	r2, [r3, #20]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	430a      	orrs	r2, r1
 8005cdc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3708      	adds	r7, #8
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	04c11db7 	.word	0x04c11db7

08005d08 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8005d14:	2300      	movs	r3, #0
 8005d16:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 0201 	orr.w	r2, r2, #1
 8005d2c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	2b03      	cmp	r3, #3
 8005d34:	d006      	beq.n	8005d44 <HAL_CRC_Calculate+0x3c>
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d829      	bhi.n	8005d8e <HAL_CRC_Calculate+0x86>
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d019      	beq.n	8005d72 <HAL_CRC_Calculate+0x6a>
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d01e      	beq.n	8005d80 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8005d42:	e024      	b.n	8005d8e <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8005d44:	2300      	movs	r3, #0
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	e00a      	b.n	8005d60 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	009b      	lsls	r3, r3, #2
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	441a      	add	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	697a      	ldr	r2, [r7, #20]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d3f0      	bcc.n	8005d4a <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	613b      	str	r3, [r7, #16]
      break;
 8005d70:	e00e      	b.n	8005d90 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 f812 	bl	8005da0 <CRC_Handle_8>
 8005d7c:	6138      	str	r0, [r7, #16]
      break;
 8005d7e:	e007      	b.n	8005d90 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	68b9      	ldr	r1, [r7, #8]
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 f899 	bl	8005ebc <CRC_Handle_16>
 8005d8a:	6138      	str	r0, [r7, #16]
      break;
 8005d8c:	e000      	b.n	8005d90 <HAL_CRC_Calculate+0x88>
      break;
 8005d8e:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2201      	movs	r2, #1
 8005d94:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005d96:	693b      	ldr	r3, [r7, #16]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b089      	sub	sp, #36	; 0x24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005dac:	2300      	movs	r3, #0
 8005dae:	61fb      	str	r3, [r7, #28]
 8005db0:	e023      	b.n	8005dfa <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	4413      	add	r3, r2
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	440b      	add	r3, r1
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005dcc:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	3302      	adds	r3, #2
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	440b      	add	r3, r1
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005ddc:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	3303      	adds	r3, #3
 8005de4:	68b9      	ldr	r1, [r7, #8]
 8005de6:	440b      	add	r3, r1
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005df0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005df2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	3301      	adds	r3, #1
 8005df8:	61fb      	str	r3, [r7, #28]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	089b      	lsrs	r3, r3, #2
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d3d6      	bcc.n	8005db2 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d04d      	beq.n	8005eaa <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f003 0303 	and.w	r3, r3, #3
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d107      	bne.n	8005e28 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	4413      	add	r3, r2
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	6812      	ldr	r2, [r2, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d116      	bne.n	8005e60 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	4413      	add	r3, r2
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	021b      	lsls	r3, r3, #8
 8005e3e:	b21a      	sxth	r2, r3
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	3301      	adds	r3, #1
 8005e46:	68b9      	ldr	r1, [r7, #8]
 8005e48:	440b      	add	r3, r1
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	b21b      	sxth	r3, r3
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	b21b      	sxth	r3, r3
 8005e52:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	8b7a      	ldrh	r2, [r7, #26]
 8005e5e:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	2b03      	cmp	r3, #3
 8005e68:	d11f      	bne.n	8005eaa <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	4413      	add	r3, r2
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	021b      	lsls	r3, r3, #8
 8005e76:	b21a      	sxth	r2, r3
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	68b9      	ldr	r1, [r7, #8]
 8005e80:	440b      	add	r3, r1
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	b21b      	sxth	r3, r3
 8005e86:	4313      	orrs	r3, r2
 8005e88:	b21b      	sxth	r3, r3
 8005e8a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	8b7a      	ldrh	r2, [r7, #26]
 8005e96:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	3302      	adds	r3, #2
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	6812      	ldr	r2, [r2, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3724      	adds	r7, #36	; 0x24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	e013      	b.n	8005ef6 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	881b      	ldrh	r3, [r3, #0]
 8005ed8:	041a      	lsls	r2, r3, #16
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	3302      	adds	r3, #2
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	440b      	add	r3, r1
 8005ee4:	881b      	ldrh	r3, [r3, #0]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	430a      	orrs	r2, r1
 8005eee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	085b      	lsrs	r3, r3, #1
 8005efa:	697a      	ldr	r2, [r7, #20]
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d3e6      	bcc.n	8005ece <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	4413      	add	r3, r2
 8005f18:	881a      	ldrh	r2, [r3, #0]
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	371c      	adds	r7, #28
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005f40:	231f      	movs	r3, #31
 8005f42:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005f44:	bf00      	nop
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1e5a      	subs	r2, r3, #1
 8005f4a:	613a      	str	r2, [r7, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d009      	beq.n	8005f64 <HAL_CRCEx_Polynomial_Set+0x34>
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	f003 031f 	and.w	r3, r3, #31
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	fa22 f303 	lsr.w	r3, r2, r3
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0f0      	beq.n	8005f46 <HAL_CRCEx_Polynomial_Set+0x16>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b18      	cmp	r3, #24
 8005f68:	d846      	bhi.n	8005ff8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005f6a:	a201      	add	r2, pc, #4	; (adr r2, 8005f70 <HAL_CRCEx_Polynomial_Set+0x40>)
 8005f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f70:	08005fff 	.word	0x08005fff
 8005f74:	08005ff9 	.word	0x08005ff9
 8005f78:	08005ff9 	.word	0x08005ff9
 8005f7c:	08005ff9 	.word	0x08005ff9
 8005f80:	08005ff9 	.word	0x08005ff9
 8005f84:	08005ff9 	.word	0x08005ff9
 8005f88:	08005ff9 	.word	0x08005ff9
 8005f8c:	08005ff9 	.word	0x08005ff9
 8005f90:	08005fed 	.word	0x08005fed
 8005f94:	08005ff9 	.word	0x08005ff9
 8005f98:	08005ff9 	.word	0x08005ff9
 8005f9c:	08005ff9 	.word	0x08005ff9
 8005fa0:	08005ff9 	.word	0x08005ff9
 8005fa4:	08005ff9 	.word	0x08005ff9
 8005fa8:	08005ff9 	.word	0x08005ff9
 8005fac:	08005ff9 	.word	0x08005ff9
 8005fb0:	08005fe1 	.word	0x08005fe1
 8005fb4:	08005ff9 	.word	0x08005ff9
 8005fb8:	08005ff9 	.word	0x08005ff9
 8005fbc:	08005ff9 	.word	0x08005ff9
 8005fc0:	08005ff9 	.word	0x08005ff9
 8005fc4:	08005ff9 	.word	0x08005ff9
 8005fc8:	08005ff9 	.word	0x08005ff9
 8005fcc:	08005ff9 	.word	0x08005ff9
 8005fd0:	08005fd5 	.word	0x08005fd5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	2b06      	cmp	r3, #6
 8005fd8:	d913      	bls.n	8006002 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005fde:	e010      	b.n	8006002 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	2b07      	cmp	r3, #7
 8005fe4:	d90f      	bls.n	8006006 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005fea:	e00c      	b.n	8006006 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	2b0f      	cmp	r3, #15
 8005ff0:	d90b      	bls.n	800600a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005ff6:	e008      	b.n	800600a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	75fb      	strb	r3, [r7, #23]
      break;
 8005ffc:	e006      	b.n	800600c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005ffe:	bf00      	nop
 8006000:	e004      	b.n	800600c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006002:	bf00      	nop
 8006004:	e002      	b.n	800600c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006006:	bf00      	nop
 8006008:	e000      	b.n	800600c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800600a:	bf00      	nop
  }
  if (status == HAL_OK)
 800600c:	7dfb      	ldrb	r3, [r7, #23]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10d      	bne.n	800602e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f023 0118 	bic.w	r1, r3, #24
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	430a      	orrs	r2, r1
 800602c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800602e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006030:	4618      	mov	r0, r3
 8006032:	371c      	adds	r7, #28
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b086      	sub	sp, #24
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006044:	f7ff fcc8 	bl	80059d8 <HAL_GetTick>
 8006048:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e316      	b.n	8006682 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a66      	ldr	r2, [pc, #408]	; (80061f4 <HAL_DMA_Init+0x1b8>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d04a      	beq.n	80060f4 <HAL_DMA_Init+0xb8>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a65      	ldr	r2, [pc, #404]	; (80061f8 <HAL_DMA_Init+0x1bc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d045      	beq.n	80060f4 <HAL_DMA_Init+0xb8>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a63      	ldr	r2, [pc, #396]	; (80061fc <HAL_DMA_Init+0x1c0>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d040      	beq.n	80060f4 <HAL_DMA_Init+0xb8>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a62      	ldr	r2, [pc, #392]	; (8006200 <HAL_DMA_Init+0x1c4>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d03b      	beq.n	80060f4 <HAL_DMA_Init+0xb8>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a60      	ldr	r2, [pc, #384]	; (8006204 <HAL_DMA_Init+0x1c8>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d036      	beq.n	80060f4 <HAL_DMA_Init+0xb8>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a5f      	ldr	r2, [pc, #380]	; (8006208 <HAL_DMA_Init+0x1cc>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d031      	beq.n	80060f4 <HAL_DMA_Init+0xb8>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a5d      	ldr	r2, [pc, #372]	; (800620c <HAL_DMA_Init+0x1d0>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d02c      	beq.n	80060f4 <HAL_DMA_Init+0xb8>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a5c      	ldr	r2, [pc, #368]	; (8006210 <HAL_DMA_Init+0x1d4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d027      	beq.n	80060f4 <HAL_DMA_Init+0xb8>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a5a      	ldr	r2, [pc, #360]	; (8006214 <HAL_DMA_Init+0x1d8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d022      	beq.n	80060f4 <HAL_DMA_Init+0xb8>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a59      	ldr	r2, [pc, #356]	; (8006218 <HAL_DMA_Init+0x1dc>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d01d      	beq.n	80060f4 <HAL_DMA_Init+0xb8>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a57      	ldr	r2, [pc, #348]	; (800621c <HAL_DMA_Init+0x1e0>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d018      	beq.n	80060f4 <HAL_DMA_Init+0xb8>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a56      	ldr	r2, [pc, #344]	; (8006220 <HAL_DMA_Init+0x1e4>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d013      	beq.n	80060f4 <HAL_DMA_Init+0xb8>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a54      	ldr	r2, [pc, #336]	; (8006224 <HAL_DMA_Init+0x1e8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00e      	beq.n	80060f4 <HAL_DMA_Init+0xb8>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a53      	ldr	r2, [pc, #332]	; (8006228 <HAL_DMA_Init+0x1ec>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d009      	beq.n	80060f4 <HAL_DMA_Init+0xb8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a51      	ldr	r2, [pc, #324]	; (800622c <HAL_DMA_Init+0x1f0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d004      	beq.n	80060f4 <HAL_DMA_Init+0xb8>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a50      	ldr	r2, [pc, #320]	; (8006230 <HAL_DMA_Init+0x1f4>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d101      	bne.n	80060f8 <HAL_DMA_Init+0xbc>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <HAL_DMA_Init+0xbe>
 80060f8:	2300      	movs	r3, #0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 813b 	beq.w	8006376 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a37      	ldr	r2, [pc, #220]	; (80061f4 <HAL_DMA_Init+0x1b8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d04a      	beq.n	80061b0 <HAL_DMA_Init+0x174>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a36      	ldr	r2, [pc, #216]	; (80061f8 <HAL_DMA_Init+0x1bc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d045      	beq.n	80061b0 <HAL_DMA_Init+0x174>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a34      	ldr	r2, [pc, #208]	; (80061fc <HAL_DMA_Init+0x1c0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d040      	beq.n	80061b0 <HAL_DMA_Init+0x174>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a33      	ldr	r2, [pc, #204]	; (8006200 <HAL_DMA_Init+0x1c4>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d03b      	beq.n	80061b0 <HAL_DMA_Init+0x174>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a31      	ldr	r2, [pc, #196]	; (8006204 <HAL_DMA_Init+0x1c8>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d036      	beq.n	80061b0 <HAL_DMA_Init+0x174>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a30      	ldr	r2, [pc, #192]	; (8006208 <HAL_DMA_Init+0x1cc>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d031      	beq.n	80061b0 <HAL_DMA_Init+0x174>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a2e      	ldr	r2, [pc, #184]	; (800620c <HAL_DMA_Init+0x1d0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d02c      	beq.n	80061b0 <HAL_DMA_Init+0x174>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a2d      	ldr	r2, [pc, #180]	; (8006210 <HAL_DMA_Init+0x1d4>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d027      	beq.n	80061b0 <HAL_DMA_Init+0x174>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2b      	ldr	r2, [pc, #172]	; (8006214 <HAL_DMA_Init+0x1d8>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d022      	beq.n	80061b0 <HAL_DMA_Init+0x174>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a2a      	ldr	r2, [pc, #168]	; (8006218 <HAL_DMA_Init+0x1dc>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d01d      	beq.n	80061b0 <HAL_DMA_Init+0x174>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a28      	ldr	r2, [pc, #160]	; (800621c <HAL_DMA_Init+0x1e0>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d018      	beq.n	80061b0 <HAL_DMA_Init+0x174>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a27      	ldr	r2, [pc, #156]	; (8006220 <HAL_DMA_Init+0x1e4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d013      	beq.n	80061b0 <HAL_DMA_Init+0x174>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a25      	ldr	r2, [pc, #148]	; (8006224 <HAL_DMA_Init+0x1e8>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00e      	beq.n	80061b0 <HAL_DMA_Init+0x174>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a24      	ldr	r2, [pc, #144]	; (8006228 <HAL_DMA_Init+0x1ec>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d009      	beq.n	80061b0 <HAL_DMA_Init+0x174>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a22      	ldr	r2, [pc, #136]	; (800622c <HAL_DMA_Init+0x1f0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d004      	beq.n	80061b0 <HAL_DMA_Init+0x174>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a21      	ldr	r2, [pc, #132]	; (8006230 <HAL_DMA_Init+0x1f4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d108      	bne.n	80061c2 <HAL_DMA_Init+0x186>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0201 	bic.w	r2, r2, #1
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	e007      	b.n	80061d2 <HAL_DMA_Init+0x196>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0201 	bic.w	r2, r2, #1
 80061d0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80061d2:	e02f      	b.n	8006234 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80061d4:	f7ff fc00 	bl	80059d8 <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	2b05      	cmp	r3, #5
 80061e0:	d928      	bls.n	8006234 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2220      	movs	r2, #32
 80061e6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2203      	movs	r2, #3
 80061ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e246      	b.n	8006682 <HAL_DMA_Init+0x646>
 80061f4:	40020010 	.word	0x40020010
 80061f8:	40020028 	.word	0x40020028
 80061fc:	40020040 	.word	0x40020040
 8006200:	40020058 	.word	0x40020058
 8006204:	40020070 	.word	0x40020070
 8006208:	40020088 	.word	0x40020088
 800620c:	400200a0 	.word	0x400200a0
 8006210:	400200b8 	.word	0x400200b8
 8006214:	40020410 	.word	0x40020410
 8006218:	40020428 	.word	0x40020428
 800621c:	40020440 	.word	0x40020440
 8006220:	40020458 	.word	0x40020458
 8006224:	40020470 	.word	0x40020470
 8006228:	40020488 	.word	0x40020488
 800622c:	400204a0 	.word	0x400204a0
 8006230:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 0301 	and.w	r3, r3, #1
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1c8      	bne.n	80061d4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4b83      	ldr	r3, [pc, #524]	; (800645c <HAL_DMA_Init+0x420>)
 800624e:	4013      	ands	r3, r2
 8006250:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800625a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006266:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006272:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	2b04      	cmp	r3, #4
 8006286:	d107      	bne.n	8006298 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006290:	4313      	orrs	r3, r2
 8006292:	697a      	ldr	r2, [r7, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006298:	4b71      	ldr	r3, [pc, #452]	; (8006460 <HAL_DMA_Init+0x424>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	4b71      	ldr	r3, [pc, #452]	; (8006464 <HAL_DMA_Init+0x428>)
 800629e:	4013      	ands	r3, r2
 80062a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062a4:	d328      	bcc.n	80062f8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2b28      	cmp	r3, #40	; 0x28
 80062ac:	d903      	bls.n	80062b6 <HAL_DMA_Init+0x27a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	2b2e      	cmp	r3, #46	; 0x2e
 80062b4:	d917      	bls.n	80062e6 <HAL_DMA_Init+0x2aa>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2b3e      	cmp	r3, #62	; 0x3e
 80062bc:	d903      	bls.n	80062c6 <HAL_DMA_Init+0x28a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2b42      	cmp	r3, #66	; 0x42
 80062c4:	d90f      	bls.n	80062e6 <HAL_DMA_Init+0x2aa>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	2b46      	cmp	r3, #70	; 0x46
 80062cc:	d903      	bls.n	80062d6 <HAL_DMA_Init+0x29a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2b48      	cmp	r3, #72	; 0x48
 80062d4:	d907      	bls.n	80062e6 <HAL_DMA_Init+0x2aa>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b4e      	cmp	r3, #78	; 0x4e
 80062dc:	d905      	bls.n	80062ea <HAL_DMA_Init+0x2ae>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	2b52      	cmp	r3, #82	; 0x52
 80062e4:	d801      	bhi.n	80062ea <HAL_DMA_Init+0x2ae>
 80062e6:	2301      	movs	r3, #1
 80062e8:	e000      	b.n	80062ec <HAL_DMA_Init+0x2b0>
 80062ea:	2300      	movs	r3, #0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062f6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695b      	ldr	r3, [r3, #20]
 8006306:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f023 0307 	bic.w	r3, r3, #7
 800630e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631e:	2b04      	cmp	r3, #4
 8006320:	d117      	bne.n	8006352 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	4313      	orrs	r3, r2
 800632a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00e      	beq.n	8006352 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f002 fb31 	bl	800899c <DMA_CheckFifoParam>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d008      	beq.n	8006352 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2240      	movs	r2, #64	; 0x40
 8006344:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e197      	b.n	8006682 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f002 fa6c 	bl	8008838 <DMA_CalcBaseAndBitshift>
 8006360:	4603      	mov	r3, r0
 8006362:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006368:	f003 031f 	and.w	r3, r3, #31
 800636c:	223f      	movs	r2, #63	; 0x3f
 800636e:	409a      	lsls	r2, r3
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	609a      	str	r2, [r3, #8]
 8006374:	e0cd      	b.n	8006512 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a3b      	ldr	r2, [pc, #236]	; (8006468 <HAL_DMA_Init+0x42c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d022      	beq.n	80063c6 <HAL_DMA_Init+0x38a>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a39      	ldr	r2, [pc, #228]	; (800646c <HAL_DMA_Init+0x430>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d01d      	beq.n	80063c6 <HAL_DMA_Init+0x38a>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a38      	ldr	r2, [pc, #224]	; (8006470 <HAL_DMA_Init+0x434>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d018      	beq.n	80063c6 <HAL_DMA_Init+0x38a>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a36      	ldr	r2, [pc, #216]	; (8006474 <HAL_DMA_Init+0x438>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d013      	beq.n	80063c6 <HAL_DMA_Init+0x38a>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a35      	ldr	r2, [pc, #212]	; (8006478 <HAL_DMA_Init+0x43c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00e      	beq.n	80063c6 <HAL_DMA_Init+0x38a>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a33      	ldr	r2, [pc, #204]	; (800647c <HAL_DMA_Init+0x440>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d009      	beq.n	80063c6 <HAL_DMA_Init+0x38a>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a32      	ldr	r2, [pc, #200]	; (8006480 <HAL_DMA_Init+0x444>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d004      	beq.n	80063c6 <HAL_DMA_Init+0x38a>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a30      	ldr	r2, [pc, #192]	; (8006484 <HAL_DMA_Init+0x448>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d101      	bne.n	80063ca <HAL_DMA_Init+0x38e>
 80063c6:	2301      	movs	r3, #1
 80063c8:	e000      	b.n	80063cc <HAL_DMA_Init+0x390>
 80063ca:	2300      	movs	r3, #0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 8097 	beq.w	8006500 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a24      	ldr	r2, [pc, #144]	; (8006468 <HAL_DMA_Init+0x42c>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d021      	beq.n	8006420 <HAL_DMA_Init+0x3e4>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a22      	ldr	r2, [pc, #136]	; (800646c <HAL_DMA_Init+0x430>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01c      	beq.n	8006420 <HAL_DMA_Init+0x3e4>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a21      	ldr	r2, [pc, #132]	; (8006470 <HAL_DMA_Init+0x434>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d017      	beq.n	8006420 <HAL_DMA_Init+0x3e4>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a1f      	ldr	r2, [pc, #124]	; (8006474 <HAL_DMA_Init+0x438>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d012      	beq.n	8006420 <HAL_DMA_Init+0x3e4>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a1e      	ldr	r2, [pc, #120]	; (8006478 <HAL_DMA_Init+0x43c>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00d      	beq.n	8006420 <HAL_DMA_Init+0x3e4>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a1c      	ldr	r2, [pc, #112]	; (800647c <HAL_DMA_Init+0x440>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d008      	beq.n	8006420 <HAL_DMA_Init+0x3e4>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a1b      	ldr	r2, [pc, #108]	; (8006480 <HAL_DMA_Init+0x444>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <HAL_DMA_Init+0x3e4>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a19      	ldr	r2, [pc, #100]	; (8006484 <HAL_DMA_Init+0x448>)
 800641e:	4293      	cmp	r3, r2
 8006420:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2202      	movs	r2, #2
 8006426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4b12      	ldr	r3, [pc, #72]	; (8006488 <HAL_DMA_Init+0x44c>)
 800643e:	4013      	ands	r3, r2
 8006440:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2b40      	cmp	r3, #64	; 0x40
 8006448:	d020      	beq.n	800648c <HAL_DMA_Init+0x450>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	2b80      	cmp	r3, #128	; 0x80
 8006450:	d102      	bne.n	8006458 <HAL_DMA_Init+0x41c>
 8006452:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006456:	e01a      	b.n	800648e <HAL_DMA_Init+0x452>
 8006458:	2300      	movs	r3, #0
 800645a:	e018      	b.n	800648e <HAL_DMA_Init+0x452>
 800645c:	fe10803f 	.word	0xfe10803f
 8006460:	5c001000 	.word	0x5c001000
 8006464:	ffff0000 	.word	0xffff0000
 8006468:	58025408 	.word	0x58025408
 800646c:	5802541c 	.word	0x5802541c
 8006470:	58025430 	.word	0x58025430
 8006474:	58025444 	.word	0x58025444
 8006478:	58025458 	.word	0x58025458
 800647c:	5802546c 	.word	0x5802546c
 8006480:	58025480 	.word	0x58025480
 8006484:	58025494 	.word	0x58025494
 8006488:	fffe000f 	.word	0xfffe000f
 800648c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	68d2      	ldr	r2, [r2, #12]
 8006492:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006494:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800649c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80064a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80064ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80064b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a1b      	ldr	r3, [r3, #32]
 80064ba:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80064bc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	461a      	mov	r2, r3
 80064d2:	4b6e      	ldr	r3, [pc, #440]	; (800668c <HAL_DMA_Init+0x650>)
 80064d4:	4413      	add	r3, r2
 80064d6:	4a6e      	ldr	r2, [pc, #440]	; (8006690 <HAL_DMA_Init+0x654>)
 80064d8:	fba2 2303 	umull	r2, r3, r2, r3
 80064dc:	091b      	lsrs	r3, r3, #4
 80064de:	009a      	lsls	r2, r3, #2
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f002 f9a7 	bl	8008838 <DMA_CalcBaseAndBitshift>
 80064ea:	4603      	mov	r3, r0
 80064ec:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f2:	f003 031f 	and.w	r3, r3, #31
 80064f6:	2201      	movs	r2, #1
 80064f8:	409a      	lsls	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	605a      	str	r2, [r3, #4]
 80064fe:	e008      	b.n	8006512 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2240      	movs	r2, #64	; 0x40
 8006504:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2203      	movs	r2, #3
 800650a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e0b7      	b.n	8006682 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a5f      	ldr	r2, [pc, #380]	; (8006694 <HAL_DMA_Init+0x658>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d072      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a5d      	ldr	r2, [pc, #372]	; (8006698 <HAL_DMA_Init+0x65c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d06d      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a5c      	ldr	r2, [pc, #368]	; (800669c <HAL_DMA_Init+0x660>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d068      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a5a      	ldr	r2, [pc, #360]	; (80066a0 <HAL_DMA_Init+0x664>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d063      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a59      	ldr	r2, [pc, #356]	; (80066a4 <HAL_DMA_Init+0x668>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d05e      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a57      	ldr	r2, [pc, #348]	; (80066a8 <HAL_DMA_Init+0x66c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d059      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a56      	ldr	r2, [pc, #344]	; (80066ac <HAL_DMA_Init+0x670>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d054      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a54      	ldr	r2, [pc, #336]	; (80066b0 <HAL_DMA_Init+0x674>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d04f      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a53      	ldr	r2, [pc, #332]	; (80066b4 <HAL_DMA_Init+0x678>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d04a      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a51      	ldr	r2, [pc, #324]	; (80066b8 <HAL_DMA_Init+0x67c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d045      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a50      	ldr	r2, [pc, #320]	; (80066bc <HAL_DMA_Init+0x680>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d040      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a4e      	ldr	r2, [pc, #312]	; (80066c0 <HAL_DMA_Init+0x684>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d03b      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a4d      	ldr	r2, [pc, #308]	; (80066c4 <HAL_DMA_Init+0x688>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d036      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a4b      	ldr	r2, [pc, #300]	; (80066c8 <HAL_DMA_Init+0x68c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d031      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a4a      	ldr	r2, [pc, #296]	; (80066cc <HAL_DMA_Init+0x690>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d02c      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a48      	ldr	r2, [pc, #288]	; (80066d0 <HAL_DMA_Init+0x694>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d027      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a47      	ldr	r2, [pc, #284]	; (80066d4 <HAL_DMA_Init+0x698>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d022      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a45      	ldr	r2, [pc, #276]	; (80066d8 <HAL_DMA_Init+0x69c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d01d      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a44      	ldr	r2, [pc, #272]	; (80066dc <HAL_DMA_Init+0x6a0>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d018      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a42      	ldr	r2, [pc, #264]	; (80066e0 <HAL_DMA_Init+0x6a4>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d013      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a41      	ldr	r2, [pc, #260]	; (80066e4 <HAL_DMA_Init+0x6a8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d00e      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a3f      	ldr	r2, [pc, #252]	; (80066e8 <HAL_DMA_Init+0x6ac>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d009      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a3e      	ldr	r2, [pc, #248]	; (80066ec <HAL_DMA_Init+0x6b0>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d004      	beq.n	8006602 <HAL_DMA_Init+0x5c6>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a3c      	ldr	r2, [pc, #240]	; (80066f0 <HAL_DMA_Init+0x6b4>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d101      	bne.n	8006606 <HAL_DMA_Init+0x5ca>
 8006602:	2301      	movs	r3, #1
 8006604:	e000      	b.n	8006608 <HAL_DMA_Init+0x5cc>
 8006606:	2300      	movs	r3, #0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d032      	beq.n	8006672 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f002 fa41 	bl	8008a94 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	2b80      	cmp	r3, #128	; 0x80
 8006618:	d102      	bne.n	8006620 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006628:	b2d2      	uxtb	r2, r2
 800662a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006634:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d010      	beq.n	8006660 <HAL_DMA_Init+0x624>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2b08      	cmp	r3, #8
 8006644:	d80c      	bhi.n	8006660 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f002 fabe 	bl	8008bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006650:	2200      	movs	r2, #0
 8006652:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800665c:	605a      	str	r2, [r3, #4]
 800665e:	e008      	b.n	8006672 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3718      	adds	r7, #24
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	a7fdabf8 	.word	0xa7fdabf8
 8006690:	cccccccd 	.word	0xcccccccd
 8006694:	40020010 	.word	0x40020010
 8006698:	40020028 	.word	0x40020028
 800669c:	40020040 	.word	0x40020040
 80066a0:	40020058 	.word	0x40020058
 80066a4:	40020070 	.word	0x40020070
 80066a8:	40020088 	.word	0x40020088
 80066ac:	400200a0 	.word	0x400200a0
 80066b0:	400200b8 	.word	0x400200b8
 80066b4:	40020410 	.word	0x40020410
 80066b8:	40020428 	.word	0x40020428
 80066bc:	40020440 	.word	0x40020440
 80066c0:	40020458 	.word	0x40020458
 80066c4:	40020470 	.word	0x40020470
 80066c8:	40020488 	.word	0x40020488
 80066cc:	400204a0 	.word	0x400204a0
 80066d0:	400204b8 	.word	0x400204b8
 80066d4:	58025408 	.word	0x58025408
 80066d8:	5802541c 	.word	0x5802541c
 80066dc:	58025430 	.word	0x58025430
 80066e0:	58025444 	.word	0x58025444
 80066e4:	58025458 	.word	0x58025458
 80066e8:	5802546c 	.word	0x5802546c
 80066ec:	58025480 	.word	0x58025480
 80066f0:	58025494 	.word	0x58025494

080066f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006702:	2300      	movs	r3, #0
 8006704:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e226      	b.n	8006b5e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <HAL_DMA_Start_IT+0x2a>
 800671a:	2302      	movs	r3, #2
 800671c:	e21f      	b.n	8006b5e <HAL_DMA_Start_IT+0x46a>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b01      	cmp	r3, #1
 8006730:	f040 820a 	bne.w	8006b48 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2202      	movs	r2, #2
 8006738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a68      	ldr	r2, [pc, #416]	; (80068e8 <HAL_DMA_Start_IT+0x1f4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d04a      	beq.n	80067e2 <HAL_DMA_Start_IT+0xee>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a66      	ldr	r2, [pc, #408]	; (80068ec <HAL_DMA_Start_IT+0x1f8>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d045      	beq.n	80067e2 <HAL_DMA_Start_IT+0xee>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a65      	ldr	r2, [pc, #404]	; (80068f0 <HAL_DMA_Start_IT+0x1fc>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d040      	beq.n	80067e2 <HAL_DMA_Start_IT+0xee>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a63      	ldr	r2, [pc, #396]	; (80068f4 <HAL_DMA_Start_IT+0x200>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d03b      	beq.n	80067e2 <HAL_DMA_Start_IT+0xee>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a62      	ldr	r2, [pc, #392]	; (80068f8 <HAL_DMA_Start_IT+0x204>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d036      	beq.n	80067e2 <HAL_DMA_Start_IT+0xee>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a60      	ldr	r2, [pc, #384]	; (80068fc <HAL_DMA_Start_IT+0x208>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d031      	beq.n	80067e2 <HAL_DMA_Start_IT+0xee>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a5f      	ldr	r2, [pc, #380]	; (8006900 <HAL_DMA_Start_IT+0x20c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d02c      	beq.n	80067e2 <HAL_DMA_Start_IT+0xee>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a5d      	ldr	r2, [pc, #372]	; (8006904 <HAL_DMA_Start_IT+0x210>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d027      	beq.n	80067e2 <HAL_DMA_Start_IT+0xee>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a5c      	ldr	r2, [pc, #368]	; (8006908 <HAL_DMA_Start_IT+0x214>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d022      	beq.n	80067e2 <HAL_DMA_Start_IT+0xee>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a5a      	ldr	r2, [pc, #360]	; (800690c <HAL_DMA_Start_IT+0x218>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d01d      	beq.n	80067e2 <HAL_DMA_Start_IT+0xee>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a59      	ldr	r2, [pc, #356]	; (8006910 <HAL_DMA_Start_IT+0x21c>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d018      	beq.n	80067e2 <HAL_DMA_Start_IT+0xee>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a57      	ldr	r2, [pc, #348]	; (8006914 <HAL_DMA_Start_IT+0x220>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d013      	beq.n	80067e2 <HAL_DMA_Start_IT+0xee>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a56      	ldr	r2, [pc, #344]	; (8006918 <HAL_DMA_Start_IT+0x224>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00e      	beq.n	80067e2 <HAL_DMA_Start_IT+0xee>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a54      	ldr	r2, [pc, #336]	; (800691c <HAL_DMA_Start_IT+0x228>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d009      	beq.n	80067e2 <HAL_DMA_Start_IT+0xee>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a53      	ldr	r2, [pc, #332]	; (8006920 <HAL_DMA_Start_IT+0x22c>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d004      	beq.n	80067e2 <HAL_DMA_Start_IT+0xee>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a51      	ldr	r2, [pc, #324]	; (8006924 <HAL_DMA_Start_IT+0x230>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d108      	bne.n	80067f4 <HAL_DMA_Start_IT+0x100>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0201 	bic.w	r2, r2, #1
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	e007      	b.n	8006804 <HAL_DMA_Start_IT+0x110>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0201 	bic.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f001 fe68 	bl	80084e0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a34      	ldr	r2, [pc, #208]	; (80068e8 <HAL_DMA_Start_IT+0x1f4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d04a      	beq.n	80068b0 <HAL_DMA_Start_IT+0x1bc>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a33      	ldr	r2, [pc, #204]	; (80068ec <HAL_DMA_Start_IT+0x1f8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d045      	beq.n	80068b0 <HAL_DMA_Start_IT+0x1bc>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a31      	ldr	r2, [pc, #196]	; (80068f0 <HAL_DMA_Start_IT+0x1fc>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d040      	beq.n	80068b0 <HAL_DMA_Start_IT+0x1bc>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a30      	ldr	r2, [pc, #192]	; (80068f4 <HAL_DMA_Start_IT+0x200>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d03b      	beq.n	80068b0 <HAL_DMA_Start_IT+0x1bc>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a2e      	ldr	r2, [pc, #184]	; (80068f8 <HAL_DMA_Start_IT+0x204>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d036      	beq.n	80068b0 <HAL_DMA_Start_IT+0x1bc>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a2d      	ldr	r2, [pc, #180]	; (80068fc <HAL_DMA_Start_IT+0x208>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d031      	beq.n	80068b0 <HAL_DMA_Start_IT+0x1bc>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a2b      	ldr	r2, [pc, #172]	; (8006900 <HAL_DMA_Start_IT+0x20c>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d02c      	beq.n	80068b0 <HAL_DMA_Start_IT+0x1bc>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a2a      	ldr	r2, [pc, #168]	; (8006904 <HAL_DMA_Start_IT+0x210>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d027      	beq.n	80068b0 <HAL_DMA_Start_IT+0x1bc>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a28      	ldr	r2, [pc, #160]	; (8006908 <HAL_DMA_Start_IT+0x214>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d022      	beq.n	80068b0 <HAL_DMA_Start_IT+0x1bc>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a27      	ldr	r2, [pc, #156]	; (800690c <HAL_DMA_Start_IT+0x218>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d01d      	beq.n	80068b0 <HAL_DMA_Start_IT+0x1bc>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a25      	ldr	r2, [pc, #148]	; (8006910 <HAL_DMA_Start_IT+0x21c>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d018      	beq.n	80068b0 <HAL_DMA_Start_IT+0x1bc>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a24      	ldr	r2, [pc, #144]	; (8006914 <HAL_DMA_Start_IT+0x220>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d013      	beq.n	80068b0 <HAL_DMA_Start_IT+0x1bc>
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a22      	ldr	r2, [pc, #136]	; (8006918 <HAL_DMA_Start_IT+0x224>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00e      	beq.n	80068b0 <HAL_DMA_Start_IT+0x1bc>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a21      	ldr	r2, [pc, #132]	; (800691c <HAL_DMA_Start_IT+0x228>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d009      	beq.n	80068b0 <HAL_DMA_Start_IT+0x1bc>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a1f      	ldr	r2, [pc, #124]	; (8006920 <HAL_DMA_Start_IT+0x22c>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d004      	beq.n	80068b0 <HAL_DMA_Start_IT+0x1bc>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a1e      	ldr	r2, [pc, #120]	; (8006924 <HAL_DMA_Start_IT+0x230>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d101      	bne.n	80068b4 <HAL_DMA_Start_IT+0x1c0>
 80068b0:	2301      	movs	r3, #1
 80068b2:	e000      	b.n	80068b6 <HAL_DMA_Start_IT+0x1c2>
 80068b4:	2300      	movs	r3, #0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d036      	beq.n	8006928 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f023 021e 	bic.w	r2, r3, #30
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f042 0216 	orr.w	r2, r2, #22
 80068cc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d03e      	beq.n	8006954 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f042 0208 	orr.w	r2, r2, #8
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	e035      	b.n	8006954 <HAL_DMA_Start_IT+0x260>
 80068e8:	40020010 	.word	0x40020010
 80068ec:	40020028 	.word	0x40020028
 80068f0:	40020040 	.word	0x40020040
 80068f4:	40020058 	.word	0x40020058
 80068f8:	40020070 	.word	0x40020070
 80068fc:	40020088 	.word	0x40020088
 8006900:	400200a0 	.word	0x400200a0
 8006904:	400200b8 	.word	0x400200b8
 8006908:	40020410 	.word	0x40020410
 800690c:	40020428 	.word	0x40020428
 8006910:	40020440 	.word	0x40020440
 8006914:	40020458 	.word	0x40020458
 8006918:	40020470 	.word	0x40020470
 800691c:	40020488 	.word	0x40020488
 8006920:	400204a0 	.word	0x400204a0
 8006924:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f023 020e 	bic.w	r2, r3, #14
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 020a 	orr.w	r2, r2, #10
 800693a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d007      	beq.n	8006954 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f042 0204 	orr.w	r2, r2, #4
 8006952:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a83      	ldr	r2, [pc, #524]	; (8006b68 <HAL_DMA_Start_IT+0x474>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d072      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a82      	ldr	r2, [pc, #520]	; (8006b6c <HAL_DMA_Start_IT+0x478>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d06d      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a80      	ldr	r2, [pc, #512]	; (8006b70 <HAL_DMA_Start_IT+0x47c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d068      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a7f      	ldr	r2, [pc, #508]	; (8006b74 <HAL_DMA_Start_IT+0x480>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d063      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a7d      	ldr	r2, [pc, #500]	; (8006b78 <HAL_DMA_Start_IT+0x484>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d05e      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a7c      	ldr	r2, [pc, #496]	; (8006b7c <HAL_DMA_Start_IT+0x488>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d059      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a7a      	ldr	r2, [pc, #488]	; (8006b80 <HAL_DMA_Start_IT+0x48c>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d054      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a79      	ldr	r2, [pc, #484]	; (8006b84 <HAL_DMA_Start_IT+0x490>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d04f      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a77      	ldr	r2, [pc, #476]	; (8006b88 <HAL_DMA_Start_IT+0x494>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d04a      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a76      	ldr	r2, [pc, #472]	; (8006b8c <HAL_DMA_Start_IT+0x498>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d045      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a74      	ldr	r2, [pc, #464]	; (8006b90 <HAL_DMA_Start_IT+0x49c>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d040      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a73      	ldr	r2, [pc, #460]	; (8006b94 <HAL_DMA_Start_IT+0x4a0>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d03b      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a71      	ldr	r2, [pc, #452]	; (8006b98 <HAL_DMA_Start_IT+0x4a4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d036      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a70      	ldr	r2, [pc, #448]	; (8006b9c <HAL_DMA_Start_IT+0x4a8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d031      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a6e      	ldr	r2, [pc, #440]	; (8006ba0 <HAL_DMA_Start_IT+0x4ac>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d02c      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a6d      	ldr	r2, [pc, #436]	; (8006ba4 <HAL_DMA_Start_IT+0x4b0>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d027      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a6b      	ldr	r2, [pc, #428]	; (8006ba8 <HAL_DMA_Start_IT+0x4b4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d022      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a6a      	ldr	r2, [pc, #424]	; (8006bac <HAL_DMA_Start_IT+0x4b8>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d01d      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a68      	ldr	r2, [pc, #416]	; (8006bb0 <HAL_DMA_Start_IT+0x4bc>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d018      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a67      	ldr	r2, [pc, #412]	; (8006bb4 <HAL_DMA_Start_IT+0x4c0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d013      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a65      	ldr	r2, [pc, #404]	; (8006bb8 <HAL_DMA_Start_IT+0x4c4>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d00e      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a64      	ldr	r2, [pc, #400]	; (8006bbc <HAL_DMA_Start_IT+0x4c8>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d009      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a62      	ldr	r2, [pc, #392]	; (8006bc0 <HAL_DMA_Start_IT+0x4cc>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d004      	beq.n	8006a44 <HAL_DMA_Start_IT+0x350>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a61      	ldr	r2, [pc, #388]	; (8006bc4 <HAL_DMA_Start_IT+0x4d0>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d101      	bne.n	8006a48 <HAL_DMA_Start_IT+0x354>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <HAL_DMA_Start_IT+0x356>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d01a      	beq.n	8006a84 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d007      	beq.n	8006a6c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a6a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a82:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a37      	ldr	r2, [pc, #220]	; (8006b68 <HAL_DMA_Start_IT+0x474>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d04a      	beq.n	8006b24 <HAL_DMA_Start_IT+0x430>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a36      	ldr	r2, [pc, #216]	; (8006b6c <HAL_DMA_Start_IT+0x478>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d045      	beq.n	8006b24 <HAL_DMA_Start_IT+0x430>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a34      	ldr	r2, [pc, #208]	; (8006b70 <HAL_DMA_Start_IT+0x47c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d040      	beq.n	8006b24 <HAL_DMA_Start_IT+0x430>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a33      	ldr	r2, [pc, #204]	; (8006b74 <HAL_DMA_Start_IT+0x480>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d03b      	beq.n	8006b24 <HAL_DMA_Start_IT+0x430>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a31      	ldr	r2, [pc, #196]	; (8006b78 <HAL_DMA_Start_IT+0x484>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d036      	beq.n	8006b24 <HAL_DMA_Start_IT+0x430>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a30      	ldr	r2, [pc, #192]	; (8006b7c <HAL_DMA_Start_IT+0x488>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d031      	beq.n	8006b24 <HAL_DMA_Start_IT+0x430>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a2e      	ldr	r2, [pc, #184]	; (8006b80 <HAL_DMA_Start_IT+0x48c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d02c      	beq.n	8006b24 <HAL_DMA_Start_IT+0x430>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a2d      	ldr	r2, [pc, #180]	; (8006b84 <HAL_DMA_Start_IT+0x490>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d027      	beq.n	8006b24 <HAL_DMA_Start_IT+0x430>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a2b      	ldr	r2, [pc, #172]	; (8006b88 <HAL_DMA_Start_IT+0x494>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d022      	beq.n	8006b24 <HAL_DMA_Start_IT+0x430>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a2a      	ldr	r2, [pc, #168]	; (8006b8c <HAL_DMA_Start_IT+0x498>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d01d      	beq.n	8006b24 <HAL_DMA_Start_IT+0x430>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a28      	ldr	r2, [pc, #160]	; (8006b90 <HAL_DMA_Start_IT+0x49c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d018      	beq.n	8006b24 <HAL_DMA_Start_IT+0x430>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a27      	ldr	r2, [pc, #156]	; (8006b94 <HAL_DMA_Start_IT+0x4a0>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d013      	beq.n	8006b24 <HAL_DMA_Start_IT+0x430>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a25      	ldr	r2, [pc, #148]	; (8006b98 <HAL_DMA_Start_IT+0x4a4>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d00e      	beq.n	8006b24 <HAL_DMA_Start_IT+0x430>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a24      	ldr	r2, [pc, #144]	; (8006b9c <HAL_DMA_Start_IT+0x4a8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d009      	beq.n	8006b24 <HAL_DMA_Start_IT+0x430>
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a22      	ldr	r2, [pc, #136]	; (8006ba0 <HAL_DMA_Start_IT+0x4ac>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d004      	beq.n	8006b24 <HAL_DMA_Start_IT+0x430>
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a21      	ldr	r2, [pc, #132]	; (8006ba4 <HAL_DMA_Start_IT+0x4b0>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d108      	bne.n	8006b36 <HAL_DMA_Start_IT+0x442>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0201 	orr.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
 8006b34:	e012      	b.n	8006b5c <HAL_DMA_Start_IT+0x468>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f042 0201 	orr.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]
 8006b46:	e009      	b.n	8006b5c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	40020010 	.word	0x40020010
 8006b6c:	40020028 	.word	0x40020028
 8006b70:	40020040 	.word	0x40020040
 8006b74:	40020058 	.word	0x40020058
 8006b78:	40020070 	.word	0x40020070
 8006b7c:	40020088 	.word	0x40020088
 8006b80:	400200a0 	.word	0x400200a0
 8006b84:	400200b8 	.word	0x400200b8
 8006b88:	40020410 	.word	0x40020410
 8006b8c:	40020428 	.word	0x40020428
 8006b90:	40020440 	.word	0x40020440
 8006b94:	40020458 	.word	0x40020458
 8006b98:	40020470 	.word	0x40020470
 8006b9c:	40020488 	.word	0x40020488
 8006ba0:	400204a0 	.word	0x400204a0
 8006ba4:	400204b8 	.word	0x400204b8
 8006ba8:	58025408 	.word	0x58025408
 8006bac:	5802541c 	.word	0x5802541c
 8006bb0:	58025430 	.word	0x58025430
 8006bb4:	58025444 	.word	0x58025444
 8006bb8:	58025458 	.word	0x58025458
 8006bbc:	5802546c 	.word	0x5802546c
 8006bc0:	58025480 	.word	0x58025480
 8006bc4:	58025494 	.word	0x58025494

08006bc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006bd0:	f7fe ff02 	bl	80059d8 <HAL_GetTick>
 8006bd4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e2dc      	b.n	800719a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d008      	beq.n	8006bfe <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2280      	movs	r2, #128	; 0x80
 8006bf0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e2cd      	b.n	800719a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a76      	ldr	r2, [pc, #472]	; (8006ddc <HAL_DMA_Abort+0x214>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d04a      	beq.n	8006c9e <HAL_DMA_Abort+0xd6>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a74      	ldr	r2, [pc, #464]	; (8006de0 <HAL_DMA_Abort+0x218>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d045      	beq.n	8006c9e <HAL_DMA_Abort+0xd6>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a73      	ldr	r2, [pc, #460]	; (8006de4 <HAL_DMA_Abort+0x21c>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d040      	beq.n	8006c9e <HAL_DMA_Abort+0xd6>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a71      	ldr	r2, [pc, #452]	; (8006de8 <HAL_DMA_Abort+0x220>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d03b      	beq.n	8006c9e <HAL_DMA_Abort+0xd6>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a70      	ldr	r2, [pc, #448]	; (8006dec <HAL_DMA_Abort+0x224>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d036      	beq.n	8006c9e <HAL_DMA_Abort+0xd6>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a6e      	ldr	r2, [pc, #440]	; (8006df0 <HAL_DMA_Abort+0x228>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d031      	beq.n	8006c9e <HAL_DMA_Abort+0xd6>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a6d      	ldr	r2, [pc, #436]	; (8006df4 <HAL_DMA_Abort+0x22c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d02c      	beq.n	8006c9e <HAL_DMA_Abort+0xd6>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a6b      	ldr	r2, [pc, #428]	; (8006df8 <HAL_DMA_Abort+0x230>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d027      	beq.n	8006c9e <HAL_DMA_Abort+0xd6>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a6a      	ldr	r2, [pc, #424]	; (8006dfc <HAL_DMA_Abort+0x234>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d022      	beq.n	8006c9e <HAL_DMA_Abort+0xd6>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a68      	ldr	r2, [pc, #416]	; (8006e00 <HAL_DMA_Abort+0x238>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d01d      	beq.n	8006c9e <HAL_DMA_Abort+0xd6>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a67      	ldr	r2, [pc, #412]	; (8006e04 <HAL_DMA_Abort+0x23c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d018      	beq.n	8006c9e <HAL_DMA_Abort+0xd6>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a65      	ldr	r2, [pc, #404]	; (8006e08 <HAL_DMA_Abort+0x240>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d013      	beq.n	8006c9e <HAL_DMA_Abort+0xd6>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a64      	ldr	r2, [pc, #400]	; (8006e0c <HAL_DMA_Abort+0x244>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d00e      	beq.n	8006c9e <HAL_DMA_Abort+0xd6>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a62      	ldr	r2, [pc, #392]	; (8006e10 <HAL_DMA_Abort+0x248>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d009      	beq.n	8006c9e <HAL_DMA_Abort+0xd6>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a61      	ldr	r2, [pc, #388]	; (8006e14 <HAL_DMA_Abort+0x24c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d004      	beq.n	8006c9e <HAL_DMA_Abort+0xd6>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a5f      	ldr	r2, [pc, #380]	; (8006e18 <HAL_DMA_Abort+0x250>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d101      	bne.n	8006ca2 <HAL_DMA_Abort+0xda>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e000      	b.n	8006ca4 <HAL_DMA_Abort+0xdc>
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d013      	beq.n	8006cd0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 021e 	bic.w	r2, r2, #30
 8006cb6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695a      	ldr	r2, [r3, #20]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cc6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	e00a      	b.n	8006ce6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 020e 	bic.w	r2, r2, #14
 8006cde:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a3c      	ldr	r2, [pc, #240]	; (8006ddc <HAL_DMA_Abort+0x214>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d072      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a3a      	ldr	r2, [pc, #232]	; (8006de0 <HAL_DMA_Abort+0x218>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d06d      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a39      	ldr	r2, [pc, #228]	; (8006de4 <HAL_DMA_Abort+0x21c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d068      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a37      	ldr	r2, [pc, #220]	; (8006de8 <HAL_DMA_Abort+0x220>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d063      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a36      	ldr	r2, [pc, #216]	; (8006dec <HAL_DMA_Abort+0x224>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d05e      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a34      	ldr	r2, [pc, #208]	; (8006df0 <HAL_DMA_Abort+0x228>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d059      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a33      	ldr	r2, [pc, #204]	; (8006df4 <HAL_DMA_Abort+0x22c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d054      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a31      	ldr	r2, [pc, #196]	; (8006df8 <HAL_DMA_Abort+0x230>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d04f      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a30      	ldr	r2, [pc, #192]	; (8006dfc <HAL_DMA_Abort+0x234>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d04a      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a2e      	ldr	r2, [pc, #184]	; (8006e00 <HAL_DMA_Abort+0x238>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d045      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a2d      	ldr	r2, [pc, #180]	; (8006e04 <HAL_DMA_Abort+0x23c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d040      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a2b      	ldr	r2, [pc, #172]	; (8006e08 <HAL_DMA_Abort+0x240>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d03b      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a2a      	ldr	r2, [pc, #168]	; (8006e0c <HAL_DMA_Abort+0x244>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d036      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a28      	ldr	r2, [pc, #160]	; (8006e10 <HAL_DMA_Abort+0x248>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d031      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a27      	ldr	r2, [pc, #156]	; (8006e14 <HAL_DMA_Abort+0x24c>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d02c      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a25      	ldr	r2, [pc, #148]	; (8006e18 <HAL_DMA_Abort+0x250>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d027      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a24      	ldr	r2, [pc, #144]	; (8006e1c <HAL_DMA_Abort+0x254>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d022      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a22      	ldr	r2, [pc, #136]	; (8006e20 <HAL_DMA_Abort+0x258>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d01d      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a21      	ldr	r2, [pc, #132]	; (8006e24 <HAL_DMA_Abort+0x25c>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d018      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a1f      	ldr	r2, [pc, #124]	; (8006e28 <HAL_DMA_Abort+0x260>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d013      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a1e      	ldr	r2, [pc, #120]	; (8006e2c <HAL_DMA_Abort+0x264>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d00e      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a1c      	ldr	r2, [pc, #112]	; (8006e30 <HAL_DMA_Abort+0x268>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d009      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a1b      	ldr	r2, [pc, #108]	; (8006e34 <HAL_DMA_Abort+0x26c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d004      	beq.n	8006dd6 <HAL_DMA_Abort+0x20e>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a19      	ldr	r2, [pc, #100]	; (8006e38 <HAL_DMA_Abort+0x270>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d132      	bne.n	8006e3c <HAL_DMA_Abort+0x274>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e031      	b.n	8006e3e <HAL_DMA_Abort+0x276>
 8006dda:	bf00      	nop
 8006ddc:	40020010 	.word	0x40020010
 8006de0:	40020028 	.word	0x40020028
 8006de4:	40020040 	.word	0x40020040
 8006de8:	40020058 	.word	0x40020058
 8006dec:	40020070 	.word	0x40020070
 8006df0:	40020088 	.word	0x40020088
 8006df4:	400200a0 	.word	0x400200a0
 8006df8:	400200b8 	.word	0x400200b8
 8006dfc:	40020410 	.word	0x40020410
 8006e00:	40020428 	.word	0x40020428
 8006e04:	40020440 	.word	0x40020440
 8006e08:	40020458 	.word	0x40020458
 8006e0c:	40020470 	.word	0x40020470
 8006e10:	40020488 	.word	0x40020488
 8006e14:	400204a0 	.word	0x400204a0
 8006e18:	400204b8 	.word	0x400204b8
 8006e1c:	58025408 	.word	0x58025408
 8006e20:	5802541c 	.word	0x5802541c
 8006e24:	58025430 	.word	0x58025430
 8006e28:	58025444 	.word	0x58025444
 8006e2c:	58025458 	.word	0x58025458
 8006e30:	5802546c 	.word	0x5802546c
 8006e34:	58025480 	.word	0x58025480
 8006e38:	58025494 	.word	0x58025494
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d007      	beq.n	8006e52 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e50:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a6d      	ldr	r2, [pc, #436]	; (800700c <HAL_DMA_Abort+0x444>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d04a      	beq.n	8006ef2 <HAL_DMA_Abort+0x32a>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4a6b      	ldr	r2, [pc, #428]	; (8007010 <HAL_DMA_Abort+0x448>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d045      	beq.n	8006ef2 <HAL_DMA_Abort+0x32a>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a6a      	ldr	r2, [pc, #424]	; (8007014 <HAL_DMA_Abort+0x44c>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d040      	beq.n	8006ef2 <HAL_DMA_Abort+0x32a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a68      	ldr	r2, [pc, #416]	; (8007018 <HAL_DMA_Abort+0x450>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d03b      	beq.n	8006ef2 <HAL_DMA_Abort+0x32a>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a67      	ldr	r2, [pc, #412]	; (800701c <HAL_DMA_Abort+0x454>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d036      	beq.n	8006ef2 <HAL_DMA_Abort+0x32a>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a65      	ldr	r2, [pc, #404]	; (8007020 <HAL_DMA_Abort+0x458>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d031      	beq.n	8006ef2 <HAL_DMA_Abort+0x32a>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a64      	ldr	r2, [pc, #400]	; (8007024 <HAL_DMA_Abort+0x45c>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d02c      	beq.n	8006ef2 <HAL_DMA_Abort+0x32a>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a62      	ldr	r2, [pc, #392]	; (8007028 <HAL_DMA_Abort+0x460>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d027      	beq.n	8006ef2 <HAL_DMA_Abort+0x32a>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a61      	ldr	r2, [pc, #388]	; (800702c <HAL_DMA_Abort+0x464>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d022      	beq.n	8006ef2 <HAL_DMA_Abort+0x32a>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a5f      	ldr	r2, [pc, #380]	; (8007030 <HAL_DMA_Abort+0x468>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d01d      	beq.n	8006ef2 <HAL_DMA_Abort+0x32a>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a5e      	ldr	r2, [pc, #376]	; (8007034 <HAL_DMA_Abort+0x46c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d018      	beq.n	8006ef2 <HAL_DMA_Abort+0x32a>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a5c      	ldr	r2, [pc, #368]	; (8007038 <HAL_DMA_Abort+0x470>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d013      	beq.n	8006ef2 <HAL_DMA_Abort+0x32a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a5b      	ldr	r2, [pc, #364]	; (800703c <HAL_DMA_Abort+0x474>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d00e      	beq.n	8006ef2 <HAL_DMA_Abort+0x32a>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a59      	ldr	r2, [pc, #356]	; (8007040 <HAL_DMA_Abort+0x478>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d009      	beq.n	8006ef2 <HAL_DMA_Abort+0x32a>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a58      	ldr	r2, [pc, #352]	; (8007044 <HAL_DMA_Abort+0x47c>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d004      	beq.n	8006ef2 <HAL_DMA_Abort+0x32a>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a56      	ldr	r2, [pc, #344]	; (8007048 <HAL_DMA_Abort+0x480>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d108      	bne.n	8006f04 <HAL_DMA_Abort+0x33c>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0201 	bic.w	r2, r2, #1
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	e007      	b.n	8006f14 <HAL_DMA_Abort+0x34c>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0201 	bic.w	r2, r2, #1
 8006f12:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006f14:	e013      	b.n	8006f3e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006f16:	f7fe fd5f 	bl	80059d8 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b05      	cmp	r3, #5
 8006f22:	d90c      	bls.n	8006f3e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2220      	movs	r2, #32
 8006f28:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2203      	movs	r2, #3
 8006f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e12d      	b.n	800719a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0301 	and.w	r3, r3, #1
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1e5      	bne.n	8006f16 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a2f      	ldr	r2, [pc, #188]	; (800700c <HAL_DMA_Abort+0x444>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d04a      	beq.n	8006fea <HAL_DMA_Abort+0x422>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a2d      	ldr	r2, [pc, #180]	; (8007010 <HAL_DMA_Abort+0x448>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d045      	beq.n	8006fea <HAL_DMA_Abort+0x422>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a2c      	ldr	r2, [pc, #176]	; (8007014 <HAL_DMA_Abort+0x44c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d040      	beq.n	8006fea <HAL_DMA_Abort+0x422>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a2a      	ldr	r2, [pc, #168]	; (8007018 <HAL_DMA_Abort+0x450>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d03b      	beq.n	8006fea <HAL_DMA_Abort+0x422>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a29      	ldr	r2, [pc, #164]	; (800701c <HAL_DMA_Abort+0x454>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d036      	beq.n	8006fea <HAL_DMA_Abort+0x422>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a27      	ldr	r2, [pc, #156]	; (8007020 <HAL_DMA_Abort+0x458>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d031      	beq.n	8006fea <HAL_DMA_Abort+0x422>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a26      	ldr	r2, [pc, #152]	; (8007024 <HAL_DMA_Abort+0x45c>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d02c      	beq.n	8006fea <HAL_DMA_Abort+0x422>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a24      	ldr	r2, [pc, #144]	; (8007028 <HAL_DMA_Abort+0x460>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d027      	beq.n	8006fea <HAL_DMA_Abort+0x422>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a23      	ldr	r2, [pc, #140]	; (800702c <HAL_DMA_Abort+0x464>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d022      	beq.n	8006fea <HAL_DMA_Abort+0x422>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a21      	ldr	r2, [pc, #132]	; (8007030 <HAL_DMA_Abort+0x468>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d01d      	beq.n	8006fea <HAL_DMA_Abort+0x422>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a20      	ldr	r2, [pc, #128]	; (8007034 <HAL_DMA_Abort+0x46c>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d018      	beq.n	8006fea <HAL_DMA_Abort+0x422>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1e      	ldr	r2, [pc, #120]	; (8007038 <HAL_DMA_Abort+0x470>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <HAL_DMA_Abort+0x422>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1d      	ldr	r2, [pc, #116]	; (800703c <HAL_DMA_Abort+0x474>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00e      	beq.n	8006fea <HAL_DMA_Abort+0x422>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1b      	ldr	r2, [pc, #108]	; (8007040 <HAL_DMA_Abort+0x478>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d009      	beq.n	8006fea <HAL_DMA_Abort+0x422>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1a      	ldr	r2, [pc, #104]	; (8007044 <HAL_DMA_Abort+0x47c>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d004      	beq.n	8006fea <HAL_DMA_Abort+0x422>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a18      	ldr	r2, [pc, #96]	; (8007048 <HAL_DMA_Abort+0x480>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d101      	bne.n	8006fee <HAL_DMA_Abort+0x426>
 8006fea:	2301      	movs	r3, #1
 8006fec:	e000      	b.n	8006ff0 <HAL_DMA_Abort+0x428>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d02b      	beq.n	800704c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ff8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ffe:	f003 031f 	and.w	r3, r3, #31
 8007002:	223f      	movs	r2, #63	; 0x3f
 8007004:	409a      	lsls	r2, r3
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	609a      	str	r2, [r3, #8]
 800700a:	e02a      	b.n	8007062 <HAL_DMA_Abort+0x49a>
 800700c:	40020010 	.word	0x40020010
 8007010:	40020028 	.word	0x40020028
 8007014:	40020040 	.word	0x40020040
 8007018:	40020058 	.word	0x40020058
 800701c:	40020070 	.word	0x40020070
 8007020:	40020088 	.word	0x40020088
 8007024:	400200a0 	.word	0x400200a0
 8007028:	400200b8 	.word	0x400200b8
 800702c:	40020410 	.word	0x40020410
 8007030:	40020428 	.word	0x40020428
 8007034:	40020440 	.word	0x40020440
 8007038:	40020458 	.word	0x40020458
 800703c:	40020470 	.word	0x40020470
 8007040:	40020488 	.word	0x40020488
 8007044:	400204a0 	.word	0x400204a0
 8007048:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007050:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007056:	f003 031f 	and.w	r3, r3, #31
 800705a:	2201      	movs	r2, #1
 800705c:	409a      	lsls	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a4f      	ldr	r2, [pc, #316]	; (80071a4 <HAL_DMA_Abort+0x5dc>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d072      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a4d      	ldr	r2, [pc, #308]	; (80071a8 <HAL_DMA_Abort+0x5e0>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d06d      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a4c      	ldr	r2, [pc, #304]	; (80071ac <HAL_DMA_Abort+0x5e4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d068      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a4a      	ldr	r2, [pc, #296]	; (80071b0 <HAL_DMA_Abort+0x5e8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d063      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a49      	ldr	r2, [pc, #292]	; (80071b4 <HAL_DMA_Abort+0x5ec>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d05e      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a47      	ldr	r2, [pc, #284]	; (80071b8 <HAL_DMA_Abort+0x5f0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d059      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a46      	ldr	r2, [pc, #280]	; (80071bc <HAL_DMA_Abort+0x5f4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d054      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a44      	ldr	r2, [pc, #272]	; (80071c0 <HAL_DMA_Abort+0x5f8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d04f      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a43      	ldr	r2, [pc, #268]	; (80071c4 <HAL_DMA_Abort+0x5fc>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d04a      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a41      	ldr	r2, [pc, #260]	; (80071c8 <HAL_DMA_Abort+0x600>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d045      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a40      	ldr	r2, [pc, #256]	; (80071cc <HAL_DMA_Abort+0x604>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d040      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a3e      	ldr	r2, [pc, #248]	; (80071d0 <HAL_DMA_Abort+0x608>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d03b      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a3d      	ldr	r2, [pc, #244]	; (80071d4 <HAL_DMA_Abort+0x60c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d036      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a3b      	ldr	r2, [pc, #236]	; (80071d8 <HAL_DMA_Abort+0x610>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d031      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a3a      	ldr	r2, [pc, #232]	; (80071dc <HAL_DMA_Abort+0x614>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d02c      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a38      	ldr	r2, [pc, #224]	; (80071e0 <HAL_DMA_Abort+0x618>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d027      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a37      	ldr	r2, [pc, #220]	; (80071e4 <HAL_DMA_Abort+0x61c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d022      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a35      	ldr	r2, [pc, #212]	; (80071e8 <HAL_DMA_Abort+0x620>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d01d      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a34      	ldr	r2, [pc, #208]	; (80071ec <HAL_DMA_Abort+0x624>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d018      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a32      	ldr	r2, [pc, #200]	; (80071f0 <HAL_DMA_Abort+0x628>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d013      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a31      	ldr	r2, [pc, #196]	; (80071f4 <HAL_DMA_Abort+0x62c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d00e      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a2f      	ldr	r2, [pc, #188]	; (80071f8 <HAL_DMA_Abort+0x630>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d009      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a2e      	ldr	r2, [pc, #184]	; (80071fc <HAL_DMA_Abort+0x634>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d004      	beq.n	8007152 <HAL_DMA_Abort+0x58a>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a2c      	ldr	r2, [pc, #176]	; (8007200 <HAL_DMA_Abort+0x638>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d101      	bne.n	8007156 <HAL_DMA_Abort+0x58e>
 8007152:	2301      	movs	r3, #1
 8007154:	e000      	b.n	8007158 <HAL_DMA_Abort+0x590>
 8007156:	2300      	movs	r3, #0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d015      	beq.n	8007188 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007164:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00c      	beq.n	8007188 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007178:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800717c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007186:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop
 80071a4:	40020010 	.word	0x40020010
 80071a8:	40020028 	.word	0x40020028
 80071ac:	40020040 	.word	0x40020040
 80071b0:	40020058 	.word	0x40020058
 80071b4:	40020070 	.word	0x40020070
 80071b8:	40020088 	.word	0x40020088
 80071bc:	400200a0 	.word	0x400200a0
 80071c0:	400200b8 	.word	0x400200b8
 80071c4:	40020410 	.word	0x40020410
 80071c8:	40020428 	.word	0x40020428
 80071cc:	40020440 	.word	0x40020440
 80071d0:	40020458 	.word	0x40020458
 80071d4:	40020470 	.word	0x40020470
 80071d8:	40020488 	.word	0x40020488
 80071dc:	400204a0 	.word	0x400204a0
 80071e0:	400204b8 	.word	0x400204b8
 80071e4:	58025408 	.word	0x58025408
 80071e8:	5802541c 	.word	0x5802541c
 80071ec:	58025430 	.word	0x58025430
 80071f0:	58025444 	.word	0x58025444
 80071f4:	58025458 	.word	0x58025458
 80071f8:	5802546c 	.word	0x5802546c
 80071fc:	58025480 	.word	0x58025480
 8007200:	58025494 	.word	0x58025494

08007204 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e205      	b.n	8007622 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b02      	cmp	r3, #2
 8007220:	d004      	beq.n	800722c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2280      	movs	r2, #128	; 0x80
 8007226:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e1fa      	b.n	8007622 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a8c      	ldr	r2, [pc, #560]	; (8007464 <HAL_DMA_Abort_IT+0x260>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d04a      	beq.n	80072cc <HAL_DMA_Abort_IT+0xc8>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a8b      	ldr	r2, [pc, #556]	; (8007468 <HAL_DMA_Abort_IT+0x264>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d045      	beq.n	80072cc <HAL_DMA_Abort_IT+0xc8>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a89      	ldr	r2, [pc, #548]	; (800746c <HAL_DMA_Abort_IT+0x268>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d040      	beq.n	80072cc <HAL_DMA_Abort_IT+0xc8>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a88      	ldr	r2, [pc, #544]	; (8007470 <HAL_DMA_Abort_IT+0x26c>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d03b      	beq.n	80072cc <HAL_DMA_Abort_IT+0xc8>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a86      	ldr	r2, [pc, #536]	; (8007474 <HAL_DMA_Abort_IT+0x270>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d036      	beq.n	80072cc <HAL_DMA_Abort_IT+0xc8>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a85      	ldr	r2, [pc, #532]	; (8007478 <HAL_DMA_Abort_IT+0x274>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d031      	beq.n	80072cc <HAL_DMA_Abort_IT+0xc8>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a83      	ldr	r2, [pc, #524]	; (800747c <HAL_DMA_Abort_IT+0x278>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d02c      	beq.n	80072cc <HAL_DMA_Abort_IT+0xc8>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a82      	ldr	r2, [pc, #520]	; (8007480 <HAL_DMA_Abort_IT+0x27c>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d027      	beq.n	80072cc <HAL_DMA_Abort_IT+0xc8>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a80      	ldr	r2, [pc, #512]	; (8007484 <HAL_DMA_Abort_IT+0x280>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d022      	beq.n	80072cc <HAL_DMA_Abort_IT+0xc8>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a7f      	ldr	r2, [pc, #508]	; (8007488 <HAL_DMA_Abort_IT+0x284>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d01d      	beq.n	80072cc <HAL_DMA_Abort_IT+0xc8>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a7d      	ldr	r2, [pc, #500]	; (800748c <HAL_DMA_Abort_IT+0x288>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d018      	beq.n	80072cc <HAL_DMA_Abort_IT+0xc8>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a7c      	ldr	r2, [pc, #496]	; (8007490 <HAL_DMA_Abort_IT+0x28c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d013      	beq.n	80072cc <HAL_DMA_Abort_IT+0xc8>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a7a      	ldr	r2, [pc, #488]	; (8007494 <HAL_DMA_Abort_IT+0x290>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d00e      	beq.n	80072cc <HAL_DMA_Abort_IT+0xc8>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a79      	ldr	r2, [pc, #484]	; (8007498 <HAL_DMA_Abort_IT+0x294>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d009      	beq.n	80072cc <HAL_DMA_Abort_IT+0xc8>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a77      	ldr	r2, [pc, #476]	; (800749c <HAL_DMA_Abort_IT+0x298>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d004      	beq.n	80072cc <HAL_DMA_Abort_IT+0xc8>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a76      	ldr	r2, [pc, #472]	; (80074a0 <HAL_DMA_Abort_IT+0x29c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d101      	bne.n	80072d0 <HAL_DMA_Abort_IT+0xcc>
 80072cc:	2301      	movs	r3, #1
 80072ce:	e000      	b.n	80072d2 <HAL_DMA_Abort_IT+0xce>
 80072d0:	2300      	movs	r3, #0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d065      	beq.n	80073a2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2204      	movs	r2, #4
 80072da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a60      	ldr	r2, [pc, #384]	; (8007464 <HAL_DMA_Abort_IT+0x260>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d04a      	beq.n	800737e <HAL_DMA_Abort_IT+0x17a>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a5e      	ldr	r2, [pc, #376]	; (8007468 <HAL_DMA_Abort_IT+0x264>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d045      	beq.n	800737e <HAL_DMA_Abort_IT+0x17a>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a5d      	ldr	r2, [pc, #372]	; (800746c <HAL_DMA_Abort_IT+0x268>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d040      	beq.n	800737e <HAL_DMA_Abort_IT+0x17a>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a5b      	ldr	r2, [pc, #364]	; (8007470 <HAL_DMA_Abort_IT+0x26c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d03b      	beq.n	800737e <HAL_DMA_Abort_IT+0x17a>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a5a      	ldr	r2, [pc, #360]	; (8007474 <HAL_DMA_Abort_IT+0x270>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d036      	beq.n	800737e <HAL_DMA_Abort_IT+0x17a>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a58      	ldr	r2, [pc, #352]	; (8007478 <HAL_DMA_Abort_IT+0x274>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d031      	beq.n	800737e <HAL_DMA_Abort_IT+0x17a>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a57      	ldr	r2, [pc, #348]	; (800747c <HAL_DMA_Abort_IT+0x278>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d02c      	beq.n	800737e <HAL_DMA_Abort_IT+0x17a>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a55      	ldr	r2, [pc, #340]	; (8007480 <HAL_DMA_Abort_IT+0x27c>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d027      	beq.n	800737e <HAL_DMA_Abort_IT+0x17a>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a54      	ldr	r2, [pc, #336]	; (8007484 <HAL_DMA_Abort_IT+0x280>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d022      	beq.n	800737e <HAL_DMA_Abort_IT+0x17a>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a52      	ldr	r2, [pc, #328]	; (8007488 <HAL_DMA_Abort_IT+0x284>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d01d      	beq.n	800737e <HAL_DMA_Abort_IT+0x17a>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a51      	ldr	r2, [pc, #324]	; (800748c <HAL_DMA_Abort_IT+0x288>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d018      	beq.n	800737e <HAL_DMA_Abort_IT+0x17a>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a4f      	ldr	r2, [pc, #316]	; (8007490 <HAL_DMA_Abort_IT+0x28c>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d013      	beq.n	800737e <HAL_DMA_Abort_IT+0x17a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a4e      	ldr	r2, [pc, #312]	; (8007494 <HAL_DMA_Abort_IT+0x290>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00e      	beq.n	800737e <HAL_DMA_Abort_IT+0x17a>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a4c      	ldr	r2, [pc, #304]	; (8007498 <HAL_DMA_Abort_IT+0x294>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d009      	beq.n	800737e <HAL_DMA_Abort_IT+0x17a>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a4b      	ldr	r2, [pc, #300]	; (800749c <HAL_DMA_Abort_IT+0x298>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d004      	beq.n	800737e <HAL_DMA_Abort_IT+0x17a>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a49      	ldr	r2, [pc, #292]	; (80074a0 <HAL_DMA_Abort_IT+0x29c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d108      	bne.n	8007390 <HAL_DMA_Abort_IT+0x18c>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0201 	bic.w	r2, r2, #1
 800738c:	601a      	str	r2, [r3, #0]
 800738e:	e147      	b.n	8007620 <HAL_DMA_Abort_IT+0x41c>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f022 0201 	bic.w	r2, r2, #1
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	e13e      	b.n	8007620 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 020e 	bic.w	r2, r2, #14
 80073b0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a2b      	ldr	r2, [pc, #172]	; (8007464 <HAL_DMA_Abort_IT+0x260>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d04a      	beq.n	8007452 <HAL_DMA_Abort_IT+0x24e>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a29      	ldr	r2, [pc, #164]	; (8007468 <HAL_DMA_Abort_IT+0x264>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d045      	beq.n	8007452 <HAL_DMA_Abort_IT+0x24e>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a28      	ldr	r2, [pc, #160]	; (800746c <HAL_DMA_Abort_IT+0x268>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d040      	beq.n	8007452 <HAL_DMA_Abort_IT+0x24e>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a26      	ldr	r2, [pc, #152]	; (8007470 <HAL_DMA_Abort_IT+0x26c>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d03b      	beq.n	8007452 <HAL_DMA_Abort_IT+0x24e>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a25      	ldr	r2, [pc, #148]	; (8007474 <HAL_DMA_Abort_IT+0x270>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d036      	beq.n	8007452 <HAL_DMA_Abort_IT+0x24e>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a23      	ldr	r2, [pc, #140]	; (8007478 <HAL_DMA_Abort_IT+0x274>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d031      	beq.n	8007452 <HAL_DMA_Abort_IT+0x24e>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a22      	ldr	r2, [pc, #136]	; (800747c <HAL_DMA_Abort_IT+0x278>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d02c      	beq.n	8007452 <HAL_DMA_Abort_IT+0x24e>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a20      	ldr	r2, [pc, #128]	; (8007480 <HAL_DMA_Abort_IT+0x27c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d027      	beq.n	8007452 <HAL_DMA_Abort_IT+0x24e>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a1f      	ldr	r2, [pc, #124]	; (8007484 <HAL_DMA_Abort_IT+0x280>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d022      	beq.n	8007452 <HAL_DMA_Abort_IT+0x24e>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a1d      	ldr	r2, [pc, #116]	; (8007488 <HAL_DMA_Abort_IT+0x284>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d01d      	beq.n	8007452 <HAL_DMA_Abort_IT+0x24e>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a1c      	ldr	r2, [pc, #112]	; (800748c <HAL_DMA_Abort_IT+0x288>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d018      	beq.n	8007452 <HAL_DMA_Abort_IT+0x24e>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a1a      	ldr	r2, [pc, #104]	; (8007490 <HAL_DMA_Abort_IT+0x28c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d013      	beq.n	8007452 <HAL_DMA_Abort_IT+0x24e>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a19      	ldr	r2, [pc, #100]	; (8007494 <HAL_DMA_Abort_IT+0x290>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d00e      	beq.n	8007452 <HAL_DMA_Abort_IT+0x24e>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a17      	ldr	r2, [pc, #92]	; (8007498 <HAL_DMA_Abort_IT+0x294>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d009      	beq.n	8007452 <HAL_DMA_Abort_IT+0x24e>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a16      	ldr	r2, [pc, #88]	; (800749c <HAL_DMA_Abort_IT+0x298>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d004      	beq.n	8007452 <HAL_DMA_Abort_IT+0x24e>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a14      	ldr	r2, [pc, #80]	; (80074a0 <HAL_DMA_Abort_IT+0x29c>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d128      	bne.n	80074a4 <HAL_DMA_Abort_IT+0x2a0>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f022 0201 	bic.w	r2, r2, #1
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	e027      	b.n	80074b4 <HAL_DMA_Abort_IT+0x2b0>
 8007464:	40020010 	.word	0x40020010
 8007468:	40020028 	.word	0x40020028
 800746c:	40020040 	.word	0x40020040
 8007470:	40020058 	.word	0x40020058
 8007474:	40020070 	.word	0x40020070
 8007478:	40020088 	.word	0x40020088
 800747c:	400200a0 	.word	0x400200a0
 8007480:	400200b8 	.word	0x400200b8
 8007484:	40020410 	.word	0x40020410
 8007488:	40020428 	.word	0x40020428
 800748c:	40020440 	.word	0x40020440
 8007490:	40020458 	.word	0x40020458
 8007494:	40020470 	.word	0x40020470
 8007498:	40020488 	.word	0x40020488
 800749c:	400204a0 	.word	0x400204a0
 80074a0:	400204b8 	.word	0x400204b8
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	681a      	ldr	r2, [r3, #0]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f022 0201 	bic.w	r2, r2, #1
 80074b2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a5c      	ldr	r2, [pc, #368]	; (800762c <HAL_DMA_Abort_IT+0x428>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d072      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a5b      	ldr	r2, [pc, #364]	; (8007630 <HAL_DMA_Abort_IT+0x42c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d06d      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a59      	ldr	r2, [pc, #356]	; (8007634 <HAL_DMA_Abort_IT+0x430>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d068      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a58      	ldr	r2, [pc, #352]	; (8007638 <HAL_DMA_Abort_IT+0x434>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d063      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a56      	ldr	r2, [pc, #344]	; (800763c <HAL_DMA_Abort_IT+0x438>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d05e      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a55      	ldr	r2, [pc, #340]	; (8007640 <HAL_DMA_Abort_IT+0x43c>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d059      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a53      	ldr	r2, [pc, #332]	; (8007644 <HAL_DMA_Abort_IT+0x440>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d054      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a52      	ldr	r2, [pc, #328]	; (8007648 <HAL_DMA_Abort_IT+0x444>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d04f      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a50      	ldr	r2, [pc, #320]	; (800764c <HAL_DMA_Abort_IT+0x448>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d04a      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a4f      	ldr	r2, [pc, #316]	; (8007650 <HAL_DMA_Abort_IT+0x44c>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d045      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a4d      	ldr	r2, [pc, #308]	; (8007654 <HAL_DMA_Abort_IT+0x450>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d040      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a4c      	ldr	r2, [pc, #304]	; (8007658 <HAL_DMA_Abort_IT+0x454>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d03b      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a4a      	ldr	r2, [pc, #296]	; (800765c <HAL_DMA_Abort_IT+0x458>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d036      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a49      	ldr	r2, [pc, #292]	; (8007660 <HAL_DMA_Abort_IT+0x45c>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d031      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a47      	ldr	r2, [pc, #284]	; (8007664 <HAL_DMA_Abort_IT+0x460>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d02c      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a46      	ldr	r2, [pc, #280]	; (8007668 <HAL_DMA_Abort_IT+0x464>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d027      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a44      	ldr	r2, [pc, #272]	; (800766c <HAL_DMA_Abort_IT+0x468>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d022      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a43      	ldr	r2, [pc, #268]	; (8007670 <HAL_DMA_Abort_IT+0x46c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d01d      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a41      	ldr	r2, [pc, #260]	; (8007674 <HAL_DMA_Abort_IT+0x470>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d018      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a40      	ldr	r2, [pc, #256]	; (8007678 <HAL_DMA_Abort_IT+0x474>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d013      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a3e      	ldr	r2, [pc, #248]	; (800767c <HAL_DMA_Abort_IT+0x478>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00e      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a3d      	ldr	r2, [pc, #244]	; (8007680 <HAL_DMA_Abort_IT+0x47c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d009      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a3b      	ldr	r2, [pc, #236]	; (8007684 <HAL_DMA_Abort_IT+0x480>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d004      	beq.n	80075a4 <HAL_DMA_Abort_IT+0x3a0>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a3a      	ldr	r2, [pc, #232]	; (8007688 <HAL_DMA_Abort_IT+0x484>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d101      	bne.n	80075a8 <HAL_DMA_Abort_IT+0x3a4>
 80075a4:	2301      	movs	r3, #1
 80075a6:	e000      	b.n	80075aa <HAL_DMA_Abort_IT+0x3a6>
 80075a8:	2300      	movs	r3, #0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d028      	beq.n	8007600 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075bc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075c8:	f003 031f 	and.w	r3, r3, #31
 80075cc:	2201      	movs	r2, #1
 80075ce:	409a      	lsls	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80075dc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d00c      	beq.n	8007600 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075f4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fa:	687a      	ldr	r2, [r7, #4]
 80075fc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80075fe:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007614:	2b00      	cmp	r3, #0
 8007616:	d003      	beq.n	8007620 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	40020010 	.word	0x40020010
 8007630:	40020028 	.word	0x40020028
 8007634:	40020040 	.word	0x40020040
 8007638:	40020058 	.word	0x40020058
 800763c:	40020070 	.word	0x40020070
 8007640:	40020088 	.word	0x40020088
 8007644:	400200a0 	.word	0x400200a0
 8007648:	400200b8 	.word	0x400200b8
 800764c:	40020410 	.word	0x40020410
 8007650:	40020428 	.word	0x40020428
 8007654:	40020440 	.word	0x40020440
 8007658:	40020458 	.word	0x40020458
 800765c:	40020470 	.word	0x40020470
 8007660:	40020488 	.word	0x40020488
 8007664:	400204a0 	.word	0x400204a0
 8007668:	400204b8 	.word	0x400204b8
 800766c:	58025408 	.word	0x58025408
 8007670:	5802541c 	.word	0x5802541c
 8007674:	58025430 	.word	0x58025430
 8007678:	58025444 	.word	0x58025444
 800767c:	58025458 	.word	0x58025458
 8007680:	5802546c 	.word	0x5802546c
 8007684:	58025480 	.word	0x58025480
 8007688:	58025494 	.word	0x58025494

0800768c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b08a      	sub	sp, #40	; 0x28
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007698:	4b67      	ldr	r3, [pc, #412]	; (8007838 <HAL_DMA_IRQHandler+0x1ac>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a67      	ldr	r2, [pc, #412]	; (800783c <HAL_DMA_IRQHandler+0x1b0>)
 800769e:	fba2 2303 	umull	r2, r3, r2, r3
 80076a2:	0a9b      	lsrs	r3, r3, #10
 80076a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076aa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80076b2:	6a3b      	ldr	r3, [r7, #32]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a5f      	ldr	r2, [pc, #380]	; (8007840 <HAL_DMA_IRQHandler+0x1b4>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d04a      	beq.n	800775e <HAL_DMA_IRQHandler+0xd2>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a5d      	ldr	r2, [pc, #372]	; (8007844 <HAL_DMA_IRQHandler+0x1b8>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d045      	beq.n	800775e <HAL_DMA_IRQHandler+0xd2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a5c      	ldr	r2, [pc, #368]	; (8007848 <HAL_DMA_IRQHandler+0x1bc>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d040      	beq.n	800775e <HAL_DMA_IRQHandler+0xd2>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a5a      	ldr	r2, [pc, #360]	; (800784c <HAL_DMA_IRQHandler+0x1c0>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d03b      	beq.n	800775e <HAL_DMA_IRQHandler+0xd2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a59      	ldr	r2, [pc, #356]	; (8007850 <HAL_DMA_IRQHandler+0x1c4>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d036      	beq.n	800775e <HAL_DMA_IRQHandler+0xd2>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a57      	ldr	r2, [pc, #348]	; (8007854 <HAL_DMA_IRQHandler+0x1c8>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d031      	beq.n	800775e <HAL_DMA_IRQHandler+0xd2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a56      	ldr	r2, [pc, #344]	; (8007858 <HAL_DMA_IRQHandler+0x1cc>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d02c      	beq.n	800775e <HAL_DMA_IRQHandler+0xd2>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a54      	ldr	r2, [pc, #336]	; (800785c <HAL_DMA_IRQHandler+0x1d0>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d027      	beq.n	800775e <HAL_DMA_IRQHandler+0xd2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a53      	ldr	r2, [pc, #332]	; (8007860 <HAL_DMA_IRQHandler+0x1d4>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d022      	beq.n	800775e <HAL_DMA_IRQHandler+0xd2>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a51      	ldr	r2, [pc, #324]	; (8007864 <HAL_DMA_IRQHandler+0x1d8>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d01d      	beq.n	800775e <HAL_DMA_IRQHandler+0xd2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a50      	ldr	r2, [pc, #320]	; (8007868 <HAL_DMA_IRQHandler+0x1dc>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d018      	beq.n	800775e <HAL_DMA_IRQHandler+0xd2>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a4e      	ldr	r2, [pc, #312]	; (800786c <HAL_DMA_IRQHandler+0x1e0>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d013      	beq.n	800775e <HAL_DMA_IRQHandler+0xd2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a4d      	ldr	r2, [pc, #308]	; (8007870 <HAL_DMA_IRQHandler+0x1e4>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00e      	beq.n	800775e <HAL_DMA_IRQHandler+0xd2>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a4b      	ldr	r2, [pc, #300]	; (8007874 <HAL_DMA_IRQHandler+0x1e8>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d009      	beq.n	800775e <HAL_DMA_IRQHandler+0xd2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a4a      	ldr	r2, [pc, #296]	; (8007878 <HAL_DMA_IRQHandler+0x1ec>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d004      	beq.n	800775e <HAL_DMA_IRQHandler+0xd2>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a48      	ldr	r2, [pc, #288]	; (800787c <HAL_DMA_IRQHandler+0x1f0>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d101      	bne.n	8007762 <HAL_DMA_IRQHandler+0xd6>
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <HAL_DMA_IRQHandler+0xd8>
 8007762:	2300      	movs	r3, #0
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 842b 	beq.w	8007fc0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800776e:	f003 031f 	and.w	r3, r3, #31
 8007772:	2208      	movs	r2, #8
 8007774:	409a      	lsls	r2, r3
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	4013      	ands	r3, r2
 800777a:	2b00      	cmp	r3, #0
 800777c:	f000 80a2 	beq.w	80078c4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a2e      	ldr	r2, [pc, #184]	; (8007840 <HAL_DMA_IRQHandler+0x1b4>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d04a      	beq.n	8007820 <HAL_DMA_IRQHandler+0x194>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a2d      	ldr	r2, [pc, #180]	; (8007844 <HAL_DMA_IRQHandler+0x1b8>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d045      	beq.n	8007820 <HAL_DMA_IRQHandler+0x194>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a2b      	ldr	r2, [pc, #172]	; (8007848 <HAL_DMA_IRQHandler+0x1bc>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d040      	beq.n	8007820 <HAL_DMA_IRQHandler+0x194>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a2a      	ldr	r2, [pc, #168]	; (800784c <HAL_DMA_IRQHandler+0x1c0>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d03b      	beq.n	8007820 <HAL_DMA_IRQHandler+0x194>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a28      	ldr	r2, [pc, #160]	; (8007850 <HAL_DMA_IRQHandler+0x1c4>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d036      	beq.n	8007820 <HAL_DMA_IRQHandler+0x194>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a27      	ldr	r2, [pc, #156]	; (8007854 <HAL_DMA_IRQHandler+0x1c8>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d031      	beq.n	8007820 <HAL_DMA_IRQHandler+0x194>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a25      	ldr	r2, [pc, #148]	; (8007858 <HAL_DMA_IRQHandler+0x1cc>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d02c      	beq.n	8007820 <HAL_DMA_IRQHandler+0x194>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a24      	ldr	r2, [pc, #144]	; (800785c <HAL_DMA_IRQHandler+0x1d0>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d027      	beq.n	8007820 <HAL_DMA_IRQHandler+0x194>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a22      	ldr	r2, [pc, #136]	; (8007860 <HAL_DMA_IRQHandler+0x1d4>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d022      	beq.n	8007820 <HAL_DMA_IRQHandler+0x194>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a21      	ldr	r2, [pc, #132]	; (8007864 <HAL_DMA_IRQHandler+0x1d8>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d01d      	beq.n	8007820 <HAL_DMA_IRQHandler+0x194>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a1f      	ldr	r2, [pc, #124]	; (8007868 <HAL_DMA_IRQHandler+0x1dc>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d018      	beq.n	8007820 <HAL_DMA_IRQHandler+0x194>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a1e      	ldr	r2, [pc, #120]	; (800786c <HAL_DMA_IRQHandler+0x1e0>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d013      	beq.n	8007820 <HAL_DMA_IRQHandler+0x194>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a1c      	ldr	r2, [pc, #112]	; (8007870 <HAL_DMA_IRQHandler+0x1e4>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d00e      	beq.n	8007820 <HAL_DMA_IRQHandler+0x194>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a1b      	ldr	r2, [pc, #108]	; (8007874 <HAL_DMA_IRQHandler+0x1e8>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d009      	beq.n	8007820 <HAL_DMA_IRQHandler+0x194>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a19      	ldr	r2, [pc, #100]	; (8007878 <HAL_DMA_IRQHandler+0x1ec>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d004      	beq.n	8007820 <HAL_DMA_IRQHandler+0x194>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a18      	ldr	r2, [pc, #96]	; (800787c <HAL_DMA_IRQHandler+0x1f0>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d12f      	bne.n	8007880 <HAL_DMA_IRQHandler+0x1f4>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0304 	and.w	r3, r3, #4
 800782a:	2b00      	cmp	r3, #0
 800782c:	bf14      	ite	ne
 800782e:	2301      	movne	r3, #1
 8007830:	2300      	moveq	r3, #0
 8007832:	b2db      	uxtb	r3, r3
 8007834:	e02e      	b.n	8007894 <HAL_DMA_IRQHandler+0x208>
 8007836:	bf00      	nop
 8007838:	24000040 	.word	0x24000040
 800783c:	1b4e81b5 	.word	0x1b4e81b5
 8007840:	40020010 	.word	0x40020010
 8007844:	40020028 	.word	0x40020028
 8007848:	40020040 	.word	0x40020040
 800784c:	40020058 	.word	0x40020058
 8007850:	40020070 	.word	0x40020070
 8007854:	40020088 	.word	0x40020088
 8007858:	400200a0 	.word	0x400200a0
 800785c:	400200b8 	.word	0x400200b8
 8007860:	40020410 	.word	0x40020410
 8007864:	40020428 	.word	0x40020428
 8007868:	40020440 	.word	0x40020440
 800786c:	40020458 	.word	0x40020458
 8007870:	40020470 	.word	0x40020470
 8007874:	40020488 	.word	0x40020488
 8007878:	400204a0 	.word	0x400204a0
 800787c:	400204b8 	.word	0x400204b8
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0308 	and.w	r3, r3, #8
 800788a:	2b00      	cmp	r3, #0
 800788c:	bf14      	ite	ne
 800788e:	2301      	movne	r3, #1
 8007890:	2300      	moveq	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d015      	beq.n	80078c4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0204 	bic.w	r2, r2, #4
 80078a6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ac:	f003 031f 	and.w	r3, r3, #31
 80078b0:	2208      	movs	r2, #8
 80078b2:	409a      	lsls	r2, r3
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078bc:	f043 0201 	orr.w	r2, r3, #1
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078c8:	f003 031f 	and.w	r3, r3, #31
 80078cc:	69ba      	ldr	r2, [r7, #24]
 80078ce:	fa22 f303 	lsr.w	r3, r2, r3
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d06e      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a69      	ldr	r2, [pc, #420]	; (8007a84 <HAL_DMA_IRQHandler+0x3f8>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d04a      	beq.n	800797a <HAL_DMA_IRQHandler+0x2ee>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a67      	ldr	r2, [pc, #412]	; (8007a88 <HAL_DMA_IRQHandler+0x3fc>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d045      	beq.n	800797a <HAL_DMA_IRQHandler+0x2ee>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a66      	ldr	r2, [pc, #408]	; (8007a8c <HAL_DMA_IRQHandler+0x400>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d040      	beq.n	800797a <HAL_DMA_IRQHandler+0x2ee>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a64      	ldr	r2, [pc, #400]	; (8007a90 <HAL_DMA_IRQHandler+0x404>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d03b      	beq.n	800797a <HAL_DMA_IRQHandler+0x2ee>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a63      	ldr	r2, [pc, #396]	; (8007a94 <HAL_DMA_IRQHandler+0x408>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d036      	beq.n	800797a <HAL_DMA_IRQHandler+0x2ee>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a61      	ldr	r2, [pc, #388]	; (8007a98 <HAL_DMA_IRQHandler+0x40c>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d031      	beq.n	800797a <HAL_DMA_IRQHandler+0x2ee>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a60      	ldr	r2, [pc, #384]	; (8007a9c <HAL_DMA_IRQHandler+0x410>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d02c      	beq.n	800797a <HAL_DMA_IRQHandler+0x2ee>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a5e      	ldr	r2, [pc, #376]	; (8007aa0 <HAL_DMA_IRQHandler+0x414>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d027      	beq.n	800797a <HAL_DMA_IRQHandler+0x2ee>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a5d      	ldr	r2, [pc, #372]	; (8007aa4 <HAL_DMA_IRQHandler+0x418>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d022      	beq.n	800797a <HAL_DMA_IRQHandler+0x2ee>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a5b      	ldr	r2, [pc, #364]	; (8007aa8 <HAL_DMA_IRQHandler+0x41c>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d01d      	beq.n	800797a <HAL_DMA_IRQHandler+0x2ee>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a5a      	ldr	r2, [pc, #360]	; (8007aac <HAL_DMA_IRQHandler+0x420>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d018      	beq.n	800797a <HAL_DMA_IRQHandler+0x2ee>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a58      	ldr	r2, [pc, #352]	; (8007ab0 <HAL_DMA_IRQHandler+0x424>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d013      	beq.n	800797a <HAL_DMA_IRQHandler+0x2ee>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a57      	ldr	r2, [pc, #348]	; (8007ab4 <HAL_DMA_IRQHandler+0x428>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d00e      	beq.n	800797a <HAL_DMA_IRQHandler+0x2ee>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a55      	ldr	r2, [pc, #340]	; (8007ab8 <HAL_DMA_IRQHandler+0x42c>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d009      	beq.n	800797a <HAL_DMA_IRQHandler+0x2ee>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a54      	ldr	r2, [pc, #336]	; (8007abc <HAL_DMA_IRQHandler+0x430>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d004      	beq.n	800797a <HAL_DMA_IRQHandler+0x2ee>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a52      	ldr	r2, [pc, #328]	; (8007ac0 <HAL_DMA_IRQHandler+0x434>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d10a      	bne.n	8007990 <HAL_DMA_IRQHandler+0x304>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	695b      	ldr	r3, [r3, #20]
 8007980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007984:	2b00      	cmp	r3, #0
 8007986:	bf14      	ite	ne
 8007988:	2301      	movne	r3, #1
 800798a:	2300      	moveq	r3, #0
 800798c:	b2db      	uxtb	r3, r3
 800798e:	e003      	b.n	8007998 <HAL_DMA_IRQHandler+0x30c>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2300      	movs	r3, #0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00d      	beq.n	80079b8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079a0:	f003 031f 	and.w	r3, r3, #31
 80079a4:	2201      	movs	r2, #1
 80079a6:	409a      	lsls	r2, r3
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b0:	f043 0202 	orr.w	r2, r3, #2
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079bc:	f003 031f 	and.w	r3, r3, #31
 80079c0:	2204      	movs	r2, #4
 80079c2:	409a      	lsls	r2, r3
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	4013      	ands	r3, r2
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 808f 	beq.w	8007aec <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a2c      	ldr	r2, [pc, #176]	; (8007a84 <HAL_DMA_IRQHandler+0x3f8>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d04a      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x3e2>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a2a      	ldr	r2, [pc, #168]	; (8007a88 <HAL_DMA_IRQHandler+0x3fc>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d045      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x3e2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a29      	ldr	r2, [pc, #164]	; (8007a8c <HAL_DMA_IRQHandler+0x400>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d040      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x3e2>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a27      	ldr	r2, [pc, #156]	; (8007a90 <HAL_DMA_IRQHandler+0x404>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d03b      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x3e2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a26      	ldr	r2, [pc, #152]	; (8007a94 <HAL_DMA_IRQHandler+0x408>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d036      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x3e2>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a24      	ldr	r2, [pc, #144]	; (8007a98 <HAL_DMA_IRQHandler+0x40c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d031      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x3e2>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a23      	ldr	r2, [pc, #140]	; (8007a9c <HAL_DMA_IRQHandler+0x410>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d02c      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x3e2>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a21      	ldr	r2, [pc, #132]	; (8007aa0 <HAL_DMA_IRQHandler+0x414>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d027      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x3e2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a20      	ldr	r2, [pc, #128]	; (8007aa4 <HAL_DMA_IRQHandler+0x418>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d022      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x3e2>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a1e      	ldr	r2, [pc, #120]	; (8007aa8 <HAL_DMA_IRQHandler+0x41c>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d01d      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x3e2>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a1d      	ldr	r2, [pc, #116]	; (8007aac <HAL_DMA_IRQHandler+0x420>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d018      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x3e2>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a1b      	ldr	r2, [pc, #108]	; (8007ab0 <HAL_DMA_IRQHandler+0x424>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d013      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x3e2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a1a      	ldr	r2, [pc, #104]	; (8007ab4 <HAL_DMA_IRQHandler+0x428>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d00e      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x3e2>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a18      	ldr	r2, [pc, #96]	; (8007ab8 <HAL_DMA_IRQHandler+0x42c>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d009      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x3e2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a17      	ldr	r2, [pc, #92]	; (8007abc <HAL_DMA_IRQHandler+0x430>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d004      	beq.n	8007a6e <HAL_DMA_IRQHandler+0x3e2>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a15      	ldr	r2, [pc, #84]	; (8007ac0 <HAL_DMA_IRQHandler+0x434>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d12a      	bne.n	8007ac4 <HAL_DMA_IRQHandler+0x438>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0302 	and.w	r3, r3, #2
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	bf14      	ite	ne
 8007a7c:	2301      	movne	r3, #1
 8007a7e:	2300      	moveq	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	e023      	b.n	8007acc <HAL_DMA_IRQHandler+0x440>
 8007a84:	40020010 	.word	0x40020010
 8007a88:	40020028 	.word	0x40020028
 8007a8c:	40020040 	.word	0x40020040
 8007a90:	40020058 	.word	0x40020058
 8007a94:	40020070 	.word	0x40020070
 8007a98:	40020088 	.word	0x40020088
 8007a9c:	400200a0 	.word	0x400200a0
 8007aa0:	400200b8 	.word	0x400200b8
 8007aa4:	40020410 	.word	0x40020410
 8007aa8:	40020428 	.word	0x40020428
 8007aac:	40020440 	.word	0x40020440
 8007ab0:	40020458 	.word	0x40020458
 8007ab4:	40020470 	.word	0x40020470
 8007ab8:	40020488 	.word	0x40020488
 8007abc:	400204a0 	.word	0x400204a0
 8007ac0:	400204b8 	.word	0x400204b8
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2300      	movs	r3, #0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00d      	beq.n	8007aec <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ad4:	f003 031f 	and.w	r3, r3, #31
 8007ad8:	2204      	movs	r2, #4
 8007ada:	409a      	lsls	r2, r3
 8007adc:	6a3b      	ldr	r3, [r7, #32]
 8007ade:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae4:	f043 0204 	orr.w	r2, r3, #4
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007af0:	f003 031f 	and.w	r3, r3, #31
 8007af4:	2210      	movs	r2, #16
 8007af6:	409a      	lsls	r2, r3
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	4013      	ands	r3, r2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 80a6 	beq.w	8007c4e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a85      	ldr	r2, [pc, #532]	; (8007d1c <HAL_DMA_IRQHandler+0x690>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d04a      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x516>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a83      	ldr	r2, [pc, #524]	; (8007d20 <HAL_DMA_IRQHandler+0x694>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d045      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x516>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a82      	ldr	r2, [pc, #520]	; (8007d24 <HAL_DMA_IRQHandler+0x698>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d040      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x516>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a80      	ldr	r2, [pc, #512]	; (8007d28 <HAL_DMA_IRQHandler+0x69c>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d03b      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x516>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a7f      	ldr	r2, [pc, #508]	; (8007d2c <HAL_DMA_IRQHandler+0x6a0>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d036      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x516>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a7d      	ldr	r2, [pc, #500]	; (8007d30 <HAL_DMA_IRQHandler+0x6a4>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d031      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x516>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a7c      	ldr	r2, [pc, #496]	; (8007d34 <HAL_DMA_IRQHandler+0x6a8>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d02c      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x516>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a7a      	ldr	r2, [pc, #488]	; (8007d38 <HAL_DMA_IRQHandler+0x6ac>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d027      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x516>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a79      	ldr	r2, [pc, #484]	; (8007d3c <HAL_DMA_IRQHandler+0x6b0>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d022      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x516>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a77      	ldr	r2, [pc, #476]	; (8007d40 <HAL_DMA_IRQHandler+0x6b4>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d01d      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x516>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a76      	ldr	r2, [pc, #472]	; (8007d44 <HAL_DMA_IRQHandler+0x6b8>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d018      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x516>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a74      	ldr	r2, [pc, #464]	; (8007d48 <HAL_DMA_IRQHandler+0x6bc>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d013      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x516>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a73      	ldr	r2, [pc, #460]	; (8007d4c <HAL_DMA_IRQHandler+0x6c0>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00e      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x516>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a71      	ldr	r2, [pc, #452]	; (8007d50 <HAL_DMA_IRQHandler+0x6c4>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d009      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x516>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a70      	ldr	r2, [pc, #448]	; (8007d54 <HAL_DMA_IRQHandler+0x6c8>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d004      	beq.n	8007ba2 <HAL_DMA_IRQHandler+0x516>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a6e      	ldr	r2, [pc, #440]	; (8007d58 <HAL_DMA_IRQHandler+0x6cc>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d10a      	bne.n	8007bb8 <HAL_DMA_IRQHandler+0x52c>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 0308 	and.w	r3, r3, #8
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	bf14      	ite	ne
 8007bb0:	2301      	movne	r3, #1
 8007bb2:	2300      	moveq	r3, #0
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	e009      	b.n	8007bcc <HAL_DMA_IRQHandler+0x540>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0304 	and.w	r3, r3, #4
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bf14      	ite	ne
 8007bc6:	2301      	movne	r3, #1
 8007bc8:	2300      	moveq	r3, #0
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d03e      	beq.n	8007c4e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd4:	f003 031f 	and.w	r3, r3, #31
 8007bd8:	2210      	movs	r2, #16
 8007bda:	409a      	lsls	r2, r3
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
 8007bde:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d018      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d108      	bne.n	8007c0e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d024      	beq.n	8007c4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	4798      	blx	r3
 8007c0c:	e01f      	b.n	8007c4e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d01b      	beq.n	8007c4e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	4798      	blx	r3
 8007c1e:	e016      	b.n	8007c4e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d107      	bne.n	8007c3e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0208 	bic.w	r2, r2, #8
 8007c3c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d003      	beq.n	8007c4e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c52:	f003 031f 	and.w	r3, r3, #31
 8007c56:	2220      	movs	r2, #32
 8007c58:	409a      	lsls	r2, r3
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 8110 	beq.w	8007e84 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a2c      	ldr	r2, [pc, #176]	; (8007d1c <HAL_DMA_IRQHandler+0x690>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d04a      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x678>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a2b      	ldr	r2, [pc, #172]	; (8007d20 <HAL_DMA_IRQHandler+0x694>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d045      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x678>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a29      	ldr	r2, [pc, #164]	; (8007d24 <HAL_DMA_IRQHandler+0x698>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d040      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x678>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a28      	ldr	r2, [pc, #160]	; (8007d28 <HAL_DMA_IRQHandler+0x69c>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d03b      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x678>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a26      	ldr	r2, [pc, #152]	; (8007d2c <HAL_DMA_IRQHandler+0x6a0>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d036      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x678>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a25      	ldr	r2, [pc, #148]	; (8007d30 <HAL_DMA_IRQHandler+0x6a4>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d031      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x678>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a23      	ldr	r2, [pc, #140]	; (8007d34 <HAL_DMA_IRQHandler+0x6a8>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d02c      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x678>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a22      	ldr	r2, [pc, #136]	; (8007d38 <HAL_DMA_IRQHandler+0x6ac>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d027      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x678>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a20      	ldr	r2, [pc, #128]	; (8007d3c <HAL_DMA_IRQHandler+0x6b0>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d022      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x678>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a1f      	ldr	r2, [pc, #124]	; (8007d40 <HAL_DMA_IRQHandler+0x6b4>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d01d      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x678>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a1d      	ldr	r2, [pc, #116]	; (8007d44 <HAL_DMA_IRQHandler+0x6b8>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d018      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x678>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a1c      	ldr	r2, [pc, #112]	; (8007d48 <HAL_DMA_IRQHandler+0x6bc>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d013      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x678>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a1a      	ldr	r2, [pc, #104]	; (8007d4c <HAL_DMA_IRQHandler+0x6c0>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d00e      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x678>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a19      	ldr	r2, [pc, #100]	; (8007d50 <HAL_DMA_IRQHandler+0x6c4>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d009      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x678>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a17      	ldr	r2, [pc, #92]	; (8007d54 <HAL_DMA_IRQHandler+0x6c8>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d004      	beq.n	8007d04 <HAL_DMA_IRQHandler+0x678>
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a16      	ldr	r2, [pc, #88]	; (8007d58 <HAL_DMA_IRQHandler+0x6cc>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d12b      	bne.n	8007d5c <HAL_DMA_IRQHandler+0x6d0>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0310 	and.w	r3, r3, #16
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	bf14      	ite	ne
 8007d12:	2301      	movne	r3, #1
 8007d14:	2300      	moveq	r3, #0
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	e02a      	b.n	8007d70 <HAL_DMA_IRQHandler+0x6e4>
 8007d1a:	bf00      	nop
 8007d1c:	40020010 	.word	0x40020010
 8007d20:	40020028 	.word	0x40020028
 8007d24:	40020040 	.word	0x40020040
 8007d28:	40020058 	.word	0x40020058
 8007d2c:	40020070 	.word	0x40020070
 8007d30:	40020088 	.word	0x40020088
 8007d34:	400200a0 	.word	0x400200a0
 8007d38:	400200b8 	.word	0x400200b8
 8007d3c:	40020410 	.word	0x40020410
 8007d40:	40020428 	.word	0x40020428
 8007d44:	40020440 	.word	0x40020440
 8007d48:	40020458 	.word	0x40020458
 8007d4c:	40020470 	.word	0x40020470
 8007d50:	40020488 	.word	0x40020488
 8007d54:	400204a0 	.word	0x400204a0
 8007d58:	400204b8 	.word	0x400204b8
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	bf14      	ite	ne
 8007d6a:	2301      	movne	r3, #1
 8007d6c:	2300      	moveq	r3, #0
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 8087 	beq.w	8007e84 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d7a:	f003 031f 	and.w	r3, r3, #31
 8007d7e:	2220      	movs	r2, #32
 8007d80:	409a      	lsls	r2, r3
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b04      	cmp	r3, #4
 8007d90:	d139      	bne.n	8007e06 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f022 0216 	bic.w	r2, r2, #22
 8007da0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	695a      	ldr	r2, [r3, #20]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007db0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d103      	bne.n	8007dc2 <HAL_DMA_IRQHandler+0x736>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d007      	beq.n	8007dd2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 0208 	bic.w	r2, r2, #8
 8007dd0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dd6:	f003 031f 	and.w	r3, r3, #31
 8007dda:	223f      	movs	r2, #63	; 0x3f
 8007ddc:	409a      	lsls	r2, r3
 8007dde:	6a3b      	ldr	r3, [r7, #32]
 8007de0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 834a 	beq.w	8008490 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	4798      	blx	r3
          }
          return;
 8007e04:	e344      	b.n	8008490 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d018      	beq.n	8007e46 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d108      	bne.n	8007e34 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d02c      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	4798      	blx	r3
 8007e32:	e027      	b.n	8007e84 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d023      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	4798      	blx	r3
 8007e44:	e01e      	b.n	8007e84 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10f      	bne.n	8007e74 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f022 0210 	bic.w	r2, r2, #16
 8007e62:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 8306 	beq.w	800849a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 8088 	beq.w	8007fac <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2204      	movs	r2, #4
 8007ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a7a      	ldr	r2, [pc, #488]	; (8008094 <HAL_DMA_IRQHandler+0xa08>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d04a      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x8b8>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a79      	ldr	r2, [pc, #484]	; (8008098 <HAL_DMA_IRQHandler+0xa0c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d045      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x8b8>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a77      	ldr	r2, [pc, #476]	; (800809c <HAL_DMA_IRQHandler+0xa10>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d040      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x8b8>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a76      	ldr	r2, [pc, #472]	; (80080a0 <HAL_DMA_IRQHandler+0xa14>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d03b      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x8b8>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a74      	ldr	r2, [pc, #464]	; (80080a4 <HAL_DMA_IRQHandler+0xa18>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d036      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x8b8>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a73      	ldr	r2, [pc, #460]	; (80080a8 <HAL_DMA_IRQHandler+0xa1c>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d031      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x8b8>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a71      	ldr	r2, [pc, #452]	; (80080ac <HAL_DMA_IRQHandler+0xa20>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d02c      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x8b8>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a70      	ldr	r2, [pc, #448]	; (80080b0 <HAL_DMA_IRQHandler+0xa24>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d027      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x8b8>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a6e      	ldr	r2, [pc, #440]	; (80080b4 <HAL_DMA_IRQHandler+0xa28>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d022      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x8b8>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a6d      	ldr	r2, [pc, #436]	; (80080b8 <HAL_DMA_IRQHandler+0xa2c>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d01d      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x8b8>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a6b      	ldr	r2, [pc, #428]	; (80080bc <HAL_DMA_IRQHandler+0xa30>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d018      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x8b8>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a6a      	ldr	r2, [pc, #424]	; (80080c0 <HAL_DMA_IRQHandler+0xa34>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d013      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x8b8>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a68      	ldr	r2, [pc, #416]	; (80080c4 <HAL_DMA_IRQHandler+0xa38>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d00e      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x8b8>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a67      	ldr	r2, [pc, #412]	; (80080c8 <HAL_DMA_IRQHandler+0xa3c>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d009      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x8b8>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a65      	ldr	r2, [pc, #404]	; (80080cc <HAL_DMA_IRQHandler+0xa40>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d004      	beq.n	8007f44 <HAL_DMA_IRQHandler+0x8b8>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a64      	ldr	r2, [pc, #400]	; (80080d0 <HAL_DMA_IRQHandler+0xa44>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d108      	bne.n	8007f56 <HAL_DMA_IRQHandler+0x8ca>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f022 0201 	bic.w	r2, r2, #1
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	e007      	b.n	8007f66 <HAL_DMA_IRQHandler+0x8da>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 0201 	bic.w	r2, r2, #1
 8007f64:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d307      	bcc.n	8007f82 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1f2      	bne.n	8007f66 <HAL_DMA_IRQHandler+0x8da>
 8007f80:	e000      	b.n	8007f84 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007f82:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d004      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2203      	movs	r2, #3
 8007f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007f9a:	e003      	b.n	8007fa4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 8272 	beq.w	800849a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	4798      	blx	r3
 8007fbe:	e26c      	b.n	800849a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a43      	ldr	r2, [pc, #268]	; (80080d4 <HAL_DMA_IRQHandler+0xa48>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d022      	beq.n	8008010 <HAL_DMA_IRQHandler+0x984>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a42      	ldr	r2, [pc, #264]	; (80080d8 <HAL_DMA_IRQHandler+0xa4c>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d01d      	beq.n	8008010 <HAL_DMA_IRQHandler+0x984>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a40      	ldr	r2, [pc, #256]	; (80080dc <HAL_DMA_IRQHandler+0xa50>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d018      	beq.n	8008010 <HAL_DMA_IRQHandler+0x984>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a3f      	ldr	r2, [pc, #252]	; (80080e0 <HAL_DMA_IRQHandler+0xa54>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d013      	beq.n	8008010 <HAL_DMA_IRQHandler+0x984>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a3d      	ldr	r2, [pc, #244]	; (80080e4 <HAL_DMA_IRQHandler+0xa58>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d00e      	beq.n	8008010 <HAL_DMA_IRQHandler+0x984>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a3c      	ldr	r2, [pc, #240]	; (80080e8 <HAL_DMA_IRQHandler+0xa5c>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d009      	beq.n	8008010 <HAL_DMA_IRQHandler+0x984>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a3a      	ldr	r2, [pc, #232]	; (80080ec <HAL_DMA_IRQHandler+0xa60>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d004      	beq.n	8008010 <HAL_DMA_IRQHandler+0x984>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a39      	ldr	r2, [pc, #228]	; (80080f0 <HAL_DMA_IRQHandler+0xa64>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d101      	bne.n	8008014 <HAL_DMA_IRQHandler+0x988>
 8008010:	2301      	movs	r3, #1
 8008012:	e000      	b.n	8008016 <HAL_DMA_IRQHandler+0x98a>
 8008014:	2300      	movs	r3, #0
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 823f 	beq.w	800849a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008028:	f003 031f 	and.w	r3, r3, #31
 800802c:	2204      	movs	r2, #4
 800802e:	409a      	lsls	r2, r3
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	4013      	ands	r3, r2
 8008034:	2b00      	cmp	r3, #0
 8008036:	f000 80cd 	beq.w	80081d4 <HAL_DMA_IRQHandler+0xb48>
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	f003 0304 	and.w	r3, r3, #4
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 80c7 	beq.w	80081d4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804a:	f003 031f 	and.w	r3, r3, #31
 800804e:	2204      	movs	r2, #4
 8008050:	409a      	lsls	r2, r3
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d049      	beq.n	80080f4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d109      	bne.n	800807e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800806e:	2b00      	cmp	r3, #0
 8008070:	f000 8210 	beq.w	8008494 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800807c:	e20a      	b.n	8008494 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 8206 	beq.w	8008494 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808c:	6878      	ldr	r0, [r7, #4]
 800808e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008090:	e200      	b.n	8008494 <HAL_DMA_IRQHandler+0xe08>
 8008092:	bf00      	nop
 8008094:	40020010 	.word	0x40020010
 8008098:	40020028 	.word	0x40020028
 800809c:	40020040 	.word	0x40020040
 80080a0:	40020058 	.word	0x40020058
 80080a4:	40020070 	.word	0x40020070
 80080a8:	40020088 	.word	0x40020088
 80080ac:	400200a0 	.word	0x400200a0
 80080b0:	400200b8 	.word	0x400200b8
 80080b4:	40020410 	.word	0x40020410
 80080b8:	40020428 	.word	0x40020428
 80080bc:	40020440 	.word	0x40020440
 80080c0:	40020458 	.word	0x40020458
 80080c4:	40020470 	.word	0x40020470
 80080c8:	40020488 	.word	0x40020488
 80080cc:	400204a0 	.word	0x400204a0
 80080d0:	400204b8 	.word	0x400204b8
 80080d4:	58025408 	.word	0x58025408
 80080d8:	5802541c 	.word	0x5802541c
 80080dc:	58025430 	.word	0x58025430
 80080e0:	58025444 	.word	0x58025444
 80080e4:	58025458 	.word	0x58025458
 80080e8:	5802546c 	.word	0x5802546c
 80080ec:	58025480 	.word	0x58025480
 80080f0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f003 0320 	and.w	r3, r3, #32
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d160      	bne.n	80081c0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a8c      	ldr	r2, [pc, #560]	; (8008334 <HAL_DMA_IRQHandler+0xca8>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d04a      	beq.n	800819e <HAL_DMA_IRQHandler+0xb12>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a8a      	ldr	r2, [pc, #552]	; (8008338 <HAL_DMA_IRQHandler+0xcac>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d045      	beq.n	800819e <HAL_DMA_IRQHandler+0xb12>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a89      	ldr	r2, [pc, #548]	; (800833c <HAL_DMA_IRQHandler+0xcb0>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d040      	beq.n	800819e <HAL_DMA_IRQHandler+0xb12>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a87      	ldr	r2, [pc, #540]	; (8008340 <HAL_DMA_IRQHandler+0xcb4>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d03b      	beq.n	800819e <HAL_DMA_IRQHandler+0xb12>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a86      	ldr	r2, [pc, #536]	; (8008344 <HAL_DMA_IRQHandler+0xcb8>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d036      	beq.n	800819e <HAL_DMA_IRQHandler+0xb12>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a84      	ldr	r2, [pc, #528]	; (8008348 <HAL_DMA_IRQHandler+0xcbc>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d031      	beq.n	800819e <HAL_DMA_IRQHandler+0xb12>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a83      	ldr	r2, [pc, #524]	; (800834c <HAL_DMA_IRQHandler+0xcc0>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d02c      	beq.n	800819e <HAL_DMA_IRQHandler+0xb12>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a81      	ldr	r2, [pc, #516]	; (8008350 <HAL_DMA_IRQHandler+0xcc4>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d027      	beq.n	800819e <HAL_DMA_IRQHandler+0xb12>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a80      	ldr	r2, [pc, #512]	; (8008354 <HAL_DMA_IRQHandler+0xcc8>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d022      	beq.n	800819e <HAL_DMA_IRQHandler+0xb12>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a7e      	ldr	r2, [pc, #504]	; (8008358 <HAL_DMA_IRQHandler+0xccc>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d01d      	beq.n	800819e <HAL_DMA_IRQHandler+0xb12>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a7d      	ldr	r2, [pc, #500]	; (800835c <HAL_DMA_IRQHandler+0xcd0>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d018      	beq.n	800819e <HAL_DMA_IRQHandler+0xb12>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a7b      	ldr	r2, [pc, #492]	; (8008360 <HAL_DMA_IRQHandler+0xcd4>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d013      	beq.n	800819e <HAL_DMA_IRQHandler+0xb12>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a7a      	ldr	r2, [pc, #488]	; (8008364 <HAL_DMA_IRQHandler+0xcd8>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00e      	beq.n	800819e <HAL_DMA_IRQHandler+0xb12>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a78      	ldr	r2, [pc, #480]	; (8008368 <HAL_DMA_IRQHandler+0xcdc>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d009      	beq.n	800819e <HAL_DMA_IRQHandler+0xb12>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a77      	ldr	r2, [pc, #476]	; (800836c <HAL_DMA_IRQHandler+0xce0>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d004      	beq.n	800819e <HAL_DMA_IRQHandler+0xb12>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a75      	ldr	r2, [pc, #468]	; (8008370 <HAL_DMA_IRQHandler+0xce4>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d108      	bne.n	80081b0 <HAL_DMA_IRQHandler+0xb24>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f022 0208 	bic.w	r2, r2, #8
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	e007      	b.n	80081c0 <HAL_DMA_IRQHandler+0xb34>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0204 	bic.w	r2, r2, #4
 80081be:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	f000 8165 	beq.w	8008494 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081d2:	e15f      	b.n	8008494 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d8:	f003 031f 	and.w	r3, r3, #31
 80081dc:	2202      	movs	r2, #2
 80081de:	409a      	lsls	r2, r3
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	4013      	ands	r3, r2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 80c5 	beq.w	8008374 <HAL_DMA_IRQHandler+0xce8>
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f003 0302 	and.w	r3, r3, #2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f000 80bf 	beq.w	8008374 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081fa:	f003 031f 	and.w	r3, r3, #31
 80081fe:	2202      	movs	r2, #2
 8008200:	409a      	lsls	r2, r3
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d018      	beq.n	8008242 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d109      	bne.n	800822e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 813a 	beq.w	8008498 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800822c:	e134      	b.n	8008498 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 8130 	beq.w	8008498 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008240:	e12a      	b.n	8008498 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	f003 0320 	and.w	r3, r3, #32
 8008248:	2b00      	cmp	r3, #0
 800824a:	d168      	bne.n	800831e <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a38      	ldr	r2, [pc, #224]	; (8008334 <HAL_DMA_IRQHandler+0xca8>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d04a      	beq.n	80082ec <HAL_DMA_IRQHandler+0xc60>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a37      	ldr	r2, [pc, #220]	; (8008338 <HAL_DMA_IRQHandler+0xcac>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d045      	beq.n	80082ec <HAL_DMA_IRQHandler+0xc60>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a35      	ldr	r2, [pc, #212]	; (800833c <HAL_DMA_IRQHandler+0xcb0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d040      	beq.n	80082ec <HAL_DMA_IRQHandler+0xc60>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a34      	ldr	r2, [pc, #208]	; (8008340 <HAL_DMA_IRQHandler+0xcb4>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d03b      	beq.n	80082ec <HAL_DMA_IRQHandler+0xc60>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a32      	ldr	r2, [pc, #200]	; (8008344 <HAL_DMA_IRQHandler+0xcb8>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d036      	beq.n	80082ec <HAL_DMA_IRQHandler+0xc60>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a31      	ldr	r2, [pc, #196]	; (8008348 <HAL_DMA_IRQHandler+0xcbc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d031      	beq.n	80082ec <HAL_DMA_IRQHandler+0xc60>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a2f      	ldr	r2, [pc, #188]	; (800834c <HAL_DMA_IRQHandler+0xcc0>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d02c      	beq.n	80082ec <HAL_DMA_IRQHandler+0xc60>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a2e      	ldr	r2, [pc, #184]	; (8008350 <HAL_DMA_IRQHandler+0xcc4>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d027      	beq.n	80082ec <HAL_DMA_IRQHandler+0xc60>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a2c      	ldr	r2, [pc, #176]	; (8008354 <HAL_DMA_IRQHandler+0xcc8>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d022      	beq.n	80082ec <HAL_DMA_IRQHandler+0xc60>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a2b      	ldr	r2, [pc, #172]	; (8008358 <HAL_DMA_IRQHandler+0xccc>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d01d      	beq.n	80082ec <HAL_DMA_IRQHandler+0xc60>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a29      	ldr	r2, [pc, #164]	; (800835c <HAL_DMA_IRQHandler+0xcd0>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d018      	beq.n	80082ec <HAL_DMA_IRQHandler+0xc60>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a28      	ldr	r2, [pc, #160]	; (8008360 <HAL_DMA_IRQHandler+0xcd4>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d013      	beq.n	80082ec <HAL_DMA_IRQHandler+0xc60>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a26      	ldr	r2, [pc, #152]	; (8008364 <HAL_DMA_IRQHandler+0xcd8>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d00e      	beq.n	80082ec <HAL_DMA_IRQHandler+0xc60>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a25      	ldr	r2, [pc, #148]	; (8008368 <HAL_DMA_IRQHandler+0xcdc>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d009      	beq.n	80082ec <HAL_DMA_IRQHandler+0xc60>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a23      	ldr	r2, [pc, #140]	; (800836c <HAL_DMA_IRQHandler+0xce0>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d004      	beq.n	80082ec <HAL_DMA_IRQHandler+0xc60>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a22      	ldr	r2, [pc, #136]	; (8008370 <HAL_DMA_IRQHandler+0xce4>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d108      	bne.n	80082fe <HAL_DMA_IRQHandler+0xc72>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f022 0214 	bic.w	r2, r2, #20
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	e007      	b.n	800830e <HAL_DMA_IRQHandler+0xc82>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f022 020a 	bic.w	r2, r2, #10
 800830c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008322:	2b00      	cmp	r3, #0
 8008324:	f000 80b8 	beq.w	8008498 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008330:	e0b2      	b.n	8008498 <HAL_DMA_IRQHandler+0xe0c>
 8008332:	bf00      	nop
 8008334:	40020010 	.word	0x40020010
 8008338:	40020028 	.word	0x40020028
 800833c:	40020040 	.word	0x40020040
 8008340:	40020058 	.word	0x40020058
 8008344:	40020070 	.word	0x40020070
 8008348:	40020088 	.word	0x40020088
 800834c:	400200a0 	.word	0x400200a0
 8008350:	400200b8 	.word	0x400200b8
 8008354:	40020410 	.word	0x40020410
 8008358:	40020428 	.word	0x40020428
 800835c:	40020440 	.word	0x40020440
 8008360:	40020458 	.word	0x40020458
 8008364:	40020470 	.word	0x40020470
 8008368:	40020488 	.word	0x40020488
 800836c:	400204a0 	.word	0x400204a0
 8008370:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008378:	f003 031f 	and.w	r3, r3, #31
 800837c:	2208      	movs	r2, #8
 800837e:	409a      	lsls	r2, r3
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	4013      	ands	r3, r2
 8008384:	2b00      	cmp	r3, #0
 8008386:	f000 8088 	beq.w	800849a <HAL_DMA_IRQHandler+0xe0e>
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	f003 0308 	and.w	r3, r3, #8
 8008390:	2b00      	cmp	r3, #0
 8008392:	f000 8082 	beq.w	800849a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a41      	ldr	r2, [pc, #260]	; (80084a0 <HAL_DMA_IRQHandler+0xe14>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d04a      	beq.n	8008436 <HAL_DMA_IRQHandler+0xdaa>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a3f      	ldr	r2, [pc, #252]	; (80084a4 <HAL_DMA_IRQHandler+0xe18>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d045      	beq.n	8008436 <HAL_DMA_IRQHandler+0xdaa>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a3e      	ldr	r2, [pc, #248]	; (80084a8 <HAL_DMA_IRQHandler+0xe1c>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d040      	beq.n	8008436 <HAL_DMA_IRQHandler+0xdaa>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a3c      	ldr	r2, [pc, #240]	; (80084ac <HAL_DMA_IRQHandler+0xe20>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d03b      	beq.n	8008436 <HAL_DMA_IRQHandler+0xdaa>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a3b      	ldr	r2, [pc, #236]	; (80084b0 <HAL_DMA_IRQHandler+0xe24>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d036      	beq.n	8008436 <HAL_DMA_IRQHandler+0xdaa>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a39      	ldr	r2, [pc, #228]	; (80084b4 <HAL_DMA_IRQHandler+0xe28>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d031      	beq.n	8008436 <HAL_DMA_IRQHandler+0xdaa>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a38      	ldr	r2, [pc, #224]	; (80084b8 <HAL_DMA_IRQHandler+0xe2c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d02c      	beq.n	8008436 <HAL_DMA_IRQHandler+0xdaa>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a36      	ldr	r2, [pc, #216]	; (80084bc <HAL_DMA_IRQHandler+0xe30>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d027      	beq.n	8008436 <HAL_DMA_IRQHandler+0xdaa>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a35      	ldr	r2, [pc, #212]	; (80084c0 <HAL_DMA_IRQHandler+0xe34>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d022      	beq.n	8008436 <HAL_DMA_IRQHandler+0xdaa>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a33      	ldr	r2, [pc, #204]	; (80084c4 <HAL_DMA_IRQHandler+0xe38>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d01d      	beq.n	8008436 <HAL_DMA_IRQHandler+0xdaa>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a32      	ldr	r2, [pc, #200]	; (80084c8 <HAL_DMA_IRQHandler+0xe3c>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d018      	beq.n	8008436 <HAL_DMA_IRQHandler+0xdaa>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a30      	ldr	r2, [pc, #192]	; (80084cc <HAL_DMA_IRQHandler+0xe40>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d013      	beq.n	8008436 <HAL_DMA_IRQHandler+0xdaa>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a2f      	ldr	r2, [pc, #188]	; (80084d0 <HAL_DMA_IRQHandler+0xe44>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d00e      	beq.n	8008436 <HAL_DMA_IRQHandler+0xdaa>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a2d      	ldr	r2, [pc, #180]	; (80084d4 <HAL_DMA_IRQHandler+0xe48>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d009      	beq.n	8008436 <HAL_DMA_IRQHandler+0xdaa>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a2c      	ldr	r2, [pc, #176]	; (80084d8 <HAL_DMA_IRQHandler+0xe4c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d004      	beq.n	8008436 <HAL_DMA_IRQHandler+0xdaa>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a2a      	ldr	r2, [pc, #168]	; (80084dc <HAL_DMA_IRQHandler+0xe50>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d108      	bne.n	8008448 <HAL_DMA_IRQHandler+0xdbc>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f022 021c 	bic.w	r2, r2, #28
 8008444:	601a      	str	r2, [r3, #0]
 8008446:	e007      	b.n	8008458 <HAL_DMA_IRQHandler+0xdcc>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 020e 	bic.w	r2, r2, #14
 8008456:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800845c:	f003 031f 	and.w	r3, r3, #31
 8008460:	2201      	movs	r2, #1
 8008462:	409a      	lsls	r2, r3
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008482:	2b00      	cmp	r3, #0
 8008484:	d009      	beq.n	800849a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	4798      	blx	r3
 800848e:	e004      	b.n	800849a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008490:	bf00      	nop
 8008492:	e002      	b.n	800849a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008494:	bf00      	nop
 8008496:	e000      	b.n	800849a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008498:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800849a:	3728      	adds	r7, #40	; 0x28
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	40020010 	.word	0x40020010
 80084a4:	40020028 	.word	0x40020028
 80084a8:	40020040 	.word	0x40020040
 80084ac:	40020058 	.word	0x40020058
 80084b0:	40020070 	.word	0x40020070
 80084b4:	40020088 	.word	0x40020088
 80084b8:	400200a0 	.word	0x400200a0
 80084bc:	400200b8 	.word	0x400200b8
 80084c0:	40020410 	.word	0x40020410
 80084c4:	40020428 	.word	0x40020428
 80084c8:	40020440 	.word	0x40020440
 80084cc:	40020458 	.word	0x40020458
 80084d0:	40020470 	.word	0x40020470
 80084d4:	40020488 	.word	0x40020488
 80084d8:	400204a0 	.word	0x400204a0
 80084dc:	400204b8 	.word	0x400204b8

080084e0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
 80084ec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a84      	ldr	r2, [pc, #528]	; (8008710 <DMA_SetConfig+0x230>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d072      	beq.n	80085ea <DMA_SetConfig+0x10a>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a82      	ldr	r2, [pc, #520]	; (8008714 <DMA_SetConfig+0x234>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d06d      	beq.n	80085ea <DMA_SetConfig+0x10a>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a81      	ldr	r2, [pc, #516]	; (8008718 <DMA_SetConfig+0x238>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d068      	beq.n	80085ea <DMA_SetConfig+0x10a>
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a7f      	ldr	r2, [pc, #508]	; (800871c <DMA_SetConfig+0x23c>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d063      	beq.n	80085ea <DMA_SetConfig+0x10a>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a7e      	ldr	r2, [pc, #504]	; (8008720 <DMA_SetConfig+0x240>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d05e      	beq.n	80085ea <DMA_SetConfig+0x10a>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a7c      	ldr	r2, [pc, #496]	; (8008724 <DMA_SetConfig+0x244>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d059      	beq.n	80085ea <DMA_SetConfig+0x10a>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a7b      	ldr	r2, [pc, #492]	; (8008728 <DMA_SetConfig+0x248>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d054      	beq.n	80085ea <DMA_SetConfig+0x10a>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a79      	ldr	r2, [pc, #484]	; (800872c <DMA_SetConfig+0x24c>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d04f      	beq.n	80085ea <DMA_SetConfig+0x10a>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a78      	ldr	r2, [pc, #480]	; (8008730 <DMA_SetConfig+0x250>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d04a      	beq.n	80085ea <DMA_SetConfig+0x10a>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a76      	ldr	r2, [pc, #472]	; (8008734 <DMA_SetConfig+0x254>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d045      	beq.n	80085ea <DMA_SetConfig+0x10a>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a75      	ldr	r2, [pc, #468]	; (8008738 <DMA_SetConfig+0x258>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d040      	beq.n	80085ea <DMA_SetConfig+0x10a>
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a73      	ldr	r2, [pc, #460]	; (800873c <DMA_SetConfig+0x25c>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d03b      	beq.n	80085ea <DMA_SetConfig+0x10a>
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a72      	ldr	r2, [pc, #456]	; (8008740 <DMA_SetConfig+0x260>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d036      	beq.n	80085ea <DMA_SetConfig+0x10a>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a70      	ldr	r2, [pc, #448]	; (8008744 <DMA_SetConfig+0x264>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d031      	beq.n	80085ea <DMA_SetConfig+0x10a>
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a6f      	ldr	r2, [pc, #444]	; (8008748 <DMA_SetConfig+0x268>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d02c      	beq.n	80085ea <DMA_SetConfig+0x10a>
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a6d      	ldr	r2, [pc, #436]	; (800874c <DMA_SetConfig+0x26c>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d027      	beq.n	80085ea <DMA_SetConfig+0x10a>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a6c      	ldr	r2, [pc, #432]	; (8008750 <DMA_SetConfig+0x270>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d022      	beq.n	80085ea <DMA_SetConfig+0x10a>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a6a      	ldr	r2, [pc, #424]	; (8008754 <DMA_SetConfig+0x274>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d01d      	beq.n	80085ea <DMA_SetConfig+0x10a>
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a69      	ldr	r2, [pc, #420]	; (8008758 <DMA_SetConfig+0x278>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d018      	beq.n	80085ea <DMA_SetConfig+0x10a>
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a67      	ldr	r2, [pc, #412]	; (800875c <DMA_SetConfig+0x27c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d013      	beq.n	80085ea <DMA_SetConfig+0x10a>
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a66      	ldr	r2, [pc, #408]	; (8008760 <DMA_SetConfig+0x280>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d00e      	beq.n	80085ea <DMA_SetConfig+0x10a>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a64      	ldr	r2, [pc, #400]	; (8008764 <DMA_SetConfig+0x284>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d009      	beq.n	80085ea <DMA_SetConfig+0x10a>
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a63      	ldr	r2, [pc, #396]	; (8008768 <DMA_SetConfig+0x288>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d004      	beq.n	80085ea <DMA_SetConfig+0x10a>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4a61      	ldr	r2, [pc, #388]	; (800876c <DMA_SetConfig+0x28c>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d101      	bne.n	80085ee <DMA_SetConfig+0x10e>
 80085ea:	2301      	movs	r3, #1
 80085ec:	e000      	b.n	80085f0 <DMA_SetConfig+0x110>
 80085ee:	2300      	movs	r3, #0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d00d      	beq.n	8008610 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80085fc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008602:	2b00      	cmp	r3, #0
 8008604:	d004      	beq.n	8008610 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800860e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a3e      	ldr	r2, [pc, #248]	; (8008710 <DMA_SetConfig+0x230>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d04a      	beq.n	80086b0 <DMA_SetConfig+0x1d0>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a3d      	ldr	r2, [pc, #244]	; (8008714 <DMA_SetConfig+0x234>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d045      	beq.n	80086b0 <DMA_SetConfig+0x1d0>
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a3b      	ldr	r2, [pc, #236]	; (8008718 <DMA_SetConfig+0x238>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d040      	beq.n	80086b0 <DMA_SetConfig+0x1d0>
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a3a      	ldr	r2, [pc, #232]	; (800871c <DMA_SetConfig+0x23c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d03b      	beq.n	80086b0 <DMA_SetConfig+0x1d0>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a38      	ldr	r2, [pc, #224]	; (8008720 <DMA_SetConfig+0x240>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d036      	beq.n	80086b0 <DMA_SetConfig+0x1d0>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a37      	ldr	r2, [pc, #220]	; (8008724 <DMA_SetConfig+0x244>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d031      	beq.n	80086b0 <DMA_SetConfig+0x1d0>
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a35      	ldr	r2, [pc, #212]	; (8008728 <DMA_SetConfig+0x248>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d02c      	beq.n	80086b0 <DMA_SetConfig+0x1d0>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a34      	ldr	r2, [pc, #208]	; (800872c <DMA_SetConfig+0x24c>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d027      	beq.n	80086b0 <DMA_SetConfig+0x1d0>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a32      	ldr	r2, [pc, #200]	; (8008730 <DMA_SetConfig+0x250>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d022      	beq.n	80086b0 <DMA_SetConfig+0x1d0>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a31      	ldr	r2, [pc, #196]	; (8008734 <DMA_SetConfig+0x254>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d01d      	beq.n	80086b0 <DMA_SetConfig+0x1d0>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a2f      	ldr	r2, [pc, #188]	; (8008738 <DMA_SetConfig+0x258>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d018      	beq.n	80086b0 <DMA_SetConfig+0x1d0>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a2e      	ldr	r2, [pc, #184]	; (800873c <DMA_SetConfig+0x25c>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d013      	beq.n	80086b0 <DMA_SetConfig+0x1d0>
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a2c      	ldr	r2, [pc, #176]	; (8008740 <DMA_SetConfig+0x260>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d00e      	beq.n	80086b0 <DMA_SetConfig+0x1d0>
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a2b      	ldr	r2, [pc, #172]	; (8008744 <DMA_SetConfig+0x264>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d009      	beq.n	80086b0 <DMA_SetConfig+0x1d0>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a29      	ldr	r2, [pc, #164]	; (8008748 <DMA_SetConfig+0x268>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d004      	beq.n	80086b0 <DMA_SetConfig+0x1d0>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a28      	ldr	r2, [pc, #160]	; (800874c <DMA_SetConfig+0x26c>)
 80086ac:	4293      	cmp	r3, r2
 80086ae:	d101      	bne.n	80086b4 <DMA_SetConfig+0x1d4>
 80086b0:	2301      	movs	r3, #1
 80086b2:	e000      	b.n	80086b6 <DMA_SetConfig+0x1d6>
 80086b4:	2300      	movs	r3, #0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d05a      	beq.n	8008770 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086be:	f003 031f 	and.w	r3, r3, #31
 80086c2:	223f      	movs	r2, #63	; 0x3f
 80086c4:	409a      	lsls	r2, r3
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80086d8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	2b40      	cmp	r3, #64	; 0x40
 80086e8:	d108      	bne.n	80086fc <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80086fa:	e087      	b.n	800880c <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	60da      	str	r2, [r3, #12]
}
 800870c:	e07e      	b.n	800880c <DMA_SetConfig+0x32c>
 800870e:	bf00      	nop
 8008710:	40020010 	.word	0x40020010
 8008714:	40020028 	.word	0x40020028
 8008718:	40020040 	.word	0x40020040
 800871c:	40020058 	.word	0x40020058
 8008720:	40020070 	.word	0x40020070
 8008724:	40020088 	.word	0x40020088
 8008728:	400200a0 	.word	0x400200a0
 800872c:	400200b8 	.word	0x400200b8
 8008730:	40020410 	.word	0x40020410
 8008734:	40020428 	.word	0x40020428
 8008738:	40020440 	.word	0x40020440
 800873c:	40020458 	.word	0x40020458
 8008740:	40020470 	.word	0x40020470
 8008744:	40020488 	.word	0x40020488
 8008748:	400204a0 	.word	0x400204a0
 800874c:	400204b8 	.word	0x400204b8
 8008750:	58025408 	.word	0x58025408
 8008754:	5802541c 	.word	0x5802541c
 8008758:	58025430 	.word	0x58025430
 800875c:	58025444 	.word	0x58025444
 8008760:	58025458 	.word	0x58025458
 8008764:	5802546c 	.word	0x5802546c
 8008768:	58025480 	.word	0x58025480
 800876c:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a28      	ldr	r2, [pc, #160]	; (8008818 <DMA_SetConfig+0x338>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d022      	beq.n	80087c0 <DMA_SetConfig+0x2e0>
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a27      	ldr	r2, [pc, #156]	; (800881c <DMA_SetConfig+0x33c>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d01d      	beq.n	80087c0 <DMA_SetConfig+0x2e0>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a25      	ldr	r2, [pc, #148]	; (8008820 <DMA_SetConfig+0x340>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d018      	beq.n	80087c0 <DMA_SetConfig+0x2e0>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a24      	ldr	r2, [pc, #144]	; (8008824 <DMA_SetConfig+0x344>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d013      	beq.n	80087c0 <DMA_SetConfig+0x2e0>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a22      	ldr	r2, [pc, #136]	; (8008828 <DMA_SetConfig+0x348>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d00e      	beq.n	80087c0 <DMA_SetConfig+0x2e0>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a21      	ldr	r2, [pc, #132]	; (800882c <DMA_SetConfig+0x34c>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d009      	beq.n	80087c0 <DMA_SetConfig+0x2e0>
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a1f      	ldr	r2, [pc, #124]	; (8008830 <DMA_SetConfig+0x350>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d004      	beq.n	80087c0 <DMA_SetConfig+0x2e0>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a1e      	ldr	r2, [pc, #120]	; (8008834 <DMA_SetConfig+0x354>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d101      	bne.n	80087c4 <DMA_SetConfig+0x2e4>
 80087c0:	2301      	movs	r3, #1
 80087c2:	e000      	b.n	80087c6 <DMA_SetConfig+0x2e6>
 80087c4:	2300      	movs	r3, #0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d020      	beq.n	800880c <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087ce:	f003 031f 	and.w	r3, r3, #31
 80087d2:	2201      	movs	r2, #1
 80087d4:	409a      	lsls	r2, r3
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	683a      	ldr	r2, [r7, #0]
 80087e0:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	689b      	ldr	r3, [r3, #8]
 80087e6:	2b40      	cmp	r3, #64	; 0x40
 80087e8:	d108      	bne.n	80087fc <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	687a      	ldr	r2, [r7, #4]
 80087f0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	60da      	str	r2, [r3, #12]
}
 80087fa:	e007      	b.n	800880c <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68ba      	ldr	r2, [r7, #8]
 8008802:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	60da      	str	r2, [r3, #12]
}
 800880c:	bf00      	nop
 800880e:	371c      	adds	r7, #28
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr
 8008818:	58025408 	.word	0x58025408
 800881c:	5802541c 	.word	0x5802541c
 8008820:	58025430 	.word	0x58025430
 8008824:	58025444 	.word	0x58025444
 8008828:	58025458 	.word	0x58025458
 800882c:	5802546c 	.word	0x5802546c
 8008830:	58025480 	.word	0x58025480
 8008834:	58025494 	.word	0x58025494

08008838 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a42      	ldr	r2, [pc, #264]	; (8008950 <DMA_CalcBaseAndBitshift+0x118>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d04a      	beq.n	80088e0 <DMA_CalcBaseAndBitshift+0xa8>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a41      	ldr	r2, [pc, #260]	; (8008954 <DMA_CalcBaseAndBitshift+0x11c>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d045      	beq.n	80088e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a3f      	ldr	r2, [pc, #252]	; (8008958 <DMA_CalcBaseAndBitshift+0x120>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d040      	beq.n	80088e0 <DMA_CalcBaseAndBitshift+0xa8>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a3e      	ldr	r2, [pc, #248]	; (800895c <DMA_CalcBaseAndBitshift+0x124>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d03b      	beq.n	80088e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a3c      	ldr	r2, [pc, #240]	; (8008960 <DMA_CalcBaseAndBitshift+0x128>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d036      	beq.n	80088e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a3b      	ldr	r2, [pc, #236]	; (8008964 <DMA_CalcBaseAndBitshift+0x12c>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d031      	beq.n	80088e0 <DMA_CalcBaseAndBitshift+0xa8>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a39      	ldr	r2, [pc, #228]	; (8008968 <DMA_CalcBaseAndBitshift+0x130>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d02c      	beq.n	80088e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a38      	ldr	r2, [pc, #224]	; (800896c <DMA_CalcBaseAndBitshift+0x134>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d027      	beq.n	80088e0 <DMA_CalcBaseAndBitshift+0xa8>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a36      	ldr	r2, [pc, #216]	; (8008970 <DMA_CalcBaseAndBitshift+0x138>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d022      	beq.n	80088e0 <DMA_CalcBaseAndBitshift+0xa8>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a35      	ldr	r2, [pc, #212]	; (8008974 <DMA_CalcBaseAndBitshift+0x13c>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d01d      	beq.n	80088e0 <DMA_CalcBaseAndBitshift+0xa8>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a33      	ldr	r2, [pc, #204]	; (8008978 <DMA_CalcBaseAndBitshift+0x140>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d018      	beq.n	80088e0 <DMA_CalcBaseAndBitshift+0xa8>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a32      	ldr	r2, [pc, #200]	; (800897c <DMA_CalcBaseAndBitshift+0x144>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d013      	beq.n	80088e0 <DMA_CalcBaseAndBitshift+0xa8>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a30      	ldr	r2, [pc, #192]	; (8008980 <DMA_CalcBaseAndBitshift+0x148>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d00e      	beq.n	80088e0 <DMA_CalcBaseAndBitshift+0xa8>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a2f      	ldr	r2, [pc, #188]	; (8008984 <DMA_CalcBaseAndBitshift+0x14c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d009      	beq.n	80088e0 <DMA_CalcBaseAndBitshift+0xa8>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a2d      	ldr	r2, [pc, #180]	; (8008988 <DMA_CalcBaseAndBitshift+0x150>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d004      	beq.n	80088e0 <DMA_CalcBaseAndBitshift+0xa8>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a2c      	ldr	r2, [pc, #176]	; (800898c <DMA_CalcBaseAndBitshift+0x154>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d101      	bne.n	80088e4 <DMA_CalcBaseAndBitshift+0xac>
 80088e0:	2301      	movs	r3, #1
 80088e2:	e000      	b.n	80088e6 <DMA_CalcBaseAndBitshift+0xae>
 80088e4:	2300      	movs	r3, #0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d024      	beq.n	8008934 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	3b10      	subs	r3, #16
 80088f2:	4a27      	ldr	r2, [pc, #156]	; (8008990 <DMA_CalcBaseAndBitshift+0x158>)
 80088f4:	fba2 2303 	umull	r2, r3, r2, r3
 80088f8:	091b      	lsrs	r3, r3, #4
 80088fa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f003 0307 	and.w	r3, r3, #7
 8008902:	4a24      	ldr	r2, [pc, #144]	; (8008994 <DMA_CalcBaseAndBitshift+0x15c>)
 8008904:	5cd3      	ldrb	r3, [r2, r3]
 8008906:	461a      	mov	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2b03      	cmp	r3, #3
 8008910:	d908      	bls.n	8008924 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	4b1f      	ldr	r3, [pc, #124]	; (8008998 <DMA_CalcBaseAndBitshift+0x160>)
 800891a:	4013      	ands	r3, r2
 800891c:	1d1a      	adds	r2, r3, #4
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	659a      	str	r2, [r3, #88]	; 0x58
 8008922:	e00d      	b.n	8008940 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	461a      	mov	r2, r3
 800892a:	4b1b      	ldr	r3, [pc, #108]	; (8008998 <DMA_CalcBaseAndBitshift+0x160>)
 800892c:	4013      	ands	r3, r2
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	6593      	str	r3, [r2, #88]	; 0x58
 8008932:	e005      	b.n	8008940 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008944:	4618      	mov	r0, r3
 8008946:	3714      	adds	r7, #20
 8008948:	46bd      	mov	sp, r7
 800894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894e:	4770      	bx	lr
 8008950:	40020010 	.word	0x40020010
 8008954:	40020028 	.word	0x40020028
 8008958:	40020040 	.word	0x40020040
 800895c:	40020058 	.word	0x40020058
 8008960:	40020070 	.word	0x40020070
 8008964:	40020088 	.word	0x40020088
 8008968:	400200a0 	.word	0x400200a0
 800896c:	400200b8 	.word	0x400200b8
 8008970:	40020410 	.word	0x40020410
 8008974:	40020428 	.word	0x40020428
 8008978:	40020440 	.word	0x40020440
 800897c:	40020458 	.word	0x40020458
 8008980:	40020470 	.word	0x40020470
 8008984:	40020488 	.word	0x40020488
 8008988:	400204a0 	.word	0x400204a0
 800898c:	400204b8 	.word	0x400204b8
 8008990:	aaaaaaab 	.word	0xaaaaaaab
 8008994:	080129b0 	.word	0x080129b0
 8008998:	fffffc00 	.word	0xfffffc00

0800899c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089a4:	2300      	movs	r3, #0
 80089a6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d120      	bne.n	80089f2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b4:	2b03      	cmp	r3, #3
 80089b6:	d858      	bhi.n	8008a6a <DMA_CheckFifoParam+0xce>
 80089b8:	a201      	add	r2, pc, #4	; (adr r2, 80089c0 <DMA_CheckFifoParam+0x24>)
 80089ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089be:	bf00      	nop
 80089c0:	080089d1 	.word	0x080089d1
 80089c4:	080089e3 	.word	0x080089e3
 80089c8:	080089d1 	.word	0x080089d1
 80089cc:	08008a6b 	.word	0x08008a6b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d048      	beq.n	8008a6e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80089e0:	e045      	b.n	8008a6e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80089ea:	d142      	bne.n	8008a72 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80089f0:	e03f      	b.n	8008a72 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	699b      	ldr	r3, [r3, #24]
 80089f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089fa:	d123      	bne.n	8008a44 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d838      	bhi.n	8008a76 <DMA_CheckFifoParam+0xda>
 8008a04:	a201      	add	r2, pc, #4	; (adr r2, 8008a0c <DMA_CheckFifoParam+0x70>)
 8008a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0a:	bf00      	nop
 8008a0c:	08008a1d 	.word	0x08008a1d
 8008a10:	08008a23 	.word	0x08008a23
 8008a14:	08008a1d 	.word	0x08008a1d
 8008a18:	08008a35 	.word	0x08008a35
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	73fb      	strb	r3, [r7, #15]
        break;
 8008a20:	e030      	b.n	8008a84 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d025      	beq.n	8008a7a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a32:	e022      	b.n	8008a7a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a3c:	d11f      	bne.n	8008a7e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008a3e:	2301      	movs	r3, #1
 8008a40:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008a42:	e01c      	b.n	8008a7e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d902      	bls.n	8008a52 <DMA_CheckFifoParam+0xb6>
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d003      	beq.n	8008a58 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008a50:	e018      	b.n	8008a84 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008a52:	2301      	movs	r3, #1
 8008a54:	73fb      	strb	r3, [r7, #15]
        break;
 8008a56:	e015      	b.n	8008a84 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00e      	beq.n	8008a82 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	73fb      	strb	r3, [r7, #15]
    break;
 8008a68:	e00b      	b.n	8008a82 <DMA_CheckFifoParam+0xe6>
        break;
 8008a6a:	bf00      	nop
 8008a6c:	e00a      	b.n	8008a84 <DMA_CheckFifoParam+0xe8>
        break;
 8008a6e:	bf00      	nop
 8008a70:	e008      	b.n	8008a84 <DMA_CheckFifoParam+0xe8>
        break;
 8008a72:	bf00      	nop
 8008a74:	e006      	b.n	8008a84 <DMA_CheckFifoParam+0xe8>
        break;
 8008a76:	bf00      	nop
 8008a78:	e004      	b.n	8008a84 <DMA_CheckFifoParam+0xe8>
        break;
 8008a7a:	bf00      	nop
 8008a7c:	e002      	b.n	8008a84 <DMA_CheckFifoParam+0xe8>
        break;
 8008a7e:	bf00      	nop
 8008a80:	e000      	b.n	8008a84 <DMA_CheckFifoParam+0xe8>
    break;
 8008a82:	bf00      	nop
    }
  }

  return status;
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a86:	4618      	mov	r0, r3
 8008a88:	3714      	adds	r7, #20
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop

08008a94 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a38      	ldr	r2, [pc, #224]	; (8008b88 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d022      	beq.n	8008af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	4a36      	ldr	r2, [pc, #216]	; (8008b8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d01d      	beq.n	8008af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a35      	ldr	r2, [pc, #212]	; (8008b90 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d018      	beq.n	8008af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4a33      	ldr	r2, [pc, #204]	; (8008b94 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d013      	beq.n	8008af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4a32      	ldr	r2, [pc, #200]	; (8008b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d00e      	beq.n	8008af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a30      	ldr	r2, [pc, #192]	; (8008b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d009      	beq.n	8008af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a2f      	ldr	r2, [pc, #188]	; (8008ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d004      	beq.n	8008af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a2d      	ldr	r2, [pc, #180]	; (8008ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d101      	bne.n	8008af6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008af2:	2301      	movs	r3, #1
 8008af4:	e000      	b.n	8008af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008af6:	2300      	movs	r3, #0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d01a      	beq.n	8008b32 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	3b08      	subs	r3, #8
 8008b04:	4a28      	ldr	r2, [pc, #160]	; (8008ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008b06:	fba2 2303 	umull	r2, r3, r2, r3
 8008b0a:	091b      	lsrs	r3, r3, #4
 8008b0c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	4b26      	ldr	r3, [pc, #152]	; (8008bac <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008b12:	4413      	add	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	461a      	mov	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a24      	ldr	r2, [pc, #144]	; (8008bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008b20:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f003 031f 	and.w	r3, r3, #31
 8008b28:	2201      	movs	r2, #1
 8008b2a:	409a      	lsls	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008b30:	e024      	b.n	8008b7c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	3b10      	subs	r3, #16
 8008b3a:	4a1e      	ldr	r2, [pc, #120]	; (8008bb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b40:	091b      	lsrs	r3, r3, #4
 8008b42:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	4a1c      	ldr	r2, [pc, #112]	; (8008bb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d806      	bhi.n	8008b5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4a1b      	ldr	r2, [pc, #108]	; (8008bbc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d902      	bls.n	8008b5a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	3308      	adds	r3, #8
 8008b58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	4b18      	ldr	r3, [pc, #96]	; (8008bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008b5e:	4413      	add	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	461a      	mov	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a16      	ldr	r2, [pc, #88]	; (8008bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008b6c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f003 031f 	and.w	r3, r3, #31
 8008b74:	2201      	movs	r2, #1
 8008b76:	409a      	lsls	r2, r3
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008b7c:	bf00      	nop
 8008b7e:	3714      	adds	r7, #20
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	58025408 	.word	0x58025408
 8008b8c:	5802541c 	.word	0x5802541c
 8008b90:	58025430 	.word	0x58025430
 8008b94:	58025444 	.word	0x58025444
 8008b98:	58025458 	.word	0x58025458
 8008b9c:	5802546c 	.word	0x5802546c
 8008ba0:	58025480 	.word	0x58025480
 8008ba4:	58025494 	.word	0x58025494
 8008ba8:	cccccccd 	.word	0xcccccccd
 8008bac:	16009600 	.word	0x16009600
 8008bb0:	58025880 	.word	0x58025880
 8008bb4:	aaaaaaab 	.word	0xaaaaaaab
 8008bb8:	400204b8 	.word	0x400204b8
 8008bbc:	4002040f 	.word	0x4002040f
 8008bc0:	10008200 	.word	0x10008200
 8008bc4:	40020880 	.word	0x40020880

08008bc8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d04a      	beq.n	8008c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d847      	bhi.n	8008c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a25      	ldr	r2, [pc, #148]	; (8008c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d022      	beq.n	8008c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a24      	ldr	r2, [pc, #144]	; (8008c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d01d      	beq.n	8008c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a22      	ldr	r2, [pc, #136]	; (8008c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d018      	beq.n	8008c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a21      	ldr	r2, [pc, #132]	; (8008c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d013      	beq.n	8008c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a1f      	ldr	r2, [pc, #124]	; (8008c90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d00e      	beq.n	8008c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a1e      	ldr	r2, [pc, #120]	; (8008c94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d009      	beq.n	8008c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a1c      	ldr	r2, [pc, #112]	; (8008c98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d004      	beq.n	8008c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a1b      	ldr	r2, [pc, #108]	; (8008c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d101      	bne.n	8008c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008c34:	2301      	movs	r3, #1
 8008c36:	e000      	b.n	8008c3a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00a      	beq.n	8008c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008c3e:	68fa      	ldr	r2, [r7, #12]
 8008c40:	4b17      	ldr	r3, [pc, #92]	; (8008ca0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008c42:	4413      	add	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	461a      	mov	r2, r3
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a15      	ldr	r2, [pc, #84]	; (8008ca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008c50:	671a      	str	r2, [r3, #112]	; 0x70
 8008c52:	e009      	b.n	8008c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	4b14      	ldr	r3, [pc, #80]	; (8008ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008c58:	4413      	add	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a11      	ldr	r2, [pc, #68]	; (8008cac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008c66:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3b01      	subs	r3, #1
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	409a      	lsls	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008c74:	bf00      	nop
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr
 8008c80:	58025408 	.word	0x58025408
 8008c84:	5802541c 	.word	0x5802541c
 8008c88:	58025430 	.word	0x58025430
 8008c8c:	58025444 	.word	0x58025444
 8008c90:	58025458 	.word	0x58025458
 8008c94:	5802546c 	.word	0x5802546c
 8008c98:	58025480 	.word	0x58025480
 8008c9c:	58025494 	.word	0x58025494
 8008ca0:	1600963f 	.word	0x1600963f
 8008ca4:	58025940 	.word	0x58025940
 8008ca8:	1000823f 	.word	0x1000823f
 8008cac:	40020940 	.word	0x40020940

08008cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b089      	sub	sp, #36	; 0x24
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008cbe:	4b89      	ldr	r3, [pc, #548]	; (8008ee4 <HAL_GPIO_Init+0x234>)
 8008cc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008cc2:	e194      	b.n	8008fee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	2101      	movs	r1, #1
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	f000 8186 	beq.w	8008fe8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f003 0303 	and.w	r3, r3, #3
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d005      	beq.n	8008cf4 <HAL_GPIO_Init+0x44>
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	f003 0303 	and.w	r3, r3, #3
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d130      	bne.n	8008d56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	005b      	lsls	r3, r3, #1
 8008cfe:	2203      	movs	r2, #3
 8008d00:	fa02 f303 	lsl.w	r3, r2, r3
 8008d04:	43db      	mvns	r3, r3
 8008d06:	69ba      	ldr	r2, [r7, #24]
 8008d08:	4013      	ands	r3, r2
 8008d0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	68da      	ldr	r2, [r3, #12]
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	005b      	lsls	r3, r3, #1
 8008d14:	fa02 f303 	lsl.w	r3, r2, r3
 8008d18:	69ba      	ldr	r2, [r7, #24]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d32:	43db      	mvns	r3, r3
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	4013      	ands	r3, r2
 8008d38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	091b      	lsrs	r3, r3, #4
 8008d40:	f003 0201 	and.w	r2, r3, #1
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4a:	69ba      	ldr	r2, [r7, #24]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	69ba      	ldr	r2, [r7, #24]
 8008d54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	2b03      	cmp	r3, #3
 8008d60:	d017      	beq.n	8008d92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008d68:	69fb      	ldr	r3, [r7, #28]
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	2203      	movs	r2, #3
 8008d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d72:	43db      	mvns	r3, r3
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	4013      	ands	r3, r2
 8008d78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	689a      	ldr	r2, [r3, #8]
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	005b      	lsls	r3, r3, #1
 8008d82:	fa02 f303 	lsl.w	r3, r2, r3
 8008d86:	69ba      	ldr	r2, [r7, #24]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	685b      	ldr	r3, [r3, #4]
 8008d96:	f003 0303 	and.w	r3, r3, #3
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	d123      	bne.n	8008de6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	08da      	lsrs	r2, r3, #3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	3208      	adds	r2, #8
 8008da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	f003 0307 	and.w	r3, r3, #7
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	220f      	movs	r2, #15
 8008db6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dba:	43db      	mvns	r3, r3
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	691a      	ldr	r2, [r3, #16]
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	f003 0307 	and.w	r3, r3, #7
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd2:	69ba      	ldr	r2, [r7, #24]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	08da      	lsrs	r2, r3, #3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	3208      	adds	r2, #8
 8008de0:	69b9      	ldr	r1, [r7, #24]
 8008de2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	2203      	movs	r2, #3
 8008df2:	fa02 f303 	lsl.w	r3, r2, r3
 8008df6:	43db      	mvns	r3, r3
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	4013      	ands	r3, r2
 8008dfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f003 0203 	and.w	r2, r3, #3
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0e:	69ba      	ldr	r2, [r7, #24]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	69ba      	ldr	r2, [r7, #24]
 8008e18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 80e0 	beq.w	8008fe8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e28:	4b2f      	ldr	r3, [pc, #188]	; (8008ee8 <HAL_GPIO_Init+0x238>)
 8008e2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e2e:	4a2e      	ldr	r2, [pc, #184]	; (8008ee8 <HAL_GPIO_Init+0x238>)
 8008e30:	f043 0302 	orr.w	r3, r3, #2
 8008e34:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008e38:	4b2b      	ldr	r3, [pc, #172]	; (8008ee8 <HAL_GPIO_Init+0x238>)
 8008e3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	60fb      	str	r3, [r7, #12]
 8008e44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e46:	4a29      	ldr	r2, [pc, #164]	; (8008eec <HAL_GPIO_Init+0x23c>)
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	089b      	lsrs	r3, r3, #2
 8008e4c:	3302      	adds	r3, #2
 8008e4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008e54:	69fb      	ldr	r3, [r7, #28]
 8008e56:	f003 0303 	and.w	r3, r3, #3
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	220f      	movs	r2, #15
 8008e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008e62:	43db      	mvns	r3, r3
 8008e64:	69ba      	ldr	r2, [r7, #24]
 8008e66:	4013      	ands	r3, r2
 8008e68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a20      	ldr	r2, [pc, #128]	; (8008ef0 <HAL_GPIO_Init+0x240>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d052      	beq.n	8008f18 <HAL_GPIO_Init+0x268>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a1f      	ldr	r2, [pc, #124]	; (8008ef4 <HAL_GPIO_Init+0x244>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d031      	beq.n	8008ede <HAL_GPIO_Init+0x22e>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a1e      	ldr	r2, [pc, #120]	; (8008ef8 <HAL_GPIO_Init+0x248>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d02b      	beq.n	8008eda <HAL_GPIO_Init+0x22a>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a1d      	ldr	r2, [pc, #116]	; (8008efc <HAL_GPIO_Init+0x24c>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d025      	beq.n	8008ed6 <HAL_GPIO_Init+0x226>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a1c      	ldr	r2, [pc, #112]	; (8008f00 <HAL_GPIO_Init+0x250>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d01f      	beq.n	8008ed2 <HAL_GPIO_Init+0x222>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a1b      	ldr	r2, [pc, #108]	; (8008f04 <HAL_GPIO_Init+0x254>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d019      	beq.n	8008ece <HAL_GPIO_Init+0x21e>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a1a      	ldr	r2, [pc, #104]	; (8008f08 <HAL_GPIO_Init+0x258>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d013      	beq.n	8008eca <HAL_GPIO_Init+0x21a>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a19      	ldr	r2, [pc, #100]	; (8008f0c <HAL_GPIO_Init+0x25c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d00d      	beq.n	8008ec6 <HAL_GPIO_Init+0x216>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a18      	ldr	r2, [pc, #96]	; (8008f10 <HAL_GPIO_Init+0x260>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d007      	beq.n	8008ec2 <HAL_GPIO_Init+0x212>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a17      	ldr	r2, [pc, #92]	; (8008f14 <HAL_GPIO_Init+0x264>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d101      	bne.n	8008ebe <HAL_GPIO_Init+0x20e>
 8008eba:	2309      	movs	r3, #9
 8008ebc:	e02d      	b.n	8008f1a <HAL_GPIO_Init+0x26a>
 8008ebe:	230a      	movs	r3, #10
 8008ec0:	e02b      	b.n	8008f1a <HAL_GPIO_Init+0x26a>
 8008ec2:	2308      	movs	r3, #8
 8008ec4:	e029      	b.n	8008f1a <HAL_GPIO_Init+0x26a>
 8008ec6:	2307      	movs	r3, #7
 8008ec8:	e027      	b.n	8008f1a <HAL_GPIO_Init+0x26a>
 8008eca:	2306      	movs	r3, #6
 8008ecc:	e025      	b.n	8008f1a <HAL_GPIO_Init+0x26a>
 8008ece:	2305      	movs	r3, #5
 8008ed0:	e023      	b.n	8008f1a <HAL_GPIO_Init+0x26a>
 8008ed2:	2304      	movs	r3, #4
 8008ed4:	e021      	b.n	8008f1a <HAL_GPIO_Init+0x26a>
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e01f      	b.n	8008f1a <HAL_GPIO_Init+0x26a>
 8008eda:	2302      	movs	r3, #2
 8008edc:	e01d      	b.n	8008f1a <HAL_GPIO_Init+0x26a>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e01b      	b.n	8008f1a <HAL_GPIO_Init+0x26a>
 8008ee2:	bf00      	nop
 8008ee4:	58000080 	.word	0x58000080
 8008ee8:	58024400 	.word	0x58024400
 8008eec:	58000400 	.word	0x58000400
 8008ef0:	58020000 	.word	0x58020000
 8008ef4:	58020400 	.word	0x58020400
 8008ef8:	58020800 	.word	0x58020800
 8008efc:	58020c00 	.word	0x58020c00
 8008f00:	58021000 	.word	0x58021000
 8008f04:	58021400 	.word	0x58021400
 8008f08:	58021800 	.word	0x58021800
 8008f0c:	58021c00 	.word	0x58021c00
 8008f10:	58022000 	.word	0x58022000
 8008f14:	58022400 	.word	0x58022400
 8008f18:	2300      	movs	r3, #0
 8008f1a:	69fa      	ldr	r2, [r7, #28]
 8008f1c:	f002 0203 	and.w	r2, r2, #3
 8008f20:	0092      	lsls	r2, r2, #2
 8008f22:	4093      	lsls	r3, r2
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008f2a:	4938      	ldr	r1, [pc, #224]	; (800900c <HAL_GPIO_Init+0x35c>)
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	089b      	lsrs	r3, r3, #2
 8008f30:	3302      	adds	r3, #2
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008f38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	43db      	mvns	r3, r3
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	4013      	ands	r3, r2
 8008f48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008f56:	69ba      	ldr	r2, [r7, #24]
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008f5e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	43db      	mvns	r3, r3
 8008f72:	69ba      	ldr	r2, [r7, #24]
 8008f74:	4013      	ands	r3, r2
 8008f76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	43db      	mvns	r3, r3
 8008f9e:	69ba      	ldr	r2, [r7, #24]
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d003      	beq.n	8008fb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008fb0:	69ba      	ldr	r2, [r7, #24]
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	69ba      	ldr	r2, [r7, #24]
 8008fbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	43db      	mvns	r3, r3
 8008fc8:	69ba      	ldr	r2, [r7, #24]
 8008fca:	4013      	ands	r3, r2
 8008fcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d003      	beq.n	8008fe2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008fda:	69ba      	ldr	r2, [r7, #24]
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	69ba      	ldr	r2, [r7, #24]
 8008fe6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	3301      	adds	r3, #1
 8008fec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f47f ae63 	bne.w	8008cc4 <HAL_GPIO_Init+0x14>
  }
}
 8008ffe:	bf00      	nop
 8009000:	bf00      	nop
 8009002:	3724      	adds	r7, #36	; 0x24
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	58000400 	.word	0x58000400

08009010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	807b      	strh	r3, [r7, #2]
 800901c:	4613      	mov	r3, r2
 800901e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009020:	787b      	ldrb	r3, [r7, #1]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009026:	887a      	ldrh	r2, [r7, #2]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800902c:	e003      	b.n	8009036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800902e:	887b      	ldrh	r3, [r7, #2]
 8009030:	041a      	lsls	r2, r3, #16
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	619a      	str	r2, [r3, #24]
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr

08009042 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009042:	b580      	push	{r7, lr}
 8009044:	b082      	sub	sp, #8
 8009046:	af00      	add	r7, sp, #0
 8009048:	4603      	mov	r3, r0
 800904a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800904c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009050:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009054:	88fb      	ldrh	r3, [r7, #6]
 8009056:	4013      	ands	r3, r2
 8009058:	2b00      	cmp	r3, #0
 800905a:	d008      	beq.n	800906e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800905c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009060:	88fb      	ldrh	r3, [r7, #6]
 8009062:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009066:	88fb      	ldrh	r3, [r7, #6]
 8009068:	4618      	mov	r0, r3
 800906a:	f7fa fe45 	bl	8003cf8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800906e:	bf00      	nop
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009080:	4b19      	ldr	r3, [pc, #100]	; (80090e8 <HAL_PWREx_ConfigSupply+0x70>)
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	f003 0304 	and.w	r3, r3, #4
 8009088:	2b04      	cmp	r3, #4
 800908a:	d00a      	beq.n	80090a2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800908c:	4b16      	ldr	r3, [pc, #88]	; (80090e8 <HAL_PWREx_ConfigSupply+0x70>)
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f003 0307 	and.w	r3, r3, #7
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	429a      	cmp	r2, r3
 8009098:	d001      	beq.n	800909e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e01f      	b.n	80090de <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800909e:	2300      	movs	r3, #0
 80090a0:	e01d      	b.n	80090de <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80090a2:	4b11      	ldr	r3, [pc, #68]	; (80090e8 <HAL_PWREx_ConfigSupply+0x70>)
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	f023 0207 	bic.w	r2, r3, #7
 80090aa:	490f      	ldr	r1, [pc, #60]	; (80090e8 <HAL_PWREx_ConfigSupply+0x70>)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80090b2:	f7fc fc91 	bl	80059d8 <HAL_GetTick>
 80090b6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80090b8:	e009      	b.n	80090ce <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80090ba:	f7fc fc8d 	bl	80059d8 <HAL_GetTick>
 80090be:	4602      	mov	r2, r0
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	1ad3      	subs	r3, r2, r3
 80090c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090c8:	d901      	bls.n	80090ce <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e007      	b.n	80090de <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80090ce:	4b06      	ldr	r3, [pc, #24]	; (80090e8 <HAL_PWREx_ConfigSupply+0x70>)
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090da:	d1ee      	bne.n	80090ba <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80090dc:	2300      	movs	r3, #0
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3710      	adds	r7, #16
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}
 80090e6:	bf00      	nop
 80090e8:	58024800 	.word	0x58024800

080090ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08c      	sub	sp, #48	; 0x30
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d102      	bne.n	8009100 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80090fa:	2301      	movs	r3, #1
 80090fc:	f000 bc1c 	b.w	8009938 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	2b00      	cmp	r3, #0
 800910a:	f000 8087 	beq.w	800921c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800910e:	4b9e      	ldr	r3, [pc, #632]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009116:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009118:	4b9b      	ldr	r3, [pc, #620]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 800911a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800911c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800911e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009120:	2b10      	cmp	r3, #16
 8009122:	d007      	beq.n	8009134 <HAL_RCC_OscConfig+0x48>
 8009124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009126:	2b18      	cmp	r3, #24
 8009128:	d110      	bne.n	800914c <HAL_RCC_OscConfig+0x60>
 800912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912c:	f003 0303 	and.w	r3, r3, #3
 8009130:	2b02      	cmp	r3, #2
 8009132:	d10b      	bne.n	800914c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009134:	4b94      	ldr	r3, [pc, #592]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d06c      	beq.n	800921a <HAL_RCC_OscConfig+0x12e>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d168      	bne.n	800921a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e3f5      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009154:	d106      	bne.n	8009164 <HAL_RCC_OscConfig+0x78>
 8009156:	4b8c      	ldr	r3, [pc, #560]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a8b      	ldr	r2, [pc, #556]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 800915c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009160:	6013      	str	r3, [r2, #0]
 8009162:	e02e      	b.n	80091c2 <HAL_RCC_OscConfig+0xd6>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10c      	bne.n	8009186 <HAL_RCC_OscConfig+0x9a>
 800916c:	4b86      	ldr	r3, [pc, #536]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a85      	ldr	r2, [pc, #532]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 8009172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009176:	6013      	str	r3, [r2, #0]
 8009178:	4b83      	ldr	r3, [pc, #524]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a82      	ldr	r2, [pc, #520]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 800917e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009182:	6013      	str	r3, [r2, #0]
 8009184:	e01d      	b.n	80091c2 <HAL_RCC_OscConfig+0xd6>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800918e:	d10c      	bne.n	80091aa <HAL_RCC_OscConfig+0xbe>
 8009190:	4b7d      	ldr	r3, [pc, #500]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a7c      	ldr	r2, [pc, #496]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 8009196:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800919a:	6013      	str	r3, [r2, #0]
 800919c:	4b7a      	ldr	r3, [pc, #488]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a79      	ldr	r2, [pc, #484]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 80091a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091a6:	6013      	str	r3, [r2, #0]
 80091a8:	e00b      	b.n	80091c2 <HAL_RCC_OscConfig+0xd6>
 80091aa:	4b77      	ldr	r3, [pc, #476]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a76      	ldr	r2, [pc, #472]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 80091b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	4b74      	ldr	r3, [pc, #464]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a73      	ldr	r2, [pc, #460]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 80091bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091c0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d013      	beq.n	80091f2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ca:	f7fc fc05 	bl	80059d8 <HAL_GetTick>
 80091ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80091d0:	e008      	b.n	80091e4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091d2:	f7fc fc01 	bl	80059d8 <HAL_GetTick>
 80091d6:	4602      	mov	r2, r0
 80091d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	2b64      	cmp	r3, #100	; 0x64
 80091de:	d901      	bls.n	80091e4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e3a9      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80091e4:	4b68      	ldr	r3, [pc, #416]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d0f0      	beq.n	80091d2 <HAL_RCC_OscConfig+0xe6>
 80091f0:	e014      	b.n	800921c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091f2:	f7fc fbf1 	bl	80059d8 <HAL_GetTick>
 80091f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80091f8:	e008      	b.n	800920c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091fa:	f7fc fbed 	bl	80059d8 <HAL_GetTick>
 80091fe:	4602      	mov	r2, r0
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	2b64      	cmp	r3, #100	; 0x64
 8009206:	d901      	bls.n	800920c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8009208:	2303      	movs	r3, #3
 800920a:	e395      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800920c:	4b5e      	ldr	r3, [pc, #376]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d1f0      	bne.n	80091fa <HAL_RCC_OscConfig+0x10e>
 8009218:	e000      	b.n	800921c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800921a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 0302 	and.w	r3, r3, #2
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 80ca 	beq.w	80093be <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800922a:	4b57      	ldr	r3, [pc, #348]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009232:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009234:	4b54      	ldr	r3, [pc, #336]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 8009236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009238:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800923a:	6a3b      	ldr	r3, [r7, #32]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d007      	beq.n	8009250 <HAL_RCC_OscConfig+0x164>
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	2b18      	cmp	r3, #24
 8009244:	d156      	bne.n	80092f4 <HAL_RCC_OscConfig+0x208>
 8009246:	69fb      	ldr	r3, [r7, #28]
 8009248:	f003 0303 	and.w	r3, r3, #3
 800924c:	2b00      	cmp	r3, #0
 800924e:	d151      	bne.n	80092f4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009250:	4b4d      	ldr	r3, [pc, #308]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	2b00      	cmp	r3, #0
 800925a:	d005      	beq.n	8009268 <HAL_RCC_OscConfig+0x17c>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8009264:	2301      	movs	r3, #1
 8009266:	e367      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009268:	4b47      	ldr	r3, [pc, #284]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f023 0219 	bic.w	r2, r3, #25
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	4944      	ldr	r1, [pc, #272]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 8009276:	4313      	orrs	r3, r2
 8009278:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800927a:	f7fc fbad 	bl	80059d8 <HAL_GetTick>
 800927e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009280:	e008      	b.n	8009294 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009282:	f7fc fba9 	bl	80059d8 <HAL_GetTick>
 8009286:	4602      	mov	r2, r0
 8009288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	2b02      	cmp	r3, #2
 800928e:	d901      	bls.n	8009294 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e351      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009294:	4b3c      	ldr	r3, [pc, #240]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f003 0304 	and.w	r3, r3, #4
 800929c:	2b00      	cmp	r3, #0
 800929e:	d0f0      	beq.n	8009282 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092a0:	f7fc fba6 	bl	80059f0 <HAL_GetREVID>
 80092a4:	4603      	mov	r3, r0
 80092a6:	f241 0203 	movw	r2, #4099	; 0x1003
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d817      	bhi.n	80092de <HAL_RCC_OscConfig+0x1f2>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	2b40      	cmp	r3, #64	; 0x40
 80092b4:	d108      	bne.n	80092c8 <HAL_RCC_OscConfig+0x1dc>
 80092b6:	4b34      	ldr	r3, [pc, #208]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80092be:	4a32      	ldr	r2, [pc, #200]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 80092c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092c4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80092c6:	e07a      	b.n	80093be <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092c8:	4b2f      	ldr	r3, [pc, #188]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	031b      	lsls	r3, r3, #12
 80092d6:	492c      	ldr	r1, [pc, #176]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 80092d8:	4313      	orrs	r3, r2
 80092da:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80092dc:	e06f      	b.n	80093be <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092de:	4b2a      	ldr	r3, [pc, #168]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	691b      	ldr	r3, [r3, #16]
 80092ea:	061b      	lsls	r3, r3, #24
 80092ec:	4926      	ldr	r1, [pc, #152]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80092f2:	e064      	b.n	80093be <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d047      	beq.n	800938c <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80092fc:	4b22      	ldr	r3, [pc, #136]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f023 0219 	bic.w	r2, r3, #25
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	491f      	ldr	r1, [pc, #124]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 800930a:	4313      	orrs	r3, r2
 800930c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800930e:	f7fc fb63 	bl	80059d8 <HAL_GetTick>
 8009312:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009314:	e008      	b.n	8009328 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009316:	f7fc fb5f 	bl	80059d8 <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d901      	bls.n	8009328 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e307      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009328:	4b17      	ldr	r3, [pc, #92]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f003 0304 	and.w	r3, r3, #4
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0f0      	beq.n	8009316 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009334:	f7fc fb5c 	bl	80059f0 <HAL_GetREVID>
 8009338:	4603      	mov	r3, r0
 800933a:	f241 0203 	movw	r2, #4099	; 0x1003
 800933e:	4293      	cmp	r3, r2
 8009340:	d817      	bhi.n	8009372 <HAL_RCC_OscConfig+0x286>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	691b      	ldr	r3, [r3, #16]
 8009346:	2b40      	cmp	r3, #64	; 0x40
 8009348:	d108      	bne.n	800935c <HAL_RCC_OscConfig+0x270>
 800934a:	4b0f      	ldr	r3, [pc, #60]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009352:	4a0d      	ldr	r2, [pc, #52]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 8009354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009358:	6053      	str	r3, [r2, #4]
 800935a:	e030      	b.n	80093be <HAL_RCC_OscConfig+0x2d2>
 800935c:	4b0a      	ldr	r3, [pc, #40]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	031b      	lsls	r3, r3, #12
 800936a:	4907      	ldr	r1, [pc, #28]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 800936c:	4313      	orrs	r3, r2
 800936e:	604b      	str	r3, [r1, #4]
 8009370:	e025      	b.n	80093be <HAL_RCC_OscConfig+0x2d2>
 8009372:	4b05      	ldr	r3, [pc, #20]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 8009374:	685b      	ldr	r3, [r3, #4]
 8009376:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	691b      	ldr	r3, [r3, #16]
 800937e:	061b      	lsls	r3, r3, #24
 8009380:	4901      	ldr	r1, [pc, #4]	; (8009388 <HAL_RCC_OscConfig+0x29c>)
 8009382:	4313      	orrs	r3, r2
 8009384:	604b      	str	r3, [r1, #4]
 8009386:	e01a      	b.n	80093be <HAL_RCC_OscConfig+0x2d2>
 8009388:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800938c:	4b9e      	ldr	r3, [pc, #632]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a9d      	ldr	r2, [pc, #628]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 8009392:	f023 0301 	bic.w	r3, r3, #1
 8009396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009398:	f7fc fb1e 	bl	80059d8 <HAL_GetTick>
 800939c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800939e:	e008      	b.n	80093b2 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80093a0:	f7fc fb1a 	bl	80059d8 <HAL_GetTick>
 80093a4:	4602      	mov	r2, r0
 80093a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	2b02      	cmp	r3, #2
 80093ac:	d901      	bls.n	80093b2 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e2c2      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80093b2:	4b95      	ldr	r3, [pc, #596]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 0304 	and.w	r3, r3, #4
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1f0      	bne.n	80093a0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 0310 	and.w	r3, r3, #16
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	f000 80a9 	beq.w	800951e <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80093cc:	4b8e      	ldr	r3, [pc, #568]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093d4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80093d6:	4b8c      	ldr	r3, [pc, #560]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80093d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093da:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	2b08      	cmp	r3, #8
 80093e0:	d007      	beq.n	80093f2 <HAL_RCC_OscConfig+0x306>
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	2b18      	cmp	r3, #24
 80093e6:	d13a      	bne.n	800945e <HAL_RCC_OscConfig+0x372>
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f003 0303 	and.w	r3, r3, #3
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d135      	bne.n	800945e <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80093f2:	4b85      	ldr	r3, [pc, #532]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d005      	beq.n	800940a <HAL_RCC_OscConfig+0x31e>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	69db      	ldr	r3, [r3, #28]
 8009402:	2b80      	cmp	r3, #128	; 0x80
 8009404:	d001      	beq.n	800940a <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	e296      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800940a:	f7fc faf1 	bl	80059f0 <HAL_GetREVID>
 800940e:	4603      	mov	r3, r0
 8009410:	f241 0203 	movw	r2, #4099	; 0x1003
 8009414:	4293      	cmp	r3, r2
 8009416:	d817      	bhi.n	8009448 <HAL_RCC_OscConfig+0x35c>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a1b      	ldr	r3, [r3, #32]
 800941c:	2b20      	cmp	r3, #32
 800941e:	d108      	bne.n	8009432 <HAL_RCC_OscConfig+0x346>
 8009420:	4b79      	ldr	r3, [pc, #484]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009428:	4a77      	ldr	r2, [pc, #476]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 800942a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800942e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009430:	e075      	b.n	800951e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009432:	4b75      	ldr	r3, [pc, #468]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	069b      	lsls	r3, r3, #26
 8009440:	4971      	ldr	r1, [pc, #452]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 8009442:	4313      	orrs	r3, r2
 8009444:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009446:	e06a      	b.n	800951e <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009448:	4b6f      	ldr	r3, [pc, #444]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	061b      	lsls	r3, r3, #24
 8009456:	496c      	ldr	r1, [pc, #432]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 8009458:	4313      	orrs	r3, r2
 800945a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800945c:	e05f      	b.n	800951e <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d042      	beq.n	80094ec <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009466:	4b68      	ldr	r3, [pc, #416]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a67      	ldr	r2, [pc, #412]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 800946c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009472:	f7fc fab1 	bl	80059d8 <HAL_GetTick>
 8009476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009478:	e008      	b.n	800948c <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800947a:	f7fc faad 	bl	80059d8 <HAL_GetTick>
 800947e:	4602      	mov	r2, r0
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	2b02      	cmp	r3, #2
 8009486:	d901      	bls.n	800948c <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8009488:	2303      	movs	r3, #3
 800948a:	e255      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800948c:	4b5e      	ldr	r3, [pc, #376]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009494:	2b00      	cmp	r3, #0
 8009496:	d0f0      	beq.n	800947a <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009498:	f7fc faaa 	bl	80059f0 <HAL_GetREVID>
 800949c:	4603      	mov	r3, r0
 800949e:	f241 0203 	movw	r2, #4099	; 0x1003
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d817      	bhi.n	80094d6 <HAL_RCC_OscConfig+0x3ea>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	2b20      	cmp	r3, #32
 80094ac:	d108      	bne.n	80094c0 <HAL_RCC_OscConfig+0x3d4>
 80094ae:	4b56      	ldr	r3, [pc, #344]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80094b6:	4a54      	ldr	r2, [pc, #336]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80094b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80094bc:	6053      	str	r3, [r2, #4]
 80094be:	e02e      	b.n	800951e <HAL_RCC_OscConfig+0x432>
 80094c0:	4b51      	ldr	r3, [pc, #324]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6a1b      	ldr	r3, [r3, #32]
 80094cc:	069b      	lsls	r3, r3, #26
 80094ce:	494e      	ldr	r1, [pc, #312]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80094d0:	4313      	orrs	r3, r2
 80094d2:	604b      	str	r3, [r1, #4]
 80094d4:	e023      	b.n	800951e <HAL_RCC_OscConfig+0x432>
 80094d6:	4b4c      	ldr	r3, [pc, #304]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a1b      	ldr	r3, [r3, #32]
 80094e2:	061b      	lsls	r3, r3, #24
 80094e4:	4948      	ldr	r1, [pc, #288]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	60cb      	str	r3, [r1, #12]
 80094ea:	e018      	b.n	800951e <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80094ec:	4b46      	ldr	r3, [pc, #280]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a45      	ldr	r2, [pc, #276]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80094f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094f8:	f7fc fa6e 	bl	80059d8 <HAL_GetTick>
 80094fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80094fe:	e008      	b.n	8009512 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009500:	f7fc fa6a 	bl	80059d8 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	2b02      	cmp	r3, #2
 800950c:	d901      	bls.n	8009512 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e212      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009512:	4b3d      	ldr	r3, [pc, #244]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1f0      	bne.n	8009500 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0308 	and.w	r3, r3, #8
 8009526:	2b00      	cmp	r3, #0
 8009528:	d036      	beq.n	8009598 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d019      	beq.n	8009566 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009532:	4b35      	ldr	r3, [pc, #212]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 8009534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009536:	4a34      	ldr	r2, [pc, #208]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 8009538:	f043 0301 	orr.w	r3, r3, #1
 800953c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800953e:	f7fc fa4b 	bl	80059d8 <HAL_GetTick>
 8009542:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009544:	e008      	b.n	8009558 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009546:	f7fc fa47 	bl	80059d8 <HAL_GetTick>
 800954a:	4602      	mov	r2, r0
 800954c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800954e:	1ad3      	subs	r3, r2, r3
 8009550:	2b02      	cmp	r3, #2
 8009552:	d901      	bls.n	8009558 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009554:	2303      	movs	r3, #3
 8009556:	e1ef      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009558:	4b2b      	ldr	r3, [pc, #172]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 800955a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800955c:	f003 0302 	and.w	r3, r3, #2
 8009560:	2b00      	cmp	r3, #0
 8009562:	d0f0      	beq.n	8009546 <HAL_RCC_OscConfig+0x45a>
 8009564:	e018      	b.n	8009598 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009566:	4b28      	ldr	r3, [pc, #160]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 8009568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800956a:	4a27      	ldr	r2, [pc, #156]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 800956c:	f023 0301 	bic.w	r3, r3, #1
 8009570:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009572:	f7fc fa31 	bl	80059d8 <HAL_GetTick>
 8009576:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009578:	e008      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800957a:	f7fc fa2d 	bl	80059d8 <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	2b02      	cmp	r3, #2
 8009586:	d901      	bls.n	800958c <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8009588:	2303      	movs	r3, #3
 800958a:	e1d5      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800958c:	4b1e      	ldr	r3, [pc, #120]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 800958e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009590:	f003 0302 	and.w	r3, r3, #2
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1f0      	bne.n	800957a <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f003 0320 	and.w	r3, r3, #32
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d039      	beq.n	8009618 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d019      	beq.n	80095e0 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80095ac:	4b16      	ldr	r3, [pc, #88]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a15      	ldr	r2, [pc, #84]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80095b2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80095b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80095b8:	f7fc fa0e 	bl	80059d8 <HAL_GetTick>
 80095bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80095be:	e008      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80095c0:	f7fc fa0a 	bl	80059d8 <HAL_GetTick>
 80095c4:	4602      	mov	r2, r0
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	1ad3      	subs	r3, r2, r3
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d901      	bls.n	80095d2 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e1b2      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80095d2:	4b0d      	ldr	r3, [pc, #52]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d0f0      	beq.n	80095c0 <HAL_RCC_OscConfig+0x4d4>
 80095de:	e01b      	b.n	8009618 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80095e0:	4b09      	ldr	r3, [pc, #36]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a08      	ldr	r2, [pc, #32]	; (8009608 <HAL_RCC_OscConfig+0x51c>)
 80095e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80095ec:	f7fc f9f4 	bl	80059d8 <HAL_GetTick>
 80095f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80095f2:	e00b      	b.n	800960c <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80095f4:	f7fc f9f0 	bl	80059d8 <HAL_GetTick>
 80095f8:	4602      	mov	r2, r0
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	2b02      	cmp	r3, #2
 8009600:	d904      	bls.n	800960c <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e198      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
 8009606:	bf00      	nop
 8009608:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800960c:	4ba3      	ldr	r3, [pc, #652]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1ed      	bne.n	80095f4 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0304 	and.w	r3, r3, #4
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 8081 	beq.w	8009728 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009626:	4b9e      	ldr	r3, [pc, #632]	; (80098a0 <HAL_RCC_OscConfig+0x7b4>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a9d      	ldr	r2, [pc, #628]	; (80098a0 <HAL_RCC_OscConfig+0x7b4>)
 800962c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009630:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009632:	f7fc f9d1 	bl	80059d8 <HAL_GetTick>
 8009636:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009638:	e008      	b.n	800964c <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800963a:	f7fc f9cd 	bl	80059d8 <HAL_GetTick>
 800963e:	4602      	mov	r2, r0
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	1ad3      	subs	r3, r2, r3
 8009644:	2b64      	cmp	r3, #100	; 0x64
 8009646:	d901      	bls.n	800964c <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8009648:	2303      	movs	r3, #3
 800964a:	e175      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800964c:	4b94      	ldr	r3, [pc, #592]	; (80098a0 <HAL_RCC_OscConfig+0x7b4>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009654:	2b00      	cmp	r3, #0
 8009656:	d0f0      	beq.n	800963a <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d106      	bne.n	800966e <HAL_RCC_OscConfig+0x582>
 8009660:	4b8e      	ldr	r3, [pc, #568]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009664:	4a8d      	ldr	r2, [pc, #564]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009666:	f043 0301 	orr.w	r3, r3, #1
 800966a:	6713      	str	r3, [r2, #112]	; 0x70
 800966c:	e02d      	b.n	80096ca <HAL_RCC_OscConfig+0x5de>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d10c      	bne.n	8009690 <HAL_RCC_OscConfig+0x5a4>
 8009676:	4b89      	ldr	r3, [pc, #548]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800967a:	4a88      	ldr	r2, [pc, #544]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 800967c:	f023 0301 	bic.w	r3, r3, #1
 8009680:	6713      	str	r3, [r2, #112]	; 0x70
 8009682:	4b86      	ldr	r3, [pc, #536]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009686:	4a85      	ldr	r2, [pc, #532]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009688:	f023 0304 	bic.w	r3, r3, #4
 800968c:	6713      	str	r3, [r2, #112]	; 0x70
 800968e:	e01c      	b.n	80096ca <HAL_RCC_OscConfig+0x5de>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	2b05      	cmp	r3, #5
 8009696:	d10c      	bne.n	80096b2 <HAL_RCC_OscConfig+0x5c6>
 8009698:	4b80      	ldr	r3, [pc, #512]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 800969a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800969c:	4a7f      	ldr	r2, [pc, #508]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 800969e:	f043 0304 	orr.w	r3, r3, #4
 80096a2:	6713      	str	r3, [r2, #112]	; 0x70
 80096a4:	4b7d      	ldr	r3, [pc, #500]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 80096a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a8:	4a7c      	ldr	r2, [pc, #496]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 80096aa:	f043 0301 	orr.w	r3, r3, #1
 80096ae:	6713      	str	r3, [r2, #112]	; 0x70
 80096b0:	e00b      	b.n	80096ca <HAL_RCC_OscConfig+0x5de>
 80096b2:	4b7a      	ldr	r3, [pc, #488]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 80096b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096b6:	4a79      	ldr	r2, [pc, #484]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 80096b8:	f023 0301 	bic.w	r3, r3, #1
 80096bc:	6713      	str	r3, [r2, #112]	; 0x70
 80096be:	4b77      	ldr	r3, [pc, #476]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 80096c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c2:	4a76      	ldr	r2, [pc, #472]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 80096c4:	f023 0304 	bic.w	r3, r3, #4
 80096c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d015      	beq.n	80096fe <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096d2:	f7fc f981 	bl	80059d8 <HAL_GetTick>
 80096d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096d8:	e00a      	b.n	80096f0 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096da:	f7fc f97d 	bl	80059d8 <HAL_GetTick>
 80096de:	4602      	mov	r2, r0
 80096e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e2:	1ad3      	subs	r3, r2, r3
 80096e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d901      	bls.n	80096f0 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e123      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80096f0:	4b6a      	ldr	r3, [pc, #424]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 80096f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f4:	f003 0302 	and.w	r3, r3, #2
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d0ee      	beq.n	80096da <HAL_RCC_OscConfig+0x5ee>
 80096fc:	e014      	b.n	8009728 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096fe:	f7fc f96b 	bl	80059d8 <HAL_GetTick>
 8009702:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009704:	e00a      	b.n	800971c <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009706:	f7fc f967 	bl	80059d8 <HAL_GetTick>
 800970a:	4602      	mov	r2, r0
 800970c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	f241 3288 	movw	r2, #5000	; 0x1388
 8009714:	4293      	cmp	r3, r2
 8009716:	d901      	bls.n	800971c <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e10d      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800971c:	4b5f      	ldr	r3, [pc, #380]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 800971e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009720:	f003 0302 	and.w	r3, r3, #2
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1ee      	bne.n	8009706 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 8102 	beq.w	8009936 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009732:	4b5a      	ldr	r3, [pc, #360]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800973a:	2b18      	cmp	r3, #24
 800973c:	f000 80bd 	beq.w	80098ba <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009744:	2b02      	cmp	r3, #2
 8009746:	f040 8095 	bne.w	8009874 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800974a:	4b54      	ldr	r3, [pc, #336]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a53      	ldr	r2, [pc, #332]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009750:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009756:	f7fc f93f 	bl	80059d8 <HAL_GetTick>
 800975a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800975c:	e008      	b.n	8009770 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800975e:	f7fc f93b 	bl	80059d8 <HAL_GetTick>
 8009762:	4602      	mov	r2, r0
 8009764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	2b02      	cmp	r3, #2
 800976a:	d901      	bls.n	8009770 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 800976c:	2303      	movs	r3, #3
 800976e:	e0e3      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009770:	4b4a      	ldr	r3, [pc, #296]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d1f0      	bne.n	800975e <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800977c:	4b47      	ldr	r3, [pc, #284]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 800977e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009780:	4b48      	ldr	r3, [pc, #288]	; (80098a4 <HAL_RCC_OscConfig+0x7b8>)
 8009782:	4013      	ands	r3, r2
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800978c:	0112      	lsls	r2, r2, #4
 800978e:	430a      	orrs	r2, r1
 8009790:	4942      	ldr	r1, [pc, #264]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009792:	4313      	orrs	r3, r2
 8009794:	628b      	str	r3, [r1, #40]	; 0x28
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979a:	3b01      	subs	r3, #1
 800979c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097a4:	3b01      	subs	r3, #1
 80097a6:	025b      	lsls	r3, r3, #9
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	431a      	orrs	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b0:	3b01      	subs	r3, #1
 80097b2:	041b      	lsls	r3, r3, #16
 80097b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80097b8:	431a      	orrs	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097be:	3b01      	subs	r3, #1
 80097c0:	061b      	lsls	r3, r3, #24
 80097c2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80097c6:	4935      	ldr	r1, [pc, #212]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80097cc:	4b33      	ldr	r3, [pc, #204]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 80097ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097d0:	4a32      	ldr	r2, [pc, #200]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 80097d2:	f023 0301 	bic.w	r3, r3, #1
 80097d6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80097d8:	4b30      	ldr	r3, [pc, #192]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 80097da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097dc:	4b32      	ldr	r3, [pc, #200]	; (80098a8 <HAL_RCC_OscConfig+0x7bc>)
 80097de:	4013      	ands	r3, r2
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80097e4:	00d2      	lsls	r2, r2, #3
 80097e6:	492d      	ldr	r1, [pc, #180]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 80097e8:	4313      	orrs	r3, r2
 80097ea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80097ec:	4b2b      	ldr	r3, [pc, #172]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 80097ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f0:	f023 020c 	bic.w	r2, r3, #12
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f8:	4928      	ldr	r1, [pc, #160]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 80097fa:	4313      	orrs	r3, r2
 80097fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80097fe:	4b27      	ldr	r3, [pc, #156]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009802:	f023 0202 	bic.w	r2, r3, #2
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800980a:	4924      	ldr	r1, [pc, #144]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 800980c:	4313      	orrs	r3, r2
 800980e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009810:	4b22      	ldr	r3, [pc, #136]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009814:	4a21      	ldr	r2, [pc, #132]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800981a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800981c:	4b1f      	ldr	r3, [pc, #124]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 800981e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009820:	4a1e      	ldr	r2, [pc, #120]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009828:	4b1c      	ldr	r3, [pc, #112]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 800982a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800982c:	4a1b      	ldr	r2, [pc, #108]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 800982e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009834:	4b19      	ldr	r3, [pc, #100]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009838:	4a18      	ldr	r2, [pc, #96]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 800983a:	f043 0301 	orr.w	r3, r3, #1
 800983e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009840:	4b16      	ldr	r3, [pc, #88]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a15      	ldr	r2, [pc, #84]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800984a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800984c:	f7fc f8c4 	bl	80059d8 <HAL_GetTick>
 8009850:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009852:	e008      	b.n	8009866 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009854:	f7fc f8c0 	bl	80059d8 <HAL_GetTick>
 8009858:	4602      	mov	r2, r0
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	1ad3      	subs	r3, r2, r3
 800985e:	2b02      	cmp	r3, #2
 8009860:	d901      	bls.n	8009866 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8009862:	2303      	movs	r3, #3
 8009864:	e068      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009866:	4b0d      	ldr	r3, [pc, #52]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d0f0      	beq.n	8009854 <HAL_RCC_OscConfig+0x768>
 8009872:	e060      	b.n	8009936 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009874:	4b09      	ldr	r3, [pc, #36]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a08      	ldr	r2, [pc, #32]	; (800989c <HAL_RCC_OscConfig+0x7b0>)
 800987a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800987e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009880:	f7fc f8aa 	bl	80059d8 <HAL_GetTick>
 8009884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009886:	e011      	b.n	80098ac <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009888:	f7fc f8a6 	bl	80059d8 <HAL_GetTick>
 800988c:	4602      	mov	r2, r0
 800988e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	2b02      	cmp	r3, #2
 8009894:	d90a      	bls.n	80098ac <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8009896:	2303      	movs	r3, #3
 8009898:	e04e      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
 800989a:	bf00      	nop
 800989c:	58024400 	.word	0x58024400
 80098a0:	58024800 	.word	0x58024800
 80098a4:	fffffc0c 	.word	0xfffffc0c
 80098a8:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80098ac:	4b24      	ldr	r3, [pc, #144]	; (8009940 <HAL_RCC_OscConfig+0x854>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d1e7      	bne.n	8009888 <HAL_RCC_OscConfig+0x79c>
 80098b8:	e03d      	b.n	8009936 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80098ba:	4b21      	ldr	r3, [pc, #132]	; (8009940 <HAL_RCC_OscConfig+0x854>)
 80098bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098be:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80098c0:	4b1f      	ldr	r3, [pc, #124]	; (8009940 <HAL_RCC_OscConfig+0x854>)
 80098c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d031      	beq.n	8009932 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	f003 0203 	and.w	r2, r3, #3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80098d8:	429a      	cmp	r2, r3
 80098da:	d12a      	bne.n	8009932 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	091b      	lsrs	r3, r3, #4
 80098e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d122      	bne.n	8009932 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d11a      	bne.n	8009932 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	0a5b      	lsrs	r3, r3, #9
 8009900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009908:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800990a:	429a      	cmp	r2, r3
 800990c:	d111      	bne.n	8009932 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	0c1b      	lsrs	r3, r3, #16
 8009912:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800991c:	429a      	cmp	r2, r3
 800991e:	d108      	bne.n	8009932 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	0e1b      	lsrs	r3, r3, #24
 8009924:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800992c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800992e:	429a      	cmp	r2, r3
 8009930:	d001      	beq.n	8009936 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	e000      	b.n	8009938 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3730      	adds	r7, #48	; 0x30
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	58024400 	.word	0x58024400

08009944 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b086      	sub	sp, #24
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d101      	bne.n	8009958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e19c      	b.n	8009c92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009958:	4b8a      	ldr	r3, [pc, #552]	; (8009b84 <HAL_RCC_ClockConfig+0x240>)
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 030f 	and.w	r3, r3, #15
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	429a      	cmp	r2, r3
 8009964:	d910      	bls.n	8009988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009966:	4b87      	ldr	r3, [pc, #540]	; (8009b84 <HAL_RCC_ClockConfig+0x240>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f023 020f 	bic.w	r2, r3, #15
 800996e:	4985      	ldr	r1, [pc, #532]	; (8009b84 <HAL_RCC_ClockConfig+0x240>)
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	4313      	orrs	r3, r2
 8009974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009976:	4b83      	ldr	r3, [pc, #524]	; (8009b84 <HAL_RCC_ClockConfig+0x240>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f003 030f 	and.w	r3, r3, #15
 800997e:	683a      	ldr	r2, [r7, #0]
 8009980:	429a      	cmp	r2, r3
 8009982:	d001      	beq.n	8009988 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e184      	b.n	8009c92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f003 0304 	and.w	r3, r3, #4
 8009990:	2b00      	cmp	r3, #0
 8009992:	d010      	beq.n	80099b6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	691a      	ldr	r2, [r3, #16]
 8009998:	4b7b      	ldr	r3, [pc, #492]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d908      	bls.n	80099b6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80099a4:	4b78      	ldr	r3, [pc, #480]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	691b      	ldr	r3, [r3, #16]
 80099b0:	4975      	ldr	r1, [pc, #468]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 80099b2:	4313      	orrs	r3, r2
 80099b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f003 0308 	and.w	r3, r3, #8
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d010      	beq.n	80099e4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	695a      	ldr	r2, [r3, #20]
 80099c6:	4b70      	ldr	r3, [pc, #448]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 80099c8:	69db      	ldr	r3, [r3, #28]
 80099ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d908      	bls.n	80099e4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80099d2:	4b6d      	ldr	r3, [pc, #436]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 80099d4:	69db      	ldr	r3, [r3, #28]
 80099d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	496a      	ldr	r1, [pc, #424]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 80099e0:	4313      	orrs	r3, r2
 80099e2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f003 0310 	and.w	r3, r3, #16
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d010      	beq.n	8009a12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	699a      	ldr	r2, [r3, #24]
 80099f4:	4b64      	ldr	r3, [pc, #400]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 80099f6:	69db      	ldr	r3, [r3, #28]
 80099f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099fc:	429a      	cmp	r2, r3
 80099fe:	d908      	bls.n	8009a12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009a00:	4b61      	ldr	r3, [pc, #388]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009a02:	69db      	ldr	r3, [r3, #28]
 8009a04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	699b      	ldr	r3, [r3, #24]
 8009a0c:	495e      	ldr	r1, [pc, #376]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0320 	and.w	r3, r3, #32
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d010      	beq.n	8009a40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	69da      	ldr	r2, [r3, #28]
 8009a22:	4b59      	ldr	r3, [pc, #356]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009a24:	6a1b      	ldr	r3, [r3, #32]
 8009a26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d908      	bls.n	8009a40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009a2e:	4b56      	ldr	r3, [pc, #344]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	69db      	ldr	r3, [r3, #28]
 8009a3a:	4953      	ldr	r1, [pc, #332]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0302 	and.w	r3, r3, #2
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d010      	beq.n	8009a6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	68da      	ldr	r2, [r3, #12]
 8009a50:	4b4d      	ldr	r3, [pc, #308]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009a52:	699b      	ldr	r3, [r3, #24]
 8009a54:	f003 030f 	and.w	r3, r3, #15
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d908      	bls.n	8009a6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a5c:	4b4a      	ldr	r3, [pc, #296]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	f023 020f 	bic.w	r2, r3, #15
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	4947      	ldr	r1, [pc, #284]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d055      	beq.n	8009b26 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009a7a:	4b43      	ldr	r3, [pc, #268]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009a7c:	699b      	ldr	r3, [r3, #24]
 8009a7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	4940      	ldr	r1, [pc, #256]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d107      	bne.n	8009aa4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a94:	4b3c      	ldr	r3, [pc, #240]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d121      	bne.n	8009ae4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e0f6      	b.n	8009c92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	2b03      	cmp	r3, #3
 8009aaa:	d107      	bne.n	8009abc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009aac:	4b36      	ldr	r3, [pc, #216]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d115      	bne.n	8009ae4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e0ea      	b.n	8009c92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d107      	bne.n	8009ad4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ac4:	4b30      	ldr	r3, [pc, #192]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d109      	bne.n	8009ae4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e0de      	b.n	8009c92 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ad4:	4b2c      	ldr	r3, [pc, #176]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0304 	and.w	r3, r3, #4
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d101      	bne.n	8009ae4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e0d6      	b.n	8009c92 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009ae4:	4b28      	ldr	r3, [pc, #160]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	f023 0207 	bic.w	r2, r3, #7
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	4925      	ldr	r1, [pc, #148]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009af2:	4313      	orrs	r3, r2
 8009af4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009af6:	f7fb ff6f 	bl	80059d8 <HAL_GetTick>
 8009afa:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009afc:	e00a      	b.n	8009b14 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009afe:	f7fb ff6b 	bl	80059d8 <HAL_GetTick>
 8009b02:	4602      	mov	r2, r0
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d901      	bls.n	8009b14 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009b10:	2303      	movs	r3, #3
 8009b12:	e0be      	b.n	8009c92 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b14:	4b1c      	ldr	r3, [pc, #112]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	00db      	lsls	r3, r3, #3
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d1eb      	bne.n	8009afe <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d010      	beq.n	8009b54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	68da      	ldr	r2, [r3, #12]
 8009b36:	4b14      	ldr	r3, [pc, #80]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009b38:	699b      	ldr	r3, [r3, #24]
 8009b3a:	f003 030f 	and.w	r3, r3, #15
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d208      	bcs.n	8009b54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009b42:	4b11      	ldr	r3, [pc, #68]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	f023 020f 	bic.w	r2, r3, #15
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	490e      	ldr	r1, [pc, #56]	; (8009b88 <HAL_RCC_ClockConfig+0x244>)
 8009b50:	4313      	orrs	r3, r2
 8009b52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009b54:	4b0b      	ldr	r3, [pc, #44]	; (8009b84 <HAL_RCC_ClockConfig+0x240>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f003 030f 	and.w	r3, r3, #15
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	429a      	cmp	r2, r3
 8009b60:	d214      	bcs.n	8009b8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b62:	4b08      	ldr	r3, [pc, #32]	; (8009b84 <HAL_RCC_ClockConfig+0x240>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f023 020f 	bic.w	r2, r3, #15
 8009b6a:	4906      	ldr	r1, [pc, #24]	; (8009b84 <HAL_RCC_ClockConfig+0x240>)
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b72:	4b04      	ldr	r3, [pc, #16]	; (8009b84 <HAL_RCC_ClockConfig+0x240>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f003 030f 	and.w	r3, r3, #15
 8009b7a:	683a      	ldr	r2, [r7, #0]
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d005      	beq.n	8009b8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009b80:	2301      	movs	r3, #1
 8009b82:	e086      	b.n	8009c92 <HAL_RCC_ClockConfig+0x34e>
 8009b84:	52002000 	.word	0x52002000
 8009b88:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f003 0304 	and.w	r3, r3, #4
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d010      	beq.n	8009bba <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	691a      	ldr	r2, [r3, #16]
 8009b9c:	4b3f      	ldr	r3, [pc, #252]	; (8009c9c <HAL_RCC_ClockConfig+0x358>)
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ba4:	429a      	cmp	r2, r3
 8009ba6:	d208      	bcs.n	8009bba <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009ba8:	4b3c      	ldr	r3, [pc, #240]	; (8009c9c <HAL_RCC_ClockConfig+0x358>)
 8009baa:	699b      	ldr	r3, [r3, #24]
 8009bac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	4939      	ldr	r1, [pc, #228]	; (8009c9c <HAL_RCC_ClockConfig+0x358>)
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 0308 	and.w	r3, r3, #8
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d010      	beq.n	8009be8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	695a      	ldr	r2, [r3, #20]
 8009bca:	4b34      	ldr	r3, [pc, #208]	; (8009c9c <HAL_RCC_ClockConfig+0x358>)
 8009bcc:	69db      	ldr	r3, [r3, #28]
 8009bce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d208      	bcs.n	8009be8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009bd6:	4b31      	ldr	r3, [pc, #196]	; (8009c9c <HAL_RCC_ClockConfig+0x358>)
 8009bd8:	69db      	ldr	r3, [r3, #28]
 8009bda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	695b      	ldr	r3, [r3, #20]
 8009be2:	492e      	ldr	r1, [pc, #184]	; (8009c9c <HAL_RCC_ClockConfig+0x358>)
 8009be4:	4313      	orrs	r3, r2
 8009be6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 0310 	and.w	r3, r3, #16
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d010      	beq.n	8009c16 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	699a      	ldr	r2, [r3, #24]
 8009bf8:	4b28      	ldr	r3, [pc, #160]	; (8009c9c <HAL_RCC_ClockConfig+0x358>)
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d208      	bcs.n	8009c16 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009c04:	4b25      	ldr	r3, [pc, #148]	; (8009c9c <HAL_RCC_ClockConfig+0x358>)
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	699b      	ldr	r3, [r3, #24]
 8009c10:	4922      	ldr	r1, [pc, #136]	; (8009c9c <HAL_RCC_ClockConfig+0x358>)
 8009c12:	4313      	orrs	r3, r2
 8009c14:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d010      	beq.n	8009c44 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	69da      	ldr	r2, [r3, #28]
 8009c26:	4b1d      	ldr	r3, [pc, #116]	; (8009c9c <HAL_RCC_ClockConfig+0x358>)
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009c2e:	429a      	cmp	r2, r3
 8009c30:	d208      	bcs.n	8009c44 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009c32:	4b1a      	ldr	r3, [pc, #104]	; (8009c9c <HAL_RCC_ClockConfig+0x358>)
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	69db      	ldr	r3, [r3, #28]
 8009c3e:	4917      	ldr	r1, [pc, #92]	; (8009c9c <HAL_RCC_ClockConfig+0x358>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009c44:	f000 f834 	bl	8009cb0 <HAL_RCC_GetSysClockFreq>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	4b14      	ldr	r3, [pc, #80]	; (8009c9c <HAL_RCC_ClockConfig+0x358>)
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	0a1b      	lsrs	r3, r3, #8
 8009c50:	f003 030f 	and.w	r3, r3, #15
 8009c54:	4912      	ldr	r1, [pc, #72]	; (8009ca0 <HAL_RCC_ClockConfig+0x35c>)
 8009c56:	5ccb      	ldrb	r3, [r1, r3]
 8009c58:	f003 031f 	and.w	r3, r3, #31
 8009c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c62:	4b0e      	ldr	r3, [pc, #56]	; (8009c9c <HAL_RCC_ClockConfig+0x358>)
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	f003 030f 	and.w	r3, r3, #15
 8009c6a:	4a0d      	ldr	r2, [pc, #52]	; (8009ca0 <HAL_RCC_ClockConfig+0x35c>)
 8009c6c:	5cd3      	ldrb	r3, [r2, r3]
 8009c6e:	f003 031f 	and.w	r3, r3, #31
 8009c72:	693a      	ldr	r2, [r7, #16]
 8009c74:	fa22 f303 	lsr.w	r3, r2, r3
 8009c78:	4a0a      	ldr	r2, [pc, #40]	; (8009ca4 <HAL_RCC_ClockConfig+0x360>)
 8009c7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009c7c:	4a0a      	ldr	r2, [pc, #40]	; (8009ca8 <HAL_RCC_ClockConfig+0x364>)
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009c82:	4b0a      	ldr	r3, [pc, #40]	; (8009cac <HAL_RCC_ClockConfig+0x368>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fb fe5c 	bl	8005944 <HAL_InitTick>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3718      	adds	r7, #24
 8009c96:	46bd      	mov	sp, r7
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	58024400 	.word	0x58024400
 8009ca0:	080129a0 	.word	0x080129a0
 8009ca4:	24000044 	.word	0x24000044
 8009ca8:	24000040 	.word	0x24000040
 8009cac:	24000048 	.word	0x24000048

08009cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b089      	sub	sp, #36	; 0x24
 8009cb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009cb6:	4bb3      	ldr	r3, [pc, #716]	; (8009f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009cbe:	2b18      	cmp	r3, #24
 8009cc0:	f200 8155 	bhi.w	8009f6e <HAL_RCC_GetSysClockFreq+0x2be>
 8009cc4:	a201      	add	r2, pc, #4	; (adr r2, 8009ccc <HAL_RCC_GetSysClockFreq+0x1c>)
 8009cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cca:	bf00      	nop
 8009ccc:	08009d31 	.word	0x08009d31
 8009cd0:	08009f6f 	.word	0x08009f6f
 8009cd4:	08009f6f 	.word	0x08009f6f
 8009cd8:	08009f6f 	.word	0x08009f6f
 8009cdc:	08009f6f 	.word	0x08009f6f
 8009ce0:	08009f6f 	.word	0x08009f6f
 8009ce4:	08009f6f 	.word	0x08009f6f
 8009ce8:	08009f6f 	.word	0x08009f6f
 8009cec:	08009d57 	.word	0x08009d57
 8009cf0:	08009f6f 	.word	0x08009f6f
 8009cf4:	08009f6f 	.word	0x08009f6f
 8009cf8:	08009f6f 	.word	0x08009f6f
 8009cfc:	08009f6f 	.word	0x08009f6f
 8009d00:	08009f6f 	.word	0x08009f6f
 8009d04:	08009f6f 	.word	0x08009f6f
 8009d08:	08009f6f 	.word	0x08009f6f
 8009d0c:	08009d5d 	.word	0x08009d5d
 8009d10:	08009f6f 	.word	0x08009f6f
 8009d14:	08009f6f 	.word	0x08009f6f
 8009d18:	08009f6f 	.word	0x08009f6f
 8009d1c:	08009f6f 	.word	0x08009f6f
 8009d20:	08009f6f 	.word	0x08009f6f
 8009d24:	08009f6f 	.word	0x08009f6f
 8009d28:	08009f6f 	.word	0x08009f6f
 8009d2c:	08009d63 	.word	0x08009d63
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d30:	4b94      	ldr	r3, [pc, #592]	; (8009f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 0320 	and.w	r3, r3, #32
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d009      	beq.n	8009d50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009d3c:	4b91      	ldr	r3, [pc, #580]	; (8009f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	08db      	lsrs	r3, r3, #3
 8009d42:	f003 0303 	and.w	r3, r3, #3
 8009d46:	4a90      	ldr	r2, [pc, #576]	; (8009f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009d48:	fa22 f303 	lsr.w	r3, r2, r3
 8009d4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009d4e:	e111      	b.n	8009f74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009d50:	4b8d      	ldr	r3, [pc, #564]	; (8009f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009d52:	61bb      	str	r3, [r7, #24]
    break;
 8009d54:	e10e      	b.n	8009f74 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009d56:	4b8d      	ldr	r3, [pc, #564]	; (8009f8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009d58:	61bb      	str	r3, [r7, #24]
    break;
 8009d5a:	e10b      	b.n	8009f74 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009d5c:	4b8c      	ldr	r3, [pc, #560]	; (8009f90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009d5e:	61bb      	str	r3, [r7, #24]
    break;
 8009d60:	e108      	b.n	8009f74 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009d62:	4b88      	ldr	r3, [pc, #544]	; (8009f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d66:	f003 0303 	and.w	r3, r3, #3
 8009d6a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009d6c:	4b85      	ldr	r3, [pc, #532]	; (8009f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d70:	091b      	lsrs	r3, r3, #4
 8009d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d76:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009d78:	4b82      	ldr	r3, [pc, #520]	; (8009f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	f003 0301 	and.w	r3, r3, #1
 8009d80:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009d82:	4b80      	ldr	r3, [pc, #512]	; (8009f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d86:	08db      	lsrs	r3, r3, #3
 8009d88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	fb02 f303 	mul.w	r3, r2, r3
 8009d92:	ee07 3a90 	vmov	s15, r3
 8009d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f000 80e1 	beq.w	8009f68 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	f000 8083 	beq.w	8009eb4 <HAL_RCC_GetSysClockFreq+0x204>
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	f200 80a1 	bhi.w	8009ef8 <HAL_RCC_GetSysClockFreq+0x248>
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d003      	beq.n	8009dc4 <HAL_RCC_GetSysClockFreq+0x114>
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d056      	beq.n	8009e70 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009dc2:	e099      	b.n	8009ef8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dc4:	4b6f      	ldr	r3, [pc, #444]	; (8009f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f003 0320 	and.w	r3, r3, #32
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d02d      	beq.n	8009e2c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009dd0:	4b6c      	ldr	r3, [pc, #432]	; (8009f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	08db      	lsrs	r3, r3, #3
 8009dd6:	f003 0303 	and.w	r3, r3, #3
 8009dda:	4a6b      	ldr	r2, [pc, #428]	; (8009f88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8009de0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	ee07 3a90 	vmov	s15, r3
 8009de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	ee07 3a90 	vmov	s15, r3
 8009df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009dfa:	4b62      	ldr	r3, [pc, #392]	; (8009f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e02:	ee07 3a90 	vmov	s15, r3
 8009e06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e0e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009e2a:	e087      	b.n	8009f3c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	ee07 3a90 	vmov	s15, r3
 8009e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e36:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009f98 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009e3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e3e:	4b51      	ldr	r3, [pc, #324]	; (8009f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e46:	ee07 3a90 	vmov	s15, r3
 8009e4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e52:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009e5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009e62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009e66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009e6e:	e065      	b.n	8009f3c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	ee07 3a90 	vmov	s15, r3
 8009e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009f9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009e7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009e82:	4b40      	ldr	r3, [pc, #256]	; (8009f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e8a:	ee07 3a90 	vmov	s15, r3
 8009e8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009e92:	ed97 6a02 	vldr	s12, [r7, #8]
 8009e96:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009e9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009e9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ea2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009eae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009eb2:	e043      	b.n	8009f3c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	ee07 3a90 	vmov	s15, r3
 8009eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ebe:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009fa0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ec6:	4b2f      	ldr	r3, [pc, #188]	; (8009f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ece:	ee07 3a90 	vmov	s15, r3
 8009ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009eda:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ef6:	e021      	b.n	8009f3c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	ee07 3a90 	vmov	s15, r3
 8009efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f02:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009f9c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f0a:	4b1e      	ldr	r3, [pc, #120]	; (8009f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f12:	ee07 3a90 	vmov	s15, r3
 8009f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009f1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009f94 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009f3a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009f3c:	4b11      	ldr	r3, [pc, #68]	; (8009f84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f40:	0a5b      	lsrs	r3, r3, #9
 8009f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f46:	3301      	adds	r3, #1
 8009f48:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	ee07 3a90 	vmov	s15, r3
 8009f50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8009f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009f60:	ee17 3a90 	vmov	r3, s15
 8009f64:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009f66:	e005      	b.n	8009f74 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	61bb      	str	r3, [r7, #24]
    break;
 8009f6c:	e002      	b.n	8009f74 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009f6e:	4b07      	ldr	r3, [pc, #28]	; (8009f8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009f70:	61bb      	str	r3, [r7, #24]
    break;
 8009f72:	bf00      	nop
  }

  return sysclockfreq;
 8009f74:	69bb      	ldr	r3, [r7, #24]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3724      	adds	r7, #36	; 0x24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr
 8009f82:	bf00      	nop
 8009f84:	58024400 	.word	0x58024400
 8009f88:	03d09000 	.word	0x03d09000
 8009f8c:	003d0900 	.word	0x003d0900
 8009f90:	02dc6c00 	.word	0x02dc6c00
 8009f94:	46000000 	.word	0x46000000
 8009f98:	4c742400 	.word	0x4c742400
 8009f9c:	4a742400 	.word	0x4a742400
 8009fa0:	4c371b00 	.word	0x4c371b00

08009fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009faa:	f7ff fe81 	bl	8009cb0 <HAL_RCC_GetSysClockFreq>
 8009fae:	4602      	mov	r2, r0
 8009fb0:	4b10      	ldr	r3, [pc, #64]	; (8009ff4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009fb2:	699b      	ldr	r3, [r3, #24]
 8009fb4:	0a1b      	lsrs	r3, r3, #8
 8009fb6:	f003 030f 	and.w	r3, r3, #15
 8009fba:	490f      	ldr	r1, [pc, #60]	; (8009ff8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009fbc:	5ccb      	ldrb	r3, [r1, r3]
 8009fbe:	f003 031f 	and.w	r3, r3, #31
 8009fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8009fc6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009fc8:	4b0a      	ldr	r3, [pc, #40]	; (8009ff4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009fca:	699b      	ldr	r3, [r3, #24]
 8009fcc:	f003 030f 	and.w	r3, r3, #15
 8009fd0:	4a09      	ldr	r2, [pc, #36]	; (8009ff8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009fd2:	5cd3      	ldrb	r3, [r2, r3]
 8009fd4:	f003 031f 	and.w	r3, r3, #31
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	fa22 f303 	lsr.w	r3, r2, r3
 8009fde:	4a07      	ldr	r2, [pc, #28]	; (8009ffc <HAL_RCC_GetHCLKFreq+0x58>)
 8009fe0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009fe2:	4a07      	ldr	r2, [pc, #28]	; (800a000 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009fe8:	4b04      	ldr	r3, [pc, #16]	; (8009ffc <HAL_RCC_GetHCLKFreq+0x58>)
 8009fea:	681b      	ldr	r3, [r3, #0]
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	3708      	adds	r7, #8
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	bd80      	pop	{r7, pc}
 8009ff4:	58024400 	.word	0x58024400
 8009ff8:	080129a0 	.word	0x080129a0
 8009ffc:	24000044 	.word	0x24000044
 800a000:	24000040 	.word	0x24000040

0800a004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a008:	f7ff ffcc 	bl	8009fa4 <HAL_RCC_GetHCLKFreq>
 800a00c:	4602      	mov	r2, r0
 800a00e:	4b06      	ldr	r3, [pc, #24]	; (800a028 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a010:	69db      	ldr	r3, [r3, #28]
 800a012:	091b      	lsrs	r3, r3, #4
 800a014:	f003 0307 	and.w	r3, r3, #7
 800a018:	4904      	ldr	r1, [pc, #16]	; (800a02c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a01a:	5ccb      	ldrb	r3, [r1, r3]
 800a01c:	f003 031f 	and.w	r3, r3, #31
 800a020:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a024:	4618      	mov	r0, r3
 800a026:	bd80      	pop	{r7, pc}
 800a028:	58024400 	.word	0x58024400
 800a02c:	080129a0 	.word	0x080129a0

0800a030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a034:	f7ff ffb6 	bl	8009fa4 <HAL_RCC_GetHCLKFreq>
 800a038:	4602      	mov	r2, r0
 800a03a:	4b06      	ldr	r3, [pc, #24]	; (800a054 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	0a1b      	lsrs	r3, r3, #8
 800a040:	f003 0307 	and.w	r3, r3, #7
 800a044:	4904      	ldr	r1, [pc, #16]	; (800a058 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a046:	5ccb      	ldrb	r3, [r1, r3]
 800a048:	f003 031f 	and.w	r3, r3, #31
 800a04c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a050:	4618      	mov	r0, r3
 800a052:	bd80      	pop	{r7, pc}
 800a054:	58024400 	.word	0x58024400
 800a058:	080129a0 	.word	0x080129a0

0800a05c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b086      	sub	sp, #24
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a064:	2300      	movs	r3, #0
 800a066:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a068:	2300      	movs	r3, #0
 800a06a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d03f      	beq.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a07c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a080:	d02a      	beq.n	800a0d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a082:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a086:	d824      	bhi.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a088:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a08c:	d018      	beq.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a08e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a092:	d81e      	bhi.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a094:	2b00      	cmp	r3, #0
 800a096:	d003      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a098:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a09c:	d007      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a09e:	e018      	b.n	800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0a0:	4bab      	ldr	r3, [pc, #684]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a4:	4aaa      	ldr	r2, [pc, #680]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a0ac:	e015      	b.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	3304      	adds	r3, #4
 800a0b2:	2102      	movs	r1, #2
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f001 f9cf 	bl	800b458 <RCCEx_PLL2_Config>
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a0be:	e00c      	b.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	3324      	adds	r3, #36	; 0x24
 800a0c4:	2102      	movs	r1, #2
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f001 fa78 	bl	800b5bc <RCCEx_PLL3_Config>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a0d0:	e003      	b.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a0d6:	e000      	b.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a0d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a0da:	7dfb      	ldrb	r3, [r7, #23]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d109      	bne.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a0e0:	4b9b      	ldr	r3, [pc, #620]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0ec:	4998      	ldr	r1, [pc, #608]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	650b      	str	r3, [r1, #80]	; 0x50
 800a0f2:	e001      	b.n	800a0f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f4:	7dfb      	ldrb	r3, [r7, #23]
 800a0f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a100:	2b00      	cmp	r3, #0
 800a102:	d03d      	beq.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a108:	2b04      	cmp	r3, #4
 800a10a:	d826      	bhi.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a10c:	a201      	add	r2, pc, #4	; (adr r2, 800a114 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a10e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a112:	bf00      	nop
 800a114:	0800a129 	.word	0x0800a129
 800a118:	0800a137 	.word	0x0800a137
 800a11c:	0800a149 	.word	0x0800a149
 800a120:	0800a161 	.word	0x0800a161
 800a124:	0800a161 	.word	0x0800a161
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a128:	4b89      	ldr	r3, [pc, #548]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12c:	4a88      	ldr	r2, [pc, #544]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a12e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a132:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a134:	e015      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	3304      	adds	r3, #4
 800a13a:	2100      	movs	r1, #0
 800a13c:	4618      	mov	r0, r3
 800a13e:	f001 f98b 	bl	800b458 <RCCEx_PLL2_Config>
 800a142:	4603      	mov	r3, r0
 800a144:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a146:	e00c      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	3324      	adds	r3, #36	; 0x24
 800a14c:	2100      	movs	r1, #0
 800a14e:	4618      	mov	r0, r3
 800a150:	f001 fa34 	bl	800b5bc <RCCEx_PLL3_Config>
 800a154:	4603      	mov	r3, r0
 800a156:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a158:	e003      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	75fb      	strb	r3, [r7, #23]
      break;
 800a15e:	e000      	b.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a160:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a162:	7dfb      	ldrb	r3, [r7, #23]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d109      	bne.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a168:	4b79      	ldr	r3, [pc, #484]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a16a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a16c:	f023 0207 	bic.w	r2, r3, #7
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a174:	4976      	ldr	r1, [pc, #472]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a176:	4313      	orrs	r3, r2
 800a178:	650b      	str	r3, [r1, #80]	; 0x50
 800a17a:	e001      	b.n	800a180 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a17c:	7dfb      	ldrb	r3, [r7, #23]
 800a17e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d042      	beq.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a194:	d02b      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a19a:	d825      	bhi.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a19c:	2bc0      	cmp	r3, #192	; 0xc0
 800a19e:	d028      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a1a0:	2bc0      	cmp	r3, #192	; 0xc0
 800a1a2:	d821      	bhi.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a1a4:	2b80      	cmp	r3, #128	; 0x80
 800a1a6:	d016      	beq.n	800a1d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a1a8:	2b80      	cmp	r3, #128	; 0x80
 800a1aa:	d81d      	bhi.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d002      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a1b0:	2b40      	cmp	r3, #64	; 0x40
 800a1b2:	d007      	beq.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a1b4:	e018      	b.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1b6:	4b66      	ldr	r3, [pc, #408]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ba:	4a65      	ldr	r2, [pc, #404]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a1c2:	e017      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	2100      	movs	r1, #0
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f001 f944 	bl	800b458 <RCCEx_PLL2_Config>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a1d4:	e00e      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	3324      	adds	r3, #36	; 0x24
 800a1da:	2100      	movs	r1, #0
 800a1dc:	4618      	mov	r0, r3
 800a1de:	f001 f9ed 	bl	800b5bc <RCCEx_PLL3_Config>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a1e6:	e005      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	75fb      	strb	r3, [r7, #23]
      break;
 800a1ec:	e002      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a1ee:	bf00      	nop
 800a1f0:	e000      	b.n	800a1f4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a1f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1f4:	7dfb      	ldrb	r3, [r7, #23]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d109      	bne.n	800a20e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a1fa:	4b55      	ldr	r3, [pc, #340]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a1fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1fe:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a206:	4952      	ldr	r1, [pc, #328]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a208:	4313      	orrs	r3, r2
 800a20a:	650b      	str	r3, [r1, #80]	; 0x50
 800a20c:	e001      	b.n	800a212 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a20e:	7dfb      	ldrb	r3, [r7, #23]
 800a210:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d049      	beq.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a224:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a228:	d030      	beq.n	800a28c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a22a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a22e:	d82a      	bhi.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a230:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a234:	d02c      	beq.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a236:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a23a:	d824      	bhi.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a23c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a240:	d018      	beq.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a246:	d81e      	bhi.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d003      	beq.n	800a254 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a24c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a250:	d007      	beq.n	800a262 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a252:	e018      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a254:	4b3e      	ldr	r3, [pc, #248]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	4a3d      	ldr	r2, [pc, #244]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a25a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a25e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a260:	e017      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	3304      	adds	r3, #4
 800a266:	2100      	movs	r1, #0
 800a268:	4618      	mov	r0, r3
 800a26a:	f001 f8f5 	bl	800b458 <RCCEx_PLL2_Config>
 800a26e:	4603      	mov	r3, r0
 800a270:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a272:	e00e      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	3324      	adds	r3, #36	; 0x24
 800a278:	2100      	movs	r1, #0
 800a27a:	4618      	mov	r0, r3
 800a27c:	f001 f99e 	bl	800b5bc <RCCEx_PLL3_Config>
 800a280:	4603      	mov	r3, r0
 800a282:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a284:	e005      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a286:	2301      	movs	r3, #1
 800a288:	75fb      	strb	r3, [r7, #23]
      break;
 800a28a:	e002      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a28c:	bf00      	nop
 800a28e:	e000      	b.n	800a292 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a290:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a292:	7dfb      	ldrb	r3, [r7, #23]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d10a      	bne.n	800a2ae <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a298:	4b2d      	ldr	r3, [pc, #180]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a29a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a29c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a2a6:	492a      	ldr	r1, [pc, #168]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	658b      	str	r3, [r1, #88]	; 0x58
 800a2ac:	e001      	b.n	800a2b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ae:	7dfb      	ldrb	r3, [r7, #23]
 800a2b0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d04c      	beq.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a2c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2c8:	d030      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a2ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a2ce:	d82a      	bhi.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a2d0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2d4:	d02c      	beq.n	800a330 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800a2d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2da:	d824      	bhi.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a2dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2e0:	d018      	beq.n	800a314 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a2e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2e6:	d81e      	bhi.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d003      	beq.n	800a2f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a2ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2f0:	d007      	beq.n	800a302 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a2f2:	e018      	b.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2f4:	4b16      	ldr	r3, [pc, #88]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2f8:	4a15      	ldr	r2, [pc, #84]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a2fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a300:	e017      	b.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	3304      	adds	r3, #4
 800a306:	2100      	movs	r1, #0
 800a308:	4618      	mov	r0, r3
 800a30a:	f001 f8a5 	bl	800b458 <RCCEx_PLL2_Config>
 800a30e:	4603      	mov	r3, r0
 800a310:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a312:	e00e      	b.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	3324      	adds	r3, #36	; 0x24
 800a318:	2100      	movs	r1, #0
 800a31a:	4618      	mov	r0, r3
 800a31c:	f001 f94e 	bl	800b5bc <RCCEx_PLL3_Config>
 800a320:	4603      	mov	r3, r0
 800a322:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a324:	e005      	b.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	75fb      	strb	r3, [r7, #23]
      break;
 800a32a:	e002      	b.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a32c:	bf00      	nop
 800a32e:	e000      	b.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a330:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a332:	7dfb      	ldrb	r3, [r7, #23]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d10d      	bne.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a338:	4b05      	ldr	r3, [pc, #20]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a33a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a33c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a346:	4902      	ldr	r1, [pc, #8]	; (800a350 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a348:	4313      	orrs	r3, r2
 800a34a:	658b      	str	r3, [r1, #88]	; 0x58
 800a34c:	e004      	b.n	800a358 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a34e:	bf00      	nop
 800a350:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a354:	7dfb      	ldrb	r3, [r7, #23]
 800a356:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a360:	2b00      	cmp	r3, #0
 800a362:	d032      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a368:	2b30      	cmp	r3, #48	; 0x30
 800a36a:	d01c      	beq.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a36c:	2b30      	cmp	r3, #48	; 0x30
 800a36e:	d817      	bhi.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a370:	2b20      	cmp	r3, #32
 800a372:	d00c      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a374:	2b20      	cmp	r3, #32
 800a376:	d813      	bhi.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d016      	beq.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a37c:	2b10      	cmp	r3, #16
 800a37e:	d10f      	bne.n	800a3a0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a380:	4baf      	ldr	r3, [pc, #700]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a384:	4aae      	ldr	r2, [pc, #696]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a386:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a38a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a38c:	e00e      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	3304      	adds	r3, #4
 800a392:	2102      	movs	r1, #2
 800a394:	4618      	mov	r0, r3
 800a396:	f001 f85f 	bl	800b458 <RCCEx_PLL2_Config>
 800a39a:	4603      	mov	r3, r0
 800a39c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a39e:	e005      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a3a4:	e002      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a3a6:	bf00      	nop
 800a3a8:	e000      	b.n	800a3ac <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a3aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3ac:	7dfb      	ldrb	r3, [r7, #23]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d109      	bne.n	800a3c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a3b2:	4ba3      	ldr	r3, [pc, #652]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a3b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3be:	49a0      	ldr	r1, [pc, #640]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a3c4:	e001      	b.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c6:	7dfb      	ldrb	r3, [r7, #23]
 800a3c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d047      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3de:	d030      	beq.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a3e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3e4:	d82a      	bhi.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a3e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3ea:	d02c      	beq.n	800a446 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a3ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3f0:	d824      	bhi.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a3f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3f6:	d018      	beq.n	800a42a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a3f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3fc:	d81e      	bhi.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a406:	d007      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a408:	e018      	b.n	800a43c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a40a:	4b8d      	ldr	r3, [pc, #564]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40e:	4a8c      	ldr	r2, [pc, #560]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a414:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a416:	e017      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3304      	adds	r3, #4
 800a41c:	2100      	movs	r1, #0
 800a41e:	4618      	mov	r0, r3
 800a420:	f001 f81a 	bl	800b458 <RCCEx_PLL2_Config>
 800a424:	4603      	mov	r3, r0
 800a426:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a428:	e00e      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	3324      	adds	r3, #36	; 0x24
 800a42e:	2100      	movs	r1, #0
 800a430:	4618      	mov	r0, r3
 800a432:	f001 f8c3 	bl	800b5bc <RCCEx_PLL3_Config>
 800a436:	4603      	mov	r3, r0
 800a438:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a43a:	e005      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	75fb      	strb	r3, [r7, #23]
      break;
 800a440:	e002      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a442:	bf00      	nop
 800a444:	e000      	b.n	800a448 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a446:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a448:	7dfb      	ldrb	r3, [r7, #23]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d109      	bne.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a44e:	4b7c      	ldr	r3, [pc, #496]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a452:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a45a:	4979      	ldr	r1, [pc, #484]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a45c:	4313      	orrs	r3, r2
 800a45e:	650b      	str	r3, [r1, #80]	; 0x50
 800a460:	e001      	b.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a462:	7dfb      	ldrb	r3, [r7, #23]
 800a464:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d049      	beq.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a476:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a47a:	d02e      	beq.n	800a4da <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a47c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a480:	d828      	bhi.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a482:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a486:	d02a      	beq.n	800a4de <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a488:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a48c:	d822      	bhi.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a48e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a492:	d026      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a494:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a498:	d81c      	bhi.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a49a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a49e:	d010      	beq.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a4a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4a4:	d816      	bhi.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d01d      	beq.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a4aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4ae:	d111      	bne.n	800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	3304      	adds	r3, #4
 800a4b4:	2101      	movs	r1, #1
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f000 ffce 	bl	800b458 <RCCEx_PLL2_Config>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a4c0:	e012      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	3324      	adds	r3, #36	; 0x24
 800a4c6:	2101      	movs	r1, #1
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	f001 f877 	bl	800b5bc <RCCEx_PLL3_Config>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a4d2:	e009      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	75fb      	strb	r3, [r7, #23]
      break;
 800a4d8:	e006      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a4da:	bf00      	nop
 800a4dc:	e004      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a4de:	bf00      	nop
 800a4e0:	e002      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a4e2:	bf00      	nop
 800a4e4:	e000      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a4e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a4e8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d109      	bne.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a4ee:	4b54      	ldr	r3, [pc, #336]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a4f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4f2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4fa:	4951      	ldr	r1, [pc, #324]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	650b      	str	r3, [r1, #80]	; 0x50
 800a500:	e001      	b.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a502:	7dfb      	ldrb	r3, [r7, #23]
 800a504:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d04b      	beq.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a518:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a51c:	d02e      	beq.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a51e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a522:	d828      	bhi.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a528:	d02a      	beq.n	800a580 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a52a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a52e:	d822      	bhi.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a530:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a534:	d026      	beq.n	800a584 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a536:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a53a:	d81c      	bhi.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a53c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a540:	d010      	beq.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a542:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a546:	d816      	bhi.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01d      	beq.n	800a588 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a54c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a550:	d111      	bne.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	3304      	adds	r3, #4
 800a556:	2101      	movs	r1, #1
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 ff7d 	bl	800b458 <RCCEx_PLL2_Config>
 800a55e:	4603      	mov	r3, r0
 800a560:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a562:	e012      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	3324      	adds	r3, #36	; 0x24
 800a568:	2101      	movs	r1, #1
 800a56a:	4618      	mov	r0, r3
 800a56c:	f001 f826 	bl	800b5bc <RCCEx_PLL3_Config>
 800a570:	4603      	mov	r3, r0
 800a572:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a574:	e009      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	75fb      	strb	r3, [r7, #23]
      break;
 800a57a:	e006      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a57c:	bf00      	nop
 800a57e:	e004      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a580:	bf00      	nop
 800a582:	e002      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a584:	bf00      	nop
 800a586:	e000      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a588:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a58a:	7dfb      	ldrb	r3, [r7, #23]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10a      	bne.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a590:	4b2b      	ldr	r3, [pc, #172]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a594:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a59e:	4928      	ldr	r1, [pc, #160]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	658b      	str	r3, [r1, #88]	; 0x58
 800a5a4:	e001      	b.n	800a5aa <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a5a6:	7dfb      	ldrb	r3, [r7, #23]
 800a5a8:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d02f      	beq.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5be:	d00e      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a5c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5c4:	d814      	bhi.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d015      	beq.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a5ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5ce:	d10f      	bne.n	800a5f0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5d0:	4b1b      	ldr	r3, [pc, #108]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d4:	4a1a      	ldr	r2, [pc, #104]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a5d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a5dc:	e00c      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	3304      	adds	r3, #4
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f000 ff37 	bl	800b458 <RCCEx_PLL2_Config>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a5ee:	e003      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	75fb      	strb	r3, [r7, #23]
      break;
 800a5f4:	e000      	b.n	800a5f8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a5f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5f8:	7dfb      	ldrb	r3, [r7, #23]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d109      	bne.n	800a612 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a5fe:	4b10      	ldr	r3, [pc, #64]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a602:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a60a:	490d      	ldr	r1, [pc, #52]	; (800a640 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a60c:	4313      	orrs	r3, r2
 800a60e:	650b      	str	r3, [r1, #80]	; 0x50
 800a610:	e001      	b.n	800a616 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a612:	7dfb      	ldrb	r3, [r7, #23]
 800a614:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d033      	beq.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a626:	2b03      	cmp	r3, #3
 800a628:	d81c      	bhi.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a62a:	a201      	add	r2, pc, #4	; (adr r2, 800a630 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a630:	0800a66b 	.word	0x0800a66b
 800a634:	0800a645 	.word	0x0800a645
 800a638:	0800a653 	.word	0x0800a653
 800a63c:	0800a66b 	.word	0x0800a66b
 800a640:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a644:	4bb8      	ldr	r3, [pc, #736]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a648:	4ab7      	ldr	r2, [pc, #732]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a64a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a64e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a650:	e00c      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	3304      	adds	r3, #4
 800a656:	2102      	movs	r1, #2
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 fefd 	bl	800b458 <RCCEx_PLL2_Config>
 800a65e:	4603      	mov	r3, r0
 800a660:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a662:	e003      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a664:	2301      	movs	r3, #1
 800a666:	75fb      	strb	r3, [r7, #23]
      break;
 800a668:	e000      	b.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a66a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a66c:	7dfb      	ldrb	r3, [r7, #23]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d109      	bne.n	800a686 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a672:	4bad      	ldr	r3, [pc, #692]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a676:	f023 0203 	bic.w	r2, r3, #3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a67e:	49aa      	ldr	r1, [pc, #680]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a680:	4313      	orrs	r3, r2
 800a682:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a684:	e001      	b.n	800a68a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a686:	7dfb      	ldrb	r3, [r7, #23]
 800a688:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a692:	2b00      	cmp	r3, #0
 800a694:	f000 8086 	beq.w	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a698:	4ba4      	ldr	r3, [pc, #656]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4aa3      	ldr	r2, [pc, #652]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a69e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a6a4:	f7fb f998 	bl	80059d8 <HAL_GetTick>
 800a6a8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a6aa:	e009      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6ac:	f7fb f994 	bl	80059d8 <HAL_GetTick>
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	1ad3      	subs	r3, r2, r3
 800a6b6:	2b64      	cmp	r3, #100	; 0x64
 800a6b8:	d902      	bls.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	75fb      	strb	r3, [r7, #23]
        break;
 800a6be:	e005      	b.n	800a6cc <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a6c0:	4b9a      	ldr	r3, [pc, #616]	; (800a92c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d0ef      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a6cc:	7dfb      	ldrb	r3, [r7, #23]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d166      	bne.n	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a6d2:	4b95      	ldr	r3, [pc, #596]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a6d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a6dc:	4053      	eors	r3, r2
 800a6de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d013      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a6e6:	4b90      	ldr	r3, [pc, #576]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a6e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6ee:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a6f0:	4b8d      	ldr	r3, [pc, #564]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6f4:	4a8c      	ldr	r2, [pc, #560]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a6f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6fa:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a6fc:	4b8a      	ldr	r3, [pc, #552]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a6fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a700:	4a89      	ldr	r2, [pc, #548]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a702:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a706:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a708:	4a87      	ldr	r2, [pc, #540]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a718:	d115      	bne.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a71a:	f7fb f95d 	bl	80059d8 <HAL_GetTick>
 800a71e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a720:	e00b      	b.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a722:	f7fb f959 	bl	80059d8 <HAL_GetTick>
 800a726:	4602      	mov	r2, r0
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	1ad3      	subs	r3, r2, r3
 800a72c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a730:	4293      	cmp	r3, r2
 800a732:	d902      	bls.n	800a73a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a734:	2303      	movs	r3, #3
 800a736:	75fb      	strb	r3, [r7, #23]
            break;
 800a738:	e005      	b.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a73a:	4b7b      	ldr	r3, [pc, #492]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a73e:	f003 0302 	and.w	r3, r3, #2
 800a742:	2b00      	cmp	r3, #0
 800a744:	d0ed      	beq.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a746:	7dfb      	ldrb	r3, [r7, #23]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d126      	bne.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a75a:	d10d      	bne.n	800a778 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a75c:	4b72      	ldr	r3, [pc, #456]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a75e:	691b      	ldr	r3, [r3, #16]
 800a760:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a76a:	0919      	lsrs	r1, r3, #4
 800a76c:	4b70      	ldr	r3, [pc, #448]	; (800a930 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a76e:	400b      	ands	r3, r1
 800a770:	496d      	ldr	r1, [pc, #436]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a772:	4313      	orrs	r3, r2
 800a774:	610b      	str	r3, [r1, #16]
 800a776:	e005      	b.n	800a784 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a778:	4b6b      	ldr	r3, [pc, #428]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	4a6a      	ldr	r2, [pc, #424]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a77e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a782:	6113      	str	r3, [r2, #16]
 800a784:	4b68      	ldr	r3, [pc, #416]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a786:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a78e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a792:	4965      	ldr	r1, [pc, #404]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a794:	4313      	orrs	r3, r2
 800a796:	670b      	str	r3, [r1, #112]	; 0x70
 800a798:	e004      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a79a:	7dfb      	ldrb	r3, [r7, #23]
 800a79c:	75bb      	strb	r3, [r7, #22]
 800a79e:	e001      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7a0:	7dfb      	ldrb	r3, [r7, #23]
 800a7a2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d07e      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7b4:	2b28      	cmp	r3, #40	; 0x28
 800a7b6:	d867      	bhi.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a7b8:	a201      	add	r2, pc, #4	; (adr r2, 800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7be:	bf00      	nop
 800a7c0:	0800a88f 	.word	0x0800a88f
 800a7c4:	0800a889 	.word	0x0800a889
 800a7c8:	0800a889 	.word	0x0800a889
 800a7cc:	0800a889 	.word	0x0800a889
 800a7d0:	0800a889 	.word	0x0800a889
 800a7d4:	0800a889 	.word	0x0800a889
 800a7d8:	0800a889 	.word	0x0800a889
 800a7dc:	0800a889 	.word	0x0800a889
 800a7e0:	0800a865 	.word	0x0800a865
 800a7e4:	0800a889 	.word	0x0800a889
 800a7e8:	0800a889 	.word	0x0800a889
 800a7ec:	0800a889 	.word	0x0800a889
 800a7f0:	0800a889 	.word	0x0800a889
 800a7f4:	0800a889 	.word	0x0800a889
 800a7f8:	0800a889 	.word	0x0800a889
 800a7fc:	0800a889 	.word	0x0800a889
 800a800:	0800a877 	.word	0x0800a877
 800a804:	0800a889 	.word	0x0800a889
 800a808:	0800a889 	.word	0x0800a889
 800a80c:	0800a889 	.word	0x0800a889
 800a810:	0800a889 	.word	0x0800a889
 800a814:	0800a889 	.word	0x0800a889
 800a818:	0800a889 	.word	0x0800a889
 800a81c:	0800a889 	.word	0x0800a889
 800a820:	0800a88f 	.word	0x0800a88f
 800a824:	0800a889 	.word	0x0800a889
 800a828:	0800a889 	.word	0x0800a889
 800a82c:	0800a889 	.word	0x0800a889
 800a830:	0800a889 	.word	0x0800a889
 800a834:	0800a889 	.word	0x0800a889
 800a838:	0800a889 	.word	0x0800a889
 800a83c:	0800a889 	.word	0x0800a889
 800a840:	0800a88f 	.word	0x0800a88f
 800a844:	0800a889 	.word	0x0800a889
 800a848:	0800a889 	.word	0x0800a889
 800a84c:	0800a889 	.word	0x0800a889
 800a850:	0800a889 	.word	0x0800a889
 800a854:	0800a889 	.word	0x0800a889
 800a858:	0800a889 	.word	0x0800a889
 800a85c:	0800a889 	.word	0x0800a889
 800a860:	0800a88f 	.word	0x0800a88f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3304      	adds	r3, #4
 800a868:	2101      	movs	r1, #1
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 fdf4 	bl	800b458 <RCCEx_PLL2_Config>
 800a870:	4603      	mov	r3, r0
 800a872:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a874:	e00c      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	3324      	adds	r3, #36	; 0x24
 800a87a:	2101      	movs	r1, #1
 800a87c:	4618      	mov	r0, r3
 800a87e:	f000 fe9d 	bl	800b5bc <RCCEx_PLL3_Config>
 800a882:	4603      	mov	r3, r0
 800a884:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a886:	e003      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	75fb      	strb	r3, [r7, #23]
      break;
 800a88c:	e000      	b.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800a88e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a890:	7dfb      	ldrb	r3, [r7, #23]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d109      	bne.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a896:	4b24      	ldr	r3, [pc, #144]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a89a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a8a2:	4921      	ldr	r1, [pc, #132]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	654b      	str	r3, [r1, #84]	; 0x54
 800a8a8:	e001      	b.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8aa:	7dfb      	ldrb	r3, [r7, #23]
 800a8ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0302 	and.w	r3, r3, #2
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d03e      	beq.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8be:	2b05      	cmp	r3, #5
 800a8c0:	d820      	bhi.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800a8c2:	a201      	add	r2, pc, #4	; (adr r2, 800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800a8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8c8:	0800a90b 	.word	0x0800a90b
 800a8cc:	0800a8e1 	.word	0x0800a8e1
 800a8d0:	0800a8f3 	.word	0x0800a8f3
 800a8d4:	0800a90b 	.word	0x0800a90b
 800a8d8:	0800a90b 	.word	0x0800a90b
 800a8dc:	0800a90b 	.word	0x0800a90b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	3304      	adds	r3, #4
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 fdb6 	bl	800b458 <RCCEx_PLL2_Config>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a8f0:	e00c      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	3324      	adds	r3, #36	; 0x24
 800a8f6:	2101      	movs	r1, #1
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f000 fe5f 	bl	800b5bc <RCCEx_PLL3_Config>
 800a8fe:	4603      	mov	r3, r0
 800a900:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a902:	e003      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	75fb      	strb	r3, [r7, #23]
      break;
 800a908:	e000      	b.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800a90a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a90c:	7dfb      	ldrb	r3, [r7, #23]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d110      	bne.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a912:	4b05      	ldr	r3, [pc, #20]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a916:	f023 0207 	bic.w	r2, r3, #7
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a91e:	4902      	ldr	r1, [pc, #8]	; (800a928 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a920:	4313      	orrs	r3, r2
 800a922:	654b      	str	r3, [r1, #84]	; 0x54
 800a924:	e008      	b.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a926:	bf00      	nop
 800a928:	58024400 	.word	0x58024400
 800a92c:	58024800 	.word	0x58024800
 800a930:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a934:	7dfb      	ldrb	r3, [r7, #23]
 800a936:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 0304 	and.w	r3, r3, #4
 800a940:	2b00      	cmp	r3, #0
 800a942:	d039      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a94a:	2b05      	cmp	r3, #5
 800a94c:	d820      	bhi.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a94e:	a201      	add	r2, pc, #4	; (adr r2, 800a954 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a954:	0800a997 	.word	0x0800a997
 800a958:	0800a96d 	.word	0x0800a96d
 800a95c:	0800a97f 	.word	0x0800a97f
 800a960:	0800a997 	.word	0x0800a997
 800a964:	0800a997 	.word	0x0800a997
 800a968:	0800a997 	.word	0x0800a997
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	3304      	adds	r3, #4
 800a970:	2101      	movs	r1, #1
 800a972:	4618      	mov	r0, r3
 800a974:	f000 fd70 	bl	800b458 <RCCEx_PLL2_Config>
 800a978:	4603      	mov	r3, r0
 800a97a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a97c:	e00c      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	3324      	adds	r3, #36	; 0x24
 800a982:	2101      	movs	r1, #1
 800a984:	4618      	mov	r0, r3
 800a986:	f000 fe19 	bl	800b5bc <RCCEx_PLL3_Config>
 800a98a:	4603      	mov	r3, r0
 800a98c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a98e:	e003      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	75fb      	strb	r3, [r7, #23]
      break;
 800a994:	e000      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800a996:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a998:	7dfb      	ldrb	r3, [r7, #23]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d10a      	bne.n	800a9b4 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a99e:	4bb7      	ldr	r3, [pc, #732]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a9a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a2:	f023 0207 	bic.w	r2, r3, #7
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9ac:	49b3      	ldr	r1, [pc, #716]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	658b      	str	r3, [r1, #88]	; 0x58
 800a9b2:	e001      	b.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9b4:	7dfb      	ldrb	r3, [r7, #23]
 800a9b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 0320 	and.w	r3, r3, #32
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d04b      	beq.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9ce:	d02e      	beq.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a9d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a9d4:	d828      	bhi.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a9d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9da:	d02a      	beq.n	800aa32 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a9dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9e0:	d822      	bhi.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a9e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9e6:	d026      	beq.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a9e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a9ec:	d81c      	bhi.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a9ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9f2:	d010      	beq.n	800aa16 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a9f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9f8:	d816      	bhi.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d01d      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a9fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa02:	d111      	bne.n	800aa28 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	3304      	adds	r3, #4
 800aa08:	2100      	movs	r1, #0
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f000 fd24 	bl	800b458 <RCCEx_PLL2_Config>
 800aa10:	4603      	mov	r3, r0
 800aa12:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800aa14:	e012      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	3324      	adds	r3, #36	; 0x24
 800aa1a:	2102      	movs	r1, #2
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	f000 fdcd 	bl	800b5bc <RCCEx_PLL3_Config>
 800aa22:	4603      	mov	r3, r0
 800aa24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800aa26:	e009      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	75fb      	strb	r3, [r7, #23]
      break;
 800aa2c:	e006      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800aa2e:	bf00      	nop
 800aa30:	e004      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800aa32:	bf00      	nop
 800aa34:	e002      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800aa36:	bf00      	nop
 800aa38:	e000      	b.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800aa3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa3c:	7dfb      	ldrb	r3, [r7, #23]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d10a      	bne.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa42:	4b8e      	ldr	r3, [pc, #568]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa46:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa50:	498a      	ldr	r1, [pc, #552]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aa52:	4313      	orrs	r3, r2
 800aa54:	654b      	str	r3, [r1, #84]	; 0x54
 800aa56:	e001      	b.n	800aa5c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa58:	7dfb      	ldrb	r3, [r7, #23]
 800aa5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d04b      	beq.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aa6e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aa72:	d02e      	beq.n	800aad2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800aa74:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aa78:	d828      	bhi.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800aa7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa7e:	d02a      	beq.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800aa80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa84:	d822      	bhi.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800aa86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa8a:	d026      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800aa8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa90:	d81c      	bhi.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800aa92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa96:	d010      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800aa98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa9c:	d816      	bhi.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d01d      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800aaa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaa6:	d111      	bne.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	3304      	adds	r3, #4
 800aaac:	2100      	movs	r1, #0
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 fcd2 	bl	800b458 <RCCEx_PLL2_Config>
 800aab4:	4603      	mov	r3, r0
 800aab6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800aab8:	e012      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	3324      	adds	r3, #36	; 0x24
 800aabe:	2102      	movs	r1, #2
 800aac0:	4618      	mov	r0, r3
 800aac2:	f000 fd7b 	bl	800b5bc <RCCEx_PLL3_Config>
 800aac6:	4603      	mov	r3, r0
 800aac8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800aaca:	e009      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	75fb      	strb	r3, [r7, #23]
      break;
 800aad0:	e006      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800aad2:	bf00      	nop
 800aad4:	e004      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800aad6:	bf00      	nop
 800aad8:	e002      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800aada:	bf00      	nop
 800aadc:	e000      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800aade:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aae0:	7dfb      	ldrb	r3, [r7, #23]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10a      	bne.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800aae6:	4b65      	ldr	r3, [pc, #404]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aaf4:	4961      	ldr	r1, [pc, #388]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	658b      	str	r3, [r1, #88]	; 0x58
 800aafa:	e001      	b.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aafc:	7dfb      	ldrb	r3, [r7, #23]
 800aafe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d04b      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab12:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ab16:	d02e      	beq.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800ab18:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ab1c:	d828      	bhi.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ab1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab22:	d02a      	beq.n	800ab7a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800ab24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab28:	d822      	bhi.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ab2a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ab2e:	d026      	beq.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800ab30:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ab34:	d81c      	bhi.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ab36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab3a:	d010      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800ab3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab40:	d816      	bhi.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d01d      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800ab46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab4a:	d111      	bne.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	3304      	adds	r3, #4
 800ab50:	2100      	movs	r1, #0
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 fc80 	bl	800b458 <RCCEx_PLL2_Config>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ab5c:	e012      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	3324      	adds	r3, #36	; 0x24
 800ab62:	2102      	movs	r1, #2
 800ab64:	4618      	mov	r0, r3
 800ab66:	f000 fd29 	bl	800b5bc <RCCEx_PLL3_Config>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800ab6e:	e009      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab70:	2301      	movs	r3, #1
 800ab72:	75fb      	strb	r3, [r7, #23]
      break;
 800ab74:	e006      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ab76:	bf00      	nop
 800ab78:	e004      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ab7a:	bf00      	nop
 800ab7c:	e002      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ab7e:	bf00      	nop
 800ab80:	e000      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800ab82:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab84:	7dfb      	ldrb	r3, [r7, #23]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d10a      	bne.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ab8a:	4b3c      	ldr	r3, [pc, #240]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ab8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ab98:	4938      	ldr	r1, [pc, #224]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	658b      	str	r3, [r1, #88]	; 0x58
 800ab9e:	e001      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba0:	7dfb      	ldrb	r3, [r7, #23]
 800aba2:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f003 0308 	and.w	r3, r3, #8
 800abac:	2b00      	cmp	r3, #0
 800abae:	d01a      	beq.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abba:	d10a      	bne.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	3324      	adds	r3, #36	; 0x24
 800abc0:	2102      	movs	r1, #2
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 fcfa 	bl	800b5bc <RCCEx_PLL3_Config>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d001      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800abd2:	4b2a      	ldr	r3, [pc, #168]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800abd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800abe0:	4926      	ldr	r1, [pc, #152]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800abe2:	4313      	orrs	r3, r2
 800abe4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 0310 	and.w	r3, r3, #16
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d01a      	beq.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800abf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abfc:	d10a      	bne.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	3324      	adds	r3, #36	; 0x24
 800ac02:	2102      	movs	r1, #2
 800ac04:	4618      	mov	r0, r3
 800ac06:	f000 fcd9 	bl	800b5bc <RCCEx_PLL3_Config>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d001      	beq.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac14:	4b19      	ldr	r3, [pc, #100]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ac22:	4916      	ldr	r1, [pc, #88]	; (800ac7c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800ac24:	4313      	orrs	r3, r2
 800ac26:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d036      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ac3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac3e:	d01f      	beq.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ac40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac44:	d817      	bhi.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d003      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800ac4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac4e:	d009      	beq.n	800ac64 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800ac50:	e011      	b.n	800ac76 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	3304      	adds	r3, #4
 800ac56:	2100      	movs	r1, #0
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f000 fbfd 	bl	800b458 <RCCEx_PLL2_Config>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ac62:	e00e      	b.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	3324      	adds	r3, #36	; 0x24
 800ac68:	2102      	movs	r1, #2
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f000 fca6 	bl	800b5bc <RCCEx_PLL3_Config>
 800ac70:	4603      	mov	r3, r0
 800ac72:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ac74:	e005      	b.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	75fb      	strb	r3, [r7, #23]
      break;
 800ac7a:	e002      	b.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800ac7c:	58024400 	.word	0x58024400
      break;
 800ac80:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac82:	7dfb      	ldrb	r3, [r7, #23]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ac88:	4b93      	ldr	r3, [pc, #588]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac8c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ac96:	4990      	ldr	r1, [pc, #576]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ac98:	4313      	orrs	r3, r2
 800ac9a:	658b      	str	r3, [r1, #88]	; 0x58
 800ac9c:	e001      	b.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac9e:	7dfb      	ldrb	r3, [r7, #23]
 800aca0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d033      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acb8:	d01c      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800acba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800acbe:	d816      	bhi.n	800acee <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800acc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acc4:	d003      	beq.n	800acce <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800acc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acca:	d007      	beq.n	800acdc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800accc:	e00f      	b.n	800acee <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acce:	4b82      	ldr	r3, [pc, #520]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800acd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd2:	4a81      	ldr	r2, [pc, #516]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800acd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800acda:	e00c      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	3324      	adds	r3, #36	; 0x24
 800ace0:	2101      	movs	r1, #1
 800ace2:	4618      	mov	r0, r3
 800ace4:	f000 fc6a 	bl	800b5bc <RCCEx_PLL3_Config>
 800ace8:	4603      	mov	r3, r0
 800acea:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800acec:	e003      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800acee:	2301      	movs	r3, #1
 800acf0:	75fb      	strb	r3, [r7, #23]
      break;
 800acf2:	e000      	b.n	800acf6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800acf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acf6:	7dfb      	ldrb	r3, [r7, #23]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10a      	bne.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800acfc:	4b76      	ldr	r3, [pc, #472]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800acfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad0a:	4973      	ldr	r1, [pc, #460]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	654b      	str	r3, [r1, #84]	; 0x54
 800ad10:	e001      	b.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad12:	7dfb      	ldrb	r3, [r7, #23]
 800ad14:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d029      	beq.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d003      	beq.n	800ad32 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800ad2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad2e:	d007      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800ad30:	e00f      	b.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad32:	4b69      	ldr	r3, [pc, #420]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad36:	4a68      	ldr	r2, [pc, #416]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ad3e:	e00b      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	3304      	adds	r3, #4
 800ad44:	2102      	movs	r1, #2
 800ad46:	4618      	mov	r0, r3
 800ad48:	f000 fb86 	bl	800b458 <RCCEx_PLL2_Config>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ad50:	e002      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800ad52:	2301      	movs	r3, #1
 800ad54:	75fb      	strb	r3, [r7, #23]
      break;
 800ad56:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad58:	7dfb      	ldrb	r3, [r7, #23]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d109      	bne.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ad5e:	4b5e      	ldr	r3, [pc, #376]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad6a:	495b      	ldr	r1, [pc, #364]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ad70:	e001      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
 800ad74:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d00a      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	3324      	adds	r3, #36	; 0x24
 800ad86:	2102      	movs	r1, #2
 800ad88:	4618      	mov	r0, r3
 800ad8a:	f000 fc17 	bl	800b5bc <RCCEx_PLL3_Config>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d001      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800ad94:	2301      	movs	r3, #1
 800ad96:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d030      	beq.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ada8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adac:	d017      	beq.n	800adde <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800adae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800adb2:	d811      	bhi.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800adb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adb8:	d013      	beq.n	800ade2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800adba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800adbe:	d80b      	bhi.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d010      	beq.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800adc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adc8:	d106      	bne.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adca:	4b43      	ldr	r3, [pc, #268]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800adcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adce:	4a42      	ldr	r2, [pc, #264]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800add0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800add4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800add6:	e007      	b.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	75fb      	strb	r3, [r7, #23]
      break;
 800addc:	e004      	b.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800adde:	bf00      	nop
 800ade0:	e002      	b.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ade2:	bf00      	nop
 800ade4:	e000      	b.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800ade6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ade8:	7dfb      	ldrb	r3, [r7, #23]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d109      	bne.n	800ae02 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800adee:	4b3a      	ldr	r3, [pc, #232]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800adf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800adfa:	4937      	ldr	r1, [pc, #220]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800adfc:	4313      	orrs	r3, r2
 800adfe:	654b      	str	r3, [r1, #84]	; 0x54
 800ae00:	e001      	b.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae02:	7dfb      	ldrb	r3, [r7, #23]
 800ae04:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d008      	beq.n	800ae24 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ae12:	4b31      	ldr	r3, [pc, #196]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae1e:	492e      	ldr	r1, [pc, #184]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae20:	4313      	orrs	r3, r2
 800ae22:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d009      	beq.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ae30:	4b29      	ldr	r3, [pc, #164]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ae3e:	4926      	ldr	r1, [pc, #152]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae40:	4313      	orrs	r3, r2
 800ae42:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d008      	beq.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ae50:	4b21      	ldr	r3, [pc, #132]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae5c:	491e      	ldr	r1, [pc, #120]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00d      	beq.n	800ae8a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae6e:	4b1a      	ldr	r3, [pc, #104]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae70:	691b      	ldr	r3, [r3, #16]
 800ae72:	4a19      	ldr	r2, [pc, #100]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae78:	6113      	str	r3, [r2, #16]
 800ae7a:	4b17      	ldr	r3, [pc, #92]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae7c:	691a      	ldr	r2, [r3, #16]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ae84:	4914      	ldr	r1, [pc, #80]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae86:	4313      	orrs	r3, r2
 800ae88:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	da08      	bge.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ae92:	4b11      	ldr	r3, [pc, #68]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ae94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae9e:	490e      	ldr	r1, [pc, #56]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aea0:	4313      	orrs	r3, r2
 800aea2:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d009      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aeb0:	4b09      	ldr	r3, [pc, #36]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aeb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aebe:	4906      	ldr	r1, [pc, #24]	; (800aed8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aec0:	4313      	orrs	r3, r2
 800aec2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800aec4:	7dbb      	ldrb	r3, [r7, #22]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d101      	bne.n	800aece <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800aeca:	2300      	movs	r3, #0
 800aecc:	e000      	b.n	800aed0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800aece:	2301      	movs	r3, #1
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3718      	adds	r7, #24
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	58024400 	.word	0x58024400

0800aedc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aee0:	f7ff f860 	bl	8009fa4 <HAL_RCC_GetHCLKFreq>
 800aee4:	4602      	mov	r2, r0
 800aee6:	4b06      	ldr	r3, [pc, #24]	; (800af00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	091b      	lsrs	r3, r3, #4
 800aeec:	f003 0307 	and.w	r3, r3, #7
 800aef0:	4904      	ldr	r1, [pc, #16]	; (800af04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aef2:	5ccb      	ldrb	r3, [r1, r3]
 800aef4:	f003 031f 	and.w	r3, r3, #31
 800aef8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	bd80      	pop	{r7, pc}
 800af00:	58024400 	.word	0x58024400
 800af04:	080129a0 	.word	0x080129a0

0800af08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800af08:	b480      	push	{r7}
 800af0a:	b089      	sub	sp, #36	; 0x24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af10:	4ba1      	ldr	r3, [pc, #644]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af14:	f003 0303 	and.w	r3, r3, #3
 800af18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800af1a:	4b9f      	ldr	r3, [pc, #636]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1e:	0b1b      	lsrs	r3, r3, #12
 800af20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af26:	4b9c      	ldr	r3, [pc, #624]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af2a:	091b      	lsrs	r3, r3, #4
 800af2c:	f003 0301 	and.w	r3, r3, #1
 800af30:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800af32:	4b99      	ldr	r3, [pc, #612]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af36:	08db      	lsrs	r3, r3, #3
 800af38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af3c:	693a      	ldr	r2, [r7, #16]
 800af3e:	fb02 f303 	mul.w	r3, r2, r3
 800af42:	ee07 3a90 	vmov	s15, r3
 800af46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 8111 	beq.w	800b178 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800af56:	69bb      	ldr	r3, [r7, #24]
 800af58:	2b02      	cmp	r3, #2
 800af5a:	f000 8083 	beq.w	800b064 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	2b02      	cmp	r3, #2
 800af62:	f200 80a1 	bhi.w	800b0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d003      	beq.n	800af74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d056      	beq.n	800b020 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800af72:	e099      	b.n	800b0a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af74:	4b88      	ldr	r3, [pc, #544]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f003 0320 	and.w	r3, r3, #32
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d02d      	beq.n	800afdc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af80:	4b85      	ldr	r3, [pc, #532]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	08db      	lsrs	r3, r3, #3
 800af86:	f003 0303 	and.w	r3, r3, #3
 800af8a:	4a84      	ldr	r2, [pc, #528]	; (800b19c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800af8c:	fa22 f303 	lsr.w	r3, r2, r3
 800af90:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	ee07 3a90 	vmov	s15, r3
 800af98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	ee07 3a90 	vmov	s15, r3
 800afa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afaa:	4b7b      	ldr	r3, [pc, #492]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afb2:	ee07 3a90 	vmov	s15, r3
 800afb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afba:	ed97 6a03 	vldr	s12, [r7, #12]
 800afbe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afd6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800afda:	e087      	b.n	800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	ee07 3a90 	vmov	s15, r3
 800afe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b1a4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800afea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afee:	4b6a      	ldr	r3, [pc, #424]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff6:	ee07 3a90 	vmov	s15, r3
 800affa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800affe:	ed97 6a03 	vldr	s12, [r7, #12]
 800b002:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b00a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b00e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b01a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b01e:	e065      	b.n	800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	ee07 3a90 	vmov	s15, r3
 800b026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b02a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b02e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b032:	4b59      	ldr	r3, [pc, #356]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b03a:	ee07 3a90 	vmov	s15, r3
 800b03e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b042:	ed97 6a03 	vldr	s12, [r7, #12]
 800b046:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b04a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b04e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b052:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b05a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b05e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b062:	e043      	b.n	800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	ee07 3a90 	vmov	s15, r3
 800b06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b06e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b1ac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b076:	4b48      	ldr	r3, [pc, #288]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b07a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b07e:	ee07 3a90 	vmov	s15, r3
 800b082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b086:	ed97 6a03 	vldr	s12, [r7, #12]
 800b08a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b08e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b09a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0a6:	e021      	b.n	800b0ec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	ee07 3a90 	vmov	s15, r3
 800b0ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b1a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b0b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ba:	4b37      	ldr	r3, [pc, #220]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0c2:	ee07 3a90 	vmov	s15, r3
 800b0c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b0ea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b0ec:	4b2a      	ldr	r3, [pc, #168]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f0:	0a5b      	lsrs	r3, r3, #9
 800b0f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0f6:	ee07 3a90 	vmov	s15, r3
 800b0fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b102:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b106:	edd7 6a07 	vldr	s13, [r7, #28]
 800b10a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b10e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b112:	ee17 2a90 	vmov	r2, s15
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b11a:	4b1f      	ldr	r3, [pc, #124]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b11c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b11e:	0c1b      	lsrs	r3, r3, #16
 800b120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b124:	ee07 3a90 	vmov	s15, r3
 800b128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b130:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b134:	edd7 6a07 	vldr	s13, [r7, #28]
 800b138:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b13c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b140:	ee17 2a90 	vmov	r2, s15
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b148:	4b13      	ldr	r3, [pc, #76]	; (800b198 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b14a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14c:	0e1b      	lsrs	r3, r3, #24
 800b14e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b152:	ee07 3a90 	vmov	s15, r3
 800b156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b15e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b162:	edd7 6a07 	vldr	s13, [r7, #28]
 800b166:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b16a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b16e:	ee17 2a90 	vmov	r2, s15
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b176:	e008      	b.n	800b18a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	609a      	str	r2, [r3, #8]
}
 800b18a:	bf00      	nop
 800b18c:	3724      	adds	r7, #36	; 0x24
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop
 800b198:	58024400 	.word	0x58024400
 800b19c:	03d09000 	.word	0x03d09000
 800b1a0:	46000000 	.word	0x46000000
 800b1a4:	4c742400 	.word	0x4c742400
 800b1a8:	4a742400 	.word	0x4a742400
 800b1ac:	4c371b00 	.word	0x4c371b00

0800b1b0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b089      	sub	sp, #36	; 0x24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1b8:	4ba1      	ldr	r3, [pc, #644]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1bc:	f003 0303 	and.w	r3, r3, #3
 800b1c0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b1c2:	4b9f      	ldr	r3, [pc, #636]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c6:	0d1b      	lsrs	r3, r3, #20
 800b1c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1cc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b1ce:	4b9c      	ldr	r3, [pc, #624]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d2:	0a1b      	lsrs	r3, r3, #8
 800b1d4:	f003 0301 	and.w	r3, r3, #1
 800b1d8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b1da:	4b99      	ldr	r3, [pc, #612]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1de:	08db      	lsrs	r3, r3, #3
 800b1e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1e4:	693a      	ldr	r2, [r7, #16]
 800b1e6:	fb02 f303 	mul.w	r3, r2, r3
 800b1ea:	ee07 3a90 	vmov	s15, r3
 800b1ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f000 8111 	beq.w	800b420 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b1fe:	69bb      	ldr	r3, [r7, #24]
 800b200:	2b02      	cmp	r3, #2
 800b202:	f000 8083 	beq.w	800b30c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	2b02      	cmp	r3, #2
 800b20a:	f200 80a1 	bhi.w	800b350 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b20e:	69bb      	ldr	r3, [r7, #24]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d003      	beq.n	800b21c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b214:	69bb      	ldr	r3, [r7, #24]
 800b216:	2b01      	cmp	r3, #1
 800b218:	d056      	beq.n	800b2c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b21a:	e099      	b.n	800b350 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b21c:	4b88      	ldr	r3, [pc, #544]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 0320 	and.w	r3, r3, #32
 800b224:	2b00      	cmp	r3, #0
 800b226:	d02d      	beq.n	800b284 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b228:	4b85      	ldr	r3, [pc, #532]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	08db      	lsrs	r3, r3, #3
 800b22e:	f003 0303 	and.w	r3, r3, #3
 800b232:	4a84      	ldr	r2, [pc, #528]	; (800b444 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b234:	fa22 f303 	lsr.w	r3, r2, r3
 800b238:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b23a:	68bb      	ldr	r3, [r7, #8]
 800b23c:	ee07 3a90 	vmov	s15, r3
 800b240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	ee07 3a90 	vmov	s15, r3
 800b24a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b252:	4b7b      	ldr	r3, [pc, #492]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b25a:	ee07 3a90 	vmov	s15, r3
 800b25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b262:	ed97 6a03 	vldr	s12, [r7, #12]
 800b266:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b272:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b27e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b282:	e087      	b.n	800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	ee07 3a90 	vmov	s15, r3
 800b28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b44c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b296:	4b6a      	ldr	r3, [pc, #424]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b29e:	ee07 3a90 	vmov	s15, r3
 800b2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2c6:	e065      	b.n	800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b2c8:	697b      	ldr	r3, [r7, #20]
 800b2ca:	ee07 3a90 	vmov	s15, r3
 800b2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2da:	4b59      	ldr	r3, [pc, #356]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2e2:	ee07 3a90 	vmov	s15, r3
 800b2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b302:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b306:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b30a:	e043      	b.n	800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	ee07 3a90 	vmov	s15, r3
 800b312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b316:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b454 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31e:	4b48      	ldr	r3, [pc, #288]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b326:	ee07 3a90 	vmov	s15, r3
 800b32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b32e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b332:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b33e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b34a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b34e:	e021      	b.n	800b394 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	ee07 3a90 	vmov	s15, r3
 800b356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b450 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b35e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b362:	4b37      	ldr	r3, [pc, #220]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b36a:	ee07 3a90 	vmov	s15, r3
 800b36e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b372:	ed97 6a03 	vldr	s12, [r7, #12]
 800b376:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b448 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b37a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b37e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b38a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b392:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b394:	4b2a      	ldr	r3, [pc, #168]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b398:	0a5b      	lsrs	r3, r3, #9
 800b39a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b39e:	ee07 3a90 	vmov	s15, r3
 800b3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3ba:	ee17 2a90 	vmov	r2, s15
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b3c2:	4b1f      	ldr	r3, [pc, #124]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3c6:	0c1b      	lsrs	r3, r3, #16
 800b3c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3cc:	ee07 3a90 	vmov	s15, r3
 800b3d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3e8:	ee17 2a90 	vmov	r2, s15
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b3f0:	4b13      	ldr	r3, [pc, #76]	; (800b440 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f4:	0e1b      	lsrs	r3, r3, #24
 800b3f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3fa:	ee07 3a90 	vmov	s15, r3
 800b3fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b402:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b406:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b40a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b40e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b416:	ee17 2a90 	vmov	r2, s15
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b41e:	e008      	b.n	800b432 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2200      	movs	r2, #0
 800b42a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	609a      	str	r2, [r3, #8]
}
 800b432:	bf00      	nop
 800b434:	3724      	adds	r7, #36	; 0x24
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	58024400 	.word	0x58024400
 800b444:	03d09000 	.word	0x03d09000
 800b448:	46000000 	.word	0x46000000
 800b44c:	4c742400 	.word	0x4c742400
 800b450:	4a742400 	.word	0x4a742400
 800b454:	4c371b00 	.word	0x4c371b00

0800b458 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b462:	2300      	movs	r3, #0
 800b464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b466:	4b53      	ldr	r3, [pc, #332]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b46a:	f003 0303 	and.w	r3, r3, #3
 800b46e:	2b03      	cmp	r3, #3
 800b470:	d101      	bne.n	800b476 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	e099      	b.n	800b5aa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b476:	4b4f      	ldr	r3, [pc, #316]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a4e      	ldr	r2, [pc, #312]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b47c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b480:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b482:	f7fa faa9 	bl	80059d8 <HAL_GetTick>
 800b486:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b488:	e008      	b.n	800b49c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b48a:	f7fa faa5 	bl	80059d8 <HAL_GetTick>
 800b48e:	4602      	mov	r2, r0
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	2b02      	cmp	r3, #2
 800b496:	d901      	bls.n	800b49c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b498:	2303      	movs	r3, #3
 800b49a:	e086      	b.n	800b5aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b49c:	4b45      	ldr	r3, [pc, #276]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1f0      	bne.n	800b48a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b4a8:	4b42      	ldr	r3, [pc, #264]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b4aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	031b      	lsls	r3, r3, #12
 800b4b6:	493f      	ldr	r1, [pc, #252]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b4b8:	4313      	orrs	r3, r2
 800b4ba:	628b      	str	r3, [r1, #40]	; 0x28
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	025b      	lsls	r3, r3, #9
 800b4ce:	b29b      	uxth	r3, r3
 800b4d0:	431a      	orrs	r2, r3
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	68db      	ldr	r3, [r3, #12]
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	041b      	lsls	r3, r3, #16
 800b4da:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b4de:	431a      	orrs	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	061b      	lsls	r3, r3, #24
 800b4e8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b4ec:	4931      	ldr	r1, [pc, #196]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b4f2:	4b30      	ldr	r3, [pc, #192]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	695b      	ldr	r3, [r3, #20]
 800b4fe:	492d      	ldr	r1, [pc, #180]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b500:	4313      	orrs	r3, r2
 800b502:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b504:	4b2b      	ldr	r3, [pc, #172]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b508:	f023 0220 	bic.w	r2, r3, #32
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	699b      	ldr	r3, [r3, #24]
 800b510:	4928      	ldr	r1, [pc, #160]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b512:	4313      	orrs	r3, r2
 800b514:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b516:	4b27      	ldr	r3, [pc, #156]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b51a:	4a26      	ldr	r2, [pc, #152]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b51c:	f023 0310 	bic.w	r3, r3, #16
 800b520:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b522:	4b24      	ldr	r3, [pc, #144]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b526:	4b24      	ldr	r3, [pc, #144]	; (800b5b8 <RCCEx_PLL2_Config+0x160>)
 800b528:	4013      	ands	r3, r2
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	69d2      	ldr	r2, [r2, #28]
 800b52e:	00d2      	lsls	r2, r2, #3
 800b530:	4920      	ldr	r1, [pc, #128]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b532:	4313      	orrs	r3, r2
 800b534:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b536:	4b1f      	ldr	r3, [pc, #124]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b53a:	4a1e      	ldr	r2, [pc, #120]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b53c:	f043 0310 	orr.w	r3, r3, #16
 800b540:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d106      	bne.n	800b556 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b548:	4b1a      	ldr	r3, [pc, #104]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b54c:	4a19      	ldr	r2, [pc, #100]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b54e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b552:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b554:	e00f      	b.n	800b576 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d106      	bne.n	800b56a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b55c:	4b15      	ldr	r3, [pc, #84]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b560:	4a14      	ldr	r2, [pc, #80]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b566:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b568:	e005      	b.n	800b576 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b56a:	4b12      	ldr	r3, [pc, #72]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b56e:	4a11      	ldr	r2, [pc, #68]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b574:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b576:	4b0f      	ldr	r3, [pc, #60]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4a0e      	ldr	r2, [pc, #56]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b57c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b582:	f7fa fa29 	bl	80059d8 <HAL_GetTick>
 800b586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b588:	e008      	b.n	800b59c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b58a:	f7fa fa25 	bl	80059d8 <HAL_GetTick>
 800b58e:	4602      	mov	r2, r0
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	2b02      	cmp	r3, #2
 800b596:	d901      	bls.n	800b59c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b598:	2303      	movs	r3, #3
 800b59a:	e006      	b.n	800b5aa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b59c:	4b05      	ldr	r3, [pc, #20]	; (800b5b4 <RCCEx_PLL2_Config+0x15c>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d0f0      	beq.n	800b58a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3710      	adds	r7, #16
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
 800b5b2:	bf00      	nop
 800b5b4:	58024400 	.word	0x58024400
 800b5b8:	ffff0007 	.word	0xffff0007

0800b5bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b084      	sub	sp, #16
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b5ca:	4b53      	ldr	r3, [pc, #332]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b5cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ce:	f003 0303 	and.w	r3, r3, #3
 800b5d2:	2b03      	cmp	r3, #3
 800b5d4:	d101      	bne.n	800b5da <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	e099      	b.n	800b70e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b5da:	4b4f      	ldr	r3, [pc, #316]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a4e      	ldr	r2, [pc, #312]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b5e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b5e6:	f7fa f9f7 	bl	80059d8 <HAL_GetTick>
 800b5ea:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b5ec:	e008      	b.n	800b600 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b5ee:	f7fa f9f3 	bl	80059d8 <HAL_GetTick>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	1ad3      	subs	r3, r2, r3
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	d901      	bls.n	800b600 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	e086      	b.n	800b70e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b600:	4b45      	ldr	r3, [pc, #276]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1f0      	bne.n	800b5ee <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b60c:	4b42      	ldr	r3, [pc, #264]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b610:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	051b      	lsls	r3, r3, #20
 800b61a:	493f      	ldr	r1, [pc, #252]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b61c:	4313      	orrs	r3, r2
 800b61e:	628b      	str	r3, [r1, #40]	; 0x28
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	3b01      	subs	r3, #1
 800b626:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	3b01      	subs	r3, #1
 800b630:	025b      	lsls	r3, r3, #9
 800b632:	b29b      	uxth	r3, r3
 800b634:	431a      	orrs	r2, r3
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	3b01      	subs	r3, #1
 800b63c:	041b      	lsls	r3, r3, #16
 800b63e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b642:	431a      	orrs	r2, r3
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	691b      	ldr	r3, [r3, #16]
 800b648:	3b01      	subs	r3, #1
 800b64a:	061b      	lsls	r3, r3, #24
 800b64c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b650:	4931      	ldr	r1, [pc, #196]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b652:	4313      	orrs	r3, r2
 800b654:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b656:	4b30      	ldr	r3, [pc, #192]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b65a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	695b      	ldr	r3, [r3, #20]
 800b662:	492d      	ldr	r1, [pc, #180]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b664:	4313      	orrs	r3, r2
 800b666:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b668:	4b2b      	ldr	r3, [pc, #172]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b66a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b66c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	699b      	ldr	r3, [r3, #24]
 800b674:	4928      	ldr	r1, [pc, #160]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b676:	4313      	orrs	r3, r2
 800b678:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b67a:	4b27      	ldr	r3, [pc, #156]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67e:	4a26      	ldr	r2, [pc, #152]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b684:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b686:	4b24      	ldr	r3, [pc, #144]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b68a:	4b24      	ldr	r3, [pc, #144]	; (800b71c <RCCEx_PLL3_Config+0x160>)
 800b68c:	4013      	ands	r3, r2
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	69d2      	ldr	r2, [r2, #28]
 800b692:	00d2      	lsls	r2, r2, #3
 800b694:	4920      	ldr	r1, [pc, #128]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b696:	4313      	orrs	r3, r2
 800b698:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b69a:	4b1f      	ldr	r3, [pc, #124]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b69e:	4a1e      	ldr	r2, [pc, #120]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6a4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d106      	bne.n	800b6ba <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b6ac:	4b1a      	ldr	r3, [pc, #104]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b0:	4a19      	ldr	r2, [pc, #100]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b6b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b6b8:	e00f      	b.n	800b6da <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d106      	bne.n	800b6ce <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b6c0:	4b15      	ldr	r3, [pc, #84]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c4:	4a14      	ldr	r2, [pc, #80]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b6ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b6cc:	e005      	b.n	800b6da <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b6ce:	4b12      	ldr	r3, [pc, #72]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d2:	4a11      	ldr	r2, [pc, #68]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b6d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b6da:	4b0f      	ldr	r3, [pc, #60]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a0e      	ldr	r2, [pc, #56]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b6e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6e6:	f7fa f977 	bl	80059d8 <HAL_GetTick>
 800b6ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b6ec:	e008      	b.n	800b700 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b6ee:	f7fa f973 	bl	80059d8 <HAL_GetTick>
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	1ad3      	subs	r3, r2, r3
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d901      	bls.n	800b700 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	e006      	b.n	800b70e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b700:	4b05      	ldr	r3, [pc, #20]	; (800b718 <RCCEx_PLL3_Config+0x15c>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d0f0      	beq.n	800b6ee <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b70c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	58024400 	.word	0x58024400
 800b71c:	ffff0007 	.word	0xffff0007

0800b720 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d101      	bne.n	800b732 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b72e:	2301      	movs	r3, #1
 800b730:	e0f1      	b.n	800b916 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a78      	ldr	r2, [pc, #480]	; (800b920 <HAL_SPI_Init+0x200>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d00f      	beq.n	800b762 <HAL_SPI_Init+0x42>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a77      	ldr	r2, [pc, #476]	; (800b924 <HAL_SPI_Init+0x204>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d00a      	beq.n	800b762 <HAL_SPI_Init+0x42>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a75      	ldr	r2, [pc, #468]	; (800b928 <HAL_SPI_Init+0x208>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d005      	beq.n	800b762 <HAL_SPI_Init+0x42>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	2b0f      	cmp	r3, #15
 800b75c:	d901      	bls.n	800b762 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b75e:	2301      	movs	r3, #1
 800b760:	e0d9      	b.n	800b916 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f8e2 	bl	800b92c <SPI_GetPacketSize>
 800b768:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a6c      	ldr	r2, [pc, #432]	; (800b920 <HAL_SPI_Init+0x200>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d00c      	beq.n	800b78e <HAL_SPI_Init+0x6e>
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4a6a      	ldr	r2, [pc, #424]	; (800b924 <HAL_SPI_Init+0x204>)
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d007      	beq.n	800b78e <HAL_SPI_Init+0x6e>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a69      	ldr	r2, [pc, #420]	; (800b928 <HAL_SPI_Init+0x208>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d002      	beq.n	800b78e <HAL_SPI_Init+0x6e>
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2b08      	cmp	r3, #8
 800b78c:	d811      	bhi.n	800b7b2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b792:	4a63      	ldr	r2, [pc, #396]	; (800b920 <HAL_SPI_Init+0x200>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d009      	beq.n	800b7ac <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a61      	ldr	r2, [pc, #388]	; (800b924 <HAL_SPI_Init+0x204>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d004      	beq.n	800b7ac <HAL_SPI_Init+0x8c>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a60      	ldr	r2, [pc, #384]	; (800b928 <HAL_SPI_Init+0x208>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d104      	bne.n	800b7b6 <HAL_SPI_Init+0x96>
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2b10      	cmp	r3, #16
 800b7b0:	d901      	bls.n	800b7b6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e0af      	b.n	800b916 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d106      	bne.n	800b7d0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7f8 fc82 	bl	80040d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f022 0201 	bic.w	r2, r2, #1
 800b7e6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b7f2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b7fc:	d119      	bne.n	800b832 <HAL_SPI_Init+0x112>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b806:	d103      	bne.n	800b810 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d008      	beq.n	800b822 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b814:	2b00      	cmp	r3, #0
 800b816:	d10c      	bne.n	800b832 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b81c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b820:	d107      	bne.n	800b832 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b830:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	69da      	ldr	r2, [r3, #28]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b83a:	431a      	orrs	r2, r3
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	431a      	orrs	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b844:	ea42 0103 	orr.w	r1, r2, r3
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	68da      	ldr	r2, [r3, #12]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	430a      	orrs	r2, r1
 800b852:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b85c:	431a      	orrs	r2, r3
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b862:	431a      	orrs	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	431a      	orrs	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	691b      	ldr	r3, [r3, #16]
 800b86e:	431a      	orrs	r2, r3
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	695b      	ldr	r3, [r3, #20]
 800b874:	431a      	orrs	r2, r3
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a1b      	ldr	r3, [r3, #32]
 800b87a:	431a      	orrs	r2, r3
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	431a      	orrs	r2, r3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b886:	431a      	orrs	r2, r3
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	431a      	orrs	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b892:	ea42 0103 	orr.w	r1, r2, r3
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	430a      	orrs	r2, r1
 800b8a0:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d113      	bne.n	800b8d2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	689b      	ldr	r3, [r3, #8]
 800b8b0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8bc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b8d0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f022 0201 	bic.w	r2, r2, #1
 800b8e0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00a      	beq.n	800b904 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68db      	ldr	r3, [r3, #12]
 800b8f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	430a      	orrs	r2, r1
 800b902:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2200      	movs	r2, #0
 800b908:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	2201      	movs	r2, #1
 800b910:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b914:	2300      	movs	r3, #0
}
 800b916:	4618      	mov	r0, r3
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}
 800b91e:	bf00      	nop
 800b920:	40013000 	.word	0x40013000
 800b924:	40003800 	.word	0x40003800
 800b928:	40003c00 	.word	0x40003c00

0800b92c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b938:	095b      	lsrs	r3, r3, #5
 800b93a:	3301      	adds	r3, #1
 800b93c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	3301      	adds	r3, #1
 800b944:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	3307      	adds	r3, #7
 800b94a:	08db      	lsrs	r3, r3, #3
 800b94c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	fb02 f303 	mul.w	r3, r2, r3
}
 800b956:	4618      	mov	r0, r3
 800b958:	3714      	adds	r7, #20
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b962:	b580      	push	{r7, lr}
 800b964:	b082      	sub	sp, #8
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d101      	bne.n	800b974 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b970:	2301      	movs	r3, #1
 800b972:	e049      	b.n	800ba08 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d106      	bne.n	800b98e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2200      	movs	r2, #0
 800b984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f7f9 fa41 	bl	8004e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2202      	movs	r2, #2
 800b992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	3304      	adds	r3, #4
 800b99e:	4619      	mov	r1, r3
 800b9a0:	4610      	mov	r0, r2
 800b9a2:	f000 fd9f 	bl	800c4e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2201      	movs	r2, #1
 800b9e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2201      	movs	r2, #1
 800ba02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba06:	2300      	movs	r3, #0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3708      	adds	r7, #8
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b085      	sub	sp, #20
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	2b01      	cmp	r3, #1
 800ba22:	d001      	beq.n	800ba28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba24:	2301      	movs	r3, #1
 800ba26:	e054      	b.n	800bad2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2202      	movs	r2, #2
 800ba2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	68da      	ldr	r2, [r3, #12]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f042 0201 	orr.w	r2, r2, #1
 800ba3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a26      	ldr	r2, [pc, #152]	; (800bae0 <HAL_TIM_Base_Start_IT+0xd0>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d022      	beq.n	800ba90 <HAL_TIM_Base_Start_IT+0x80>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba52:	d01d      	beq.n	800ba90 <HAL_TIM_Base_Start_IT+0x80>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a22      	ldr	r2, [pc, #136]	; (800bae4 <HAL_TIM_Base_Start_IT+0xd4>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d018      	beq.n	800ba90 <HAL_TIM_Base_Start_IT+0x80>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a21      	ldr	r2, [pc, #132]	; (800bae8 <HAL_TIM_Base_Start_IT+0xd8>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d013      	beq.n	800ba90 <HAL_TIM_Base_Start_IT+0x80>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a1f      	ldr	r2, [pc, #124]	; (800baec <HAL_TIM_Base_Start_IT+0xdc>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d00e      	beq.n	800ba90 <HAL_TIM_Base_Start_IT+0x80>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a1e      	ldr	r2, [pc, #120]	; (800baf0 <HAL_TIM_Base_Start_IT+0xe0>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d009      	beq.n	800ba90 <HAL_TIM_Base_Start_IT+0x80>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a1c      	ldr	r2, [pc, #112]	; (800baf4 <HAL_TIM_Base_Start_IT+0xe4>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d004      	beq.n	800ba90 <HAL_TIM_Base_Start_IT+0x80>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a1b      	ldr	r2, [pc, #108]	; (800baf8 <HAL_TIM_Base_Start_IT+0xe8>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d115      	bne.n	800babc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	689a      	ldr	r2, [r3, #8]
 800ba96:	4b19      	ldr	r3, [pc, #100]	; (800bafc <HAL_TIM_Base_Start_IT+0xec>)
 800ba98:	4013      	ands	r3, r2
 800ba9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2b06      	cmp	r3, #6
 800baa0:	d015      	beq.n	800bace <HAL_TIM_Base_Start_IT+0xbe>
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800baa8:	d011      	beq.n	800bace <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f042 0201 	orr.w	r2, r2, #1
 800bab8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800baba:	e008      	b.n	800bace <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	681a      	ldr	r2, [r3, #0]
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f042 0201 	orr.w	r2, r2, #1
 800baca:	601a      	str	r2, [r3, #0]
 800bacc:	e000      	b.n	800bad0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bace:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3714      	adds	r7, #20
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	40010000 	.word	0x40010000
 800bae4:	40000400 	.word	0x40000400
 800bae8:	40000800 	.word	0x40000800
 800baec:	40000c00 	.word	0x40000c00
 800baf0:	40010400 	.word	0x40010400
 800baf4:	40001800 	.word	0x40001800
 800baf8:	40014000 	.word	0x40014000
 800bafc:	00010007 	.word	0x00010007

0800bb00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bb00:	b480      	push	{r7}
 800bb02:	b083      	sub	sp, #12
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	68da      	ldr	r2, [r3, #12]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f022 0201 	bic.w	r2, r2, #1
 800bb16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	6a1a      	ldr	r2, [r3, #32]
 800bb1e:	f241 1311 	movw	r3, #4369	; 0x1111
 800bb22:	4013      	ands	r3, r2
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d10f      	bne.n	800bb48 <HAL_TIM_Base_Stop_IT+0x48>
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	6a1a      	ldr	r2, [r3, #32]
 800bb2e:	f240 4344 	movw	r3, #1092	; 0x444
 800bb32:	4013      	ands	r3, r2
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d107      	bne.n	800bb48 <HAL_TIM_Base_Stop_IT+0x48>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f022 0201 	bic.w	r2, r2, #1
 800bb46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	370c      	adds	r7, #12
 800bb56:	46bd      	mov	sp, r7
 800bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b082      	sub	sp, #8
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d101      	bne.n	800bb70 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	e049      	b.n	800bc04 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d106      	bne.n	800bb8a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f000 f841 	bl	800bc0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2202      	movs	r2, #2
 800bb8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	3304      	adds	r3, #4
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	f000 fca1 	bl	800c4e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2201      	movs	r2, #1
 800bba6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2201      	movs	r2, #1
 800bbae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2201      	movs	r2, #1
 800bbbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2201      	movs	r2, #1
 800bbce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2201      	movs	r2, #1
 800bbde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2201      	movs	r2, #1
 800bbee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc02:	2300      	movs	r3, #0
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3708      	adds	r7, #8
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
 800bc28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d109      	bne.n	800bc44 <HAL_TIM_PWM_Start+0x24>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	bf14      	ite	ne
 800bc3c:	2301      	movne	r3, #1
 800bc3e:	2300      	moveq	r3, #0
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	e03c      	b.n	800bcbe <HAL_TIM_PWM_Start+0x9e>
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2b04      	cmp	r3, #4
 800bc48:	d109      	bne.n	800bc5e <HAL_TIM_PWM_Start+0x3e>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	bf14      	ite	ne
 800bc56:	2301      	movne	r3, #1
 800bc58:	2300      	moveq	r3, #0
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	e02f      	b.n	800bcbe <HAL_TIM_PWM_Start+0x9e>
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	2b08      	cmp	r3, #8
 800bc62:	d109      	bne.n	800bc78 <HAL_TIM_PWM_Start+0x58>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	bf14      	ite	ne
 800bc70:	2301      	movne	r3, #1
 800bc72:	2300      	moveq	r3, #0
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	e022      	b.n	800bcbe <HAL_TIM_PWM_Start+0x9e>
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	2b0c      	cmp	r3, #12
 800bc7c:	d109      	bne.n	800bc92 <HAL_TIM_PWM_Start+0x72>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bc84:	b2db      	uxtb	r3, r3
 800bc86:	2b01      	cmp	r3, #1
 800bc88:	bf14      	ite	ne
 800bc8a:	2301      	movne	r3, #1
 800bc8c:	2300      	moveq	r3, #0
 800bc8e:	b2db      	uxtb	r3, r3
 800bc90:	e015      	b.n	800bcbe <HAL_TIM_PWM_Start+0x9e>
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	2b10      	cmp	r3, #16
 800bc96:	d109      	bne.n	800bcac <HAL_TIM_PWM_Start+0x8c>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	2b01      	cmp	r3, #1
 800bca2:	bf14      	ite	ne
 800bca4:	2301      	movne	r3, #1
 800bca6:	2300      	moveq	r3, #0
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	e008      	b.n	800bcbe <HAL_TIM_PWM_Start+0x9e>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bcb2:	b2db      	uxtb	r3, r3
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	bf14      	ite	ne
 800bcb8:	2301      	movne	r3, #1
 800bcba:	2300      	moveq	r3, #0
 800bcbc:	b2db      	uxtb	r3, r3
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d001      	beq.n	800bcc6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e0a1      	b.n	800be0a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d104      	bne.n	800bcd6 <HAL_TIM_PWM_Start+0xb6>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2202      	movs	r2, #2
 800bcd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bcd4:	e023      	b.n	800bd1e <HAL_TIM_PWM_Start+0xfe>
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	2b04      	cmp	r3, #4
 800bcda:	d104      	bne.n	800bce6 <HAL_TIM_PWM_Start+0xc6>
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2202      	movs	r2, #2
 800bce0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bce4:	e01b      	b.n	800bd1e <HAL_TIM_PWM_Start+0xfe>
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	2b08      	cmp	r3, #8
 800bcea:	d104      	bne.n	800bcf6 <HAL_TIM_PWM_Start+0xd6>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2202      	movs	r2, #2
 800bcf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bcf4:	e013      	b.n	800bd1e <HAL_TIM_PWM_Start+0xfe>
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	2b0c      	cmp	r3, #12
 800bcfa:	d104      	bne.n	800bd06 <HAL_TIM_PWM_Start+0xe6>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2202      	movs	r2, #2
 800bd00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bd04:	e00b      	b.n	800bd1e <HAL_TIM_PWM_Start+0xfe>
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	2b10      	cmp	r3, #16
 800bd0a:	d104      	bne.n	800bd16 <HAL_TIM_PWM_Start+0xf6>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2202      	movs	r2, #2
 800bd10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd14:	e003      	b.n	800bd1e <HAL_TIM_PWM_Start+0xfe>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2202      	movs	r2, #2
 800bd1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2201      	movs	r2, #1
 800bd24:	6839      	ldr	r1, [r7, #0]
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 ffea 	bl	800cd00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4a38      	ldr	r2, [pc, #224]	; (800be14 <HAL_TIM_PWM_Start+0x1f4>)
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d013      	beq.n	800bd5e <HAL_TIM_PWM_Start+0x13e>
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4a37      	ldr	r2, [pc, #220]	; (800be18 <HAL_TIM_PWM_Start+0x1f8>)
 800bd3c:	4293      	cmp	r3, r2
 800bd3e:	d00e      	beq.n	800bd5e <HAL_TIM_PWM_Start+0x13e>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	4a35      	ldr	r2, [pc, #212]	; (800be1c <HAL_TIM_PWM_Start+0x1fc>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d009      	beq.n	800bd5e <HAL_TIM_PWM_Start+0x13e>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	4a34      	ldr	r2, [pc, #208]	; (800be20 <HAL_TIM_PWM_Start+0x200>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d004      	beq.n	800bd5e <HAL_TIM_PWM_Start+0x13e>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4a32      	ldr	r2, [pc, #200]	; (800be24 <HAL_TIM_PWM_Start+0x204>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d101      	bne.n	800bd62 <HAL_TIM_PWM_Start+0x142>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e000      	b.n	800bd64 <HAL_TIM_PWM_Start+0x144>
 800bd62:	2300      	movs	r3, #0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d007      	beq.n	800bd78 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bd76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	4a25      	ldr	r2, [pc, #148]	; (800be14 <HAL_TIM_PWM_Start+0x1f4>)
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d022      	beq.n	800bdc8 <HAL_TIM_PWM_Start+0x1a8>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd8a:	d01d      	beq.n	800bdc8 <HAL_TIM_PWM_Start+0x1a8>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4a25      	ldr	r2, [pc, #148]	; (800be28 <HAL_TIM_PWM_Start+0x208>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d018      	beq.n	800bdc8 <HAL_TIM_PWM_Start+0x1a8>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	4a24      	ldr	r2, [pc, #144]	; (800be2c <HAL_TIM_PWM_Start+0x20c>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d013      	beq.n	800bdc8 <HAL_TIM_PWM_Start+0x1a8>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	4a22      	ldr	r2, [pc, #136]	; (800be30 <HAL_TIM_PWM_Start+0x210>)
 800bda6:	4293      	cmp	r3, r2
 800bda8:	d00e      	beq.n	800bdc8 <HAL_TIM_PWM_Start+0x1a8>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4a1a      	ldr	r2, [pc, #104]	; (800be18 <HAL_TIM_PWM_Start+0x1f8>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d009      	beq.n	800bdc8 <HAL_TIM_PWM_Start+0x1a8>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	4a1e      	ldr	r2, [pc, #120]	; (800be34 <HAL_TIM_PWM_Start+0x214>)
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d004      	beq.n	800bdc8 <HAL_TIM_PWM_Start+0x1a8>
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	4a16      	ldr	r2, [pc, #88]	; (800be1c <HAL_TIM_PWM_Start+0x1fc>)
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d115      	bne.n	800bdf4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	689a      	ldr	r2, [r3, #8]
 800bdce:	4b1a      	ldr	r3, [pc, #104]	; (800be38 <HAL_TIM_PWM_Start+0x218>)
 800bdd0:	4013      	ands	r3, r2
 800bdd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b06      	cmp	r3, #6
 800bdd8:	d015      	beq.n	800be06 <HAL_TIM_PWM_Start+0x1e6>
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bde0:	d011      	beq.n	800be06 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	f042 0201 	orr.w	r2, r2, #1
 800bdf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bdf2:	e008      	b.n	800be06 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f042 0201 	orr.w	r2, r2, #1
 800be02:	601a      	str	r2, [r3, #0]
 800be04:	e000      	b.n	800be08 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3710      	adds	r7, #16
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	40010000 	.word	0x40010000
 800be18:	40010400 	.word	0x40010400
 800be1c:	40014000 	.word	0x40014000
 800be20:	40014400 	.word	0x40014400
 800be24:	40014800 	.word	0x40014800
 800be28:	40000400 	.word	0x40000400
 800be2c:	40000800 	.word	0x40000800
 800be30:	40000c00 	.word	0x40000c00
 800be34:	40001800 	.word	0x40001800
 800be38:	00010007 	.word	0x00010007

0800be3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	691b      	ldr	r3, [r3, #16]
 800be4a:	f003 0302 	and.w	r3, r3, #2
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d122      	bne.n	800be98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	f003 0302 	and.w	r3, r3, #2
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d11b      	bne.n	800be98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f06f 0202 	mvn.w	r2, #2
 800be68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2201      	movs	r2, #1
 800be6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	f003 0303 	and.w	r3, r3, #3
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d003      	beq.n	800be86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 fb12 	bl	800c4a8 <HAL_TIM_IC_CaptureCallback>
 800be84:	e005      	b.n	800be92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 fb04 	bl	800c494 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f000 fb15 	bl	800c4bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2200      	movs	r2, #0
 800be96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	691b      	ldr	r3, [r3, #16]
 800be9e:	f003 0304 	and.w	r3, r3, #4
 800bea2:	2b04      	cmp	r3, #4
 800bea4:	d122      	bne.n	800beec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	68db      	ldr	r3, [r3, #12]
 800beac:	f003 0304 	and.w	r3, r3, #4
 800beb0:	2b04      	cmp	r3, #4
 800beb2:	d11b      	bne.n	800beec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f06f 0204 	mvn.w	r2, #4
 800bebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2202      	movs	r2, #2
 800bec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	699b      	ldr	r3, [r3, #24]
 800beca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d003      	beq.n	800beda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 fae8 	bl	800c4a8 <HAL_TIM_IC_CaptureCallback>
 800bed8:	e005      	b.n	800bee6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fada 	bl	800c494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 faeb 	bl	800c4bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2200      	movs	r2, #0
 800beea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	691b      	ldr	r3, [r3, #16]
 800bef2:	f003 0308 	and.w	r3, r3, #8
 800bef6:	2b08      	cmp	r3, #8
 800bef8:	d122      	bne.n	800bf40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	f003 0308 	and.w	r3, r3, #8
 800bf04:	2b08      	cmp	r3, #8
 800bf06:	d11b      	bne.n	800bf40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f06f 0208 	mvn.w	r2, #8
 800bf10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2204      	movs	r2, #4
 800bf16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	69db      	ldr	r3, [r3, #28]
 800bf1e:	f003 0303 	and.w	r3, r3, #3
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d003      	beq.n	800bf2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 fabe 	bl	800c4a8 <HAL_TIM_IC_CaptureCallback>
 800bf2c:	e005      	b.n	800bf3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 fab0 	bl	800c494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fac1 	bl	800c4bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	691b      	ldr	r3, [r3, #16]
 800bf46:	f003 0310 	and.w	r3, r3, #16
 800bf4a:	2b10      	cmp	r3, #16
 800bf4c:	d122      	bne.n	800bf94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	68db      	ldr	r3, [r3, #12]
 800bf54:	f003 0310 	and.w	r3, r3, #16
 800bf58:	2b10      	cmp	r3, #16
 800bf5a:	d11b      	bne.n	800bf94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f06f 0210 	mvn.w	r2, #16
 800bf64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2208      	movs	r2, #8
 800bf6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	69db      	ldr	r3, [r3, #28]
 800bf72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d003      	beq.n	800bf82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fa94 	bl	800c4a8 <HAL_TIM_IC_CaptureCallback>
 800bf80:	e005      	b.n	800bf8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fa86 	bl	800c494 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f000 fa97 	bl	800c4bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	2200      	movs	r2, #0
 800bf92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	691b      	ldr	r3, [r3, #16]
 800bf9a:	f003 0301 	and.w	r3, r3, #1
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d10e      	bne.n	800bfc0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	68db      	ldr	r3, [r3, #12]
 800bfa8:	f003 0301 	and.w	r3, r3, #1
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d107      	bne.n	800bfc0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f06f 0201 	mvn.w	r2, #1
 800bfb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7f6 ff2c 	bl	8002e18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfca:	2b80      	cmp	r3, #128	; 0x80
 800bfcc:	d10e      	bne.n	800bfec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfd8:	2b80      	cmp	r3, #128	; 0x80
 800bfda:	d107      	bne.n	800bfec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bfe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 ffc6 	bl	800cf78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	691b      	ldr	r3, [r3, #16]
 800bff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bffa:	d10e      	bne.n	800c01a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	68db      	ldr	r3, [r3, #12]
 800c002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c006:	2b80      	cmp	r3, #128	; 0x80
 800c008:	d107      	bne.n	800c01a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c012:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 ffb9 	bl	800cf8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c024:	2b40      	cmp	r3, #64	; 0x40
 800c026:	d10e      	bne.n	800c046 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c032:	2b40      	cmp	r3, #64	; 0x40
 800c034:	d107      	bne.n	800c046 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c03e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 fa45 	bl	800c4d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	f003 0320 	and.w	r3, r3, #32
 800c050:	2b20      	cmp	r3, #32
 800c052:	d10e      	bne.n	800c072 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	68db      	ldr	r3, [r3, #12]
 800c05a:	f003 0320 	and.w	r3, r3, #32
 800c05e:	2b20      	cmp	r3, #32
 800c060:	d107      	bne.n	800c072 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f06f 0220 	mvn.w	r2, #32
 800c06a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 ff79 	bl	800cf64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c072:	bf00      	nop
 800c074:	3708      	adds	r7, #8
 800c076:	46bd      	mov	sp, r7
 800c078:	bd80      	pop	{r7, pc}
	...

0800c07c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b086      	sub	sp, #24
 800c080:	af00      	add	r7, sp, #0
 800c082:	60f8      	str	r0, [r7, #12]
 800c084:	60b9      	str	r1, [r7, #8]
 800c086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c088:	2300      	movs	r3, #0
 800c08a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c092:	2b01      	cmp	r3, #1
 800c094:	d101      	bne.n	800c09a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c096:	2302      	movs	r3, #2
 800c098:	e0ff      	b.n	800c29a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2201      	movs	r2, #1
 800c09e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2b14      	cmp	r3, #20
 800c0a6:	f200 80f0 	bhi.w	800c28a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c0aa:	a201      	add	r2, pc, #4	; (adr r2, 800c0b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c0ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b0:	0800c105 	.word	0x0800c105
 800c0b4:	0800c28b 	.word	0x0800c28b
 800c0b8:	0800c28b 	.word	0x0800c28b
 800c0bc:	0800c28b 	.word	0x0800c28b
 800c0c0:	0800c145 	.word	0x0800c145
 800c0c4:	0800c28b 	.word	0x0800c28b
 800c0c8:	0800c28b 	.word	0x0800c28b
 800c0cc:	0800c28b 	.word	0x0800c28b
 800c0d0:	0800c187 	.word	0x0800c187
 800c0d4:	0800c28b 	.word	0x0800c28b
 800c0d8:	0800c28b 	.word	0x0800c28b
 800c0dc:	0800c28b 	.word	0x0800c28b
 800c0e0:	0800c1c7 	.word	0x0800c1c7
 800c0e4:	0800c28b 	.word	0x0800c28b
 800c0e8:	0800c28b 	.word	0x0800c28b
 800c0ec:	0800c28b 	.word	0x0800c28b
 800c0f0:	0800c209 	.word	0x0800c209
 800c0f4:	0800c28b 	.word	0x0800c28b
 800c0f8:	0800c28b 	.word	0x0800c28b
 800c0fc:	0800c28b 	.word	0x0800c28b
 800c100:	0800c249 	.word	0x0800c249
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68b9      	ldr	r1, [r7, #8]
 800c10a:	4618      	mov	r0, r3
 800c10c:	f000 fa84 	bl	800c618 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	699a      	ldr	r2, [r3, #24]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f042 0208 	orr.w	r2, r2, #8
 800c11e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	699a      	ldr	r2, [r3, #24]
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f022 0204 	bic.w	r2, r2, #4
 800c12e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6999      	ldr	r1, [r3, #24]
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	691a      	ldr	r2, [r3, #16]
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	430a      	orrs	r2, r1
 800c140:	619a      	str	r2, [r3, #24]
      break;
 800c142:	e0a5      	b.n	800c290 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68b9      	ldr	r1, [r7, #8]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f000 faf4 	bl	800c738 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	699a      	ldr	r2, [r3, #24]
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c15e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	699a      	ldr	r2, [r3, #24]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c16e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	6999      	ldr	r1, [r3, #24]
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	691b      	ldr	r3, [r3, #16]
 800c17a:	021a      	lsls	r2, r3, #8
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	430a      	orrs	r2, r1
 800c182:	619a      	str	r2, [r3, #24]
      break;
 800c184:	e084      	b.n	800c290 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	68b9      	ldr	r1, [r7, #8]
 800c18c:	4618      	mov	r0, r3
 800c18e:	f000 fb5d 	bl	800c84c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	69da      	ldr	r2, [r3, #28]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f042 0208 	orr.w	r2, r2, #8
 800c1a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	69da      	ldr	r2, [r3, #28]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f022 0204 	bic.w	r2, r2, #4
 800c1b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	69d9      	ldr	r1, [r3, #28]
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	691a      	ldr	r2, [r3, #16]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	430a      	orrs	r2, r1
 800c1c2:	61da      	str	r2, [r3, #28]
      break;
 800c1c4:	e064      	b.n	800c290 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	68b9      	ldr	r1, [r7, #8]
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	f000 fbc5 	bl	800c95c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	69da      	ldr	r2, [r3, #28]
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c1e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	69da      	ldr	r2, [r3, #28]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c1f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	69d9      	ldr	r1, [r3, #28]
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	691b      	ldr	r3, [r3, #16]
 800c1fc:	021a      	lsls	r2, r3, #8
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	430a      	orrs	r2, r1
 800c204:	61da      	str	r2, [r3, #28]
      break;
 800c206:	e043      	b.n	800c290 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	68b9      	ldr	r1, [r7, #8]
 800c20e:	4618      	mov	r0, r3
 800c210:	f000 fc0e 	bl	800ca30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f042 0208 	orr.w	r2, r2, #8
 800c222:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	f022 0204 	bic.w	r2, r2, #4
 800c232:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	691a      	ldr	r2, [r3, #16]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	430a      	orrs	r2, r1
 800c244:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c246:	e023      	b.n	800c290 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	68b9      	ldr	r1, [r7, #8]
 800c24e:	4618      	mov	r0, r3
 800c250:	f000 fc52 	bl	800caf8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c262:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c272:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	691b      	ldr	r3, [r3, #16]
 800c27e:	021a      	lsls	r2, r3, #8
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	430a      	orrs	r2, r1
 800c286:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c288:	e002      	b.n	800c290 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c28a:	2301      	movs	r3, #1
 800c28c:	75fb      	strb	r3, [r7, #23]
      break;
 800c28e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2200      	movs	r2, #0
 800c294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c298:	7dfb      	ldrb	r3, [r7, #23]
}
 800c29a:	4618      	mov	r0, r3
 800c29c:	3718      	adds	r7, #24
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop

0800c2a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b084      	sub	sp, #16
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d101      	bne.n	800c2c0 <HAL_TIM_ConfigClockSource+0x1c>
 800c2bc:	2302      	movs	r3, #2
 800c2be:	e0dc      	b.n	800c47a <HAL_TIM_ConfigClockSource+0x1d6>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2202      	movs	r2, #2
 800c2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c2d8:	68ba      	ldr	r2, [r7, #8]
 800c2da:	4b6a      	ldr	r3, [pc, #424]	; (800c484 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c2dc:	4013      	ands	r3, r2
 800c2de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c2e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a64      	ldr	r2, [pc, #400]	; (800c488 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	f000 80a9 	beq.w	800c44e <HAL_TIM_ConfigClockSource+0x1aa>
 800c2fc:	4a62      	ldr	r2, [pc, #392]	; (800c488 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	f200 80ae 	bhi.w	800c460 <HAL_TIM_ConfigClockSource+0x1bc>
 800c304:	4a61      	ldr	r2, [pc, #388]	; (800c48c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c306:	4293      	cmp	r3, r2
 800c308:	f000 80a1 	beq.w	800c44e <HAL_TIM_ConfigClockSource+0x1aa>
 800c30c:	4a5f      	ldr	r2, [pc, #380]	; (800c48c <HAL_TIM_ConfigClockSource+0x1e8>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	f200 80a6 	bhi.w	800c460 <HAL_TIM_ConfigClockSource+0x1bc>
 800c314:	4a5e      	ldr	r2, [pc, #376]	; (800c490 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c316:	4293      	cmp	r3, r2
 800c318:	f000 8099 	beq.w	800c44e <HAL_TIM_ConfigClockSource+0x1aa>
 800c31c:	4a5c      	ldr	r2, [pc, #368]	; (800c490 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	f200 809e 	bhi.w	800c460 <HAL_TIM_ConfigClockSource+0x1bc>
 800c324:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c328:	f000 8091 	beq.w	800c44e <HAL_TIM_ConfigClockSource+0x1aa>
 800c32c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c330:	f200 8096 	bhi.w	800c460 <HAL_TIM_ConfigClockSource+0x1bc>
 800c334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c338:	f000 8089 	beq.w	800c44e <HAL_TIM_ConfigClockSource+0x1aa>
 800c33c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c340:	f200 808e 	bhi.w	800c460 <HAL_TIM_ConfigClockSource+0x1bc>
 800c344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c348:	d03e      	beq.n	800c3c8 <HAL_TIM_ConfigClockSource+0x124>
 800c34a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c34e:	f200 8087 	bhi.w	800c460 <HAL_TIM_ConfigClockSource+0x1bc>
 800c352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c356:	f000 8086 	beq.w	800c466 <HAL_TIM_ConfigClockSource+0x1c2>
 800c35a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c35e:	d87f      	bhi.n	800c460 <HAL_TIM_ConfigClockSource+0x1bc>
 800c360:	2b70      	cmp	r3, #112	; 0x70
 800c362:	d01a      	beq.n	800c39a <HAL_TIM_ConfigClockSource+0xf6>
 800c364:	2b70      	cmp	r3, #112	; 0x70
 800c366:	d87b      	bhi.n	800c460 <HAL_TIM_ConfigClockSource+0x1bc>
 800c368:	2b60      	cmp	r3, #96	; 0x60
 800c36a:	d050      	beq.n	800c40e <HAL_TIM_ConfigClockSource+0x16a>
 800c36c:	2b60      	cmp	r3, #96	; 0x60
 800c36e:	d877      	bhi.n	800c460 <HAL_TIM_ConfigClockSource+0x1bc>
 800c370:	2b50      	cmp	r3, #80	; 0x50
 800c372:	d03c      	beq.n	800c3ee <HAL_TIM_ConfigClockSource+0x14a>
 800c374:	2b50      	cmp	r3, #80	; 0x50
 800c376:	d873      	bhi.n	800c460 <HAL_TIM_ConfigClockSource+0x1bc>
 800c378:	2b40      	cmp	r3, #64	; 0x40
 800c37a:	d058      	beq.n	800c42e <HAL_TIM_ConfigClockSource+0x18a>
 800c37c:	2b40      	cmp	r3, #64	; 0x40
 800c37e:	d86f      	bhi.n	800c460 <HAL_TIM_ConfigClockSource+0x1bc>
 800c380:	2b30      	cmp	r3, #48	; 0x30
 800c382:	d064      	beq.n	800c44e <HAL_TIM_ConfigClockSource+0x1aa>
 800c384:	2b30      	cmp	r3, #48	; 0x30
 800c386:	d86b      	bhi.n	800c460 <HAL_TIM_ConfigClockSource+0x1bc>
 800c388:	2b20      	cmp	r3, #32
 800c38a:	d060      	beq.n	800c44e <HAL_TIM_ConfigClockSource+0x1aa>
 800c38c:	2b20      	cmp	r3, #32
 800c38e:	d867      	bhi.n	800c460 <HAL_TIM_ConfigClockSource+0x1bc>
 800c390:	2b00      	cmp	r3, #0
 800c392:	d05c      	beq.n	800c44e <HAL_TIM_ConfigClockSource+0x1aa>
 800c394:	2b10      	cmp	r3, #16
 800c396:	d05a      	beq.n	800c44e <HAL_TIM_ConfigClockSource+0x1aa>
 800c398:	e062      	b.n	800c460 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6818      	ldr	r0, [r3, #0]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	6899      	ldr	r1, [r3, #8]
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	685a      	ldr	r2, [r3, #4]
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	f000 fc89 	bl	800ccc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c3b6:	68bb      	ldr	r3, [r7, #8]
 800c3b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c3bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	68ba      	ldr	r2, [r7, #8]
 800c3c4:	609a      	str	r2, [r3, #8]
      break;
 800c3c6:	e04f      	b.n	800c468 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6818      	ldr	r0, [r3, #0]
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	6899      	ldr	r1, [r3, #8]
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	685a      	ldr	r2, [r3, #4]
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	f000 fc72 	bl	800ccc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	689a      	ldr	r2, [r3, #8]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3ea:	609a      	str	r2, [r3, #8]
      break;
 800c3ec:	e03c      	b.n	800c468 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6818      	ldr	r0, [r3, #0]
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	6859      	ldr	r1, [r3, #4]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	461a      	mov	r2, r3
 800c3fc:	f000 fbe2 	bl	800cbc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2150      	movs	r1, #80	; 0x50
 800c406:	4618      	mov	r0, r3
 800c408:	f000 fc3c 	bl	800cc84 <TIM_ITRx_SetConfig>
      break;
 800c40c:	e02c      	b.n	800c468 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6818      	ldr	r0, [r3, #0]
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	6859      	ldr	r1, [r3, #4]
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	461a      	mov	r2, r3
 800c41c:	f000 fc01 	bl	800cc22 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	2160      	movs	r1, #96	; 0x60
 800c426:	4618      	mov	r0, r3
 800c428:	f000 fc2c 	bl	800cc84 <TIM_ITRx_SetConfig>
      break;
 800c42c:	e01c      	b.n	800c468 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6818      	ldr	r0, [r3, #0]
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	6859      	ldr	r1, [r3, #4]
 800c436:	683b      	ldr	r3, [r7, #0]
 800c438:	68db      	ldr	r3, [r3, #12]
 800c43a:	461a      	mov	r2, r3
 800c43c:	f000 fbc2 	bl	800cbc4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2140      	movs	r1, #64	; 0x40
 800c446:	4618      	mov	r0, r3
 800c448:	f000 fc1c 	bl	800cc84 <TIM_ITRx_SetConfig>
      break;
 800c44c:	e00c      	b.n	800c468 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681a      	ldr	r2, [r3, #0]
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	4619      	mov	r1, r3
 800c458:	4610      	mov	r0, r2
 800c45a:	f000 fc13 	bl	800cc84 <TIM_ITRx_SetConfig>
      break;
 800c45e:	e003      	b.n	800c468 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c460:	2301      	movs	r3, #1
 800c462:	73fb      	strb	r3, [r7, #15]
      break;
 800c464:	e000      	b.n	800c468 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c478:	7bfb      	ldrb	r3, [r7, #15]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3710      	adds	r7, #16
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	ffceff88 	.word	0xffceff88
 800c488:	00100040 	.word	0x00100040
 800c48c:	00100030 	.word	0x00100030
 800c490:	00100020 	.word	0x00100020

0800c494 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c49c:	bf00      	nop
 800c49e:	370c      	adds	r7, #12
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a6:	4770      	bx	lr

0800c4a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	b083      	sub	sp, #12
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c4b0:	bf00      	nop
 800c4b2:	370c      	adds	r7, #12
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ba:	4770      	bx	lr

0800c4bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4bc:	b480      	push	{r7}
 800c4be:	b083      	sub	sp, #12
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4c4:	bf00      	nop
 800c4c6:	370c      	adds	r7, #12
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	4a40      	ldr	r2, [pc, #256]	; (800c5f8 <TIM_Base_SetConfig+0x114>)
 800c4f8:	4293      	cmp	r3, r2
 800c4fa:	d013      	beq.n	800c524 <TIM_Base_SetConfig+0x40>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c502:	d00f      	beq.n	800c524 <TIM_Base_SetConfig+0x40>
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	4a3d      	ldr	r2, [pc, #244]	; (800c5fc <TIM_Base_SetConfig+0x118>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d00b      	beq.n	800c524 <TIM_Base_SetConfig+0x40>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	4a3c      	ldr	r2, [pc, #240]	; (800c600 <TIM_Base_SetConfig+0x11c>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d007      	beq.n	800c524 <TIM_Base_SetConfig+0x40>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4a3b      	ldr	r2, [pc, #236]	; (800c604 <TIM_Base_SetConfig+0x120>)
 800c518:	4293      	cmp	r3, r2
 800c51a:	d003      	beq.n	800c524 <TIM_Base_SetConfig+0x40>
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	4a3a      	ldr	r2, [pc, #232]	; (800c608 <TIM_Base_SetConfig+0x124>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d108      	bne.n	800c536 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c52a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	68fa      	ldr	r2, [r7, #12]
 800c532:	4313      	orrs	r3, r2
 800c534:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4a2f      	ldr	r2, [pc, #188]	; (800c5f8 <TIM_Base_SetConfig+0x114>)
 800c53a:	4293      	cmp	r3, r2
 800c53c:	d01f      	beq.n	800c57e <TIM_Base_SetConfig+0x9a>
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c544:	d01b      	beq.n	800c57e <TIM_Base_SetConfig+0x9a>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4a2c      	ldr	r2, [pc, #176]	; (800c5fc <TIM_Base_SetConfig+0x118>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d017      	beq.n	800c57e <TIM_Base_SetConfig+0x9a>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a2b      	ldr	r2, [pc, #172]	; (800c600 <TIM_Base_SetConfig+0x11c>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d013      	beq.n	800c57e <TIM_Base_SetConfig+0x9a>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4a2a      	ldr	r2, [pc, #168]	; (800c604 <TIM_Base_SetConfig+0x120>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d00f      	beq.n	800c57e <TIM_Base_SetConfig+0x9a>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4a29      	ldr	r2, [pc, #164]	; (800c608 <TIM_Base_SetConfig+0x124>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d00b      	beq.n	800c57e <TIM_Base_SetConfig+0x9a>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4a28      	ldr	r2, [pc, #160]	; (800c60c <TIM_Base_SetConfig+0x128>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d007      	beq.n	800c57e <TIM_Base_SetConfig+0x9a>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4a27      	ldr	r2, [pc, #156]	; (800c610 <TIM_Base_SetConfig+0x12c>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d003      	beq.n	800c57e <TIM_Base_SetConfig+0x9a>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	4a26      	ldr	r2, [pc, #152]	; (800c614 <TIM_Base_SetConfig+0x130>)
 800c57a:	4293      	cmp	r3, r2
 800c57c:	d108      	bne.n	800c590 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	68db      	ldr	r3, [r3, #12]
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	4313      	orrs	r3, r2
 800c58e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	695b      	ldr	r3, [r3, #20]
 800c59a:	4313      	orrs	r3, r2
 800c59c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	68fa      	ldr	r2, [r7, #12]
 800c5a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	689a      	ldr	r2, [r3, #8]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	4a10      	ldr	r2, [pc, #64]	; (800c5f8 <TIM_Base_SetConfig+0x114>)
 800c5b8:	4293      	cmp	r3, r2
 800c5ba:	d00f      	beq.n	800c5dc <TIM_Base_SetConfig+0xf8>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a12      	ldr	r2, [pc, #72]	; (800c608 <TIM_Base_SetConfig+0x124>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d00b      	beq.n	800c5dc <TIM_Base_SetConfig+0xf8>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	4a11      	ldr	r2, [pc, #68]	; (800c60c <TIM_Base_SetConfig+0x128>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d007      	beq.n	800c5dc <TIM_Base_SetConfig+0xf8>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4a10      	ldr	r2, [pc, #64]	; (800c610 <TIM_Base_SetConfig+0x12c>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d003      	beq.n	800c5dc <TIM_Base_SetConfig+0xf8>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4a0f      	ldr	r2, [pc, #60]	; (800c614 <TIM_Base_SetConfig+0x130>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d103      	bne.n	800c5e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5dc:	683b      	ldr	r3, [r7, #0]
 800c5de:	691a      	ldr	r2, [r3, #16]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	615a      	str	r2, [r3, #20]
}
 800c5ea:	bf00      	nop
 800c5ec:	3714      	adds	r7, #20
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop
 800c5f8:	40010000 	.word	0x40010000
 800c5fc:	40000400 	.word	0x40000400
 800c600:	40000800 	.word	0x40000800
 800c604:	40000c00 	.word	0x40000c00
 800c608:	40010400 	.word	0x40010400
 800c60c:	40014000 	.word	0x40014000
 800c610:	40014400 	.word	0x40014400
 800c614:	40014800 	.word	0x40014800

0800c618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c618:	b480      	push	{r7}
 800c61a:	b087      	sub	sp, #28
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6a1b      	ldr	r3, [r3, #32]
 800c626:	f023 0201 	bic.w	r2, r3, #1
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6a1b      	ldr	r3, [r3, #32]
 800c632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	699b      	ldr	r3, [r3, #24]
 800c63e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	4b37      	ldr	r3, [pc, #220]	; (800c720 <TIM_OC1_SetConfig+0x108>)
 800c644:	4013      	ands	r3, r2
 800c646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	f023 0303 	bic.w	r3, r3, #3
 800c64e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	68fa      	ldr	r2, [r7, #12]
 800c656:	4313      	orrs	r3, r2
 800c658:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	f023 0302 	bic.w	r3, r3, #2
 800c660:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	697a      	ldr	r2, [r7, #20]
 800c668:	4313      	orrs	r3, r2
 800c66a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	4a2d      	ldr	r2, [pc, #180]	; (800c724 <TIM_OC1_SetConfig+0x10c>)
 800c670:	4293      	cmp	r3, r2
 800c672:	d00f      	beq.n	800c694 <TIM_OC1_SetConfig+0x7c>
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	4a2c      	ldr	r2, [pc, #176]	; (800c728 <TIM_OC1_SetConfig+0x110>)
 800c678:	4293      	cmp	r3, r2
 800c67a:	d00b      	beq.n	800c694 <TIM_OC1_SetConfig+0x7c>
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	4a2b      	ldr	r2, [pc, #172]	; (800c72c <TIM_OC1_SetConfig+0x114>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d007      	beq.n	800c694 <TIM_OC1_SetConfig+0x7c>
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	4a2a      	ldr	r2, [pc, #168]	; (800c730 <TIM_OC1_SetConfig+0x118>)
 800c688:	4293      	cmp	r3, r2
 800c68a:	d003      	beq.n	800c694 <TIM_OC1_SetConfig+0x7c>
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4a29      	ldr	r2, [pc, #164]	; (800c734 <TIM_OC1_SetConfig+0x11c>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d10c      	bne.n	800c6ae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	f023 0308 	bic.w	r3, r3, #8
 800c69a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	68db      	ldr	r3, [r3, #12]
 800c6a0:	697a      	ldr	r2, [r7, #20]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c6a6:	697b      	ldr	r3, [r7, #20]
 800c6a8:	f023 0304 	bic.w	r3, r3, #4
 800c6ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	4a1c      	ldr	r2, [pc, #112]	; (800c724 <TIM_OC1_SetConfig+0x10c>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d00f      	beq.n	800c6d6 <TIM_OC1_SetConfig+0xbe>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4a1b      	ldr	r2, [pc, #108]	; (800c728 <TIM_OC1_SetConfig+0x110>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d00b      	beq.n	800c6d6 <TIM_OC1_SetConfig+0xbe>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4a1a      	ldr	r2, [pc, #104]	; (800c72c <TIM_OC1_SetConfig+0x114>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d007      	beq.n	800c6d6 <TIM_OC1_SetConfig+0xbe>
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	4a19      	ldr	r2, [pc, #100]	; (800c730 <TIM_OC1_SetConfig+0x118>)
 800c6ca:	4293      	cmp	r3, r2
 800c6cc:	d003      	beq.n	800c6d6 <TIM_OC1_SetConfig+0xbe>
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	4a18      	ldr	r2, [pc, #96]	; (800c734 <TIM_OC1_SetConfig+0x11c>)
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	d111      	bne.n	800c6fa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c6dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c6e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	695b      	ldr	r3, [r3, #20]
 800c6ea:	693a      	ldr	r2, [r7, #16]
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	699b      	ldr	r3, [r3, #24]
 800c6f4:	693a      	ldr	r2, [r7, #16]
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	693a      	ldr	r2, [r7, #16]
 800c6fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	68fa      	ldr	r2, [r7, #12]
 800c704:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	685a      	ldr	r2, [r3, #4]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	697a      	ldr	r2, [r7, #20]
 800c712:	621a      	str	r2, [r3, #32]
}
 800c714:	bf00      	nop
 800c716:	371c      	adds	r7, #28
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr
 800c720:	fffeff8f 	.word	0xfffeff8f
 800c724:	40010000 	.word	0x40010000
 800c728:	40010400 	.word	0x40010400
 800c72c:	40014000 	.word	0x40014000
 800c730:	40014400 	.word	0x40014400
 800c734:	40014800 	.word	0x40014800

0800c738 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c738:	b480      	push	{r7}
 800c73a:	b087      	sub	sp, #28
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6a1b      	ldr	r3, [r3, #32]
 800c746:	f023 0210 	bic.w	r2, r3, #16
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6a1b      	ldr	r3, [r3, #32]
 800c752:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	699b      	ldr	r3, [r3, #24]
 800c75e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c760:	68fa      	ldr	r2, [r7, #12]
 800c762:	4b34      	ldr	r3, [pc, #208]	; (800c834 <TIM_OC2_SetConfig+0xfc>)
 800c764:	4013      	ands	r3, r2
 800c766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c76e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	021b      	lsls	r3, r3, #8
 800c776:	68fa      	ldr	r2, [r7, #12]
 800c778:	4313      	orrs	r3, r2
 800c77a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	f023 0320 	bic.w	r3, r3, #32
 800c782:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	011b      	lsls	r3, r3, #4
 800c78a:	697a      	ldr	r2, [r7, #20]
 800c78c:	4313      	orrs	r3, r2
 800c78e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4a29      	ldr	r2, [pc, #164]	; (800c838 <TIM_OC2_SetConfig+0x100>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d003      	beq.n	800c7a0 <TIM_OC2_SetConfig+0x68>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4a28      	ldr	r2, [pc, #160]	; (800c83c <TIM_OC2_SetConfig+0x104>)
 800c79c:	4293      	cmp	r3, r2
 800c79e:	d10d      	bne.n	800c7bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c7a0:	697b      	ldr	r3, [r7, #20]
 800c7a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c7a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	68db      	ldr	r3, [r3, #12]
 800c7ac:	011b      	lsls	r3, r3, #4
 800c7ae:	697a      	ldr	r2, [r7, #20]
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	4a1e      	ldr	r2, [pc, #120]	; (800c838 <TIM_OC2_SetConfig+0x100>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d00f      	beq.n	800c7e4 <TIM_OC2_SetConfig+0xac>
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4a1d      	ldr	r2, [pc, #116]	; (800c83c <TIM_OC2_SetConfig+0x104>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	d00b      	beq.n	800c7e4 <TIM_OC2_SetConfig+0xac>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	4a1c      	ldr	r2, [pc, #112]	; (800c840 <TIM_OC2_SetConfig+0x108>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	d007      	beq.n	800c7e4 <TIM_OC2_SetConfig+0xac>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	4a1b      	ldr	r2, [pc, #108]	; (800c844 <TIM_OC2_SetConfig+0x10c>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d003      	beq.n	800c7e4 <TIM_OC2_SetConfig+0xac>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	4a1a      	ldr	r2, [pc, #104]	; (800c848 <TIM_OC2_SetConfig+0x110>)
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	d113      	bne.n	800c80c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c7e4:	693b      	ldr	r3, [r7, #16]
 800c7e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c7ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c7ec:	693b      	ldr	r3, [r7, #16]
 800c7ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c7f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	695b      	ldr	r3, [r3, #20]
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	693a      	ldr	r2, [r7, #16]
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	699b      	ldr	r3, [r3, #24]
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	693a      	ldr	r2, [r7, #16]
 800c808:	4313      	orrs	r3, r2
 800c80a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	693a      	ldr	r2, [r7, #16]
 800c810:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	685a      	ldr	r2, [r3, #4]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	697a      	ldr	r2, [r7, #20]
 800c824:	621a      	str	r2, [r3, #32]
}
 800c826:	bf00      	nop
 800c828:	371c      	adds	r7, #28
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr
 800c832:	bf00      	nop
 800c834:	feff8fff 	.word	0xfeff8fff
 800c838:	40010000 	.word	0x40010000
 800c83c:	40010400 	.word	0x40010400
 800c840:	40014000 	.word	0x40014000
 800c844:	40014400 	.word	0x40014400
 800c848:	40014800 	.word	0x40014800

0800c84c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b087      	sub	sp, #28
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6a1b      	ldr	r3, [r3, #32]
 800c85a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6a1b      	ldr	r3, [r3, #32]
 800c866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	69db      	ldr	r3, [r3, #28]
 800c872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c874:	68fa      	ldr	r2, [r7, #12]
 800c876:	4b33      	ldr	r3, [pc, #204]	; (800c944 <TIM_OC3_SetConfig+0xf8>)
 800c878:	4013      	ands	r3, r2
 800c87a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	f023 0303 	bic.w	r3, r3, #3
 800c882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	68fa      	ldr	r2, [r7, #12]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c88e:	697b      	ldr	r3, [r7, #20]
 800c890:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	689b      	ldr	r3, [r3, #8]
 800c89a:	021b      	lsls	r3, r3, #8
 800c89c:	697a      	ldr	r2, [r7, #20]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	4a28      	ldr	r2, [pc, #160]	; (800c948 <TIM_OC3_SetConfig+0xfc>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d003      	beq.n	800c8b2 <TIM_OC3_SetConfig+0x66>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	4a27      	ldr	r2, [pc, #156]	; (800c94c <TIM_OC3_SetConfig+0x100>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d10d      	bne.n	800c8ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c8b2:	697b      	ldr	r3, [r7, #20]
 800c8b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	021b      	lsls	r3, r3, #8
 800c8c0:	697a      	ldr	r2, [r7, #20]
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c8cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	4a1d      	ldr	r2, [pc, #116]	; (800c948 <TIM_OC3_SetConfig+0xfc>)
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	d00f      	beq.n	800c8f6 <TIM_OC3_SetConfig+0xaa>
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	4a1c      	ldr	r2, [pc, #112]	; (800c94c <TIM_OC3_SetConfig+0x100>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d00b      	beq.n	800c8f6 <TIM_OC3_SetConfig+0xaa>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	4a1b      	ldr	r2, [pc, #108]	; (800c950 <TIM_OC3_SetConfig+0x104>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d007      	beq.n	800c8f6 <TIM_OC3_SetConfig+0xaa>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	4a1a      	ldr	r2, [pc, #104]	; (800c954 <TIM_OC3_SetConfig+0x108>)
 800c8ea:	4293      	cmp	r3, r2
 800c8ec:	d003      	beq.n	800c8f6 <TIM_OC3_SetConfig+0xaa>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4a19      	ldr	r2, [pc, #100]	; (800c958 <TIM_OC3_SetConfig+0x10c>)
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d113      	bne.n	800c91e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	695b      	ldr	r3, [r3, #20]
 800c90a:	011b      	lsls	r3, r3, #4
 800c90c:	693a      	ldr	r2, [r7, #16]
 800c90e:	4313      	orrs	r3, r2
 800c910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	699b      	ldr	r3, [r3, #24]
 800c916:	011b      	lsls	r3, r3, #4
 800c918:	693a      	ldr	r2, [r7, #16]
 800c91a:	4313      	orrs	r3, r2
 800c91c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	693a      	ldr	r2, [r7, #16]
 800c922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	685a      	ldr	r2, [r3, #4]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	697a      	ldr	r2, [r7, #20]
 800c936:	621a      	str	r2, [r3, #32]
}
 800c938:	bf00      	nop
 800c93a:	371c      	adds	r7, #28
 800c93c:	46bd      	mov	sp, r7
 800c93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c942:	4770      	bx	lr
 800c944:	fffeff8f 	.word	0xfffeff8f
 800c948:	40010000 	.word	0x40010000
 800c94c:	40010400 	.word	0x40010400
 800c950:	40014000 	.word	0x40014000
 800c954:	40014400 	.word	0x40014400
 800c958:	40014800 	.word	0x40014800

0800c95c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b087      	sub	sp, #28
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
 800c964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6a1b      	ldr	r3, [r3, #32]
 800c96a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6a1b      	ldr	r3, [r3, #32]
 800c976:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	69db      	ldr	r3, [r3, #28]
 800c982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c984:	68fa      	ldr	r2, [r7, #12]
 800c986:	4b24      	ldr	r3, [pc, #144]	; (800ca18 <TIM_OC4_SetConfig+0xbc>)
 800c988:	4013      	ands	r3, r2
 800c98a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	021b      	lsls	r3, r3, #8
 800c99a:	68fa      	ldr	r2, [r7, #12]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c9a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	689b      	ldr	r3, [r3, #8]
 800c9ac:	031b      	lsls	r3, r3, #12
 800c9ae:	693a      	ldr	r2, [r7, #16]
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4a19      	ldr	r2, [pc, #100]	; (800ca1c <TIM_OC4_SetConfig+0xc0>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d00f      	beq.n	800c9dc <TIM_OC4_SetConfig+0x80>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4a18      	ldr	r2, [pc, #96]	; (800ca20 <TIM_OC4_SetConfig+0xc4>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d00b      	beq.n	800c9dc <TIM_OC4_SetConfig+0x80>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4a17      	ldr	r2, [pc, #92]	; (800ca24 <TIM_OC4_SetConfig+0xc8>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d007      	beq.n	800c9dc <TIM_OC4_SetConfig+0x80>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4a16      	ldr	r2, [pc, #88]	; (800ca28 <TIM_OC4_SetConfig+0xcc>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d003      	beq.n	800c9dc <TIM_OC4_SetConfig+0x80>
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	4a15      	ldr	r2, [pc, #84]	; (800ca2c <TIM_OC4_SetConfig+0xd0>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d109      	bne.n	800c9f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c9e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	695b      	ldr	r3, [r3, #20]
 800c9e8:	019b      	lsls	r3, r3, #6
 800c9ea:	697a      	ldr	r2, [r7, #20]
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	697a      	ldr	r2, [r7, #20]
 800c9f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	693a      	ldr	r2, [r7, #16]
 800ca08:	621a      	str	r2, [r3, #32]
}
 800ca0a:	bf00      	nop
 800ca0c:	371c      	adds	r7, #28
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca14:	4770      	bx	lr
 800ca16:	bf00      	nop
 800ca18:	feff8fff 	.word	0xfeff8fff
 800ca1c:	40010000 	.word	0x40010000
 800ca20:	40010400 	.word	0x40010400
 800ca24:	40014000 	.word	0x40014000
 800ca28:	40014400 	.word	0x40014400
 800ca2c:	40014800 	.word	0x40014800

0800ca30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b087      	sub	sp, #28
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a1b      	ldr	r3, [r3, #32]
 800ca3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a1b      	ldr	r3, [r3, #32]
 800ca4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	685b      	ldr	r3, [r3, #4]
 800ca50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	4b21      	ldr	r3, [pc, #132]	; (800cae0 <TIM_OC5_SetConfig+0xb0>)
 800ca5c:	4013      	ands	r3, r2
 800ca5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	68fa      	ldr	r2, [r7, #12]
 800ca66:	4313      	orrs	r3, r2
 800ca68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ca70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ca72:	683b      	ldr	r3, [r7, #0]
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	041b      	lsls	r3, r3, #16
 800ca78:	693a      	ldr	r2, [r7, #16]
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	4a18      	ldr	r2, [pc, #96]	; (800cae4 <TIM_OC5_SetConfig+0xb4>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d00f      	beq.n	800caa6 <TIM_OC5_SetConfig+0x76>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	4a17      	ldr	r2, [pc, #92]	; (800cae8 <TIM_OC5_SetConfig+0xb8>)
 800ca8a:	4293      	cmp	r3, r2
 800ca8c:	d00b      	beq.n	800caa6 <TIM_OC5_SetConfig+0x76>
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4a16      	ldr	r2, [pc, #88]	; (800caec <TIM_OC5_SetConfig+0xbc>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d007      	beq.n	800caa6 <TIM_OC5_SetConfig+0x76>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4a15      	ldr	r2, [pc, #84]	; (800caf0 <TIM_OC5_SetConfig+0xc0>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d003      	beq.n	800caa6 <TIM_OC5_SetConfig+0x76>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4a14      	ldr	r2, [pc, #80]	; (800caf4 <TIM_OC5_SetConfig+0xc4>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d109      	bne.n	800caba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800caac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	695b      	ldr	r3, [r3, #20]
 800cab2:	021b      	lsls	r3, r3, #8
 800cab4:	697a      	ldr	r2, [r7, #20]
 800cab6:	4313      	orrs	r3, r2
 800cab8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	697a      	ldr	r2, [r7, #20]
 800cabe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	68fa      	ldr	r2, [r7, #12]
 800cac4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	685a      	ldr	r2, [r3, #4]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	693a      	ldr	r2, [r7, #16]
 800cad2:	621a      	str	r2, [r3, #32]
}
 800cad4:	bf00      	nop
 800cad6:	371c      	adds	r7, #28
 800cad8:	46bd      	mov	sp, r7
 800cada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cade:	4770      	bx	lr
 800cae0:	fffeff8f 	.word	0xfffeff8f
 800cae4:	40010000 	.word	0x40010000
 800cae8:	40010400 	.word	0x40010400
 800caec:	40014000 	.word	0x40014000
 800caf0:	40014400 	.word	0x40014400
 800caf4:	40014800 	.word	0x40014800

0800caf8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800caf8:	b480      	push	{r7}
 800cafa:	b087      	sub	sp, #28
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
 800cb00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a1b      	ldr	r3, [r3, #32]
 800cb06:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6a1b      	ldr	r3, [r3, #32]
 800cb12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cb20:	68fa      	ldr	r2, [r7, #12]
 800cb22:	4b22      	ldr	r3, [pc, #136]	; (800cbac <TIM_OC6_SetConfig+0xb4>)
 800cb24:	4013      	ands	r3, r2
 800cb26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	021b      	lsls	r3, r3, #8
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	4313      	orrs	r3, r2
 800cb32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	051b      	lsls	r3, r3, #20
 800cb42:	693a      	ldr	r2, [r7, #16]
 800cb44:	4313      	orrs	r3, r2
 800cb46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a19      	ldr	r2, [pc, #100]	; (800cbb0 <TIM_OC6_SetConfig+0xb8>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d00f      	beq.n	800cb70 <TIM_OC6_SetConfig+0x78>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	4a18      	ldr	r2, [pc, #96]	; (800cbb4 <TIM_OC6_SetConfig+0xbc>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d00b      	beq.n	800cb70 <TIM_OC6_SetConfig+0x78>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	4a17      	ldr	r2, [pc, #92]	; (800cbb8 <TIM_OC6_SetConfig+0xc0>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d007      	beq.n	800cb70 <TIM_OC6_SetConfig+0x78>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4a16      	ldr	r2, [pc, #88]	; (800cbbc <TIM_OC6_SetConfig+0xc4>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d003      	beq.n	800cb70 <TIM_OC6_SetConfig+0x78>
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	4a15      	ldr	r2, [pc, #84]	; (800cbc0 <TIM_OC6_SetConfig+0xc8>)
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	d109      	bne.n	800cb84 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cb76:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	695b      	ldr	r3, [r3, #20]
 800cb7c:	029b      	lsls	r3, r3, #10
 800cb7e:	697a      	ldr	r2, [r7, #20]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	697a      	ldr	r2, [r7, #20]
 800cb88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	68fa      	ldr	r2, [r7, #12]
 800cb8e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	685a      	ldr	r2, [r3, #4]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	693a      	ldr	r2, [r7, #16]
 800cb9c:	621a      	str	r2, [r3, #32]
}
 800cb9e:	bf00      	nop
 800cba0:	371c      	adds	r7, #28
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop
 800cbac:	feff8fff 	.word	0xfeff8fff
 800cbb0:	40010000 	.word	0x40010000
 800cbb4:	40010400 	.word	0x40010400
 800cbb8:	40014000 	.word	0x40014000
 800cbbc:	40014400 	.word	0x40014400
 800cbc0:	40014800 	.word	0x40014800

0800cbc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b087      	sub	sp, #28
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	60f8      	str	r0, [r7, #12]
 800cbcc:	60b9      	str	r1, [r7, #8]
 800cbce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	6a1b      	ldr	r3, [r3, #32]
 800cbd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6a1b      	ldr	r3, [r3, #32]
 800cbda:	f023 0201 	bic.w	r2, r3, #1
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	699b      	ldr	r3, [r3, #24]
 800cbe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cbee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	011b      	lsls	r3, r3, #4
 800cbf4:	693a      	ldr	r2, [r7, #16]
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	f023 030a 	bic.w	r3, r3, #10
 800cc00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc02:	697a      	ldr	r2, [r7, #20]
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	4313      	orrs	r3, r2
 800cc08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	693a      	ldr	r2, [r7, #16]
 800cc0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	697a      	ldr	r2, [r7, #20]
 800cc14:	621a      	str	r2, [r3, #32]
}
 800cc16:	bf00      	nop
 800cc18:	371c      	adds	r7, #28
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr

0800cc22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc22:	b480      	push	{r7}
 800cc24:	b087      	sub	sp, #28
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	60f8      	str	r0, [r7, #12]
 800cc2a:	60b9      	str	r1, [r7, #8]
 800cc2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	6a1b      	ldr	r3, [r3, #32]
 800cc32:	f023 0210 	bic.w	r2, r3, #16
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	699b      	ldr	r3, [r3, #24]
 800cc3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6a1b      	ldr	r3, [r3, #32]
 800cc44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	031b      	lsls	r3, r3, #12
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	4313      	orrs	r3, r2
 800cc56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	011b      	lsls	r3, r3, #4
 800cc64:	693a      	ldr	r2, [r7, #16]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	697a      	ldr	r2, [r7, #20]
 800cc6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	693a      	ldr	r2, [r7, #16]
 800cc74:	621a      	str	r2, [r3, #32]
}
 800cc76:	bf00      	nop
 800cc78:	371c      	adds	r7, #28
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc80:	4770      	bx	lr
	...

0800cc84 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b085      	sub	sp, #20
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	4b09      	ldr	r3, [pc, #36]	; (800ccbc <TIM_ITRx_SetConfig+0x38>)
 800cc98:	4013      	ands	r3, r2
 800cc9a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc9c:	683a      	ldr	r2, [r7, #0]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	4313      	orrs	r3, r2
 800cca2:	f043 0307 	orr.w	r3, r3, #7
 800cca6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	68fa      	ldr	r2, [r7, #12]
 800ccac:	609a      	str	r2, [r3, #8]
}
 800ccae:	bf00      	nop
 800ccb0:	3714      	adds	r7, #20
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr
 800ccba:	bf00      	nop
 800ccbc:	ffcfff8f 	.word	0xffcfff8f

0800ccc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b087      	sub	sp, #28
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	607a      	str	r2, [r7, #4]
 800cccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	689b      	ldr	r3, [r3, #8]
 800ccd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ccda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	021a      	lsls	r2, r3, #8
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	431a      	orrs	r2, r3
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	4313      	orrs	r3, r2
 800cce8:	697a      	ldr	r2, [r7, #20]
 800ccea:	4313      	orrs	r3, r2
 800ccec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	697a      	ldr	r2, [r7, #20]
 800ccf2:	609a      	str	r2, [r3, #8]
}
 800ccf4:	bf00      	nop
 800ccf6:	371c      	adds	r7, #28
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr

0800cd00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b087      	sub	sp, #28
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd0c:	68bb      	ldr	r3, [r7, #8]
 800cd0e:	f003 031f 	and.w	r3, r3, #31
 800cd12:	2201      	movs	r2, #1
 800cd14:	fa02 f303 	lsl.w	r3, r2, r3
 800cd18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	6a1a      	ldr	r2, [r3, #32]
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	43db      	mvns	r3, r3
 800cd22:	401a      	ands	r2, r3
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	6a1a      	ldr	r2, [r3, #32]
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	f003 031f 	and.w	r3, r3, #31
 800cd32:	6879      	ldr	r1, [r7, #4]
 800cd34:	fa01 f303 	lsl.w	r3, r1, r3
 800cd38:	431a      	orrs	r2, r3
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	621a      	str	r2, [r3, #32]
}
 800cd3e:	bf00      	nop
 800cd40:	371c      	adds	r7, #28
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr
	...

0800cd4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b085      	sub	sp, #20
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d101      	bne.n	800cd64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd60:	2302      	movs	r3, #2
 800cd62:	e06d      	b.n	800ce40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2201      	movs	r2, #1
 800cd68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2202      	movs	r2, #2
 800cd70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	689b      	ldr	r3, [r3, #8]
 800cd82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a30      	ldr	r2, [pc, #192]	; (800ce4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d004      	beq.n	800cd98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a2f      	ldr	r2, [pc, #188]	; (800ce50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d108      	bne.n	800cdaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cd9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	68fa      	ldr	r2, [r7, #12]
 800cda6:	4313      	orrs	r3, r2
 800cda8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	68fa      	ldr	r2, [r7, #12]
 800cdc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a20      	ldr	r2, [pc, #128]	; (800ce4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d022      	beq.n	800ce14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdd6:	d01d      	beq.n	800ce14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a1d      	ldr	r2, [pc, #116]	; (800ce54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d018      	beq.n	800ce14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a1c      	ldr	r2, [pc, #112]	; (800ce58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	d013      	beq.n	800ce14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a1a      	ldr	r2, [pc, #104]	; (800ce5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d00e      	beq.n	800ce14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4a15      	ldr	r2, [pc, #84]	; (800ce50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d009      	beq.n	800ce14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a16      	ldr	r2, [pc, #88]	; (800ce60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d004      	beq.n	800ce14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	4a15      	ldr	r2, [pc, #84]	; (800ce64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d10c      	bne.n	800ce2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	68ba      	ldr	r2, [r7, #8]
 800ce22:	4313      	orrs	r3, r2
 800ce24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	68ba      	ldr	r2, [r7, #8]
 800ce2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2201      	movs	r2, #1
 800ce32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce3e:	2300      	movs	r3, #0
}
 800ce40:	4618      	mov	r0, r3
 800ce42:	3714      	adds	r7, #20
 800ce44:	46bd      	mov	sp, r7
 800ce46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4a:	4770      	bx	lr
 800ce4c:	40010000 	.word	0x40010000
 800ce50:	40010400 	.word	0x40010400
 800ce54:	40000400 	.word	0x40000400
 800ce58:	40000800 	.word	0x40000800
 800ce5c:	40000c00 	.word	0x40000c00
 800ce60:	40001800 	.word	0x40001800
 800ce64:	40014000 	.word	0x40014000

0800ce68 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ce72:	2300      	movs	r3, #0
 800ce74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce7c:	2b01      	cmp	r3, #1
 800ce7e:	d101      	bne.n	800ce84 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ce80:	2302      	movs	r3, #2
 800ce82:	e065      	b.n	800cf50 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2201      	movs	r2, #1
 800ce88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	68db      	ldr	r3, [r3, #12]
 800ce96:	4313      	orrs	r3, r2
 800ce98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	4313      	orrs	r3, r2
 800cea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4313      	orrs	r3, r2
 800cec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	691b      	ldr	r3, [r3, #16]
 800cece:	4313      	orrs	r3, r2
 800ced0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	695b      	ldr	r3, [r3, #20]
 800cedc:	4313      	orrs	r3, r2
 800cede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceea:	4313      	orrs	r3, r2
 800ceec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	699b      	ldr	r3, [r3, #24]
 800cef8:	041b      	lsls	r3, r3, #16
 800cefa:	4313      	orrs	r3, r2
 800cefc:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	4a16      	ldr	r2, [pc, #88]	; (800cf5c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cf04:	4293      	cmp	r3, r2
 800cf06:	d004      	beq.n	800cf12 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a14      	ldr	r2, [pc, #80]	; (800cf60 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d115      	bne.n	800cf3e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf1c:	051b      	lsls	r3, r3, #20
 800cf1e:	4313      	orrs	r3, r2
 800cf20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	69db      	ldr	r3, [r3, #28]
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cf36:	683b      	ldr	r3, [r7, #0]
 800cf38:	6a1b      	ldr	r3, [r3, #32]
 800cf3a:	4313      	orrs	r3, r2
 800cf3c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	68fa      	ldr	r2, [r7, #12]
 800cf44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf4e:	2300      	movs	r3, #0
}
 800cf50:	4618      	mov	r0, r3
 800cf52:	3714      	adds	r7, #20
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr
 800cf5c:	40010000 	.word	0x40010000
 800cf60:	40010400 	.word	0x40010400

0800cf64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf6c:	bf00      	nop
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf80:	bf00      	nop
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cf94:	bf00      	nop
 800cf96:	370c      	adds	r7, #12
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr

0800cfa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d101      	bne.n	800cfb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	e042      	b.n	800d038 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d106      	bne.n	800cfca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f7f8 fa21 	bl	800540c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2224      	movs	r2, #36	; 0x24
 800cfce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f022 0201 	bic.w	r2, r2, #1
 800cfe0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 fdee 	bl	800dbc4 <UART_SetConfig>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d101      	bne.n	800cff2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	e022      	b.n	800d038 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d002      	beq.n	800d000 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f001 fb42 	bl	800e684 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	685a      	ldr	r2, [r3, #4]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d00e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	689a      	ldr	r2, [r3, #8]
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d01e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	681a      	ldr	r2, [r3, #0]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	f042 0201 	orr.w	r2, r2, #1
 800d02e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f001 fbc9 	bl	800e7c8 <UART_CheckIdleState>
 800d036:	4603      	mov	r3, r0
}
 800d038:	4618      	mov	r0, r3
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b08a      	sub	sp, #40	; 0x28
 800d044:	af02      	add	r7, sp, #8
 800d046:	60f8      	str	r0, [r7, #12]
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	603b      	str	r3, [r7, #0]
 800d04c:	4613      	mov	r3, r2
 800d04e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d056:	2b20      	cmp	r3, #32
 800d058:	f040 8083 	bne.w	800d162 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d002      	beq.n	800d068 <HAL_UART_Transmit+0x28>
 800d062:	88fb      	ldrh	r3, [r7, #6]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d101      	bne.n	800d06c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d068:	2301      	movs	r3, #1
 800d06a:	e07b      	b.n	800d164 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d072:	2b01      	cmp	r3, #1
 800d074:	d101      	bne.n	800d07a <HAL_UART_Transmit+0x3a>
 800d076:	2302      	movs	r3, #2
 800d078:	e074      	b.n	800d164 <HAL_UART_Transmit+0x124>
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2201      	movs	r2, #1
 800d07e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2200      	movs	r2, #0
 800d086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2221      	movs	r2, #33	; 0x21
 800d08e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d092:	f7f8 fca1 	bl	80059d8 <HAL_GetTick>
 800d096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	88fa      	ldrh	r2, [r7, #6]
 800d09c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	88fa      	ldrh	r2, [r7, #6]
 800d0a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	689b      	ldr	r3, [r3, #8]
 800d0ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d0b0:	d108      	bne.n	800d0c4 <HAL_UART_Transmit+0x84>
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	691b      	ldr	r3, [r3, #16]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d104      	bne.n	800d0c4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	61bb      	str	r3, [r7, #24]
 800d0c2:	e003      	b.n	800d0cc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800d0d4:	e02c      	b.n	800d130 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	9300      	str	r3, [sp, #0]
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	2200      	movs	r2, #0
 800d0de:	2180      	movs	r1, #128	; 0x80
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f001 fbbc 	bl	800e85e <UART_WaitOnFlagUntilTimeout>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d001      	beq.n	800d0f0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800d0ec:	2303      	movs	r3, #3
 800d0ee:	e039      	b.n	800d164 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800d0f0:	69fb      	ldr	r3, [r7, #28]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d10b      	bne.n	800d10e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d0f6:	69bb      	ldr	r3, [r7, #24]
 800d0f8:	881b      	ldrh	r3, [r3, #0]
 800d0fa:	461a      	mov	r2, r3
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d104:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	3302      	adds	r3, #2
 800d10a:	61bb      	str	r3, [r7, #24]
 800d10c:	e007      	b.n	800d11e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d10e:	69fb      	ldr	r3, [r7, #28]
 800d110:	781a      	ldrb	r2, [r3, #0]
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	3301      	adds	r3, #1
 800d11c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d124:	b29b      	uxth	r3, r3
 800d126:	3b01      	subs	r3, #1
 800d128:	b29a      	uxth	r2, r3
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800d136:	b29b      	uxth	r3, r3
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d1cc      	bne.n	800d0d6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	9300      	str	r3, [sp, #0]
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	2200      	movs	r2, #0
 800d144:	2140      	movs	r1, #64	; 0x40
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	f001 fb89 	bl	800e85e <UART_WaitOnFlagUntilTimeout>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d001      	beq.n	800d156 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800d152:	2303      	movs	r3, #3
 800d154:	e006      	b.n	800d164 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2220      	movs	r2, #32
 800d15a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800d15e:	2300      	movs	r3, #0
 800d160:	e000      	b.n	800d164 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800d162:	2302      	movs	r3, #2
  }
}
 800d164:	4618      	mov	r0, r3
 800d166:	3720      	adds	r7, #32
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b08a      	sub	sp, #40	; 0x28
 800d170:	af02      	add	r7, sp, #8
 800d172:	60f8      	str	r0, [r7, #12]
 800d174:	60b9      	str	r1, [r7, #8]
 800d176:	603b      	str	r3, [r7, #0]
 800d178:	4613      	mov	r3, r2
 800d17a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d182:	2b20      	cmp	r3, #32
 800d184:	f040 80c0 	bne.w	800d308 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <HAL_UART_Receive+0x28>
 800d18e:	88fb      	ldrh	r3, [r7, #6]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d101      	bne.n	800d198 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800d194:	2301      	movs	r3, #1
 800d196:	e0b8      	b.n	800d30a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d19e:	2b01      	cmp	r3, #1
 800d1a0:	d101      	bne.n	800d1a6 <HAL_UART_Receive+0x3a>
 800d1a2:	2302      	movs	r3, #2
 800d1a4:	e0b1      	b.n	800d30a <HAL_UART_Receive+0x19e>
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2201      	movs	r2, #1
 800d1aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2200      	movs	r2, #0
 800d1b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	2222      	movs	r2, #34	; 0x22
 800d1ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d1c4:	f7f8 fc08 	bl	80059d8 <HAL_GetTick>
 800d1c8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	88fa      	ldrh	r2, [r7, #6]
 800d1ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	88fa      	ldrh	r2, [r7, #6]
 800d1d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	689b      	ldr	r3, [r3, #8]
 800d1de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1e2:	d10e      	bne.n	800d202 <HAL_UART_Receive+0x96>
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	691b      	ldr	r3, [r3, #16]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d105      	bne.n	800d1f8 <HAL_UART_Receive+0x8c>
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d1f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d1f6:	e02d      	b.n	800d254 <HAL_UART_Receive+0xe8>
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	22ff      	movs	r2, #255	; 0xff
 800d1fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d200:	e028      	b.n	800d254 <HAL_UART_Receive+0xe8>
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	689b      	ldr	r3, [r3, #8]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d10d      	bne.n	800d226 <HAL_UART_Receive+0xba>
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	691b      	ldr	r3, [r3, #16]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d104      	bne.n	800d21c <HAL_UART_Receive+0xb0>
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	22ff      	movs	r2, #255	; 0xff
 800d216:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d21a:	e01b      	b.n	800d254 <HAL_UART_Receive+0xe8>
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	227f      	movs	r2, #127	; 0x7f
 800d220:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d224:	e016      	b.n	800d254 <HAL_UART_Receive+0xe8>
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	689b      	ldr	r3, [r3, #8]
 800d22a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d22e:	d10d      	bne.n	800d24c <HAL_UART_Receive+0xe0>
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d104      	bne.n	800d242 <HAL_UART_Receive+0xd6>
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	227f      	movs	r2, #127	; 0x7f
 800d23c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d240:	e008      	b.n	800d254 <HAL_UART_Receive+0xe8>
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	223f      	movs	r2, #63	; 0x3f
 800d246:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d24a:	e003      	b.n	800d254 <HAL_UART_Receive+0xe8>
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2200      	movs	r2, #0
 800d250:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d25a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d264:	d108      	bne.n	800d278 <HAL_UART_Receive+0x10c>
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d104      	bne.n	800d278 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800d26e:	2300      	movs	r3, #0
 800d270:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	61bb      	str	r3, [r7, #24]
 800d276:	e003      	b.n	800d280 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d27c:	2300      	movs	r3, #0
 800d27e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2200      	movs	r2, #0
 800d284:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800d288:	e032      	b.n	800d2f0 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	9300      	str	r3, [sp, #0]
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	2200      	movs	r2, #0
 800d292:	2120      	movs	r1, #32
 800d294:	68f8      	ldr	r0, [r7, #12]
 800d296:	f001 fae2 	bl	800e85e <UART_WaitOnFlagUntilTimeout>
 800d29a:	4603      	mov	r3, r0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d001      	beq.n	800d2a4 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800d2a0:	2303      	movs	r3, #3
 800d2a2:	e032      	b.n	800d30a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d10c      	bne.n	800d2c4 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	8a7b      	ldrh	r3, [r7, #18]
 800d2b4:	4013      	ands	r3, r2
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	69bb      	ldr	r3, [r7, #24]
 800d2ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d2bc:	69bb      	ldr	r3, [r7, #24]
 800d2be:	3302      	adds	r3, #2
 800d2c0:	61bb      	str	r3, [r7, #24]
 800d2c2:	e00c      	b.n	800d2de <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ca:	b2da      	uxtb	r2, r3
 800d2cc:	8a7b      	ldrh	r3, [r7, #18]
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	4013      	ands	r3, r2
 800d2d2:	b2da      	uxtb	r2, r3
 800d2d4:	69fb      	ldr	r3, [r7, #28]
 800d2d6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	b29a      	uxth	r2, r3
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2f6:	b29b      	uxth	r3, r3
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1c6      	bne.n	800d28a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2220      	movs	r2, #32
 800d300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800d304:	2300      	movs	r3, #0
 800d306:	e000      	b.n	800d30a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800d308:	2302      	movs	r3, #2
  }
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	3720      	adds	r7, #32
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
	...

0800d314 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b08a      	sub	sp, #40	; 0x28
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	4613      	mov	r3, r2
 800d320:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d328:	2b20      	cmp	r3, #32
 800d32a:	d17a      	bne.n	800d422 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d002      	beq.n	800d338 <HAL_UART_Transmit_DMA+0x24>
 800d332:	88fb      	ldrh	r3, [r7, #6]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d101      	bne.n	800d33c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800d338:	2301      	movs	r3, #1
 800d33a:	e073      	b.n	800d424 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d342:	2b01      	cmp	r3, #1
 800d344:	d101      	bne.n	800d34a <HAL_UART_Transmit_DMA+0x36>
 800d346:	2302      	movs	r3, #2
 800d348:	e06c      	b.n	800d424 <HAL_UART_Transmit_DMA+0x110>
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2201      	movs	r2, #1
 800d34e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	68ba      	ldr	r2, [r7, #8]
 800d356:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	88fa      	ldrh	r2, [r7, #6]
 800d35c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	88fa      	ldrh	r2, [r7, #6]
 800d364:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2200      	movs	r2, #0
 800d36c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2221      	movs	r2, #33	; 0x21
 800d374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d02c      	beq.n	800d3da <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d384:	4a29      	ldr	r2, [pc, #164]	; (800d42c <HAL_UART_Transmit_DMA+0x118>)
 800d386:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d38c:	4a28      	ldr	r2, [pc, #160]	; (800d430 <HAL_UART_Transmit_DMA+0x11c>)
 800d38e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d394:	4a27      	ldr	r2, [pc, #156]	; (800d434 <HAL_UART_Transmit_DMA+0x120>)
 800d396:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d39c:	2200      	movs	r2, #0
 800d39e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3a8:	4619      	mov	r1, r3
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	3328      	adds	r3, #40	; 0x28
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	88fb      	ldrh	r3, [r7, #6]
 800d3b4:	f7f9 f99e 	bl	80066f4 <HAL_DMA_Start_IT>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00d      	beq.n	800d3da <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2210      	movs	r2, #16
 800d3c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2220      	movs	r2, #32
 800d3d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e024      	b.n	800d424 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2240      	movs	r2, #64	; 0x40
 800d3e0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	3308      	adds	r3, #8
 800d3f0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	e853 3f00 	ldrex	r3, [r3]
 800d3f8:	613b      	str	r3, [r7, #16]
   return(result);
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d400:	627b      	str	r3, [r7, #36]	; 0x24
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	3308      	adds	r3, #8
 800d408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d40a:	623a      	str	r2, [r7, #32]
 800d40c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d40e:	69f9      	ldr	r1, [r7, #28]
 800d410:	6a3a      	ldr	r2, [r7, #32]
 800d412:	e841 2300 	strex	r3, r2, [r1]
 800d416:	61bb      	str	r3, [r7, #24]
   return(result);
 800d418:	69bb      	ldr	r3, [r7, #24]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d1e5      	bne.n	800d3ea <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800d41e:	2300      	movs	r3, #0
 800d420:	e000      	b.n	800d424 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800d422:	2302      	movs	r3, #2
  }
}
 800d424:	4618      	mov	r0, r3
 800d426:	3728      	adds	r7, #40	; 0x28
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	0800ec91 	.word	0x0800ec91
 800d430:	0800ed27 	.word	0x0800ed27
 800d434:	0800ee9d 	.word	0x0800ee9d

0800d438 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b0ba      	sub	sp, #232	; 0xe8
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	69db      	ldr	r3, [r3, #28]
 800d446:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	689b      	ldr	r3, [r3, #8]
 800d45a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d45e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d462:	f640 030f 	movw	r3, #2063	; 0x80f
 800d466:	4013      	ands	r3, r2
 800d468:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d46c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d470:	2b00      	cmp	r3, #0
 800d472:	d11b      	bne.n	800d4ac <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d478:	f003 0320 	and.w	r3, r3, #32
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d015      	beq.n	800d4ac <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d484:	f003 0320 	and.w	r3, r3, #32
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d105      	bne.n	800d498 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d48c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d494:	2b00      	cmp	r3, #0
 800d496:	d009      	beq.n	800d4ac <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f000 835a 	beq.w	800db56 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	4798      	blx	r3
      }
      return;
 800d4aa:	e354      	b.n	800db56 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d4ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	f000 811f 	beq.w	800d6f4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d4b6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d4ba:	4b8b      	ldr	r3, [pc, #556]	; (800d6e8 <HAL_UART_IRQHandler+0x2b0>)
 800d4bc:	4013      	ands	r3, r2
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d106      	bne.n	800d4d0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d4c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d4c6:	4b89      	ldr	r3, [pc, #548]	; (800d6ec <HAL_UART_IRQHandler+0x2b4>)
 800d4c8:	4013      	ands	r3, r2
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f000 8112 	beq.w	800d6f4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d4d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4d4:	f003 0301 	and.w	r3, r3, #1
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d011      	beq.n	800d500 <HAL_UART_IRQHandler+0xc8>
 800d4dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d4e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d00b      	beq.n	800d500 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d4f6:	f043 0201 	orr.w	r2, r3, #1
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d504:	f003 0302 	and.w	r3, r3, #2
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d011      	beq.n	800d530 <HAL_UART_IRQHandler+0xf8>
 800d50c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d510:	f003 0301 	and.w	r3, r3, #1
 800d514:	2b00      	cmp	r3, #0
 800d516:	d00b      	beq.n	800d530 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2202      	movs	r2, #2
 800d51e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d526:	f043 0204 	orr.w	r2, r3, #4
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d534:	f003 0304 	and.w	r3, r3, #4
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d011      	beq.n	800d560 <HAL_UART_IRQHandler+0x128>
 800d53c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d540:	f003 0301 	and.w	r3, r3, #1
 800d544:	2b00      	cmp	r3, #0
 800d546:	d00b      	beq.n	800d560 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2204      	movs	r2, #4
 800d54e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d556:	f043 0202 	orr.w	r2, r3, #2
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d564:	f003 0308 	and.w	r3, r3, #8
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d017      	beq.n	800d59c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d56c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d570:	f003 0320 	and.w	r3, r3, #32
 800d574:	2b00      	cmp	r3, #0
 800d576:	d105      	bne.n	800d584 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d578:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d57c:	4b5a      	ldr	r3, [pc, #360]	; (800d6e8 <HAL_UART_IRQHandler+0x2b0>)
 800d57e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d580:	2b00      	cmp	r3, #0
 800d582:	d00b      	beq.n	800d59c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2208      	movs	r2, #8
 800d58a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d592:	f043 0208 	orr.w	r2, r3, #8
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d59c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d012      	beq.n	800d5ce <HAL_UART_IRQHandler+0x196>
 800d5a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00c      	beq.n	800d5ce <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5c4:	f043 0220 	orr.w	r2, r3, #32
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f000 82c0 	beq.w	800db5a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d5da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5de:	f003 0320 	and.w	r3, r3, #32
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d013      	beq.n	800d60e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d5e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5ea:	f003 0320 	and.w	r3, r3, #32
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d105      	bne.n	800d5fe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d5f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d5f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d007      	beq.n	800d60e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d602:	2b00      	cmp	r3, #0
 800d604:	d003      	beq.n	800d60e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d614:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	689b      	ldr	r3, [r3, #8]
 800d61e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d622:	2b40      	cmp	r3, #64	; 0x40
 800d624:	d005      	beq.n	800d632 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d62a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d04f      	beq.n	800d6d2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f001 fac6 	bl	800ebc4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	689b      	ldr	r3, [r3, #8]
 800d63e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d642:	2b40      	cmp	r3, #64	; 0x40
 800d644:	d141      	bne.n	800d6ca <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	3308      	adds	r3, #8
 800d64c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d650:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d654:	e853 3f00 	ldrex	r3, [r3]
 800d658:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d65c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d664:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	3308      	adds	r3, #8
 800d66e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d672:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d67a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d67e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d682:	e841 2300 	strex	r3, r2, [r1]
 800d686:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d68a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d1d9      	bne.n	800d646 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d696:	2b00      	cmp	r3, #0
 800d698:	d013      	beq.n	800d6c2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d69e:	4a14      	ldr	r2, [pc, #80]	; (800d6f0 <HAL_UART_IRQHandler+0x2b8>)
 800d6a0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f7f9 fdac 	bl	8007204 <HAL_DMA_Abort_IT>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d017      	beq.n	800d6e2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d6bc:	4610      	mov	r0, r2
 800d6be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6c0:	e00f      	b.n	800d6e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f000 fa74 	bl	800dbb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6c8:	e00b      	b.n	800d6e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 fa70 	bl	800dbb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6d0:	e007      	b.n	800d6e2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 fa6c 	bl	800dbb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d6e0:	e23b      	b.n	800db5a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6e2:	bf00      	nop
    return;
 800d6e4:	e239      	b.n	800db5a <HAL_UART_IRQHandler+0x722>
 800d6e6:	bf00      	nop
 800d6e8:	10000001 	.word	0x10000001
 800d6ec:	04000120 	.word	0x04000120
 800d6f0:	0800ef1d 	.word	0x0800ef1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	f040 81ce 	bne.w	800da9a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d6fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d702:	f003 0310 	and.w	r3, r3, #16
 800d706:	2b00      	cmp	r3, #0
 800d708:	f000 81c7 	beq.w	800da9a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d70c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d710:	f003 0310 	and.w	r3, r3, #16
 800d714:	2b00      	cmp	r3, #0
 800d716:	f000 81c0 	beq.w	800da9a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2210      	movs	r2, #16
 800d720:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	689b      	ldr	r3, [r3, #8]
 800d728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d72c:	2b40      	cmp	r3, #64	; 0x40
 800d72e:	f040 813b 	bne.w	800d9a8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a8b      	ldr	r2, [pc, #556]	; (800d968 <HAL_UART_IRQHandler+0x530>)
 800d73a:	4293      	cmp	r3, r2
 800d73c:	d059      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x3ba>
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	4a89      	ldr	r2, [pc, #548]	; (800d96c <HAL_UART_IRQHandler+0x534>)
 800d746:	4293      	cmp	r3, r2
 800d748:	d053      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x3ba>
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	4a87      	ldr	r2, [pc, #540]	; (800d970 <HAL_UART_IRQHandler+0x538>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d04d      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x3ba>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a85      	ldr	r2, [pc, #532]	; (800d974 <HAL_UART_IRQHandler+0x53c>)
 800d75e:	4293      	cmp	r3, r2
 800d760:	d047      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x3ba>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4a83      	ldr	r2, [pc, #524]	; (800d978 <HAL_UART_IRQHandler+0x540>)
 800d76a:	4293      	cmp	r3, r2
 800d76c:	d041      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x3ba>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	4a81      	ldr	r2, [pc, #516]	; (800d97c <HAL_UART_IRQHandler+0x544>)
 800d776:	4293      	cmp	r3, r2
 800d778:	d03b      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x3ba>
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a7f      	ldr	r2, [pc, #508]	; (800d980 <HAL_UART_IRQHandler+0x548>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d035      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x3ba>
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	4a7d      	ldr	r2, [pc, #500]	; (800d984 <HAL_UART_IRQHandler+0x54c>)
 800d78e:	4293      	cmp	r3, r2
 800d790:	d02f      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x3ba>
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a7b      	ldr	r2, [pc, #492]	; (800d988 <HAL_UART_IRQHandler+0x550>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d029      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x3ba>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a79      	ldr	r2, [pc, #484]	; (800d98c <HAL_UART_IRQHandler+0x554>)
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d023      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x3ba>
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a77      	ldr	r2, [pc, #476]	; (800d990 <HAL_UART_IRQHandler+0x558>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d01d      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x3ba>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	4a75      	ldr	r2, [pc, #468]	; (800d994 <HAL_UART_IRQHandler+0x55c>)
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d017      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x3ba>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4a73      	ldr	r2, [pc, #460]	; (800d998 <HAL_UART_IRQHandler+0x560>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d011      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x3ba>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	4a71      	ldr	r2, [pc, #452]	; (800d99c <HAL_UART_IRQHandler+0x564>)
 800d7d6:	4293      	cmp	r3, r2
 800d7d8:	d00b      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x3ba>
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	4a6f      	ldr	r2, [pc, #444]	; (800d9a0 <HAL_UART_IRQHandler+0x568>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d005      	beq.n	800d7f2 <HAL_UART_IRQHandler+0x3ba>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	4a6d      	ldr	r2, [pc, #436]	; (800d9a4 <HAL_UART_IRQHandler+0x56c>)
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	d105      	bne.n	800d7fe <HAL_UART_IRQHandler+0x3c6>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	e004      	b.n	800d808 <HAL_UART_IRQHandler+0x3d0>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	b29b      	uxth	r3, r3
 800d808:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d80c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d810:	2b00      	cmp	r3, #0
 800d812:	f000 81a4 	beq.w	800db5e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d81c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d820:	429a      	cmp	r2, r3
 800d822:	f080 819c 	bcs.w	800db5e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d82c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d834:	69db      	ldr	r3, [r3, #28]
 800d836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d83a:	f000 8086 	beq.w	800d94a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d84a:	e853 3f00 	ldrex	r3, [r3]
 800d84e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d852:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d856:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d85a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	461a      	mov	r2, r3
 800d864:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d868:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d86c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d870:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d874:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d878:	e841 2300 	strex	r3, r2, [r1]
 800d87c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d880:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d884:	2b00      	cmp	r3, #0
 800d886:	d1da      	bne.n	800d83e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	3308      	adds	r3, #8
 800d88e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d892:	e853 3f00 	ldrex	r3, [r3]
 800d896:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d898:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d89a:	f023 0301 	bic.w	r3, r3, #1
 800d89e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	3308      	adds	r3, #8
 800d8a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d8ac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d8b0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d8b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d8b8:	e841 2300 	strex	r3, r2, [r1]
 800d8bc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d8be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1e1      	bne.n	800d888 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3308      	adds	r3, #8
 800d8ca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d8ce:	e853 3f00 	ldrex	r3, [r3]
 800d8d2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d8d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	3308      	adds	r3, #8
 800d8e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d8e8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d8ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d8ee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d8f0:	e841 2300 	strex	r3, r2, [r1]
 800d8f4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d8f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d1e3      	bne.n	800d8c4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2220      	movs	r2, #32
 800d900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	2200      	movs	r2, #0
 800d908:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d912:	e853 3f00 	ldrex	r3, [r3]
 800d916:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d91a:	f023 0310 	bic.w	r3, r3, #16
 800d91e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	461a      	mov	r2, r3
 800d928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d92c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d92e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d930:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d932:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d934:	e841 2300 	strex	r3, r2, [r1]
 800d938:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d93a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d1e4      	bne.n	800d90a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d944:	4618      	mov	r0, r3
 800d946:	f7f9 f93f 	bl	8006bc8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d956:	b29b      	uxth	r3, r3
 800d958:	1ad3      	subs	r3, r2, r3
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	4619      	mov	r1, r3
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f7f4 f934 	bl	8001bcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d964:	e0fb      	b.n	800db5e <HAL_UART_IRQHandler+0x726>
 800d966:	bf00      	nop
 800d968:	40020010 	.word	0x40020010
 800d96c:	40020028 	.word	0x40020028
 800d970:	40020040 	.word	0x40020040
 800d974:	40020058 	.word	0x40020058
 800d978:	40020070 	.word	0x40020070
 800d97c:	40020088 	.word	0x40020088
 800d980:	400200a0 	.word	0x400200a0
 800d984:	400200b8 	.word	0x400200b8
 800d988:	40020410 	.word	0x40020410
 800d98c:	40020428 	.word	0x40020428
 800d990:	40020440 	.word	0x40020440
 800d994:	40020458 	.word	0x40020458
 800d998:	40020470 	.word	0x40020470
 800d99c:	40020488 	.word	0x40020488
 800d9a0:	400204a0 	.word	0x400204a0
 800d9a4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d9b4:	b29b      	uxth	r3, r3
 800d9b6:	1ad3      	subs	r3, r2, r3
 800d9b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d9c2:	b29b      	uxth	r3, r3
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f000 80cc 	beq.w	800db62 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d9ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	f000 80c7 	beq.w	800db62 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9dc:	e853 3f00 	ldrex	r3, [r3]
 800d9e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d9e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	461a      	mov	r2, r3
 800d9f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d9f6:	647b      	str	r3, [r7, #68]	; 0x44
 800d9f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d9fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d9fe:	e841 2300 	strex	r3, r2, [r1]
 800da02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800da04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da06:	2b00      	cmp	r3, #0
 800da08:	d1e4      	bne.n	800d9d4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	3308      	adds	r3, #8
 800da10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da14:	e853 3f00 	ldrex	r3, [r3]
 800da18:	623b      	str	r3, [r7, #32]
   return(result);
 800da1a:	6a3a      	ldr	r2, [r7, #32]
 800da1c:	4b54      	ldr	r3, [pc, #336]	; (800db70 <HAL_UART_IRQHandler+0x738>)
 800da1e:	4013      	ands	r3, r2
 800da20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	3308      	adds	r3, #8
 800da2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800da2e:	633a      	str	r2, [r7, #48]	; 0x30
 800da30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da36:	e841 2300 	strex	r3, r2, [r1]
 800da3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d1e3      	bne.n	800da0a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2220      	movs	r2, #32
 800da46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2200      	movs	r2, #0
 800da4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2200      	movs	r2, #0
 800da54:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	e853 3f00 	ldrex	r3, [r3]
 800da62:	60fb      	str	r3, [r7, #12]
   return(result);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	f023 0310 	bic.w	r3, r3, #16
 800da6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	461a      	mov	r2, r3
 800da74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800da78:	61fb      	str	r3, [r7, #28]
 800da7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da7c:	69b9      	ldr	r1, [r7, #24]
 800da7e:	69fa      	ldr	r2, [r7, #28]
 800da80:	e841 2300 	strex	r3, r2, [r1]
 800da84:	617b      	str	r3, [r7, #20]
   return(result);
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d1e4      	bne.n	800da56 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800da8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800da90:	4619      	mov	r1, r3
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f7f4 f89a 	bl	8001bcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800da98:	e063      	b.n	800db62 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800da9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800da9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00e      	beq.n	800dac4 <HAL_UART_IRQHandler+0x68c>
 800daa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800daaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d008      	beq.n	800dac4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800daba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f001 fa6e 	bl	800ef9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800dac2:	e051      	b.n	800db68 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800dac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d014      	beq.n	800dafa <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800dad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800dad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d105      	bne.n	800dae8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800dadc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d008      	beq.n	800dafa <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daec:	2b00      	cmp	r3, #0
 800daee:	d03a      	beq.n	800db66 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	4798      	blx	r3
    }
    return;
 800daf8:	e035      	b.n	800db66 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800dafa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800dafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db02:	2b00      	cmp	r3, #0
 800db04:	d009      	beq.n	800db1a <HAL_UART_IRQHandler+0x6e2>
 800db06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d003      	beq.n	800db1a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f001 fa18 	bl	800ef48 <UART_EndTransmit_IT>
    return;
 800db18:	e026      	b.n	800db68 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800db1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db22:	2b00      	cmp	r3, #0
 800db24:	d009      	beq.n	800db3a <HAL_UART_IRQHandler+0x702>
 800db26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d003      	beq.n	800db3a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f001 fa47 	bl	800efc6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800db38:	e016      	b.n	800db68 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800db3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800db3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800db42:	2b00      	cmp	r3, #0
 800db44:	d010      	beq.n	800db68 <HAL_UART_IRQHandler+0x730>
 800db46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	da0c      	bge.n	800db68 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	f001 fa2f 	bl	800efb2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800db54:	e008      	b.n	800db68 <HAL_UART_IRQHandler+0x730>
      return;
 800db56:	bf00      	nop
 800db58:	e006      	b.n	800db68 <HAL_UART_IRQHandler+0x730>
    return;
 800db5a:	bf00      	nop
 800db5c:	e004      	b.n	800db68 <HAL_UART_IRQHandler+0x730>
      return;
 800db5e:	bf00      	nop
 800db60:	e002      	b.n	800db68 <HAL_UART_IRQHandler+0x730>
      return;
 800db62:	bf00      	nop
 800db64:	e000      	b.n	800db68 <HAL_UART_IRQHandler+0x730>
    return;
 800db66:	bf00      	nop
  }
}
 800db68:	37e8      	adds	r7, #232	; 0xe8
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	effffffe 	.word	0xeffffffe

0800db74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800db74:	b480      	push	{r7}
 800db76:	b083      	sub	sp, #12
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800db7c:	bf00      	nop
 800db7e:	370c      	adds	r7, #12
 800db80:	46bd      	mov	sp, r7
 800db82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db86:	4770      	bx	lr

0800db88 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800db88:	b480      	push	{r7}
 800db8a:	b083      	sub	sp, #12
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800db90:	bf00      	nop
 800db92:	370c      	adds	r7, #12
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr

0800db9c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800db9c:	b480      	push	{r7}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800dba4:	bf00      	nop
 800dba6:	370c      	adds	r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr

0800dbb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	b083      	sub	sp, #12
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800dbb8:	bf00      	nop
 800dbba:	370c      	adds	r7, #12
 800dbbc:	46bd      	mov	sp, r7
 800dbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc2:	4770      	bx	lr

0800dbc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dbc4:	b5b0      	push	{r4, r5, r7, lr}
 800dbc6:	b08e      	sub	sp, #56	; 0x38
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	689a      	ldr	r2, [r3, #8]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	691b      	ldr	r3, [r3, #16]
 800dbda:	431a      	orrs	r2, r3
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	695b      	ldr	r3, [r3, #20]
 800dbe0:	431a      	orrs	r2, r3
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	69db      	ldr	r3, [r3, #28]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	681a      	ldr	r2, [r3, #0]
 800dbf0:	4bbf      	ldr	r3, [pc, #764]	; (800def0 <UART_SetConfig+0x32c>)
 800dbf2:	4013      	ands	r3, r2
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	6812      	ldr	r2, [r2, #0]
 800dbf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dbfa:	430b      	orrs	r3, r1
 800dbfc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	68da      	ldr	r2, [r3, #12]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	430a      	orrs	r2, r1
 800dc12:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	699b      	ldr	r3, [r3, #24]
 800dc18:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	4ab5      	ldr	r2, [pc, #724]	; (800def4 <UART_SetConfig+0x330>)
 800dc20:	4293      	cmp	r3, r2
 800dc22:	d004      	beq.n	800dc2e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6a1b      	ldr	r3, [r3, #32]
 800dc28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	689a      	ldr	r2, [r3, #8]
 800dc34:	4bb0      	ldr	r3, [pc, #704]	; (800def8 <UART_SetConfig+0x334>)
 800dc36:	4013      	ands	r3, r2
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	6812      	ldr	r2, [r2, #0]
 800dc3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800dc3e:	430b      	orrs	r3, r1
 800dc40:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc48:	f023 010f 	bic.w	r1, r3, #15
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	430a      	orrs	r2, r1
 800dc56:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4aa7      	ldr	r2, [pc, #668]	; (800defc <UART_SetConfig+0x338>)
 800dc5e:	4293      	cmp	r3, r2
 800dc60:	d176      	bne.n	800dd50 <UART_SetConfig+0x18c>
 800dc62:	4ba7      	ldr	r3, [pc, #668]	; (800df00 <UART_SetConfig+0x33c>)
 800dc64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dc66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dc6a:	2b28      	cmp	r3, #40	; 0x28
 800dc6c:	d86c      	bhi.n	800dd48 <UART_SetConfig+0x184>
 800dc6e:	a201      	add	r2, pc, #4	; (adr r2, 800dc74 <UART_SetConfig+0xb0>)
 800dc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc74:	0800dd19 	.word	0x0800dd19
 800dc78:	0800dd49 	.word	0x0800dd49
 800dc7c:	0800dd49 	.word	0x0800dd49
 800dc80:	0800dd49 	.word	0x0800dd49
 800dc84:	0800dd49 	.word	0x0800dd49
 800dc88:	0800dd49 	.word	0x0800dd49
 800dc8c:	0800dd49 	.word	0x0800dd49
 800dc90:	0800dd49 	.word	0x0800dd49
 800dc94:	0800dd21 	.word	0x0800dd21
 800dc98:	0800dd49 	.word	0x0800dd49
 800dc9c:	0800dd49 	.word	0x0800dd49
 800dca0:	0800dd49 	.word	0x0800dd49
 800dca4:	0800dd49 	.word	0x0800dd49
 800dca8:	0800dd49 	.word	0x0800dd49
 800dcac:	0800dd49 	.word	0x0800dd49
 800dcb0:	0800dd49 	.word	0x0800dd49
 800dcb4:	0800dd29 	.word	0x0800dd29
 800dcb8:	0800dd49 	.word	0x0800dd49
 800dcbc:	0800dd49 	.word	0x0800dd49
 800dcc0:	0800dd49 	.word	0x0800dd49
 800dcc4:	0800dd49 	.word	0x0800dd49
 800dcc8:	0800dd49 	.word	0x0800dd49
 800dccc:	0800dd49 	.word	0x0800dd49
 800dcd0:	0800dd49 	.word	0x0800dd49
 800dcd4:	0800dd31 	.word	0x0800dd31
 800dcd8:	0800dd49 	.word	0x0800dd49
 800dcdc:	0800dd49 	.word	0x0800dd49
 800dce0:	0800dd49 	.word	0x0800dd49
 800dce4:	0800dd49 	.word	0x0800dd49
 800dce8:	0800dd49 	.word	0x0800dd49
 800dcec:	0800dd49 	.word	0x0800dd49
 800dcf0:	0800dd49 	.word	0x0800dd49
 800dcf4:	0800dd39 	.word	0x0800dd39
 800dcf8:	0800dd49 	.word	0x0800dd49
 800dcfc:	0800dd49 	.word	0x0800dd49
 800dd00:	0800dd49 	.word	0x0800dd49
 800dd04:	0800dd49 	.word	0x0800dd49
 800dd08:	0800dd49 	.word	0x0800dd49
 800dd0c:	0800dd49 	.word	0x0800dd49
 800dd10:	0800dd49 	.word	0x0800dd49
 800dd14:	0800dd41 	.word	0x0800dd41
 800dd18:	2301      	movs	r3, #1
 800dd1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd1e:	e222      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dd20:	2304      	movs	r3, #4
 800dd22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd26:	e21e      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dd28:	2308      	movs	r3, #8
 800dd2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd2e:	e21a      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dd30:	2310      	movs	r3, #16
 800dd32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd36:	e216      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dd38:	2320      	movs	r3, #32
 800dd3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd3e:	e212      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dd40:	2340      	movs	r3, #64	; 0x40
 800dd42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd46:	e20e      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dd48:	2380      	movs	r3, #128	; 0x80
 800dd4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd4e:	e20a      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4a6b      	ldr	r2, [pc, #428]	; (800df04 <UART_SetConfig+0x340>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d130      	bne.n	800ddbc <UART_SetConfig+0x1f8>
 800dd5a:	4b69      	ldr	r3, [pc, #420]	; (800df00 <UART_SetConfig+0x33c>)
 800dd5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd5e:	f003 0307 	and.w	r3, r3, #7
 800dd62:	2b05      	cmp	r3, #5
 800dd64:	d826      	bhi.n	800ddb4 <UART_SetConfig+0x1f0>
 800dd66:	a201      	add	r2, pc, #4	; (adr r2, 800dd6c <UART_SetConfig+0x1a8>)
 800dd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd6c:	0800dd85 	.word	0x0800dd85
 800dd70:	0800dd8d 	.word	0x0800dd8d
 800dd74:	0800dd95 	.word	0x0800dd95
 800dd78:	0800dd9d 	.word	0x0800dd9d
 800dd7c:	0800dda5 	.word	0x0800dda5
 800dd80:	0800ddad 	.word	0x0800ddad
 800dd84:	2300      	movs	r3, #0
 800dd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd8a:	e1ec      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dd8c:	2304      	movs	r3, #4
 800dd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd92:	e1e8      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dd94:	2308      	movs	r3, #8
 800dd96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd9a:	e1e4      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dd9c:	2310      	movs	r3, #16
 800dd9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dda2:	e1e0      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dda4:	2320      	movs	r3, #32
 800dda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddaa:	e1dc      	b.n	800e166 <UART_SetConfig+0x5a2>
 800ddac:	2340      	movs	r3, #64	; 0x40
 800ddae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddb2:	e1d8      	b.n	800e166 <UART_SetConfig+0x5a2>
 800ddb4:	2380      	movs	r3, #128	; 0x80
 800ddb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddba:	e1d4      	b.n	800e166 <UART_SetConfig+0x5a2>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a51      	ldr	r2, [pc, #324]	; (800df08 <UART_SetConfig+0x344>)
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d130      	bne.n	800de28 <UART_SetConfig+0x264>
 800ddc6:	4b4e      	ldr	r3, [pc, #312]	; (800df00 <UART_SetConfig+0x33c>)
 800ddc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddca:	f003 0307 	and.w	r3, r3, #7
 800ddce:	2b05      	cmp	r3, #5
 800ddd0:	d826      	bhi.n	800de20 <UART_SetConfig+0x25c>
 800ddd2:	a201      	add	r2, pc, #4	; (adr r2, 800ddd8 <UART_SetConfig+0x214>)
 800ddd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddd8:	0800ddf1 	.word	0x0800ddf1
 800dddc:	0800ddf9 	.word	0x0800ddf9
 800dde0:	0800de01 	.word	0x0800de01
 800dde4:	0800de09 	.word	0x0800de09
 800dde8:	0800de11 	.word	0x0800de11
 800ddec:	0800de19 	.word	0x0800de19
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddf6:	e1b6      	b.n	800e166 <UART_SetConfig+0x5a2>
 800ddf8:	2304      	movs	r3, #4
 800ddfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddfe:	e1b2      	b.n	800e166 <UART_SetConfig+0x5a2>
 800de00:	2308      	movs	r3, #8
 800de02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de06:	e1ae      	b.n	800e166 <UART_SetConfig+0x5a2>
 800de08:	2310      	movs	r3, #16
 800de0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de0e:	e1aa      	b.n	800e166 <UART_SetConfig+0x5a2>
 800de10:	2320      	movs	r3, #32
 800de12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de16:	e1a6      	b.n	800e166 <UART_SetConfig+0x5a2>
 800de18:	2340      	movs	r3, #64	; 0x40
 800de1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de1e:	e1a2      	b.n	800e166 <UART_SetConfig+0x5a2>
 800de20:	2380      	movs	r3, #128	; 0x80
 800de22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de26:	e19e      	b.n	800e166 <UART_SetConfig+0x5a2>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4a37      	ldr	r2, [pc, #220]	; (800df0c <UART_SetConfig+0x348>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d130      	bne.n	800de94 <UART_SetConfig+0x2d0>
 800de32:	4b33      	ldr	r3, [pc, #204]	; (800df00 <UART_SetConfig+0x33c>)
 800de34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de36:	f003 0307 	and.w	r3, r3, #7
 800de3a:	2b05      	cmp	r3, #5
 800de3c:	d826      	bhi.n	800de8c <UART_SetConfig+0x2c8>
 800de3e:	a201      	add	r2, pc, #4	; (adr r2, 800de44 <UART_SetConfig+0x280>)
 800de40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de44:	0800de5d 	.word	0x0800de5d
 800de48:	0800de65 	.word	0x0800de65
 800de4c:	0800de6d 	.word	0x0800de6d
 800de50:	0800de75 	.word	0x0800de75
 800de54:	0800de7d 	.word	0x0800de7d
 800de58:	0800de85 	.word	0x0800de85
 800de5c:	2300      	movs	r3, #0
 800de5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de62:	e180      	b.n	800e166 <UART_SetConfig+0x5a2>
 800de64:	2304      	movs	r3, #4
 800de66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de6a:	e17c      	b.n	800e166 <UART_SetConfig+0x5a2>
 800de6c:	2308      	movs	r3, #8
 800de6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de72:	e178      	b.n	800e166 <UART_SetConfig+0x5a2>
 800de74:	2310      	movs	r3, #16
 800de76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de7a:	e174      	b.n	800e166 <UART_SetConfig+0x5a2>
 800de7c:	2320      	movs	r3, #32
 800de7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de82:	e170      	b.n	800e166 <UART_SetConfig+0x5a2>
 800de84:	2340      	movs	r3, #64	; 0x40
 800de86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de8a:	e16c      	b.n	800e166 <UART_SetConfig+0x5a2>
 800de8c:	2380      	movs	r3, #128	; 0x80
 800de8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800de92:	e168      	b.n	800e166 <UART_SetConfig+0x5a2>
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	4a1d      	ldr	r2, [pc, #116]	; (800df10 <UART_SetConfig+0x34c>)
 800de9a:	4293      	cmp	r3, r2
 800de9c:	d142      	bne.n	800df24 <UART_SetConfig+0x360>
 800de9e:	4b18      	ldr	r3, [pc, #96]	; (800df00 <UART_SetConfig+0x33c>)
 800dea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dea2:	f003 0307 	and.w	r3, r3, #7
 800dea6:	2b05      	cmp	r3, #5
 800dea8:	d838      	bhi.n	800df1c <UART_SetConfig+0x358>
 800deaa:	a201      	add	r2, pc, #4	; (adr r2, 800deb0 <UART_SetConfig+0x2ec>)
 800deac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb0:	0800dec9 	.word	0x0800dec9
 800deb4:	0800ded1 	.word	0x0800ded1
 800deb8:	0800ded9 	.word	0x0800ded9
 800debc:	0800dee1 	.word	0x0800dee1
 800dec0:	0800dee9 	.word	0x0800dee9
 800dec4:	0800df15 	.word	0x0800df15
 800dec8:	2300      	movs	r3, #0
 800deca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dece:	e14a      	b.n	800e166 <UART_SetConfig+0x5a2>
 800ded0:	2304      	movs	r3, #4
 800ded2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ded6:	e146      	b.n	800e166 <UART_SetConfig+0x5a2>
 800ded8:	2308      	movs	r3, #8
 800deda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dede:	e142      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dee0:	2310      	movs	r3, #16
 800dee2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dee6:	e13e      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dee8:	2320      	movs	r3, #32
 800deea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800deee:	e13a      	b.n	800e166 <UART_SetConfig+0x5a2>
 800def0:	cfff69f3 	.word	0xcfff69f3
 800def4:	58000c00 	.word	0x58000c00
 800def8:	11fff4ff 	.word	0x11fff4ff
 800defc:	40011000 	.word	0x40011000
 800df00:	58024400 	.word	0x58024400
 800df04:	40004400 	.word	0x40004400
 800df08:	40004800 	.word	0x40004800
 800df0c:	40004c00 	.word	0x40004c00
 800df10:	40005000 	.word	0x40005000
 800df14:	2340      	movs	r3, #64	; 0x40
 800df16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df1a:	e124      	b.n	800e166 <UART_SetConfig+0x5a2>
 800df1c:	2380      	movs	r3, #128	; 0x80
 800df1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800df22:	e120      	b.n	800e166 <UART_SetConfig+0x5a2>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4acc      	ldr	r2, [pc, #816]	; (800e25c <UART_SetConfig+0x698>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d176      	bne.n	800e01c <UART_SetConfig+0x458>
 800df2e:	4bcc      	ldr	r3, [pc, #816]	; (800e260 <UART_SetConfig+0x69c>)
 800df30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800df36:	2b28      	cmp	r3, #40	; 0x28
 800df38:	d86c      	bhi.n	800e014 <UART_SetConfig+0x450>
 800df3a:	a201      	add	r2, pc, #4	; (adr r2, 800df40 <UART_SetConfig+0x37c>)
 800df3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df40:	0800dfe5 	.word	0x0800dfe5
 800df44:	0800e015 	.word	0x0800e015
 800df48:	0800e015 	.word	0x0800e015
 800df4c:	0800e015 	.word	0x0800e015
 800df50:	0800e015 	.word	0x0800e015
 800df54:	0800e015 	.word	0x0800e015
 800df58:	0800e015 	.word	0x0800e015
 800df5c:	0800e015 	.word	0x0800e015
 800df60:	0800dfed 	.word	0x0800dfed
 800df64:	0800e015 	.word	0x0800e015
 800df68:	0800e015 	.word	0x0800e015
 800df6c:	0800e015 	.word	0x0800e015
 800df70:	0800e015 	.word	0x0800e015
 800df74:	0800e015 	.word	0x0800e015
 800df78:	0800e015 	.word	0x0800e015
 800df7c:	0800e015 	.word	0x0800e015
 800df80:	0800dff5 	.word	0x0800dff5
 800df84:	0800e015 	.word	0x0800e015
 800df88:	0800e015 	.word	0x0800e015
 800df8c:	0800e015 	.word	0x0800e015
 800df90:	0800e015 	.word	0x0800e015
 800df94:	0800e015 	.word	0x0800e015
 800df98:	0800e015 	.word	0x0800e015
 800df9c:	0800e015 	.word	0x0800e015
 800dfa0:	0800dffd 	.word	0x0800dffd
 800dfa4:	0800e015 	.word	0x0800e015
 800dfa8:	0800e015 	.word	0x0800e015
 800dfac:	0800e015 	.word	0x0800e015
 800dfb0:	0800e015 	.word	0x0800e015
 800dfb4:	0800e015 	.word	0x0800e015
 800dfb8:	0800e015 	.word	0x0800e015
 800dfbc:	0800e015 	.word	0x0800e015
 800dfc0:	0800e005 	.word	0x0800e005
 800dfc4:	0800e015 	.word	0x0800e015
 800dfc8:	0800e015 	.word	0x0800e015
 800dfcc:	0800e015 	.word	0x0800e015
 800dfd0:	0800e015 	.word	0x0800e015
 800dfd4:	0800e015 	.word	0x0800e015
 800dfd8:	0800e015 	.word	0x0800e015
 800dfdc:	0800e015 	.word	0x0800e015
 800dfe0:	0800e00d 	.word	0x0800e00d
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dfea:	e0bc      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dfec:	2304      	movs	r3, #4
 800dfee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dff2:	e0b8      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dff4:	2308      	movs	r3, #8
 800dff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dffa:	e0b4      	b.n	800e166 <UART_SetConfig+0x5a2>
 800dffc:	2310      	movs	r3, #16
 800dffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e002:	e0b0      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e004:	2320      	movs	r3, #32
 800e006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e00a:	e0ac      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e00c:	2340      	movs	r3, #64	; 0x40
 800e00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e012:	e0a8      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e014:	2380      	movs	r3, #128	; 0x80
 800e016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e01a:	e0a4      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4a90      	ldr	r2, [pc, #576]	; (800e264 <UART_SetConfig+0x6a0>)
 800e022:	4293      	cmp	r3, r2
 800e024:	d130      	bne.n	800e088 <UART_SetConfig+0x4c4>
 800e026:	4b8e      	ldr	r3, [pc, #568]	; (800e260 <UART_SetConfig+0x69c>)
 800e028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e02a:	f003 0307 	and.w	r3, r3, #7
 800e02e:	2b05      	cmp	r3, #5
 800e030:	d826      	bhi.n	800e080 <UART_SetConfig+0x4bc>
 800e032:	a201      	add	r2, pc, #4	; (adr r2, 800e038 <UART_SetConfig+0x474>)
 800e034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e038:	0800e051 	.word	0x0800e051
 800e03c:	0800e059 	.word	0x0800e059
 800e040:	0800e061 	.word	0x0800e061
 800e044:	0800e069 	.word	0x0800e069
 800e048:	0800e071 	.word	0x0800e071
 800e04c:	0800e079 	.word	0x0800e079
 800e050:	2300      	movs	r3, #0
 800e052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e056:	e086      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e058:	2304      	movs	r3, #4
 800e05a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e05e:	e082      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e060:	2308      	movs	r3, #8
 800e062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e066:	e07e      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e068:	2310      	movs	r3, #16
 800e06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e06e:	e07a      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e070:	2320      	movs	r3, #32
 800e072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e076:	e076      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e078:	2340      	movs	r3, #64	; 0x40
 800e07a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e07e:	e072      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e080:	2380      	movs	r3, #128	; 0x80
 800e082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e086:	e06e      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a76      	ldr	r2, [pc, #472]	; (800e268 <UART_SetConfig+0x6a4>)
 800e08e:	4293      	cmp	r3, r2
 800e090:	d130      	bne.n	800e0f4 <UART_SetConfig+0x530>
 800e092:	4b73      	ldr	r3, [pc, #460]	; (800e260 <UART_SetConfig+0x69c>)
 800e094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e096:	f003 0307 	and.w	r3, r3, #7
 800e09a:	2b05      	cmp	r3, #5
 800e09c:	d826      	bhi.n	800e0ec <UART_SetConfig+0x528>
 800e09e:	a201      	add	r2, pc, #4	; (adr r2, 800e0a4 <UART_SetConfig+0x4e0>)
 800e0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0a4:	0800e0bd 	.word	0x0800e0bd
 800e0a8:	0800e0c5 	.word	0x0800e0c5
 800e0ac:	0800e0cd 	.word	0x0800e0cd
 800e0b0:	0800e0d5 	.word	0x0800e0d5
 800e0b4:	0800e0dd 	.word	0x0800e0dd
 800e0b8:	0800e0e5 	.word	0x0800e0e5
 800e0bc:	2300      	movs	r3, #0
 800e0be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0c2:	e050      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e0c4:	2304      	movs	r3, #4
 800e0c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0ca:	e04c      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e0cc:	2308      	movs	r3, #8
 800e0ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0d2:	e048      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e0d4:	2310      	movs	r3, #16
 800e0d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0da:	e044      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e0dc:	2320      	movs	r3, #32
 800e0de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0e2:	e040      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e0e4:	2340      	movs	r3, #64	; 0x40
 800e0e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0ea:	e03c      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e0ec:	2380      	movs	r3, #128	; 0x80
 800e0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e0f2:	e038      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	4a5c      	ldr	r2, [pc, #368]	; (800e26c <UART_SetConfig+0x6a8>)
 800e0fa:	4293      	cmp	r3, r2
 800e0fc:	d130      	bne.n	800e160 <UART_SetConfig+0x59c>
 800e0fe:	4b58      	ldr	r3, [pc, #352]	; (800e260 <UART_SetConfig+0x69c>)
 800e100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e102:	f003 0307 	and.w	r3, r3, #7
 800e106:	2b05      	cmp	r3, #5
 800e108:	d826      	bhi.n	800e158 <UART_SetConfig+0x594>
 800e10a:	a201      	add	r2, pc, #4	; (adr r2, 800e110 <UART_SetConfig+0x54c>)
 800e10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e110:	0800e129 	.word	0x0800e129
 800e114:	0800e131 	.word	0x0800e131
 800e118:	0800e139 	.word	0x0800e139
 800e11c:	0800e141 	.word	0x0800e141
 800e120:	0800e149 	.word	0x0800e149
 800e124:	0800e151 	.word	0x0800e151
 800e128:	2302      	movs	r3, #2
 800e12a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e12e:	e01a      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e130:	2304      	movs	r3, #4
 800e132:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e136:	e016      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e138:	2308      	movs	r3, #8
 800e13a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e13e:	e012      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e140:	2310      	movs	r3, #16
 800e142:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e146:	e00e      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e148:	2320      	movs	r3, #32
 800e14a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e14e:	e00a      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e150:	2340      	movs	r3, #64	; 0x40
 800e152:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e156:	e006      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e158:	2380      	movs	r3, #128	; 0x80
 800e15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800e15e:	e002      	b.n	800e166 <UART_SetConfig+0x5a2>
 800e160:	2380      	movs	r3, #128	; 0x80
 800e162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	4a40      	ldr	r2, [pc, #256]	; (800e26c <UART_SetConfig+0x6a8>)
 800e16c:	4293      	cmp	r3, r2
 800e16e:	f040 80ef 	bne.w	800e350 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e172:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e176:	2b20      	cmp	r3, #32
 800e178:	dc46      	bgt.n	800e208 <UART_SetConfig+0x644>
 800e17a:	2b02      	cmp	r3, #2
 800e17c:	f2c0 8081 	blt.w	800e282 <UART_SetConfig+0x6be>
 800e180:	3b02      	subs	r3, #2
 800e182:	2b1e      	cmp	r3, #30
 800e184:	d87d      	bhi.n	800e282 <UART_SetConfig+0x6be>
 800e186:	a201      	add	r2, pc, #4	; (adr r2, 800e18c <UART_SetConfig+0x5c8>)
 800e188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e18c:	0800e20f 	.word	0x0800e20f
 800e190:	0800e283 	.word	0x0800e283
 800e194:	0800e217 	.word	0x0800e217
 800e198:	0800e283 	.word	0x0800e283
 800e19c:	0800e283 	.word	0x0800e283
 800e1a0:	0800e283 	.word	0x0800e283
 800e1a4:	0800e227 	.word	0x0800e227
 800e1a8:	0800e283 	.word	0x0800e283
 800e1ac:	0800e283 	.word	0x0800e283
 800e1b0:	0800e283 	.word	0x0800e283
 800e1b4:	0800e283 	.word	0x0800e283
 800e1b8:	0800e283 	.word	0x0800e283
 800e1bc:	0800e283 	.word	0x0800e283
 800e1c0:	0800e283 	.word	0x0800e283
 800e1c4:	0800e237 	.word	0x0800e237
 800e1c8:	0800e283 	.word	0x0800e283
 800e1cc:	0800e283 	.word	0x0800e283
 800e1d0:	0800e283 	.word	0x0800e283
 800e1d4:	0800e283 	.word	0x0800e283
 800e1d8:	0800e283 	.word	0x0800e283
 800e1dc:	0800e283 	.word	0x0800e283
 800e1e0:	0800e283 	.word	0x0800e283
 800e1e4:	0800e283 	.word	0x0800e283
 800e1e8:	0800e283 	.word	0x0800e283
 800e1ec:	0800e283 	.word	0x0800e283
 800e1f0:	0800e283 	.word	0x0800e283
 800e1f4:	0800e283 	.word	0x0800e283
 800e1f8:	0800e283 	.word	0x0800e283
 800e1fc:	0800e283 	.word	0x0800e283
 800e200:	0800e283 	.word	0x0800e283
 800e204:	0800e275 	.word	0x0800e275
 800e208:	2b40      	cmp	r3, #64	; 0x40
 800e20a:	d036      	beq.n	800e27a <UART_SetConfig+0x6b6>
 800e20c:	e039      	b.n	800e282 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e20e:	f7fc fe65 	bl	800aedc <HAL_RCCEx_GetD3PCLK1Freq>
 800e212:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e214:	e03b      	b.n	800e28e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e216:	f107 0314 	add.w	r3, r7, #20
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7fc fe74 	bl	800af08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e224:	e033      	b.n	800e28e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e226:	f107 0308 	add.w	r3, r7, #8
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fc ffc0 	bl	800b1b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e234:	e02b      	b.n	800e28e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e236:	4b0a      	ldr	r3, [pc, #40]	; (800e260 <UART_SetConfig+0x69c>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	f003 0320 	and.w	r3, r3, #32
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d009      	beq.n	800e256 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e242:	4b07      	ldr	r3, [pc, #28]	; (800e260 <UART_SetConfig+0x69c>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	08db      	lsrs	r3, r3, #3
 800e248:	f003 0303 	and.w	r3, r3, #3
 800e24c:	4a08      	ldr	r2, [pc, #32]	; (800e270 <UART_SetConfig+0x6ac>)
 800e24e:	fa22 f303 	lsr.w	r3, r2, r3
 800e252:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e254:	e01b      	b.n	800e28e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800e256:	4b06      	ldr	r3, [pc, #24]	; (800e270 <UART_SetConfig+0x6ac>)
 800e258:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e25a:	e018      	b.n	800e28e <UART_SetConfig+0x6ca>
 800e25c:	40011400 	.word	0x40011400
 800e260:	58024400 	.word	0x58024400
 800e264:	40007800 	.word	0x40007800
 800e268:	40007c00 	.word	0x40007c00
 800e26c:	58000c00 	.word	0x58000c00
 800e270:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e274:	4bc4      	ldr	r3, [pc, #784]	; (800e588 <UART_SetConfig+0x9c4>)
 800e276:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e278:	e009      	b.n	800e28e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e27a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e27e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e280:	e005      	b.n	800e28e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800e282:	2300      	movs	r3, #0
 800e284:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e286:	2301      	movs	r3, #1
 800e288:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e28c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e290:	2b00      	cmp	r3, #0
 800e292:	f000 81da 	beq.w	800e64a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e29a:	4abc      	ldr	r2, [pc, #752]	; (800e58c <UART_SetConfig+0x9c8>)
 800e29c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2a0:	461a      	mov	r2, r3
 800e2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800e2a8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	685a      	ldr	r2, [r3, #4]
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	005b      	lsls	r3, r3, #1
 800e2b2:	4413      	add	r3, r2
 800e2b4:	6a3a      	ldr	r2, [r7, #32]
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d305      	bcc.n	800e2c6 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	685b      	ldr	r3, [r3, #4]
 800e2be:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e2c0:	6a3a      	ldr	r2, [r7, #32]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d903      	bls.n	800e2ce <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e2cc:	e1bd      	b.n	800e64a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f04f 0100 	mov.w	r1, #0
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2da:	4aac      	ldr	r2, [pc, #688]	; (800e58c <UART_SetConfig+0x9c8>)
 800e2dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e2e0:	b29a      	uxth	r2, r3
 800e2e2:	f04f 0300 	mov.w	r3, #0
 800e2e6:	f7f2 fa0f 	bl	8000708 <__aeabi_uldivmod>
 800e2ea:	4602      	mov	r2, r0
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	4610      	mov	r0, r2
 800e2f0:	4619      	mov	r1, r3
 800e2f2:	f04f 0200 	mov.w	r2, #0
 800e2f6:	f04f 0300 	mov.w	r3, #0
 800e2fa:	020b      	lsls	r3, r1, #8
 800e2fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e300:	0202      	lsls	r2, r0, #8
 800e302:	6879      	ldr	r1, [r7, #4]
 800e304:	6849      	ldr	r1, [r1, #4]
 800e306:	0849      	lsrs	r1, r1, #1
 800e308:	4608      	mov	r0, r1
 800e30a:	f04f 0100 	mov.w	r1, #0
 800e30e:	1814      	adds	r4, r2, r0
 800e310:	eb43 0501 	adc.w	r5, r3, r1
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	461a      	mov	r2, r3
 800e31a:	f04f 0300 	mov.w	r3, #0
 800e31e:	4620      	mov	r0, r4
 800e320:	4629      	mov	r1, r5
 800e322:	f7f2 f9f1 	bl	8000708 <__aeabi_uldivmod>
 800e326:	4602      	mov	r2, r0
 800e328:	460b      	mov	r3, r1
 800e32a:	4613      	mov	r3, r2
 800e32c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e330:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e334:	d308      	bcc.n	800e348 <UART_SetConfig+0x784>
 800e336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e338:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e33c:	d204      	bcs.n	800e348 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e344:	60da      	str	r2, [r3, #12]
 800e346:	e180      	b.n	800e64a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800e348:	2301      	movs	r3, #1
 800e34a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e34e:	e17c      	b.n	800e64a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	69db      	ldr	r3, [r3, #28]
 800e354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e358:	f040 80be 	bne.w	800e4d8 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800e35c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e360:	2b20      	cmp	r3, #32
 800e362:	dc49      	bgt.n	800e3f8 <UART_SetConfig+0x834>
 800e364:	2b00      	cmp	r3, #0
 800e366:	db7c      	blt.n	800e462 <UART_SetConfig+0x89e>
 800e368:	2b20      	cmp	r3, #32
 800e36a:	d87a      	bhi.n	800e462 <UART_SetConfig+0x89e>
 800e36c:	a201      	add	r2, pc, #4	; (adr r2, 800e374 <UART_SetConfig+0x7b0>)
 800e36e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e372:	bf00      	nop
 800e374:	0800e3ff 	.word	0x0800e3ff
 800e378:	0800e407 	.word	0x0800e407
 800e37c:	0800e463 	.word	0x0800e463
 800e380:	0800e463 	.word	0x0800e463
 800e384:	0800e40f 	.word	0x0800e40f
 800e388:	0800e463 	.word	0x0800e463
 800e38c:	0800e463 	.word	0x0800e463
 800e390:	0800e463 	.word	0x0800e463
 800e394:	0800e41f 	.word	0x0800e41f
 800e398:	0800e463 	.word	0x0800e463
 800e39c:	0800e463 	.word	0x0800e463
 800e3a0:	0800e463 	.word	0x0800e463
 800e3a4:	0800e463 	.word	0x0800e463
 800e3a8:	0800e463 	.word	0x0800e463
 800e3ac:	0800e463 	.word	0x0800e463
 800e3b0:	0800e463 	.word	0x0800e463
 800e3b4:	0800e42f 	.word	0x0800e42f
 800e3b8:	0800e463 	.word	0x0800e463
 800e3bc:	0800e463 	.word	0x0800e463
 800e3c0:	0800e463 	.word	0x0800e463
 800e3c4:	0800e463 	.word	0x0800e463
 800e3c8:	0800e463 	.word	0x0800e463
 800e3cc:	0800e463 	.word	0x0800e463
 800e3d0:	0800e463 	.word	0x0800e463
 800e3d4:	0800e463 	.word	0x0800e463
 800e3d8:	0800e463 	.word	0x0800e463
 800e3dc:	0800e463 	.word	0x0800e463
 800e3e0:	0800e463 	.word	0x0800e463
 800e3e4:	0800e463 	.word	0x0800e463
 800e3e8:	0800e463 	.word	0x0800e463
 800e3ec:	0800e463 	.word	0x0800e463
 800e3f0:	0800e463 	.word	0x0800e463
 800e3f4:	0800e455 	.word	0x0800e455
 800e3f8:	2b40      	cmp	r3, #64	; 0x40
 800e3fa:	d02e      	beq.n	800e45a <UART_SetConfig+0x896>
 800e3fc:	e031      	b.n	800e462 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e3fe:	f7fb fe01 	bl	800a004 <HAL_RCC_GetPCLK1Freq>
 800e402:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e404:	e033      	b.n	800e46e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e406:	f7fb fe13 	bl	800a030 <HAL_RCC_GetPCLK2Freq>
 800e40a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e40c:	e02f      	b.n	800e46e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e40e:	f107 0314 	add.w	r3, r7, #20
 800e412:	4618      	mov	r0, r3
 800e414:	f7fc fd78 	bl	800af08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e41c:	e027      	b.n	800e46e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e41e:	f107 0308 	add.w	r3, r7, #8
 800e422:	4618      	mov	r0, r3
 800e424:	f7fc fec4 	bl	800b1b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e42c:	e01f      	b.n	800e46e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e42e:	4b58      	ldr	r3, [pc, #352]	; (800e590 <UART_SetConfig+0x9cc>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f003 0320 	and.w	r3, r3, #32
 800e436:	2b00      	cmp	r3, #0
 800e438:	d009      	beq.n	800e44e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e43a:	4b55      	ldr	r3, [pc, #340]	; (800e590 <UART_SetConfig+0x9cc>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	08db      	lsrs	r3, r3, #3
 800e440:	f003 0303 	and.w	r3, r3, #3
 800e444:	4a53      	ldr	r2, [pc, #332]	; (800e594 <UART_SetConfig+0x9d0>)
 800e446:	fa22 f303 	lsr.w	r3, r2, r3
 800e44a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e44c:	e00f      	b.n	800e46e <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800e44e:	4b51      	ldr	r3, [pc, #324]	; (800e594 <UART_SetConfig+0x9d0>)
 800e450:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e452:	e00c      	b.n	800e46e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e454:	4b4c      	ldr	r3, [pc, #304]	; (800e588 <UART_SetConfig+0x9c4>)
 800e456:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e458:	e009      	b.n	800e46e <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e45a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e45e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e460:	e005      	b.n	800e46e <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800e462:	2300      	movs	r3, #0
 800e464:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e466:	2301      	movs	r3, #1
 800e468:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e46c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e46e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e470:	2b00      	cmp	r3, #0
 800e472:	f000 80ea 	beq.w	800e64a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e47a:	4a44      	ldr	r2, [pc, #272]	; (800e58c <UART_SetConfig+0x9c8>)
 800e47c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e480:	461a      	mov	r2, r3
 800e482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e484:	fbb3 f3f2 	udiv	r3, r3, r2
 800e488:	005a      	lsls	r2, r3, #1
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	085b      	lsrs	r3, r3, #1
 800e490:	441a      	add	r2, r3
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	685b      	ldr	r3, [r3, #4]
 800e496:	fbb2 f3f3 	udiv	r3, r2, r3
 800e49a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e49e:	2b0f      	cmp	r3, #15
 800e4a0:	d916      	bls.n	800e4d0 <UART_SetConfig+0x90c>
 800e4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4a8:	d212      	bcs.n	800e4d0 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ac:	b29b      	uxth	r3, r3
 800e4ae:	f023 030f 	bic.w	r3, r3, #15
 800e4b2:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4b6:	085b      	lsrs	r3, r3, #1
 800e4b8:	b29b      	uxth	r3, r3
 800e4ba:	f003 0307 	and.w	r3, r3, #7
 800e4be:	b29a      	uxth	r2, r3
 800e4c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e4c2:	4313      	orrs	r3, r2
 800e4c4:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4cc:	60da      	str	r2, [r3, #12]
 800e4ce:	e0bc      	b.n	800e64a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e4d0:	2301      	movs	r3, #1
 800e4d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e4d6:	e0b8      	b.n	800e64a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e4d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e4dc:	2b20      	cmp	r3, #32
 800e4de:	dc4b      	bgt.n	800e578 <UART_SetConfig+0x9b4>
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	f2c0 8087 	blt.w	800e5f4 <UART_SetConfig+0xa30>
 800e4e6:	2b20      	cmp	r3, #32
 800e4e8:	f200 8084 	bhi.w	800e5f4 <UART_SetConfig+0xa30>
 800e4ec:	a201      	add	r2, pc, #4	; (adr r2, 800e4f4 <UART_SetConfig+0x930>)
 800e4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4f2:	bf00      	nop
 800e4f4:	0800e57f 	.word	0x0800e57f
 800e4f8:	0800e599 	.word	0x0800e599
 800e4fc:	0800e5f5 	.word	0x0800e5f5
 800e500:	0800e5f5 	.word	0x0800e5f5
 800e504:	0800e5a1 	.word	0x0800e5a1
 800e508:	0800e5f5 	.word	0x0800e5f5
 800e50c:	0800e5f5 	.word	0x0800e5f5
 800e510:	0800e5f5 	.word	0x0800e5f5
 800e514:	0800e5b1 	.word	0x0800e5b1
 800e518:	0800e5f5 	.word	0x0800e5f5
 800e51c:	0800e5f5 	.word	0x0800e5f5
 800e520:	0800e5f5 	.word	0x0800e5f5
 800e524:	0800e5f5 	.word	0x0800e5f5
 800e528:	0800e5f5 	.word	0x0800e5f5
 800e52c:	0800e5f5 	.word	0x0800e5f5
 800e530:	0800e5f5 	.word	0x0800e5f5
 800e534:	0800e5c1 	.word	0x0800e5c1
 800e538:	0800e5f5 	.word	0x0800e5f5
 800e53c:	0800e5f5 	.word	0x0800e5f5
 800e540:	0800e5f5 	.word	0x0800e5f5
 800e544:	0800e5f5 	.word	0x0800e5f5
 800e548:	0800e5f5 	.word	0x0800e5f5
 800e54c:	0800e5f5 	.word	0x0800e5f5
 800e550:	0800e5f5 	.word	0x0800e5f5
 800e554:	0800e5f5 	.word	0x0800e5f5
 800e558:	0800e5f5 	.word	0x0800e5f5
 800e55c:	0800e5f5 	.word	0x0800e5f5
 800e560:	0800e5f5 	.word	0x0800e5f5
 800e564:	0800e5f5 	.word	0x0800e5f5
 800e568:	0800e5f5 	.word	0x0800e5f5
 800e56c:	0800e5f5 	.word	0x0800e5f5
 800e570:	0800e5f5 	.word	0x0800e5f5
 800e574:	0800e5e7 	.word	0x0800e5e7
 800e578:	2b40      	cmp	r3, #64	; 0x40
 800e57a:	d037      	beq.n	800e5ec <UART_SetConfig+0xa28>
 800e57c:	e03a      	b.n	800e5f4 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e57e:	f7fb fd41 	bl	800a004 <HAL_RCC_GetPCLK1Freq>
 800e582:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e584:	e03c      	b.n	800e600 <UART_SetConfig+0xa3c>
 800e586:	bf00      	nop
 800e588:	003d0900 	.word	0x003d0900
 800e58c:	080129b8 	.word	0x080129b8
 800e590:	58024400 	.word	0x58024400
 800e594:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e598:	f7fb fd4a 	bl	800a030 <HAL_RCC_GetPCLK2Freq>
 800e59c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e59e:	e02f      	b.n	800e600 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5a0:	f107 0314 	add.w	r3, r7, #20
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f7fc fcaf 	bl	800af08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e5ae:	e027      	b.n	800e600 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5b0:	f107 0308 	add.w	r3, r7, #8
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f7fc fdfb 	bl	800b1b0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e5be:	e01f      	b.n	800e600 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5c0:	4b2c      	ldr	r3, [pc, #176]	; (800e674 <UART_SetConfig+0xab0>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f003 0320 	and.w	r3, r3, #32
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d009      	beq.n	800e5e0 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e5cc:	4b29      	ldr	r3, [pc, #164]	; (800e674 <UART_SetConfig+0xab0>)
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	08db      	lsrs	r3, r3, #3
 800e5d2:	f003 0303 	and.w	r3, r3, #3
 800e5d6:	4a28      	ldr	r2, [pc, #160]	; (800e678 <UART_SetConfig+0xab4>)
 800e5d8:	fa22 f303 	lsr.w	r3, r2, r3
 800e5dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e5de:	e00f      	b.n	800e600 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800e5e0:	4b25      	ldr	r3, [pc, #148]	; (800e678 <UART_SetConfig+0xab4>)
 800e5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e5e4:	e00c      	b.n	800e600 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e5e6:	4b25      	ldr	r3, [pc, #148]	; (800e67c <UART_SetConfig+0xab8>)
 800e5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e5ea:	e009      	b.n	800e600 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e5f2:	e005      	b.n	800e600 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e5fe:	bf00      	nop
    }

    if (pclk != 0U)
 800e600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e602:	2b00      	cmp	r3, #0
 800e604:	d021      	beq.n	800e64a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e60a:	4a1d      	ldr	r2, [pc, #116]	; (800e680 <UART_SetConfig+0xabc>)
 800e60c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e610:	461a      	mov	r2, r3
 800e612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e614:	fbb3 f2f2 	udiv	r2, r3, r2
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	685b      	ldr	r3, [r3, #4]
 800e61c:	085b      	lsrs	r3, r3, #1
 800e61e:	441a      	add	r2, r3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	685b      	ldr	r3, [r3, #4]
 800e624:	fbb2 f3f3 	udiv	r3, r2, r3
 800e628:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e62c:	2b0f      	cmp	r3, #15
 800e62e:	d909      	bls.n	800e644 <UART_SetConfig+0xa80>
 800e630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e636:	d205      	bcs.n	800e644 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63a:	b29a      	uxth	r2, r3
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	60da      	str	r2, [r3, #12]
 800e642:	e002      	b.n	800e64a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e644:	2301      	movs	r3, #1
 800e646:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2201      	movs	r2, #1
 800e64e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2201      	movs	r2, #1
 800e656:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	2200      	movs	r2, #0
 800e65e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e666:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3738      	adds	r7, #56	; 0x38
 800e66e:	46bd      	mov	sp, r7
 800e670:	bdb0      	pop	{r4, r5, r7, pc}
 800e672:	bf00      	nop
 800e674:	58024400 	.word	0x58024400
 800e678:	03d09000 	.word	0x03d09000
 800e67c:	003d0900 	.word	0x003d0900
 800e680:	080129b8 	.word	0x080129b8

0800e684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e684:	b480      	push	{r7}
 800e686:	b083      	sub	sp, #12
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e690:	f003 0301 	and.w	r3, r3, #1
 800e694:	2b00      	cmp	r3, #0
 800e696:	d00a      	beq.n	800e6ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	685b      	ldr	r3, [r3, #4]
 800e69e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	430a      	orrs	r2, r1
 800e6ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6b2:	f003 0302 	and.w	r3, r3, #2
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d00a      	beq.n	800e6d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	430a      	orrs	r2, r1
 800e6ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d4:	f003 0304 	and.w	r3, r3, #4
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d00a      	beq.n	800e6f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	430a      	orrs	r2, r1
 800e6f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6f6:	f003 0308 	and.w	r3, r3, #8
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00a      	beq.n	800e714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	685b      	ldr	r3, [r3, #4]
 800e704:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	430a      	orrs	r2, r1
 800e712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e718:	f003 0310 	and.w	r3, r3, #16
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00a      	beq.n	800e736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	689b      	ldr	r3, [r3, #8]
 800e726:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	430a      	orrs	r2, r1
 800e734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e73a:	f003 0320 	and.w	r3, r3, #32
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d00a      	beq.n	800e758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	689b      	ldr	r3, [r3, #8]
 800e748:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	430a      	orrs	r2, r1
 800e756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e75c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e760:	2b00      	cmp	r3, #0
 800e762:	d01a      	beq.n	800e79a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	430a      	orrs	r2, r1
 800e778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e77e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e782:	d10a      	bne.n	800e79a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	685b      	ldr	r3, [r3, #4]
 800e78a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	430a      	orrs	r2, r1
 800e798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e79e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d00a      	beq.n	800e7bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	685b      	ldr	r3, [r3, #4]
 800e7ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	430a      	orrs	r2, r1
 800e7ba:	605a      	str	r2, [r3, #4]
  }
}
 800e7bc:	bf00      	nop
 800e7be:	370c      	adds	r7, #12
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr

0800e7c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af02      	add	r7, sp, #8
 800e7ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e7d8:	f7f7 f8fe 	bl	80059d8 <HAL_GetTick>
 800e7dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	f003 0308 	and.w	r3, r3, #8
 800e7e8:	2b08      	cmp	r3, #8
 800e7ea:	d10e      	bne.n	800e80a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e7ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e7f0:	9300      	str	r3, [sp, #0]
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	f000 f82f 	bl	800e85e <UART_WaitOnFlagUntilTimeout>
 800e800:	4603      	mov	r3, r0
 800e802:	2b00      	cmp	r3, #0
 800e804:	d001      	beq.n	800e80a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e806:	2303      	movs	r3, #3
 800e808:	e025      	b.n	800e856 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f003 0304 	and.w	r3, r3, #4
 800e814:	2b04      	cmp	r3, #4
 800e816:	d10e      	bne.n	800e836 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	68fb      	ldr	r3, [r7, #12]
 800e820:	2200      	movs	r2, #0
 800e822:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f000 f819 	bl	800e85e <UART_WaitOnFlagUntilTimeout>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d001      	beq.n	800e836 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e832:	2303      	movs	r3, #3
 800e834:	e00f      	b.n	800e856 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	2220      	movs	r2, #32
 800e83a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2220      	movs	r2, #32
 800e842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	2200      	movs	r2, #0
 800e84a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e854:	2300      	movs	r3, #0
}
 800e856:	4618      	mov	r0, r3
 800e858:	3710      	adds	r7, #16
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}

0800e85e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e85e:	b580      	push	{r7, lr}
 800e860:	b09c      	sub	sp, #112	; 0x70
 800e862:	af00      	add	r7, sp, #0
 800e864:	60f8      	str	r0, [r7, #12]
 800e866:	60b9      	str	r1, [r7, #8]
 800e868:	603b      	str	r3, [r7, #0]
 800e86a:	4613      	mov	r3, r2
 800e86c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e86e:	e0a9      	b.n	800e9c4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e876:	f000 80a5 	beq.w	800e9c4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e87a:	f7f7 f8ad 	bl	80059d8 <HAL_GetTick>
 800e87e:	4602      	mov	r2, r0
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	1ad3      	subs	r3, r2, r3
 800e884:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e886:	429a      	cmp	r2, r3
 800e888:	d302      	bcc.n	800e890 <UART_WaitOnFlagUntilTimeout+0x32>
 800e88a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d140      	bne.n	800e912 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e898:	e853 3f00 	ldrex	r3, [r3]
 800e89c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e8a4:	667b      	str	r3, [r7, #100]	; 0x64
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e8ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e8b0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e8b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e8b6:	e841 2300 	strex	r3, r2, [r1]
 800e8ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e8bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d1e6      	bne.n	800e890 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	3308      	adds	r3, #8
 800e8c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8cc:	e853 3f00 	ldrex	r3, [r3]
 800e8d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8d4:	f023 0301 	bic.w	r3, r3, #1
 800e8d8:	663b      	str	r3, [r7, #96]	; 0x60
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	3308      	adds	r3, #8
 800e8e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e8e2:	64ba      	str	r2, [r7, #72]	; 0x48
 800e8e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e8e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e8ea:	e841 2300 	strex	r3, r2, [r1]
 800e8ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e8f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d1e5      	bne.n	800e8c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	2220      	movs	r2, #32
 800e8fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	2220      	movs	r2, #32
 800e902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	2200      	movs	r2, #0
 800e90a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e90e:	2303      	movs	r3, #3
 800e910:	e069      	b.n	800e9e6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f003 0304 	and.w	r3, r3, #4
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d051      	beq.n	800e9c4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	69db      	ldr	r3, [r3, #28]
 800e926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e92a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e92e:	d149      	bne.n	800e9c4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e938:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e942:	e853 3f00 	ldrex	r3, [r3]
 800e946:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e94e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	461a      	mov	r2, r3
 800e956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e958:	637b      	str	r3, [r7, #52]	; 0x34
 800e95a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e95c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e95e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e960:	e841 2300 	strex	r3, r2, [r1]
 800e964:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d1e6      	bne.n	800e93a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	3308      	adds	r3, #8
 800e972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	e853 3f00 	ldrex	r3, [r3]
 800e97a:	613b      	str	r3, [r7, #16]
   return(result);
 800e97c:	693b      	ldr	r3, [r7, #16]
 800e97e:	f023 0301 	bic.w	r3, r3, #1
 800e982:	66bb      	str	r3, [r7, #104]	; 0x68
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	3308      	adds	r3, #8
 800e98a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e98c:	623a      	str	r2, [r7, #32]
 800e98e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e990:	69f9      	ldr	r1, [r7, #28]
 800e992:	6a3a      	ldr	r2, [r7, #32]
 800e994:	e841 2300 	strex	r3, r2, [r1]
 800e998:	61bb      	str	r3, [r7, #24]
   return(result);
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d1e5      	bne.n	800e96c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	2220      	movs	r2, #32
 800e9a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2220      	movs	r2, #32
 800e9ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	2220      	movs	r2, #32
 800e9b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e9c0:	2303      	movs	r3, #3
 800e9c2:	e010      	b.n	800e9e6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	69da      	ldr	r2, [r3, #28]
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	4013      	ands	r3, r2
 800e9ce:	68ba      	ldr	r2, [r7, #8]
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	bf0c      	ite	eq
 800e9d4:	2301      	moveq	r3, #1
 800e9d6:	2300      	movne	r3, #0
 800e9d8:	b2db      	uxtb	r3, r3
 800e9da:	461a      	mov	r2, r3
 800e9dc:	79fb      	ldrb	r3, [r7, #7]
 800e9de:	429a      	cmp	r2, r3
 800e9e0:	f43f af46 	beq.w	800e870 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e9e4:	2300      	movs	r3, #0
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	3770      	adds	r7, #112	; 0x70
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd80      	pop	{r7, pc}
	...

0800e9f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b096      	sub	sp, #88	; 0x58
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	60f8      	str	r0, [r7, #12]
 800e9f8:	60b9      	str	r1, [r7, #8]
 800e9fa:	4613      	mov	r3, r2
 800e9fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	68ba      	ldr	r2, [r7, #8]
 800ea02:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	88fa      	ldrh	r2, [r7, #6]
 800ea08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	2200      	movs	r2, #0
 800ea10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2222      	movs	r2, #34	; 0x22
 800ea18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d02c      	beq.n	800ea7e <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea28:	4a42      	ldr	r2, [pc, #264]	; (800eb34 <UART_Start_Receive_DMA+0x144>)
 800ea2a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea30:	4a41      	ldr	r2, [pc, #260]	; (800eb38 <UART_Start_Receive_DMA+0x148>)
 800ea32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea38:	4a40      	ldr	r2, [pc, #256]	; (800eb3c <UART_Start_Receive_DMA+0x14c>)
 800ea3a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ea40:	2200      	movs	r2, #0
 800ea42:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	3324      	adds	r3, #36	; 0x24
 800ea4e:	4619      	mov	r1, r3
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea54:	461a      	mov	r2, r3
 800ea56:	88fb      	ldrh	r3, [r7, #6]
 800ea58:	f7f7 fe4c 	bl	80066f4 <HAL_DMA_Start_IT>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d00d      	beq.n	800ea7e <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2210      	movs	r2, #16
 800ea66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	2220      	movs	r2, #32
 800ea76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e055      	b.n	800eb2a <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	2200      	movs	r2, #0
 800ea82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	691b      	ldr	r3, [r3, #16]
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d018      	beq.n	800eac0 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea96:	e853 3f00 	ldrex	r3, [r3]
 800ea9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ea9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eaa2:	657b      	str	r3, [r7, #84]	; 0x54
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	461a      	mov	r2, r3
 800eaaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaac:	64bb      	str	r3, [r7, #72]	; 0x48
 800eaae:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eab0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eab2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eab4:	e841 2300 	strex	r3, r2, [r1]
 800eab8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800eaba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d1e6      	bne.n	800ea8e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	3308      	adds	r3, #8
 800eac6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaca:	e853 3f00 	ldrex	r3, [r3]
 800eace:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ead0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ead2:	f043 0301 	orr.w	r3, r3, #1
 800ead6:	653b      	str	r3, [r7, #80]	; 0x50
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	3308      	adds	r3, #8
 800eade:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eae0:	637a      	str	r2, [r7, #52]	; 0x34
 800eae2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eae4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800eae6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eae8:	e841 2300 	strex	r3, r2, [r1]
 800eaec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800eaee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d1e5      	bne.n	800eac0 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	3308      	adds	r3, #8
 800eafa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	e853 3f00 	ldrex	r3, [r3]
 800eb02:	613b      	str	r3, [r7, #16]
   return(result);
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	3308      	adds	r3, #8
 800eb12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eb14:	623a      	str	r2, [r7, #32]
 800eb16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb18:	69f9      	ldr	r1, [r7, #28]
 800eb1a:	6a3a      	ldr	r2, [r7, #32]
 800eb1c:	e841 2300 	strex	r3, r2, [r1]
 800eb20:	61bb      	str	r3, [r7, #24]
   return(result);
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d1e5      	bne.n	800eaf4 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3758      	adds	r7, #88	; 0x58
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}
 800eb32:	bf00      	nop
 800eb34:	0800ed43 	.word	0x0800ed43
 800eb38:	0800ee65 	.word	0x0800ee65
 800eb3c:	0800ee9d 	.word	0x0800ee9d

0800eb40 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b08f      	sub	sp, #60	; 0x3c
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb4e:	6a3b      	ldr	r3, [r7, #32]
 800eb50:	e853 3f00 	ldrex	r3, [r3]
 800eb54:	61fb      	str	r3, [r7, #28]
   return(result);
 800eb56:	69fb      	ldr	r3, [r7, #28]
 800eb58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800eb5c:	637b      	str	r3, [r7, #52]	; 0x34
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	461a      	mov	r2, r3
 800eb64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb68:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb6e:	e841 2300 	strex	r3, r2, [r1]
 800eb72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800eb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d1e6      	bne.n	800eb48 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	3308      	adds	r3, #8
 800eb80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	e853 3f00 	ldrex	r3, [r3]
 800eb88:	60bb      	str	r3, [r7, #8]
   return(result);
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800eb90:	633b      	str	r3, [r7, #48]	; 0x30
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	3308      	adds	r3, #8
 800eb98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb9a:	61ba      	str	r2, [r7, #24]
 800eb9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eb9e:	6979      	ldr	r1, [r7, #20]
 800eba0:	69ba      	ldr	r2, [r7, #24]
 800eba2:	e841 2300 	strex	r3, r2, [r1]
 800eba6:	613b      	str	r3, [r7, #16]
   return(result);
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d1e5      	bne.n	800eb7a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2220      	movs	r2, #32
 800ebb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800ebb6:	bf00      	nop
 800ebb8:	373c      	adds	r7, #60	; 0x3c
 800ebba:	46bd      	mov	sp, r7
 800ebbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc0:	4770      	bx	lr
	...

0800ebc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b095      	sub	sp, #84	; 0x54
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebd4:	e853 3f00 	ldrex	r3, [r3]
 800ebd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ebda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ebe0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	461a      	mov	r2, r3
 800ebe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebea:	643b      	str	r3, [r7, #64]	; 0x40
 800ebec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ebf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ebf2:	e841 2300 	strex	r3, r2, [r1]
 800ebf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ebf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d1e6      	bne.n	800ebcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	3308      	adds	r3, #8
 800ec04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec06:	6a3b      	ldr	r3, [r7, #32]
 800ec08:	e853 3f00 	ldrex	r3, [r3]
 800ec0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ec0e:	69fa      	ldr	r2, [r7, #28]
 800ec10:	4b1e      	ldr	r3, [pc, #120]	; (800ec8c <UART_EndRxTransfer+0xc8>)
 800ec12:	4013      	ands	r3, r2
 800ec14:	64bb      	str	r3, [r7, #72]	; 0x48
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	3308      	adds	r3, #8
 800ec1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ec20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ec24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ec26:	e841 2300 	strex	r3, r2, [r1]
 800ec2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ec2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d1e5      	bne.n	800ebfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec36:	2b01      	cmp	r3, #1
 800ec38:	d118      	bne.n	800ec6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	e853 3f00 	ldrex	r3, [r3]
 800ec46:	60bb      	str	r3, [r7, #8]
   return(result);
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	f023 0310 	bic.w	r3, r3, #16
 800ec4e:	647b      	str	r3, [r7, #68]	; 0x44
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	461a      	mov	r2, r3
 800ec56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ec58:	61bb      	str	r3, [r7, #24]
 800ec5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec5c:	6979      	ldr	r1, [r7, #20]
 800ec5e:	69ba      	ldr	r2, [r7, #24]
 800ec60:	e841 2300 	strex	r3, r2, [r1]
 800ec64:	613b      	str	r3, [r7, #16]
   return(result);
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1e6      	bne.n	800ec3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	2220      	movs	r2, #32
 800ec70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2200      	movs	r2, #0
 800ec78:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2200      	movs	r2, #0
 800ec7e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ec80:	bf00      	nop
 800ec82:	3754      	adds	r7, #84	; 0x54
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr
 800ec8c:	effffffe 	.word	0xeffffffe

0800ec90 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b090      	sub	sp, #64	; 0x40
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec9c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	69db      	ldr	r3, [r3, #28]
 800eca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eca6:	d037      	beq.n	800ed18 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800eca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ecb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	3308      	adds	r3, #8
 800ecb6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecba:	e853 3f00 	ldrex	r3, [r3]
 800ecbe:	623b      	str	r3, [r7, #32]
   return(result);
 800ecc0:	6a3b      	ldr	r3, [r7, #32]
 800ecc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ecc6:	63bb      	str	r3, [r7, #56]	; 0x38
 800ecc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	3308      	adds	r3, #8
 800ecce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ecd0:	633a      	str	r2, [r7, #48]	; 0x30
 800ecd2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecd4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ecd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecd8:	e841 2300 	strex	r3, r2, [r1]
 800ecdc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ecde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d1e5      	bne.n	800ecb0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ece4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	e853 3f00 	ldrex	r3, [r3]
 800ecf0:	60fb      	str	r3, [r7, #12]
   return(result);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecf8:	637b      	str	r3, [r7, #52]	; 0x34
 800ecfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	461a      	mov	r2, r3
 800ed00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed02:	61fb      	str	r3, [r7, #28]
 800ed04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed06:	69b9      	ldr	r1, [r7, #24]
 800ed08:	69fa      	ldr	r2, [r7, #28]
 800ed0a:	e841 2300 	strex	r3, r2, [r1]
 800ed0e:	617b      	str	r3, [r7, #20]
   return(result);
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d1e6      	bne.n	800ece4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ed16:	e002      	b.n	800ed1e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800ed18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800ed1a:	f7fe ff2b 	bl	800db74 <HAL_UART_TxCpltCallback>
}
 800ed1e:	bf00      	nop
 800ed20:	3740      	adds	r7, #64	; 0x40
 800ed22:	46bd      	mov	sp, r7
 800ed24:	bd80      	pop	{r7, pc}

0800ed26 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ed26:	b580      	push	{r7, lr}
 800ed28:	b084      	sub	sp, #16
 800ed2a:	af00      	add	r7, sp, #0
 800ed2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	f7fe ff27 	bl	800db88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed3a:	bf00      	nop
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ed42:	b580      	push	{r7, lr}
 800ed44:	b09c      	sub	sp, #112	; 0x70
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed4e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	69db      	ldr	r3, [r3, #28]
 800ed54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed58:	d071      	beq.n	800ee3e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ed5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ed62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed6a:	e853 3f00 	ldrex	r3, [r3]
 800ed6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ed70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ed76:	66bb      	str	r3, [r7, #104]	; 0x68
 800ed78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ed80:	65bb      	str	r3, [r7, #88]	; 0x58
 800ed82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ed86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed88:	e841 2300 	strex	r3, r2, [r1]
 800ed8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ed8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d1e6      	bne.n	800ed62 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	3308      	adds	r3, #8
 800ed9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9e:	e853 3f00 	ldrex	r3, [r3]
 800eda2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800eda4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eda6:	f023 0301 	bic.w	r3, r3, #1
 800edaa:	667b      	str	r3, [r7, #100]	; 0x64
 800edac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	3308      	adds	r3, #8
 800edb2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800edb4:	647a      	str	r2, [r7, #68]	; 0x44
 800edb6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edb8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800edba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800edbc:	e841 2300 	strex	r3, r2, [r1]
 800edc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800edc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d1e5      	bne.n	800ed94 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800edc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	3308      	adds	r3, #8
 800edce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edd2:	e853 3f00 	ldrex	r3, [r3]
 800edd6:	623b      	str	r3, [r7, #32]
   return(result);
 800edd8:	6a3b      	ldr	r3, [r7, #32]
 800edda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edde:	663b      	str	r3, [r7, #96]	; 0x60
 800ede0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	3308      	adds	r3, #8
 800ede6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ede8:	633a      	str	r2, [r7, #48]	; 0x30
 800edea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800edee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edf0:	e841 2300 	strex	r3, r2, [r1]
 800edf4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800edf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d1e5      	bne.n	800edc8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800edfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800edfe:	2220      	movs	r2, #32
 800ee00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee08:	2b01      	cmp	r3, #1
 800ee0a:	d118      	bne.n	800ee3e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee12:	693b      	ldr	r3, [r7, #16]
 800ee14:	e853 3f00 	ldrex	r3, [r3]
 800ee18:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	f023 0310 	bic.w	r3, r3, #16
 800ee20:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ee22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	461a      	mov	r2, r3
 800ee28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee2a:	61fb      	str	r3, [r7, #28]
 800ee2c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee2e:	69b9      	ldr	r1, [r7, #24]
 800ee30:	69fa      	ldr	r2, [r7, #28]
 800ee32:	e841 2300 	strex	r3, r2, [r1]
 800ee36:	617b      	str	r3, [r7, #20]
   return(result);
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d1e6      	bne.n	800ee0c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d107      	bne.n	800ee56 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ee46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ee48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ee50:	f7f2 febc 	bl	8001bcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ee54:	e002      	b.n	800ee5c <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ee56:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ee58:	f7f4 ff44 	bl	8003ce4 <HAL_UART_RxCpltCallback>
}
 800ee5c:	bf00      	nop
 800ee5e:	3770      	adds	r7, #112	; 0x70
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee70:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee76:	2b01      	cmp	r3, #1
 800ee78:	d109      	bne.n	800ee8e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ee80:	085b      	lsrs	r3, r3, #1
 800ee82:	b29b      	uxth	r3, r3
 800ee84:	4619      	mov	r1, r3
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f7f2 fea0 	bl	8001bcc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ee8c:	e002      	b.n	800ee94 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800ee8e:	68f8      	ldr	r0, [r7, #12]
 800ee90:	f7fe fe84 	bl	800db9c <HAL_UART_RxHalfCpltCallback>
}
 800ee94:	bf00      	nop
 800ee96:	3710      	adds	r7, #16
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b086      	sub	sp, #24
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eea8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeb0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eeb8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eeba:	697b      	ldr	r3, [r7, #20]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	689b      	ldr	r3, [r3, #8]
 800eec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eec4:	2b80      	cmp	r3, #128	; 0x80
 800eec6:	d109      	bne.n	800eedc <UART_DMAError+0x40>
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	2b21      	cmp	r3, #33	; 0x21
 800eecc:	d106      	bne.n	800eedc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eece:	697b      	ldr	r3, [r7, #20]
 800eed0:	2200      	movs	r2, #0
 800eed2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800eed6:	6978      	ldr	r0, [r7, #20]
 800eed8:	f7ff fe32 	bl	800eb40 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eedc:	697b      	ldr	r3, [r7, #20]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	689b      	ldr	r3, [r3, #8]
 800eee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eee6:	2b40      	cmp	r3, #64	; 0x40
 800eee8:	d109      	bne.n	800eefe <UART_DMAError+0x62>
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2b22      	cmp	r3, #34	; 0x22
 800eeee:	d106      	bne.n	800eefe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	2200      	movs	r2, #0
 800eef4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800eef8:	6978      	ldr	r0, [r7, #20]
 800eefa:	f7ff fe63 	bl	800ebc4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eefe:	697b      	ldr	r3, [r7, #20]
 800ef00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef04:	f043 0210 	orr.w	r2, r3, #16
 800ef08:	697b      	ldr	r3, [r7, #20]
 800ef0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ef0e:	6978      	ldr	r0, [r7, #20]
 800ef10:	f7fe fe4e 	bl	800dbb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef14:	bf00      	nop
 800ef16:	3718      	adds	r7, #24
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2200      	movs	r2, #0
 800ef36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ef3a:	68f8      	ldr	r0, [r7, #12]
 800ef3c:	f7fe fe38 	bl	800dbb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef40:	bf00      	nop
 800ef42:	3710      	adds	r7, #16
 800ef44:	46bd      	mov	sp, r7
 800ef46:	bd80      	pop	{r7, pc}

0800ef48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b088      	sub	sp, #32
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	e853 3f00 	ldrex	r3, [r3]
 800ef5c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef64:	61fb      	str	r3, [r7, #28]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	69fb      	ldr	r3, [r7, #28]
 800ef6e:	61bb      	str	r3, [r7, #24]
 800ef70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef72:	6979      	ldr	r1, [r7, #20]
 800ef74:	69ba      	ldr	r2, [r7, #24]
 800ef76:	e841 2300 	strex	r3, r2, [r1]
 800ef7a:	613b      	str	r3, [r7, #16]
   return(result);
 800ef7c:	693b      	ldr	r3, [r7, #16]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d1e6      	bne.n	800ef50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	2220      	movs	r2, #32
 800ef86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f7fe fdef 	bl	800db74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef96:	bf00      	nop
 800ef98:	3720      	adds	r7, #32
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}

0800ef9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ef9e:	b480      	push	{r7}
 800efa0:	b083      	sub	sp, #12
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800efa6:	bf00      	nop
 800efa8:	370c      	adds	r7, #12
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr

0800efb2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800efb2:	b480      	push	{r7}
 800efb4:	b083      	sub	sp, #12
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800efba:	bf00      	nop
 800efbc:	370c      	adds	r7, #12
 800efbe:	46bd      	mov	sp, r7
 800efc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc4:	4770      	bx	lr

0800efc6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800efc6:	b480      	push	{r7}
 800efc8:	b083      	sub	sp, #12
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800efce:	bf00      	nop
 800efd0:	370c      	adds	r7, #12
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr

0800efda <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800efda:	b580      	push	{r7, lr}
 800efdc:	b084      	sub	sp, #16
 800efde:	af00      	add	r7, sp, #0
 800efe0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800efe8:	2b01      	cmp	r3, #1
 800efea:	d101      	bne.n	800eff0 <HAL_UARTEx_EnableFifoMode+0x16>
 800efec:	2302      	movs	r3, #2
 800efee:	e02b      	b.n	800f048 <HAL_UARTEx_EnableFifoMode+0x6e>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	2201      	movs	r2, #1
 800eff4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	2224      	movs	r2, #36	; 0x24
 800effc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	681a      	ldr	r2, [r3, #0]
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f022 0201 	bic.w	r2, r2, #1
 800f016:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f01e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f026:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f000 f91f 	bl	800f274 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2220      	movs	r2, #32
 800f03a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2200      	movs	r2, #0
 800f042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f046:	2300      	movs	r3, #0
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3710      	adds	r7, #16
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f050:	b480      	push	{r7}
 800f052:	b085      	sub	sp, #20
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f05e:	2b01      	cmp	r3, #1
 800f060:	d101      	bne.n	800f066 <HAL_UARTEx_DisableFifoMode+0x16>
 800f062:	2302      	movs	r3, #2
 800f064:	e027      	b.n	800f0b6 <HAL_UARTEx_DisableFifoMode+0x66>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2201      	movs	r2, #1
 800f06a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	2224      	movs	r2, #36	; 0x24
 800f072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	681a      	ldr	r2, [r3, #0]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f022 0201 	bic.w	r2, r2, #1
 800f08c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f094:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2200      	movs	r2, #0
 800f09a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	681b      	ldr	r3, [r3, #0]
 800f0a0:	68fa      	ldr	r2, [r7, #12]
 800f0a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2220      	movs	r2, #32
 800f0a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f0b4:	2300      	movs	r3, #0
}
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	3714      	adds	r7, #20
 800f0ba:	46bd      	mov	sp, r7
 800f0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c0:	4770      	bx	lr

0800f0c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f0c2:	b580      	push	{r7, lr}
 800f0c4:	b084      	sub	sp, #16
 800f0c6:	af00      	add	r7, sp, #0
 800f0c8:	6078      	str	r0, [r7, #4]
 800f0ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	d101      	bne.n	800f0da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f0d6:	2302      	movs	r3, #2
 800f0d8:	e02d      	b.n	800f136 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2201      	movs	r2, #1
 800f0de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	2224      	movs	r2, #36	; 0x24
 800f0e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f022 0201 	bic.w	r2, r2, #1
 800f100:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	683a      	ldr	r2, [r7, #0]
 800f112:	430a      	orrs	r2, r1
 800f114:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f000 f8ac 	bl	800f274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	68fa      	ldr	r2, [r7, #12]
 800f122:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2220      	movs	r2, #32
 800f128:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	2200      	movs	r2, #0
 800f130:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f134:	2300      	movs	r3, #0
}
 800f136:	4618      	mov	r0, r3
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}

0800f13e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f13e:	b580      	push	{r7, lr}
 800f140:	b084      	sub	sp, #16
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
 800f146:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f14e:	2b01      	cmp	r3, #1
 800f150:	d101      	bne.n	800f156 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f152:	2302      	movs	r3, #2
 800f154:	e02d      	b.n	800f1b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	2201      	movs	r2, #1
 800f15a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2224      	movs	r2, #36	; 0x24
 800f162:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	681a      	ldr	r2, [r3, #0]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f022 0201 	bic.w	r2, r2, #1
 800f17c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	689b      	ldr	r3, [r3, #8]
 800f184:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	683a      	ldr	r2, [r7, #0]
 800f18e:	430a      	orrs	r2, r1
 800f190:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f000 f86e 	bl	800f274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	68fa      	ldr	r2, [r7, #12]
 800f19e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	2220      	movs	r2, #32
 800f1a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f1b0:	2300      	movs	r3, #0
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3710      	adds	r7, #16
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}

0800f1ba <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f1ba:	b580      	push	{r7, lr}
 800f1bc:	b08c      	sub	sp, #48	; 0x30
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	60f8      	str	r0, [r7, #12]
 800f1c2:	60b9      	str	r1, [r7, #8]
 800f1c4:	4613      	mov	r3, r2
 800f1c6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f1ce:	2b20      	cmp	r3, #32
 800f1d0:	d14a      	bne.n	800f268 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d002      	beq.n	800f1de <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800f1d8:	88fb      	ldrh	r3, [r7, #6]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d101      	bne.n	800f1e2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800f1de:	2301      	movs	r3, #1
 800f1e0:	e043      	b.n	800f26a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f1e8:	2b01      	cmp	r3, #1
 800f1ea:	d101      	bne.n	800f1f0 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800f1ec:	2302      	movs	r3, #2
 800f1ee:	e03c      	b.n	800f26a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800f1fe:	88fb      	ldrh	r3, [r7, #6]
 800f200:	461a      	mov	r2, r3
 800f202:	68b9      	ldr	r1, [r7, #8]
 800f204:	68f8      	ldr	r0, [r7, #12]
 800f206:	f7ff fbf3 	bl	800e9f0 <UART_Start_Receive_DMA>
 800f20a:	4603      	mov	r3, r0
 800f20c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800f210:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f214:	2b00      	cmp	r3, #0
 800f216:	d124      	bne.n	800f262 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d11d      	bne.n	800f25c <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	2210      	movs	r2, #16
 800f226:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f22e:	69bb      	ldr	r3, [r7, #24]
 800f230:	e853 3f00 	ldrex	r3, [r3]
 800f234:	617b      	str	r3, [r7, #20]
   return(result);
 800f236:	697b      	ldr	r3, [r7, #20]
 800f238:	f043 0310 	orr.w	r3, r3, #16
 800f23c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	461a      	mov	r2, r3
 800f244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f246:	627b      	str	r3, [r7, #36]	; 0x24
 800f248:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f24a:	6a39      	ldr	r1, [r7, #32]
 800f24c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f24e:	e841 2300 	strex	r3, r2, [r1]
 800f252:	61fb      	str	r3, [r7, #28]
   return(result);
 800f254:	69fb      	ldr	r3, [r7, #28]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d1e6      	bne.n	800f228 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800f25a:	e002      	b.n	800f262 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800f25c:	2301      	movs	r3, #1
 800f25e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800f262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f266:	e000      	b.n	800f26a <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800f268:	2302      	movs	r3, #2
  }
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	3730      	adds	r7, #48	; 0x30
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}
	...

0800f274 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f274:	b480      	push	{r7}
 800f276:	b085      	sub	sp, #20
 800f278:	af00      	add	r7, sp, #0
 800f27a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f280:	2b00      	cmp	r3, #0
 800f282:	d108      	bne.n	800f296 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2201      	movs	r2, #1
 800f288:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2201      	movs	r2, #1
 800f290:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f294:	e031      	b.n	800f2fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f296:	2310      	movs	r3, #16
 800f298:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f29a:	2310      	movs	r3, #16
 800f29c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	689b      	ldr	r3, [r3, #8]
 800f2a4:	0e5b      	lsrs	r3, r3, #25
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	f003 0307 	and.w	r3, r3, #7
 800f2ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	689b      	ldr	r3, [r3, #8]
 800f2b4:	0f5b      	lsrs	r3, r3, #29
 800f2b6:	b2db      	uxtb	r3, r3
 800f2b8:	f003 0307 	and.w	r3, r3, #7
 800f2bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f2be:	7bbb      	ldrb	r3, [r7, #14]
 800f2c0:	7b3a      	ldrb	r2, [r7, #12]
 800f2c2:	4911      	ldr	r1, [pc, #68]	; (800f308 <UARTEx_SetNbDataToProcess+0x94>)
 800f2c4:	5c8a      	ldrb	r2, [r1, r2]
 800f2c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f2ca:	7b3a      	ldrb	r2, [r7, #12]
 800f2cc:	490f      	ldr	r1, [pc, #60]	; (800f30c <UARTEx_SetNbDataToProcess+0x98>)
 800f2ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f2d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f2d4:	b29a      	uxth	r2, r3
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f2dc:	7bfb      	ldrb	r3, [r7, #15]
 800f2de:	7b7a      	ldrb	r2, [r7, #13]
 800f2e0:	4909      	ldr	r1, [pc, #36]	; (800f308 <UARTEx_SetNbDataToProcess+0x94>)
 800f2e2:	5c8a      	ldrb	r2, [r1, r2]
 800f2e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f2e8:	7b7a      	ldrb	r2, [r7, #13]
 800f2ea:	4908      	ldr	r1, [pc, #32]	; (800f30c <UARTEx_SetNbDataToProcess+0x98>)
 800f2ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f2ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800f2f2:	b29a      	uxth	r2, r3
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f2fa:	bf00      	nop
 800f2fc:	3714      	adds	r7, #20
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr
 800f306:	bf00      	nop
 800f308:	080129d0 	.word	0x080129d0
 800f30c:	080129d8 	.word	0x080129d8

0800f310 <sinf_poly>:
 800f310:	07cb      	lsls	r3, r1, #31
 800f312:	d412      	bmi.n	800f33a <sinf_poly+0x2a>
 800f314:	ee21 6b00 	vmul.f64	d6, d1, d0
 800f318:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800f31c:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800f320:	eea5 7b01 	vfma.f64	d7, d5, d1
 800f324:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800f328:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f32c:	eea5 0b06 	vfma.f64	d0, d5, d6
 800f330:	eea7 0b01 	vfma.f64	d0, d7, d1
 800f334:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f338:	4770      	bx	lr
 800f33a:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800f33e:	ee21 6b01 	vmul.f64	d6, d1, d1
 800f342:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800f346:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800f34a:	eea1 7b05 	vfma.f64	d7, d1, d5
 800f34e:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800f352:	eea1 0b05 	vfma.f64	d0, d1, d5
 800f356:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800f35a:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f35e:	eea6 0b05 	vfma.f64	d0, d6, d5
 800f362:	e7e5      	b.n	800f330 <sinf_poly+0x20>
 800f364:	0000      	movs	r0, r0
	...

0800f368 <cosf>:
 800f368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f36a:	ee10 4a10 	vmov	r4, s0
 800f36e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800f372:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800f376:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800f37a:	d20c      	bcs.n	800f396 <cosf+0x2e>
 800f37c:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f380:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800f384:	d378      	bcc.n	800f478 <cosf+0x110>
 800f386:	eeb0 0b46 	vmov.f64	d0, d6
 800f38a:	483f      	ldr	r0, [pc, #252]	; (800f488 <cosf+0x120>)
 800f38c:	2101      	movs	r1, #1
 800f38e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f392:	f7ff bfbd 	b.w	800f310 <sinf_poly>
 800f396:	f240 422e 	movw	r2, #1070	; 0x42e
 800f39a:	4293      	cmp	r3, r2
 800f39c:	d826      	bhi.n	800f3ec <cosf+0x84>
 800f39e:	4b3a      	ldr	r3, [pc, #232]	; (800f488 <cosf+0x120>)
 800f3a0:	ed93 7b08 	vldr	d7, [r3, #32]
 800f3a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f3a8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f3ac:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800f3b0:	ee17 1a90 	vmov	r1, s15
 800f3b4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800f3b8:	1609      	asrs	r1, r1, #24
 800f3ba:	ee07 1a90 	vmov	s15, r1
 800f3be:	f001 0203 	and.w	r2, r1, #3
 800f3c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f3c6:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800f3ca:	ed92 0b00 	vldr	d0, [r2]
 800f3ce:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800f3d2:	f011 0f02 	tst.w	r1, #2
 800f3d6:	eea5 6b47 	vfms.f64	d6, d5, d7
 800f3da:	f081 0101 	eor.w	r1, r1, #1
 800f3de:	bf08      	it	eq
 800f3e0:	4618      	moveq	r0, r3
 800f3e2:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f3e6:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f3ea:	e7d0      	b.n	800f38e <cosf+0x26>
 800f3ec:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800f3f0:	d23e      	bcs.n	800f470 <cosf+0x108>
 800f3f2:	4b26      	ldr	r3, [pc, #152]	; (800f48c <cosf+0x124>)
 800f3f4:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800f3f8:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800f3fc:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800f400:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800f404:	6a06      	ldr	r6, [r0, #32]
 800f406:	6900      	ldr	r0, [r0, #16]
 800f408:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800f40c:	40a9      	lsls	r1, r5
 800f40e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f412:	fba1 6706 	umull	r6, r7, r1, r6
 800f416:	fb05 f301 	mul.w	r3, r5, r1
 800f41a:	463a      	mov	r2, r7
 800f41c:	fbe0 2301 	umlal	r2, r3, r0, r1
 800f420:	1c11      	adds	r1, r2, #0
 800f422:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800f426:	2000      	movs	r0, #0
 800f428:	1a10      	subs	r0, r2, r0
 800f42a:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800f42e:	eb63 0101 	sbc.w	r1, r3, r1
 800f432:	f7f1 f93b 	bl	80006ac <__aeabi_l2d>
 800f436:	0fb5      	lsrs	r5, r6, #30
 800f438:	4b13      	ldr	r3, [pc, #76]	; (800f488 <cosf+0x120>)
 800f43a:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800f43e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 800f480 <cosf+0x118>
 800f442:	ec41 0b17 	vmov	d7, r0, r1
 800f446:	f004 0203 	and.w	r2, r4, #3
 800f44a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f44e:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f452:	ed92 7b00 	vldr	d7, [r2]
 800f456:	ee20 1b00 	vmul.f64	d1, d0, d0
 800f45a:	f014 0f02 	tst.w	r4, #2
 800f45e:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800f462:	f085 0101 	eor.w	r1, r5, #1
 800f466:	bf08      	it	eq
 800f468:	4618      	moveq	r0, r3
 800f46a:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f46e:	e78e      	b.n	800f38e <cosf+0x26>
 800f470:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f474:	f000 b817 	b.w	800f4a6 <__math_invalidf>
 800f478:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f47e:	bf00      	nop
 800f480:	54442d18 	.word	0x54442d18
 800f484:	3c1921fb 	.word	0x3c1921fb
 800f488:	08013a88 	.word	0x08013a88
 800f48c:	08013a28 	.word	0x08013a28

0800f490 <with_errnof>:
 800f490:	b513      	push	{r0, r1, r4, lr}
 800f492:	4604      	mov	r4, r0
 800f494:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f498:	f000 fdee 	bl	8010078 <__errno>
 800f49c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f4a0:	6004      	str	r4, [r0, #0]
 800f4a2:	b002      	add	sp, #8
 800f4a4:	bd10      	pop	{r4, pc}

0800f4a6 <__math_invalidf>:
 800f4a6:	eef0 7a40 	vmov.f32	s15, s0
 800f4aa:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f4ae:	eef4 7a67 	vcmp.f32	s15, s15
 800f4b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4b6:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800f4ba:	d602      	bvs.n	800f4c2 <__math_invalidf+0x1c>
 800f4bc:	2021      	movs	r0, #33	; 0x21
 800f4be:	f7ff bfe7 	b.w	800f490 <with_errnof>
 800f4c2:	4770      	bx	lr

0800f4c4 <checkint>:
 800f4c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f4c8:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4d0:	dd2b      	ble.n	800f52a <checkint+0x66>
 800f4d2:	f240 4333 	movw	r3, #1075	; 0x433
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	dc25      	bgt.n	800f526 <checkint+0x62>
 800f4da:	1a9b      	subs	r3, r3, r2
 800f4dc:	f1a3 0620 	sub.w	r6, r3, #32
 800f4e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f4e4:	fa02 f606 	lsl.w	r6, r2, r6
 800f4e8:	fa02 f403 	lsl.w	r4, r2, r3
 800f4ec:	f1c3 0520 	rsb	r5, r3, #32
 800f4f0:	4334      	orrs	r4, r6
 800f4f2:	fa22 f505 	lsr.w	r5, r2, r5
 800f4f6:	432c      	orrs	r4, r5
 800f4f8:	409a      	lsls	r2, r3
 800f4fa:	ea20 0602 	bic.w	r6, r0, r2
 800f4fe:	ea21 0704 	bic.w	r7, r1, r4
 800f502:	ea56 0207 	orrs.w	r2, r6, r7
 800f506:	f1a3 0420 	sub.w	r4, r3, #32
 800f50a:	f1c3 0220 	rsb	r2, r3, #32
 800f50e:	d10c      	bne.n	800f52a <checkint+0x66>
 800f510:	40d8      	lsrs	r0, r3
 800f512:	fa01 f302 	lsl.w	r3, r1, r2
 800f516:	4318      	orrs	r0, r3
 800f518:	40e1      	lsrs	r1, r4
 800f51a:	4308      	orrs	r0, r1
 800f51c:	f000 0301 	and.w	r3, r0, #1
 800f520:	f1c3 0002 	rsb	r0, r3, #2
 800f524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f526:	2002      	movs	r0, #2
 800f528:	e7fc      	b.n	800f524 <checkint+0x60>
 800f52a:	2000      	movs	r0, #0
 800f52c:	e7fa      	b.n	800f524 <checkint+0x60>
	...

0800f530 <pow>:
 800f530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f534:	ed2d 8b0a 	vpush	{d8-d12}
 800f538:	b09b      	sub	sp, #108	; 0x6c
 800f53a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f53e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f542:	ed8d 1b00 	vstr	d1, [sp]
 800f546:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800f54a:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f54e:	f109 30ff 	add.w	r0, r9, #4294967295
 800f552:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800f556:	4288      	cmp	r0, r1
 800f558:	46cc      	mov	ip, r9
 800f55a:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800f55e:	d806      	bhi.n	800f56e <pow+0x3e>
 800f560:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800f564:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800f568:	297f      	cmp	r1, #127	; 0x7f
 800f56a:	f240 81ab 	bls.w	800f8c4 <pow+0x394>
 800f56e:	19b1      	adds	r1, r6, r6
 800f570:	9104      	str	r1, [sp, #16]
 800f572:	eb47 0107 	adc.w	r1, r7, r7
 800f576:	9105      	str	r1, [sp, #20]
 800f578:	9904      	ldr	r1, [sp, #16]
 800f57a:	f111 31ff 	adds.w	r1, r1, #4294967295
 800f57e:	460a      	mov	r2, r1
 800f580:	9905      	ldr	r1, [sp, #20]
 800f582:	f141 31ff 	adc.w	r1, r1, #4294967295
 800f586:	460b      	mov	r3, r1
 800f588:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800f58c:	f06f 0001 	mvn.w	r0, #1
 800f590:	4299      	cmp	r1, r3
 800f592:	bf08      	it	eq
 800f594:	4290      	cmpeq	r0, r2
 800f596:	d260      	bcs.n	800f65a <pow+0x12a>
 800f598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f59c:	4313      	orrs	r3, r2
 800f59e:	d11a      	bne.n	800f5d6 <pow+0xa6>
 800f5a0:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800f5a4:	1923      	adds	r3, r4, r4
 800f5a6:	930c      	str	r3, [sp, #48]	; 0x30
 800f5a8:	eb42 0302 	adc.w	r3, r2, r2
 800f5ac:	930d      	str	r3, [sp, #52]	; 0x34
 800f5ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f5b2:	4bcf      	ldr	r3, [pc, #828]	; (800f8f0 <pow+0x3c0>)
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	428b      	cmp	r3, r1
 800f5b8:	bf08      	it	eq
 800f5ba:	4282      	cmpeq	r2, r0
 800f5bc:	f080 8265 	bcs.w	800fa8a <pow+0x55a>
 800f5c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5c4:	ed9d 6b00 	vldr	d6, [sp]
 800f5c8:	ee37 0b06 	vadd.f64	d0, d7, d6
 800f5cc:	b01b      	add	sp, #108	; 0x6c
 800f5ce:	ecbd 8b0a 	vpop	{d8-d12}
 800f5d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5d6:	49c7      	ldr	r1, [pc, #796]	; (800f8f4 <pow+0x3c4>)
 800f5d8:	2000      	movs	r0, #0
 800f5da:	428d      	cmp	r5, r1
 800f5dc:	bf08      	it	eq
 800f5de:	4284      	cmpeq	r4, r0
 800f5e0:	d10b      	bne.n	800f5fa <pow+0xca>
 800f5e2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f5e6:	19b3      	adds	r3, r6, r6
 800f5e8:	930e      	str	r3, [sp, #56]	; 0x38
 800f5ea:	eb42 0302 	adc.w	r3, r2, r2
 800f5ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800f5f0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f5f4:	4bbe      	ldr	r3, [pc, #760]	; (800f8f0 <pow+0x3c0>)
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	e7dd      	b.n	800f5b6 <pow+0x86>
 800f5fa:	1921      	adds	r1, r4, r4
 800f5fc:	9106      	str	r1, [sp, #24]
 800f5fe:	eb45 0105 	adc.w	r1, r5, r5
 800f602:	9107      	str	r1, [sp, #28]
 800f604:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f608:	49bb      	ldr	r1, [pc, #748]	; (800f8f8 <pow+0x3c8>)
 800f60a:	2000      	movs	r0, #0
 800f60c:	42a1      	cmp	r1, r4
 800f60e:	bf08      	it	eq
 800f610:	4298      	cmpeq	r0, r3
 800f612:	d3d5      	bcc.n	800f5c0 <pow+0x90>
 800f614:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f618:	428c      	cmp	r4, r1
 800f61a:	bf08      	it	eq
 800f61c:	4283      	cmpeq	r3, r0
 800f61e:	d1cf      	bne.n	800f5c0 <pow+0x90>
 800f620:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f624:	49b5      	ldr	r1, [pc, #724]	; (800f8fc <pow+0x3cc>)
 800f626:	2000      	movs	r0, #0
 800f628:	428c      	cmp	r4, r1
 800f62a:	bf08      	it	eq
 800f62c:	4283      	cmpeq	r3, r0
 800f62e:	f000 822c 	beq.w	800fa8a <pow+0x55a>
 800f632:	49b3      	ldr	r1, [pc, #716]	; (800f900 <pow+0x3d0>)
 800f634:	f04f 30ff 	mov.w	r0, #4294967295
 800f638:	42a1      	cmp	r1, r4
 800f63a:	bf08      	it	eq
 800f63c:	4298      	cmpeq	r0, r3
 800f63e:	ea6f 0307 	mvn.w	r3, r7
 800f642:	bf34      	ite	cc
 800f644:	2201      	movcc	r2, #1
 800f646:	2200      	movcs	r2, #0
 800f648:	0fdb      	lsrs	r3, r3, #31
 800f64a:	429a      	cmp	r2, r3
 800f64c:	f040 821a 	bne.w	800fa84 <pow+0x554>
 800f650:	ed9d 7b00 	vldr	d7, [sp]
 800f654:	ee27 0b07 	vmul.f64	d0, d7, d7
 800f658:	e7b8      	b.n	800f5cc <pow+0x9c>
 800f65a:	1923      	adds	r3, r4, r4
 800f65c:	9308      	str	r3, [sp, #32]
 800f65e:	eb45 0305 	adc.w	r3, r5, r5
 800f662:	9309      	str	r3, [sp, #36]	; 0x24
 800f664:	9b08      	ldr	r3, [sp, #32]
 800f666:	f113 33ff 	adds.w	r3, r3, #4294967295
 800f66a:	9310      	str	r3, [sp, #64]	; 0x40
 800f66c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f66e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800f672:	9311      	str	r3, [sp, #68]	; 0x44
 800f674:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f678:	4299      	cmp	r1, r3
 800f67a:	bf08      	it	eq
 800f67c:	4290      	cmpeq	r0, r2
 800f67e:	d22d      	bcs.n	800f6dc <pow+0x1ac>
 800f680:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f684:	2c00      	cmp	r4, #0
 800f686:	f175 0300 	sbcs.w	r3, r5, #0
 800f68a:	ee27 0b07 	vmul.f64	d0, d7, d7
 800f68e:	da16      	bge.n	800f6be <pow+0x18e>
 800f690:	4630      	mov	r0, r6
 800f692:	4639      	mov	r1, r7
 800f694:	f7ff ff16 	bl	800f4c4 <checkint>
 800f698:	2801      	cmp	r0, #1
 800f69a:	d110      	bne.n	800f6be <pow+0x18e>
 800f69c:	eeb1 0b40 	vneg.f64	d0, d0
 800f6a0:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800f6a4:	4323      	orrs	r3, r4
 800f6a6:	d10c      	bne.n	800f6c2 <pow+0x192>
 800f6a8:	2e00      	cmp	r6, #0
 800f6aa:	f177 0300 	sbcs.w	r3, r7, #0
 800f6ae:	da8d      	bge.n	800f5cc <pow+0x9c>
 800f6b0:	b01b      	add	sp, #108	; 0x6c
 800f6b2:	ecbd 8b0a 	vpop	{d8-d12}
 800f6b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ba:	f000 bbbd 	b.w	800fe38 <__math_divzero>
 800f6be:	2000      	movs	r0, #0
 800f6c0:	e7ee      	b.n	800f6a0 <pow+0x170>
 800f6c2:	2e00      	cmp	r6, #0
 800f6c4:	f177 0300 	sbcs.w	r3, r7, #0
 800f6c8:	da80      	bge.n	800f5cc <pow+0x9c>
 800f6ca:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f6ce:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f6d2:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800f6d6:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800f6da:	e777      	b.n	800f5cc <pow+0x9c>
 800f6dc:	2c00      	cmp	r4, #0
 800f6de:	f175 0300 	sbcs.w	r3, r5, #0
 800f6e2:	da35      	bge.n	800f750 <pow+0x220>
 800f6e4:	4630      	mov	r0, r6
 800f6e6:	4639      	mov	r1, r7
 800f6e8:	f7ff feec 	bl	800f4c4 <checkint>
 800f6ec:	b940      	cbnz	r0, 800f700 <pow+0x1d0>
 800f6ee:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f6f2:	b01b      	add	sp, #108	; 0x6c
 800f6f4:	ecbd 8b0a 	vpop	{d8-d12}
 800f6f8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6fc:	f000 bbb4 	b.w	800fe68 <__math_invalid>
 800f700:	2801      	cmp	r0, #1
 800f702:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f706:	bf14      	ite	ne
 800f708:	2000      	movne	r0, #0
 800f70a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800f70e:	461d      	mov	r5, r3
 800f710:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800f714:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800f718:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800f71c:	2a7f      	cmp	r2, #127	; 0x7f
 800f71e:	d933      	bls.n	800f788 <pow+0x258>
 800f720:	4974      	ldr	r1, [pc, #464]	; (800f8f4 <pow+0x3c4>)
 800f722:	2000      	movs	r0, #0
 800f724:	428d      	cmp	r5, r1
 800f726:	bf08      	it	eq
 800f728:	4284      	cmpeq	r4, r0
 800f72a:	f000 81ae 	beq.w	800fa8a <pow+0x55a>
 800f72e:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f732:	4293      	cmp	r3, r2
 800f734:	d80e      	bhi.n	800f754 <pow+0x224>
 800f736:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f73a:	ed9d 7b00 	vldr	d7, [sp]
 800f73e:	42a9      	cmp	r1, r5
 800f740:	bf08      	it	eq
 800f742:	42a0      	cmpeq	r0, r4
 800f744:	bf34      	ite	cc
 800f746:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800f74a:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800f74e:	e73d      	b.n	800f5cc <pow+0x9c>
 800f750:	2000      	movs	r0, #0
 800f752:	e7df      	b.n	800f714 <pow+0x1e4>
 800f754:	42a9      	cmp	r1, r5
 800f756:	bf08      	it	eq
 800f758:	42a0      	cmpeq	r0, r4
 800f75a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f75e:	bf2c      	ite	cs
 800f760:	2301      	movcs	r3, #1
 800f762:	2300      	movcc	r3, #0
 800f764:	4590      	cmp	r8, r2
 800f766:	bf8c      	ite	hi
 800f768:	f04f 0800 	movhi.w	r8, #0
 800f76c:	f04f 0801 	movls.w	r8, #1
 800f770:	4543      	cmp	r3, r8
 800f772:	f04f 0000 	mov.w	r0, #0
 800f776:	f000 80af 	beq.w	800f8d8 <pow+0x3a8>
 800f77a:	b01b      	add	sp, #108	; 0x6c
 800f77c:	ecbd 8b0a 	vpop	{d8-d12}
 800f780:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f784:	f000 bb50 	b.w	800fe28 <__math_oflow>
 800f788:	f1bc 0f00 	cmp.w	ip, #0
 800f78c:	d10e      	bne.n	800f7ac <pow+0x27c>
 800f78e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800f8e8 <pow+0x3b8>
 800f792:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f796:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f79a:	ec57 6b17 	vmov	r6, r7, d7
 800f79e:	4b59      	ldr	r3, [pc, #356]	; (800f904 <pow+0x3d4>)
 800f7a0:	2100      	movs	r1, #0
 800f7a2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f7a6:	1874      	adds	r4, r6, r1
 800f7a8:	eb42 0503 	adc.w	r5, r2, r3
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	18e3      	adds	r3, r4, r3
 800f7b0:	4b55      	ldr	r3, [pc, #340]	; (800f908 <pow+0x3d8>)
 800f7b2:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f7b6:	eb45 0303 	adc.w	r3, r5, r3
 800f7ba:	1519      	asrs	r1, r3, #20
 800f7bc:	ee03 1a10 	vmov	s6, r1
 800f7c0:	0d1e      	lsrs	r6, r3, #20
 800f7c2:	2100      	movs	r1, #0
 800f7c4:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800f7c8:	0536      	lsls	r6, r6, #20
 800f7ca:	1a63      	subs	r3, r4, r1
 800f7cc:	9312      	str	r3, [sp, #72]	; 0x48
 800f7ce:	eb65 0306 	sbc.w	r3, r5, r6
 800f7d2:	9313      	str	r3, [sp, #76]	; 0x4c
 800f7d4:	4b4d      	ldr	r3, [pc, #308]	; (800f90c <pow+0x3dc>)
 800f7d6:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800f7da:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f7de:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800f7e2:	eea5 6b07 	vfma.f64	d6, d5, d7
 800f7e6:	ed93 7b00 	vldr	d7, [r3]
 800f7ea:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800f7ee:	ed93 4b02 	vldr	d4, [r3, #8]
 800f7f2:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800f7f6:	eea3 5b07 	vfma.f64	d5, d3, d7
 800f7fa:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800f7fe:	ee36 9b05 	vadd.f64	d9, d6, d5
 800f802:	ee35 5b49 	vsub.f64	d5, d5, d9
 800f806:	eea3 7b04 	vfma.f64	d7, d3, d4
 800f80a:	ed93 4b04 	vldr	d4, [r3, #16]
 800f80e:	ee35 5b06 	vadd.f64	d5, d5, d6
 800f812:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f816:	ee26 4b04 	vmul.f64	d4, d6, d4
 800f81a:	ed93 3b08 	vldr	d3, [r3, #32]
 800f81e:	ee26 0b04 	vmul.f64	d0, d6, d4
 800f822:	eeb0 8b40 	vmov.f64	d8, d0
 800f826:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800f82a:	ed93 4b06 	vldr	d4, [r3, #24]
 800f82e:	ee26 ab00 	vmul.f64	d10, d6, d0
 800f832:	ee39 1b00 	vadd.f64	d1, d9, d0
 800f836:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800f83a:	eea6 4b03 	vfma.f64	d4, d6, d3
 800f83e:	ee39 9b41 	vsub.f64	d9, d9, d1
 800f842:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800f846:	ee37 8b08 	vadd.f64	d8, d7, d8
 800f84a:	ee39 9b00 	vadd.f64	d9, d9, d0
 800f84e:	eea6 3b02 	vfma.f64	d3, d6, d2
 800f852:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800f856:	ee38 9b09 	vadd.f64	d9, d8, d9
 800f85a:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800f85e:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800f862:	ed9d 6b00 	vldr	d6, [sp]
 800f866:	eea0 3b02 	vfma.f64	d3, d0, d2
 800f86a:	eea0 4b03 	vfma.f64	d4, d0, d3
 800f86e:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800f872:	ee31 7b09 	vadd.f64	d7, d1, d9
 800f876:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f87a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f87e:	eeb0 3b46 	vmov.f64	d3, d6
 800f882:	ee31 1b47 	vsub.f64	d1, d1, d7
 800f886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f88a:	ee31 9b09 	vadd.f64	d9, d1, d9
 800f88e:	ed9d 6b00 	vldr	d6, [sp]
 800f892:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800f896:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800f89a:	193c      	adds	r4, r7, r4
 800f89c:	2c3e      	cmp	r4, #62	; 0x3e
 800f89e:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800f8a2:	eea6 3b09 	vfma.f64	d3, d6, d9
 800f8a6:	d934      	bls.n	800f912 <pow+0x3e2>
 800f8a8:	428c      	cmp	r4, r1
 800f8aa:	da0d      	bge.n	800f8c8 <pow+0x398>
 800f8ac:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f8b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f8b4:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	f43f ae87 	beq.w	800f5cc <pow+0x9c>
 800f8be:	eeb1 0b40 	vneg.f64	d0, d0
 800f8c2:	e683      	b.n	800f5cc <pow+0x9c>
 800f8c4:	2000      	movs	r0, #0
 800f8c6:	e771      	b.n	800f7ac <pow+0x27c>
 800f8c8:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800f8cc:	d920      	bls.n	800f910 <pow+0x3e0>
 800f8ce:	2a00      	cmp	r2, #0
 800f8d0:	f173 0300 	sbcs.w	r3, r3, #0
 800f8d4:	f6bf af51 	bge.w	800f77a <pow+0x24a>
 800f8d8:	b01b      	add	sp, #108	; 0x6c
 800f8da:	ecbd 8b0a 	vpop	{d8-d12}
 800f8de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e2:	f000 ba99 	b.w	800fe18 <__math_uflow>
 800f8e6:	bf00      	nop
 800f8e8:	00000000 	.word	0x00000000
 800f8ec:	43300000 	.word	0x43300000
 800f8f0:	fff00000 	.word	0xfff00000
 800f8f4:	3ff00000 	.word	0x3ff00000
 800f8f8:	ffe00000 	.word	0xffe00000
 800f8fc:	7fe00000 	.word	0x7fe00000
 800f900:	7fdfffff 	.word	0x7fdfffff
 800f904:	fcc00000 	.word	0xfcc00000
 800f908:	c0196aab 	.word	0xc0196aab
 800f90c:	080129e0 	.word	0x080129e0
 800f910:	460f      	mov	r7, r1
 800f912:	4e65      	ldr	r6, [pc, #404]	; (800faa8 <pow+0x578>)
 800f914:	ed9d 4b02 	vldr	d4, [sp, #8]
 800f918:	ed96 6b02 	vldr	d6, [r6, #8]
 800f91c:	ed96 7b00 	vldr	d7, [r6]
 800f920:	eeb0 5b46 	vmov.f64	d5, d6
 800f924:	eea4 5b07 	vfma.f64	d5, d4, d7
 800f928:	ed8d 5b00 	vstr	d5, [sp]
 800f92c:	ee35 6b46 	vsub.f64	d6, d5, d6
 800f930:	eeb0 5b44 	vmov.f64	d5, d4
 800f934:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f938:	ed96 7b04 	vldr	d7, [r6, #16]
 800f93c:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800f940:	eea6 5b07 	vfma.f64	d5, d6, d7
 800f944:	eeb0 7b45 	vmov.f64	d7, d5
 800f948:	ed96 5b06 	vldr	d5, [r6, #24]
 800f94c:	1849      	adds	r1, r1, r1
 800f94e:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800f952:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800f956:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f95a:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800f95e:	ee33 3b07 	vadd.f64	d3, d3, d7
 800f962:	ee23 6b03 	vmul.f64	d6, d3, d3
 800f966:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800f96a:	ed96 5b08 	vldr	d5, [r6, #32]
 800f96e:	ee33 7b07 	vadd.f64	d7, d3, d7
 800f972:	1814      	adds	r4, r2, r0
 800f974:	0365      	lsls	r5, r4, #13
 800f976:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800f97a:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f97e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f982:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800f986:	ee26 6b06 	vmul.f64	d6, d6, d6
 800f98a:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800f98e:	2000      	movs	r0, #0
 800f990:	eb10 0a04 	adds.w	sl, r0, r4
 800f994:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f998:	eb45 0b0c 	adc.w	fp, r5, ip
 800f99c:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f9a0:	2f00      	cmp	r7, #0
 800f9a2:	d16a      	bne.n	800fa7a <pow+0x54a>
 800f9a4:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800f9a8:	4639      	mov	r1, r7
 800f9aa:	ea50 0301 	orrs.w	r3, r0, r1
 800f9ae:	f04f 0300 	mov.w	r3, #0
 800f9b2:	d115      	bne.n	800f9e0 <pow+0x4b0>
 800f9b4:	eb1a 0303 	adds.w	r3, sl, r3
 800f9b8:	ee0b 3a10 	vmov	s22, r3
 800f9bc:	4b3b      	ldr	r3, [pc, #236]	; (800faac <pow+0x57c>)
 800f9be:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800fa90 <pow+0x560>
 800f9c2:	eb4b 0303 	adc.w	r3, fp, r3
 800f9c6:	ee0b 3a90 	vmov	s23, r3
 800f9ca:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800f9ce:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800f9d2:	b01b      	add	sp, #108	; 0x6c
 800f9d4:	ecbd 8b0a 	vpop	{d8-d12}
 800f9d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9dc:	f000 ba5c 	b.w	800fe98 <__math_check_oflow>
 800f9e0:	eb1a 0303 	adds.w	r3, sl, r3
 800f9e4:	930a      	str	r3, [sp, #40]	; 0x28
 800f9e6:	4b32      	ldr	r3, [pc, #200]	; (800fab0 <pow+0x580>)
 800f9e8:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800f9ec:	eb4b 0303 	adc.w	r3, fp, r3
 800f9f0:	930b      	str	r3, [sp, #44]	; 0x2c
 800f9f2:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800f9f6:	ee27 6b05 	vmul.f64	d6, d7, d5
 800f9fa:	ee35 7b06 	vadd.f64	d7, d5, d6
 800f9fe:	eeb0 3bc7 	vabs.f64	d3, d7
 800fa02:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800fa06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa0a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800fa98 <pow+0x568>
 800fa0e:	d52b      	bpl.n	800fa68 <pow+0x538>
 800fa10:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fa14:	ee35 5b47 	vsub.f64	d5, d5, d7
 800fa18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa1c:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800fa20:	ee35 6b06 	vadd.f64	d6, d5, d6
 800fa24:	bf48      	it	mi
 800fa26:	eeb0 4b43 	vmovmi.f64	d4, d3
 800fa2a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800fa2e:	ee34 5b43 	vsub.f64	d5, d4, d3
 800fa32:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fa36:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fa3a:	ee37 7b03 	vadd.f64	d7, d7, d3
 800fa3e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800fa42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fa46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa4a:	d105      	bne.n	800fa58 <pow+0x528>
 800fa4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fa4e:	463a      	mov	r2, r7
 800fa50:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800fa54:	ec43 2b17 	vmov	d7, r2, r3
 800fa58:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800fa5c:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800fa60:	ee26 6b00 	vmul.f64	d6, d6, d0
 800fa64:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800fa68:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fa6c:	b01b      	add	sp, #108	; 0x6c
 800fa6e:	ecbd 8b0a 	vpop	{d8-d12}
 800fa72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa76:	f000 ba06 	b.w	800fe86 <__math_check_uflow>
 800fa7a:	ec4b ab10 	vmov	d0, sl, fp
 800fa7e:	eea7 0b00 	vfma.f64	d0, d7, d0
 800fa82:	e5a3      	b.n	800f5cc <pow+0x9c>
 800fa84:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800faa0 <pow+0x570>
 800fa88:	e5a0      	b.n	800f5cc <pow+0x9c>
 800fa8a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800fa8e:	e59d      	b.n	800f5cc <pow+0x9c>
 800fa90:	00000000 	.word	0x00000000
 800fa94:	7f000000 	.word	0x7f000000
 800fa98:	00000000 	.word	0x00000000
 800fa9c:	00100000 	.word	0x00100000
	...
 800faa8:	08013b80 	.word	0x08013b80
 800faac:	c0f00000 	.word	0xc0f00000
 800fab0:	3fe00000 	.word	0x3fe00000

0800fab4 <sinf_poly>:
 800fab4:	07cb      	lsls	r3, r1, #31
 800fab6:	d412      	bmi.n	800fade <sinf_poly+0x2a>
 800fab8:	ee21 6b00 	vmul.f64	d6, d1, d0
 800fabc:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800fac0:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800fac4:	eea5 7b01 	vfma.f64	d7, d5, d1
 800fac8:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800facc:	ee21 1b06 	vmul.f64	d1, d1, d6
 800fad0:	eea5 0b06 	vfma.f64	d0, d5, d6
 800fad4:	eea7 0b01 	vfma.f64	d0, d7, d1
 800fad8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800fadc:	4770      	bx	lr
 800fade:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800fae2:	ee21 6b01 	vmul.f64	d6, d1, d1
 800fae6:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800faea:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800faee:	eea1 7b05 	vfma.f64	d7, d1, d5
 800faf2:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800faf6:	eea1 0b05 	vfma.f64	d0, d1, d5
 800fafa:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800fafe:	ee21 1b06 	vmul.f64	d1, d1, d6
 800fb02:	eea6 0b05 	vfma.f64	d0, d6, d5
 800fb06:	e7e5      	b.n	800fad4 <sinf_poly+0x20>

0800fb08 <sinf>:
 800fb08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fb0a:	ee10 4a10 	vmov	r4, s0
 800fb0e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800fb12:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800fb16:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800fb1a:	eef0 7a40 	vmov.f32	s15, s0
 800fb1e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800fb22:	d218      	bcs.n	800fb56 <sinf+0x4e>
 800fb24:	ee26 1b06 	vmul.f64	d1, d6, d6
 800fb28:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800fb2c:	d20a      	bcs.n	800fb44 <sinf+0x3c>
 800fb2e:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800fb32:	d103      	bne.n	800fb3c <sinf+0x34>
 800fb34:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800fb38:	ed8d 1a01 	vstr	s2, [sp, #4]
 800fb3c:	eeb0 0a67 	vmov.f32	s0, s15
 800fb40:	b003      	add	sp, #12
 800fb42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb44:	483e      	ldr	r0, [pc, #248]	; (800fc40 <sinf+0x138>)
 800fb46:	eeb0 0b46 	vmov.f64	d0, d6
 800fb4a:	2100      	movs	r1, #0
 800fb4c:	b003      	add	sp, #12
 800fb4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fb52:	f7ff bfaf 	b.w	800fab4 <sinf_poly>
 800fb56:	f240 422e 	movw	r2, #1070	; 0x42e
 800fb5a:	4293      	cmp	r3, r2
 800fb5c:	d824      	bhi.n	800fba8 <sinf+0xa0>
 800fb5e:	4b38      	ldr	r3, [pc, #224]	; (800fc40 <sinf+0x138>)
 800fb60:	ed93 7b08 	vldr	d7, [r3, #32]
 800fb64:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fb68:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800fb6c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800fb70:	ee17 1a90 	vmov	r1, s15
 800fb74:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800fb78:	1609      	asrs	r1, r1, #24
 800fb7a:	ee07 1a90 	vmov	s15, r1
 800fb7e:	f001 0203 	and.w	r2, r1, #3
 800fb82:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800fb86:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800fb8a:	ed92 0b00 	vldr	d0, [r2]
 800fb8e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800fb92:	f011 0f02 	tst.w	r1, #2
 800fb96:	eea5 6b47 	vfms.f64	d6, d5, d7
 800fb9a:	bf08      	it	eq
 800fb9c:	4618      	moveq	r0, r3
 800fb9e:	ee26 1b06 	vmul.f64	d1, d6, d6
 800fba2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800fba6:	e7d1      	b.n	800fb4c <sinf+0x44>
 800fba8:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800fbac:	d23d      	bcs.n	800fc2a <sinf+0x122>
 800fbae:	4b25      	ldr	r3, [pc, #148]	; (800fc44 <sinf+0x13c>)
 800fbb0:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800fbb4:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800fbb8:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800fbbc:	6a06      	ldr	r6, [r0, #32]
 800fbbe:	6900      	ldr	r0, [r0, #16]
 800fbc0:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800fbc4:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800fbc8:	40a9      	lsls	r1, r5
 800fbca:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800fbce:	fba1 6706 	umull	r6, r7, r1, r6
 800fbd2:	fb05 f301 	mul.w	r3, r5, r1
 800fbd6:	463a      	mov	r2, r7
 800fbd8:	fbe0 2301 	umlal	r2, r3, r0, r1
 800fbdc:	1c11      	adds	r1, r2, #0
 800fbde:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800fbe2:	2000      	movs	r0, #0
 800fbe4:	1a10      	subs	r0, r2, r0
 800fbe6:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800fbea:	eb63 0101 	sbc.w	r1, r3, r1
 800fbee:	f7f0 fd5d 	bl	80006ac <__aeabi_l2d>
 800fbf2:	0fb5      	lsrs	r5, r6, #30
 800fbf4:	4a12      	ldr	r2, [pc, #72]	; (800fc40 <sinf+0x138>)
 800fbf6:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 800fbfa:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800fc38 <sinf+0x130>
 800fbfe:	ec41 0b17 	vmov	d7, r0, r1
 800fc02:	f003 0103 	and.w	r1, r3, #3
 800fc06:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800fc0a:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fc0e:	ed91 7b00 	vldr	d7, [r1]
 800fc12:	ee20 1b00 	vmul.f64	d1, d0, d0
 800fc16:	f013 0f02 	tst.w	r3, #2
 800fc1a:	f102 0070 	add.w	r0, r2, #112	; 0x70
 800fc1e:	4629      	mov	r1, r5
 800fc20:	bf08      	it	eq
 800fc22:	4610      	moveq	r0, r2
 800fc24:	ee27 0b00 	vmul.f64	d0, d7, d0
 800fc28:	e790      	b.n	800fb4c <sinf+0x44>
 800fc2a:	b003      	add	sp, #12
 800fc2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800fc30:	f7ff bc39 	b.w	800f4a6 <__math_invalidf>
 800fc34:	f3af 8000 	nop.w
 800fc38:	54442d18 	.word	0x54442d18
 800fc3c:	3c1921fb 	.word	0x3c1921fb
 800fc40:	08013a88 	.word	0x08013a88
 800fc44:	08013a28 	.word	0x08013a28

0800fc48 <atan2f>:
 800fc48:	f000 b826 	b.w	800fc98 <__ieee754_atan2f>

0800fc4c <sqrtf>:
 800fc4c:	b508      	push	{r3, lr}
 800fc4e:	ed2d 8b02 	vpush	{d8}
 800fc52:	eeb0 8a40 	vmov.f32	s16, s0
 800fc56:	f000 f8bd 	bl	800fdd4 <__ieee754_sqrtf>
 800fc5a:	4b0d      	ldr	r3, [pc, #52]	; (800fc90 <sqrtf+0x44>)
 800fc5c:	f993 3000 	ldrsb.w	r3, [r3]
 800fc60:	3301      	adds	r3, #1
 800fc62:	d011      	beq.n	800fc88 <sqrtf+0x3c>
 800fc64:	eeb4 8a48 	vcmp.f32	s16, s16
 800fc68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc6c:	d60c      	bvs.n	800fc88 <sqrtf+0x3c>
 800fc6e:	eddf 8a09 	vldr	s17, [pc, #36]	; 800fc94 <sqrtf+0x48>
 800fc72:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800fc76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc7a:	d505      	bpl.n	800fc88 <sqrtf+0x3c>
 800fc7c:	f000 f9fc 	bl	8010078 <__errno>
 800fc80:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800fc84:	2321      	movs	r3, #33	; 0x21
 800fc86:	6003      	str	r3, [r0, #0]
 800fc88:	ecbd 8b02 	vpop	{d8}
 800fc8c:	bd08      	pop	{r3, pc}
 800fc8e:	bf00      	nop
 800fc90:	2400004d 	.word	0x2400004d
 800fc94:	00000000 	.word	0x00000000

0800fc98 <__ieee754_atan2f>:
 800fc98:	ee10 2a90 	vmov	r2, s1
 800fc9c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800fca0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fca4:	b510      	push	{r4, lr}
 800fca6:	eef0 7a40 	vmov.f32	s15, s0
 800fcaa:	dc06      	bgt.n	800fcba <__ieee754_atan2f+0x22>
 800fcac:	ee10 0a10 	vmov	r0, s0
 800fcb0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800fcb4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fcb8:	dd04      	ble.n	800fcc4 <__ieee754_atan2f+0x2c>
 800fcba:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800fcbe:	eeb0 0a67 	vmov.f32	s0, s15
 800fcc2:	bd10      	pop	{r4, pc}
 800fcc4:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800fcc8:	d103      	bne.n	800fcd2 <__ieee754_atan2f+0x3a>
 800fcca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fcce:	f000 b8f7 	b.w	800fec0 <atanf>
 800fcd2:	1794      	asrs	r4, r2, #30
 800fcd4:	f004 0402 	and.w	r4, r4, #2
 800fcd8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800fcdc:	b93b      	cbnz	r3, 800fcee <__ieee754_atan2f+0x56>
 800fcde:	2c02      	cmp	r4, #2
 800fce0:	d05c      	beq.n	800fd9c <__ieee754_atan2f+0x104>
 800fce2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800fdb0 <__ieee754_atan2f+0x118>
 800fce6:	2c03      	cmp	r4, #3
 800fce8:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800fcec:	e7e7      	b.n	800fcbe <__ieee754_atan2f+0x26>
 800fcee:	b939      	cbnz	r1, 800fd00 <__ieee754_atan2f+0x68>
 800fcf0:	eddf 7a30 	vldr	s15, [pc, #192]	; 800fdb4 <__ieee754_atan2f+0x11c>
 800fcf4:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800fdb8 <__ieee754_atan2f+0x120>
 800fcf8:	2800      	cmp	r0, #0
 800fcfa:	fe67 7a80 	vselge.f32	s15, s15, s0
 800fcfe:	e7de      	b.n	800fcbe <__ieee754_atan2f+0x26>
 800fd00:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fd04:	d110      	bne.n	800fd28 <__ieee754_atan2f+0x90>
 800fd06:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fd0a:	f104 34ff 	add.w	r4, r4, #4294967295
 800fd0e:	d107      	bne.n	800fd20 <__ieee754_atan2f+0x88>
 800fd10:	2c02      	cmp	r4, #2
 800fd12:	d846      	bhi.n	800fda2 <__ieee754_atan2f+0x10a>
 800fd14:	4b29      	ldr	r3, [pc, #164]	; (800fdbc <__ieee754_atan2f+0x124>)
 800fd16:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fd1a:	edd4 7a00 	vldr	s15, [r4]
 800fd1e:	e7ce      	b.n	800fcbe <__ieee754_atan2f+0x26>
 800fd20:	2c02      	cmp	r4, #2
 800fd22:	d841      	bhi.n	800fda8 <__ieee754_atan2f+0x110>
 800fd24:	4b26      	ldr	r3, [pc, #152]	; (800fdc0 <__ieee754_atan2f+0x128>)
 800fd26:	e7f6      	b.n	800fd16 <__ieee754_atan2f+0x7e>
 800fd28:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800fd2c:	d0e0      	beq.n	800fcf0 <__ieee754_atan2f+0x58>
 800fd2e:	1a5b      	subs	r3, r3, r1
 800fd30:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800fd34:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800fd38:	da1a      	bge.n	800fd70 <__ieee754_atan2f+0xd8>
 800fd3a:	2a00      	cmp	r2, #0
 800fd3c:	da01      	bge.n	800fd42 <__ieee754_atan2f+0xaa>
 800fd3e:	313c      	adds	r1, #60	; 0x3c
 800fd40:	db19      	blt.n	800fd76 <__ieee754_atan2f+0xde>
 800fd42:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800fd46:	f000 f98f 	bl	8010068 <fabsf>
 800fd4a:	f000 f8b9 	bl	800fec0 <atanf>
 800fd4e:	eef0 7a40 	vmov.f32	s15, s0
 800fd52:	2c01      	cmp	r4, #1
 800fd54:	d012      	beq.n	800fd7c <__ieee754_atan2f+0xe4>
 800fd56:	2c02      	cmp	r4, #2
 800fd58:	d017      	beq.n	800fd8a <__ieee754_atan2f+0xf2>
 800fd5a:	2c00      	cmp	r4, #0
 800fd5c:	d0af      	beq.n	800fcbe <__ieee754_atan2f+0x26>
 800fd5e:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800fdc4 <__ieee754_atan2f+0x12c>
 800fd62:	ee77 7a80 	vadd.f32	s15, s15, s0
 800fd66:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800fdc8 <__ieee754_atan2f+0x130>
 800fd6a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fd6e:	e7a6      	b.n	800fcbe <__ieee754_atan2f+0x26>
 800fd70:	eddf 7a10 	vldr	s15, [pc, #64]	; 800fdb4 <__ieee754_atan2f+0x11c>
 800fd74:	e7ed      	b.n	800fd52 <__ieee754_atan2f+0xba>
 800fd76:	eddf 7a15 	vldr	s15, [pc, #84]	; 800fdcc <__ieee754_atan2f+0x134>
 800fd7a:	e7ea      	b.n	800fd52 <__ieee754_atan2f+0xba>
 800fd7c:	ee17 3a90 	vmov	r3, s15
 800fd80:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fd84:	ee07 3a90 	vmov	s15, r3
 800fd88:	e799      	b.n	800fcbe <__ieee754_atan2f+0x26>
 800fd8a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800fdc4 <__ieee754_atan2f+0x12c>
 800fd8e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800fd92:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800fdc8 <__ieee754_atan2f+0x130>
 800fd96:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fd9a:	e790      	b.n	800fcbe <__ieee754_atan2f+0x26>
 800fd9c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800fdc8 <__ieee754_atan2f+0x130>
 800fda0:	e78d      	b.n	800fcbe <__ieee754_atan2f+0x26>
 800fda2:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800fdd0 <__ieee754_atan2f+0x138>
 800fda6:	e78a      	b.n	800fcbe <__ieee754_atan2f+0x26>
 800fda8:	eddf 7a08 	vldr	s15, [pc, #32]	; 800fdcc <__ieee754_atan2f+0x134>
 800fdac:	e787      	b.n	800fcbe <__ieee754_atan2f+0x26>
 800fdae:	bf00      	nop
 800fdb0:	c0490fdb 	.word	0xc0490fdb
 800fdb4:	3fc90fdb 	.word	0x3fc90fdb
 800fdb8:	bfc90fdb 	.word	0xbfc90fdb
 800fdbc:	08013b68 	.word	0x08013b68
 800fdc0:	08013b74 	.word	0x08013b74
 800fdc4:	33bbbd2e 	.word	0x33bbbd2e
 800fdc8:	40490fdb 	.word	0x40490fdb
 800fdcc:	00000000 	.word	0x00000000
 800fdd0:	3f490fdb 	.word	0x3f490fdb

0800fdd4 <__ieee754_sqrtf>:
 800fdd4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fdd8:	4770      	bx	lr

0800fdda <with_errno>:
 800fdda:	b513      	push	{r0, r1, r4, lr}
 800fddc:	4604      	mov	r4, r0
 800fdde:	ed8d 0b00 	vstr	d0, [sp]
 800fde2:	f000 f949 	bl	8010078 <__errno>
 800fde6:	ed9d 0b00 	vldr	d0, [sp]
 800fdea:	6004      	str	r4, [r0, #0]
 800fdec:	b002      	add	sp, #8
 800fdee:	bd10      	pop	{r4, pc}

0800fdf0 <xflow>:
 800fdf0:	b082      	sub	sp, #8
 800fdf2:	b158      	cbz	r0, 800fe0c <xflow+0x1c>
 800fdf4:	eeb1 7b40 	vneg.f64	d7, d0
 800fdf8:	ed8d 7b00 	vstr	d7, [sp]
 800fdfc:	ed9d 7b00 	vldr	d7, [sp]
 800fe00:	2022      	movs	r0, #34	; 0x22
 800fe02:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fe06:	b002      	add	sp, #8
 800fe08:	f7ff bfe7 	b.w	800fdda <with_errno>
 800fe0c:	eeb0 7b40 	vmov.f64	d7, d0
 800fe10:	e7f2      	b.n	800fdf8 <xflow+0x8>
 800fe12:	0000      	movs	r0, r0
 800fe14:	0000      	movs	r0, r0
	...

0800fe18 <__math_uflow>:
 800fe18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fe20 <__math_uflow+0x8>
 800fe1c:	f7ff bfe8 	b.w	800fdf0 <xflow>
 800fe20:	00000000 	.word	0x00000000
 800fe24:	10000000 	.word	0x10000000

0800fe28 <__math_oflow>:
 800fe28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fe30 <__math_oflow+0x8>
 800fe2c:	f7ff bfe0 	b.w	800fdf0 <xflow>
 800fe30:	00000000 	.word	0x00000000
 800fe34:	70000000 	.word	0x70000000

0800fe38 <__math_divzero>:
 800fe38:	b082      	sub	sp, #8
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800fe40:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800fe44:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800fe48:	ed8d 7b00 	vstr	d7, [sp]
 800fe4c:	ed9d 0b00 	vldr	d0, [sp]
 800fe50:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800fe60 <__math_divzero+0x28>
 800fe54:	2022      	movs	r0, #34	; 0x22
 800fe56:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800fe5a:	b002      	add	sp, #8
 800fe5c:	f7ff bfbd 	b.w	800fdda <with_errno>
	...

0800fe68 <__math_invalid>:
 800fe68:	eeb0 7b40 	vmov.f64	d7, d0
 800fe6c:	eeb4 7b47 	vcmp.f64	d7, d7
 800fe70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe74:	ee30 6b40 	vsub.f64	d6, d0, d0
 800fe78:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800fe7c:	d602      	bvs.n	800fe84 <__math_invalid+0x1c>
 800fe7e:	2021      	movs	r0, #33	; 0x21
 800fe80:	f7ff bfab 	b.w	800fdda <with_errno>
 800fe84:	4770      	bx	lr

0800fe86 <__math_check_uflow>:
 800fe86:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800fe8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe8e:	d102      	bne.n	800fe96 <__math_check_uflow+0x10>
 800fe90:	2022      	movs	r0, #34	; 0x22
 800fe92:	f7ff bfa2 	b.w	800fdda <with_errno>
 800fe96:	4770      	bx	lr

0800fe98 <__math_check_oflow>:
 800fe98:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800feb8 <__math_check_oflow+0x20>
 800fe9c:	eeb0 7bc0 	vabs.f64	d7, d0
 800fea0:	eeb4 7b46 	vcmp.f64	d7, d6
 800fea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea8:	dd02      	ble.n	800feb0 <__math_check_oflow+0x18>
 800feaa:	2022      	movs	r0, #34	; 0x22
 800feac:	f7ff bf95 	b.w	800fdda <with_errno>
 800feb0:	4770      	bx	lr
 800feb2:	bf00      	nop
 800feb4:	f3af 8000 	nop.w
 800feb8:	ffffffff 	.word	0xffffffff
 800febc:	7fefffff 	.word	0x7fefffff

0800fec0 <atanf>:
 800fec0:	b538      	push	{r3, r4, r5, lr}
 800fec2:	ee10 5a10 	vmov	r5, s0
 800fec6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800feca:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800fece:	eef0 7a40 	vmov.f32	s15, s0
 800fed2:	db0f      	blt.n	800fef4 <atanf+0x34>
 800fed4:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fed8:	dd04      	ble.n	800fee4 <atanf+0x24>
 800feda:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fede:	eeb0 0a67 	vmov.f32	s0, s15
 800fee2:	bd38      	pop	{r3, r4, r5, pc}
 800fee4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801001c <atanf+0x15c>
 800fee8:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8010020 <atanf+0x160>
 800feec:	2d00      	cmp	r5, #0
 800feee:	fe77 7a80 	vselgt.f32	s15, s15, s0
 800fef2:	e7f4      	b.n	800fede <atanf+0x1e>
 800fef4:	4b4b      	ldr	r3, [pc, #300]	; (8010024 <atanf+0x164>)
 800fef6:	429c      	cmp	r4, r3
 800fef8:	dc10      	bgt.n	800ff1c <atanf+0x5c>
 800fefa:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800fefe:	da0a      	bge.n	800ff16 <atanf+0x56>
 800ff00:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010028 <atanf+0x168>
 800ff04:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ff08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff0c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ff10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff14:	dce3      	bgt.n	800fede <atanf+0x1e>
 800ff16:	f04f 33ff 	mov.w	r3, #4294967295
 800ff1a:	e013      	b.n	800ff44 <atanf+0x84>
 800ff1c:	f000 f8a4 	bl	8010068 <fabsf>
 800ff20:	4b42      	ldr	r3, [pc, #264]	; (801002c <atanf+0x16c>)
 800ff22:	429c      	cmp	r4, r3
 800ff24:	dc4f      	bgt.n	800ffc6 <atanf+0x106>
 800ff26:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ff2a:	429c      	cmp	r4, r3
 800ff2c:	dc41      	bgt.n	800ffb2 <atanf+0xf2>
 800ff2e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ff32:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ff36:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ff40:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ff44:	1c5a      	adds	r2, r3, #1
 800ff46:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800ff4a:	eddf 5a39 	vldr	s11, [pc, #228]	; 8010030 <atanf+0x170>
 800ff4e:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8010034 <atanf+0x174>
 800ff52:	ed9f 5a39 	vldr	s10, [pc, #228]	; 8010038 <atanf+0x178>
 800ff56:	ed9f 0a39 	vldr	s0, [pc, #228]	; 801003c <atanf+0x17c>
 800ff5a:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ff5e:	eea7 6a25 	vfma.f32	s12, s14, s11
 800ff62:	eddf 5a37 	vldr	s11, [pc, #220]	; 8010040 <atanf+0x180>
 800ff66:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ff6a:	ed9f 6a36 	vldr	s12, [pc, #216]	; 8010044 <atanf+0x184>
 800ff6e:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ff72:	eddf 5a35 	vldr	s11, [pc, #212]	; 8010048 <atanf+0x188>
 800ff76:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ff7a:	ed9f 6a34 	vldr	s12, [pc, #208]	; 801004c <atanf+0x18c>
 800ff7e:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ff82:	eddf 5a33 	vldr	s11, [pc, #204]	; 8010050 <atanf+0x190>
 800ff86:	eee7 5a05 	vfma.f32	s11, s14, s10
 800ff8a:	ed9f 5a32 	vldr	s10, [pc, #200]	; 8010054 <atanf+0x194>
 800ff8e:	eea5 5a87 	vfma.f32	s10, s11, s14
 800ff92:	eddf 5a31 	vldr	s11, [pc, #196]	; 8010058 <atanf+0x198>
 800ff96:	eee5 5a07 	vfma.f32	s11, s10, s14
 800ff9a:	eea5 0a87 	vfma.f32	s0, s11, s14
 800ff9e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ffa2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800ffa6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ffaa:	d121      	bne.n	800fff0 <atanf+0x130>
 800ffac:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ffb0:	e795      	b.n	800fede <atanf+0x1e>
 800ffb2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ffb6:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ffba:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ffc4:	e7be      	b.n	800ff44 <atanf+0x84>
 800ffc6:	4b25      	ldr	r3, [pc, #148]	; (801005c <atanf+0x19c>)
 800ffc8:	429c      	cmp	r4, r3
 800ffca:	dc0b      	bgt.n	800ffe4 <atanf+0x124>
 800ffcc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ffd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ffd4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ffd8:	2302      	movs	r3, #2
 800ffda:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ffde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ffe2:	e7af      	b.n	800ff44 <atanf+0x84>
 800ffe4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ffe8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ffec:	2303      	movs	r3, #3
 800ffee:	e7a9      	b.n	800ff44 <atanf+0x84>
 800fff0:	4a1b      	ldr	r2, [pc, #108]	; (8010060 <atanf+0x1a0>)
 800fff2:	491c      	ldr	r1, [pc, #112]	; (8010064 <atanf+0x1a4>)
 800fff4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fff8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fffc:	ed93 7a00 	vldr	s14, [r3]
 8010000:	ee30 0a47 	vsub.f32	s0, s0, s14
 8010004:	2d00      	cmp	r5, #0
 8010006:	ee70 7a67 	vsub.f32	s15, s0, s15
 801000a:	ed92 0a00 	vldr	s0, [r2]
 801000e:	ee70 7a67 	vsub.f32	s15, s0, s15
 8010012:	bfb8      	it	lt
 8010014:	eef1 7a67 	vneglt.f32	s15, s15
 8010018:	e761      	b.n	800fede <atanf+0x1e>
 801001a:	bf00      	nop
 801001c:	3fc90fdb 	.word	0x3fc90fdb
 8010020:	bfc90fdb 	.word	0xbfc90fdb
 8010024:	3edfffff 	.word	0x3edfffff
 8010028:	7149f2ca 	.word	0x7149f2ca
 801002c:	3f97ffff 	.word	0x3f97ffff
 8010030:	3c8569d7 	.word	0x3c8569d7
 8010034:	3d4bda59 	.word	0x3d4bda59
 8010038:	bd15a221 	.word	0xbd15a221
 801003c:	be4ccccd 	.word	0xbe4ccccd
 8010040:	3d886b35 	.word	0x3d886b35
 8010044:	3dba2e6e 	.word	0x3dba2e6e
 8010048:	3e124925 	.word	0x3e124925
 801004c:	3eaaaaab 	.word	0x3eaaaaab
 8010050:	bd6ef16b 	.word	0xbd6ef16b
 8010054:	bd9d8795 	.word	0xbd9d8795
 8010058:	bde38e38 	.word	0xbde38e38
 801005c:	401bffff 	.word	0x401bffff
 8010060:	080143f0 	.word	0x080143f0
 8010064:	08014400 	.word	0x08014400

08010068 <fabsf>:
 8010068:	ee10 3a10 	vmov	r3, s0
 801006c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010070:	ee00 3a10 	vmov	s0, r3
 8010074:	4770      	bx	lr
	...

08010078 <__errno>:
 8010078:	4b01      	ldr	r3, [pc, #4]	; (8010080 <__errno+0x8>)
 801007a:	6818      	ldr	r0, [r3, #0]
 801007c:	4770      	bx	lr
 801007e:	bf00      	nop
 8010080:	24000050 	.word	0x24000050

08010084 <__libc_init_array>:
 8010084:	b570      	push	{r4, r5, r6, lr}
 8010086:	4d0d      	ldr	r5, [pc, #52]	; (80100bc <__libc_init_array+0x38>)
 8010088:	4c0d      	ldr	r4, [pc, #52]	; (80100c0 <__libc_init_array+0x3c>)
 801008a:	1b64      	subs	r4, r4, r5
 801008c:	10a4      	asrs	r4, r4, #2
 801008e:	2600      	movs	r6, #0
 8010090:	42a6      	cmp	r6, r4
 8010092:	d109      	bne.n	80100a8 <__libc_init_array+0x24>
 8010094:	4d0b      	ldr	r5, [pc, #44]	; (80100c4 <__libc_init_array+0x40>)
 8010096:	4c0c      	ldr	r4, [pc, #48]	; (80100c8 <__libc_init_array+0x44>)
 8010098:	f002 fc60 	bl	801295c <_init>
 801009c:	1b64      	subs	r4, r4, r5
 801009e:	10a4      	asrs	r4, r4, #2
 80100a0:	2600      	movs	r6, #0
 80100a2:	42a6      	cmp	r6, r4
 80100a4:	d105      	bne.n	80100b2 <__libc_init_array+0x2e>
 80100a6:	bd70      	pop	{r4, r5, r6, pc}
 80100a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80100ac:	4798      	blx	r3
 80100ae:	3601      	adds	r6, #1
 80100b0:	e7ee      	b.n	8010090 <__libc_init_array+0xc>
 80100b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80100b6:	4798      	blx	r3
 80100b8:	3601      	adds	r6, #1
 80100ba:	e7f2      	b.n	80100a2 <__libc_init_array+0x1e>
 80100bc:	080147fc 	.word	0x080147fc
 80100c0:	080147fc 	.word	0x080147fc
 80100c4:	080147fc 	.word	0x080147fc
 80100c8:	08014804 	.word	0x08014804

080100cc <memcpy>:
 80100cc:	440a      	add	r2, r1
 80100ce:	4291      	cmp	r1, r2
 80100d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80100d4:	d100      	bne.n	80100d8 <memcpy+0xc>
 80100d6:	4770      	bx	lr
 80100d8:	b510      	push	{r4, lr}
 80100da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100e2:	4291      	cmp	r1, r2
 80100e4:	d1f9      	bne.n	80100da <memcpy+0xe>
 80100e6:	bd10      	pop	{r4, pc}

080100e8 <memset>:
 80100e8:	4402      	add	r2, r0
 80100ea:	4603      	mov	r3, r0
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d100      	bne.n	80100f2 <memset+0xa>
 80100f0:	4770      	bx	lr
 80100f2:	f803 1b01 	strb.w	r1, [r3], #1
 80100f6:	e7f9      	b.n	80100ec <memset+0x4>

080100f8 <__cvt>:
 80100f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100fa:	ed2d 8b02 	vpush	{d8}
 80100fe:	eeb0 8b40 	vmov.f64	d8, d0
 8010102:	b085      	sub	sp, #20
 8010104:	4617      	mov	r7, r2
 8010106:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8010108:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801010a:	ee18 2a90 	vmov	r2, s17
 801010e:	f025 0520 	bic.w	r5, r5, #32
 8010112:	2a00      	cmp	r2, #0
 8010114:	bfb6      	itet	lt
 8010116:	222d      	movlt	r2, #45	; 0x2d
 8010118:	2200      	movge	r2, #0
 801011a:	eeb1 8b40 	vneglt.f64	d8, d0
 801011e:	2d46      	cmp	r5, #70	; 0x46
 8010120:	460c      	mov	r4, r1
 8010122:	701a      	strb	r2, [r3, #0]
 8010124:	d004      	beq.n	8010130 <__cvt+0x38>
 8010126:	2d45      	cmp	r5, #69	; 0x45
 8010128:	d100      	bne.n	801012c <__cvt+0x34>
 801012a:	3401      	adds	r4, #1
 801012c:	2102      	movs	r1, #2
 801012e:	e000      	b.n	8010132 <__cvt+0x3a>
 8010130:	2103      	movs	r1, #3
 8010132:	ab03      	add	r3, sp, #12
 8010134:	9301      	str	r3, [sp, #4]
 8010136:	ab02      	add	r3, sp, #8
 8010138:	9300      	str	r3, [sp, #0]
 801013a:	4622      	mov	r2, r4
 801013c:	4633      	mov	r3, r6
 801013e:	eeb0 0b48 	vmov.f64	d0, d8
 8010142:	f000 fca9 	bl	8010a98 <_dtoa_r>
 8010146:	2d47      	cmp	r5, #71	; 0x47
 8010148:	d109      	bne.n	801015e <__cvt+0x66>
 801014a:	07fb      	lsls	r3, r7, #31
 801014c:	d407      	bmi.n	801015e <__cvt+0x66>
 801014e:	9b03      	ldr	r3, [sp, #12]
 8010150:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010152:	1a1b      	subs	r3, r3, r0
 8010154:	6013      	str	r3, [r2, #0]
 8010156:	b005      	add	sp, #20
 8010158:	ecbd 8b02 	vpop	{d8}
 801015c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801015e:	2d46      	cmp	r5, #70	; 0x46
 8010160:	eb00 0204 	add.w	r2, r0, r4
 8010164:	d10c      	bne.n	8010180 <__cvt+0x88>
 8010166:	7803      	ldrb	r3, [r0, #0]
 8010168:	2b30      	cmp	r3, #48	; 0x30
 801016a:	d107      	bne.n	801017c <__cvt+0x84>
 801016c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010174:	bf1c      	itt	ne
 8010176:	f1c4 0401 	rsbne	r4, r4, #1
 801017a:	6034      	strne	r4, [r6, #0]
 801017c:	6833      	ldr	r3, [r6, #0]
 801017e:	441a      	add	r2, r3
 8010180:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8010184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010188:	bf08      	it	eq
 801018a:	9203      	streq	r2, [sp, #12]
 801018c:	2130      	movs	r1, #48	; 0x30
 801018e:	9b03      	ldr	r3, [sp, #12]
 8010190:	4293      	cmp	r3, r2
 8010192:	d2dc      	bcs.n	801014e <__cvt+0x56>
 8010194:	1c5c      	adds	r4, r3, #1
 8010196:	9403      	str	r4, [sp, #12]
 8010198:	7019      	strb	r1, [r3, #0]
 801019a:	e7f8      	b.n	801018e <__cvt+0x96>

0801019c <__exponent>:
 801019c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801019e:	4603      	mov	r3, r0
 80101a0:	2900      	cmp	r1, #0
 80101a2:	bfb8      	it	lt
 80101a4:	4249      	neglt	r1, r1
 80101a6:	f803 2b02 	strb.w	r2, [r3], #2
 80101aa:	bfb4      	ite	lt
 80101ac:	222d      	movlt	r2, #45	; 0x2d
 80101ae:	222b      	movge	r2, #43	; 0x2b
 80101b0:	2909      	cmp	r1, #9
 80101b2:	7042      	strb	r2, [r0, #1]
 80101b4:	dd2a      	ble.n	801020c <__exponent+0x70>
 80101b6:	f10d 0407 	add.w	r4, sp, #7
 80101ba:	46a4      	mov	ip, r4
 80101bc:	270a      	movs	r7, #10
 80101be:	46a6      	mov	lr, r4
 80101c0:	460a      	mov	r2, r1
 80101c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80101c6:	fb07 1516 	mls	r5, r7, r6, r1
 80101ca:	3530      	adds	r5, #48	; 0x30
 80101cc:	2a63      	cmp	r2, #99	; 0x63
 80101ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80101d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80101d6:	4631      	mov	r1, r6
 80101d8:	dcf1      	bgt.n	80101be <__exponent+0x22>
 80101da:	3130      	adds	r1, #48	; 0x30
 80101dc:	f1ae 0502 	sub.w	r5, lr, #2
 80101e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80101e4:	1c44      	adds	r4, r0, #1
 80101e6:	4629      	mov	r1, r5
 80101e8:	4561      	cmp	r1, ip
 80101ea:	d30a      	bcc.n	8010202 <__exponent+0x66>
 80101ec:	f10d 0209 	add.w	r2, sp, #9
 80101f0:	eba2 020e 	sub.w	r2, r2, lr
 80101f4:	4565      	cmp	r5, ip
 80101f6:	bf88      	it	hi
 80101f8:	2200      	movhi	r2, #0
 80101fa:	4413      	add	r3, r2
 80101fc:	1a18      	subs	r0, r3, r0
 80101fe:	b003      	add	sp, #12
 8010200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010202:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010206:	f804 2f01 	strb.w	r2, [r4, #1]!
 801020a:	e7ed      	b.n	80101e8 <__exponent+0x4c>
 801020c:	2330      	movs	r3, #48	; 0x30
 801020e:	3130      	adds	r1, #48	; 0x30
 8010210:	7083      	strb	r3, [r0, #2]
 8010212:	70c1      	strb	r1, [r0, #3]
 8010214:	1d03      	adds	r3, r0, #4
 8010216:	e7f1      	b.n	80101fc <__exponent+0x60>

08010218 <_printf_float>:
 8010218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801021c:	b08b      	sub	sp, #44	; 0x2c
 801021e:	460c      	mov	r4, r1
 8010220:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8010224:	4616      	mov	r6, r2
 8010226:	461f      	mov	r7, r3
 8010228:	4605      	mov	r5, r0
 801022a:	f001 f9b7 	bl	801159c <_localeconv_r>
 801022e:	f8d0 b000 	ldr.w	fp, [r0]
 8010232:	4658      	mov	r0, fp
 8010234:	f7f0 f854 	bl	80002e0 <strlen>
 8010238:	2300      	movs	r3, #0
 801023a:	9308      	str	r3, [sp, #32]
 801023c:	f8d8 3000 	ldr.w	r3, [r8]
 8010240:	f894 9018 	ldrb.w	r9, [r4, #24]
 8010244:	6822      	ldr	r2, [r4, #0]
 8010246:	3307      	adds	r3, #7
 8010248:	f023 0307 	bic.w	r3, r3, #7
 801024c:	f103 0108 	add.w	r1, r3, #8
 8010250:	f8c8 1000 	str.w	r1, [r8]
 8010254:	4682      	mov	sl, r0
 8010256:	e9d3 0100 	ldrd	r0, r1, [r3]
 801025a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801025e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80104c0 <_printf_float+0x2a8>
 8010262:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8010266:	eeb0 6bc0 	vabs.f64	d6, d0
 801026a:	eeb4 6b47 	vcmp.f64	d6, d7
 801026e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010272:	dd24      	ble.n	80102be <_printf_float+0xa6>
 8010274:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8010278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801027c:	d502      	bpl.n	8010284 <_printf_float+0x6c>
 801027e:	232d      	movs	r3, #45	; 0x2d
 8010280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010284:	4b90      	ldr	r3, [pc, #576]	; (80104c8 <_printf_float+0x2b0>)
 8010286:	4891      	ldr	r0, [pc, #580]	; (80104cc <_printf_float+0x2b4>)
 8010288:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801028c:	bf94      	ite	ls
 801028e:	4698      	movls	r8, r3
 8010290:	4680      	movhi	r8, r0
 8010292:	2303      	movs	r3, #3
 8010294:	6123      	str	r3, [r4, #16]
 8010296:	f022 0204 	bic.w	r2, r2, #4
 801029a:	2300      	movs	r3, #0
 801029c:	6022      	str	r2, [r4, #0]
 801029e:	9304      	str	r3, [sp, #16]
 80102a0:	9700      	str	r7, [sp, #0]
 80102a2:	4633      	mov	r3, r6
 80102a4:	aa09      	add	r2, sp, #36	; 0x24
 80102a6:	4621      	mov	r1, r4
 80102a8:	4628      	mov	r0, r5
 80102aa:	f000 f9d3 	bl	8010654 <_printf_common>
 80102ae:	3001      	adds	r0, #1
 80102b0:	f040 808a 	bne.w	80103c8 <_printf_float+0x1b0>
 80102b4:	f04f 30ff 	mov.w	r0, #4294967295
 80102b8:	b00b      	add	sp, #44	; 0x2c
 80102ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102be:	eeb4 0b40 	vcmp.f64	d0, d0
 80102c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102c6:	d709      	bvc.n	80102dc <_printf_float+0xc4>
 80102c8:	ee10 3a90 	vmov	r3, s1
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	bfbc      	itt	lt
 80102d0:	232d      	movlt	r3, #45	; 0x2d
 80102d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80102d6:	487e      	ldr	r0, [pc, #504]	; (80104d0 <_printf_float+0x2b8>)
 80102d8:	4b7e      	ldr	r3, [pc, #504]	; (80104d4 <_printf_float+0x2bc>)
 80102da:	e7d5      	b.n	8010288 <_printf_float+0x70>
 80102dc:	6863      	ldr	r3, [r4, #4]
 80102de:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80102e2:	9104      	str	r1, [sp, #16]
 80102e4:	1c59      	adds	r1, r3, #1
 80102e6:	d13c      	bne.n	8010362 <_printf_float+0x14a>
 80102e8:	2306      	movs	r3, #6
 80102ea:	6063      	str	r3, [r4, #4]
 80102ec:	2300      	movs	r3, #0
 80102ee:	9303      	str	r3, [sp, #12]
 80102f0:	ab08      	add	r3, sp, #32
 80102f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80102f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80102fa:	ab07      	add	r3, sp, #28
 80102fc:	6861      	ldr	r1, [r4, #4]
 80102fe:	9300      	str	r3, [sp, #0]
 8010300:	6022      	str	r2, [r4, #0]
 8010302:	f10d 031b 	add.w	r3, sp, #27
 8010306:	4628      	mov	r0, r5
 8010308:	f7ff fef6 	bl	80100f8 <__cvt>
 801030c:	9b04      	ldr	r3, [sp, #16]
 801030e:	9907      	ldr	r1, [sp, #28]
 8010310:	2b47      	cmp	r3, #71	; 0x47
 8010312:	4680      	mov	r8, r0
 8010314:	d108      	bne.n	8010328 <_printf_float+0x110>
 8010316:	1cc8      	adds	r0, r1, #3
 8010318:	db02      	blt.n	8010320 <_printf_float+0x108>
 801031a:	6863      	ldr	r3, [r4, #4]
 801031c:	4299      	cmp	r1, r3
 801031e:	dd41      	ble.n	80103a4 <_printf_float+0x18c>
 8010320:	f1a9 0902 	sub.w	r9, r9, #2
 8010324:	fa5f f989 	uxtb.w	r9, r9
 8010328:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801032c:	d820      	bhi.n	8010370 <_printf_float+0x158>
 801032e:	3901      	subs	r1, #1
 8010330:	464a      	mov	r2, r9
 8010332:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010336:	9107      	str	r1, [sp, #28]
 8010338:	f7ff ff30 	bl	801019c <__exponent>
 801033c:	9a08      	ldr	r2, [sp, #32]
 801033e:	9004      	str	r0, [sp, #16]
 8010340:	1813      	adds	r3, r2, r0
 8010342:	2a01      	cmp	r2, #1
 8010344:	6123      	str	r3, [r4, #16]
 8010346:	dc02      	bgt.n	801034e <_printf_float+0x136>
 8010348:	6822      	ldr	r2, [r4, #0]
 801034a:	07d2      	lsls	r2, r2, #31
 801034c:	d501      	bpl.n	8010352 <_printf_float+0x13a>
 801034e:	3301      	adds	r3, #1
 8010350:	6123      	str	r3, [r4, #16]
 8010352:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d0a2      	beq.n	80102a0 <_printf_float+0x88>
 801035a:	232d      	movs	r3, #45	; 0x2d
 801035c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010360:	e79e      	b.n	80102a0 <_printf_float+0x88>
 8010362:	9904      	ldr	r1, [sp, #16]
 8010364:	2947      	cmp	r1, #71	; 0x47
 8010366:	d1c1      	bne.n	80102ec <_printf_float+0xd4>
 8010368:	2b00      	cmp	r3, #0
 801036a:	d1bf      	bne.n	80102ec <_printf_float+0xd4>
 801036c:	2301      	movs	r3, #1
 801036e:	e7bc      	b.n	80102ea <_printf_float+0xd2>
 8010370:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8010374:	d118      	bne.n	80103a8 <_printf_float+0x190>
 8010376:	2900      	cmp	r1, #0
 8010378:	6863      	ldr	r3, [r4, #4]
 801037a:	dd0b      	ble.n	8010394 <_printf_float+0x17c>
 801037c:	6121      	str	r1, [r4, #16]
 801037e:	b913      	cbnz	r3, 8010386 <_printf_float+0x16e>
 8010380:	6822      	ldr	r2, [r4, #0]
 8010382:	07d0      	lsls	r0, r2, #31
 8010384:	d502      	bpl.n	801038c <_printf_float+0x174>
 8010386:	3301      	adds	r3, #1
 8010388:	440b      	add	r3, r1
 801038a:	6123      	str	r3, [r4, #16]
 801038c:	2300      	movs	r3, #0
 801038e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010390:	9304      	str	r3, [sp, #16]
 8010392:	e7de      	b.n	8010352 <_printf_float+0x13a>
 8010394:	b913      	cbnz	r3, 801039c <_printf_float+0x184>
 8010396:	6822      	ldr	r2, [r4, #0]
 8010398:	07d2      	lsls	r2, r2, #31
 801039a:	d501      	bpl.n	80103a0 <_printf_float+0x188>
 801039c:	3302      	adds	r3, #2
 801039e:	e7f4      	b.n	801038a <_printf_float+0x172>
 80103a0:	2301      	movs	r3, #1
 80103a2:	e7f2      	b.n	801038a <_printf_float+0x172>
 80103a4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80103a8:	9b08      	ldr	r3, [sp, #32]
 80103aa:	4299      	cmp	r1, r3
 80103ac:	db05      	blt.n	80103ba <_printf_float+0x1a2>
 80103ae:	6823      	ldr	r3, [r4, #0]
 80103b0:	6121      	str	r1, [r4, #16]
 80103b2:	07d8      	lsls	r0, r3, #31
 80103b4:	d5ea      	bpl.n	801038c <_printf_float+0x174>
 80103b6:	1c4b      	adds	r3, r1, #1
 80103b8:	e7e7      	b.n	801038a <_printf_float+0x172>
 80103ba:	2900      	cmp	r1, #0
 80103bc:	bfd4      	ite	le
 80103be:	f1c1 0202 	rsble	r2, r1, #2
 80103c2:	2201      	movgt	r2, #1
 80103c4:	4413      	add	r3, r2
 80103c6:	e7e0      	b.n	801038a <_printf_float+0x172>
 80103c8:	6823      	ldr	r3, [r4, #0]
 80103ca:	055a      	lsls	r2, r3, #21
 80103cc:	d407      	bmi.n	80103de <_printf_float+0x1c6>
 80103ce:	6923      	ldr	r3, [r4, #16]
 80103d0:	4642      	mov	r2, r8
 80103d2:	4631      	mov	r1, r6
 80103d4:	4628      	mov	r0, r5
 80103d6:	47b8      	blx	r7
 80103d8:	3001      	adds	r0, #1
 80103da:	d12a      	bne.n	8010432 <_printf_float+0x21a>
 80103dc:	e76a      	b.n	80102b4 <_printf_float+0x9c>
 80103de:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80103e2:	f240 80e2 	bls.w	80105aa <_printf_float+0x392>
 80103e6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80103ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80103ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103f2:	d133      	bne.n	801045c <_printf_float+0x244>
 80103f4:	4a38      	ldr	r2, [pc, #224]	; (80104d8 <_printf_float+0x2c0>)
 80103f6:	2301      	movs	r3, #1
 80103f8:	4631      	mov	r1, r6
 80103fa:	4628      	mov	r0, r5
 80103fc:	47b8      	blx	r7
 80103fe:	3001      	adds	r0, #1
 8010400:	f43f af58 	beq.w	80102b4 <_printf_float+0x9c>
 8010404:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010408:	429a      	cmp	r2, r3
 801040a:	db02      	blt.n	8010412 <_printf_float+0x1fa>
 801040c:	6823      	ldr	r3, [r4, #0]
 801040e:	07d8      	lsls	r0, r3, #31
 8010410:	d50f      	bpl.n	8010432 <_printf_float+0x21a>
 8010412:	4653      	mov	r3, sl
 8010414:	465a      	mov	r2, fp
 8010416:	4631      	mov	r1, r6
 8010418:	4628      	mov	r0, r5
 801041a:	47b8      	blx	r7
 801041c:	3001      	adds	r0, #1
 801041e:	f43f af49 	beq.w	80102b4 <_printf_float+0x9c>
 8010422:	f04f 0800 	mov.w	r8, #0
 8010426:	f104 091a 	add.w	r9, r4, #26
 801042a:	9b08      	ldr	r3, [sp, #32]
 801042c:	3b01      	subs	r3, #1
 801042e:	4543      	cmp	r3, r8
 8010430:	dc09      	bgt.n	8010446 <_printf_float+0x22e>
 8010432:	6823      	ldr	r3, [r4, #0]
 8010434:	079b      	lsls	r3, r3, #30
 8010436:	f100 8108 	bmi.w	801064a <_printf_float+0x432>
 801043a:	68e0      	ldr	r0, [r4, #12]
 801043c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801043e:	4298      	cmp	r0, r3
 8010440:	bfb8      	it	lt
 8010442:	4618      	movlt	r0, r3
 8010444:	e738      	b.n	80102b8 <_printf_float+0xa0>
 8010446:	2301      	movs	r3, #1
 8010448:	464a      	mov	r2, r9
 801044a:	4631      	mov	r1, r6
 801044c:	4628      	mov	r0, r5
 801044e:	47b8      	blx	r7
 8010450:	3001      	adds	r0, #1
 8010452:	f43f af2f 	beq.w	80102b4 <_printf_float+0x9c>
 8010456:	f108 0801 	add.w	r8, r8, #1
 801045a:	e7e6      	b.n	801042a <_printf_float+0x212>
 801045c:	9b07      	ldr	r3, [sp, #28]
 801045e:	2b00      	cmp	r3, #0
 8010460:	dc3c      	bgt.n	80104dc <_printf_float+0x2c4>
 8010462:	4a1d      	ldr	r2, [pc, #116]	; (80104d8 <_printf_float+0x2c0>)
 8010464:	2301      	movs	r3, #1
 8010466:	4631      	mov	r1, r6
 8010468:	4628      	mov	r0, r5
 801046a:	47b8      	blx	r7
 801046c:	3001      	adds	r0, #1
 801046e:	f43f af21 	beq.w	80102b4 <_printf_float+0x9c>
 8010472:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010476:	4313      	orrs	r3, r2
 8010478:	d102      	bne.n	8010480 <_printf_float+0x268>
 801047a:	6823      	ldr	r3, [r4, #0]
 801047c:	07d9      	lsls	r1, r3, #31
 801047e:	d5d8      	bpl.n	8010432 <_printf_float+0x21a>
 8010480:	4653      	mov	r3, sl
 8010482:	465a      	mov	r2, fp
 8010484:	4631      	mov	r1, r6
 8010486:	4628      	mov	r0, r5
 8010488:	47b8      	blx	r7
 801048a:	3001      	adds	r0, #1
 801048c:	f43f af12 	beq.w	80102b4 <_printf_float+0x9c>
 8010490:	f04f 0900 	mov.w	r9, #0
 8010494:	f104 0a1a 	add.w	sl, r4, #26
 8010498:	9b07      	ldr	r3, [sp, #28]
 801049a:	425b      	negs	r3, r3
 801049c:	454b      	cmp	r3, r9
 801049e:	dc01      	bgt.n	80104a4 <_printf_float+0x28c>
 80104a0:	9b08      	ldr	r3, [sp, #32]
 80104a2:	e795      	b.n	80103d0 <_printf_float+0x1b8>
 80104a4:	2301      	movs	r3, #1
 80104a6:	4652      	mov	r2, sl
 80104a8:	4631      	mov	r1, r6
 80104aa:	4628      	mov	r0, r5
 80104ac:	47b8      	blx	r7
 80104ae:	3001      	adds	r0, #1
 80104b0:	f43f af00 	beq.w	80102b4 <_printf_float+0x9c>
 80104b4:	f109 0901 	add.w	r9, r9, #1
 80104b8:	e7ee      	b.n	8010498 <_printf_float+0x280>
 80104ba:	bf00      	nop
 80104bc:	f3af 8000 	nop.w
 80104c0:	ffffffff 	.word	0xffffffff
 80104c4:	7fefffff 	.word	0x7fefffff
 80104c8:	08014414 	.word	0x08014414
 80104cc:	08014418 	.word	0x08014418
 80104d0:	08014420 	.word	0x08014420
 80104d4:	0801441c 	.word	0x0801441c
 80104d8:	08014424 	.word	0x08014424
 80104dc:	9a08      	ldr	r2, [sp, #32]
 80104de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80104e0:	429a      	cmp	r2, r3
 80104e2:	bfa8      	it	ge
 80104e4:	461a      	movge	r2, r3
 80104e6:	2a00      	cmp	r2, #0
 80104e8:	4691      	mov	r9, r2
 80104ea:	dc38      	bgt.n	801055e <_printf_float+0x346>
 80104ec:	2300      	movs	r3, #0
 80104ee:	9305      	str	r3, [sp, #20]
 80104f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80104f4:	f104 021a 	add.w	r2, r4, #26
 80104f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80104fa:	9905      	ldr	r1, [sp, #20]
 80104fc:	9304      	str	r3, [sp, #16]
 80104fe:	eba3 0309 	sub.w	r3, r3, r9
 8010502:	428b      	cmp	r3, r1
 8010504:	dc33      	bgt.n	801056e <_printf_float+0x356>
 8010506:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801050a:	429a      	cmp	r2, r3
 801050c:	db3c      	blt.n	8010588 <_printf_float+0x370>
 801050e:	6823      	ldr	r3, [r4, #0]
 8010510:	07da      	lsls	r2, r3, #31
 8010512:	d439      	bmi.n	8010588 <_printf_float+0x370>
 8010514:	9a08      	ldr	r2, [sp, #32]
 8010516:	9b04      	ldr	r3, [sp, #16]
 8010518:	9907      	ldr	r1, [sp, #28]
 801051a:	1ad3      	subs	r3, r2, r3
 801051c:	eba2 0901 	sub.w	r9, r2, r1
 8010520:	4599      	cmp	r9, r3
 8010522:	bfa8      	it	ge
 8010524:	4699      	movge	r9, r3
 8010526:	f1b9 0f00 	cmp.w	r9, #0
 801052a:	dc35      	bgt.n	8010598 <_printf_float+0x380>
 801052c:	f04f 0800 	mov.w	r8, #0
 8010530:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010534:	f104 0a1a 	add.w	sl, r4, #26
 8010538:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801053c:	1a9b      	subs	r3, r3, r2
 801053e:	eba3 0309 	sub.w	r3, r3, r9
 8010542:	4543      	cmp	r3, r8
 8010544:	f77f af75 	ble.w	8010432 <_printf_float+0x21a>
 8010548:	2301      	movs	r3, #1
 801054a:	4652      	mov	r2, sl
 801054c:	4631      	mov	r1, r6
 801054e:	4628      	mov	r0, r5
 8010550:	47b8      	blx	r7
 8010552:	3001      	adds	r0, #1
 8010554:	f43f aeae 	beq.w	80102b4 <_printf_float+0x9c>
 8010558:	f108 0801 	add.w	r8, r8, #1
 801055c:	e7ec      	b.n	8010538 <_printf_float+0x320>
 801055e:	4613      	mov	r3, r2
 8010560:	4631      	mov	r1, r6
 8010562:	4642      	mov	r2, r8
 8010564:	4628      	mov	r0, r5
 8010566:	47b8      	blx	r7
 8010568:	3001      	adds	r0, #1
 801056a:	d1bf      	bne.n	80104ec <_printf_float+0x2d4>
 801056c:	e6a2      	b.n	80102b4 <_printf_float+0x9c>
 801056e:	2301      	movs	r3, #1
 8010570:	4631      	mov	r1, r6
 8010572:	4628      	mov	r0, r5
 8010574:	9204      	str	r2, [sp, #16]
 8010576:	47b8      	blx	r7
 8010578:	3001      	adds	r0, #1
 801057a:	f43f ae9b 	beq.w	80102b4 <_printf_float+0x9c>
 801057e:	9b05      	ldr	r3, [sp, #20]
 8010580:	9a04      	ldr	r2, [sp, #16]
 8010582:	3301      	adds	r3, #1
 8010584:	9305      	str	r3, [sp, #20]
 8010586:	e7b7      	b.n	80104f8 <_printf_float+0x2e0>
 8010588:	4653      	mov	r3, sl
 801058a:	465a      	mov	r2, fp
 801058c:	4631      	mov	r1, r6
 801058e:	4628      	mov	r0, r5
 8010590:	47b8      	blx	r7
 8010592:	3001      	adds	r0, #1
 8010594:	d1be      	bne.n	8010514 <_printf_float+0x2fc>
 8010596:	e68d      	b.n	80102b4 <_printf_float+0x9c>
 8010598:	9a04      	ldr	r2, [sp, #16]
 801059a:	464b      	mov	r3, r9
 801059c:	4442      	add	r2, r8
 801059e:	4631      	mov	r1, r6
 80105a0:	4628      	mov	r0, r5
 80105a2:	47b8      	blx	r7
 80105a4:	3001      	adds	r0, #1
 80105a6:	d1c1      	bne.n	801052c <_printf_float+0x314>
 80105a8:	e684      	b.n	80102b4 <_printf_float+0x9c>
 80105aa:	9a08      	ldr	r2, [sp, #32]
 80105ac:	2a01      	cmp	r2, #1
 80105ae:	dc01      	bgt.n	80105b4 <_printf_float+0x39c>
 80105b0:	07db      	lsls	r3, r3, #31
 80105b2:	d537      	bpl.n	8010624 <_printf_float+0x40c>
 80105b4:	2301      	movs	r3, #1
 80105b6:	4642      	mov	r2, r8
 80105b8:	4631      	mov	r1, r6
 80105ba:	4628      	mov	r0, r5
 80105bc:	47b8      	blx	r7
 80105be:	3001      	adds	r0, #1
 80105c0:	f43f ae78 	beq.w	80102b4 <_printf_float+0x9c>
 80105c4:	4653      	mov	r3, sl
 80105c6:	465a      	mov	r2, fp
 80105c8:	4631      	mov	r1, r6
 80105ca:	4628      	mov	r0, r5
 80105cc:	47b8      	blx	r7
 80105ce:	3001      	adds	r0, #1
 80105d0:	f43f ae70 	beq.w	80102b4 <_printf_float+0x9c>
 80105d4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80105d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80105dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105e0:	d01b      	beq.n	801061a <_printf_float+0x402>
 80105e2:	9b08      	ldr	r3, [sp, #32]
 80105e4:	f108 0201 	add.w	r2, r8, #1
 80105e8:	3b01      	subs	r3, #1
 80105ea:	4631      	mov	r1, r6
 80105ec:	4628      	mov	r0, r5
 80105ee:	47b8      	blx	r7
 80105f0:	3001      	adds	r0, #1
 80105f2:	d10e      	bne.n	8010612 <_printf_float+0x3fa>
 80105f4:	e65e      	b.n	80102b4 <_printf_float+0x9c>
 80105f6:	2301      	movs	r3, #1
 80105f8:	464a      	mov	r2, r9
 80105fa:	4631      	mov	r1, r6
 80105fc:	4628      	mov	r0, r5
 80105fe:	47b8      	blx	r7
 8010600:	3001      	adds	r0, #1
 8010602:	f43f ae57 	beq.w	80102b4 <_printf_float+0x9c>
 8010606:	f108 0801 	add.w	r8, r8, #1
 801060a:	9b08      	ldr	r3, [sp, #32]
 801060c:	3b01      	subs	r3, #1
 801060e:	4543      	cmp	r3, r8
 8010610:	dcf1      	bgt.n	80105f6 <_printf_float+0x3de>
 8010612:	9b04      	ldr	r3, [sp, #16]
 8010614:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010618:	e6db      	b.n	80103d2 <_printf_float+0x1ba>
 801061a:	f04f 0800 	mov.w	r8, #0
 801061e:	f104 091a 	add.w	r9, r4, #26
 8010622:	e7f2      	b.n	801060a <_printf_float+0x3f2>
 8010624:	2301      	movs	r3, #1
 8010626:	4642      	mov	r2, r8
 8010628:	e7df      	b.n	80105ea <_printf_float+0x3d2>
 801062a:	2301      	movs	r3, #1
 801062c:	464a      	mov	r2, r9
 801062e:	4631      	mov	r1, r6
 8010630:	4628      	mov	r0, r5
 8010632:	47b8      	blx	r7
 8010634:	3001      	adds	r0, #1
 8010636:	f43f ae3d 	beq.w	80102b4 <_printf_float+0x9c>
 801063a:	f108 0801 	add.w	r8, r8, #1
 801063e:	68e3      	ldr	r3, [r4, #12]
 8010640:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010642:	1a5b      	subs	r3, r3, r1
 8010644:	4543      	cmp	r3, r8
 8010646:	dcf0      	bgt.n	801062a <_printf_float+0x412>
 8010648:	e6f7      	b.n	801043a <_printf_float+0x222>
 801064a:	f04f 0800 	mov.w	r8, #0
 801064e:	f104 0919 	add.w	r9, r4, #25
 8010652:	e7f4      	b.n	801063e <_printf_float+0x426>

08010654 <_printf_common>:
 8010654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010658:	4616      	mov	r6, r2
 801065a:	4699      	mov	r9, r3
 801065c:	688a      	ldr	r2, [r1, #8]
 801065e:	690b      	ldr	r3, [r1, #16]
 8010660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010664:	4293      	cmp	r3, r2
 8010666:	bfb8      	it	lt
 8010668:	4613      	movlt	r3, r2
 801066a:	6033      	str	r3, [r6, #0]
 801066c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010670:	4607      	mov	r7, r0
 8010672:	460c      	mov	r4, r1
 8010674:	b10a      	cbz	r2, 801067a <_printf_common+0x26>
 8010676:	3301      	adds	r3, #1
 8010678:	6033      	str	r3, [r6, #0]
 801067a:	6823      	ldr	r3, [r4, #0]
 801067c:	0699      	lsls	r1, r3, #26
 801067e:	bf42      	ittt	mi
 8010680:	6833      	ldrmi	r3, [r6, #0]
 8010682:	3302      	addmi	r3, #2
 8010684:	6033      	strmi	r3, [r6, #0]
 8010686:	6825      	ldr	r5, [r4, #0]
 8010688:	f015 0506 	ands.w	r5, r5, #6
 801068c:	d106      	bne.n	801069c <_printf_common+0x48>
 801068e:	f104 0a19 	add.w	sl, r4, #25
 8010692:	68e3      	ldr	r3, [r4, #12]
 8010694:	6832      	ldr	r2, [r6, #0]
 8010696:	1a9b      	subs	r3, r3, r2
 8010698:	42ab      	cmp	r3, r5
 801069a:	dc26      	bgt.n	80106ea <_printf_common+0x96>
 801069c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80106a0:	1e13      	subs	r3, r2, #0
 80106a2:	6822      	ldr	r2, [r4, #0]
 80106a4:	bf18      	it	ne
 80106a6:	2301      	movne	r3, #1
 80106a8:	0692      	lsls	r2, r2, #26
 80106aa:	d42b      	bmi.n	8010704 <_printf_common+0xb0>
 80106ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80106b0:	4649      	mov	r1, r9
 80106b2:	4638      	mov	r0, r7
 80106b4:	47c0      	blx	r8
 80106b6:	3001      	adds	r0, #1
 80106b8:	d01e      	beq.n	80106f8 <_printf_common+0xa4>
 80106ba:	6823      	ldr	r3, [r4, #0]
 80106bc:	68e5      	ldr	r5, [r4, #12]
 80106be:	6832      	ldr	r2, [r6, #0]
 80106c0:	f003 0306 	and.w	r3, r3, #6
 80106c4:	2b04      	cmp	r3, #4
 80106c6:	bf08      	it	eq
 80106c8:	1aad      	subeq	r5, r5, r2
 80106ca:	68a3      	ldr	r3, [r4, #8]
 80106cc:	6922      	ldr	r2, [r4, #16]
 80106ce:	bf0c      	ite	eq
 80106d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106d4:	2500      	movne	r5, #0
 80106d6:	4293      	cmp	r3, r2
 80106d8:	bfc4      	itt	gt
 80106da:	1a9b      	subgt	r3, r3, r2
 80106dc:	18ed      	addgt	r5, r5, r3
 80106de:	2600      	movs	r6, #0
 80106e0:	341a      	adds	r4, #26
 80106e2:	42b5      	cmp	r5, r6
 80106e4:	d11a      	bne.n	801071c <_printf_common+0xc8>
 80106e6:	2000      	movs	r0, #0
 80106e8:	e008      	b.n	80106fc <_printf_common+0xa8>
 80106ea:	2301      	movs	r3, #1
 80106ec:	4652      	mov	r2, sl
 80106ee:	4649      	mov	r1, r9
 80106f0:	4638      	mov	r0, r7
 80106f2:	47c0      	blx	r8
 80106f4:	3001      	adds	r0, #1
 80106f6:	d103      	bne.n	8010700 <_printf_common+0xac>
 80106f8:	f04f 30ff 	mov.w	r0, #4294967295
 80106fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010700:	3501      	adds	r5, #1
 8010702:	e7c6      	b.n	8010692 <_printf_common+0x3e>
 8010704:	18e1      	adds	r1, r4, r3
 8010706:	1c5a      	adds	r2, r3, #1
 8010708:	2030      	movs	r0, #48	; 0x30
 801070a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801070e:	4422      	add	r2, r4
 8010710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010718:	3302      	adds	r3, #2
 801071a:	e7c7      	b.n	80106ac <_printf_common+0x58>
 801071c:	2301      	movs	r3, #1
 801071e:	4622      	mov	r2, r4
 8010720:	4649      	mov	r1, r9
 8010722:	4638      	mov	r0, r7
 8010724:	47c0      	blx	r8
 8010726:	3001      	adds	r0, #1
 8010728:	d0e6      	beq.n	80106f8 <_printf_common+0xa4>
 801072a:	3601      	adds	r6, #1
 801072c:	e7d9      	b.n	80106e2 <_printf_common+0x8e>
	...

08010730 <_printf_i>:
 8010730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010734:	460c      	mov	r4, r1
 8010736:	4691      	mov	r9, r2
 8010738:	7e27      	ldrb	r7, [r4, #24]
 801073a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801073c:	2f78      	cmp	r7, #120	; 0x78
 801073e:	4680      	mov	r8, r0
 8010740:	469a      	mov	sl, r3
 8010742:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010746:	d807      	bhi.n	8010758 <_printf_i+0x28>
 8010748:	2f62      	cmp	r7, #98	; 0x62
 801074a:	d80a      	bhi.n	8010762 <_printf_i+0x32>
 801074c:	2f00      	cmp	r7, #0
 801074e:	f000 80d8 	beq.w	8010902 <_printf_i+0x1d2>
 8010752:	2f58      	cmp	r7, #88	; 0x58
 8010754:	f000 80a3 	beq.w	801089e <_printf_i+0x16e>
 8010758:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801075c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010760:	e03a      	b.n	80107d8 <_printf_i+0xa8>
 8010762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010766:	2b15      	cmp	r3, #21
 8010768:	d8f6      	bhi.n	8010758 <_printf_i+0x28>
 801076a:	a001      	add	r0, pc, #4	; (adr r0, 8010770 <_printf_i+0x40>)
 801076c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010770:	080107c9 	.word	0x080107c9
 8010774:	080107dd 	.word	0x080107dd
 8010778:	08010759 	.word	0x08010759
 801077c:	08010759 	.word	0x08010759
 8010780:	08010759 	.word	0x08010759
 8010784:	08010759 	.word	0x08010759
 8010788:	080107dd 	.word	0x080107dd
 801078c:	08010759 	.word	0x08010759
 8010790:	08010759 	.word	0x08010759
 8010794:	08010759 	.word	0x08010759
 8010798:	08010759 	.word	0x08010759
 801079c:	080108e9 	.word	0x080108e9
 80107a0:	0801080d 	.word	0x0801080d
 80107a4:	080108cb 	.word	0x080108cb
 80107a8:	08010759 	.word	0x08010759
 80107ac:	08010759 	.word	0x08010759
 80107b0:	0801090b 	.word	0x0801090b
 80107b4:	08010759 	.word	0x08010759
 80107b8:	0801080d 	.word	0x0801080d
 80107bc:	08010759 	.word	0x08010759
 80107c0:	08010759 	.word	0x08010759
 80107c4:	080108d3 	.word	0x080108d3
 80107c8:	680b      	ldr	r3, [r1, #0]
 80107ca:	1d1a      	adds	r2, r3, #4
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	600a      	str	r2, [r1, #0]
 80107d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80107d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80107d8:	2301      	movs	r3, #1
 80107da:	e0a3      	b.n	8010924 <_printf_i+0x1f4>
 80107dc:	6825      	ldr	r5, [r4, #0]
 80107de:	6808      	ldr	r0, [r1, #0]
 80107e0:	062e      	lsls	r6, r5, #24
 80107e2:	f100 0304 	add.w	r3, r0, #4
 80107e6:	d50a      	bpl.n	80107fe <_printf_i+0xce>
 80107e8:	6805      	ldr	r5, [r0, #0]
 80107ea:	600b      	str	r3, [r1, #0]
 80107ec:	2d00      	cmp	r5, #0
 80107ee:	da03      	bge.n	80107f8 <_printf_i+0xc8>
 80107f0:	232d      	movs	r3, #45	; 0x2d
 80107f2:	426d      	negs	r5, r5
 80107f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107f8:	485e      	ldr	r0, [pc, #376]	; (8010974 <_printf_i+0x244>)
 80107fa:	230a      	movs	r3, #10
 80107fc:	e019      	b.n	8010832 <_printf_i+0x102>
 80107fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010802:	6805      	ldr	r5, [r0, #0]
 8010804:	600b      	str	r3, [r1, #0]
 8010806:	bf18      	it	ne
 8010808:	b22d      	sxthne	r5, r5
 801080a:	e7ef      	b.n	80107ec <_printf_i+0xbc>
 801080c:	680b      	ldr	r3, [r1, #0]
 801080e:	6825      	ldr	r5, [r4, #0]
 8010810:	1d18      	adds	r0, r3, #4
 8010812:	6008      	str	r0, [r1, #0]
 8010814:	0628      	lsls	r0, r5, #24
 8010816:	d501      	bpl.n	801081c <_printf_i+0xec>
 8010818:	681d      	ldr	r5, [r3, #0]
 801081a:	e002      	b.n	8010822 <_printf_i+0xf2>
 801081c:	0669      	lsls	r1, r5, #25
 801081e:	d5fb      	bpl.n	8010818 <_printf_i+0xe8>
 8010820:	881d      	ldrh	r5, [r3, #0]
 8010822:	4854      	ldr	r0, [pc, #336]	; (8010974 <_printf_i+0x244>)
 8010824:	2f6f      	cmp	r7, #111	; 0x6f
 8010826:	bf0c      	ite	eq
 8010828:	2308      	moveq	r3, #8
 801082a:	230a      	movne	r3, #10
 801082c:	2100      	movs	r1, #0
 801082e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010832:	6866      	ldr	r6, [r4, #4]
 8010834:	60a6      	str	r6, [r4, #8]
 8010836:	2e00      	cmp	r6, #0
 8010838:	bfa2      	ittt	ge
 801083a:	6821      	ldrge	r1, [r4, #0]
 801083c:	f021 0104 	bicge.w	r1, r1, #4
 8010840:	6021      	strge	r1, [r4, #0]
 8010842:	b90d      	cbnz	r5, 8010848 <_printf_i+0x118>
 8010844:	2e00      	cmp	r6, #0
 8010846:	d04d      	beq.n	80108e4 <_printf_i+0x1b4>
 8010848:	4616      	mov	r6, r2
 801084a:	fbb5 f1f3 	udiv	r1, r5, r3
 801084e:	fb03 5711 	mls	r7, r3, r1, r5
 8010852:	5dc7      	ldrb	r7, [r0, r7]
 8010854:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010858:	462f      	mov	r7, r5
 801085a:	42bb      	cmp	r3, r7
 801085c:	460d      	mov	r5, r1
 801085e:	d9f4      	bls.n	801084a <_printf_i+0x11a>
 8010860:	2b08      	cmp	r3, #8
 8010862:	d10b      	bne.n	801087c <_printf_i+0x14c>
 8010864:	6823      	ldr	r3, [r4, #0]
 8010866:	07df      	lsls	r7, r3, #31
 8010868:	d508      	bpl.n	801087c <_printf_i+0x14c>
 801086a:	6923      	ldr	r3, [r4, #16]
 801086c:	6861      	ldr	r1, [r4, #4]
 801086e:	4299      	cmp	r1, r3
 8010870:	bfde      	ittt	le
 8010872:	2330      	movle	r3, #48	; 0x30
 8010874:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010878:	f106 36ff 	addle.w	r6, r6, #4294967295
 801087c:	1b92      	subs	r2, r2, r6
 801087e:	6122      	str	r2, [r4, #16]
 8010880:	f8cd a000 	str.w	sl, [sp]
 8010884:	464b      	mov	r3, r9
 8010886:	aa03      	add	r2, sp, #12
 8010888:	4621      	mov	r1, r4
 801088a:	4640      	mov	r0, r8
 801088c:	f7ff fee2 	bl	8010654 <_printf_common>
 8010890:	3001      	adds	r0, #1
 8010892:	d14c      	bne.n	801092e <_printf_i+0x1fe>
 8010894:	f04f 30ff 	mov.w	r0, #4294967295
 8010898:	b004      	add	sp, #16
 801089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801089e:	4835      	ldr	r0, [pc, #212]	; (8010974 <_printf_i+0x244>)
 80108a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80108a4:	6823      	ldr	r3, [r4, #0]
 80108a6:	680e      	ldr	r6, [r1, #0]
 80108a8:	061f      	lsls	r7, r3, #24
 80108aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80108ae:	600e      	str	r6, [r1, #0]
 80108b0:	d514      	bpl.n	80108dc <_printf_i+0x1ac>
 80108b2:	07d9      	lsls	r1, r3, #31
 80108b4:	bf44      	itt	mi
 80108b6:	f043 0320 	orrmi.w	r3, r3, #32
 80108ba:	6023      	strmi	r3, [r4, #0]
 80108bc:	b91d      	cbnz	r5, 80108c6 <_printf_i+0x196>
 80108be:	6823      	ldr	r3, [r4, #0]
 80108c0:	f023 0320 	bic.w	r3, r3, #32
 80108c4:	6023      	str	r3, [r4, #0]
 80108c6:	2310      	movs	r3, #16
 80108c8:	e7b0      	b.n	801082c <_printf_i+0xfc>
 80108ca:	6823      	ldr	r3, [r4, #0]
 80108cc:	f043 0320 	orr.w	r3, r3, #32
 80108d0:	6023      	str	r3, [r4, #0]
 80108d2:	2378      	movs	r3, #120	; 0x78
 80108d4:	4828      	ldr	r0, [pc, #160]	; (8010978 <_printf_i+0x248>)
 80108d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80108da:	e7e3      	b.n	80108a4 <_printf_i+0x174>
 80108dc:	065e      	lsls	r6, r3, #25
 80108de:	bf48      	it	mi
 80108e0:	b2ad      	uxthmi	r5, r5
 80108e2:	e7e6      	b.n	80108b2 <_printf_i+0x182>
 80108e4:	4616      	mov	r6, r2
 80108e6:	e7bb      	b.n	8010860 <_printf_i+0x130>
 80108e8:	680b      	ldr	r3, [r1, #0]
 80108ea:	6826      	ldr	r6, [r4, #0]
 80108ec:	6960      	ldr	r0, [r4, #20]
 80108ee:	1d1d      	adds	r5, r3, #4
 80108f0:	600d      	str	r5, [r1, #0]
 80108f2:	0635      	lsls	r5, r6, #24
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	d501      	bpl.n	80108fc <_printf_i+0x1cc>
 80108f8:	6018      	str	r0, [r3, #0]
 80108fa:	e002      	b.n	8010902 <_printf_i+0x1d2>
 80108fc:	0671      	lsls	r1, r6, #25
 80108fe:	d5fb      	bpl.n	80108f8 <_printf_i+0x1c8>
 8010900:	8018      	strh	r0, [r3, #0]
 8010902:	2300      	movs	r3, #0
 8010904:	6123      	str	r3, [r4, #16]
 8010906:	4616      	mov	r6, r2
 8010908:	e7ba      	b.n	8010880 <_printf_i+0x150>
 801090a:	680b      	ldr	r3, [r1, #0]
 801090c:	1d1a      	adds	r2, r3, #4
 801090e:	600a      	str	r2, [r1, #0]
 8010910:	681e      	ldr	r6, [r3, #0]
 8010912:	6862      	ldr	r2, [r4, #4]
 8010914:	2100      	movs	r1, #0
 8010916:	4630      	mov	r0, r6
 8010918:	f7ef fcea 	bl	80002f0 <memchr>
 801091c:	b108      	cbz	r0, 8010922 <_printf_i+0x1f2>
 801091e:	1b80      	subs	r0, r0, r6
 8010920:	6060      	str	r0, [r4, #4]
 8010922:	6863      	ldr	r3, [r4, #4]
 8010924:	6123      	str	r3, [r4, #16]
 8010926:	2300      	movs	r3, #0
 8010928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801092c:	e7a8      	b.n	8010880 <_printf_i+0x150>
 801092e:	6923      	ldr	r3, [r4, #16]
 8010930:	4632      	mov	r2, r6
 8010932:	4649      	mov	r1, r9
 8010934:	4640      	mov	r0, r8
 8010936:	47d0      	blx	sl
 8010938:	3001      	adds	r0, #1
 801093a:	d0ab      	beq.n	8010894 <_printf_i+0x164>
 801093c:	6823      	ldr	r3, [r4, #0]
 801093e:	079b      	lsls	r3, r3, #30
 8010940:	d413      	bmi.n	801096a <_printf_i+0x23a>
 8010942:	68e0      	ldr	r0, [r4, #12]
 8010944:	9b03      	ldr	r3, [sp, #12]
 8010946:	4298      	cmp	r0, r3
 8010948:	bfb8      	it	lt
 801094a:	4618      	movlt	r0, r3
 801094c:	e7a4      	b.n	8010898 <_printf_i+0x168>
 801094e:	2301      	movs	r3, #1
 8010950:	4632      	mov	r2, r6
 8010952:	4649      	mov	r1, r9
 8010954:	4640      	mov	r0, r8
 8010956:	47d0      	blx	sl
 8010958:	3001      	adds	r0, #1
 801095a:	d09b      	beq.n	8010894 <_printf_i+0x164>
 801095c:	3501      	adds	r5, #1
 801095e:	68e3      	ldr	r3, [r4, #12]
 8010960:	9903      	ldr	r1, [sp, #12]
 8010962:	1a5b      	subs	r3, r3, r1
 8010964:	42ab      	cmp	r3, r5
 8010966:	dcf2      	bgt.n	801094e <_printf_i+0x21e>
 8010968:	e7eb      	b.n	8010942 <_printf_i+0x212>
 801096a:	2500      	movs	r5, #0
 801096c:	f104 0619 	add.w	r6, r4, #25
 8010970:	e7f5      	b.n	801095e <_printf_i+0x22e>
 8010972:	bf00      	nop
 8010974:	08014426 	.word	0x08014426
 8010978:	08014437 	.word	0x08014437

0801097c <quorem>:
 801097c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010980:	6903      	ldr	r3, [r0, #16]
 8010982:	690c      	ldr	r4, [r1, #16]
 8010984:	42a3      	cmp	r3, r4
 8010986:	4607      	mov	r7, r0
 8010988:	f2c0 8081 	blt.w	8010a8e <quorem+0x112>
 801098c:	3c01      	subs	r4, #1
 801098e:	f101 0814 	add.w	r8, r1, #20
 8010992:	f100 0514 	add.w	r5, r0, #20
 8010996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801099a:	9301      	str	r3, [sp, #4]
 801099c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80109a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80109a4:	3301      	adds	r3, #1
 80109a6:	429a      	cmp	r2, r3
 80109a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80109ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80109b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80109b4:	d331      	bcc.n	8010a1a <quorem+0x9e>
 80109b6:	f04f 0e00 	mov.w	lr, #0
 80109ba:	4640      	mov	r0, r8
 80109bc:	46ac      	mov	ip, r5
 80109be:	46f2      	mov	sl, lr
 80109c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80109c4:	b293      	uxth	r3, r2
 80109c6:	fb06 e303 	mla	r3, r6, r3, lr
 80109ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80109ce:	b29b      	uxth	r3, r3
 80109d0:	ebaa 0303 	sub.w	r3, sl, r3
 80109d4:	0c12      	lsrs	r2, r2, #16
 80109d6:	f8dc a000 	ldr.w	sl, [ip]
 80109da:	fb06 e202 	mla	r2, r6, r2, lr
 80109de:	fa13 f38a 	uxtah	r3, r3, sl
 80109e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80109e6:	fa1f fa82 	uxth.w	sl, r2
 80109ea:	f8dc 2000 	ldr.w	r2, [ip]
 80109ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80109f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80109f6:	b29b      	uxth	r3, r3
 80109f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80109fc:	4581      	cmp	r9, r0
 80109fe:	f84c 3b04 	str.w	r3, [ip], #4
 8010a02:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010a06:	d2db      	bcs.n	80109c0 <quorem+0x44>
 8010a08:	f855 300b 	ldr.w	r3, [r5, fp]
 8010a0c:	b92b      	cbnz	r3, 8010a1a <quorem+0x9e>
 8010a0e:	9b01      	ldr	r3, [sp, #4]
 8010a10:	3b04      	subs	r3, #4
 8010a12:	429d      	cmp	r5, r3
 8010a14:	461a      	mov	r2, r3
 8010a16:	d32e      	bcc.n	8010a76 <quorem+0xfa>
 8010a18:	613c      	str	r4, [r7, #16]
 8010a1a:	4638      	mov	r0, r7
 8010a1c:	f001 f848 	bl	8011ab0 <__mcmp>
 8010a20:	2800      	cmp	r0, #0
 8010a22:	db24      	blt.n	8010a6e <quorem+0xf2>
 8010a24:	3601      	adds	r6, #1
 8010a26:	4628      	mov	r0, r5
 8010a28:	f04f 0c00 	mov.w	ip, #0
 8010a2c:	f858 2b04 	ldr.w	r2, [r8], #4
 8010a30:	f8d0 e000 	ldr.w	lr, [r0]
 8010a34:	b293      	uxth	r3, r2
 8010a36:	ebac 0303 	sub.w	r3, ip, r3
 8010a3a:	0c12      	lsrs	r2, r2, #16
 8010a3c:	fa13 f38e 	uxtah	r3, r3, lr
 8010a40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010a44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a4e:	45c1      	cmp	r9, r8
 8010a50:	f840 3b04 	str.w	r3, [r0], #4
 8010a54:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010a58:	d2e8      	bcs.n	8010a2c <quorem+0xb0>
 8010a5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010a5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010a62:	b922      	cbnz	r2, 8010a6e <quorem+0xf2>
 8010a64:	3b04      	subs	r3, #4
 8010a66:	429d      	cmp	r5, r3
 8010a68:	461a      	mov	r2, r3
 8010a6a:	d30a      	bcc.n	8010a82 <quorem+0x106>
 8010a6c:	613c      	str	r4, [r7, #16]
 8010a6e:	4630      	mov	r0, r6
 8010a70:	b003      	add	sp, #12
 8010a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a76:	6812      	ldr	r2, [r2, #0]
 8010a78:	3b04      	subs	r3, #4
 8010a7a:	2a00      	cmp	r2, #0
 8010a7c:	d1cc      	bne.n	8010a18 <quorem+0x9c>
 8010a7e:	3c01      	subs	r4, #1
 8010a80:	e7c7      	b.n	8010a12 <quorem+0x96>
 8010a82:	6812      	ldr	r2, [r2, #0]
 8010a84:	3b04      	subs	r3, #4
 8010a86:	2a00      	cmp	r2, #0
 8010a88:	d1f0      	bne.n	8010a6c <quorem+0xf0>
 8010a8a:	3c01      	subs	r4, #1
 8010a8c:	e7eb      	b.n	8010a66 <quorem+0xea>
 8010a8e:	2000      	movs	r0, #0
 8010a90:	e7ee      	b.n	8010a70 <quorem+0xf4>
 8010a92:	0000      	movs	r0, r0
 8010a94:	0000      	movs	r0, r0
	...

08010a98 <_dtoa_r>:
 8010a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a9c:	ec59 8b10 	vmov	r8, r9, d0
 8010aa0:	b095      	sub	sp, #84	; 0x54
 8010aa2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010aa4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8010aa6:	9107      	str	r1, [sp, #28]
 8010aa8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8010aac:	4606      	mov	r6, r0
 8010aae:	9209      	str	r2, [sp, #36]	; 0x24
 8010ab0:	9310      	str	r3, [sp, #64]	; 0x40
 8010ab2:	b975      	cbnz	r5, 8010ad2 <_dtoa_r+0x3a>
 8010ab4:	2010      	movs	r0, #16
 8010ab6:	f000 fd75 	bl	80115a4 <malloc>
 8010aba:	4602      	mov	r2, r0
 8010abc:	6270      	str	r0, [r6, #36]	; 0x24
 8010abe:	b920      	cbnz	r0, 8010aca <_dtoa_r+0x32>
 8010ac0:	4bab      	ldr	r3, [pc, #684]	; (8010d70 <_dtoa_r+0x2d8>)
 8010ac2:	21ea      	movs	r1, #234	; 0xea
 8010ac4:	48ab      	ldr	r0, [pc, #684]	; (8010d74 <_dtoa_r+0x2dc>)
 8010ac6:	f001 f9bd 	bl	8011e44 <__assert_func>
 8010aca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010ace:	6005      	str	r5, [r0, #0]
 8010ad0:	60c5      	str	r5, [r0, #12]
 8010ad2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010ad4:	6819      	ldr	r1, [r3, #0]
 8010ad6:	b151      	cbz	r1, 8010aee <_dtoa_r+0x56>
 8010ad8:	685a      	ldr	r2, [r3, #4]
 8010ada:	604a      	str	r2, [r1, #4]
 8010adc:	2301      	movs	r3, #1
 8010ade:	4093      	lsls	r3, r2
 8010ae0:	608b      	str	r3, [r1, #8]
 8010ae2:	4630      	mov	r0, r6
 8010ae4:	f000 fda6 	bl	8011634 <_Bfree>
 8010ae8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010aea:	2200      	movs	r2, #0
 8010aec:	601a      	str	r2, [r3, #0]
 8010aee:	f1b9 0300 	subs.w	r3, r9, #0
 8010af2:	bfbb      	ittet	lt
 8010af4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010af8:	9303      	strlt	r3, [sp, #12]
 8010afa:	2300      	movge	r3, #0
 8010afc:	2201      	movlt	r2, #1
 8010afe:	bfac      	ite	ge
 8010b00:	6023      	strge	r3, [r4, #0]
 8010b02:	6022      	strlt	r2, [r4, #0]
 8010b04:	4b9c      	ldr	r3, [pc, #624]	; (8010d78 <_dtoa_r+0x2e0>)
 8010b06:	9c03      	ldr	r4, [sp, #12]
 8010b08:	43a3      	bics	r3, r4
 8010b0a:	d11a      	bne.n	8010b42 <_dtoa_r+0xaa>
 8010b0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010b0e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010b12:	6013      	str	r3, [r2, #0]
 8010b14:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010b18:	ea53 0308 	orrs.w	r3, r3, r8
 8010b1c:	f000 8512 	beq.w	8011544 <_dtoa_r+0xaac>
 8010b20:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010b22:	b953      	cbnz	r3, 8010b3a <_dtoa_r+0xa2>
 8010b24:	4b95      	ldr	r3, [pc, #596]	; (8010d7c <_dtoa_r+0x2e4>)
 8010b26:	e01f      	b.n	8010b68 <_dtoa_r+0xd0>
 8010b28:	4b95      	ldr	r3, [pc, #596]	; (8010d80 <_dtoa_r+0x2e8>)
 8010b2a:	9300      	str	r3, [sp, #0]
 8010b2c:	3308      	adds	r3, #8
 8010b2e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010b30:	6013      	str	r3, [r2, #0]
 8010b32:	9800      	ldr	r0, [sp, #0]
 8010b34:	b015      	add	sp, #84	; 0x54
 8010b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b3a:	4b90      	ldr	r3, [pc, #576]	; (8010d7c <_dtoa_r+0x2e4>)
 8010b3c:	9300      	str	r3, [sp, #0]
 8010b3e:	3303      	adds	r3, #3
 8010b40:	e7f5      	b.n	8010b2e <_dtoa_r+0x96>
 8010b42:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b46:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b4e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8010b52:	d10b      	bne.n	8010b6c <_dtoa_r+0xd4>
 8010b54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010b56:	2301      	movs	r3, #1
 8010b58:	6013      	str	r3, [r2, #0]
 8010b5a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	f000 84ee 	beq.w	801153e <_dtoa_r+0xaa6>
 8010b62:	4888      	ldr	r0, [pc, #544]	; (8010d84 <_dtoa_r+0x2ec>)
 8010b64:	6018      	str	r0, [r3, #0]
 8010b66:	1e43      	subs	r3, r0, #1
 8010b68:	9300      	str	r3, [sp, #0]
 8010b6a:	e7e2      	b.n	8010b32 <_dtoa_r+0x9a>
 8010b6c:	a913      	add	r1, sp, #76	; 0x4c
 8010b6e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8010b72:	aa12      	add	r2, sp, #72	; 0x48
 8010b74:	4630      	mov	r0, r6
 8010b76:	f001 f83f 	bl	8011bf8 <__d2b>
 8010b7a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8010b7e:	4605      	mov	r5, r0
 8010b80:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010b82:	2900      	cmp	r1, #0
 8010b84:	d047      	beq.n	8010c16 <_dtoa_r+0x17e>
 8010b86:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010b88:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010b8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010b90:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8010b94:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010b98:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8010b9c:	2400      	movs	r4, #0
 8010b9e:	ec43 2b16 	vmov	d6, r2, r3
 8010ba2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010ba6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8010d58 <_dtoa_r+0x2c0>
 8010baa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010bae:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8010d60 <_dtoa_r+0x2c8>
 8010bb2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010bb6:	eeb0 7b46 	vmov.f64	d7, d6
 8010bba:	ee06 1a90 	vmov	s13, r1
 8010bbe:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8010bc2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8010d68 <_dtoa_r+0x2d0>
 8010bc6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8010bca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010bce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bd6:	ee16 ba90 	vmov	fp, s13
 8010bda:	9411      	str	r4, [sp, #68]	; 0x44
 8010bdc:	d508      	bpl.n	8010bf0 <_dtoa_r+0x158>
 8010bde:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010be2:	eeb4 6b47 	vcmp.f64	d6, d7
 8010be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bea:	bf18      	it	ne
 8010bec:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010bf0:	f1bb 0f16 	cmp.w	fp, #22
 8010bf4:	d832      	bhi.n	8010c5c <_dtoa_r+0x1c4>
 8010bf6:	4b64      	ldr	r3, [pc, #400]	; (8010d88 <_dtoa_r+0x2f0>)
 8010bf8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010bfc:	ed93 7b00 	vldr	d7, [r3]
 8010c00:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010c04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c0c:	d501      	bpl.n	8010c12 <_dtoa_r+0x17a>
 8010c0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010c12:	2300      	movs	r3, #0
 8010c14:	e023      	b.n	8010c5e <_dtoa_r+0x1c6>
 8010c16:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010c18:	4401      	add	r1, r0
 8010c1a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8010c1e:	2b20      	cmp	r3, #32
 8010c20:	bfc3      	ittte	gt
 8010c22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010c26:	fa04 f303 	lslgt.w	r3, r4, r3
 8010c2a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8010c2e:	f1c3 0320 	rsble	r3, r3, #32
 8010c32:	bfc6      	itte	gt
 8010c34:	fa28 f804 	lsrgt.w	r8, r8, r4
 8010c38:	ea43 0308 	orrgt.w	r3, r3, r8
 8010c3c:	fa08 f303 	lslle.w	r3, r8, r3
 8010c40:	ee07 3a90 	vmov	s15, r3
 8010c44:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8010c48:	3901      	subs	r1, #1
 8010c4a:	ed8d 7b00 	vstr	d7, [sp]
 8010c4e:	9c01      	ldr	r4, [sp, #4]
 8010c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010c54:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8010c58:	2401      	movs	r4, #1
 8010c5a:	e7a0      	b.n	8010b9e <_dtoa_r+0x106>
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c60:	1a43      	subs	r3, r0, r1
 8010c62:	1e5a      	subs	r2, r3, #1
 8010c64:	bf45      	ittet	mi
 8010c66:	f1c3 0301 	rsbmi	r3, r3, #1
 8010c6a:	9305      	strmi	r3, [sp, #20]
 8010c6c:	2300      	movpl	r3, #0
 8010c6e:	2300      	movmi	r3, #0
 8010c70:	9206      	str	r2, [sp, #24]
 8010c72:	bf54      	ite	pl
 8010c74:	9305      	strpl	r3, [sp, #20]
 8010c76:	9306      	strmi	r3, [sp, #24]
 8010c78:	f1bb 0f00 	cmp.w	fp, #0
 8010c7c:	db18      	blt.n	8010cb0 <_dtoa_r+0x218>
 8010c7e:	9b06      	ldr	r3, [sp, #24]
 8010c80:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8010c84:	445b      	add	r3, fp
 8010c86:	9306      	str	r3, [sp, #24]
 8010c88:	2300      	movs	r3, #0
 8010c8a:	9a07      	ldr	r2, [sp, #28]
 8010c8c:	2a09      	cmp	r2, #9
 8010c8e:	d849      	bhi.n	8010d24 <_dtoa_r+0x28c>
 8010c90:	2a05      	cmp	r2, #5
 8010c92:	bfc4      	itt	gt
 8010c94:	3a04      	subgt	r2, #4
 8010c96:	9207      	strgt	r2, [sp, #28]
 8010c98:	9a07      	ldr	r2, [sp, #28]
 8010c9a:	f1a2 0202 	sub.w	r2, r2, #2
 8010c9e:	bfcc      	ite	gt
 8010ca0:	2400      	movgt	r4, #0
 8010ca2:	2401      	movle	r4, #1
 8010ca4:	2a03      	cmp	r2, #3
 8010ca6:	d848      	bhi.n	8010d3a <_dtoa_r+0x2a2>
 8010ca8:	e8df f002 	tbb	[pc, r2]
 8010cac:	3a2c2e0b 	.word	0x3a2c2e0b
 8010cb0:	9b05      	ldr	r3, [sp, #20]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	eba3 030b 	sub.w	r3, r3, fp
 8010cb8:	9305      	str	r3, [sp, #20]
 8010cba:	920e      	str	r2, [sp, #56]	; 0x38
 8010cbc:	f1cb 0300 	rsb	r3, fp, #0
 8010cc0:	e7e3      	b.n	8010c8a <_dtoa_r+0x1f2>
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	9208      	str	r2, [sp, #32]
 8010cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010cc8:	2a00      	cmp	r2, #0
 8010cca:	dc39      	bgt.n	8010d40 <_dtoa_r+0x2a8>
 8010ccc:	f04f 0a01 	mov.w	sl, #1
 8010cd0:	46d1      	mov	r9, sl
 8010cd2:	4652      	mov	r2, sl
 8010cd4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010cd8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8010cda:	2100      	movs	r1, #0
 8010cdc:	6079      	str	r1, [r7, #4]
 8010cde:	2004      	movs	r0, #4
 8010ce0:	f100 0c14 	add.w	ip, r0, #20
 8010ce4:	4594      	cmp	ip, r2
 8010ce6:	6879      	ldr	r1, [r7, #4]
 8010ce8:	d92f      	bls.n	8010d4a <_dtoa_r+0x2b2>
 8010cea:	4630      	mov	r0, r6
 8010cec:	930c      	str	r3, [sp, #48]	; 0x30
 8010cee:	f000 fc61 	bl	80115b4 <_Balloc>
 8010cf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010cf4:	9000      	str	r0, [sp, #0]
 8010cf6:	4602      	mov	r2, r0
 8010cf8:	2800      	cmp	r0, #0
 8010cfa:	d149      	bne.n	8010d90 <_dtoa_r+0x2f8>
 8010cfc:	4b23      	ldr	r3, [pc, #140]	; (8010d8c <_dtoa_r+0x2f4>)
 8010cfe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010d02:	e6df      	b.n	8010ac4 <_dtoa_r+0x2c>
 8010d04:	2201      	movs	r2, #1
 8010d06:	e7dd      	b.n	8010cc4 <_dtoa_r+0x22c>
 8010d08:	2200      	movs	r2, #0
 8010d0a:	9208      	str	r2, [sp, #32]
 8010d0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010d0e:	eb0b 0a02 	add.w	sl, fp, r2
 8010d12:	f10a 0901 	add.w	r9, sl, #1
 8010d16:	464a      	mov	r2, r9
 8010d18:	2a01      	cmp	r2, #1
 8010d1a:	bfb8      	it	lt
 8010d1c:	2201      	movlt	r2, #1
 8010d1e:	e7db      	b.n	8010cd8 <_dtoa_r+0x240>
 8010d20:	2201      	movs	r2, #1
 8010d22:	e7f2      	b.n	8010d0a <_dtoa_r+0x272>
 8010d24:	2401      	movs	r4, #1
 8010d26:	2200      	movs	r2, #0
 8010d28:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010d2c:	f04f 3aff 	mov.w	sl, #4294967295
 8010d30:	2100      	movs	r1, #0
 8010d32:	46d1      	mov	r9, sl
 8010d34:	2212      	movs	r2, #18
 8010d36:	9109      	str	r1, [sp, #36]	; 0x24
 8010d38:	e7ce      	b.n	8010cd8 <_dtoa_r+0x240>
 8010d3a:	2201      	movs	r2, #1
 8010d3c:	9208      	str	r2, [sp, #32]
 8010d3e:	e7f5      	b.n	8010d2c <_dtoa_r+0x294>
 8010d40:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8010d44:	46d1      	mov	r9, sl
 8010d46:	4652      	mov	r2, sl
 8010d48:	e7c6      	b.n	8010cd8 <_dtoa_r+0x240>
 8010d4a:	3101      	adds	r1, #1
 8010d4c:	6079      	str	r1, [r7, #4]
 8010d4e:	0040      	lsls	r0, r0, #1
 8010d50:	e7c6      	b.n	8010ce0 <_dtoa_r+0x248>
 8010d52:	bf00      	nop
 8010d54:	f3af 8000 	nop.w
 8010d58:	636f4361 	.word	0x636f4361
 8010d5c:	3fd287a7 	.word	0x3fd287a7
 8010d60:	8b60c8b3 	.word	0x8b60c8b3
 8010d64:	3fc68a28 	.word	0x3fc68a28
 8010d68:	509f79fb 	.word	0x509f79fb
 8010d6c:	3fd34413 	.word	0x3fd34413
 8010d70:	08014455 	.word	0x08014455
 8010d74:	0801446c 	.word	0x0801446c
 8010d78:	7ff00000 	.word	0x7ff00000
 8010d7c:	08014451 	.word	0x08014451
 8010d80:	08014448 	.word	0x08014448
 8010d84:	08014425 	.word	0x08014425
 8010d88:	08014568 	.word	0x08014568
 8010d8c:	080144cb 	.word	0x080144cb
 8010d90:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010d92:	9900      	ldr	r1, [sp, #0]
 8010d94:	6011      	str	r1, [r2, #0]
 8010d96:	f1b9 0f0e 	cmp.w	r9, #14
 8010d9a:	d872      	bhi.n	8010e82 <_dtoa_r+0x3ea>
 8010d9c:	2c00      	cmp	r4, #0
 8010d9e:	d070      	beq.n	8010e82 <_dtoa_r+0x3ea>
 8010da0:	f1bb 0f00 	cmp.w	fp, #0
 8010da4:	f340 80a6 	ble.w	8010ef4 <_dtoa_r+0x45c>
 8010da8:	49ca      	ldr	r1, [pc, #808]	; (80110d4 <_dtoa_r+0x63c>)
 8010daa:	f00b 020f 	and.w	r2, fp, #15
 8010dae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010db2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010db6:	ed92 7b00 	vldr	d7, [r2]
 8010dba:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010dbe:	f000 808d 	beq.w	8010edc <_dtoa_r+0x444>
 8010dc2:	4ac5      	ldr	r2, [pc, #788]	; (80110d8 <_dtoa_r+0x640>)
 8010dc4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010dc8:	ed92 6b08 	vldr	d6, [r2, #32]
 8010dcc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8010dd0:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010dd4:	f001 010f 	and.w	r1, r1, #15
 8010dd8:	2203      	movs	r2, #3
 8010dda:	48bf      	ldr	r0, [pc, #764]	; (80110d8 <_dtoa_r+0x640>)
 8010ddc:	2900      	cmp	r1, #0
 8010dde:	d17f      	bne.n	8010ee0 <_dtoa_r+0x448>
 8010de0:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010de4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010de8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010dec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010dee:	2900      	cmp	r1, #0
 8010df0:	f000 80b2 	beq.w	8010f58 <_dtoa_r+0x4c0>
 8010df4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010df8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010dfc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e04:	f140 80a8 	bpl.w	8010f58 <_dtoa_r+0x4c0>
 8010e08:	f1b9 0f00 	cmp.w	r9, #0
 8010e0c:	f000 80a4 	beq.w	8010f58 <_dtoa_r+0x4c0>
 8010e10:	f1ba 0f00 	cmp.w	sl, #0
 8010e14:	dd31      	ble.n	8010e7a <_dtoa_r+0x3e2>
 8010e16:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010e1a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010e1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010e22:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010e26:	3201      	adds	r2, #1
 8010e28:	4650      	mov	r0, sl
 8010e2a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010e2e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010e32:	ee07 2a90 	vmov	s15, r2
 8010e36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010e3a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010e3e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8010e42:	9c03      	ldr	r4, [sp, #12]
 8010e44:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010e48:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8010e4c:	2800      	cmp	r0, #0
 8010e4e:	f040 8086 	bne.w	8010f5e <_dtoa_r+0x4c6>
 8010e52:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010e56:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010e5a:	ec42 1b17 	vmov	d7, r1, r2
 8010e5e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e66:	f300 8272 	bgt.w	801134e <_dtoa_r+0x8b6>
 8010e6a:	eeb1 7b47 	vneg.f64	d7, d7
 8010e6e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e76:	f100 8267 	bmi.w	8011348 <_dtoa_r+0x8b0>
 8010e7a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8010e7e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010e82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010e84:	2a00      	cmp	r2, #0
 8010e86:	f2c0 8129 	blt.w	80110dc <_dtoa_r+0x644>
 8010e8a:	f1bb 0f0e 	cmp.w	fp, #14
 8010e8e:	f300 8125 	bgt.w	80110dc <_dtoa_r+0x644>
 8010e92:	4b90      	ldr	r3, [pc, #576]	; (80110d4 <_dtoa_r+0x63c>)
 8010e94:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010e98:	ed93 6b00 	vldr	d6, [r3]
 8010e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	f280 80c3 	bge.w	801102a <_dtoa_r+0x592>
 8010ea4:	f1b9 0f00 	cmp.w	r9, #0
 8010ea8:	f300 80bf 	bgt.w	801102a <_dtoa_r+0x592>
 8010eac:	f040 824c 	bne.w	8011348 <_dtoa_r+0x8b0>
 8010eb0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010eb4:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010eb8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ebc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ec4:	464c      	mov	r4, r9
 8010ec6:	464f      	mov	r7, r9
 8010ec8:	f280 8222 	bge.w	8011310 <_dtoa_r+0x878>
 8010ecc:	f8dd 8000 	ldr.w	r8, [sp]
 8010ed0:	2331      	movs	r3, #49	; 0x31
 8010ed2:	f808 3b01 	strb.w	r3, [r8], #1
 8010ed6:	f10b 0b01 	add.w	fp, fp, #1
 8010eda:	e21e      	b.n	801131a <_dtoa_r+0x882>
 8010edc:	2202      	movs	r2, #2
 8010ede:	e77c      	b.n	8010dda <_dtoa_r+0x342>
 8010ee0:	07cc      	lsls	r4, r1, #31
 8010ee2:	d504      	bpl.n	8010eee <_dtoa_r+0x456>
 8010ee4:	ed90 6b00 	vldr	d6, [r0]
 8010ee8:	3201      	adds	r2, #1
 8010eea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010eee:	1049      	asrs	r1, r1, #1
 8010ef0:	3008      	adds	r0, #8
 8010ef2:	e773      	b.n	8010ddc <_dtoa_r+0x344>
 8010ef4:	d02e      	beq.n	8010f54 <_dtoa_r+0x4bc>
 8010ef6:	f1cb 0100 	rsb	r1, fp, #0
 8010efa:	4a76      	ldr	r2, [pc, #472]	; (80110d4 <_dtoa_r+0x63c>)
 8010efc:	f001 000f 	and.w	r0, r1, #15
 8010f00:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010f04:	ed92 7b00 	vldr	d7, [r2]
 8010f08:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010f0c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010f10:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010f14:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8010f18:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010f1c:	486e      	ldr	r0, [pc, #440]	; (80110d8 <_dtoa_r+0x640>)
 8010f1e:	1109      	asrs	r1, r1, #4
 8010f20:	2400      	movs	r4, #0
 8010f22:	2202      	movs	r2, #2
 8010f24:	b939      	cbnz	r1, 8010f36 <_dtoa_r+0x49e>
 8010f26:	2c00      	cmp	r4, #0
 8010f28:	f43f af60 	beq.w	8010dec <_dtoa_r+0x354>
 8010f2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010f30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010f34:	e75a      	b.n	8010dec <_dtoa_r+0x354>
 8010f36:	07cf      	lsls	r7, r1, #31
 8010f38:	d509      	bpl.n	8010f4e <_dtoa_r+0x4b6>
 8010f3a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8010f3e:	ed90 7b00 	vldr	d7, [r0]
 8010f42:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010f46:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010f4a:	3201      	adds	r2, #1
 8010f4c:	2401      	movs	r4, #1
 8010f4e:	1049      	asrs	r1, r1, #1
 8010f50:	3008      	adds	r0, #8
 8010f52:	e7e7      	b.n	8010f24 <_dtoa_r+0x48c>
 8010f54:	2202      	movs	r2, #2
 8010f56:	e749      	b.n	8010dec <_dtoa_r+0x354>
 8010f58:	465f      	mov	r7, fp
 8010f5a:	4648      	mov	r0, r9
 8010f5c:	e765      	b.n	8010e2a <_dtoa_r+0x392>
 8010f5e:	ec42 1b17 	vmov	d7, r1, r2
 8010f62:	4a5c      	ldr	r2, [pc, #368]	; (80110d4 <_dtoa_r+0x63c>)
 8010f64:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010f68:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010f6c:	9a00      	ldr	r2, [sp, #0]
 8010f6e:	1814      	adds	r4, r2, r0
 8010f70:	9a08      	ldr	r2, [sp, #32]
 8010f72:	b352      	cbz	r2, 8010fca <_dtoa_r+0x532>
 8010f74:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010f78:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010f7c:	f8dd 8000 	ldr.w	r8, [sp]
 8010f80:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010f84:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010f88:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010f8c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010f90:	ee14 2a90 	vmov	r2, s9
 8010f94:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010f98:	3230      	adds	r2, #48	; 0x30
 8010f9a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010f9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fa6:	f808 2b01 	strb.w	r2, [r8], #1
 8010faa:	d439      	bmi.n	8011020 <_dtoa_r+0x588>
 8010fac:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010fb0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fb8:	d472      	bmi.n	80110a0 <_dtoa_r+0x608>
 8010fba:	45a0      	cmp	r8, r4
 8010fbc:	f43f af5d 	beq.w	8010e7a <_dtoa_r+0x3e2>
 8010fc0:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010fc4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010fc8:	e7e0      	b.n	8010f8c <_dtoa_r+0x4f4>
 8010fca:	f8dd 8000 	ldr.w	r8, [sp]
 8010fce:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010fd2:	4621      	mov	r1, r4
 8010fd4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010fd8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010fdc:	ee14 2a90 	vmov	r2, s9
 8010fe0:	3230      	adds	r2, #48	; 0x30
 8010fe2:	f808 2b01 	strb.w	r2, [r8], #1
 8010fe6:	45a0      	cmp	r8, r4
 8010fe8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010fec:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010ff0:	d118      	bne.n	8011024 <_dtoa_r+0x58c>
 8010ff2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010ff6:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010ffa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011002:	dc4d      	bgt.n	80110a0 <_dtoa_r+0x608>
 8011004:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011008:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011010:	f57f af33 	bpl.w	8010e7a <_dtoa_r+0x3e2>
 8011014:	4688      	mov	r8, r1
 8011016:	3901      	subs	r1, #1
 8011018:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801101c:	2b30      	cmp	r3, #48	; 0x30
 801101e:	d0f9      	beq.n	8011014 <_dtoa_r+0x57c>
 8011020:	46bb      	mov	fp, r7
 8011022:	e02a      	b.n	801107a <_dtoa_r+0x5e2>
 8011024:	ee26 6b03 	vmul.f64	d6, d6, d3
 8011028:	e7d6      	b.n	8010fd8 <_dtoa_r+0x540>
 801102a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801102e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8011032:	f8dd 8000 	ldr.w	r8, [sp]
 8011036:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801103a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801103e:	ee15 3a10 	vmov	r3, s10
 8011042:	3330      	adds	r3, #48	; 0x30
 8011044:	f808 3b01 	strb.w	r3, [r8], #1
 8011048:	9b00      	ldr	r3, [sp, #0]
 801104a:	eba8 0303 	sub.w	r3, r8, r3
 801104e:	4599      	cmp	r9, r3
 8011050:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8011054:	eea3 7b46 	vfms.f64	d7, d3, d6
 8011058:	d133      	bne.n	80110c2 <_dtoa_r+0x62a>
 801105a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801105e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8011062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011066:	dc1a      	bgt.n	801109e <_dtoa_r+0x606>
 8011068:	eeb4 7b46 	vcmp.f64	d7, d6
 801106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011070:	d103      	bne.n	801107a <_dtoa_r+0x5e2>
 8011072:	ee15 3a10 	vmov	r3, s10
 8011076:	07d9      	lsls	r1, r3, #31
 8011078:	d411      	bmi.n	801109e <_dtoa_r+0x606>
 801107a:	4629      	mov	r1, r5
 801107c:	4630      	mov	r0, r6
 801107e:	f000 fad9 	bl	8011634 <_Bfree>
 8011082:	2300      	movs	r3, #0
 8011084:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011086:	f888 3000 	strb.w	r3, [r8]
 801108a:	f10b 0301 	add.w	r3, fp, #1
 801108e:	6013      	str	r3, [r2, #0]
 8011090:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011092:	2b00      	cmp	r3, #0
 8011094:	f43f ad4d 	beq.w	8010b32 <_dtoa_r+0x9a>
 8011098:	f8c3 8000 	str.w	r8, [r3]
 801109c:	e549      	b.n	8010b32 <_dtoa_r+0x9a>
 801109e:	465f      	mov	r7, fp
 80110a0:	4643      	mov	r3, r8
 80110a2:	4698      	mov	r8, r3
 80110a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80110a8:	2a39      	cmp	r2, #57	; 0x39
 80110aa:	d106      	bne.n	80110ba <_dtoa_r+0x622>
 80110ac:	9a00      	ldr	r2, [sp, #0]
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d1f7      	bne.n	80110a2 <_dtoa_r+0x60a>
 80110b2:	9900      	ldr	r1, [sp, #0]
 80110b4:	2230      	movs	r2, #48	; 0x30
 80110b6:	3701      	adds	r7, #1
 80110b8:	700a      	strb	r2, [r1, #0]
 80110ba:	781a      	ldrb	r2, [r3, #0]
 80110bc:	3201      	adds	r2, #1
 80110be:	701a      	strb	r2, [r3, #0]
 80110c0:	e7ae      	b.n	8011020 <_dtoa_r+0x588>
 80110c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80110c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80110ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ce:	d1b2      	bne.n	8011036 <_dtoa_r+0x59e>
 80110d0:	e7d3      	b.n	801107a <_dtoa_r+0x5e2>
 80110d2:	bf00      	nop
 80110d4:	08014568 	.word	0x08014568
 80110d8:	08014540 	.word	0x08014540
 80110dc:	9908      	ldr	r1, [sp, #32]
 80110de:	2900      	cmp	r1, #0
 80110e0:	f000 80d1 	beq.w	8011286 <_dtoa_r+0x7ee>
 80110e4:	9907      	ldr	r1, [sp, #28]
 80110e6:	2901      	cmp	r1, #1
 80110e8:	f300 80b4 	bgt.w	8011254 <_dtoa_r+0x7bc>
 80110ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80110ee:	2900      	cmp	r1, #0
 80110f0:	f000 80ac 	beq.w	801124c <_dtoa_r+0x7b4>
 80110f4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80110f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80110fc:	461c      	mov	r4, r3
 80110fe:	930a      	str	r3, [sp, #40]	; 0x28
 8011100:	9b05      	ldr	r3, [sp, #20]
 8011102:	4413      	add	r3, r2
 8011104:	9305      	str	r3, [sp, #20]
 8011106:	9b06      	ldr	r3, [sp, #24]
 8011108:	2101      	movs	r1, #1
 801110a:	4413      	add	r3, r2
 801110c:	4630      	mov	r0, r6
 801110e:	9306      	str	r3, [sp, #24]
 8011110:	f000 fb4c 	bl	80117ac <__i2b>
 8011114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011116:	4607      	mov	r7, r0
 8011118:	f1b8 0f00 	cmp.w	r8, #0
 801111c:	dd0d      	ble.n	801113a <_dtoa_r+0x6a2>
 801111e:	9a06      	ldr	r2, [sp, #24]
 8011120:	2a00      	cmp	r2, #0
 8011122:	dd0a      	ble.n	801113a <_dtoa_r+0x6a2>
 8011124:	4542      	cmp	r2, r8
 8011126:	9905      	ldr	r1, [sp, #20]
 8011128:	bfa8      	it	ge
 801112a:	4642      	movge	r2, r8
 801112c:	1a89      	subs	r1, r1, r2
 801112e:	9105      	str	r1, [sp, #20]
 8011130:	9906      	ldr	r1, [sp, #24]
 8011132:	eba8 0802 	sub.w	r8, r8, r2
 8011136:	1a8a      	subs	r2, r1, r2
 8011138:	9206      	str	r2, [sp, #24]
 801113a:	b303      	cbz	r3, 801117e <_dtoa_r+0x6e6>
 801113c:	9a08      	ldr	r2, [sp, #32]
 801113e:	2a00      	cmp	r2, #0
 8011140:	f000 80a6 	beq.w	8011290 <_dtoa_r+0x7f8>
 8011144:	2c00      	cmp	r4, #0
 8011146:	dd13      	ble.n	8011170 <_dtoa_r+0x6d8>
 8011148:	4639      	mov	r1, r7
 801114a:	4622      	mov	r2, r4
 801114c:	4630      	mov	r0, r6
 801114e:	930c      	str	r3, [sp, #48]	; 0x30
 8011150:	f000 fbe8 	bl	8011924 <__pow5mult>
 8011154:	462a      	mov	r2, r5
 8011156:	4601      	mov	r1, r0
 8011158:	4607      	mov	r7, r0
 801115a:	4630      	mov	r0, r6
 801115c:	f000 fb3c 	bl	80117d8 <__multiply>
 8011160:	4629      	mov	r1, r5
 8011162:	900a      	str	r0, [sp, #40]	; 0x28
 8011164:	4630      	mov	r0, r6
 8011166:	f000 fa65 	bl	8011634 <_Bfree>
 801116a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801116c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801116e:	4615      	mov	r5, r2
 8011170:	1b1a      	subs	r2, r3, r4
 8011172:	d004      	beq.n	801117e <_dtoa_r+0x6e6>
 8011174:	4629      	mov	r1, r5
 8011176:	4630      	mov	r0, r6
 8011178:	f000 fbd4 	bl	8011924 <__pow5mult>
 801117c:	4605      	mov	r5, r0
 801117e:	2101      	movs	r1, #1
 8011180:	4630      	mov	r0, r6
 8011182:	f000 fb13 	bl	80117ac <__i2b>
 8011186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011188:	2b00      	cmp	r3, #0
 801118a:	4604      	mov	r4, r0
 801118c:	f340 8082 	ble.w	8011294 <_dtoa_r+0x7fc>
 8011190:	461a      	mov	r2, r3
 8011192:	4601      	mov	r1, r0
 8011194:	4630      	mov	r0, r6
 8011196:	f000 fbc5 	bl	8011924 <__pow5mult>
 801119a:	9b07      	ldr	r3, [sp, #28]
 801119c:	2b01      	cmp	r3, #1
 801119e:	4604      	mov	r4, r0
 80111a0:	dd7b      	ble.n	801129a <_dtoa_r+0x802>
 80111a2:	2300      	movs	r3, #0
 80111a4:	930a      	str	r3, [sp, #40]	; 0x28
 80111a6:	6922      	ldr	r2, [r4, #16]
 80111a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80111ac:	6910      	ldr	r0, [r2, #16]
 80111ae:	f000 faad 	bl	801170c <__hi0bits>
 80111b2:	f1c0 0020 	rsb	r0, r0, #32
 80111b6:	9b06      	ldr	r3, [sp, #24]
 80111b8:	4418      	add	r0, r3
 80111ba:	f010 001f 	ands.w	r0, r0, #31
 80111be:	f000 808d 	beq.w	80112dc <_dtoa_r+0x844>
 80111c2:	f1c0 0220 	rsb	r2, r0, #32
 80111c6:	2a04      	cmp	r2, #4
 80111c8:	f340 8086 	ble.w	80112d8 <_dtoa_r+0x840>
 80111cc:	f1c0 001c 	rsb	r0, r0, #28
 80111d0:	9b05      	ldr	r3, [sp, #20]
 80111d2:	4403      	add	r3, r0
 80111d4:	9305      	str	r3, [sp, #20]
 80111d6:	9b06      	ldr	r3, [sp, #24]
 80111d8:	4403      	add	r3, r0
 80111da:	4480      	add	r8, r0
 80111dc:	9306      	str	r3, [sp, #24]
 80111de:	9b05      	ldr	r3, [sp, #20]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	dd05      	ble.n	80111f0 <_dtoa_r+0x758>
 80111e4:	4629      	mov	r1, r5
 80111e6:	461a      	mov	r2, r3
 80111e8:	4630      	mov	r0, r6
 80111ea:	f000 fbf5 	bl	80119d8 <__lshift>
 80111ee:	4605      	mov	r5, r0
 80111f0:	9b06      	ldr	r3, [sp, #24]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	dd05      	ble.n	8011202 <_dtoa_r+0x76a>
 80111f6:	4621      	mov	r1, r4
 80111f8:	461a      	mov	r2, r3
 80111fa:	4630      	mov	r0, r6
 80111fc:	f000 fbec 	bl	80119d8 <__lshift>
 8011200:	4604      	mov	r4, r0
 8011202:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011204:	2b00      	cmp	r3, #0
 8011206:	d06b      	beq.n	80112e0 <_dtoa_r+0x848>
 8011208:	4621      	mov	r1, r4
 801120a:	4628      	mov	r0, r5
 801120c:	f000 fc50 	bl	8011ab0 <__mcmp>
 8011210:	2800      	cmp	r0, #0
 8011212:	da65      	bge.n	80112e0 <_dtoa_r+0x848>
 8011214:	2300      	movs	r3, #0
 8011216:	4629      	mov	r1, r5
 8011218:	220a      	movs	r2, #10
 801121a:	4630      	mov	r0, r6
 801121c:	f000 fa2c 	bl	8011678 <__multadd>
 8011220:	9b08      	ldr	r3, [sp, #32]
 8011222:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011226:	4605      	mov	r5, r0
 8011228:	2b00      	cmp	r3, #0
 801122a:	f000 8192 	beq.w	8011552 <_dtoa_r+0xaba>
 801122e:	4639      	mov	r1, r7
 8011230:	2300      	movs	r3, #0
 8011232:	220a      	movs	r2, #10
 8011234:	4630      	mov	r0, r6
 8011236:	f000 fa1f 	bl	8011678 <__multadd>
 801123a:	f1ba 0f00 	cmp.w	sl, #0
 801123e:	4607      	mov	r7, r0
 8011240:	f300 808e 	bgt.w	8011360 <_dtoa_r+0x8c8>
 8011244:	9b07      	ldr	r3, [sp, #28]
 8011246:	2b02      	cmp	r3, #2
 8011248:	dc51      	bgt.n	80112ee <_dtoa_r+0x856>
 801124a:	e089      	b.n	8011360 <_dtoa_r+0x8c8>
 801124c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801124e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011252:	e751      	b.n	80110f8 <_dtoa_r+0x660>
 8011254:	f109 34ff 	add.w	r4, r9, #4294967295
 8011258:	42a3      	cmp	r3, r4
 801125a:	bfbf      	itttt	lt
 801125c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801125e:	1ae3      	sublt	r3, r4, r3
 8011260:	18d2      	addlt	r2, r2, r3
 8011262:	4613      	movlt	r3, r2
 8011264:	bfb7      	itett	lt
 8011266:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011268:	1b1c      	subge	r4, r3, r4
 801126a:	4623      	movlt	r3, r4
 801126c:	2400      	movlt	r4, #0
 801126e:	f1b9 0f00 	cmp.w	r9, #0
 8011272:	bfb5      	itete	lt
 8011274:	9a05      	ldrlt	r2, [sp, #20]
 8011276:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801127a:	eba2 0809 	sublt.w	r8, r2, r9
 801127e:	464a      	movge	r2, r9
 8011280:	bfb8      	it	lt
 8011282:	2200      	movlt	r2, #0
 8011284:	e73b      	b.n	80110fe <_dtoa_r+0x666>
 8011286:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801128a:	9f08      	ldr	r7, [sp, #32]
 801128c:	461c      	mov	r4, r3
 801128e:	e743      	b.n	8011118 <_dtoa_r+0x680>
 8011290:	461a      	mov	r2, r3
 8011292:	e76f      	b.n	8011174 <_dtoa_r+0x6dc>
 8011294:	9b07      	ldr	r3, [sp, #28]
 8011296:	2b01      	cmp	r3, #1
 8011298:	dc18      	bgt.n	80112cc <_dtoa_r+0x834>
 801129a:	9b02      	ldr	r3, [sp, #8]
 801129c:	b9b3      	cbnz	r3, 80112cc <_dtoa_r+0x834>
 801129e:	9b03      	ldr	r3, [sp, #12]
 80112a0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80112a4:	b9a2      	cbnz	r2, 80112d0 <_dtoa_r+0x838>
 80112a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80112aa:	0d12      	lsrs	r2, r2, #20
 80112ac:	0512      	lsls	r2, r2, #20
 80112ae:	b18a      	cbz	r2, 80112d4 <_dtoa_r+0x83c>
 80112b0:	9b05      	ldr	r3, [sp, #20]
 80112b2:	3301      	adds	r3, #1
 80112b4:	9305      	str	r3, [sp, #20]
 80112b6:	9b06      	ldr	r3, [sp, #24]
 80112b8:	3301      	adds	r3, #1
 80112ba:	9306      	str	r3, [sp, #24]
 80112bc:	2301      	movs	r3, #1
 80112be:	930a      	str	r3, [sp, #40]	; 0x28
 80112c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	f47f af6f 	bne.w	80111a6 <_dtoa_r+0x70e>
 80112c8:	2001      	movs	r0, #1
 80112ca:	e774      	b.n	80111b6 <_dtoa_r+0x71e>
 80112cc:	2300      	movs	r3, #0
 80112ce:	e7f6      	b.n	80112be <_dtoa_r+0x826>
 80112d0:	9b02      	ldr	r3, [sp, #8]
 80112d2:	e7f4      	b.n	80112be <_dtoa_r+0x826>
 80112d4:	920a      	str	r2, [sp, #40]	; 0x28
 80112d6:	e7f3      	b.n	80112c0 <_dtoa_r+0x828>
 80112d8:	d081      	beq.n	80111de <_dtoa_r+0x746>
 80112da:	4610      	mov	r0, r2
 80112dc:	301c      	adds	r0, #28
 80112de:	e777      	b.n	80111d0 <_dtoa_r+0x738>
 80112e0:	f1b9 0f00 	cmp.w	r9, #0
 80112e4:	dc37      	bgt.n	8011356 <_dtoa_r+0x8be>
 80112e6:	9b07      	ldr	r3, [sp, #28]
 80112e8:	2b02      	cmp	r3, #2
 80112ea:	dd34      	ble.n	8011356 <_dtoa_r+0x8be>
 80112ec:	46ca      	mov	sl, r9
 80112ee:	f1ba 0f00 	cmp.w	sl, #0
 80112f2:	d10d      	bne.n	8011310 <_dtoa_r+0x878>
 80112f4:	4621      	mov	r1, r4
 80112f6:	4653      	mov	r3, sl
 80112f8:	2205      	movs	r2, #5
 80112fa:	4630      	mov	r0, r6
 80112fc:	f000 f9bc 	bl	8011678 <__multadd>
 8011300:	4601      	mov	r1, r0
 8011302:	4604      	mov	r4, r0
 8011304:	4628      	mov	r0, r5
 8011306:	f000 fbd3 	bl	8011ab0 <__mcmp>
 801130a:	2800      	cmp	r0, #0
 801130c:	f73f adde 	bgt.w	8010ecc <_dtoa_r+0x434>
 8011310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011312:	f8dd 8000 	ldr.w	r8, [sp]
 8011316:	ea6f 0b03 	mvn.w	fp, r3
 801131a:	f04f 0900 	mov.w	r9, #0
 801131e:	4621      	mov	r1, r4
 8011320:	4630      	mov	r0, r6
 8011322:	f000 f987 	bl	8011634 <_Bfree>
 8011326:	2f00      	cmp	r7, #0
 8011328:	f43f aea7 	beq.w	801107a <_dtoa_r+0x5e2>
 801132c:	f1b9 0f00 	cmp.w	r9, #0
 8011330:	d005      	beq.n	801133e <_dtoa_r+0x8a6>
 8011332:	45b9      	cmp	r9, r7
 8011334:	d003      	beq.n	801133e <_dtoa_r+0x8a6>
 8011336:	4649      	mov	r1, r9
 8011338:	4630      	mov	r0, r6
 801133a:	f000 f97b 	bl	8011634 <_Bfree>
 801133e:	4639      	mov	r1, r7
 8011340:	4630      	mov	r0, r6
 8011342:	f000 f977 	bl	8011634 <_Bfree>
 8011346:	e698      	b.n	801107a <_dtoa_r+0x5e2>
 8011348:	2400      	movs	r4, #0
 801134a:	4627      	mov	r7, r4
 801134c:	e7e0      	b.n	8011310 <_dtoa_r+0x878>
 801134e:	46bb      	mov	fp, r7
 8011350:	4604      	mov	r4, r0
 8011352:	4607      	mov	r7, r0
 8011354:	e5ba      	b.n	8010ecc <_dtoa_r+0x434>
 8011356:	9b08      	ldr	r3, [sp, #32]
 8011358:	46ca      	mov	sl, r9
 801135a:	2b00      	cmp	r3, #0
 801135c:	f000 8100 	beq.w	8011560 <_dtoa_r+0xac8>
 8011360:	f1b8 0f00 	cmp.w	r8, #0
 8011364:	dd05      	ble.n	8011372 <_dtoa_r+0x8da>
 8011366:	4639      	mov	r1, r7
 8011368:	4642      	mov	r2, r8
 801136a:	4630      	mov	r0, r6
 801136c:	f000 fb34 	bl	80119d8 <__lshift>
 8011370:	4607      	mov	r7, r0
 8011372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011374:	2b00      	cmp	r3, #0
 8011376:	d05d      	beq.n	8011434 <_dtoa_r+0x99c>
 8011378:	6879      	ldr	r1, [r7, #4]
 801137a:	4630      	mov	r0, r6
 801137c:	f000 f91a 	bl	80115b4 <_Balloc>
 8011380:	4680      	mov	r8, r0
 8011382:	b928      	cbnz	r0, 8011390 <_dtoa_r+0x8f8>
 8011384:	4b82      	ldr	r3, [pc, #520]	; (8011590 <_dtoa_r+0xaf8>)
 8011386:	4602      	mov	r2, r0
 8011388:	f240 21ea 	movw	r1, #746	; 0x2ea
 801138c:	f7ff bb9a 	b.w	8010ac4 <_dtoa_r+0x2c>
 8011390:	693a      	ldr	r2, [r7, #16]
 8011392:	3202      	adds	r2, #2
 8011394:	0092      	lsls	r2, r2, #2
 8011396:	f107 010c 	add.w	r1, r7, #12
 801139a:	300c      	adds	r0, #12
 801139c:	f7fe fe96 	bl	80100cc <memcpy>
 80113a0:	2201      	movs	r2, #1
 80113a2:	4641      	mov	r1, r8
 80113a4:	4630      	mov	r0, r6
 80113a6:	f000 fb17 	bl	80119d8 <__lshift>
 80113aa:	9b00      	ldr	r3, [sp, #0]
 80113ac:	3301      	adds	r3, #1
 80113ae:	9305      	str	r3, [sp, #20]
 80113b0:	9b00      	ldr	r3, [sp, #0]
 80113b2:	4453      	add	r3, sl
 80113b4:	9309      	str	r3, [sp, #36]	; 0x24
 80113b6:	9b02      	ldr	r3, [sp, #8]
 80113b8:	f003 0301 	and.w	r3, r3, #1
 80113bc:	46b9      	mov	r9, r7
 80113be:	9308      	str	r3, [sp, #32]
 80113c0:	4607      	mov	r7, r0
 80113c2:	9b05      	ldr	r3, [sp, #20]
 80113c4:	4621      	mov	r1, r4
 80113c6:	3b01      	subs	r3, #1
 80113c8:	4628      	mov	r0, r5
 80113ca:	9302      	str	r3, [sp, #8]
 80113cc:	f7ff fad6 	bl	801097c <quorem>
 80113d0:	4603      	mov	r3, r0
 80113d2:	3330      	adds	r3, #48	; 0x30
 80113d4:	9006      	str	r0, [sp, #24]
 80113d6:	4649      	mov	r1, r9
 80113d8:	4628      	mov	r0, r5
 80113da:	930a      	str	r3, [sp, #40]	; 0x28
 80113dc:	f000 fb68 	bl	8011ab0 <__mcmp>
 80113e0:	463a      	mov	r2, r7
 80113e2:	4682      	mov	sl, r0
 80113e4:	4621      	mov	r1, r4
 80113e6:	4630      	mov	r0, r6
 80113e8:	f000 fb7e 	bl	8011ae8 <__mdiff>
 80113ec:	68c2      	ldr	r2, [r0, #12]
 80113ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113f0:	4680      	mov	r8, r0
 80113f2:	bb0a      	cbnz	r2, 8011438 <_dtoa_r+0x9a0>
 80113f4:	4601      	mov	r1, r0
 80113f6:	4628      	mov	r0, r5
 80113f8:	f000 fb5a 	bl	8011ab0 <__mcmp>
 80113fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113fe:	4602      	mov	r2, r0
 8011400:	4641      	mov	r1, r8
 8011402:	4630      	mov	r0, r6
 8011404:	920e      	str	r2, [sp, #56]	; 0x38
 8011406:	930a      	str	r3, [sp, #40]	; 0x28
 8011408:	f000 f914 	bl	8011634 <_Bfree>
 801140c:	9b07      	ldr	r3, [sp, #28]
 801140e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011410:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011414:	ea43 0102 	orr.w	r1, r3, r2
 8011418:	9b08      	ldr	r3, [sp, #32]
 801141a:	430b      	orrs	r3, r1
 801141c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801141e:	d10d      	bne.n	801143c <_dtoa_r+0x9a4>
 8011420:	2b39      	cmp	r3, #57	; 0x39
 8011422:	d029      	beq.n	8011478 <_dtoa_r+0x9e0>
 8011424:	f1ba 0f00 	cmp.w	sl, #0
 8011428:	dd01      	ble.n	801142e <_dtoa_r+0x996>
 801142a:	9b06      	ldr	r3, [sp, #24]
 801142c:	3331      	adds	r3, #49	; 0x31
 801142e:	9a02      	ldr	r2, [sp, #8]
 8011430:	7013      	strb	r3, [r2, #0]
 8011432:	e774      	b.n	801131e <_dtoa_r+0x886>
 8011434:	4638      	mov	r0, r7
 8011436:	e7b8      	b.n	80113aa <_dtoa_r+0x912>
 8011438:	2201      	movs	r2, #1
 801143a:	e7e1      	b.n	8011400 <_dtoa_r+0x968>
 801143c:	f1ba 0f00 	cmp.w	sl, #0
 8011440:	db06      	blt.n	8011450 <_dtoa_r+0x9b8>
 8011442:	9907      	ldr	r1, [sp, #28]
 8011444:	ea41 0a0a 	orr.w	sl, r1, sl
 8011448:	9908      	ldr	r1, [sp, #32]
 801144a:	ea5a 0101 	orrs.w	r1, sl, r1
 801144e:	d120      	bne.n	8011492 <_dtoa_r+0x9fa>
 8011450:	2a00      	cmp	r2, #0
 8011452:	ddec      	ble.n	801142e <_dtoa_r+0x996>
 8011454:	4629      	mov	r1, r5
 8011456:	2201      	movs	r2, #1
 8011458:	4630      	mov	r0, r6
 801145a:	9305      	str	r3, [sp, #20]
 801145c:	f000 fabc 	bl	80119d8 <__lshift>
 8011460:	4621      	mov	r1, r4
 8011462:	4605      	mov	r5, r0
 8011464:	f000 fb24 	bl	8011ab0 <__mcmp>
 8011468:	2800      	cmp	r0, #0
 801146a:	9b05      	ldr	r3, [sp, #20]
 801146c:	dc02      	bgt.n	8011474 <_dtoa_r+0x9dc>
 801146e:	d1de      	bne.n	801142e <_dtoa_r+0x996>
 8011470:	07da      	lsls	r2, r3, #31
 8011472:	d5dc      	bpl.n	801142e <_dtoa_r+0x996>
 8011474:	2b39      	cmp	r3, #57	; 0x39
 8011476:	d1d8      	bne.n	801142a <_dtoa_r+0x992>
 8011478:	9a02      	ldr	r2, [sp, #8]
 801147a:	2339      	movs	r3, #57	; 0x39
 801147c:	7013      	strb	r3, [r2, #0]
 801147e:	4643      	mov	r3, r8
 8011480:	4698      	mov	r8, r3
 8011482:	3b01      	subs	r3, #1
 8011484:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8011488:	2a39      	cmp	r2, #57	; 0x39
 801148a:	d051      	beq.n	8011530 <_dtoa_r+0xa98>
 801148c:	3201      	adds	r2, #1
 801148e:	701a      	strb	r2, [r3, #0]
 8011490:	e745      	b.n	801131e <_dtoa_r+0x886>
 8011492:	2a00      	cmp	r2, #0
 8011494:	dd03      	ble.n	801149e <_dtoa_r+0xa06>
 8011496:	2b39      	cmp	r3, #57	; 0x39
 8011498:	d0ee      	beq.n	8011478 <_dtoa_r+0x9e0>
 801149a:	3301      	adds	r3, #1
 801149c:	e7c7      	b.n	801142e <_dtoa_r+0x996>
 801149e:	9a05      	ldr	r2, [sp, #20]
 80114a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80114a2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80114a6:	428a      	cmp	r2, r1
 80114a8:	d02b      	beq.n	8011502 <_dtoa_r+0xa6a>
 80114aa:	4629      	mov	r1, r5
 80114ac:	2300      	movs	r3, #0
 80114ae:	220a      	movs	r2, #10
 80114b0:	4630      	mov	r0, r6
 80114b2:	f000 f8e1 	bl	8011678 <__multadd>
 80114b6:	45b9      	cmp	r9, r7
 80114b8:	4605      	mov	r5, r0
 80114ba:	f04f 0300 	mov.w	r3, #0
 80114be:	f04f 020a 	mov.w	r2, #10
 80114c2:	4649      	mov	r1, r9
 80114c4:	4630      	mov	r0, r6
 80114c6:	d107      	bne.n	80114d8 <_dtoa_r+0xa40>
 80114c8:	f000 f8d6 	bl	8011678 <__multadd>
 80114cc:	4681      	mov	r9, r0
 80114ce:	4607      	mov	r7, r0
 80114d0:	9b05      	ldr	r3, [sp, #20]
 80114d2:	3301      	adds	r3, #1
 80114d4:	9305      	str	r3, [sp, #20]
 80114d6:	e774      	b.n	80113c2 <_dtoa_r+0x92a>
 80114d8:	f000 f8ce 	bl	8011678 <__multadd>
 80114dc:	4639      	mov	r1, r7
 80114de:	4681      	mov	r9, r0
 80114e0:	2300      	movs	r3, #0
 80114e2:	220a      	movs	r2, #10
 80114e4:	4630      	mov	r0, r6
 80114e6:	f000 f8c7 	bl	8011678 <__multadd>
 80114ea:	4607      	mov	r7, r0
 80114ec:	e7f0      	b.n	80114d0 <_dtoa_r+0xa38>
 80114ee:	f1ba 0f00 	cmp.w	sl, #0
 80114f2:	9a00      	ldr	r2, [sp, #0]
 80114f4:	bfcc      	ite	gt
 80114f6:	46d0      	movgt	r8, sl
 80114f8:	f04f 0801 	movle.w	r8, #1
 80114fc:	4490      	add	r8, r2
 80114fe:	f04f 0900 	mov.w	r9, #0
 8011502:	4629      	mov	r1, r5
 8011504:	2201      	movs	r2, #1
 8011506:	4630      	mov	r0, r6
 8011508:	9302      	str	r3, [sp, #8]
 801150a:	f000 fa65 	bl	80119d8 <__lshift>
 801150e:	4621      	mov	r1, r4
 8011510:	4605      	mov	r5, r0
 8011512:	f000 facd 	bl	8011ab0 <__mcmp>
 8011516:	2800      	cmp	r0, #0
 8011518:	dcb1      	bgt.n	801147e <_dtoa_r+0x9e6>
 801151a:	d102      	bne.n	8011522 <_dtoa_r+0xa8a>
 801151c:	9b02      	ldr	r3, [sp, #8]
 801151e:	07db      	lsls	r3, r3, #31
 8011520:	d4ad      	bmi.n	801147e <_dtoa_r+0x9e6>
 8011522:	4643      	mov	r3, r8
 8011524:	4698      	mov	r8, r3
 8011526:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801152a:	2a30      	cmp	r2, #48	; 0x30
 801152c:	d0fa      	beq.n	8011524 <_dtoa_r+0xa8c>
 801152e:	e6f6      	b.n	801131e <_dtoa_r+0x886>
 8011530:	9a00      	ldr	r2, [sp, #0]
 8011532:	429a      	cmp	r2, r3
 8011534:	d1a4      	bne.n	8011480 <_dtoa_r+0x9e8>
 8011536:	f10b 0b01 	add.w	fp, fp, #1
 801153a:	2331      	movs	r3, #49	; 0x31
 801153c:	e778      	b.n	8011430 <_dtoa_r+0x998>
 801153e:	4b15      	ldr	r3, [pc, #84]	; (8011594 <_dtoa_r+0xafc>)
 8011540:	f7ff bb12 	b.w	8010b68 <_dtoa_r+0xd0>
 8011544:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011546:	2b00      	cmp	r3, #0
 8011548:	f47f aaee 	bne.w	8010b28 <_dtoa_r+0x90>
 801154c:	4b12      	ldr	r3, [pc, #72]	; (8011598 <_dtoa_r+0xb00>)
 801154e:	f7ff bb0b 	b.w	8010b68 <_dtoa_r+0xd0>
 8011552:	f1ba 0f00 	cmp.w	sl, #0
 8011556:	dc03      	bgt.n	8011560 <_dtoa_r+0xac8>
 8011558:	9b07      	ldr	r3, [sp, #28]
 801155a:	2b02      	cmp	r3, #2
 801155c:	f73f aec7 	bgt.w	80112ee <_dtoa_r+0x856>
 8011560:	f8dd 8000 	ldr.w	r8, [sp]
 8011564:	4621      	mov	r1, r4
 8011566:	4628      	mov	r0, r5
 8011568:	f7ff fa08 	bl	801097c <quorem>
 801156c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8011570:	f808 3b01 	strb.w	r3, [r8], #1
 8011574:	9a00      	ldr	r2, [sp, #0]
 8011576:	eba8 0202 	sub.w	r2, r8, r2
 801157a:	4592      	cmp	sl, r2
 801157c:	ddb7      	ble.n	80114ee <_dtoa_r+0xa56>
 801157e:	4629      	mov	r1, r5
 8011580:	2300      	movs	r3, #0
 8011582:	220a      	movs	r2, #10
 8011584:	4630      	mov	r0, r6
 8011586:	f000 f877 	bl	8011678 <__multadd>
 801158a:	4605      	mov	r5, r0
 801158c:	e7ea      	b.n	8011564 <_dtoa_r+0xacc>
 801158e:	bf00      	nop
 8011590:	080144cb 	.word	0x080144cb
 8011594:	08014424 	.word	0x08014424
 8011598:	08014448 	.word	0x08014448

0801159c <_localeconv_r>:
 801159c:	4800      	ldr	r0, [pc, #0]	; (80115a0 <_localeconv_r+0x4>)
 801159e:	4770      	bx	lr
 80115a0:	240001a4 	.word	0x240001a4

080115a4 <malloc>:
 80115a4:	4b02      	ldr	r3, [pc, #8]	; (80115b0 <malloc+0xc>)
 80115a6:	4601      	mov	r1, r0
 80115a8:	6818      	ldr	r0, [r3, #0]
 80115aa:	f000 bbe1 	b.w	8011d70 <_malloc_r>
 80115ae:	bf00      	nop
 80115b0:	24000050 	.word	0x24000050

080115b4 <_Balloc>:
 80115b4:	b570      	push	{r4, r5, r6, lr}
 80115b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80115b8:	4604      	mov	r4, r0
 80115ba:	460d      	mov	r5, r1
 80115bc:	b976      	cbnz	r6, 80115dc <_Balloc+0x28>
 80115be:	2010      	movs	r0, #16
 80115c0:	f7ff fff0 	bl	80115a4 <malloc>
 80115c4:	4602      	mov	r2, r0
 80115c6:	6260      	str	r0, [r4, #36]	; 0x24
 80115c8:	b920      	cbnz	r0, 80115d4 <_Balloc+0x20>
 80115ca:	4b18      	ldr	r3, [pc, #96]	; (801162c <_Balloc+0x78>)
 80115cc:	4818      	ldr	r0, [pc, #96]	; (8011630 <_Balloc+0x7c>)
 80115ce:	2166      	movs	r1, #102	; 0x66
 80115d0:	f000 fc38 	bl	8011e44 <__assert_func>
 80115d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80115d8:	6006      	str	r6, [r0, #0]
 80115da:	60c6      	str	r6, [r0, #12]
 80115dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80115de:	68f3      	ldr	r3, [r6, #12]
 80115e0:	b183      	cbz	r3, 8011604 <_Balloc+0x50>
 80115e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80115e4:	68db      	ldr	r3, [r3, #12]
 80115e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80115ea:	b9b8      	cbnz	r0, 801161c <_Balloc+0x68>
 80115ec:	2101      	movs	r1, #1
 80115ee:	fa01 f605 	lsl.w	r6, r1, r5
 80115f2:	1d72      	adds	r2, r6, #5
 80115f4:	0092      	lsls	r2, r2, #2
 80115f6:	4620      	mov	r0, r4
 80115f8:	f000 fb5a 	bl	8011cb0 <_calloc_r>
 80115fc:	b160      	cbz	r0, 8011618 <_Balloc+0x64>
 80115fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011602:	e00e      	b.n	8011622 <_Balloc+0x6e>
 8011604:	2221      	movs	r2, #33	; 0x21
 8011606:	2104      	movs	r1, #4
 8011608:	4620      	mov	r0, r4
 801160a:	f000 fb51 	bl	8011cb0 <_calloc_r>
 801160e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011610:	60f0      	str	r0, [r6, #12]
 8011612:	68db      	ldr	r3, [r3, #12]
 8011614:	2b00      	cmp	r3, #0
 8011616:	d1e4      	bne.n	80115e2 <_Balloc+0x2e>
 8011618:	2000      	movs	r0, #0
 801161a:	bd70      	pop	{r4, r5, r6, pc}
 801161c:	6802      	ldr	r2, [r0, #0]
 801161e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011622:	2300      	movs	r3, #0
 8011624:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011628:	e7f7      	b.n	801161a <_Balloc+0x66>
 801162a:	bf00      	nop
 801162c:	08014455 	.word	0x08014455
 8011630:	080144dc 	.word	0x080144dc

08011634 <_Bfree>:
 8011634:	b570      	push	{r4, r5, r6, lr}
 8011636:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011638:	4605      	mov	r5, r0
 801163a:	460c      	mov	r4, r1
 801163c:	b976      	cbnz	r6, 801165c <_Bfree+0x28>
 801163e:	2010      	movs	r0, #16
 8011640:	f7ff ffb0 	bl	80115a4 <malloc>
 8011644:	4602      	mov	r2, r0
 8011646:	6268      	str	r0, [r5, #36]	; 0x24
 8011648:	b920      	cbnz	r0, 8011654 <_Bfree+0x20>
 801164a:	4b09      	ldr	r3, [pc, #36]	; (8011670 <_Bfree+0x3c>)
 801164c:	4809      	ldr	r0, [pc, #36]	; (8011674 <_Bfree+0x40>)
 801164e:	218a      	movs	r1, #138	; 0x8a
 8011650:	f000 fbf8 	bl	8011e44 <__assert_func>
 8011654:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011658:	6006      	str	r6, [r0, #0]
 801165a:	60c6      	str	r6, [r0, #12]
 801165c:	b13c      	cbz	r4, 801166e <_Bfree+0x3a>
 801165e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011660:	6862      	ldr	r2, [r4, #4]
 8011662:	68db      	ldr	r3, [r3, #12]
 8011664:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011668:	6021      	str	r1, [r4, #0]
 801166a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801166e:	bd70      	pop	{r4, r5, r6, pc}
 8011670:	08014455 	.word	0x08014455
 8011674:	080144dc 	.word	0x080144dc

08011678 <__multadd>:
 8011678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801167c:	690e      	ldr	r6, [r1, #16]
 801167e:	4607      	mov	r7, r0
 8011680:	4698      	mov	r8, r3
 8011682:	460c      	mov	r4, r1
 8011684:	f101 0014 	add.w	r0, r1, #20
 8011688:	2300      	movs	r3, #0
 801168a:	6805      	ldr	r5, [r0, #0]
 801168c:	b2a9      	uxth	r1, r5
 801168e:	fb02 8101 	mla	r1, r2, r1, r8
 8011692:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011696:	0c2d      	lsrs	r5, r5, #16
 8011698:	fb02 c505 	mla	r5, r2, r5, ip
 801169c:	b289      	uxth	r1, r1
 801169e:	3301      	adds	r3, #1
 80116a0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80116a4:	429e      	cmp	r6, r3
 80116a6:	f840 1b04 	str.w	r1, [r0], #4
 80116aa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80116ae:	dcec      	bgt.n	801168a <__multadd+0x12>
 80116b0:	f1b8 0f00 	cmp.w	r8, #0
 80116b4:	d022      	beq.n	80116fc <__multadd+0x84>
 80116b6:	68a3      	ldr	r3, [r4, #8]
 80116b8:	42b3      	cmp	r3, r6
 80116ba:	dc19      	bgt.n	80116f0 <__multadd+0x78>
 80116bc:	6861      	ldr	r1, [r4, #4]
 80116be:	4638      	mov	r0, r7
 80116c0:	3101      	adds	r1, #1
 80116c2:	f7ff ff77 	bl	80115b4 <_Balloc>
 80116c6:	4605      	mov	r5, r0
 80116c8:	b928      	cbnz	r0, 80116d6 <__multadd+0x5e>
 80116ca:	4602      	mov	r2, r0
 80116cc:	4b0d      	ldr	r3, [pc, #52]	; (8011704 <__multadd+0x8c>)
 80116ce:	480e      	ldr	r0, [pc, #56]	; (8011708 <__multadd+0x90>)
 80116d0:	21b5      	movs	r1, #181	; 0xb5
 80116d2:	f000 fbb7 	bl	8011e44 <__assert_func>
 80116d6:	6922      	ldr	r2, [r4, #16]
 80116d8:	3202      	adds	r2, #2
 80116da:	f104 010c 	add.w	r1, r4, #12
 80116de:	0092      	lsls	r2, r2, #2
 80116e0:	300c      	adds	r0, #12
 80116e2:	f7fe fcf3 	bl	80100cc <memcpy>
 80116e6:	4621      	mov	r1, r4
 80116e8:	4638      	mov	r0, r7
 80116ea:	f7ff ffa3 	bl	8011634 <_Bfree>
 80116ee:	462c      	mov	r4, r5
 80116f0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80116f4:	3601      	adds	r6, #1
 80116f6:	f8c3 8014 	str.w	r8, [r3, #20]
 80116fa:	6126      	str	r6, [r4, #16]
 80116fc:	4620      	mov	r0, r4
 80116fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011702:	bf00      	nop
 8011704:	080144cb 	.word	0x080144cb
 8011708:	080144dc 	.word	0x080144dc

0801170c <__hi0bits>:
 801170c:	0c03      	lsrs	r3, r0, #16
 801170e:	041b      	lsls	r3, r3, #16
 8011710:	b9d3      	cbnz	r3, 8011748 <__hi0bits+0x3c>
 8011712:	0400      	lsls	r0, r0, #16
 8011714:	2310      	movs	r3, #16
 8011716:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801171a:	bf04      	itt	eq
 801171c:	0200      	lsleq	r0, r0, #8
 801171e:	3308      	addeq	r3, #8
 8011720:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011724:	bf04      	itt	eq
 8011726:	0100      	lsleq	r0, r0, #4
 8011728:	3304      	addeq	r3, #4
 801172a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801172e:	bf04      	itt	eq
 8011730:	0080      	lsleq	r0, r0, #2
 8011732:	3302      	addeq	r3, #2
 8011734:	2800      	cmp	r0, #0
 8011736:	db05      	blt.n	8011744 <__hi0bits+0x38>
 8011738:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801173c:	f103 0301 	add.w	r3, r3, #1
 8011740:	bf08      	it	eq
 8011742:	2320      	moveq	r3, #32
 8011744:	4618      	mov	r0, r3
 8011746:	4770      	bx	lr
 8011748:	2300      	movs	r3, #0
 801174a:	e7e4      	b.n	8011716 <__hi0bits+0xa>

0801174c <__lo0bits>:
 801174c:	6803      	ldr	r3, [r0, #0]
 801174e:	f013 0207 	ands.w	r2, r3, #7
 8011752:	4601      	mov	r1, r0
 8011754:	d00b      	beq.n	801176e <__lo0bits+0x22>
 8011756:	07da      	lsls	r2, r3, #31
 8011758:	d424      	bmi.n	80117a4 <__lo0bits+0x58>
 801175a:	0798      	lsls	r0, r3, #30
 801175c:	bf49      	itett	mi
 801175e:	085b      	lsrmi	r3, r3, #1
 8011760:	089b      	lsrpl	r3, r3, #2
 8011762:	2001      	movmi	r0, #1
 8011764:	600b      	strmi	r3, [r1, #0]
 8011766:	bf5c      	itt	pl
 8011768:	600b      	strpl	r3, [r1, #0]
 801176a:	2002      	movpl	r0, #2
 801176c:	4770      	bx	lr
 801176e:	b298      	uxth	r0, r3
 8011770:	b9b0      	cbnz	r0, 80117a0 <__lo0bits+0x54>
 8011772:	0c1b      	lsrs	r3, r3, #16
 8011774:	2010      	movs	r0, #16
 8011776:	f013 0fff 	tst.w	r3, #255	; 0xff
 801177a:	bf04      	itt	eq
 801177c:	0a1b      	lsreq	r3, r3, #8
 801177e:	3008      	addeq	r0, #8
 8011780:	071a      	lsls	r2, r3, #28
 8011782:	bf04      	itt	eq
 8011784:	091b      	lsreq	r3, r3, #4
 8011786:	3004      	addeq	r0, #4
 8011788:	079a      	lsls	r2, r3, #30
 801178a:	bf04      	itt	eq
 801178c:	089b      	lsreq	r3, r3, #2
 801178e:	3002      	addeq	r0, #2
 8011790:	07da      	lsls	r2, r3, #31
 8011792:	d403      	bmi.n	801179c <__lo0bits+0x50>
 8011794:	085b      	lsrs	r3, r3, #1
 8011796:	f100 0001 	add.w	r0, r0, #1
 801179a:	d005      	beq.n	80117a8 <__lo0bits+0x5c>
 801179c:	600b      	str	r3, [r1, #0]
 801179e:	4770      	bx	lr
 80117a0:	4610      	mov	r0, r2
 80117a2:	e7e8      	b.n	8011776 <__lo0bits+0x2a>
 80117a4:	2000      	movs	r0, #0
 80117a6:	4770      	bx	lr
 80117a8:	2020      	movs	r0, #32
 80117aa:	4770      	bx	lr

080117ac <__i2b>:
 80117ac:	b510      	push	{r4, lr}
 80117ae:	460c      	mov	r4, r1
 80117b0:	2101      	movs	r1, #1
 80117b2:	f7ff feff 	bl	80115b4 <_Balloc>
 80117b6:	4602      	mov	r2, r0
 80117b8:	b928      	cbnz	r0, 80117c6 <__i2b+0x1a>
 80117ba:	4b05      	ldr	r3, [pc, #20]	; (80117d0 <__i2b+0x24>)
 80117bc:	4805      	ldr	r0, [pc, #20]	; (80117d4 <__i2b+0x28>)
 80117be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80117c2:	f000 fb3f 	bl	8011e44 <__assert_func>
 80117c6:	2301      	movs	r3, #1
 80117c8:	6144      	str	r4, [r0, #20]
 80117ca:	6103      	str	r3, [r0, #16]
 80117cc:	bd10      	pop	{r4, pc}
 80117ce:	bf00      	nop
 80117d0:	080144cb 	.word	0x080144cb
 80117d4:	080144dc 	.word	0x080144dc

080117d8 <__multiply>:
 80117d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117dc:	4614      	mov	r4, r2
 80117de:	690a      	ldr	r2, [r1, #16]
 80117e0:	6923      	ldr	r3, [r4, #16]
 80117e2:	429a      	cmp	r2, r3
 80117e4:	bfb8      	it	lt
 80117e6:	460b      	movlt	r3, r1
 80117e8:	460d      	mov	r5, r1
 80117ea:	bfbc      	itt	lt
 80117ec:	4625      	movlt	r5, r4
 80117ee:	461c      	movlt	r4, r3
 80117f0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80117f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80117f8:	68ab      	ldr	r3, [r5, #8]
 80117fa:	6869      	ldr	r1, [r5, #4]
 80117fc:	eb0a 0709 	add.w	r7, sl, r9
 8011800:	42bb      	cmp	r3, r7
 8011802:	b085      	sub	sp, #20
 8011804:	bfb8      	it	lt
 8011806:	3101      	addlt	r1, #1
 8011808:	f7ff fed4 	bl	80115b4 <_Balloc>
 801180c:	b930      	cbnz	r0, 801181c <__multiply+0x44>
 801180e:	4602      	mov	r2, r0
 8011810:	4b42      	ldr	r3, [pc, #264]	; (801191c <__multiply+0x144>)
 8011812:	4843      	ldr	r0, [pc, #268]	; (8011920 <__multiply+0x148>)
 8011814:	f240 115d 	movw	r1, #349	; 0x15d
 8011818:	f000 fb14 	bl	8011e44 <__assert_func>
 801181c:	f100 0614 	add.w	r6, r0, #20
 8011820:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8011824:	4633      	mov	r3, r6
 8011826:	2200      	movs	r2, #0
 8011828:	4543      	cmp	r3, r8
 801182a:	d31e      	bcc.n	801186a <__multiply+0x92>
 801182c:	f105 0c14 	add.w	ip, r5, #20
 8011830:	f104 0314 	add.w	r3, r4, #20
 8011834:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011838:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801183c:	9202      	str	r2, [sp, #8]
 801183e:	ebac 0205 	sub.w	r2, ip, r5
 8011842:	3a15      	subs	r2, #21
 8011844:	f022 0203 	bic.w	r2, r2, #3
 8011848:	3204      	adds	r2, #4
 801184a:	f105 0115 	add.w	r1, r5, #21
 801184e:	458c      	cmp	ip, r1
 8011850:	bf38      	it	cc
 8011852:	2204      	movcc	r2, #4
 8011854:	9201      	str	r2, [sp, #4]
 8011856:	9a02      	ldr	r2, [sp, #8]
 8011858:	9303      	str	r3, [sp, #12]
 801185a:	429a      	cmp	r2, r3
 801185c:	d808      	bhi.n	8011870 <__multiply+0x98>
 801185e:	2f00      	cmp	r7, #0
 8011860:	dc55      	bgt.n	801190e <__multiply+0x136>
 8011862:	6107      	str	r7, [r0, #16]
 8011864:	b005      	add	sp, #20
 8011866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801186a:	f843 2b04 	str.w	r2, [r3], #4
 801186e:	e7db      	b.n	8011828 <__multiply+0x50>
 8011870:	f8b3 a000 	ldrh.w	sl, [r3]
 8011874:	f1ba 0f00 	cmp.w	sl, #0
 8011878:	d020      	beq.n	80118bc <__multiply+0xe4>
 801187a:	f105 0e14 	add.w	lr, r5, #20
 801187e:	46b1      	mov	r9, r6
 8011880:	2200      	movs	r2, #0
 8011882:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011886:	f8d9 b000 	ldr.w	fp, [r9]
 801188a:	b2a1      	uxth	r1, r4
 801188c:	fa1f fb8b 	uxth.w	fp, fp
 8011890:	fb0a b101 	mla	r1, sl, r1, fp
 8011894:	4411      	add	r1, r2
 8011896:	f8d9 2000 	ldr.w	r2, [r9]
 801189a:	0c24      	lsrs	r4, r4, #16
 801189c:	0c12      	lsrs	r2, r2, #16
 801189e:	fb0a 2404 	mla	r4, sl, r4, r2
 80118a2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80118a6:	b289      	uxth	r1, r1
 80118a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80118ac:	45f4      	cmp	ip, lr
 80118ae:	f849 1b04 	str.w	r1, [r9], #4
 80118b2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80118b6:	d8e4      	bhi.n	8011882 <__multiply+0xaa>
 80118b8:	9901      	ldr	r1, [sp, #4]
 80118ba:	5072      	str	r2, [r6, r1]
 80118bc:	9a03      	ldr	r2, [sp, #12]
 80118be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80118c2:	3304      	adds	r3, #4
 80118c4:	f1b9 0f00 	cmp.w	r9, #0
 80118c8:	d01f      	beq.n	801190a <__multiply+0x132>
 80118ca:	6834      	ldr	r4, [r6, #0]
 80118cc:	f105 0114 	add.w	r1, r5, #20
 80118d0:	46b6      	mov	lr, r6
 80118d2:	f04f 0a00 	mov.w	sl, #0
 80118d6:	880a      	ldrh	r2, [r1, #0]
 80118d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80118dc:	fb09 b202 	mla	r2, r9, r2, fp
 80118e0:	4492      	add	sl, r2
 80118e2:	b2a4      	uxth	r4, r4
 80118e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80118e8:	f84e 4b04 	str.w	r4, [lr], #4
 80118ec:	f851 4b04 	ldr.w	r4, [r1], #4
 80118f0:	f8be 2000 	ldrh.w	r2, [lr]
 80118f4:	0c24      	lsrs	r4, r4, #16
 80118f6:	fb09 2404 	mla	r4, r9, r4, r2
 80118fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80118fe:	458c      	cmp	ip, r1
 8011900:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011904:	d8e7      	bhi.n	80118d6 <__multiply+0xfe>
 8011906:	9a01      	ldr	r2, [sp, #4]
 8011908:	50b4      	str	r4, [r6, r2]
 801190a:	3604      	adds	r6, #4
 801190c:	e7a3      	b.n	8011856 <__multiply+0x7e>
 801190e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011912:	2b00      	cmp	r3, #0
 8011914:	d1a5      	bne.n	8011862 <__multiply+0x8a>
 8011916:	3f01      	subs	r7, #1
 8011918:	e7a1      	b.n	801185e <__multiply+0x86>
 801191a:	bf00      	nop
 801191c:	080144cb 	.word	0x080144cb
 8011920:	080144dc 	.word	0x080144dc

08011924 <__pow5mult>:
 8011924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011928:	4615      	mov	r5, r2
 801192a:	f012 0203 	ands.w	r2, r2, #3
 801192e:	4606      	mov	r6, r0
 8011930:	460f      	mov	r7, r1
 8011932:	d007      	beq.n	8011944 <__pow5mult+0x20>
 8011934:	4c25      	ldr	r4, [pc, #148]	; (80119cc <__pow5mult+0xa8>)
 8011936:	3a01      	subs	r2, #1
 8011938:	2300      	movs	r3, #0
 801193a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801193e:	f7ff fe9b 	bl	8011678 <__multadd>
 8011942:	4607      	mov	r7, r0
 8011944:	10ad      	asrs	r5, r5, #2
 8011946:	d03d      	beq.n	80119c4 <__pow5mult+0xa0>
 8011948:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801194a:	b97c      	cbnz	r4, 801196c <__pow5mult+0x48>
 801194c:	2010      	movs	r0, #16
 801194e:	f7ff fe29 	bl	80115a4 <malloc>
 8011952:	4602      	mov	r2, r0
 8011954:	6270      	str	r0, [r6, #36]	; 0x24
 8011956:	b928      	cbnz	r0, 8011964 <__pow5mult+0x40>
 8011958:	4b1d      	ldr	r3, [pc, #116]	; (80119d0 <__pow5mult+0xac>)
 801195a:	481e      	ldr	r0, [pc, #120]	; (80119d4 <__pow5mult+0xb0>)
 801195c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011960:	f000 fa70 	bl	8011e44 <__assert_func>
 8011964:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011968:	6004      	str	r4, [r0, #0]
 801196a:	60c4      	str	r4, [r0, #12]
 801196c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011970:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011974:	b94c      	cbnz	r4, 801198a <__pow5mult+0x66>
 8011976:	f240 2171 	movw	r1, #625	; 0x271
 801197a:	4630      	mov	r0, r6
 801197c:	f7ff ff16 	bl	80117ac <__i2b>
 8011980:	2300      	movs	r3, #0
 8011982:	f8c8 0008 	str.w	r0, [r8, #8]
 8011986:	4604      	mov	r4, r0
 8011988:	6003      	str	r3, [r0, #0]
 801198a:	f04f 0900 	mov.w	r9, #0
 801198e:	07eb      	lsls	r3, r5, #31
 8011990:	d50a      	bpl.n	80119a8 <__pow5mult+0x84>
 8011992:	4639      	mov	r1, r7
 8011994:	4622      	mov	r2, r4
 8011996:	4630      	mov	r0, r6
 8011998:	f7ff ff1e 	bl	80117d8 <__multiply>
 801199c:	4639      	mov	r1, r7
 801199e:	4680      	mov	r8, r0
 80119a0:	4630      	mov	r0, r6
 80119a2:	f7ff fe47 	bl	8011634 <_Bfree>
 80119a6:	4647      	mov	r7, r8
 80119a8:	106d      	asrs	r5, r5, #1
 80119aa:	d00b      	beq.n	80119c4 <__pow5mult+0xa0>
 80119ac:	6820      	ldr	r0, [r4, #0]
 80119ae:	b938      	cbnz	r0, 80119c0 <__pow5mult+0x9c>
 80119b0:	4622      	mov	r2, r4
 80119b2:	4621      	mov	r1, r4
 80119b4:	4630      	mov	r0, r6
 80119b6:	f7ff ff0f 	bl	80117d8 <__multiply>
 80119ba:	6020      	str	r0, [r4, #0]
 80119bc:	f8c0 9000 	str.w	r9, [r0]
 80119c0:	4604      	mov	r4, r0
 80119c2:	e7e4      	b.n	801198e <__pow5mult+0x6a>
 80119c4:	4638      	mov	r0, r7
 80119c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119ca:	bf00      	nop
 80119cc:	08014630 	.word	0x08014630
 80119d0:	08014455 	.word	0x08014455
 80119d4:	080144dc 	.word	0x080144dc

080119d8 <__lshift>:
 80119d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119dc:	460c      	mov	r4, r1
 80119de:	6849      	ldr	r1, [r1, #4]
 80119e0:	6923      	ldr	r3, [r4, #16]
 80119e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80119e6:	68a3      	ldr	r3, [r4, #8]
 80119e8:	4607      	mov	r7, r0
 80119ea:	4691      	mov	r9, r2
 80119ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80119f0:	f108 0601 	add.w	r6, r8, #1
 80119f4:	42b3      	cmp	r3, r6
 80119f6:	db0b      	blt.n	8011a10 <__lshift+0x38>
 80119f8:	4638      	mov	r0, r7
 80119fa:	f7ff fddb 	bl	80115b4 <_Balloc>
 80119fe:	4605      	mov	r5, r0
 8011a00:	b948      	cbnz	r0, 8011a16 <__lshift+0x3e>
 8011a02:	4602      	mov	r2, r0
 8011a04:	4b28      	ldr	r3, [pc, #160]	; (8011aa8 <__lshift+0xd0>)
 8011a06:	4829      	ldr	r0, [pc, #164]	; (8011aac <__lshift+0xd4>)
 8011a08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011a0c:	f000 fa1a 	bl	8011e44 <__assert_func>
 8011a10:	3101      	adds	r1, #1
 8011a12:	005b      	lsls	r3, r3, #1
 8011a14:	e7ee      	b.n	80119f4 <__lshift+0x1c>
 8011a16:	2300      	movs	r3, #0
 8011a18:	f100 0114 	add.w	r1, r0, #20
 8011a1c:	f100 0210 	add.w	r2, r0, #16
 8011a20:	4618      	mov	r0, r3
 8011a22:	4553      	cmp	r3, sl
 8011a24:	db33      	blt.n	8011a8e <__lshift+0xb6>
 8011a26:	6920      	ldr	r0, [r4, #16]
 8011a28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011a2c:	f104 0314 	add.w	r3, r4, #20
 8011a30:	f019 091f 	ands.w	r9, r9, #31
 8011a34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011a3c:	d02b      	beq.n	8011a96 <__lshift+0xbe>
 8011a3e:	f1c9 0e20 	rsb	lr, r9, #32
 8011a42:	468a      	mov	sl, r1
 8011a44:	2200      	movs	r2, #0
 8011a46:	6818      	ldr	r0, [r3, #0]
 8011a48:	fa00 f009 	lsl.w	r0, r0, r9
 8011a4c:	4302      	orrs	r2, r0
 8011a4e:	f84a 2b04 	str.w	r2, [sl], #4
 8011a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a56:	459c      	cmp	ip, r3
 8011a58:	fa22 f20e 	lsr.w	r2, r2, lr
 8011a5c:	d8f3      	bhi.n	8011a46 <__lshift+0x6e>
 8011a5e:	ebac 0304 	sub.w	r3, ip, r4
 8011a62:	3b15      	subs	r3, #21
 8011a64:	f023 0303 	bic.w	r3, r3, #3
 8011a68:	3304      	adds	r3, #4
 8011a6a:	f104 0015 	add.w	r0, r4, #21
 8011a6e:	4584      	cmp	ip, r0
 8011a70:	bf38      	it	cc
 8011a72:	2304      	movcc	r3, #4
 8011a74:	50ca      	str	r2, [r1, r3]
 8011a76:	b10a      	cbz	r2, 8011a7c <__lshift+0xa4>
 8011a78:	f108 0602 	add.w	r6, r8, #2
 8011a7c:	3e01      	subs	r6, #1
 8011a7e:	4638      	mov	r0, r7
 8011a80:	612e      	str	r6, [r5, #16]
 8011a82:	4621      	mov	r1, r4
 8011a84:	f7ff fdd6 	bl	8011634 <_Bfree>
 8011a88:	4628      	mov	r0, r5
 8011a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a92:	3301      	adds	r3, #1
 8011a94:	e7c5      	b.n	8011a22 <__lshift+0x4a>
 8011a96:	3904      	subs	r1, #4
 8011a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011aa0:	459c      	cmp	ip, r3
 8011aa2:	d8f9      	bhi.n	8011a98 <__lshift+0xc0>
 8011aa4:	e7ea      	b.n	8011a7c <__lshift+0xa4>
 8011aa6:	bf00      	nop
 8011aa8:	080144cb 	.word	0x080144cb
 8011aac:	080144dc 	.word	0x080144dc

08011ab0 <__mcmp>:
 8011ab0:	b530      	push	{r4, r5, lr}
 8011ab2:	6902      	ldr	r2, [r0, #16]
 8011ab4:	690c      	ldr	r4, [r1, #16]
 8011ab6:	1b12      	subs	r2, r2, r4
 8011ab8:	d10e      	bne.n	8011ad8 <__mcmp+0x28>
 8011aba:	f100 0314 	add.w	r3, r0, #20
 8011abe:	3114      	adds	r1, #20
 8011ac0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011ac4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011ac8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011acc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011ad0:	42a5      	cmp	r5, r4
 8011ad2:	d003      	beq.n	8011adc <__mcmp+0x2c>
 8011ad4:	d305      	bcc.n	8011ae2 <__mcmp+0x32>
 8011ad6:	2201      	movs	r2, #1
 8011ad8:	4610      	mov	r0, r2
 8011ada:	bd30      	pop	{r4, r5, pc}
 8011adc:	4283      	cmp	r3, r0
 8011ade:	d3f3      	bcc.n	8011ac8 <__mcmp+0x18>
 8011ae0:	e7fa      	b.n	8011ad8 <__mcmp+0x28>
 8011ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8011ae6:	e7f7      	b.n	8011ad8 <__mcmp+0x28>

08011ae8 <__mdiff>:
 8011ae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aec:	460c      	mov	r4, r1
 8011aee:	4606      	mov	r6, r0
 8011af0:	4611      	mov	r1, r2
 8011af2:	4620      	mov	r0, r4
 8011af4:	4617      	mov	r7, r2
 8011af6:	f7ff ffdb 	bl	8011ab0 <__mcmp>
 8011afa:	1e05      	subs	r5, r0, #0
 8011afc:	d110      	bne.n	8011b20 <__mdiff+0x38>
 8011afe:	4629      	mov	r1, r5
 8011b00:	4630      	mov	r0, r6
 8011b02:	f7ff fd57 	bl	80115b4 <_Balloc>
 8011b06:	b930      	cbnz	r0, 8011b16 <__mdiff+0x2e>
 8011b08:	4b39      	ldr	r3, [pc, #228]	; (8011bf0 <__mdiff+0x108>)
 8011b0a:	4602      	mov	r2, r0
 8011b0c:	f240 2132 	movw	r1, #562	; 0x232
 8011b10:	4838      	ldr	r0, [pc, #224]	; (8011bf4 <__mdiff+0x10c>)
 8011b12:	f000 f997 	bl	8011e44 <__assert_func>
 8011b16:	2301      	movs	r3, #1
 8011b18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011b1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b20:	bfa4      	itt	ge
 8011b22:	463b      	movge	r3, r7
 8011b24:	4627      	movge	r7, r4
 8011b26:	4630      	mov	r0, r6
 8011b28:	6879      	ldr	r1, [r7, #4]
 8011b2a:	bfa6      	itte	ge
 8011b2c:	461c      	movge	r4, r3
 8011b2e:	2500      	movge	r5, #0
 8011b30:	2501      	movlt	r5, #1
 8011b32:	f7ff fd3f 	bl	80115b4 <_Balloc>
 8011b36:	b920      	cbnz	r0, 8011b42 <__mdiff+0x5a>
 8011b38:	4b2d      	ldr	r3, [pc, #180]	; (8011bf0 <__mdiff+0x108>)
 8011b3a:	4602      	mov	r2, r0
 8011b3c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011b40:	e7e6      	b.n	8011b10 <__mdiff+0x28>
 8011b42:	693e      	ldr	r6, [r7, #16]
 8011b44:	60c5      	str	r5, [r0, #12]
 8011b46:	6925      	ldr	r5, [r4, #16]
 8011b48:	f107 0114 	add.w	r1, r7, #20
 8011b4c:	f104 0914 	add.w	r9, r4, #20
 8011b50:	f100 0e14 	add.w	lr, r0, #20
 8011b54:	f107 0210 	add.w	r2, r7, #16
 8011b58:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011b5c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011b60:	46f2      	mov	sl, lr
 8011b62:	2700      	movs	r7, #0
 8011b64:	f859 3b04 	ldr.w	r3, [r9], #4
 8011b68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011b6c:	fa1f f883 	uxth.w	r8, r3
 8011b70:	fa17 f78b 	uxtah	r7, r7, fp
 8011b74:	0c1b      	lsrs	r3, r3, #16
 8011b76:	eba7 0808 	sub.w	r8, r7, r8
 8011b7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011b7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011b82:	fa1f f888 	uxth.w	r8, r8
 8011b86:	141f      	asrs	r7, r3, #16
 8011b88:	454d      	cmp	r5, r9
 8011b8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011b8e:	f84a 3b04 	str.w	r3, [sl], #4
 8011b92:	d8e7      	bhi.n	8011b64 <__mdiff+0x7c>
 8011b94:	1b2b      	subs	r3, r5, r4
 8011b96:	3b15      	subs	r3, #21
 8011b98:	f023 0303 	bic.w	r3, r3, #3
 8011b9c:	3304      	adds	r3, #4
 8011b9e:	3415      	adds	r4, #21
 8011ba0:	42a5      	cmp	r5, r4
 8011ba2:	bf38      	it	cc
 8011ba4:	2304      	movcc	r3, #4
 8011ba6:	4419      	add	r1, r3
 8011ba8:	4473      	add	r3, lr
 8011baa:	469e      	mov	lr, r3
 8011bac:	460d      	mov	r5, r1
 8011bae:	4565      	cmp	r5, ip
 8011bb0:	d30e      	bcc.n	8011bd0 <__mdiff+0xe8>
 8011bb2:	f10c 0203 	add.w	r2, ip, #3
 8011bb6:	1a52      	subs	r2, r2, r1
 8011bb8:	f022 0203 	bic.w	r2, r2, #3
 8011bbc:	3903      	subs	r1, #3
 8011bbe:	458c      	cmp	ip, r1
 8011bc0:	bf38      	it	cc
 8011bc2:	2200      	movcc	r2, #0
 8011bc4:	441a      	add	r2, r3
 8011bc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011bca:	b17b      	cbz	r3, 8011bec <__mdiff+0x104>
 8011bcc:	6106      	str	r6, [r0, #16]
 8011bce:	e7a5      	b.n	8011b1c <__mdiff+0x34>
 8011bd0:	f855 8b04 	ldr.w	r8, [r5], #4
 8011bd4:	fa17 f488 	uxtah	r4, r7, r8
 8011bd8:	1422      	asrs	r2, r4, #16
 8011bda:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011bde:	b2a4      	uxth	r4, r4
 8011be0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011be4:	f84e 4b04 	str.w	r4, [lr], #4
 8011be8:	1417      	asrs	r7, r2, #16
 8011bea:	e7e0      	b.n	8011bae <__mdiff+0xc6>
 8011bec:	3e01      	subs	r6, #1
 8011bee:	e7ea      	b.n	8011bc6 <__mdiff+0xde>
 8011bf0:	080144cb 	.word	0x080144cb
 8011bf4:	080144dc 	.word	0x080144dc

08011bf8 <__d2b>:
 8011bf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011bfc:	4689      	mov	r9, r1
 8011bfe:	2101      	movs	r1, #1
 8011c00:	ec57 6b10 	vmov	r6, r7, d0
 8011c04:	4690      	mov	r8, r2
 8011c06:	f7ff fcd5 	bl	80115b4 <_Balloc>
 8011c0a:	4604      	mov	r4, r0
 8011c0c:	b930      	cbnz	r0, 8011c1c <__d2b+0x24>
 8011c0e:	4602      	mov	r2, r0
 8011c10:	4b25      	ldr	r3, [pc, #148]	; (8011ca8 <__d2b+0xb0>)
 8011c12:	4826      	ldr	r0, [pc, #152]	; (8011cac <__d2b+0xb4>)
 8011c14:	f240 310a 	movw	r1, #778	; 0x30a
 8011c18:	f000 f914 	bl	8011e44 <__assert_func>
 8011c1c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011c20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011c24:	bb35      	cbnz	r5, 8011c74 <__d2b+0x7c>
 8011c26:	2e00      	cmp	r6, #0
 8011c28:	9301      	str	r3, [sp, #4]
 8011c2a:	d028      	beq.n	8011c7e <__d2b+0x86>
 8011c2c:	4668      	mov	r0, sp
 8011c2e:	9600      	str	r6, [sp, #0]
 8011c30:	f7ff fd8c 	bl	801174c <__lo0bits>
 8011c34:	9900      	ldr	r1, [sp, #0]
 8011c36:	b300      	cbz	r0, 8011c7a <__d2b+0x82>
 8011c38:	9a01      	ldr	r2, [sp, #4]
 8011c3a:	f1c0 0320 	rsb	r3, r0, #32
 8011c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8011c42:	430b      	orrs	r3, r1
 8011c44:	40c2      	lsrs	r2, r0
 8011c46:	6163      	str	r3, [r4, #20]
 8011c48:	9201      	str	r2, [sp, #4]
 8011c4a:	9b01      	ldr	r3, [sp, #4]
 8011c4c:	61a3      	str	r3, [r4, #24]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	bf14      	ite	ne
 8011c52:	2202      	movne	r2, #2
 8011c54:	2201      	moveq	r2, #1
 8011c56:	6122      	str	r2, [r4, #16]
 8011c58:	b1d5      	cbz	r5, 8011c90 <__d2b+0x98>
 8011c5a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011c5e:	4405      	add	r5, r0
 8011c60:	f8c9 5000 	str.w	r5, [r9]
 8011c64:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011c68:	f8c8 0000 	str.w	r0, [r8]
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	b003      	add	sp, #12
 8011c70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011c78:	e7d5      	b.n	8011c26 <__d2b+0x2e>
 8011c7a:	6161      	str	r1, [r4, #20]
 8011c7c:	e7e5      	b.n	8011c4a <__d2b+0x52>
 8011c7e:	a801      	add	r0, sp, #4
 8011c80:	f7ff fd64 	bl	801174c <__lo0bits>
 8011c84:	9b01      	ldr	r3, [sp, #4]
 8011c86:	6163      	str	r3, [r4, #20]
 8011c88:	2201      	movs	r2, #1
 8011c8a:	6122      	str	r2, [r4, #16]
 8011c8c:	3020      	adds	r0, #32
 8011c8e:	e7e3      	b.n	8011c58 <__d2b+0x60>
 8011c90:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011c94:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011c98:	f8c9 0000 	str.w	r0, [r9]
 8011c9c:	6918      	ldr	r0, [r3, #16]
 8011c9e:	f7ff fd35 	bl	801170c <__hi0bits>
 8011ca2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011ca6:	e7df      	b.n	8011c68 <__d2b+0x70>
 8011ca8:	080144cb 	.word	0x080144cb
 8011cac:	080144dc 	.word	0x080144dc

08011cb0 <_calloc_r>:
 8011cb0:	b513      	push	{r0, r1, r4, lr}
 8011cb2:	434a      	muls	r2, r1
 8011cb4:	4611      	mov	r1, r2
 8011cb6:	9201      	str	r2, [sp, #4]
 8011cb8:	f000 f85a 	bl	8011d70 <_malloc_r>
 8011cbc:	4604      	mov	r4, r0
 8011cbe:	b118      	cbz	r0, 8011cc8 <_calloc_r+0x18>
 8011cc0:	9a01      	ldr	r2, [sp, #4]
 8011cc2:	2100      	movs	r1, #0
 8011cc4:	f7fe fa10 	bl	80100e8 <memset>
 8011cc8:	4620      	mov	r0, r4
 8011cca:	b002      	add	sp, #8
 8011ccc:	bd10      	pop	{r4, pc}
	...

08011cd0 <_free_r>:
 8011cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cd2:	2900      	cmp	r1, #0
 8011cd4:	d048      	beq.n	8011d68 <_free_r+0x98>
 8011cd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cda:	9001      	str	r0, [sp, #4]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	f1a1 0404 	sub.w	r4, r1, #4
 8011ce2:	bfb8      	it	lt
 8011ce4:	18e4      	addlt	r4, r4, r3
 8011ce6:	f000 f8ef 	bl	8011ec8 <__malloc_lock>
 8011cea:	4a20      	ldr	r2, [pc, #128]	; (8011d6c <_free_r+0x9c>)
 8011cec:	9801      	ldr	r0, [sp, #4]
 8011cee:	6813      	ldr	r3, [r2, #0]
 8011cf0:	4615      	mov	r5, r2
 8011cf2:	b933      	cbnz	r3, 8011d02 <_free_r+0x32>
 8011cf4:	6063      	str	r3, [r4, #4]
 8011cf6:	6014      	str	r4, [r2, #0]
 8011cf8:	b003      	add	sp, #12
 8011cfa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011cfe:	f000 b8e9 	b.w	8011ed4 <__malloc_unlock>
 8011d02:	42a3      	cmp	r3, r4
 8011d04:	d90b      	bls.n	8011d1e <_free_r+0x4e>
 8011d06:	6821      	ldr	r1, [r4, #0]
 8011d08:	1862      	adds	r2, r4, r1
 8011d0a:	4293      	cmp	r3, r2
 8011d0c:	bf04      	itt	eq
 8011d0e:	681a      	ldreq	r2, [r3, #0]
 8011d10:	685b      	ldreq	r3, [r3, #4]
 8011d12:	6063      	str	r3, [r4, #4]
 8011d14:	bf04      	itt	eq
 8011d16:	1852      	addeq	r2, r2, r1
 8011d18:	6022      	streq	r2, [r4, #0]
 8011d1a:	602c      	str	r4, [r5, #0]
 8011d1c:	e7ec      	b.n	8011cf8 <_free_r+0x28>
 8011d1e:	461a      	mov	r2, r3
 8011d20:	685b      	ldr	r3, [r3, #4]
 8011d22:	b10b      	cbz	r3, 8011d28 <_free_r+0x58>
 8011d24:	42a3      	cmp	r3, r4
 8011d26:	d9fa      	bls.n	8011d1e <_free_r+0x4e>
 8011d28:	6811      	ldr	r1, [r2, #0]
 8011d2a:	1855      	adds	r5, r2, r1
 8011d2c:	42a5      	cmp	r5, r4
 8011d2e:	d10b      	bne.n	8011d48 <_free_r+0x78>
 8011d30:	6824      	ldr	r4, [r4, #0]
 8011d32:	4421      	add	r1, r4
 8011d34:	1854      	adds	r4, r2, r1
 8011d36:	42a3      	cmp	r3, r4
 8011d38:	6011      	str	r1, [r2, #0]
 8011d3a:	d1dd      	bne.n	8011cf8 <_free_r+0x28>
 8011d3c:	681c      	ldr	r4, [r3, #0]
 8011d3e:	685b      	ldr	r3, [r3, #4]
 8011d40:	6053      	str	r3, [r2, #4]
 8011d42:	4421      	add	r1, r4
 8011d44:	6011      	str	r1, [r2, #0]
 8011d46:	e7d7      	b.n	8011cf8 <_free_r+0x28>
 8011d48:	d902      	bls.n	8011d50 <_free_r+0x80>
 8011d4a:	230c      	movs	r3, #12
 8011d4c:	6003      	str	r3, [r0, #0]
 8011d4e:	e7d3      	b.n	8011cf8 <_free_r+0x28>
 8011d50:	6825      	ldr	r5, [r4, #0]
 8011d52:	1961      	adds	r1, r4, r5
 8011d54:	428b      	cmp	r3, r1
 8011d56:	bf04      	itt	eq
 8011d58:	6819      	ldreq	r1, [r3, #0]
 8011d5a:	685b      	ldreq	r3, [r3, #4]
 8011d5c:	6063      	str	r3, [r4, #4]
 8011d5e:	bf04      	itt	eq
 8011d60:	1949      	addeq	r1, r1, r5
 8011d62:	6021      	streq	r1, [r4, #0]
 8011d64:	6054      	str	r4, [r2, #4]
 8011d66:	e7c7      	b.n	8011cf8 <_free_r+0x28>
 8011d68:	b003      	add	sp, #12
 8011d6a:	bd30      	pop	{r4, r5, pc}
 8011d6c:	24000800 	.word	0x24000800

08011d70 <_malloc_r>:
 8011d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d72:	1ccd      	adds	r5, r1, #3
 8011d74:	f025 0503 	bic.w	r5, r5, #3
 8011d78:	3508      	adds	r5, #8
 8011d7a:	2d0c      	cmp	r5, #12
 8011d7c:	bf38      	it	cc
 8011d7e:	250c      	movcc	r5, #12
 8011d80:	2d00      	cmp	r5, #0
 8011d82:	4606      	mov	r6, r0
 8011d84:	db01      	blt.n	8011d8a <_malloc_r+0x1a>
 8011d86:	42a9      	cmp	r1, r5
 8011d88:	d903      	bls.n	8011d92 <_malloc_r+0x22>
 8011d8a:	230c      	movs	r3, #12
 8011d8c:	6033      	str	r3, [r6, #0]
 8011d8e:	2000      	movs	r0, #0
 8011d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d92:	f000 f899 	bl	8011ec8 <__malloc_lock>
 8011d96:	4921      	ldr	r1, [pc, #132]	; (8011e1c <_malloc_r+0xac>)
 8011d98:	680a      	ldr	r2, [r1, #0]
 8011d9a:	4614      	mov	r4, r2
 8011d9c:	b99c      	cbnz	r4, 8011dc6 <_malloc_r+0x56>
 8011d9e:	4f20      	ldr	r7, [pc, #128]	; (8011e20 <_malloc_r+0xb0>)
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	b923      	cbnz	r3, 8011dae <_malloc_r+0x3e>
 8011da4:	4621      	mov	r1, r4
 8011da6:	4630      	mov	r0, r6
 8011da8:	f000 f83c 	bl	8011e24 <_sbrk_r>
 8011dac:	6038      	str	r0, [r7, #0]
 8011dae:	4629      	mov	r1, r5
 8011db0:	4630      	mov	r0, r6
 8011db2:	f000 f837 	bl	8011e24 <_sbrk_r>
 8011db6:	1c43      	adds	r3, r0, #1
 8011db8:	d123      	bne.n	8011e02 <_malloc_r+0x92>
 8011dba:	230c      	movs	r3, #12
 8011dbc:	6033      	str	r3, [r6, #0]
 8011dbe:	4630      	mov	r0, r6
 8011dc0:	f000 f888 	bl	8011ed4 <__malloc_unlock>
 8011dc4:	e7e3      	b.n	8011d8e <_malloc_r+0x1e>
 8011dc6:	6823      	ldr	r3, [r4, #0]
 8011dc8:	1b5b      	subs	r3, r3, r5
 8011dca:	d417      	bmi.n	8011dfc <_malloc_r+0x8c>
 8011dcc:	2b0b      	cmp	r3, #11
 8011dce:	d903      	bls.n	8011dd8 <_malloc_r+0x68>
 8011dd0:	6023      	str	r3, [r4, #0]
 8011dd2:	441c      	add	r4, r3
 8011dd4:	6025      	str	r5, [r4, #0]
 8011dd6:	e004      	b.n	8011de2 <_malloc_r+0x72>
 8011dd8:	6863      	ldr	r3, [r4, #4]
 8011dda:	42a2      	cmp	r2, r4
 8011ddc:	bf0c      	ite	eq
 8011dde:	600b      	streq	r3, [r1, #0]
 8011de0:	6053      	strne	r3, [r2, #4]
 8011de2:	4630      	mov	r0, r6
 8011de4:	f000 f876 	bl	8011ed4 <__malloc_unlock>
 8011de8:	f104 000b 	add.w	r0, r4, #11
 8011dec:	1d23      	adds	r3, r4, #4
 8011dee:	f020 0007 	bic.w	r0, r0, #7
 8011df2:	1ac2      	subs	r2, r0, r3
 8011df4:	d0cc      	beq.n	8011d90 <_malloc_r+0x20>
 8011df6:	1a1b      	subs	r3, r3, r0
 8011df8:	50a3      	str	r3, [r4, r2]
 8011dfa:	e7c9      	b.n	8011d90 <_malloc_r+0x20>
 8011dfc:	4622      	mov	r2, r4
 8011dfe:	6864      	ldr	r4, [r4, #4]
 8011e00:	e7cc      	b.n	8011d9c <_malloc_r+0x2c>
 8011e02:	1cc4      	adds	r4, r0, #3
 8011e04:	f024 0403 	bic.w	r4, r4, #3
 8011e08:	42a0      	cmp	r0, r4
 8011e0a:	d0e3      	beq.n	8011dd4 <_malloc_r+0x64>
 8011e0c:	1a21      	subs	r1, r4, r0
 8011e0e:	4630      	mov	r0, r6
 8011e10:	f000 f808 	bl	8011e24 <_sbrk_r>
 8011e14:	3001      	adds	r0, #1
 8011e16:	d1dd      	bne.n	8011dd4 <_malloc_r+0x64>
 8011e18:	e7cf      	b.n	8011dba <_malloc_r+0x4a>
 8011e1a:	bf00      	nop
 8011e1c:	24000800 	.word	0x24000800
 8011e20:	24000804 	.word	0x24000804

08011e24 <_sbrk_r>:
 8011e24:	b538      	push	{r3, r4, r5, lr}
 8011e26:	4d06      	ldr	r5, [pc, #24]	; (8011e40 <_sbrk_r+0x1c>)
 8011e28:	2300      	movs	r3, #0
 8011e2a:	4604      	mov	r4, r0
 8011e2c:	4608      	mov	r0, r1
 8011e2e:	602b      	str	r3, [r5, #0]
 8011e30:	f7f2 fb36 	bl	80044a0 <_sbrk>
 8011e34:	1c43      	adds	r3, r0, #1
 8011e36:	d102      	bne.n	8011e3e <_sbrk_r+0x1a>
 8011e38:	682b      	ldr	r3, [r5, #0]
 8011e3a:	b103      	cbz	r3, 8011e3e <_sbrk_r+0x1a>
 8011e3c:	6023      	str	r3, [r4, #0]
 8011e3e:	bd38      	pop	{r3, r4, r5, pc}
 8011e40:	24001004 	.word	0x24001004

08011e44 <__assert_func>:
 8011e44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e46:	4614      	mov	r4, r2
 8011e48:	461a      	mov	r2, r3
 8011e4a:	4b09      	ldr	r3, [pc, #36]	; (8011e70 <__assert_func+0x2c>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	4605      	mov	r5, r0
 8011e50:	68d8      	ldr	r0, [r3, #12]
 8011e52:	b14c      	cbz	r4, 8011e68 <__assert_func+0x24>
 8011e54:	4b07      	ldr	r3, [pc, #28]	; (8011e74 <__assert_func+0x30>)
 8011e56:	9100      	str	r1, [sp, #0]
 8011e58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e5c:	4906      	ldr	r1, [pc, #24]	; (8011e78 <__assert_func+0x34>)
 8011e5e:	462b      	mov	r3, r5
 8011e60:	f000 f80e 	bl	8011e80 <fiprintf>
 8011e64:	f000 fa64 	bl	8012330 <abort>
 8011e68:	4b04      	ldr	r3, [pc, #16]	; (8011e7c <__assert_func+0x38>)
 8011e6a:	461c      	mov	r4, r3
 8011e6c:	e7f3      	b.n	8011e56 <__assert_func+0x12>
 8011e6e:	bf00      	nop
 8011e70:	24000050 	.word	0x24000050
 8011e74:	0801463c 	.word	0x0801463c
 8011e78:	08014649 	.word	0x08014649
 8011e7c:	08014677 	.word	0x08014677

08011e80 <fiprintf>:
 8011e80:	b40e      	push	{r1, r2, r3}
 8011e82:	b503      	push	{r0, r1, lr}
 8011e84:	4601      	mov	r1, r0
 8011e86:	ab03      	add	r3, sp, #12
 8011e88:	4805      	ldr	r0, [pc, #20]	; (8011ea0 <fiprintf+0x20>)
 8011e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e8e:	6800      	ldr	r0, [r0, #0]
 8011e90:	9301      	str	r3, [sp, #4]
 8011e92:	f000 f84f 	bl	8011f34 <_vfiprintf_r>
 8011e96:	b002      	add	sp, #8
 8011e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e9c:	b003      	add	sp, #12
 8011e9e:	4770      	bx	lr
 8011ea0:	24000050 	.word	0x24000050

08011ea4 <__ascii_mbtowc>:
 8011ea4:	b082      	sub	sp, #8
 8011ea6:	b901      	cbnz	r1, 8011eaa <__ascii_mbtowc+0x6>
 8011ea8:	a901      	add	r1, sp, #4
 8011eaa:	b142      	cbz	r2, 8011ebe <__ascii_mbtowc+0x1a>
 8011eac:	b14b      	cbz	r3, 8011ec2 <__ascii_mbtowc+0x1e>
 8011eae:	7813      	ldrb	r3, [r2, #0]
 8011eb0:	600b      	str	r3, [r1, #0]
 8011eb2:	7812      	ldrb	r2, [r2, #0]
 8011eb4:	1e10      	subs	r0, r2, #0
 8011eb6:	bf18      	it	ne
 8011eb8:	2001      	movne	r0, #1
 8011eba:	b002      	add	sp, #8
 8011ebc:	4770      	bx	lr
 8011ebe:	4610      	mov	r0, r2
 8011ec0:	e7fb      	b.n	8011eba <__ascii_mbtowc+0x16>
 8011ec2:	f06f 0001 	mvn.w	r0, #1
 8011ec6:	e7f8      	b.n	8011eba <__ascii_mbtowc+0x16>

08011ec8 <__malloc_lock>:
 8011ec8:	4801      	ldr	r0, [pc, #4]	; (8011ed0 <__malloc_lock+0x8>)
 8011eca:	f000 bbf1 	b.w	80126b0 <__retarget_lock_acquire_recursive>
 8011ece:	bf00      	nop
 8011ed0:	2400100c 	.word	0x2400100c

08011ed4 <__malloc_unlock>:
 8011ed4:	4801      	ldr	r0, [pc, #4]	; (8011edc <__malloc_unlock+0x8>)
 8011ed6:	f000 bbec 	b.w	80126b2 <__retarget_lock_release_recursive>
 8011eda:	bf00      	nop
 8011edc:	2400100c 	.word	0x2400100c

08011ee0 <__sfputc_r>:
 8011ee0:	6893      	ldr	r3, [r2, #8]
 8011ee2:	3b01      	subs	r3, #1
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	b410      	push	{r4}
 8011ee8:	6093      	str	r3, [r2, #8]
 8011eea:	da08      	bge.n	8011efe <__sfputc_r+0x1e>
 8011eec:	6994      	ldr	r4, [r2, #24]
 8011eee:	42a3      	cmp	r3, r4
 8011ef0:	db01      	blt.n	8011ef6 <__sfputc_r+0x16>
 8011ef2:	290a      	cmp	r1, #10
 8011ef4:	d103      	bne.n	8011efe <__sfputc_r+0x1e>
 8011ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011efa:	f000 b94b 	b.w	8012194 <__swbuf_r>
 8011efe:	6813      	ldr	r3, [r2, #0]
 8011f00:	1c58      	adds	r0, r3, #1
 8011f02:	6010      	str	r0, [r2, #0]
 8011f04:	7019      	strb	r1, [r3, #0]
 8011f06:	4608      	mov	r0, r1
 8011f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f0c:	4770      	bx	lr

08011f0e <__sfputs_r>:
 8011f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f10:	4606      	mov	r6, r0
 8011f12:	460f      	mov	r7, r1
 8011f14:	4614      	mov	r4, r2
 8011f16:	18d5      	adds	r5, r2, r3
 8011f18:	42ac      	cmp	r4, r5
 8011f1a:	d101      	bne.n	8011f20 <__sfputs_r+0x12>
 8011f1c:	2000      	movs	r0, #0
 8011f1e:	e007      	b.n	8011f30 <__sfputs_r+0x22>
 8011f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f24:	463a      	mov	r2, r7
 8011f26:	4630      	mov	r0, r6
 8011f28:	f7ff ffda 	bl	8011ee0 <__sfputc_r>
 8011f2c:	1c43      	adds	r3, r0, #1
 8011f2e:	d1f3      	bne.n	8011f18 <__sfputs_r+0xa>
 8011f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011f34 <_vfiprintf_r>:
 8011f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f38:	460d      	mov	r5, r1
 8011f3a:	b09d      	sub	sp, #116	; 0x74
 8011f3c:	4614      	mov	r4, r2
 8011f3e:	4698      	mov	r8, r3
 8011f40:	4606      	mov	r6, r0
 8011f42:	b118      	cbz	r0, 8011f4c <_vfiprintf_r+0x18>
 8011f44:	6983      	ldr	r3, [r0, #24]
 8011f46:	b90b      	cbnz	r3, 8011f4c <_vfiprintf_r+0x18>
 8011f48:	f000 fb14 	bl	8012574 <__sinit>
 8011f4c:	4b89      	ldr	r3, [pc, #548]	; (8012174 <_vfiprintf_r+0x240>)
 8011f4e:	429d      	cmp	r5, r3
 8011f50:	d11b      	bne.n	8011f8a <_vfiprintf_r+0x56>
 8011f52:	6875      	ldr	r5, [r6, #4]
 8011f54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f56:	07d9      	lsls	r1, r3, #31
 8011f58:	d405      	bmi.n	8011f66 <_vfiprintf_r+0x32>
 8011f5a:	89ab      	ldrh	r3, [r5, #12]
 8011f5c:	059a      	lsls	r2, r3, #22
 8011f5e:	d402      	bmi.n	8011f66 <_vfiprintf_r+0x32>
 8011f60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011f62:	f000 fba5 	bl	80126b0 <__retarget_lock_acquire_recursive>
 8011f66:	89ab      	ldrh	r3, [r5, #12]
 8011f68:	071b      	lsls	r3, r3, #28
 8011f6a:	d501      	bpl.n	8011f70 <_vfiprintf_r+0x3c>
 8011f6c:	692b      	ldr	r3, [r5, #16]
 8011f6e:	b9eb      	cbnz	r3, 8011fac <_vfiprintf_r+0x78>
 8011f70:	4629      	mov	r1, r5
 8011f72:	4630      	mov	r0, r6
 8011f74:	f000 f96e 	bl	8012254 <__swsetup_r>
 8011f78:	b1c0      	cbz	r0, 8011fac <_vfiprintf_r+0x78>
 8011f7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011f7c:	07dc      	lsls	r4, r3, #31
 8011f7e:	d50e      	bpl.n	8011f9e <_vfiprintf_r+0x6a>
 8011f80:	f04f 30ff 	mov.w	r0, #4294967295
 8011f84:	b01d      	add	sp, #116	; 0x74
 8011f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f8a:	4b7b      	ldr	r3, [pc, #492]	; (8012178 <_vfiprintf_r+0x244>)
 8011f8c:	429d      	cmp	r5, r3
 8011f8e:	d101      	bne.n	8011f94 <_vfiprintf_r+0x60>
 8011f90:	68b5      	ldr	r5, [r6, #8]
 8011f92:	e7df      	b.n	8011f54 <_vfiprintf_r+0x20>
 8011f94:	4b79      	ldr	r3, [pc, #484]	; (801217c <_vfiprintf_r+0x248>)
 8011f96:	429d      	cmp	r5, r3
 8011f98:	bf08      	it	eq
 8011f9a:	68f5      	ldreq	r5, [r6, #12]
 8011f9c:	e7da      	b.n	8011f54 <_vfiprintf_r+0x20>
 8011f9e:	89ab      	ldrh	r3, [r5, #12]
 8011fa0:	0598      	lsls	r0, r3, #22
 8011fa2:	d4ed      	bmi.n	8011f80 <_vfiprintf_r+0x4c>
 8011fa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011fa6:	f000 fb84 	bl	80126b2 <__retarget_lock_release_recursive>
 8011faa:	e7e9      	b.n	8011f80 <_vfiprintf_r+0x4c>
 8011fac:	2300      	movs	r3, #0
 8011fae:	9309      	str	r3, [sp, #36]	; 0x24
 8011fb0:	2320      	movs	r3, #32
 8011fb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8011fba:	2330      	movs	r3, #48	; 0x30
 8011fbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012180 <_vfiprintf_r+0x24c>
 8011fc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011fc4:	f04f 0901 	mov.w	r9, #1
 8011fc8:	4623      	mov	r3, r4
 8011fca:	469a      	mov	sl, r3
 8011fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011fd0:	b10a      	cbz	r2, 8011fd6 <_vfiprintf_r+0xa2>
 8011fd2:	2a25      	cmp	r2, #37	; 0x25
 8011fd4:	d1f9      	bne.n	8011fca <_vfiprintf_r+0x96>
 8011fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8011fda:	d00b      	beq.n	8011ff4 <_vfiprintf_r+0xc0>
 8011fdc:	465b      	mov	r3, fp
 8011fde:	4622      	mov	r2, r4
 8011fe0:	4629      	mov	r1, r5
 8011fe2:	4630      	mov	r0, r6
 8011fe4:	f7ff ff93 	bl	8011f0e <__sfputs_r>
 8011fe8:	3001      	adds	r0, #1
 8011fea:	f000 80aa 	beq.w	8012142 <_vfiprintf_r+0x20e>
 8011fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ff0:	445a      	add	r2, fp
 8011ff2:	9209      	str	r2, [sp, #36]	; 0x24
 8011ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	f000 80a2 	beq.w	8012142 <_vfiprintf_r+0x20e>
 8011ffe:	2300      	movs	r3, #0
 8012000:	f04f 32ff 	mov.w	r2, #4294967295
 8012004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012008:	f10a 0a01 	add.w	sl, sl, #1
 801200c:	9304      	str	r3, [sp, #16]
 801200e:	9307      	str	r3, [sp, #28]
 8012010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012014:	931a      	str	r3, [sp, #104]	; 0x68
 8012016:	4654      	mov	r4, sl
 8012018:	2205      	movs	r2, #5
 801201a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801201e:	4858      	ldr	r0, [pc, #352]	; (8012180 <_vfiprintf_r+0x24c>)
 8012020:	f7ee f966 	bl	80002f0 <memchr>
 8012024:	9a04      	ldr	r2, [sp, #16]
 8012026:	b9d8      	cbnz	r0, 8012060 <_vfiprintf_r+0x12c>
 8012028:	06d1      	lsls	r1, r2, #27
 801202a:	bf44      	itt	mi
 801202c:	2320      	movmi	r3, #32
 801202e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012032:	0713      	lsls	r3, r2, #28
 8012034:	bf44      	itt	mi
 8012036:	232b      	movmi	r3, #43	; 0x2b
 8012038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801203c:	f89a 3000 	ldrb.w	r3, [sl]
 8012040:	2b2a      	cmp	r3, #42	; 0x2a
 8012042:	d015      	beq.n	8012070 <_vfiprintf_r+0x13c>
 8012044:	9a07      	ldr	r2, [sp, #28]
 8012046:	4654      	mov	r4, sl
 8012048:	2000      	movs	r0, #0
 801204a:	f04f 0c0a 	mov.w	ip, #10
 801204e:	4621      	mov	r1, r4
 8012050:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012054:	3b30      	subs	r3, #48	; 0x30
 8012056:	2b09      	cmp	r3, #9
 8012058:	d94e      	bls.n	80120f8 <_vfiprintf_r+0x1c4>
 801205a:	b1b0      	cbz	r0, 801208a <_vfiprintf_r+0x156>
 801205c:	9207      	str	r2, [sp, #28]
 801205e:	e014      	b.n	801208a <_vfiprintf_r+0x156>
 8012060:	eba0 0308 	sub.w	r3, r0, r8
 8012064:	fa09 f303 	lsl.w	r3, r9, r3
 8012068:	4313      	orrs	r3, r2
 801206a:	9304      	str	r3, [sp, #16]
 801206c:	46a2      	mov	sl, r4
 801206e:	e7d2      	b.n	8012016 <_vfiprintf_r+0xe2>
 8012070:	9b03      	ldr	r3, [sp, #12]
 8012072:	1d19      	adds	r1, r3, #4
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	9103      	str	r1, [sp, #12]
 8012078:	2b00      	cmp	r3, #0
 801207a:	bfbb      	ittet	lt
 801207c:	425b      	neglt	r3, r3
 801207e:	f042 0202 	orrlt.w	r2, r2, #2
 8012082:	9307      	strge	r3, [sp, #28]
 8012084:	9307      	strlt	r3, [sp, #28]
 8012086:	bfb8      	it	lt
 8012088:	9204      	strlt	r2, [sp, #16]
 801208a:	7823      	ldrb	r3, [r4, #0]
 801208c:	2b2e      	cmp	r3, #46	; 0x2e
 801208e:	d10c      	bne.n	80120aa <_vfiprintf_r+0x176>
 8012090:	7863      	ldrb	r3, [r4, #1]
 8012092:	2b2a      	cmp	r3, #42	; 0x2a
 8012094:	d135      	bne.n	8012102 <_vfiprintf_r+0x1ce>
 8012096:	9b03      	ldr	r3, [sp, #12]
 8012098:	1d1a      	adds	r2, r3, #4
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	9203      	str	r2, [sp, #12]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	bfb8      	it	lt
 80120a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80120a6:	3402      	adds	r4, #2
 80120a8:	9305      	str	r3, [sp, #20]
 80120aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012190 <_vfiprintf_r+0x25c>
 80120ae:	7821      	ldrb	r1, [r4, #0]
 80120b0:	2203      	movs	r2, #3
 80120b2:	4650      	mov	r0, sl
 80120b4:	f7ee f91c 	bl	80002f0 <memchr>
 80120b8:	b140      	cbz	r0, 80120cc <_vfiprintf_r+0x198>
 80120ba:	2340      	movs	r3, #64	; 0x40
 80120bc:	eba0 000a 	sub.w	r0, r0, sl
 80120c0:	fa03 f000 	lsl.w	r0, r3, r0
 80120c4:	9b04      	ldr	r3, [sp, #16]
 80120c6:	4303      	orrs	r3, r0
 80120c8:	3401      	adds	r4, #1
 80120ca:	9304      	str	r3, [sp, #16]
 80120cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120d0:	482c      	ldr	r0, [pc, #176]	; (8012184 <_vfiprintf_r+0x250>)
 80120d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80120d6:	2206      	movs	r2, #6
 80120d8:	f7ee f90a 	bl	80002f0 <memchr>
 80120dc:	2800      	cmp	r0, #0
 80120de:	d03f      	beq.n	8012160 <_vfiprintf_r+0x22c>
 80120e0:	4b29      	ldr	r3, [pc, #164]	; (8012188 <_vfiprintf_r+0x254>)
 80120e2:	bb1b      	cbnz	r3, 801212c <_vfiprintf_r+0x1f8>
 80120e4:	9b03      	ldr	r3, [sp, #12]
 80120e6:	3307      	adds	r3, #7
 80120e8:	f023 0307 	bic.w	r3, r3, #7
 80120ec:	3308      	adds	r3, #8
 80120ee:	9303      	str	r3, [sp, #12]
 80120f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120f2:	443b      	add	r3, r7
 80120f4:	9309      	str	r3, [sp, #36]	; 0x24
 80120f6:	e767      	b.n	8011fc8 <_vfiprintf_r+0x94>
 80120f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80120fc:	460c      	mov	r4, r1
 80120fe:	2001      	movs	r0, #1
 8012100:	e7a5      	b.n	801204e <_vfiprintf_r+0x11a>
 8012102:	2300      	movs	r3, #0
 8012104:	3401      	adds	r4, #1
 8012106:	9305      	str	r3, [sp, #20]
 8012108:	4619      	mov	r1, r3
 801210a:	f04f 0c0a 	mov.w	ip, #10
 801210e:	4620      	mov	r0, r4
 8012110:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012114:	3a30      	subs	r2, #48	; 0x30
 8012116:	2a09      	cmp	r2, #9
 8012118:	d903      	bls.n	8012122 <_vfiprintf_r+0x1ee>
 801211a:	2b00      	cmp	r3, #0
 801211c:	d0c5      	beq.n	80120aa <_vfiprintf_r+0x176>
 801211e:	9105      	str	r1, [sp, #20]
 8012120:	e7c3      	b.n	80120aa <_vfiprintf_r+0x176>
 8012122:	fb0c 2101 	mla	r1, ip, r1, r2
 8012126:	4604      	mov	r4, r0
 8012128:	2301      	movs	r3, #1
 801212a:	e7f0      	b.n	801210e <_vfiprintf_r+0x1da>
 801212c:	ab03      	add	r3, sp, #12
 801212e:	9300      	str	r3, [sp, #0]
 8012130:	462a      	mov	r2, r5
 8012132:	4b16      	ldr	r3, [pc, #88]	; (801218c <_vfiprintf_r+0x258>)
 8012134:	a904      	add	r1, sp, #16
 8012136:	4630      	mov	r0, r6
 8012138:	f7fe f86e 	bl	8010218 <_printf_float>
 801213c:	4607      	mov	r7, r0
 801213e:	1c78      	adds	r0, r7, #1
 8012140:	d1d6      	bne.n	80120f0 <_vfiprintf_r+0x1bc>
 8012142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012144:	07d9      	lsls	r1, r3, #31
 8012146:	d405      	bmi.n	8012154 <_vfiprintf_r+0x220>
 8012148:	89ab      	ldrh	r3, [r5, #12]
 801214a:	059a      	lsls	r2, r3, #22
 801214c:	d402      	bmi.n	8012154 <_vfiprintf_r+0x220>
 801214e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012150:	f000 faaf 	bl	80126b2 <__retarget_lock_release_recursive>
 8012154:	89ab      	ldrh	r3, [r5, #12]
 8012156:	065b      	lsls	r3, r3, #25
 8012158:	f53f af12 	bmi.w	8011f80 <_vfiprintf_r+0x4c>
 801215c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801215e:	e711      	b.n	8011f84 <_vfiprintf_r+0x50>
 8012160:	ab03      	add	r3, sp, #12
 8012162:	9300      	str	r3, [sp, #0]
 8012164:	462a      	mov	r2, r5
 8012166:	4b09      	ldr	r3, [pc, #36]	; (801218c <_vfiprintf_r+0x258>)
 8012168:	a904      	add	r1, sp, #16
 801216a:	4630      	mov	r0, r6
 801216c:	f7fe fae0 	bl	8010730 <_printf_i>
 8012170:	e7e4      	b.n	801213c <_vfiprintf_r+0x208>
 8012172:	bf00      	nop
 8012174:	080147b4 	.word	0x080147b4
 8012178:	080147d4 	.word	0x080147d4
 801217c:	08014794 	.word	0x08014794
 8012180:	08014682 	.word	0x08014682
 8012184:	0801468c 	.word	0x0801468c
 8012188:	08010219 	.word	0x08010219
 801218c:	08011f0f 	.word	0x08011f0f
 8012190:	08014688 	.word	0x08014688

08012194 <__swbuf_r>:
 8012194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012196:	460e      	mov	r6, r1
 8012198:	4614      	mov	r4, r2
 801219a:	4605      	mov	r5, r0
 801219c:	b118      	cbz	r0, 80121a6 <__swbuf_r+0x12>
 801219e:	6983      	ldr	r3, [r0, #24]
 80121a0:	b90b      	cbnz	r3, 80121a6 <__swbuf_r+0x12>
 80121a2:	f000 f9e7 	bl	8012574 <__sinit>
 80121a6:	4b21      	ldr	r3, [pc, #132]	; (801222c <__swbuf_r+0x98>)
 80121a8:	429c      	cmp	r4, r3
 80121aa:	d12b      	bne.n	8012204 <__swbuf_r+0x70>
 80121ac:	686c      	ldr	r4, [r5, #4]
 80121ae:	69a3      	ldr	r3, [r4, #24]
 80121b0:	60a3      	str	r3, [r4, #8]
 80121b2:	89a3      	ldrh	r3, [r4, #12]
 80121b4:	071a      	lsls	r2, r3, #28
 80121b6:	d52f      	bpl.n	8012218 <__swbuf_r+0x84>
 80121b8:	6923      	ldr	r3, [r4, #16]
 80121ba:	b36b      	cbz	r3, 8012218 <__swbuf_r+0x84>
 80121bc:	6923      	ldr	r3, [r4, #16]
 80121be:	6820      	ldr	r0, [r4, #0]
 80121c0:	1ac0      	subs	r0, r0, r3
 80121c2:	6963      	ldr	r3, [r4, #20]
 80121c4:	b2f6      	uxtb	r6, r6
 80121c6:	4283      	cmp	r3, r0
 80121c8:	4637      	mov	r7, r6
 80121ca:	dc04      	bgt.n	80121d6 <__swbuf_r+0x42>
 80121cc:	4621      	mov	r1, r4
 80121ce:	4628      	mov	r0, r5
 80121d0:	f000 f93c 	bl	801244c <_fflush_r>
 80121d4:	bb30      	cbnz	r0, 8012224 <__swbuf_r+0x90>
 80121d6:	68a3      	ldr	r3, [r4, #8]
 80121d8:	3b01      	subs	r3, #1
 80121da:	60a3      	str	r3, [r4, #8]
 80121dc:	6823      	ldr	r3, [r4, #0]
 80121de:	1c5a      	adds	r2, r3, #1
 80121e0:	6022      	str	r2, [r4, #0]
 80121e2:	701e      	strb	r6, [r3, #0]
 80121e4:	6963      	ldr	r3, [r4, #20]
 80121e6:	3001      	adds	r0, #1
 80121e8:	4283      	cmp	r3, r0
 80121ea:	d004      	beq.n	80121f6 <__swbuf_r+0x62>
 80121ec:	89a3      	ldrh	r3, [r4, #12]
 80121ee:	07db      	lsls	r3, r3, #31
 80121f0:	d506      	bpl.n	8012200 <__swbuf_r+0x6c>
 80121f2:	2e0a      	cmp	r6, #10
 80121f4:	d104      	bne.n	8012200 <__swbuf_r+0x6c>
 80121f6:	4621      	mov	r1, r4
 80121f8:	4628      	mov	r0, r5
 80121fa:	f000 f927 	bl	801244c <_fflush_r>
 80121fe:	b988      	cbnz	r0, 8012224 <__swbuf_r+0x90>
 8012200:	4638      	mov	r0, r7
 8012202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012204:	4b0a      	ldr	r3, [pc, #40]	; (8012230 <__swbuf_r+0x9c>)
 8012206:	429c      	cmp	r4, r3
 8012208:	d101      	bne.n	801220e <__swbuf_r+0x7a>
 801220a:	68ac      	ldr	r4, [r5, #8]
 801220c:	e7cf      	b.n	80121ae <__swbuf_r+0x1a>
 801220e:	4b09      	ldr	r3, [pc, #36]	; (8012234 <__swbuf_r+0xa0>)
 8012210:	429c      	cmp	r4, r3
 8012212:	bf08      	it	eq
 8012214:	68ec      	ldreq	r4, [r5, #12]
 8012216:	e7ca      	b.n	80121ae <__swbuf_r+0x1a>
 8012218:	4621      	mov	r1, r4
 801221a:	4628      	mov	r0, r5
 801221c:	f000 f81a 	bl	8012254 <__swsetup_r>
 8012220:	2800      	cmp	r0, #0
 8012222:	d0cb      	beq.n	80121bc <__swbuf_r+0x28>
 8012224:	f04f 37ff 	mov.w	r7, #4294967295
 8012228:	e7ea      	b.n	8012200 <__swbuf_r+0x6c>
 801222a:	bf00      	nop
 801222c:	080147b4 	.word	0x080147b4
 8012230:	080147d4 	.word	0x080147d4
 8012234:	08014794 	.word	0x08014794

08012238 <__ascii_wctomb>:
 8012238:	b149      	cbz	r1, 801224e <__ascii_wctomb+0x16>
 801223a:	2aff      	cmp	r2, #255	; 0xff
 801223c:	bf85      	ittet	hi
 801223e:	238a      	movhi	r3, #138	; 0x8a
 8012240:	6003      	strhi	r3, [r0, #0]
 8012242:	700a      	strbls	r2, [r1, #0]
 8012244:	f04f 30ff 	movhi.w	r0, #4294967295
 8012248:	bf98      	it	ls
 801224a:	2001      	movls	r0, #1
 801224c:	4770      	bx	lr
 801224e:	4608      	mov	r0, r1
 8012250:	4770      	bx	lr
	...

08012254 <__swsetup_r>:
 8012254:	4b32      	ldr	r3, [pc, #200]	; (8012320 <__swsetup_r+0xcc>)
 8012256:	b570      	push	{r4, r5, r6, lr}
 8012258:	681d      	ldr	r5, [r3, #0]
 801225a:	4606      	mov	r6, r0
 801225c:	460c      	mov	r4, r1
 801225e:	b125      	cbz	r5, 801226a <__swsetup_r+0x16>
 8012260:	69ab      	ldr	r3, [r5, #24]
 8012262:	b913      	cbnz	r3, 801226a <__swsetup_r+0x16>
 8012264:	4628      	mov	r0, r5
 8012266:	f000 f985 	bl	8012574 <__sinit>
 801226a:	4b2e      	ldr	r3, [pc, #184]	; (8012324 <__swsetup_r+0xd0>)
 801226c:	429c      	cmp	r4, r3
 801226e:	d10f      	bne.n	8012290 <__swsetup_r+0x3c>
 8012270:	686c      	ldr	r4, [r5, #4]
 8012272:	89a3      	ldrh	r3, [r4, #12]
 8012274:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012278:	0719      	lsls	r1, r3, #28
 801227a:	d42c      	bmi.n	80122d6 <__swsetup_r+0x82>
 801227c:	06dd      	lsls	r5, r3, #27
 801227e:	d411      	bmi.n	80122a4 <__swsetup_r+0x50>
 8012280:	2309      	movs	r3, #9
 8012282:	6033      	str	r3, [r6, #0]
 8012284:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012288:	81a3      	strh	r3, [r4, #12]
 801228a:	f04f 30ff 	mov.w	r0, #4294967295
 801228e:	e03e      	b.n	801230e <__swsetup_r+0xba>
 8012290:	4b25      	ldr	r3, [pc, #148]	; (8012328 <__swsetup_r+0xd4>)
 8012292:	429c      	cmp	r4, r3
 8012294:	d101      	bne.n	801229a <__swsetup_r+0x46>
 8012296:	68ac      	ldr	r4, [r5, #8]
 8012298:	e7eb      	b.n	8012272 <__swsetup_r+0x1e>
 801229a:	4b24      	ldr	r3, [pc, #144]	; (801232c <__swsetup_r+0xd8>)
 801229c:	429c      	cmp	r4, r3
 801229e:	bf08      	it	eq
 80122a0:	68ec      	ldreq	r4, [r5, #12]
 80122a2:	e7e6      	b.n	8012272 <__swsetup_r+0x1e>
 80122a4:	0758      	lsls	r0, r3, #29
 80122a6:	d512      	bpl.n	80122ce <__swsetup_r+0x7a>
 80122a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122aa:	b141      	cbz	r1, 80122be <__swsetup_r+0x6a>
 80122ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122b0:	4299      	cmp	r1, r3
 80122b2:	d002      	beq.n	80122ba <__swsetup_r+0x66>
 80122b4:	4630      	mov	r0, r6
 80122b6:	f7ff fd0b 	bl	8011cd0 <_free_r>
 80122ba:	2300      	movs	r3, #0
 80122bc:	6363      	str	r3, [r4, #52]	; 0x34
 80122be:	89a3      	ldrh	r3, [r4, #12]
 80122c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80122c4:	81a3      	strh	r3, [r4, #12]
 80122c6:	2300      	movs	r3, #0
 80122c8:	6063      	str	r3, [r4, #4]
 80122ca:	6923      	ldr	r3, [r4, #16]
 80122cc:	6023      	str	r3, [r4, #0]
 80122ce:	89a3      	ldrh	r3, [r4, #12]
 80122d0:	f043 0308 	orr.w	r3, r3, #8
 80122d4:	81a3      	strh	r3, [r4, #12]
 80122d6:	6923      	ldr	r3, [r4, #16]
 80122d8:	b94b      	cbnz	r3, 80122ee <__swsetup_r+0x9a>
 80122da:	89a3      	ldrh	r3, [r4, #12]
 80122dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80122e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80122e4:	d003      	beq.n	80122ee <__swsetup_r+0x9a>
 80122e6:	4621      	mov	r1, r4
 80122e8:	4630      	mov	r0, r6
 80122ea:	f000 fa07 	bl	80126fc <__smakebuf_r>
 80122ee:	89a0      	ldrh	r0, [r4, #12]
 80122f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80122f4:	f010 0301 	ands.w	r3, r0, #1
 80122f8:	d00a      	beq.n	8012310 <__swsetup_r+0xbc>
 80122fa:	2300      	movs	r3, #0
 80122fc:	60a3      	str	r3, [r4, #8]
 80122fe:	6963      	ldr	r3, [r4, #20]
 8012300:	425b      	negs	r3, r3
 8012302:	61a3      	str	r3, [r4, #24]
 8012304:	6923      	ldr	r3, [r4, #16]
 8012306:	b943      	cbnz	r3, 801231a <__swsetup_r+0xc6>
 8012308:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801230c:	d1ba      	bne.n	8012284 <__swsetup_r+0x30>
 801230e:	bd70      	pop	{r4, r5, r6, pc}
 8012310:	0781      	lsls	r1, r0, #30
 8012312:	bf58      	it	pl
 8012314:	6963      	ldrpl	r3, [r4, #20]
 8012316:	60a3      	str	r3, [r4, #8]
 8012318:	e7f4      	b.n	8012304 <__swsetup_r+0xb0>
 801231a:	2000      	movs	r0, #0
 801231c:	e7f7      	b.n	801230e <__swsetup_r+0xba>
 801231e:	bf00      	nop
 8012320:	24000050 	.word	0x24000050
 8012324:	080147b4 	.word	0x080147b4
 8012328:	080147d4 	.word	0x080147d4
 801232c:	08014794 	.word	0x08014794

08012330 <abort>:
 8012330:	b508      	push	{r3, lr}
 8012332:	2006      	movs	r0, #6
 8012334:	f000 fa4a 	bl	80127cc <raise>
 8012338:	2001      	movs	r0, #1
 801233a:	f7f2 f839 	bl	80043b0 <_exit>
	...

08012340 <__sflush_r>:
 8012340:	898a      	ldrh	r2, [r1, #12]
 8012342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012346:	4605      	mov	r5, r0
 8012348:	0710      	lsls	r0, r2, #28
 801234a:	460c      	mov	r4, r1
 801234c:	d458      	bmi.n	8012400 <__sflush_r+0xc0>
 801234e:	684b      	ldr	r3, [r1, #4]
 8012350:	2b00      	cmp	r3, #0
 8012352:	dc05      	bgt.n	8012360 <__sflush_r+0x20>
 8012354:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012356:	2b00      	cmp	r3, #0
 8012358:	dc02      	bgt.n	8012360 <__sflush_r+0x20>
 801235a:	2000      	movs	r0, #0
 801235c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012360:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012362:	2e00      	cmp	r6, #0
 8012364:	d0f9      	beq.n	801235a <__sflush_r+0x1a>
 8012366:	2300      	movs	r3, #0
 8012368:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801236c:	682f      	ldr	r7, [r5, #0]
 801236e:	602b      	str	r3, [r5, #0]
 8012370:	d032      	beq.n	80123d8 <__sflush_r+0x98>
 8012372:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012374:	89a3      	ldrh	r3, [r4, #12]
 8012376:	075a      	lsls	r2, r3, #29
 8012378:	d505      	bpl.n	8012386 <__sflush_r+0x46>
 801237a:	6863      	ldr	r3, [r4, #4]
 801237c:	1ac0      	subs	r0, r0, r3
 801237e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012380:	b10b      	cbz	r3, 8012386 <__sflush_r+0x46>
 8012382:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012384:	1ac0      	subs	r0, r0, r3
 8012386:	2300      	movs	r3, #0
 8012388:	4602      	mov	r2, r0
 801238a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801238c:	6a21      	ldr	r1, [r4, #32]
 801238e:	4628      	mov	r0, r5
 8012390:	47b0      	blx	r6
 8012392:	1c43      	adds	r3, r0, #1
 8012394:	89a3      	ldrh	r3, [r4, #12]
 8012396:	d106      	bne.n	80123a6 <__sflush_r+0x66>
 8012398:	6829      	ldr	r1, [r5, #0]
 801239a:	291d      	cmp	r1, #29
 801239c:	d82c      	bhi.n	80123f8 <__sflush_r+0xb8>
 801239e:	4a2a      	ldr	r2, [pc, #168]	; (8012448 <__sflush_r+0x108>)
 80123a0:	40ca      	lsrs	r2, r1
 80123a2:	07d6      	lsls	r6, r2, #31
 80123a4:	d528      	bpl.n	80123f8 <__sflush_r+0xb8>
 80123a6:	2200      	movs	r2, #0
 80123a8:	6062      	str	r2, [r4, #4]
 80123aa:	04d9      	lsls	r1, r3, #19
 80123ac:	6922      	ldr	r2, [r4, #16]
 80123ae:	6022      	str	r2, [r4, #0]
 80123b0:	d504      	bpl.n	80123bc <__sflush_r+0x7c>
 80123b2:	1c42      	adds	r2, r0, #1
 80123b4:	d101      	bne.n	80123ba <__sflush_r+0x7a>
 80123b6:	682b      	ldr	r3, [r5, #0]
 80123b8:	b903      	cbnz	r3, 80123bc <__sflush_r+0x7c>
 80123ba:	6560      	str	r0, [r4, #84]	; 0x54
 80123bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80123be:	602f      	str	r7, [r5, #0]
 80123c0:	2900      	cmp	r1, #0
 80123c2:	d0ca      	beq.n	801235a <__sflush_r+0x1a>
 80123c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80123c8:	4299      	cmp	r1, r3
 80123ca:	d002      	beq.n	80123d2 <__sflush_r+0x92>
 80123cc:	4628      	mov	r0, r5
 80123ce:	f7ff fc7f 	bl	8011cd0 <_free_r>
 80123d2:	2000      	movs	r0, #0
 80123d4:	6360      	str	r0, [r4, #52]	; 0x34
 80123d6:	e7c1      	b.n	801235c <__sflush_r+0x1c>
 80123d8:	6a21      	ldr	r1, [r4, #32]
 80123da:	2301      	movs	r3, #1
 80123dc:	4628      	mov	r0, r5
 80123de:	47b0      	blx	r6
 80123e0:	1c41      	adds	r1, r0, #1
 80123e2:	d1c7      	bne.n	8012374 <__sflush_r+0x34>
 80123e4:	682b      	ldr	r3, [r5, #0]
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d0c4      	beq.n	8012374 <__sflush_r+0x34>
 80123ea:	2b1d      	cmp	r3, #29
 80123ec:	d001      	beq.n	80123f2 <__sflush_r+0xb2>
 80123ee:	2b16      	cmp	r3, #22
 80123f0:	d101      	bne.n	80123f6 <__sflush_r+0xb6>
 80123f2:	602f      	str	r7, [r5, #0]
 80123f4:	e7b1      	b.n	801235a <__sflush_r+0x1a>
 80123f6:	89a3      	ldrh	r3, [r4, #12]
 80123f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123fc:	81a3      	strh	r3, [r4, #12]
 80123fe:	e7ad      	b.n	801235c <__sflush_r+0x1c>
 8012400:	690f      	ldr	r7, [r1, #16]
 8012402:	2f00      	cmp	r7, #0
 8012404:	d0a9      	beq.n	801235a <__sflush_r+0x1a>
 8012406:	0793      	lsls	r3, r2, #30
 8012408:	680e      	ldr	r6, [r1, #0]
 801240a:	bf08      	it	eq
 801240c:	694b      	ldreq	r3, [r1, #20]
 801240e:	600f      	str	r7, [r1, #0]
 8012410:	bf18      	it	ne
 8012412:	2300      	movne	r3, #0
 8012414:	eba6 0807 	sub.w	r8, r6, r7
 8012418:	608b      	str	r3, [r1, #8]
 801241a:	f1b8 0f00 	cmp.w	r8, #0
 801241e:	dd9c      	ble.n	801235a <__sflush_r+0x1a>
 8012420:	6a21      	ldr	r1, [r4, #32]
 8012422:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012424:	4643      	mov	r3, r8
 8012426:	463a      	mov	r2, r7
 8012428:	4628      	mov	r0, r5
 801242a:	47b0      	blx	r6
 801242c:	2800      	cmp	r0, #0
 801242e:	dc06      	bgt.n	801243e <__sflush_r+0xfe>
 8012430:	89a3      	ldrh	r3, [r4, #12]
 8012432:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012436:	81a3      	strh	r3, [r4, #12]
 8012438:	f04f 30ff 	mov.w	r0, #4294967295
 801243c:	e78e      	b.n	801235c <__sflush_r+0x1c>
 801243e:	4407      	add	r7, r0
 8012440:	eba8 0800 	sub.w	r8, r8, r0
 8012444:	e7e9      	b.n	801241a <__sflush_r+0xda>
 8012446:	bf00      	nop
 8012448:	20400001 	.word	0x20400001

0801244c <_fflush_r>:
 801244c:	b538      	push	{r3, r4, r5, lr}
 801244e:	690b      	ldr	r3, [r1, #16]
 8012450:	4605      	mov	r5, r0
 8012452:	460c      	mov	r4, r1
 8012454:	b913      	cbnz	r3, 801245c <_fflush_r+0x10>
 8012456:	2500      	movs	r5, #0
 8012458:	4628      	mov	r0, r5
 801245a:	bd38      	pop	{r3, r4, r5, pc}
 801245c:	b118      	cbz	r0, 8012466 <_fflush_r+0x1a>
 801245e:	6983      	ldr	r3, [r0, #24]
 8012460:	b90b      	cbnz	r3, 8012466 <_fflush_r+0x1a>
 8012462:	f000 f887 	bl	8012574 <__sinit>
 8012466:	4b14      	ldr	r3, [pc, #80]	; (80124b8 <_fflush_r+0x6c>)
 8012468:	429c      	cmp	r4, r3
 801246a:	d11b      	bne.n	80124a4 <_fflush_r+0x58>
 801246c:	686c      	ldr	r4, [r5, #4]
 801246e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d0ef      	beq.n	8012456 <_fflush_r+0xa>
 8012476:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012478:	07d0      	lsls	r0, r2, #31
 801247a:	d404      	bmi.n	8012486 <_fflush_r+0x3a>
 801247c:	0599      	lsls	r1, r3, #22
 801247e:	d402      	bmi.n	8012486 <_fflush_r+0x3a>
 8012480:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012482:	f000 f915 	bl	80126b0 <__retarget_lock_acquire_recursive>
 8012486:	4628      	mov	r0, r5
 8012488:	4621      	mov	r1, r4
 801248a:	f7ff ff59 	bl	8012340 <__sflush_r>
 801248e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012490:	07da      	lsls	r2, r3, #31
 8012492:	4605      	mov	r5, r0
 8012494:	d4e0      	bmi.n	8012458 <_fflush_r+0xc>
 8012496:	89a3      	ldrh	r3, [r4, #12]
 8012498:	059b      	lsls	r3, r3, #22
 801249a:	d4dd      	bmi.n	8012458 <_fflush_r+0xc>
 801249c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801249e:	f000 f908 	bl	80126b2 <__retarget_lock_release_recursive>
 80124a2:	e7d9      	b.n	8012458 <_fflush_r+0xc>
 80124a4:	4b05      	ldr	r3, [pc, #20]	; (80124bc <_fflush_r+0x70>)
 80124a6:	429c      	cmp	r4, r3
 80124a8:	d101      	bne.n	80124ae <_fflush_r+0x62>
 80124aa:	68ac      	ldr	r4, [r5, #8]
 80124ac:	e7df      	b.n	801246e <_fflush_r+0x22>
 80124ae:	4b04      	ldr	r3, [pc, #16]	; (80124c0 <_fflush_r+0x74>)
 80124b0:	429c      	cmp	r4, r3
 80124b2:	bf08      	it	eq
 80124b4:	68ec      	ldreq	r4, [r5, #12]
 80124b6:	e7da      	b.n	801246e <_fflush_r+0x22>
 80124b8:	080147b4 	.word	0x080147b4
 80124bc:	080147d4 	.word	0x080147d4
 80124c0:	08014794 	.word	0x08014794

080124c4 <std>:
 80124c4:	2300      	movs	r3, #0
 80124c6:	b510      	push	{r4, lr}
 80124c8:	4604      	mov	r4, r0
 80124ca:	e9c0 3300 	strd	r3, r3, [r0]
 80124ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80124d2:	6083      	str	r3, [r0, #8]
 80124d4:	8181      	strh	r1, [r0, #12]
 80124d6:	6643      	str	r3, [r0, #100]	; 0x64
 80124d8:	81c2      	strh	r2, [r0, #14]
 80124da:	6183      	str	r3, [r0, #24]
 80124dc:	4619      	mov	r1, r3
 80124de:	2208      	movs	r2, #8
 80124e0:	305c      	adds	r0, #92	; 0x5c
 80124e2:	f7fd fe01 	bl	80100e8 <memset>
 80124e6:	4b05      	ldr	r3, [pc, #20]	; (80124fc <std+0x38>)
 80124e8:	6263      	str	r3, [r4, #36]	; 0x24
 80124ea:	4b05      	ldr	r3, [pc, #20]	; (8012500 <std+0x3c>)
 80124ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80124ee:	4b05      	ldr	r3, [pc, #20]	; (8012504 <std+0x40>)
 80124f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80124f2:	4b05      	ldr	r3, [pc, #20]	; (8012508 <std+0x44>)
 80124f4:	6224      	str	r4, [r4, #32]
 80124f6:	6323      	str	r3, [r4, #48]	; 0x30
 80124f8:	bd10      	pop	{r4, pc}
 80124fa:	bf00      	nop
 80124fc:	08012805 	.word	0x08012805
 8012500:	08012827 	.word	0x08012827
 8012504:	0801285f 	.word	0x0801285f
 8012508:	08012883 	.word	0x08012883

0801250c <_cleanup_r>:
 801250c:	4901      	ldr	r1, [pc, #4]	; (8012514 <_cleanup_r+0x8>)
 801250e:	f000 b8af 	b.w	8012670 <_fwalk_reent>
 8012512:	bf00      	nop
 8012514:	0801244d 	.word	0x0801244d

08012518 <__sfmoreglue>:
 8012518:	b570      	push	{r4, r5, r6, lr}
 801251a:	1e4a      	subs	r2, r1, #1
 801251c:	2568      	movs	r5, #104	; 0x68
 801251e:	4355      	muls	r5, r2
 8012520:	460e      	mov	r6, r1
 8012522:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012526:	f7ff fc23 	bl	8011d70 <_malloc_r>
 801252a:	4604      	mov	r4, r0
 801252c:	b140      	cbz	r0, 8012540 <__sfmoreglue+0x28>
 801252e:	2100      	movs	r1, #0
 8012530:	e9c0 1600 	strd	r1, r6, [r0]
 8012534:	300c      	adds	r0, #12
 8012536:	60a0      	str	r0, [r4, #8]
 8012538:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801253c:	f7fd fdd4 	bl	80100e8 <memset>
 8012540:	4620      	mov	r0, r4
 8012542:	bd70      	pop	{r4, r5, r6, pc}

08012544 <__sfp_lock_acquire>:
 8012544:	4801      	ldr	r0, [pc, #4]	; (801254c <__sfp_lock_acquire+0x8>)
 8012546:	f000 b8b3 	b.w	80126b0 <__retarget_lock_acquire_recursive>
 801254a:	bf00      	nop
 801254c:	24001010 	.word	0x24001010

08012550 <__sfp_lock_release>:
 8012550:	4801      	ldr	r0, [pc, #4]	; (8012558 <__sfp_lock_release+0x8>)
 8012552:	f000 b8ae 	b.w	80126b2 <__retarget_lock_release_recursive>
 8012556:	bf00      	nop
 8012558:	24001010 	.word	0x24001010

0801255c <__sinit_lock_acquire>:
 801255c:	4801      	ldr	r0, [pc, #4]	; (8012564 <__sinit_lock_acquire+0x8>)
 801255e:	f000 b8a7 	b.w	80126b0 <__retarget_lock_acquire_recursive>
 8012562:	bf00      	nop
 8012564:	2400100b 	.word	0x2400100b

08012568 <__sinit_lock_release>:
 8012568:	4801      	ldr	r0, [pc, #4]	; (8012570 <__sinit_lock_release+0x8>)
 801256a:	f000 b8a2 	b.w	80126b2 <__retarget_lock_release_recursive>
 801256e:	bf00      	nop
 8012570:	2400100b 	.word	0x2400100b

08012574 <__sinit>:
 8012574:	b510      	push	{r4, lr}
 8012576:	4604      	mov	r4, r0
 8012578:	f7ff fff0 	bl	801255c <__sinit_lock_acquire>
 801257c:	69a3      	ldr	r3, [r4, #24]
 801257e:	b11b      	cbz	r3, 8012588 <__sinit+0x14>
 8012580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012584:	f7ff bff0 	b.w	8012568 <__sinit_lock_release>
 8012588:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801258c:	6523      	str	r3, [r4, #80]	; 0x50
 801258e:	4b13      	ldr	r3, [pc, #76]	; (80125dc <__sinit+0x68>)
 8012590:	4a13      	ldr	r2, [pc, #76]	; (80125e0 <__sinit+0x6c>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	62a2      	str	r2, [r4, #40]	; 0x28
 8012596:	42a3      	cmp	r3, r4
 8012598:	bf04      	itt	eq
 801259a:	2301      	moveq	r3, #1
 801259c:	61a3      	streq	r3, [r4, #24]
 801259e:	4620      	mov	r0, r4
 80125a0:	f000 f820 	bl	80125e4 <__sfp>
 80125a4:	6060      	str	r0, [r4, #4]
 80125a6:	4620      	mov	r0, r4
 80125a8:	f000 f81c 	bl	80125e4 <__sfp>
 80125ac:	60a0      	str	r0, [r4, #8]
 80125ae:	4620      	mov	r0, r4
 80125b0:	f000 f818 	bl	80125e4 <__sfp>
 80125b4:	2200      	movs	r2, #0
 80125b6:	60e0      	str	r0, [r4, #12]
 80125b8:	2104      	movs	r1, #4
 80125ba:	6860      	ldr	r0, [r4, #4]
 80125bc:	f7ff ff82 	bl	80124c4 <std>
 80125c0:	68a0      	ldr	r0, [r4, #8]
 80125c2:	2201      	movs	r2, #1
 80125c4:	2109      	movs	r1, #9
 80125c6:	f7ff ff7d 	bl	80124c4 <std>
 80125ca:	68e0      	ldr	r0, [r4, #12]
 80125cc:	2202      	movs	r2, #2
 80125ce:	2112      	movs	r1, #18
 80125d0:	f7ff ff78 	bl	80124c4 <std>
 80125d4:	2301      	movs	r3, #1
 80125d6:	61a3      	str	r3, [r4, #24]
 80125d8:	e7d2      	b.n	8012580 <__sinit+0xc>
 80125da:	bf00      	nop
 80125dc:	08014410 	.word	0x08014410
 80125e0:	0801250d 	.word	0x0801250d

080125e4 <__sfp>:
 80125e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125e6:	4607      	mov	r7, r0
 80125e8:	f7ff ffac 	bl	8012544 <__sfp_lock_acquire>
 80125ec:	4b1e      	ldr	r3, [pc, #120]	; (8012668 <__sfp+0x84>)
 80125ee:	681e      	ldr	r6, [r3, #0]
 80125f0:	69b3      	ldr	r3, [r6, #24]
 80125f2:	b913      	cbnz	r3, 80125fa <__sfp+0x16>
 80125f4:	4630      	mov	r0, r6
 80125f6:	f7ff ffbd 	bl	8012574 <__sinit>
 80125fa:	3648      	adds	r6, #72	; 0x48
 80125fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012600:	3b01      	subs	r3, #1
 8012602:	d503      	bpl.n	801260c <__sfp+0x28>
 8012604:	6833      	ldr	r3, [r6, #0]
 8012606:	b30b      	cbz	r3, 801264c <__sfp+0x68>
 8012608:	6836      	ldr	r6, [r6, #0]
 801260a:	e7f7      	b.n	80125fc <__sfp+0x18>
 801260c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012610:	b9d5      	cbnz	r5, 8012648 <__sfp+0x64>
 8012612:	4b16      	ldr	r3, [pc, #88]	; (801266c <__sfp+0x88>)
 8012614:	60e3      	str	r3, [r4, #12]
 8012616:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801261a:	6665      	str	r5, [r4, #100]	; 0x64
 801261c:	f000 f847 	bl	80126ae <__retarget_lock_init_recursive>
 8012620:	f7ff ff96 	bl	8012550 <__sfp_lock_release>
 8012624:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8012628:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801262c:	6025      	str	r5, [r4, #0]
 801262e:	61a5      	str	r5, [r4, #24]
 8012630:	2208      	movs	r2, #8
 8012632:	4629      	mov	r1, r5
 8012634:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012638:	f7fd fd56 	bl	80100e8 <memset>
 801263c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012640:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012644:	4620      	mov	r0, r4
 8012646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012648:	3468      	adds	r4, #104	; 0x68
 801264a:	e7d9      	b.n	8012600 <__sfp+0x1c>
 801264c:	2104      	movs	r1, #4
 801264e:	4638      	mov	r0, r7
 8012650:	f7ff ff62 	bl	8012518 <__sfmoreglue>
 8012654:	4604      	mov	r4, r0
 8012656:	6030      	str	r0, [r6, #0]
 8012658:	2800      	cmp	r0, #0
 801265a:	d1d5      	bne.n	8012608 <__sfp+0x24>
 801265c:	f7ff ff78 	bl	8012550 <__sfp_lock_release>
 8012660:	230c      	movs	r3, #12
 8012662:	603b      	str	r3, [r7, #0]
 8012664:	e7ee      	b.n	8012644 <__sfp+0x60>
 8012666:	bf00      	nop
 8012668:	08014410 	.word	0x08014410
 801266c:	ffff0001 	.word	0xffff0001

08012670 <_fwalk_reent>:
 8012670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012674:	4606      	mov	r6, r0
 8012676:	4688      	mov	r8, r1
 8012678:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801267c:	2700      	movs	r7, #0
 801267e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012682:	f1b9 0901 	subs.w	r9, r9, #1
 8012686:	d505      	bpl.n	8012694 <_fwalk_reent+0x24>
 8012688:	6824      	ldr	r4, [r4, #0]
 801268a:	2c00      	cmp	r4, #0
 801268c:	d1f7      	bne.n	801267e <_fwalk_reent+0xe>
 801268e:	4638      	mov	r0, r7
 8012690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012694:	89ab      	ldrh	r3, [r5, #12]
 8012696:	2b01      	cmp	r3, #1
 8012698:	d907      	bls.n	80126aa <_fwalk_reent+0x3a>
 801269a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801269e:	3301      	adds	r3, #1
 80126a0:	d003      	beq.n	80126aa <_fwalk_reent+0x3a>
 80126a2:	4629      	mov	r1, r5
 80126a4:	4630      	mov	r0, r6
 80126a6:	47c0      	blx	r8
 80126a8:	4307      	orrs	r7, r0
 80126aa:	3568      	adds	r5, #104	; 0x68
 80126ac:	e7e9      	b.n	8012682 <_fwalk_reent+0x12>

080126ae <__retarget_lock_init_recursive>:
 80126ae:	4770      	bx	lr

080126b0 <__retarget_lock_acquire_recursive>:
 80126b0:	4770      	bx	lr

080126b2 <__retarget_lock_release_recursive>:
 80126b2:	4770      	bx	lr

080126b4 <__swhatbuf_r>:
 80126b4:	b570      	push	{r4, r5, r6, lr}
 80126b6:	460e      	mov	r6, r1
 80126b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126bc:	2900      	cmp	r1, #0
 80126be:	b096      	sub	sp, #88	; 0x58
 80126c0:	4614      	mov	r4, r2
 80126c2:	461d      	mov	r5, r3
 80126c4:	da07      	bge.n	80126d6 <__swhatbuf_r+0x22>
 80126c6:	2300      	movs	r3, #0
 80126c8:	602b      	str	r3, [r5, #0]
 80126ca:	89b3      	ldrh	r3, [r6, #12]
 80126cc:	061a      	lsls	r2, r3, #24
 80126ce:	d410      	bmi.n	80126f2 <__swhatbuf_r+0x3e>
 80126d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80126d4:	e00e      	b.n	80126f4 <__swhatbuf_r+0x40>
 80126d6:	466a      	mov	r2, sp
 80126d8:	f000 f8fa 	bl	80128d0 <_fstat_r>
 80126dc:	2800      	cmp	r0, #0
 80126de:	dbf2      	blt.n	80126c6 <__swhatbuf_r+0x12>
 80126e0:	9a01      	ldr	r2, [sp, #4]
 80126e2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80126e6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80126ea:	425a      	negs	r2, r3
 80126ec:	415a      	adcs	r2, r3
 80126ee:	602a      	str	r2, [r5, #0]
 80126f0:	e7ee      	b.n	80126d0 <__swhatbuf_r+0x1c>
 80126f2:	2340      	movs	r3, #64	; 0x40
 80126f4:	2000      	movs	r0, #0
 80126f6:	6023      	str	r3, [r4, #0]
 80126f8:	b016      	add	sp, #88	; 0x58
 80126fa:	bd70      	pop	{r4, r5, r6, pc}

080126fc <__smakebuf_r>:
 80126fc:	898b      	ldrh	r3, [r1, #12]
 80126fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012700:	079d      	lsls	r5, r3, #30
 8012702:	4606      	mov	r6, r0
 8012704:	460c      	mov	r4, r1
 8012706:	d507      	bpl.n	8012718 <__smakebuf_r+0x1c>
 8012708:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801270c:	6023      	str	r3, [r4, #0]
 801270e:	6123      	str	r3, [r4, #16]
 8012710:	2301      	movs	r3, #1
 8012712:	6163      	str	r3, [r4, #20]
 8012714:	b002      	add	sp, #8
 8012716:	bd70      	pop	{r4, r5, r6, pc}
 8012718:	ab01      	add	r3, sp, #4
 801271a:	466a      	mov	r2, sp
 801271c:	f7ff ffca 	bl	80126b4 <__swhatbuf_r>
 8012720:	9900      	ldr	r1, [sp, #0]
 8012722:	4605      	mov	r5, r0
 8012724:	4630      	mov	r0, r6
 8012726:	f7ff fb23 	bl	8011d70 <_malloc_r>
 801272a:	b948      	cbnz	r0, 8012740 <__smakebuf_r+0x44>
 801272c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012730:	059a      	lsls	r2, r3, #22
 8012732:	d4ef      	bmi.n	8012714 <__smakebuf_r+0x18>
 8012734:	f023 0303 	bic.w	r3, r3, #3
 8012738:	f043 0302 	orr.w	r3, r3, #2
 801273c:	81a3      	strh	r3, [r4, #12]
 801273e:	e7e3      	b.n	8012708 <__smakebuf_r+0xc>
 8012740:	4b0d      	ldr	r3, [pc, #52]	; (8012778 <__smakebuf_r+0x7c>)
 8012742:	62b3      	str	r3, [r6, #40]	; 0x28
 8012744:	89a3      	ldrh	r3, [r4, #12]
 8012746:	6020      	str	r0, [r4, #0]
 8012748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801274c:	81a3      	strh	r3, [r4, #12]
 801274e:	9b00      	ldr	r3, [sp, #0]
 8012750:	6163      	str	r3, [r4, #20]
 8012752:	9b01      	ldr	r3, [sp, #4]
 8012754:	6120      	str	r0, [r4, #16]
 8012756:	b15b      	cbz	r3, 8012770 <__smakebuf_r+0x74>
 8012758:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801275c:	4630      	mov	r0, r6
 801275e:	f000 f8c9 	bl	80128f4 <_isatty_r>
 8012762:	b128      	cbz	r0, 8012770 <__smakebuf_r+0x74>
 8012764:	89a3      	ldrh	r3, [r4, #12]
 8012766:	f023 0303 	bic.w	r3, r3, #3
 801276a:	f043 0301 	orr.w	r3, r3, #1
 801276e:	81a3      	strh	r3, [r4, #12]
 8012770:	89a0      	ldrh	r0, [r4, #12]
 8012772:	4305      	orrs	r5, r0
 8012774:	81a5      	strh	r5, [r4, #12]
 8012776:	e7cd      	b.n	8012714 <__smakebuf_r+0x18>
 8012778:	0801250d 	.word	0x0801250d

0801277c <_raise_r>:
 801277c:	291f      	cmp	r1, #31
 801277e:	b538      	push	{r3, r4, r5, lr}
 8012780:	4604      	mov	r4, r0
 8012782:	460d      	mov	r5, r1
 8012784:	d904      	bls.n	8012790 <_raise_r+0x14>
 8012786:	2316      	movs	r3, #22
 8012788:	6003      	str	r3, [r0, #0]
 801278a:	f04f 30ff 	mov.w	r0, #4294967295
 801278e:	bd38      	pop	{r3, r4, r5, pc}
 8012790:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012792:	b112      	cbz	r2, 801279a <_raise_r+0x1e>
 8012794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012798:	b94b      	cbnz	r3, 80127ae <_raise_r+0x32>
 801279a:	4620      	mov	r0, r4
 801279c:	f000 f830 	bl	8012800 <_getpid_r>
 80127a0:	462a      	mov	r2, r5
 80127a2:	4601      	mov	r1, r0
 80127a4:	4620      	mov	r0, r4
 80127a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127aa:	f000 b817 	b.w	80127dc <_kill_r>
 80127ae:	2b01      	cmp	r3, #1
 80127b0:	d00a      	beq.n	80127c8 <_raise_r+0x4c>
 80127b2:	1c59      	adds	r1, r3, #1
 80127b4:	d103      	bne.n	80127be <_raise_r+0x42>
 80127b6:	2316      	movs	r3, #22
 80127b8:	6003      	str	r3, [r0, #0]
 80127ba:	2001      	movs	r0, #1
 80127bc:	e7e7      	b.n	801278e <_raise_r+0x12>
 80127be:	2400      	movs	r4, #0
 80127c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80127c4:	4628      	mov	r0, r5
 80127c6:	4798      	blx	r3
 80127c8:	2000      	movs	r0, #0
 80127ca:	e7e0      	b.n	801278e <_raise_r+0x12>

080127cc <raise>:
 80127cc:	4b02      	ldr	r3, [pc, #8]	; (80127d8 <raise+0xc>)
 80127ce:	4601      	mov	r1, r0
 80127d0:	6818      	ldr	r0, [r3, #0]
 80127d2:	f7ff bfd3 	b.w	801277c <_raise_r>
 80127d6:	bf00      	nop
 80127d8:	24000050 	.word	0x24000050

080127dc <_kill_r>:
 80127dc:	b538      	push	{r3, r4, r5, lr}
 80127de:	4d07      	ldr	r5, [pc, #28]	; (80127fc <_kill_r+0x20>)
 80127e0:	2300      	movs	r3, #0
 80127e2:	4604      	mov	r4, r0
 80127e4:	4608      	mov	r0, r1
 80127e6:	4611      	mov	r1, r2
 80127e8:	602b      	str	r3, [r5, #0]
 80127ea:	f7f1 fdd1 	bl	8004390 <_kill>
 80127ee:	1c43      	adds	r3, r0, #1
 80127f0:	d102      	bne.n	80127f8 <_kill_r+0x1c>
 80127f2:	682b      	ldr	r3, [r5, #0]
 80127f4:	b103      	cbz	r3, 80127f8 <_kill_r+0x1c>
 80127f6:	6023      	str	r3, [r4, #0]
 80127f8:	bd38      	pop	{r3, r4, r5, pc}
 80127fa:	bf00      	nop
 80127fc:	24001004 	.word	0x24001004

08012800 <_getpid_r>:
 8012800:	f7f1 bdbe 	b.w	8004380 <_getpid>

08012804 <__sread>:
 8012804:	b510      	push	{r4, lr}
 8012806:	460c      	mov	r4, r1
 8012808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801280c:	f000 f894 	bl	8012938 <_read_r>
 8012810:	2800      	cmp	r0, #0
 8012812:	bfab      	itete	ge
 8012814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012816:	89a3      	ldrhlt	r3, [r4, #12]
 8012818:	181b      	addge	r3, r3, r0
 801281a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801281e:	bfac      	ite	ge
 8012820:	6563      	strge	r3, [r4, #84]	; 0x54
 8012822:	81a3      	strhlt	r3, [r4, #12]
 8012824:	bd10      	pop	{r4, pc}

08012826 <__swrite>:
 8012826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801282a:	461f      	mov	r7, r3
 801282c:	898b      	ldrh	r3, [r1, #12]
 801282e:	05db      	lsls	r3, r3, #23
 8012830:	4605      	mov	r5, r0
 8012832:	460c      	mov	r4, r1
 8012834:	4616      	mov	r6, r2
 8012836:	d505      	bpl.n	8012844 <__swrite+0x1e>
 8012838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801283c:	2302      	movs	r3, #2
 801283e:	2200      	movs	r2, #0
 8012840:	f000 f868 	bl	8012914 <_lseek_r>
 8012844:	89a3      	ldrh	r3, [r4, #12]
 8012846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801284a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801284e:	81a3      	strh	r3, [r4, #12]
 8012850:	4632      	mov	r2, r6
 8012852:	463b      	mov	r3, r7
 8012854:	4628      	mov	r0, r5
 8012856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801285a:	f000 b817 	b.w	801288c <_write_r>

0801285e <__sseek>:
 801285e:	b510      	push	{r4, lr}
 8012860:	460c      	mov	r4, r1
 8012862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012866:	f000 f855 	bl	8012914 <_lseek_r>
 801286a:	1c43      	adds	r3, r0, #1
 801286c:	89a3      	ldrh	r3, [r4, #12]
 801286e:	bf15      	itete	ne
 8012870:	6560      	strne	r0, [r4, #84]	; 0x54
 8012872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801287a:	81a3      	strheq	r3, [r4, #12]
 801287c:	bf18      	it	ne
 801287e:	81a3      	strhne	r3, [r4, #12]
 8012880:	bd10      	pop	{r4, pc}

08012882 <__sclose>:
 8012882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012886:	f000 b813 	b.w	80128b0 <_close_r>
	...

0801288c <_write_r>:
 801288c:	b538      	push	{r3, r4, r5, lr}
 801288e:	4d07      	ldr	r5, [pc, #28]	; (80128ac <_write_r+0x20>)
 8012890:	4604      	mov	r4, r0
 8012892:	4608      	mov	r0, r1
 8012894:	4611      	mov	r1, r2
 8012896:	2200      	movs	r2, #0
 8012898:	602a      	str	r2, [r5, #0]
 801289a:	461a      	mov	r2, r3
 801289c:	f7f1 fdaf 	bl	80043fe <_write>
 80128a0:	1c43      	adds	r3, r0, #1
 80128a2:	d102      	bne.n	80128aa <_write_r+0x1e>
 80128a4:	682b      	ldr	r3, [r5, #0]
 80128a6:	b103      	cbz	r3, 80128aa <_write_r+0x1e>
 80128a8:	6023      	str	r3, [r4, #0]
 80128aa:	bd38      	pop	{r3, r4, r5, pc}
 80128ac:	24001004 	.word	0x24001004

080128b0 <_close_r>:
 80128b0:	b538      	push	{r3, r4, r5, lr}
 80128b2:	4d06      	ldr	r5, [pc, #24]	; (80128cc <_close_r+0x1c>)
 80128b4:	2300      	movs	r3, #0
 80128b6:	4604      	mov	r4, r0
 80128b8:	4608      	mov	r0, r1
 80128ba:	602b      	str	r3, [r5, #0]
 80128bc:	f7f1 fdbb 	bl	8004436 <_close>
 80128c0:	1c43      	adds	r3, r0, #1
 80128c2:	d102      	bne.n	80128ca <_close_r+0x1a>
 80128c4:	682b      	ldr	r3, [r5, #0]
 80128c6:	b103      	cbz	r3, 80128ca <_close_r+0x1a>
 80128c8:	6023      	str	r3, [r4, #0]
 80128ca:	bd38      	pop	{r3, r4, r5, pc}
 80128cc:	24001004 	.word	0x24001004

080128d0 <_fstat_r>:
 80128d0:	b538      	push	{r3, r4, r5, lr}
 80128d2:	4d07      	ldr	r5, [pc, #28]	; (80128f0 <_fstat_r+0x20>)
 80128d4:	2300      	movs	r3, #0
 80128d6:	4604      	mov	r4, r0
 80128d8:	4608      	mov	r0, r1
 80128da:	4611      	mov	r1, r2
 80128dc:	602b      	str	r3, [r5, #0]
 80128de:	f7f1 fdb6 	bl	800444e <_fstat>
 80128e2:	1c43      	adds	r3, r0, #1
 80128e4:	d102      	bne.n	80128ec <_fstat_r+0x1c>
 80128e6:	682b      	ldr	r3, [r5, #0]
 80128e8:	b103      	cbz	r3, 80128ec <_fstat_r+0x1c>
 80128ea:	6023      	str	r3, [r4, #0]
 80128ec:	bd38      	pop	{r3, r4, r5, pc}
 80128ee:	bf00      	nop
 80128f0:	24001004 	.word	0x24001004

080128f4 <_isatty_r>:
 80128f4:	b538      	push	{r3, r4, r5, lr}
 80128f6:	4d06      	ldr	r5, [pc, #24]	; (8012910 <_isatty_r+0x1c>)
 80128f8:	2300      	movs	r3, #0
 80128fa:	4604      	mov	r4, r0
 80128fc:	4608      	mov	r0, r1
 80128fe:	602b      	str	r3, [r5, #0]
 8012900:	f7f1 fdb5 	bl	800446e <_isatty>
 8012904:	1c43      	adds	r3, r0, #1
 8012906:	d102      	bne.n	801290e <_isatty_r+0x1a>
 8012908:	682b      	ldr	r3, [r5, #0]
 801290a:	b103      	cbz	r3, 801290e <_isatty_r+0x1a>
 801290c:	6023      	str	r3, [r4, #0]
 801290e:	bd38      	pop	{r3, r4, r5, pc}
 8012910:	24001004 	.word	0x24001004

08012914 <_lseek_r>:
 8012914:	b538      	push	{r3, r4, r5, lr}
 8012916:	4d07      	ldr	r5, [pc, #28]	; (8012934 <_lseek_r+0x20>)
 8012918:	4604      	mov	r4, r0
 801291a:	4608      	mov	r0, r1
 801291c:	4611      	mov	r1, r2
 801291e:	2200      	movs	r2, #0
 8012920:	602a      	str	r2, [r5, #0]
 8012922:	461a      	mov	r2, r3
 8012924:	f7f1 fdae 	bl	8004484 <_lseek>
 8012928:	1c43      	adds	r3, r0, #1
 801292a:	d102      	bne.n	8012932 <_lseek_r+0x1e>
 801292c:	682b      	ldr	r3, [r5, #0]
 801292e:	b103      	cbz	r3, 8012932 <_lseek_r+0x1e>
 8012930:	6023      	str	r3, [r4, #0]
 8012932:	bd38      	pop	{r3, r4, r5, pc}
 8012934:	24001004 	.word	0x24001004

08012938 <_read_r>:
 8012938:	b538      	push	{r3, r4, r5, lr}
 801293a:	4d07      	ldr	r5, [pc, #28]	; (8012958 <_read_r+0x20>)
 801293c:	4604      	mov	r4, r0
 801293e:	4608      	mov	r0, r1
 8012940:	4611      	mov	r1, r2
 8012942:	2200      	movs	r2, #0
 8012944:	602a      	str	r2, [r5, #0]
 8012946:	461a      	mov	r2, r3
 8012948:	f7f1 fd3c 	bl	80043c4 <_read>
 801294c:	1c43      	adds	r3, r0, #1
 801294e:	d102      	bne.n	8012956 <_read_r+0x1e>
 8012950:	682b      	ldr	r3, [r5, #0]
 8012952:	b103      	cbz	r3, 8012956 <_read_r+0x1e>
 8012954:	6023      	str	r3, [r4, #0]
 8012956:	bd38      	pop	{r3, r4, r5, pc}
 8012958:	24001004 	.word	0x24001004

0801295c <_init>:
 801295c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801295e:	bf00      	nop
 8012960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012962:	bc08      	pop	{r3}
 8012964:	469e      	mov	lr, r3
 8012966:	4770      	bx	lr

08012968 <_fini>:
 8012968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801296a:	bf00      	nop
 801296c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801296e:	bc08      	pop	{r3}
 8012970:	469e      	mov	lr, r3
 8012972:	4770      	bx	lr
