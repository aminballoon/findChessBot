
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e788  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800ea28  0800ea28  0001ea28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ee4c  0800ee4c  0001ee4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800ee54  0800ee54  0001ee54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0800ee5c  0800ee5c  0001ee5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800ee64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000788  240001e0  0800f044  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000968  0800f044  00020968  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fae4  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004475  00000000  00000000  0004fcf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014e8  00000000  00000000  00054168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013b0  00000000  00000000  00055650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cab9  00000000  00000000  00056a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001d76c  00000000  00000000  000934b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cf7a  00000000  00000000  000b0c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021db9f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006644  00000000  00000000  0021dbf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ea10 	.word	0x0800ea10

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800ea10 	.word	0x0800ea10

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address){
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21(){
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read(){
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f103 010a 	add.w	r1, r3, #10
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	f009 fd70 	bl	800a1c0 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 010c 	add.w	r1, r3, #12
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2202      	movs	r2, #2
 80006ee:	f009 fdfd 	bl	800a2ec <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	741a      	strb	r2, [r3, #16]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	0bdb      	lsrs	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	745a      	strb	r2, [r3, #17]
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN5AMT2117AMT21_Check_ValueEv>:

HAL_StatusTypeDef AMT21::AMT21_Check_Value(){
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t position_temp = this->uart_buf & 0x3FFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000734:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d820      	bhi.n	800079c <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	109b      	asrs	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4053      	eors	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b25a      	sxtb	r2, r3
 800078a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800078e:	4053      	eors	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	3301      	adds	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
 800079a:	e7db      	b.n	8000754 <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7c1b      	ldrb	r3, [r3, #16]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d109      	bne.n	80007d6 <_ZN5AMT2117AMT21_Check_ValueEv+0xb2>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7c5b      	ldrb	r3, [r3, #17]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d104      	bne.n	80007d6 <_ZN5AMT2117AMT21_Check_ValueEv+0xb2>
		this->position = position_temp;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	897a      	ldrh	r2, [r7, #10]
 80007d0:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007d2:	2300      	movs	r3, #0
 80007d4:	e003      	b.n	80007de <_ZN5AMT2117AMT21_Check_ValueEv+0xba>
	} else {
		this->position = 0;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007dc:	2301      	movs	r3, #1
	}
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3714      	adds	r7, #20
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <_ZN5AMT2111getPositionEv>:

uint16_t AMT21::getPosition()
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
	return this->position;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	89db      	ldrh	r3, [r3, #14]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	370c      	adds	r7, #12
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr

08000802 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000802:	b480      	push	{r7}
 8000804:	b083      	sub	sp, #12
 8000806:	af00      	add	r7, sp, #0
 8000808:	ed87 0a01 	vstr	s0, [r7, #4]
 800080c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000810:	eef0 7ae7 	vabs.f32	s15, s15
 8000814:	eeb0 0a67 	vmov.f32	s0, s15
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	ed87 0a01 	vstr	s0, [r7, #4]
 800082c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000830:	fef8 7a67 	vrinta.f32	s15, s15
 8000834:	eeb0 0a67 	vmov.f32	s0, s15
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
	...

08000844 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
 8000850:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8000856:	615a      	str	r2, [r3, #20]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 800085c:	619a      	str	r2, [r3, #24]
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000864:	61da      	str	r2, [r3, #28]
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 800086a:	621a      	str	r2, [r3, #32]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000872:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	687a      	ldr	r2, [r7, #4]
 800087e:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	22c7      	movs	r2, #199	; 0xc7
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 20.0f;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 800088e:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000894:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 8000896:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80008c4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f000 f830 	bl	8000900 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	683a      	ldr	r2, [r7, #0]
 80008a4:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	69ba      	ldr	r2, [r7, #24]
 80008aa:	60da      	str	r2, [r3, #12]
}
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4618      	mov	r0, r3
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	41a00000 	.word	0x41a00000
 80008bc:	469c4000 	.word	0x469c4000
 80008c0:	43480000 	.word	0x43480000
 80008c4:	00000000 	.word	0x00000000

080008c8 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
}
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 80008de:	b580      	push	{r7, lr}
 80008e0:	b082      	sub	sp, #8
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	4619      	mov	r1, r3
 80008f0:	4610      	mov	r0, r2
 80008f2:	f008 fa55 	bl	8008da0 <HAL_TIM_PWM_Start>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8000900:	b580      	push	{r7, lr}
 8000902:	ed2d 8b02 	vpush	{d8}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	edd3 7a04 	vldr	s15, [r3, #16]
 800091c:	eeb0 0a67 	vmov.f32	s0, s15
 8000920:	f7ff ff6f 	bl	8000802 <_ZSt4fabsf>
 8000924:	eeb0 7a40 	vmov.f32	s14, s0
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	edd3 7a05 	vldr	s15, [r3, #20]
 800092e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000936:	bf94      	ite	ls
 8000938:	2301      	movls	r3, #1
 800093a:	2300      	movhi	r3, #0
 800093c:	b2db      	uxtb	r3, r3
 800093e:	2b00      	cmp	r3, #0
 8000940:	d003      	beq.n	800094a <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	695b      	ldr	r3, [r3, #20]
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	e01b      	b.n	8000982 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000950:	eeb0 0a67 	vmov.f32	s0, s15
 8000954:	f7ff ff55 	bl	8000802 <_ZSt4fabsf>
 8000958:	eeb0 7a40 	vmov.f32	s14, s0
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800096a:	bfac      	ite	ge
 800096c:	2301      	movge	r3, #1
 800096e:	2300      	movlt	r3, #0
 8000970:	b2db      	uxtb	r3, r3
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	e001      	b.n	8000982 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	60fb      	str	r3, [r7, #12]

	if (this->frequency > 0.001f && this->frequency != 0.0f) {
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	edd3 7a04 	vldr	s15, [r3, #16]
 8000988:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8000c48 <_ZN7Stepper19StepperSetFrequencyEf+0x348>
 800098c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000994:	f340 80e4 	ble.w	8000b60 <_ZN7Stepper19StepperSetFrequencyEf+0x260>
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	edd3 7a04 	vldr	s15, [r3, #16]
 800099e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80009a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009a6:	f000 80db 	beq.w	8000b60 <_ZN7Stepper19StepperSetFrequencyEf+0x260>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	6898      	ldr	r0, [r3, #8]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	2201      	movs	r2, #1
 80009b6:	4619      	mov	r1, r3
 80009b8:	f005 fc76 	bl	80062a8 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * f)) - 1U);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c4:	3301      	adds	r3, #1
 80009c6:	ee07 3a90 	vmov	s15, r3
 80009ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80009d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009d6:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8000c4c <_ZN7Stepper19StepperSetFrequencyEf+0x34c>
 80009da:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 80009de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009e6:	eeb0 0a67 	vmov.f32	s0, s15
 80009ea:	f7ff ff1a 	bl	8000822 <_ZSt5roundf>
 80009ee:	eef0 7a40 	vmov.f32	s15, s0
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009fc:	ee17 2a90 	vmov	r2, s15
 8000a00:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d113      	bne.n	8000a32 <_ZN7Stepper19StepperSetFrequencyEf+0x132>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a12:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 fa33 	bl	8000e82 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a1c:	eeb0 7b40 	vmov.f64	d7, d0
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a2a:	ee17 2a90 	vmov	r2, s15
 8000a2e:	635a      	str	r2, [r3, #52]	; 0x34
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a30:	e1e8      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2b04      	cmp	r3, #4
 8000a38:	d113      	bne.n	8000a62 <_ZN7Stepper19StepperSetFrequencyEf+0x162>
			this->stepper_htim->Instance->CCR2 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a42:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000a44:	085b      	lsrs	r3, r3, #1
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fa1b 	bl	8000e82 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a4c:	eeb0 7b40 	vmov.f64	d7, d0
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a5a:	ee17 2a90 	vmov	r2, s15
 8000a5e:	639a      	str	r2, [r3, #56]	; 0x38
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a60:	e1d0      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	2b08      	cmp	r3, #8
 8000a68:	d113      	bne.n	8000a92 <_ZN7Stepper19StepperSetFrequencyEf+0x192>
			this->stepper_htim->Instance->CCR3 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a72:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000a74:	085b      	lsrs	r3, r3, #1
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 fa03 	bl	8000e82 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a7c:	eeb0 7b40 	vmov.f64	d7, d0
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a8a:	ee17 2a90 	vmov	r2, s15
 8000a8e:	63da      	str	r2, [r3, #60]	; 0x3c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a90:	e1b8      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	2b0c      	cmp	r3, #12
 8000a98:	d113      	bne.n	8000ac2 <_ZN7Stepper19StepperSetFrequencyEf+0x1c2>
			this->stepper_htim->Instance->CCR4 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa2:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000aa4:	085b      	lsrs	r3, r3, #1
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f9eb 	bl	8000e82 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000aac:	eeb0 7b40 	vmov.f64	d7, d0
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000aba:	ee17 2a90 	vmov	r2, s15
 8000abe:	641a      	str	r2, [r3, #64]	; 0x40
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000ac0:	e1a0      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2b10      	cmp	r3, #16
 8000ac8:	d113      	bne.n	8000af2 <_ZN7Stepper19StepperSetFrequencyEf+0x1f2>
			this->stepper_htim->Instance->CCR5 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ad2:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000ad4:	085b      	lsrs	r3, r3, #1
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f9d3 	bl	8000e82 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000adc:	eeb0 7b40 	vmov.f64	d7, d0
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000aea:	ee17 2a90 	vmov	r2, s15
 8000aee:	659a      	str	r2, [r3, #88]	; 0x58
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000af0:	e188      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	2b14      	cmp	r3, #20
 8000af8:	d113      	bne.n	8000b22 <_ZN7Stepper19StepperSetFrequencyEf+0x222>
			this->stepper_htim->Instance->CCR6 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b02:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000b04:	085b      	lsrs	r3, r3, #1
 8000b06:	4618      	mov	r0, r3
 8000b08:	f000 f9bb 	bl	8000e82 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b0c:	eeb0 7b40 	vmov.f64	d7, d0
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b1a:	ee17 2a90 	vmov	r2, s15
 8000b1e:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000b20:	e170      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else {
			this->stepper_htim->Instance->CCR1 = 0;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2200      	movs	r2, #0
 8000b34:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2200      	movs	r2, #0
 8000b48:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2200      	movs	r2, #0
 8000b52:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000b5e:	e151      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

	} else if (this->frequency < 0.001f && this->frequency != 0.0f) {
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b66:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000c48 <_ZN7Stepper19StepperSetFrequencyEf+0x348>
 8000b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b72:	f140 80ec 	bpl.w	8000d4e <_ZN7Stepper19StepperSetFrequencyEf+0x44e>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b7c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b84:	f000 80e3 	beq.w	8000d4e <_ZN7Stepper19StepperSetFrequencyEf+0x44e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6898      	ldr	r0, [r3, #8]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	2200      	movs	r2, #0
 8000b94:	4619      	mov	r1, r3
 8000b96:	f005 fb87 	bl	80062a8 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	ee07 3a90 	vmov	s15, r3
 8000ba8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000bac:	ed97 0a03 	vldr	s0, [r7, #12]
 8000bb0:	f7ff fe27 	bl	8000802 <_ZSt4fabsf>
 8000bb4:	eef0 7a40 	vmov.f32	s15, s0
 8000bb8:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000bbc:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000c4c <_ZN7Stepper19StepperSetFrequencyEf+0x34c>
 8000bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bcc:	eeb0 0a67 	vmov.f32	s0, s15
 8000bd0:	f7ff fe27 	bl	8000822 <_ZSt5roundf>
 8000bd4:	eef0 7a40 	vmov.f32	s15, s0
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000be2:	ee17 2a90 	vmov	r2, s15
 8000be6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d113      	bne.n	8000c18 <_ZN7Stepper19StepperSetFrequencyEf+0x318>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000bfa:	085b      	lsrs	r3, r3, #1
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 f940 	bl	8000e82 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c02:	eeb0 7b40 	vmov.f64	d7, d0
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c10:	ee17 2a90 	vmov	r2, s15
 8000c14:	635a      	str	r2, [r3, #52]	; 0x34
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000c16:	e0f5      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	2b04      	cmp	r3, #4
 8000c1e:	d117      	bne.n	8000c50 <_ZN7Stepper19StepperSetFrequencyEf+0x350>
			this->stepper_htim->Instance->CCR2 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c28:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000c2a:	085b      	lsrs	r3, r3, #1
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f000 f928 	bl	8000e82 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c32:	eeb0 7b40 	vmov.f64	d7, d0
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c40:	ee17 2a90 	vmov	r2, s15
 8000c44:	639a      	str	r2, [r3, #56]	; 0x38
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000c46:	e0dd      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
 8000c48:	3a83126f 	.word	0x3a83126f
 8000c4c:	4d64e1c0 	.word	0x4d64e1c0
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b08      	cmp	r3, #8
 8000c56:	d113      	bne.n	8000c80 <_ZN7Stepper19StepperSetFrequencyEf+0x380>
			this->stepper_htim->Instance->CCR3 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c60:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000c62:	085b      	lsrs	r3, r3, #1
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 f90c 	bl	8000e82 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c6a:	eeb0 7b40 	vmov.f64	d7, d0
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c78:	ee17 2a90 	vmov	r2, s15
 8000c7c:	63da      	str	r2, [r3, #60]	; 0x3c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000c7e:	e0c1      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2b0c      	cmp	r3, #12
 8000c86:	d113      	bne.n	8000cb0 <_ZN7Stepper19StepperSetFrequencyEf+0x3b0>
			this->stepper_htim->Instance->CCR4 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c90:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000c92:	085b      	lsrs	r3, r3, #1
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f8f4 	bl	8000e82 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ca8:	ee17 2a90 	vmov	r2, s15
 8000cac:	641a      	str	r2, [r3, #64]	; 0x40
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000cae:	e0a9      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b10      	cmp	r3, #16
 8000cb6:	d113      	bne.n	8000ce0 <_ZN7Stepper19StepperSetFrequencyEf+0x3e0>
			this->stepper_htim->Instance->CCR5 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000cc2:	085b      	lsrs	r3, r3, #1
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f8dc 	bl	8000e82 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000cca:	eeb0 7b40 	vmov.f64	d7, d0
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cd8:	ee17 2a90 	vmov	r2, s15
 8000cdc:	659a      	str	r2, [r3, #88]	; 0x58
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000cde:	e091      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b14      	cmp	r3, #20
 8000ce6:	d113      	bne.n	8000d10 <_ZN7Stepper19StepperSetFrequencyEf+0x410>
			this->stepper_htim->Instance->CCR6 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000cf2:	085b      	lsrs	r3, r3, #1
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f8c4 	bl	8000e82 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000cfa:	eeb0 7b40 	vmov.f64	d7, d0
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d08:	ee17 2a90 	vmov	r2, s15
 8000d0c:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d0e:	e079      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else {
			this->stepper_htim->Instance->CCR1 = 0;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2200      	movs	r2, #0
 8000d18:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	2200      	movs	r2, #0
 8000d22:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2200      	movs	r2, #0
 8000d36:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d4c:	e05a      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}
	} else {
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d105      	bne.n	8000d62 <_ZN7Stepper19StepperSetFrequencyEf+0x462>
			this->stepper_htim->Instance->CCR1 = 0;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8000d60:	e050      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d105      	bne.n	8000d76 <_ZN7Stepper19StepperSetFrequencyEf+0x476>
			this->stepper_htim->Instance->CCR2 = 0;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2200      	movs	r2, #0
 8000d72:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d74:	e046      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	2b08      	cmp	r3, #8
 8000d7c:	d105      	bne.n	8000d8a <_ZN7Stepper19StepperSetFrequencyEf+0x48a>
			this->stepper_htim->Instance->CCR3 = 0;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2200      	movs	r2, #0
 8000d86:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d88:	e03c      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b0c      	cmp	r3, #12
 8000d90:	d105      	bne.n	8000d9e <_ZN7Stepper19StepperSetFrequencyEf+0x49e>
			this->stepper_htim->Instance->CCR4 = 0;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d9c:	e032      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b10      	cmp	r3, #16
 8000da4:	d105      	bne.n	8000db2 <_ZN7Stepper19StepperSetFrequencyEf+0x4b2>
			this->stepper_htim->Instance->CCR5 = 0;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2200      	movs	r2, #0
 8000dae:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000db0:	e028      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b14      	cmp	r3, #20
 8000db8:	d105      	bne.n	8000dc6 <_ZN7Stepper19StepperSetFrequencyEf+0x4c6>
			this->stepper_htim->Instance->CCR6 = 0;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000dc4:	e01e      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
			this->stepper_htim->Instance->CCR1 = 0;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2200      	movs	r2, #0
 8000de2:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2200      	movs	r2, #0
 8000dec:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2200      	movs	r2, #0
 8000df6:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000e02:	e7ff      	b.n	8000e04 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
 8000e04:	bf00      	nop
 8000e06:	3710      	adds	r7, #16
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	ecbd 8b02 	vpop	{d8}
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8000e1c:	ed97 0a00 	vldr	s0, [r7]
 8000e20:	f7ff fcef 	bl	8000802 <_ZSt4fabsf>
 8000e24:	eef0 7a40 	vmov.f32	s15, s0
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8000e36:	b480      	push	{r7}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e4a:	eeb0 0b47 	vmov.f64	d0, d7
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
 8000e60:	460b      	mov	r3, r1
 8000e62:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8000e64:	78fb      	ldrb	r3, [r7, #3]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ffe5 	bl	8000e36 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e6c:	eeb0 7b40 	vmov.f64	d7, d0
 8000e70:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	ee07 3a90 	vmov	s15, r3
 8000e90:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e94:	eeb0 0b47 	vmov.f64	d0, d7
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
	...

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea8:	f001 ff70 	bl	8002d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f8b8 	bl	8001020 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb0:	f000 ff0c 	bl	8001ccc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000eb4:	f000 feca 	bl	8001c4c <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8000eb8:	f000 fe68 	bl	8001b8c <_ZL19MX_USART3_UART_Initv>
  MX_TIM2_Init();
 8000ebc:	f000 fa88 	bl	80013d0 <_ZL12MX_TIM2_Initv>
  MX_UART4_Init();
 8000ec0:	f000 fd9e 	bl	8001a00 <_ZL13MX_UART4_Initv>
  MX_TIM4_Init();
 8000ec4:	f000 fba6 	bl	8001614 <_ZL12MX_TIM4_Initv>
  MX_SPI3_Init();
 8000ec8:	f000 f95c 	bl	8001184 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 8000ecc:	f000 f9b4 	bl	8001238 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8000ed0:	f000 fb0e 	bl	80014f0 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8000ed4:	f000 fc30 	bl	8001738 <_ZL12MX_TIM5_Initv>
  MX_TIM15_Init();
 8000ed8:	f000 fcd0 	bl	800187c <_ZL13MX_TIM15_Initv>
  MX_TIM12_Init();
 8000edc:	f000 fc8a 	bl	80017f4 <_ZL13MX_TIM12_Initv>
  MX_CRC_Init();
 8000ee0:	f000 f928 	bl	8001134 <_ZL11MX_CRC_Initv>
  MX_UART7_Init();
 8000ee4:	f000 fdf0 	bl	8001ac8 <_ZL13MX_UART7_Initv>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2101      	movs	r1, #1
 8000eec:	483d      	ldr	r0, [pc, #244]	; (8000fe4 <main+0x140>)
 8000eee:	f005 f9db 	bl	80062a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	483c      	ldr	r0, [pc, #240]	; (8000fe8 <main+0x144>)
 8000ef8:	f005 f9d6 	bl	80062a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000efc:	2201      	movs	r2, #1
 8000efe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f02:	4838      	ldr	r0, [pc, #224]	; (8000fe4 <main+0x140>)
 8000f04:	f005 f9d0 	bl	80062a8 <HAL_GPIO_WritePin>

	#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(400.0f);
 8000f08:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8000fec <main+0x148>
 8000f0c:	4838      	ldr	r0, [pc, #224]	; (8000ff0 <main+0x14c>)
 8000f0e:	f7ff fcf7 	bl	8000900 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(16);
 8000f12:	2110      	movs	r1, #16
 8000f14:	4836      	ldr	r0, [pc, #216]	; (8000ff0 <main+0x14c>)
 8000f16:	f7ff ff9f 	bl	8000e58 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(1);
 8000f1a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f1e:	4834      	ldr	r0, [pc, #208]	; (8000ff0 <main+0x14c>)
 8000f20:	f7ff ff76 	bl	8000e10 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8000f24:	4832      	ldr	r0, [pc, #200]	; (8000ff0 <main+0x14c>)
 8000f26:	f7ff fcda 	bl	80008de <_ZN7Stepper13StepperEnableEv>

//	stepperJ2.StepperSetMicrostep(1);
//	stepperJ2.StepperSetRatio(1);

	stepperJ3.StepperSetFrequency(800.0f);
 8000f2a:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8000ff4 <main+0x150>
 8000f2e:	4832      	ldr	r0, [pc, #200]	; (8000ff8 <main+0x154>)
 8000f30:	f7ff fce6 	bl	8000900 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 8000f34:	2110      	movs	r1, #16
 8000f36:	4830      	ldr	r0, [pc, #192]	; (8000ff8 <main+0x154>)
 8000f38:	f7ff ff8e 	bl	8000e58 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(1);
 8000f3c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f40:	482d      	ldr	r0, [pc, #180]	; (8000ff8 <main+0x154>)
 8000f42:	f7ff ff65 	bl	8000e10 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8000f46:	482c      	ldr	r0, [pc, #176]	; (8000ff8 <main+0x154>)
 8000f48:	f7ff fcc9 	bl	80008de <_ZN7Stepper13StepperEnableEv>

//	stepperJ4.StepperSetMicrostep(1);
//	stepperJ4.StepperSetRatio(1);
	#endif

	HAL_UART_Transmit_DMA(&huart3, (const uint8_t *)"A\n", 2);
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	492b      	ldr	r1, [pc, #172]	; (8000ffc <main+0x158>)
 8000f50:	482b      	ldr	r0, [pc, #172]	; (8001000 <main+0x15c>)
 8000f52:	f009 fa9f 	bl	800a494 <HAL_UART_Transmit_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		if(HAL_GetTick() - TIM_MS > 200U){
 8000f56:	f001 ff9f 	bl	8002e98 <HAL_GetTick>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	4b29      	ldr	r3, [pc, #164]	; (8001004 <main+0x160>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	2bc8      	cmp	r3, #200	; 0xc8
 8000f64:	bf8c      	ite	hi
 8000f66:	2301      	movhi	r3, #1
 8000f68:	2300      	movls	r3, #0
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00d      	beq.n	8000f8c <main+0xe8>
			TIM_MS = HAL_GetTick();
 8000f70:	f001 ff92 	bl	8002e98 <HAL_GetTick>
 8000f74:	4603      	mov	r3, r0
 8000f76:	4a23      	ldr	r2, [pc, #140]	; (8001004 <main+0x160>)
 8000f78:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	481a      	ldr	r0, [pc, #104]	; (8000fe8 <main+0x144>)
 8000f7e:	f005 f9ac 	bl	80062da <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f86:	4817      	ldr	r0, [pc, #92]	; (8000fe4 <main+0x140>)
 8000f88:	f005 f9a7 	bl	80062da <HAL_GPIO_TogglePin>
		}
		encoderJ1.AMT21_Read();
 8000f8c:	481e      	ldr	r0, [pc, #120]	; (8001008 <main+0x164>)
 8000f8e:	f7ff fb9a 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8000f92:	481d      	ldr	r0, [pc, #116]	; (8001008 <main+0x164>)
 8000f94:	f7ff fbc6 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <main+0x168>)
 8000f9e:	701a      	strb	r2, [r3, #0]
		if(HALENCJ1OK == HAL_OK){
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	; (800100c <main+0x168>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d106      	bne.n	8000fb6 <main+0x112>
			posJ1 = encoderJ1.getPosition();
 8000fa8:	4817      	ldr	r0, [pc, #92]	; (8001008 <main+0x164>)
 8000faa:	f7ff fc1e 	bl	80007ea <_ZN5AMT2111getPositionEv>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <main+0x16c>)
 8000fb4:	801a      	strh	r2, [r3, #0]
		}
		encoderJ3.AMT21_Read();
 8000fb6:	4817      	ldr	r0, [pc, #92]	; (8001014 <main+0x170>)
 8000fb8:	f7ff fb85 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8000fbc:	4815      	ldr	r0, [pc, #84]	; (8001014 <main+0x170>)
 8000fbe:	f7ff fbb1 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b14      	ldr	r3, [pc, #80]	; (8001018 <main+0x174>)
 8000fc8:	701a      	strb	r2, [r3, #0]
		if(HALENCJ3OK == HAL_OK){
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <main+0x174>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1c1      	bne.n	8000f56 <main+0xb2>
			posJ3 = encoderJ3.getPosition();
 8000fd2:	4810      	ldr	r0, [pc, #64]	; (8001014 <main+0x170>)
 8000fd4:	f7ff fc09 	bl	80007ea <_ZN5AMT2111getPositionEv>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <main+0x178>)
 8000fde:	801a      	strh	r2, [r3, #0]
		if(HAL_GetTick() - TIM_MS > 200U){
 8000fe0:	e7b9      	b.n	8000f56 <main+0xb2>
 8000fe2:	bf00      	nop
 8000fe4:	58020400 	.word	0x58020400
 8000fe8:	58021000 	.word	0x58021000
 8000fec:	43c80000 	.word	0x43c80000
 8000ff0:	240008f0 	.word	0x240008f0
 8000ff4:	44480000 	.word	0x44480000
 8000ff8:	24000918 	.word	0x24000918
 8000ffc:	0800ea28 	.word	0x0800ea28
 8001000:	240005dc 	.word	0x240005dc
 8001004:	240008c4 	.word	0x240008c4
 8001008:	240008c8 	.word	0x240008c8
 800100c:	24000940 	.word	0x24000940
 8001010:	24000942 	.word	0x24000942
 8001014:	240008dc 	.word	0x240008dc
 8001018:	24000941 	.word	0x24000941
 800101c:	24000944 	.word	0x24000944

08001020 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09c      	sub	sp, #112	; 0x70
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	224c      	movs	r2, #76	; 0x4c
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f00b f8a6 	bl	800c180 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2220      	movs	r2, #32
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f00b f8a0 	bl	800c180 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001040:	2002      	movs	r0, #2
 8001042:	f005 f97f 	bl	8006344 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001046:	2300      	movs	r3, #0
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4b38      	ldr	r3, [pc, #224]	; (800112c <_Z18SystemClock_Configv+0x10c>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	4a37      	ldr	r2, [pc, #220]	; (800112c <_Z18SystemClock_Configv+0x10c>)
 8001050:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001054:	6193      	str	r3, [r2, #24]
 8001056:	4b35      	ldr	r3, [pc, #212]	; (800112c <_Z18SystemClock_Configv+0x10c>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	4b33      	ldr	r3, [pc, #204]	; (8001130 <_Z18SystemClock_Configv+0x110>)
 8001062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001064:	4a32      	ldr	r2, [pc, #200]	; (8001130 <_Z18SystemClock_Configv+0x110>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800106c:	4b30      	ldr	r3, [pc, #192]	; (8001130 <_Z18SystemClock_Configv+0x110>)
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	603b      	str	r3, [r7, #0]
 8001076:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001078:	4b2c      	ldr	r3, [pc, #176]	; (800112c <_Z18SystemClock_Configv+0x10c>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001084:	bf14      	ite	ne
 8001086:	2301      	movne	r3, #1
 8001088:	2300      	moveq	r3, #0
 800108a:	b2db      	uxtb	r3, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	d000      	beq.n	8001092 <_Z18SystemClock_Configv+0x72>
 8001090:	e7f2      	b.n	8001078 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001092:	2302      	movs	r3, #2
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001096:	2301      	movs	r3, #1
 8001098:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800109a:	2340      	movs	r3, #64	; 0x40
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109e:	2302      	movs	r3, #2
 80010a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010a2:	2300      	movs	r3, #0
 80010a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a6:	2304      	movs	r3, #4
 80010a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80010aa:	233c      	movs	r3, #60	; 0x3c
 80010ac:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80010b2:	2306      	movs	r3, #6
 80010b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80010ba:	230c      	movs	r3, #12
 80010bc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010be:	2300      	movs	r3, #0
 80010c0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ca:	4618      	mov	r0, r3
 80010cc:	f005 f974 	bl	80063b8 <HAL_RCC_OscConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	bf14      	ite	ne
 80010d6:	2301      	movne	r3, #1
 80010d8:	2300      	moveq	r3, #0
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80010e0:	f000 ff40 	bl	8001f64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e4:	233f      	movs	r3, #63	; 0x3f
 80010e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e8:	2303      	movs	r3, #3
 80010ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80010f0:	2308      	movs	r3, #8
 80010f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80010f4:	2340      	movs	r3, #64	; 0x40
 80010f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80010f8:	2340      	movs	r3, #64	; 0x40
 80010fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80010fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001100:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001102:	2340      	movs	r3, #64	; 0x40
 8001104:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2104      	movs	r1, #4
 800110a:	4618      	mov	r0, r3
 800110c:	f005 fd80 	bl	8006c10 <HAL_RCC_ClockConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	bf14      	ite	ne
 8001116:	2301      	movne	r3, #1
 8001118:	2300      	moveq	r3, #0
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8001120:	f000 ff20 	bl	8001f64 <Error_Handler>
  }
}
 8001124:	bf00      	nop
 8001126:	3770      	adds	r7, #112	; 0x70
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	58024800 	.word	0x58024800
 8001130:	58000400 	.word	0x58000400

08001134 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <_ZL11MX_CRC_Initv+0x48>)
 800113a:	4a11      	ldr	r2, [pc, #68]	; (8001180 <_ZL11MX_CRC_Initv+0x4c>)
 800113c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800113e:	4b0f      	ldr	r3, [pc, #60]	; (800117c <_ZL11MX_CRC_Initv+0x48>)
 8001140:	2200      	movs	r2, #0
 8001142:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <_ZL11MX_CRC_Initv+0x48>)
 8001146:	2200      	movs	r2, #0
 8001148:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <_ZL11MX_CRC_Initv+0x48>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <_ZL11MX_CRC_Initv+0x48>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <_ZL11MX_CRC_Initv+0x48>)
 8001158:	2201      	movs	r2, #1
 800115a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <_ZL11MX_CRC_Initv+0x48>)
 800115e:	f001 ffcf 	bl	8003100 <HAL_CRC_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf14      	ite	ne
 8001168:	2301      	movne	r3, #1
 800116a:	2300      	moveq	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8001172:	f000 fef7 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	240001fc 	.word	0x240001fc
 8001180:	58024c00 	.word	0x58024c00

08001184 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 800118a:	4a2a      	ldr	r2, [pc, #168]	; (8001234 <_ZL12MX_SPI3_Initv+0xb0>)
 800118c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 8001190:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001194:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 800119c:	4b24      	ldr	r3, [pc, #144]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 800119e:	2203      	movs	r2, #3
 80011a0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a2:	4b23      	ldr	r3, [pc, #140]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a8:	4b21      	ldr	r3, [pc, #132]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 80011b0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011b4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c2:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 80011d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011da:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011dc:	4b14      	ldr	r3, [pc, #80]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 80011de:	2200      	movs	r2, #0
 80011e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011e8:	4b11      	ldr	r3, [pc, #68]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 8001202:	2200      	movs	r2, #0
 8001204:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 8001208:	2200      	movs	r2, #0
 800120a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800120c:	4b08      	ldr	r3, [pc, #32]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 800120e:	2200      	movs	r2, #0
 8001210:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001212:	4807      	ldr	r0, [pc, #28]	; (8001230 <_ZL12MX_SPI3_Initv+0xac>)
 8001214:	f007 fbea 	bl	80089ec <HAL_SPI_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf14      	ite	ne
 800121e:	2301      	movne	r3, #1
 8001220:	2300      	moveq	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <_ZL12MX_SPI3_Initv+0xa8>
  {
    Error_Handler();
 8001228:	f000 fe9c 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	24000220 	.word	0x24000220
 8001234:	40003c00 	.word	0x40003c00

08001238 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b09a      	sub	sp, #104	; 0x68
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800123e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001258:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
 8001268:	615a      	str	r2, [r3, #20]
 800126a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	222c      	movs	r2, #44	; 0x2c
 8001270:	2100      	movs	r1, #0
 8001272:	4618      	mov	r0, r3
 8001274:	f00a ff84 	bl	800c180 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001278:	4b53      	ldr	r3, [pc, #332]	; (80013c8 <_ZL12MX_TIM1_Initv+0x190>)
 800127a:	4a54      	ldr	r2, [pc, #336]	; (80013cc <_ZL12MX_TIM1_Initv+0x194>)
 800127c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 800127e:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <_ZL12MX_TIM1_Initv+0x190>)
 8001280:	22c7      	movs	r2, #199	; 0xc7
 8001282:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001284:	4b50      	ldr	r3, [pc, #320]	; (80013c8 <_ZL12MX_TIM1_Initv+0x190>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 800128a:	4b4f      	ldr	r3, [pc, #316]	; (80013c8 <_ZL12MX_TIM1_Initv+0x190>)
 800128c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001290:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001292:	4b4d      	ldr	r3, [pc, #308]	; (80013c8 <_ZL12MX_TIM1_Initv+0x190>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <_ZL12MX_TIM1_Initv+0x190>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <_ZL12MX_TIM1_Initv+0x190>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012a4:	4848      	ldr	r0, [pc, #288]	; (80013c8 <_ZL12MX_TIM1_Initv+0x190>)
 80012a6:	f007 fcc2 	bl	8008c2e <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	bf14      	ite	ne
 80012b0:	2301      	movne	r3, #1
 80012b2:	2300      	moveq	r3, #0
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 80012ba:	f000 fe53 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c2:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012c8:	4619      	mov	r1, r3
 80012ca:	483f      	ldr	r0, [pc, #252]	; (80013c8 <_ZL12MX_TIM1_Initv+0x190>)
 80012cc:	f008 f8aa 	bl	8009424 <HAL_TIM_ConfigClockSource>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf14      	ite	ne
 80012d6:	2301      	movne	r3, #1
 80012d8:	2300      	moveq	r3, #0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 80012e0:	f000 fe40 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012e4:	4838      	ldr	r0, [pc, #224]	; (80013c8 <_ZL12MX_TIM1_Initv+0x190>)
 80012e6:	f007 fcf9 	bl	8008cdc <HAL_TIM_PWM_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bf14      	ite	ne
 80012f0:	2301      	movne	r3, #1
 80012f2:	2300      	moveq	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 80012fa:	f000 fe33 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800130a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800130e:	4619      	mov	r1, r3
 8001310:	482d      	ldr	r0, [pc, #180]	; (80013c8 <_ZL12MX_TIM1_Initv+0x190>)
 8001312:	f008 fddb 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	bf14      	ite	ne
 800131c:	2301      	movne	r3, #1
 800131e:	2300      	moveq	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 8001326:	f000 fe1d 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132a:	2360      	movs	r3, #96	; 0x60
 800132c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800132e:	f240 1339 	movw	r3, #313	; 0x139
 8001332:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001334:	2300      	movs	r3, #0
 8001336:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001338:	2300      	movs	r3, #0
 800133a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001348:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800134c:	2204      	movs	r2, #4
 800134e:	4619      	mov	r1, r3
 8001350:	481d      	ldr	r0, [pc, #116]	; (80013c8 <_ZL12MX_TIM1_Initv+0x190>)
 8001352:	f007 ff53 	bl	80091fc <HAL_TIM_PWM_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	bf14      	ite	ne
 800135c:	2301      	movne	r3, #1
 800135e:	2300      	moveq	r3, #0
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 8001366:	f000 fdfd 	bl	8001f64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800137e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001382:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800138c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4619      	mov	r1, r3
 800139e:	480a      	ldr	r0, [pc, #40]	; (80013c8 <_ZL12MX_TIM1_Initv+0x190>)
 80013a0:	f008 fe22 	bl	8009fe8 <HAL_TIMEx_ConfigBreakDeadTime>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	bf14      	ite	ne
 80013aa:	2301      	movne	r3, #1
 80013ac:	2300      	moveq	r3, #0
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <_ZL12MX_TIM1_Initv+0x180>
  {
    Error_Handler();
 80013b4:	f000 fdd6 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <_ZL12MX_TIM1_Initv+0x190>)
 80013ba:	f000 ffa9 	bl	8002310 <HAL_TIM_MspPostInit>

}
 80013be:	bf00      	nop
 80013c0:	3768      	adds	r7, #104	; 0x68
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	240002a8 	.word	0x240002a8
 80013cc:	40010000 	.word	0x40010000

080013d0 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08e      	sub	sp, #56	; 0x38
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001402:	4b3a      	ldr	r3, [pc, #232]	; (80014ec <_ZL12MX_TIM2_Initv+0x11c>)
 8001404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001408:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 800140a:	4b38      	ldr	r3, [pc, #224]	; (80014ec <_ZL12MX_TIM2_Initv+0x11c>)
 800140c:	22c7      	movs	r2, #199	; 0xc7
 800140e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001410:	4b36      	ldr	r3, [pc, #216]	; (80014ec <_ZL12MX_TIM2_Initv+0x11c>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 8001416:	4b35      	ldr	r3, [pc, #212]	; (80014ec <_ZL12MX_TIM2_Initv+0x11c>)
 8001418:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800141c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <_ZL12MX_TIM2_Initv+0x11c>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001424:	4b31      	ldr	r3, [pc, #196]	; (80014ec <_ZL12MX_TIM2_Initv+0x11c>)
 8001426:	2200      	movs	r2, #0
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800142a:	4830      	ldr	r0, [pc, #192]	; (80014ec <_ZL12MX_TIM2_Initv+0x11c>)
 800142c:	f007 fbff 	bl	8008c2e <HAL_TIM_Base_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	bf14      	ite	ne
 8001436:	2301      	movne	r3, #1
 8001438:	2300      	moveq	r3, #0
 800143a:	b2db      	uxtb	r3, r3
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8001440:	f000 fd90 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001444:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800144a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144e:	4619      	mov	r1, r3
 8001450:	4826      	ldr	r0, [pc, #152]	; (80014ec <_ZL12MX_TIM2_Initv+0x11c>)
 8001452:	f007 ffe7 	bl	8009424 <HAL_TIM_ConfigClockSource>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	bf14      	ite	ne
 800145c:	2301      	movne	r3, #1
 800145e:	2300      	moveq	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 8001466:	f000 fd7d 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800146a:	4820      	ldr	r0, [pc, #128]	; (80014ec <_ZL12MX_TIM2_Initv+0x11c>)
 800146c:	f007 fc36 	bl	8008cdc <HAL_TIM_PWM_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	bf14      	ite	ne
 8001476:	2301      	movne	r3, #1
 8001478:	2300      	moveq	r3, #0
 800147a:	b2db      	uxtb	r3, r3
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001480:	f000 fd70 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	4619      	mov	r1, r3
 8001492:	4816      	ldr	r0, [pc, #88]	; (80014ec <_ZL12MX_TIM2_Initv+0x11c>)
 8001494:	f008 fd1a 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	bf14      	ite	ne
 800149e:	2301      	movne	r3, #1
 80014a0:	2300      	moveq	r3, #0
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 80014a8:	f000 fd5c 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ac:	2360      	movs	r3, #96	; 0x60
 80014ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80014b0:	f240 1339 	movw	r3, #313	; 0x139
 80014b4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014be:	463b      	mov	r3, r7
 80014c0:	2208      	movs	r2, #8
 80014c2:	4619      	mov	r1, r3
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <_ZL12MX_TIM2_Initv+0x11c>)
 80014c6:	f007 fe99 	bl	80091fc <HAL_TIM_PWM_ConfigChannel>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	bf14      	ite	ne
 80014d0:	2301      	movne	r3, #1
 80014d2:	2300      	moveq	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 80014da:	f000 fd43 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <_ZL12MX_TIM2_Initv+0x11c>)
 80014e0:	f000 ff16 	bl	8002310 <HAL_TIM_MspPostInit>

}
 80014e4:	bf00      	nop
 80014e6:	3738      	adds	r7, #56	; 0x38
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	240002f4 	.word	0x240002f4

080014f0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08e      	sub	sp, #56	; 0x38
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001504:	f107 031c 	add.w	r3, r7, #28
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001510:	463b      	mov	r3, r7
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]
 800151e:	615a      	str	r2, [r3, #20]
 8001520:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001522:	4b3a      	ldr	r3, [pc, #232]	; (800160c <_ZL12MX_TIM3_Initv+0x11c>)
 8001524:	4a3a      	ldr	r2, [pc, #232]	; (8001610 <_ZL12MX_TIM3_Initv+0x120>)
 8001526:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8001528:	4b38      	ldr	r3, [pc, #224]	; (800160c <_ZL12MX_TIM3_Initv+0x11c>)
 800152a:	22c7      	movs	r2, #199	; 0xc7
 800152c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152e:	4b37      	ldr	r3, [pc, #220]	; (800160c <_ZL12MX_TIM3_Initv+0x11c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8001534:	4b35      	ldr	r3, [pc, #212]	; (800160c <_ZL12MX_TIM3_Initv+0x11c>)
 8001536:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800153a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153c:	4b33      	ldr	r3, [pc, #204]	; (800160c <_ZL12MX_TIM3_Initv+0x11c>)
 800153e:	2200      	movs	r2, #0
 8001540:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b32      	ldr	r3, [pc, #200]	; (800160c <_ZL12MX_TIM3_Initv+0x11c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001548:	4830      	ldr	r0, [pc, #192]	; (800160c <_ZL12MX_TIM3_Initv+0x11c>)
 800154a:	f007 fb70 	bl	8008c2e <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf14      	ite	ne
 8001554:	2301      	movne	r3, #1
 8001556:	2300      	moveq	r3, #0
 8001558:	b2db      	uxtb	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 800155e:	f000 fd01 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001562:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001568:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800156c:	4619      	mov	r1, r3
 800156e:	4827      	ldr	r0, [pc, #156]	; (800160c <_ZL12MX_TIM3_Initv+0x11c>)
 8001570:	f007 ff58 	bl	8009424 <HAL_TIM_ConfigClockSource>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf14      	ite	ne
 800157a:	2301      	movne	r3, #1
 800157c:	2300      	moveq	r3, #0
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8001584:	f000 fcee 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001588:	4820      	ldr	r0, [pc, #128]	; (800160c <_ZL12MX_TIM3_Initv+0x11c>)
 800158a:	f007 fba7 	bl	8008cdc <HAL_TIM_PWM_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf14      	ite	ne
 8001594:	2301      	movne	r3, #1
 8001596:	2300      	moveq	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 800159e:	f000 fce1 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	4619      	mov	r1, r3
 80015b0:	4816      	ldr	r0, [pc, #88]	; (800160c <_ZL12MX_TIM3_Initv+0x11c>)
 80015b2:	f008 fc8b 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf14      	ite	ne
 80015bc:	2301      	movne	r3, #1
 80015be:	2300      	moveq	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 80015c6:	f000 fccd 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ca:	2360      	movs	r3, #96	; 0x60
 80015cc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80015ce:	f240 1339 	movw	r3, #313	; 0x139
 80015d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d4:	2300      	movs	r3, #0
 80015d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	480a      	ldr	r0, [pc, #40]	; (800160c <_ZL12MX_TIM3_Initv+0x11c>)
 80015e4:	f007 fe0a 	bl	80091fc <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	bf14      	ite	ne
 80015ee:	2301      	movne	r3, #1
 80015f0:	2300      	moveq	r3, #0
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 80015f8:	f000 fcb4 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015fc:	4803      	ldr	r0, [pc, #12]	; (800160c <_ZL12MX_TIM3_Initv+0x11c>)
 80015fe:	f000 fe87 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8001602:	bf00      	nop
 8001604:	3738      	adds	r7, #56	; 0x38
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	24000340 	.word	0x24000340
 8001610:	40000400 	.word	0x40000400

08001614 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08e      	sub	sp, #56	; 0x38
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
 8001640:	611a      	str	r2, [r3, #16]
 8001642:	615a      	str	r2, [r3, #20]
 8001644:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001646:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <_ZL12MX_TIM4_Initv+0x11c>)
 8001648:	4a3a      	ldr	r2, [pc, #232]	; (8001734 <_ZL12MX_TIM4_Initv+0x120>)
 800164a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 800164c:	4b38      	ldr	r3, [pc, #224]	; (8001730 <_ZL12MX_TIM4_Initv+0x11c>)
 800164e:	22c7      	movs	r2, #199	; 0xc7
 8001650:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b37      	ldr	r3, [pc, #220]	; (8001730 <_ZL12MX_TIM4_Initv+0x11c>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 8001658:	4b35      	ldr	r3, [pc, #212]	; (8001730 <_ZL12MX_TIM4_Initv+0x11c>)
 800165a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800165e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001660:	4b33      	ldr	r3, [pc, #204]	; (8001730 <_ZL12MX_TIM4_Initv+0x11c>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001666:	4b32      	ldr	r3, [pc, #200]	; (8001730 <_ZL12MX_TIM4_Initv+0x11c>)
 8001668:	2280      	movs	r2, #128	; 0x80
 800166a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800166c:	4830      	ldr	r0, [pc, #192]	; (8001730 <_ZL12MX_TIM4_Initv+0x11c>)
 800166e:	f007 fade 	bl	8008c2e <HAL_TIM_Base_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	bf14      	ite	ne
 8001678:	2301      	movne	r3, #1
 800167a:	2300      	moveq	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8001682:	f000 fc6f 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800168c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001690:	4619      	mov	r1, r3
 8001692:	4827      	ldr	r0, [pc, #156]	; (8001730 <_ZL12MX_TIM4_Initv+0x11c>)
 8001694:	f007 fec6 	bl	8009424 <HAL_TIM_ConfigClockSource>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	bf14      	ite	ne
 800169e:	2301      	movne	r3, #1
 80016a0:	2300      	moveq	r3, #0
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 80016a8:	f000 fc5c 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016ac:	4820      	ldr	r0, [pc, #128]	; (8001730 <_ZL12MX_TIM4_Initv+0x11c>)
 80016ae:	f007 fb15 	bl	8008cdc <HAL_TIM_PWM_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	bf14      	ite	ne
 80016b8:	2301      	movne	r3, #1
 80016ba:	2300      	moveq	r3, #0
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 80016c2:	f000 fc4f 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	4816      	ldr	r0, [pc, #88]	; (8001730 <_ZL12MX_TIM4_Initv+0x11c>)
 80016d6:	f008 fbf9 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	bf14      	ite	ne
 80016e0:	2301      	movne	r3, #1
 80016e2:	2300      	moveq	r3, #0
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 80016ea:	f000 fc3b 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ee:	2360      	movs	r3, #96	; 0x60
 80016f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80016f2:	f240 1339 	movw	r3, #313	; 0x139
 80016f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001700:	463b      	mov	r3, r7
 8001702:	2208      	movs	r2, #8
 8001704:	4619      	mov	r1, r3
 8001706:	480a      	ldr	r0, [pc, #40]	; (8001730 <_ZL12MX_TIM4_Initv+0x11c>)
 8001708:	f007 fd78 	bl	80091fc <HAL_TIM_PWM_ConfigChannel>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	bf14      	ite	ne
 8001712:	2301      	movne	r3, #1
 8001714:	2300      	moveq	r3, #0
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <_ZL12MX_TIM4_Initv+0x10c>
  {
    Error_Handler();
 800171c:	f000 fc22 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <_ZL12MX_TIM4_Initv+0x11c>)
 8001722:	f000 fdf5 	bl	8002310 <HAL_TIM_MspPostInit>

}
 8001726:	bf00      	nop
 8001728:	3738      	adds	r7, #56	; 0x38
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2400038c 	.word	0x2400038c
 8001734:	40000800 	.word	0x40000800

08001738 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001756:	4b25      	ldr	r3, [pc, #148]	; (80017ec <_ZL12MX_TIM5_Initv+0xb4>)
 8001758:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <_ZL12MX_TIM5_Initv+0xb8>)
 800175a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 800175c:	4b23      	ldr	r3, [pc, #140]	; (80017ec <_ZL12MX_TIM5_Initv+0xb4>)
 800175e:	22c7      	movs	r2, #199	; 0xc7
 8001760:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b22      	ldr	r3, [pc, #136]	; (80017ec <_ZL12MX_TIM5_Initv+0xb4>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8001768:	4b20      	ldr	r3, [pc, #128]	; (80017ec <_ZL12MX_TIM5_Initv+0xb4>)
 800176a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800176e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <_ZL12MX_TIM5_Initv+0xb4>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001776:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <_ZL12MX_TIM5_Initv+0xb4>)
 8001778:	2200      	movs	r2, #0
 800177a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800177c:	481b      	ldr	r0, [pc, #108]	; (80017ec <_ZL12MX_TIM5_Initv+0xb4>)
 800177e:	f007 fa56 	bl	8008c2e <HAL_TIM_Base_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	bf14      	ite	ne
 8001788:	2301      	movne	r3, #1
 800178a:	2300      	moveq	r3, #0
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <_ZL12MX_TIM5_Initv+0x5e>
  {
    Error_Handler();
 8001792:	f000 fbe7 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4619      	mov	r1, r3
 80017a2:	4812      	ldr	r0, [pc, #72]	; (80017ec <_ZL12MX_TIM5_Initv+0xb4>)
 80017a4:	f007 fe3e 	bl	8009424 <HAL_TIM_ConfigClockSource>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf14      	ite	ne
 80017ae:	2301      	movne	r3, #1
 80017b0:	2300      	moveq	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <_ZL12MX_TIM5_Initv+0x84>
  {
    Error_Handler();
 80017b8:	f000 fbd4 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	4619      	mov	r1, r3
 80017c8:	4808      	ldr	r0, [pc, #32]	; (80017ec <_ZL12MX_TIM5_Initv+0xb4>)
 80017ca:	f008 fb7f 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bf14      	ite	ne
 80017d4:	2301      	movne	r3, #1
 80017d6:	2300      	moveq	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <_ZL12MX_TIM5_Initv+0xaa>
  {
    Error_Handler();
 80017de:	f000 fbc1 	bl	8001f64 <Error_Handler>
  /* USER CODE BEGIN TIM5_Init 2 */
//  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE END TIM5_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	3720      	adds	r7, #32
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	240003d8 	.word	0x240003d8
 80017f0:	40000c00 	.word	0x40000c00

080017f4 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fa:	463b      	mov	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <_ZL13MX_TIM12_Initv+0x80>)
 8001808:	4a1b      	ldr	r2, [pc, #108]	; (8001878 <_ZL13MX_TIM12_Initv+0x84>)
 800180a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 800180c:	4b19      	ldr	r3, [pc, #100]	; (8001874 <_ZL13MX_TIM12_Initv+0x80>)
 800180e:	22c7      	movs	r2, #199	; 0xc7
 8001810:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001812:	4b18      	ldr	r3, [pc, #96]	; (8001874 <_ZL13MX_TIM12_Initv+0x80>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 12000-1;
 8001818:	4b16      	ldr	r3, [pc, #88]	; (8001874 <_ZL13MX_TIM12_Initv+0x80>)
 800181a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800181e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001820:	4b14      	ldr	r3, [pc, #80]	; (8001874 <_ZL13MX_TIM12_Initv+0x80>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <_ZL13MX_TIM12_Initv+0x80>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <_ZL13MX_TIM12_Initv+0x80>)
 800182e:	f007 f9fe 	bl	8008c2e <HAL_TIM_Base_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	bf14      	ite	ne
 8001838:	2301      	movne	r3, #1
 800183a:	2300      	moveq	r3, #0
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <_ZL13MX_TIM12_Initv+0x52>
  {
    Error_Handler();
 8001842:	f000 fb8f 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800184c:	463b      	mov	r3, r7
 800184e:	4619      	mov	r1, r3
 8001850:	4808      	ldr	r0, [pc, #32]	; (8001874 <_ZL13MX_TIM12_Initv+0x80>)
 8001852:	f007 fde7 	bl	8009424 <HAL_TIM_ConfigClockSource>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf14      	ite	ne
 800185c:	2301      	movne	r3, #1
 800185e:	2300      	moveq	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <_ZL13MX_TIM12_Initv+0x76>
  {
    Error_Handler();
 8001866:	f000 fb7d 	bl	8001f64 <Error_Handler>
  /* USER CODE BEGIN TIM12_Init 2 */
//  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE END TIM12_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	24000424 	.word	0x24000424
 8001878:	40001800 	.word	0x40001800

0800187c <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b09a      	sub	sp, #104	; 0x68
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001882:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001890:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800189c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]
 80018aa:	611a      	str	r2, [r3, #16]
 80018ac:	615a      	str	r2, [r3, #20]
 80018ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	222c      	movs	r2, #44	; 0x2c
 80018b4:	2100      	movs	r1, #0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f00a fc62 	bl	800c180 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80018bc:	4b4e      	ldr	r3, [pc, #312]	; (80019f8 <_ZL13MX_TIM15_Initv+0x17c>)
 80018be:	4a4f      	ldr	r2, [pc, #316]	; (80019fc <_ZL13MX_TIM15_Initv+0x180>)
 80018c0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 80018c2:	4b4d      	ldr	r3, [pc, #308]	; (80019f8 <_ZL13MX_TIM15_Initv+0x17c>)
 80018c4:	22ef      	movs	r2, #239	; 0xef
 80018c6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c8:	4b4b      	ldr	r3, [pc, #300]	; (80019f8 <_ZL13MX_TIM15_Initv+0x17c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 80018ce:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <_ZL13MX_TIM15_Initv+0x17c>)
 80018d0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80018d4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d6:	4b48      	ldr	r3, [pc, #288]	; (80019f8 <_ZL13MX_TIM15_Initv+0x17c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80018dc:	4b46      	ldr	r3, [pc, #280]	; (80019f8 <_ZL13MX_TIM15_Initv+0x17c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e2:	4b45      	ldr	r3, [pc, #276]	; (80019f8 <_ZL13MX_TIM15_Initv+0x17c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80018e8:	4843      	ldr	r0, [pc, #268]	; (80019f8 <_ZL13MX_TIM15_Initv+0x17c>)
 80018ea:	f007 f9a0 	bl	8008c2e <HAL_TIM_Base_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <_ZL13MX_TIM15_Initv+0x86>
  {
    Error_Handler();
 80018fe:	f000 fb31 	bl	8001f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001902:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001906:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001908:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800190c:	4619      	mov	r1, r3
 800190e:	483a      	ldr	r0, [pc, #232]	; (80019f8 <_ZL13MX_TIM15_Initv+0x17c>)
 8001910:	f007 fd88 	bl	8009424 <HAL_TIM_ConfigClockSource>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	bf14      	ite	ne
 800191a:	2301      	movne	r3, #1
 800191c:	2300      	moveq	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <_ZL13MX_TIM15_Initv+0xac>
  {
    Error_Handler();
 8001924:	f000 fb1e 	bl	8001f64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001928:	4833      	ldr	r0, [pc, #204]	; (80019f8 <_ZL13MX_TIM15_Initv+0x17c>)
 800192a:	f007 f9d7 	bl	8008cdc <HAL_TIM_PWM_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	bf14      	ite	ne
 8001934:	2301      	movne	r3, #1
 8001936:	2300      	moveq	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <_ZL13MX_TIM15_Initv+0xc6>
  {
    Error_Handler();
 800193e:	f000 fb11 	bl	8001f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800194a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800194e:	4619      	mov	r1, r3
 8001950:	4829      	ldr	r0, [pc, #164]	; (80019f8 <_ZL13MX_TIM15_Initv+0x17c>)
 8001952:	f008 fabb 	bl	8009ecc <HAL_TIMEx_MasterConfigSynchronization>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf14      	ite	ne
 800195c:	2301      	movne	r3, #1
 800195e:	2300      	moveq	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <_ZL13MX_TIM15_Initv+0xee>
  {
    Error_Handler();
 8001966:	f000 fafd 	bl	8001f64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800196a:	2360      	movs	r3, #96	; 0x60
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800196e:	f240 1339 	movw	r3, #313	; 0x139
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001974:	2300      	movs	r3, #0
 8001976:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001978:	2300      	movs	r3, #0
 800197a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001988:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800198c:	2204      	movs	r2, #4
 800198e:	4619      	mov	r1, r3
 8001990:	4819      	ldr	r0, [pc, #100]	; (80019f8 <_ZL13MX_TIM15_Initv+0x17c>)
 8001992:	f007 fc33 	bl	80091fc <HAL_TIM_PWM_ConfigChannel>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	bf14      	ite	ne
 800199c:	2301      	movne	r3, #1
 800199e:	2300      	moveq	r3, #0
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <_ZL13MX_TIM15_Initv+0x12e>
  {
    Error_Handler();
 80019a6:	f000 fadd 	bl	8001f64 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	4619      	mov	r1, r3
 80019d0:	4809      	ldr	r0, [pc, #36]	; (80019f8 <_ZL13MX_TIM15_Initv+0x17c>)
 80019d2:	f008 fb09 	bl	8009fe8 <HAL_TIMEx_ConfigBreakDeadTime>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf14      	ite	ne
 80019dc:	2301      	movne	r3, #1
 80019de:	2300      	moveq	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <_ZL13MX_TIM15_Initv+0x16e>
  {
    Error_Handler();
 80019e6:	f000 fabd 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80019ea:	4803      	ldr	r0, [pc, #12]	; (80019f8 <_ZL13MX_TIM15_Initv+0x17c>)
 80019ec:	f000 fc90 	bl	8002310 <HAL_TIM_MspPostInit>

}
 80019f0:	bf00      	nop
 80019f2:	3768      	adds	r7, #104	; 0x68
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	24000470 	.word	0x24000470
 80019fc:	40014000 	.word	0x40014000

08001a00 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a04:	4b2d      	ldr	r3, [pc, #180]	; (8001abc <_ZL13MX_UART4_Initv+0xbc>)
 8001a06:	4a2e      	ldr	r2, [pc, #184]	; (8001ac0 <_ZL13MX_UART4_Initv+0xc0>)
 8001a08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8001a0a:	4b2c      	ldr	r3, [pc, #176]	; (8001abc <_ZL13MX_UART4_Initv+0xbc>)
 8001a0c:	4a2d      	ldr	r2, [pc, #180]	; (8001ac4 <_ZL13MX_UART4_Initv+0xc4>)
 8001a0e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a10:	4b2a      	ldr	r3, [pc, #168]	; (8001abc <_ZL13MX_UART4_Initv+0xbc>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a16:	4b29      	ldr	r3, [pc, #164]	; (8001abc <_ZL13MX_UART4_Initv+0xbc>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <_ZL13MX_UART4_Initv+0xbc>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a22:	4b26      	ldr	r3, [pc, #152]	; (8001abc <_ZL13MX_UART4_Initv+0xbc>)
 8001a24:	220c      	movs	r2, #12
 8001a26:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <_ZL13MX_UART4_Initv+0xbc>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a2e:	4b23      	ldr	r3, [pc, #140]	; (8001abc <_ZL13MX_UART4_Initv+0xbc>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <_ZL13MX_UART4_Initv+0xbc>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a3a:	4b20      	ldr	r3, [pc, #128]	; (8001abc <_ZL13MX_UART4_Initv+0xbc>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a40:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <_ZL13MX_UART4_Initv+0xbc>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a46:	481d      	ldr	r0, [pc, #116]	; (8001abc <_ZL13MX_UART4_Initv+0xbc>)
 8001a48:	f008 fb6a 	bl	800a120 <HAL_UART_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	bf14      	ite	ne
 8001a52:	2301      	movne	r3, #1
 8001a54:	2300      	moveq	r3, #0
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <_ZL13MX_UART4_Initv+0x60>
  {
    Error_Handler();
 8001a5c:	f000 fa82 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001a60:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8001a64:	4815      	ldr	r0, [pc, #84]	; (8001abc <_ZL13MX_UART4_Initv+0xbc>)
 8001a66:	f00a fa97 	bl	800bf98 <HAL_UARTEx_SetTxFifoThreshold>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf14      	ite	ne
 8001a70:	2301      	movne	r3, #1
 8001a72:	2300      	moveq	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 8001a7a:	f000 fa73 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001a7e:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001a82:	480e      	ldr	r0, [pc, #56]	; (8001abc <_ZL13MX_UART4_Initv+0xbc>)
 8001a84:	f00a fac6 	bl	800c014 <HAL_UARTEx_SetRxFifoThreshold>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bf14      	ite	ne
 8001a8e:	2301      	movne	r3, #1
 8001a90:	2300      	moveq	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <_ZL13MX_UART4_Initv+0x9c>
  {
    Error_Handler();
 8001a98:	f000 fa64 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8001a9c:	4807      	ldr	r0, [pc, #28]	; (8001abc <_ZL13MX_UART4_Initv+0xbc>)
 8001a9e:	f00a fa07 	bl	800beb0 <HAL_UARTEx_EnableFifoMode>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	bf14      	ite	ne
 8001aa8:	2301      	movne	r3, #1
 8001aaa:	2300      	moveq	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <_ZL13MX_UART4_Initv+0xb6>
  {
    Error_Handler();
 8001ab2:	f000 fa57 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	240004bc 	.word	0x240004bc
 8001ac0:	40004c00 	.word	0x40004c00
 8001ac4:	001e8480 	.word	0x001e8480

08001ac8 <_ZL13MX_UART7_Initv>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <_ZL13MX_UART7_Initv+0xbc>)
 8001ace:	4a2e      	ldr	r2, [pc, #184]	; (8001b88 <_ZL13MX_UART7_Initv+0xc0>)
 8001ad0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001ad2:	4b2c      	ldr	r3, [pc, #176]	; (8001b84 <_ZL13MX_UART7_Initv+0xbc>)
 8001ad4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <_ZL13MX_UART7_Initv+0xbc>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001ae0:	4b28      	ldr	r3, [pc, #160]	; (8001b84 <_ZL13MX_UART7_Initv+0xbc>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001ae6:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <_ZL13MX_UART7_Initv+0xbc>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <_ZL13MX_UART7_Initv+0xbc>)
 8001aee:	220c      	movs	r2, #12
 8001af0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001af2:	4b24      	ldr	r3, [pc, #144]	; (8001b84 <_ZL13MX_UART7_Initv+0xbc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af8:	4b22      	ldr	r3, [pc, #136]	; (8001b84 <_ZL13MX_UART7_Initv+0xbc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001afe:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <_ZL13MX_UART7_Initv+0xbc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <_ZL13MX_UART7_Initv+0xbc>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b0a:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <_ZL13MX_UART7_Initv+0xbc>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001b10:	481c      	ldr	r0, [pc, #112]	; (8001b84 <_ZL13MX_UART7_Initv+0xbc>)
 8001b12:	f008 fb05 	bl	800a120 <HAL_UART_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf14      	ite	ne
 8001b1c:	2301      	movne	r3, #1
 8001b1e:	2300      	moveq	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <_ZL13MX_UART7_Initv+0x62>
  {
    Error_Handler();
 8001b26:	f000 fa1d 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001b2a:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8001b2e:	4815      	ldr	r0, [pc, #84]	; (8001b84 <_ZL13MX_UART7_Initv+0xbc>)
 8001b30:	f00a fa32 	bl	800bf98 <HAL_UARTEx_SetTxFifoThreshold>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <_ZL13MX_UART7_Initv+0x80>
  {
    Error_Handler();
 8001b44:	f000 fa0e 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001b48:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001b4c:	480d      	ldr	r0, [pc, #52]	; (8001b84 <_ZL13MX_UART7_Initv+0xbc>)
 8001b4e:	f00a fa61 	bl	800c014 <HAL_UARTEx_SetRxFifoThreshold>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf14      	ite	ne
 8001b58:	2301      	movne	r3, #1
 8001b5a:	2300      	moveq	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <_ZL13MX_UART7_Initv+0x9e>
  {
    Error_Handler();
 8001b62:	f000 f9ff 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8001b66:	4807      	ldr	r0, [pc, #28]	; (8001b84 <_ZL13MX_UART7_Initv+0xbc>)
 8001b68:	f00a f9a2 	bl	800beb0 <HAL_UARTEx_EnableFifoMode>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	bf14      	ite	ne
 8001b72:	2301      	movne	r3, #1
 8001b74:	2300      	moveq	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <_ZL13MX_UART7_Initv+0xb8>
  {
    Error_Handler();
 8001b7c:	f000 f9f2 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001b80:	bf00      	nop
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2400054c 	.word	0x2400054c
 8001b88:	40007800 	.word	0x40007800

08001b8c <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b90:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001b92:	4a2d      	ldr	r2, [pc, #180]	; (8001c48 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001b94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b96:	4b2b      	ldr	r3, [pc, #172]	; (8001c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b9e:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bd4:	481b      	ldr	r0, [pc, #108]	; (8001c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001bd6:	f008 faa3 	bl	800a120 <HAL_UART_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf14      	ite	ne
 8001be0:	2301      	movne	r3, #1
 8001be2:	2300      	moveq	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001bea:	f000 f9bb 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	4814      	ldr	r0, [pc, #80]	; (8001c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001bf2:	f00a f9d1 	bl	800bf98 <HAL_UARTEx_SetTxFifoThreshold>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf14      	ite	ne
 8001bfc:	2301      	movne	r3, #1
 8001bfe:	2300      	moveq	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8001c06:	f000 f9ad 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	480d      	ldr	r0, [pc, #52]	; (8001c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c0e:	f00a fa01 	bl	800c014 <HAL_UARTEx_SetRxFifoThreshold>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bf14      	ite	ne
 8001c18:	2301      	movne	r3, #1
 8001c1a:	2300      	moveq	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8001c22:	f000 f99f 	bl	8001f64 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c26:	4807      	ldr	r0, [pc, #28]	; (8001c44 <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001c28:	f00a f97d 	bl	800bf26 <HAL_UARTEx_DisableFifoMode>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bf14      	ite	ne
 8001c32:	2301      	movne	r3, #1
 8001c34:	2300      	moveq	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001c3c:	f000 f992 	bl	8001f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	240005dc 	.word	0x240005dc
 8001c48:	40004800 	.word	0x40004800

08001c4c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c52:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <_ZL11MX_DMA_Initv+0x7c>)
 8001c54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c58:	4a1b      	ldr	r2, [pc, #108]	; (8001cc8 <_ZL11MX_DMA_Initv+0x7c>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c62:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <_ZL11MX_DMA_Initv+0x7c>)
 8001c64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001c70:	2200      	movs	r2, #0
 8001c72:	2100      	movs	r1, #0
 8001c74:	200b      	movs	r0, #11
 8001c76:	f001 fa02 	bl	800307e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c7a:	200b      	movs	r0, #11
 8001c7c:	f001 fa19 	bl	80030b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2100      	movs	r1, #0
 8001c84:	200c      	movs	r0, #12
 8001c86:	f001 f9fa 	bl	800307e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c8a:	200c      	movs	r0, #12
 8001c8c:	f001 fa11 	bl	80030b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001c90:	2200      	movs	r2, #0
 8001c92:	2100      	movs	r1, #0
 8001c94:	200d      	movs	r0, #13
 8001c96:	f001 f9f2 	bl	800307e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c9a:	200d      	movs	r0, #13
 8001c9c:	f001 fa09 	bl	80030b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	200e      	movs	r0, #14
 8001ca6:	f001 f9ea 	bl	800307e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001caa:	200e      	movs	r0, #14
 8001cac:	f001 fa01 	bl	80030b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	200f      	movs	r0, #15
 8001cb6:	f001 f9e2 	bl	800307e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001cba:	200f      	movs	r0, #15
 8001cbc:	f001 f9f9 	bl	80030b2 <HAL_NVIC_EnableIRQ>

}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	58024400 	.word	0x58024400

08001ccc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08c      	sub	sp, #48	; 0x30
 8001cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ce2:	4b8e      	ldr	r3, [pc, #568]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce8:	4a8c      	ldr	r2, [pc, #560]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001cea:	f043 0310 	orr.w	r3, r3, #16
 8001cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cf2:	4b8a      	ldr	r3, [pc, #552]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d00:	4b86      	ldr	r3, [pc, #536]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d06:	4a85      	ldr	r2, [pc, #532]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d10:	4b82      	ldr	r3, [pc, #520]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d1e:	4b7f      	ldr	r3, [pc, #508]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d24:	4a7d      	ldr	r2, [pc, #500]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d2e:	4b7b      	ldr	r3, [pc, #492]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3c:	4b77      	ldr	r3, [pc, #476]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d42:	4a76      	ldr	r2, [pc, #472]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d44:	f043 0301 	orr.w	r3, r3, #1
 8001d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d4c:	4b73      	ldr	r3, [pc, #460]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5a:	4b70      	ldr	r3, [pc, #448]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d60:	4a6e      	ldr	r2, [pc, #440]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d62:	f043 0302 	orr.w	r3, r3, #2
 8001d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d6a:	4b6c      	ldr	r3, [pc, #432]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d78:	4b68      	ldr	r3, [pc, #416]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7e:	4a67      	ldr	r2, [pc, #412]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d80:	f043 0308 	orr.w	r3, r3, #8
 8001d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d88:	4b64      	ldr	r3, [pc, #400]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	607b      	str	r3, [r7, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d96:	4b61      	ldr	r3, [pc, #388]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9c:	4a5f      	ldr	r2, [pc, #380]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001da2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001da6:	4b5d      	ldr	r3, [pc, #372]	; (8001f1c <_ZL12MX_GPIO_Initv+0x250>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001db4:	2200      	movs	r2, #0
 8001db6:	f644 2121 	movw	r1, #18977	; 0x4a21
 8001dba:	4859      	ldr	r0, [pc, #356]	; (8001f20 <_ZL12MX_GPIO_Initv+0x254>)
 8001dbc:	f004 fa74 	bl	80062a8 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f24c 0102 	movw	r1, #49154	; 0xc002
 8001dc6:	4857      	ldr	r0, [pc, #348]	; (8001f24 <_ZL12MX_GPIO_Initv+0x258>)
 8001dc8:	f004 fa6e 	bl	80062a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dd2:	4855      	ldr	r0, [pc, #340]	; (8001f28 <_ZL12MX_GPIO_Initv+0x25c>)
 8001dd4:	f004 fa68 	bl	80062a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dde:	4853      	ldr	r0, [pc, #332]	; (8001f2c <_ZL12MX_GPIO_Initv+0x260>)
 8001de0:	f004 fa62 	bl	80062a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dea:	4851      	ldr	r0, [pc, #324]	; (8001f30 <_ZL12MX_GPIO_Initv+0x264>)
 8001dec:	f004 fa5c 	bl	80062a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 8001df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001df6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	4619      	mov	r1, r3
 8001e06:	4849      	ldr	r0, [pc, #292]	; (8001f2c <_ZL12MX_GPIO_Initv+0x260>)
 8001e08:	f004 f89e 	bl	8005f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001e0c:	f644 2321 	movw	r3, #18977	; 0x4a21
 8001e10:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e12:	2301      	movs	r3, #1
 8001e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4619      	mov	r1, r3
 8001e24:	483e      	ldr	r0, [pc, #248]	; (8001f20 <_ZL12MX_GPIO_Initv+0x254>)
 8001e26:	f004 f88f 	bl	8005f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001e2a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e30:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4838      	ldr	r0, [pc, #224]	; (8001f24 <_ZL12MX_GPIO_Initv+0x258>)
 8001e42:	f004 f881 	bl	8005f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001e46:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001e4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e58:	f107 031c 	add.w	r3, r7, #28
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4831      	ldr	r0, [pc, #196]	; (8001f24 <_ZL12MX_GPIO_Initv+0x258>)
 8001e60:	f004 f872 	bl	8005f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	482a      	ldr	r0, [pc, #168]	; (8001f28 <_ZL12MX_GPIO_Initv+0x25c>)
 8001e7e:	f004 f863 	bl	8005f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4824      	ldr	r0, [pc, #144]	; (8001f2c <_ZL12MX_GPIO_Initv+0x260>)
 8001e9c:	f004 f854 	bl	8005f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_DE_Pin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8001ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	481d      	ldr	r0, [pc, #116]	; (8001f30 <_ZL12MX_GPIO_Initv+0x264>)
 8001eba:	f004 f845 	bl	8005f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001ebe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ec4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ec8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001ece:	f107 031c 	add.w	r3, r7, #28
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4817      	ldr	r0, [pc, #92]	; (8001f34 <_ZL12MX_GPIO_Initv+0x268>)
 8001ed6:	f004 f837 	bl	8005f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001eda:	23c0      	movs	r3, #192	; 0xc0
 8001edc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ede:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	480c      	ldr	r0, [pc, #48]	; (8001f20 <_ZL12MX_GPIO_Initv+0x254>)
 8001ef0:	f004 f82a 	bl	8005f48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2017      	movs	r0, #23
 8001efa:	f001 f8c0 	bl	800307e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001efe:	2017      	movs	r0, #23
 8001f00:	f001 f8d7 	bl	80030b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f04:	2200      	movs	r2, #0
 8001f06:	2100      	movs	r1, #0
 8001f08:	2028      	movs	r0, #40	; 0x28
 8001f0a:	f001 f8b8 	bl	800307e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f0e:	2028      	movs	r0, #40	; 0x28
 8001f10:	f001 f8cf 	bl	80030b2 <HAL_NVIC_EnableIRQ>

}
 8001f14:	bf00      	nop
 8001f16:	3730      	adds	r7, #48	; 0x30
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	58024400 	.word	0x58024400
 8001f20:	58020400 	.word	0x58020400
 8001f24:	58021000 	.word	0x58021000
 8001f28:	58020c00 	.word	0x58020c00
 8001f2c:	58020800 	.word	0x58020800
 8001f30:	58020000 	.word	0x58020000
 8001f34:	58021800 	.word	0x58021800

08001f38 <HAL_GPIO_EXTI_Callback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//	if (huart == &huart3) {
//		HAL_UART_Transmit_DMA(&huart3, UART3_RXBUFFER, 9);
//	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
//	}
	if(GPIO_Pin == Blue_Button_Pin_Pin)
	  {
//		HAL_GPIO_WritePin(LD1_GPIO_Port, GPIO_Pin, PinState)
	  }
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
	if (htim == &htim12) {
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
////		HAL_UART_Transmit_DMA(&huart7, (uint8_t*) UART3_RXBUFFER,
////				sizeof(UART3_RXBUFFER));
	}
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	4808      	ldr	r0, [pc, #32]	; (8001f90 <Error_Handler+0x2c>)
 8001f6e:	f004 f99b 	bl	80062a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2102      	movs	r1, #2
 8001f76:	4807      	ldr	r0, [pc, #28]	; (8001f94 <Error_Handler+0x30>)
 8001f78:	f004 f996 	bl	80062a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f82:	4803      	ldr	r0, [pc, #12]	; (8001f90 <Error_Handler+0x2c>)
 8001f84:	f004 f990 	bl	80062a8 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f88:	b672      	cpsid	i
}
 8001f8a:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f8c:	e7fe      	b.n	8001f8c <Error_Handler+0x28>
 8001f8e:	bf00      	nop
 8001f90:	58020400 	.word	0x58020400
 8001f94:	58021000 	.word	0x58021000

08001f98 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d11f      	bne.n	8001fe8 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d11a      	bne.n	8001fe8 <_Z41__static_initialization_and_destruction_0ii+0x50>
AMT21 encoderJ1(&huart4, 0xD4);
 8001fb2:	22d4      	movs	r2, #212	; 0xd4
 8001fb4:	4918      	ldr	r1, [pc, #96]	; (8002018 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001fb6:	4819      	ldr	r0, [pc, #100]	; (800201c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8001fb8:	f7fe fb66 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8001fbc:	22c4      	movs	r2, #196	; 0xc4
 8001fbe:	4916      	ldr	r1, [pc, #88]	; (8002018 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8001fc0:	4817      	ldr	r0, [pc, #92]	; (8002020 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8001fc2:	f7fe fb61 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8001fc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fca:	9300      	str	r3, [sp, #0]
 8001fcc:	4b15      	ldr	r3, [pc, #84]	; (8002024 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8001fce:	2204      	movs	r2, #4
 8001fd0:	4915      	ldr	r1, [pc, #84]	; (8002028 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001fd2:	4816      	ldr	r0, [pc, #88]	; (800202c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001fd4:	f7fe fc36 	bl	8000844 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8001fd8:	2320      	movs	r3, #32
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	4b14      	ldr	r3, [pc, #80]	; (8002030 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	4914      	ldr	r1, [pc, #80]	; (8002034 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001fe2:	4815      	ldr	r0, [pc, #84]	; (8002038 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001fe4:	f7fe fc2e 	bl	8000844 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d110      	bne.n	8002010 <_Z41__static_initialization_and_destruction_0ii+0x78>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d10b      	bne.n	8002010 <_Z41__static_initialization_and_destruction_0ii+0x78>
 8001ff8:	480f      	ldr	r0, [pc, #60]	; (8002038 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001ffa:	f7fe fc65 	bl	80008c8 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8001ffe:	480b      	ldr	r0, [pc, #44]	; (800202c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002000:	f7fe fc62 	bl	80008c8 <_ZN7StepperD1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8002004:	4806      	ldr	r0, [pc, #24]	; (8002020 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002006:	f7fe fb53 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 800200a:	4804      	ldr	r0, [pc, #16]	; (800201c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800200c:	f7fe fb50 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	240004bc 	.word	0x240004bc
 800201c:	240008c8 	.word	0x240008c8
 8002020:	240008dc 	.word	0x240008dc
 8002024:	58021000 	.word	0x58021000
 8002028:	240002a8 	.word	0x240002a8
 800202c:	240008f0 	.word	0x240008f0
 8002030:	58020400 	.word	0x58020400
 8002034:	24000340 	.word	0x24000340
 8002038:	24000918 	.word	0x24000918

0800203c <_GLOBAL__sub_I_hcrc>:
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
 8002040:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002044:	2001      	movs	r0, #1
 8002046:	f7ff ffa7 	bl	8001f98 <_Z41__static_initialization_and_destruction_0ii>
 800204a:	bd80      	pop	{r7, pc}

0800204c <_GLOBAL__sub_D_hcrc>:
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
 8002050:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002054:	2000      	movs	r0, #0
 8002056:	f7ff ff9f 	bl	8001f98 <_Z41__static_initialization_and_destruction_0ii>
 800205a:	bd80      	pop	{r7, pc}

0800205c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002062:	4b0a      	ldr	r3, [pc, #40]	; (800208c <HAL_MspInit+0x30>)
 8002064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002068:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_MspInit+0x30>)
 800206a:	f043 0302 	orr.w	r3, r3, #2
 800206e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_MspInit+0x30>)
 8002074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	607b      	str	r3, [r7, #4]
 800207e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	58024400 	.word	0x58024400

08002090 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0b      	ldr	r2, [pc, #44]	; (80020cc <HAL_CRC_MspInit+0x3c>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10e      	bne.n	80020c0 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80020a2:	4b0b      	ldr	r3, [pc, #44]	; (80020d0 <HAL_CRC_MspInit+0x40>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a8:	4a09      	ldr	r2, [pc, #36]	; (80020d0 <HAL_CRC_MspInit+0x40>)
 80020aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b2:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <HAL_CRC_MspInit+0x40>)
 80020b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	58024c00 	.word	0x58024c00
 80020d0:	58024400 	.word	0x58024400

080020d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b0b8      	sub	sp, #224	; 0xe0
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	22bc      	movs	r2, #188	; 0xbc
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f00a f843 	bl	800c180 <memset>
  if(hspi->Instance==SPI3)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a25      	ldr	r2, [pc, #148]	; (8002194 <HAL_SPI_MspInit+0xc0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d142      	bne.n	800218a <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002108:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800210a:	2300      	movs	r3, #0
 800210c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800210e:	f107 0310 	add.w	r3, r7, #16
 8002112:	4618      	mov	r0, r3
 8002114:	f005 f908 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800211e:	f7ff ff21 	bl	8001f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002122:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_SPI_MspInit+0xc4>)
 8002124:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002128:	4a1b      	ldr	r2, [pc, #108]	; (8002198 <HAL_SPI_MspInit+0xc4>)
 800212a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800212e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_SPI_MspInit+0xc4>)
 8002134:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002140:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_SPI_MspInit+0xc4>)
 8002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002146:	4a14      	ldr	r2, [pc, #80]	; (8002198 <HAL_SPI_MspInit+0xc4>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_SPI_MspInit+0xc4>)
 8002152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002156:	f003 0304 	and.w	r3, r3, #4
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800215e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002162:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002178:	2306      	movs	r3, #6
 800217a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002182:	4619      	mov	r1, r3
 8002184:	4805      	ldr	r0, [pc, #20]	; (800219c <HAL_SPI_MspInit+0xc8>)
 8002186:	f003 fedf 	bl	8005f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800218a:	bf00      	nop
 800218c:	37e0      	adds	r7, #224	; 0xe0
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40003c00 	.word	0x40003c00
 8002198:	58024400 	.word	0x58024400
 800219c:	58020800 	.word	0x58020800

080021a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a51      	ldr	r2, [pc, #324]	; (80022f4 <HAL_TIM_Base_MspInit+0x154>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d10f      	bne.n	80021d2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021b2:	4b51      	ldr	r3, [pc, #324]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 80021b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021b8:	4a4f      	ldr	r2, [pc, #316]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021c2:	4b4d      	ldr	r3, [pc, #308]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 80021c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021c8:	f003 0301 	and.w	r3, r3, #1
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80021d0:	e08c      	b.n	80022ec <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM2)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021da:	d10f      	bne.n	80021fc <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021dc:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 80021de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021e2:	4a45      	ldr	r2, [pc, #276]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021ec:	4b42      	ldr	r3, [pc, #264]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 80021ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	623b      	str	r3, [r7, #32]
 80021f8:	6a3b      	ldr	r3, [r7, #32]
}
 80021fa:	e077      	b.n	80022ec <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM3)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a3e      	ldr	r2, [pc, #248]	; (80022fc <HAL_TIM_Base_MspInit+0x15c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d10f      	bne.n	8002226 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002206:	4b3c      	ldr	r3, [pc, #240]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 8002208:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800220c:	4a3a      	ldr	r2, [pc, #232]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 800220e:	f043 0302 	orr.w	r3, r3, #2
 8002212:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002216:	4b38      	ldr	r3, [pc, #224]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 8002218:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	69fb      	ldr	r3, [r7, #28]
}
 8002224:	e062      	b.n	80022ec <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM4)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a35      	ldr	r2, [pc, #212]	; (8002300 <HAL_TIM_Base_MspInit+0x160>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d10f      	bne.n	8002250 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002230:	4b31      	ldr	r3, [pc, #196]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 8002232:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002236:	4a30      	ldr	r2, [pc, #192]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 8002238:	f043 0304 	orr.w	r3, r3, #4
 800223c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002240:	4b2d      	ldr	r3, [pc, #180]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 8002242:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	69bb      	ldr	r3, [r7, #24]
}
 800224e:	e04d      	b.n	80022ec <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM5)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2b      	ldr	r2, [pc, #172]	; (8002304 <HAL_TIM_Base_MspInit+0x164>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d117      	bne.n	800228a <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800225a:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 800225c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002260:	4a25      	ldr	r2, [pc, #148]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 8002262:	f043 0308 	orr.w	r3, r3, #8
 8002266:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800226a:	4b23      	ldr	r3, [pc, #140]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 800226c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002278:	2200      	movs	r2, #0
 800227a:	2100      	movs	r1, #0
 800227c:	2032      	movs	r0, #50	; 0x32
 800227e:	f000 fefe 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002282:	2032      	movs	r0, #50	; 0x32
 8002284:	f000 ff15 	bl	80030b2 <HAL_NVIC_EnableIRQ>
}
 8002288:	e030      	b.n	80022ec <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM12)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <HAL_TIM_Base_MspInit+0x168>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d117      	bne.n	80022c4 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002294:	4b18      	ldr	r3, [pc, #96]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 8002296:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800229a:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 800229c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022a4:	4b14      	ldr	r3, [pc, #80]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 80022a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	202b      	movs	r0, #43	; 0x2b
 80022b8:	f000 fee1 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80022bc:	202b      	movs	r0, #43	; 0x2b
 80022be:	f000 fef8 	bl	80030b2 <HAL_NVIC_EnableIRQ>
}
 80022c2:	e013      	b.n	80022ec <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM15)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a10      	ldr	r2, [pc, #64]	; (800230c <HAL_TIM_Base_MspInit+0x16c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10e      	bne.n	80022ec <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80022ce:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 80022d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022d4:	4a08      	ldr	r2, [pc, #32]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 80022d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_TIM_Base_MspInit+0x158>)
 80022e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80022e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	bf00      	nop
 80022ee:	3728      	adds	r7, #40	; 0x28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40010000 	.word	0x40010000
 80022f8:	58024400 	.word	0x58024400
 80022fc:	40000400 	.word	0x40000400
 8002300:	40000800 	.word	0x40000800
 8002304:	40000c00 	.word	0x40000c00
 8002308:	40001800 	.word	0x40001800
 800230c:	40014000 	.word	0x40014000

08002310 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08c      	sub	sp, #48	; 0x30
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 031c 	add.w	r3, r7, #28
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a5e      	ldr	r2, [pc, #376]	; (80024a8 <HAL_TIM_MspPostInit+0x198>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d120      	bne.n	8002374 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002332:	4b5e      	ldr	r3, [pc, #376]	; (80024ac <HAL_TIM_MspPostInit+0x19c>)
 8002334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002338:	4a5c      	ldr	r2, [pc, #368]	; (80024ac <HAL_TIM_MspPostInit+0x19c>)
 800233a:	f043 0310 	orr.w	r3, r3, #16
 800233e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002342:	4b5a      	ldr	r3, [pc, #360]	; (80024ac <HAL_TIM_MspPostInit+0x19c>)
 8002344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	61bb      	str	r3, [r7, #24]
 800234e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8002350:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002362:	2301      	movs	r3, #1
 8002364:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8002366:	f107 031c 	add.w	r3, r7, #28
 800236a:	4619      	mov	r1, r3
 800236c:	4850      	ldr	r0, [pc, #320]	; (80024b0 <HAL_TIM_MspPostInit+0x1a0>)
 800236e:	f003 fdeb 	bl	8005f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002372:	e094      	b.n	800249e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800237c:	d120      	bne.n	80023c0 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800237e:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <HAL_TIM_MspPostInit+0x19c>)
 8002380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002384:	4a49      	ldr	r2, [pc, #292]	; (80024ac <HAL_TIM_MspPostInit+0x19c>)
 8002386:	f043 0302 	orr.w	r3, r3, #2
 800238a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800238e:	4b47      	ldr	r3, [pc, #284]	; (80024ac <HAL_TIM_MspPostInit+0x19c>)
 8002390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 800239c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023ae:	2301      	movs	r3, #1
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 80023b2:	f107 031c 	add.w	r3, r7, #28
 80023b6:	4619      	mov	r1, r3
 80023b8:	483e      	ldr	r0, [pc, #248]	; (80024b4 <HAL_TIM_MspPostInit+0x1a4>)
 80023ba:	f003 fdc5 	bl	8005f48 <HAL_GPIO_Init>
}
 80023be:	e06e      	b.n	800249e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a3c      	ldr	r2, [pc, #240]	; (80024b8 <HAL_TIM_MspPostInit+0x1a8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d11f      	bne.n	800240a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ca:	4b38      	ldr	r3, [pc, #224]	; (80024ac <HAL_TIM_MspPostInit+0x19c>)
 80023cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d0:	4a36      	ldr	r2, [pc, #216]	; (80024ac <HAL_TIM_MspPostInit+0x19c>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023da:	4b34      	ldr	r3, [pc, #208]	; (80024ac <HAL_TIM_MspPostInit+0x19c>)
 80023dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023e0:	f003 0301 	and.w	r3, r3, #1
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 80023e8:	2340      	movs	r3, #64	; 0x40
 80023ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023f8:	2302      	movs	r3, #2
 80023fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 80023fc:	f107 031c 	add.w	r3, r7, #28
 8002400:	4619      	mov	r1, r3
 8002402:	482e      	ldr	r0, [pc, #184]	; (80024bc <HAL_TIM_MspPostInit+0x1ac>)
 8002404:	f003 fda0 	bl	8005f48 <HAL_GPIO_Init>
}
 8002408:	e049      	b.n	800249e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a2c      	ldr	r2, [pc, #176]	; (80024c0 <HAL_TIM_MspPostInit+0x1b0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d120      	bne.n	8002456 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002414:	4b25      	ldr	r3, [pc, #148]	; (80024ac <HAL_TIM_MspPostInit+0x19c>)
 8002416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800241a:	4a24      	ldr	r2, [pc, #144]	; (80024ac <HAL_TIM_MspPostInit+0x19c>)
 800241c:	f043 0302 	orr.w	r3, r3, #2
 8002420:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002424:	4b21      	ldr	r3, [pc, #132]	; (80024ac <HAL_TIM_MspPostInit+0x19c>)
 8002426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8002432:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	2302      	movs	r3, #2
 800243a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002444:	2302      	movs	r3, #2
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8002448:	f107 031c 	add.w	r3, r7, #28
 800244c:	4619      	mov	r1, r3
 800244e:	4819      	ldr	r0, [pc, #100]	; (80024b4 <HAL_TIM_MspPostInit+0x1a4>)
 8002450:	f003 fd7a 	bl	8005f48 <HAL_GPIO_Init>
}
 8002454:	e023      	b.n	800249e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <HAL_TIM_MspPostInit+0x1b4>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d11e      	bne.n	800249e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_TIM_MspPostInit+0x19c>)
 8002462:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002466:	4a11      	ldr	r2, [pc, #68]	; (80024ac <HAL_TIM_MspPostInit+0x19c>)
 8002468:	f043 0310 	orr.w	r3, r3, #16
 800246c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <HAL_TIM_MspPostInit+0x19c>)
 8002472:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800247e:	2340      	movs	r3, #64	; 0x40
 8002480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800248e:	2304      	movs	r3, #4
 8002490:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8002492:	f107 031c 	add.w	r3, r7, #28
 8002496:	4619      	mov	r1, r3
 8002498:	4805      	ldr	r0, [pc, #20]	; (80024b0 <HAL_TIM_MspPostInit+0x1a0>)
 800249a:	f003 fd55 	bl	8005f48 <HAL_GPIO_Init>
}
 800249e:	bf00      	nop
 80024a0:	3730      	adds	r7, #48	; 0x30
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40010000 	.word	0x40010000
 80024ac:	58024400 	.word	0x58024400
 80024b0:	58021000 	.word	0x58021000
 80024b4:	58020400 	.word	0x58020400
 80024b8:	40000400 	.word	0x40000400
 80024bc:	58020000 	.word	0x58020000
 80024c0:	40000800 	.word	0x40000800
 80024c4:	40014000 	.word	0x40014000

080024c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b0bc      	sub	sp, #240	; 0xf0
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024e0:	f107 0320 	add.w	r3, r7, #32
 80024e4:	22bc      	movs	r2, #188	; 0xbc
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f009 fe49 	bl	800c180 <memset>
  if(huart->Instance==UART4)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4aa1      	ldr	r2, [pc, #644]	; (8002778 <HAL_UART_MspInit+0x2b0>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	f040 80b7 	bne.w	8002668 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80024fa:	2302      	movs	r3, #2
 80024fc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024fe:	2300      	movs	r3, #0
 8002500:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002504:	f107 0320 	add.w	r3, r7, #32
 8002508:	4618      	mov	r0, r3
 800250a:	f004 ff0d 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002514:	f7ff fd26 	bl	8001f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002518:	4b98      	ldr	r3, [pc, #608]	; (800277c <HAL_UART_MspInit+0x2b4>)
 800251a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800251e:	4a97      	ldr	r2, [pc, #604]	; (800277c <HAL_UART_MspInit+0x2b4>)
 8002520:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002524:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002528:	4b94      	ldr	r3, [pc, #592]	; (800277c <HAL_UART_MspInit+0x2b4>)
 800252a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800252e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002532:	61fb      	str	r3, [r7, #28]
 8002534:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002536:	4b91      	ldr	r3, [pc, #580]	; (800277c <HAL_UART_MspInit+0x2b4>)
 8002538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253c:	4a8f      	ldr	r2, [pc, #572]	; (800277c <HAL_UART_MspInit+0x2b4>)
 800253e:	f043 0308 	orr.w	r3, r3, #8
 8002542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002546:	4b8d      	ldr	r3, [pc, #564]	; (800277c <HAL_UART_MspInit+0x2b4>)
 8002548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002554:	2303      	movs	r3, #3
 8002556:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800256c:	2308      	movs	r3, #8
 800256e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002572:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002576:	4619      	mov	r1, r3
 8002578:	4881      	ldr	r0, [pc, #516]	; (8002780 <HAL_UART_MspInit+0x2b8>)
 800257a:	f003 fce5 	bl	8005f48 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 800257e:	4b81      	ldr	r3, [pc, #516]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 8002580:	4a81      	ldr	r2, [pc, #516]	; (8002788 <HAL_UART_MspInit+0x2c0>)
 8002582:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8002584:	4b7f      	ldr	r3, [pc, #508]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 8002586:	223f      	movs	r2, #63	; 0x3f
 8002588:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800258a:	4b7e      	ldr	r3, [pc, #504]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 800258c:	2200      	movs	r2, #0
 800258e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002590:	4b7c      	ldr	r3, [pc, #496]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 8002592:	2200      	movs	r2, #0
 8002594:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002596:	4b7b      	ldr	r3, [pc, #492]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 8002598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800259c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800259e:	4b79      	ldr	r3, [pc, #484]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025a4:	4b77      	ldr	r3, [pc, #476]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80025aa:	4b76      	ldr	r3, [pc, #472]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025b0:	4b74      	ldr	r3, [pc, #464]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80025b6:	4b73      	ldr	r3, [pc, #460]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 80025b8:	2204      	movs	r2, #4
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80025bc:	4b71      	ldr	r3, [pc, #452]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 80025be:	2203      	movs	r2, #3
 80025c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80025c2:	4b70      	ldr	r3, [pc, #448]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80025c8:	4b6e      	ldr	r3, [pc, #440]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80025ce:	486d      	ldr	r0, [pc, #436]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 80025d0:	f000 fe80 	bl	80032d4 <HAL_DMA_Init>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80025da:	f7ff fcc3 	bl	8001f64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a68      	ldr	r2, [pc, #416]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 80025e2:	67da      	str	r2, [r3, #124]	; 0x7c
 80025e4:	4a67      	ldr	r2, [pc, #412]	; (8002784 <HAL_UART_MspInit+0x2bc>)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80025ea:	4b68      	ldr	r3, [pc, #416]	; (800278c <HAL_UART_MspInit+0x2c4>)
 80025ec:	4a68      	ldr	r2, [pc, #416]	; (8002790 <HAL_UART_MspInit+0x2c8>)
 80025ee:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80025f0:	4b66      	ldr	r3, [pc, #408]	; (800278c <HAL_UART_MspInit+0x2c4>)
 80025f2:	2240      	movs	r2, #64	; 0x40
 80025f4:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <HAL_UART_MspInit+0x2c4>)
 80025f8:	2240      	movs	r2, #64	; 0x40
 80025fa:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025fc:	4b63      	ldr	r3, [pc, #396]	; (800278c <HAL_UART_MspInit+0x2c4>)
 80025fe:	2200      	movs	r2, #0
 8002600:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002602:	4b62      	ldr	r3, [pc, #392]	; (800278c <HAL_UART_MspInit+0x2c4>)
 8002604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002608:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800260a:	4b60      	ldr	r3, [pc, #384]	; (800278c <HAL_UART_MspInit+0x2c4>)
 800260c:	2200      	movs	r2, #0
 800260e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002610:	4b5e      	ldr	r3, [pc, #376]	; (800278c <HAL_UART_MspInit+0x2c4>)
 8002612:	2200      	movs	r2, #0
 8002614:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002616:	4b5d      	ldr	r3, [pc, #372]	; (800278c <HAL_UART_MspInit+0x2c4>)
 8002618:	2200      	movs	r2, #0
 800261a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800261c:	4b5b      	ldr	r3, [pc, #364]	; (800278c <HAL_UART_MspInit+0x2c4>)
 800261e:	2200      	movs	r2, #0
 8002620:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002622:	4b5a      	ldr	r3, [pc, #360]	; (800278c <HAL_UART_MspInit+0x2c4>)
 8002624:	2204      	movs	r2, #4
 8002626:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002628:	4b58      	ldr	r3, [pc, #352]	; (800278c <HAL_UART_MspInit+0x2c4>)
 800262a:	2203      	movs	r2, #3
 800262c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800262e:	4b57      	ldr	r3, [pc, #348]	; (800278c <HAL_UART_MspInit+0x2c4>)
 8002630:	2200      	movs	r2, #0
 8002632:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002634:	4b55      	ldr	r3, [pc, #340]	; (800278c <HAL_UART_MspInit+0x2c4>)
 8002636:	2200      	movs	r2, #0
 8002638:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800263a:	4854      	ldr	r0, [pc, #336]	; (800278c <HAL_UART_MspInit+0x2c4>)
 800263c:	f000 fe4a 	bl	80032d4 <HAL_DMA_Init>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 8002646:	f7ff fc8d 	bl	8001f64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4f      	ldr	r2, [pc, #316]	; (800278c <HAL_UART_MspInit+0x2c4>)
 800264e:	679a      	str	r2, [r3, #120]	; 0x78
 8002650:	4a4e      	ldr	r2, [pc, #312]	; (800278c <HAL_UART_MspInit+0x2c4>)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	2034      	movs	r0, #52	; 0x34
 800265c:	f000 fd0f 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002660:	2034      	movs	r0, #52	; 0x34
 8002662:	f000 fd26 	bl	80030b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002666:	e154      	b.n	8002912 <HAL_UART_MspInit+0x44a>
  else if(huart->Instance==UART7)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a49      	ldr	r2, [pc, #292]	; (8002794 <HAL_UART_MspInit+0x2cc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	f040 8098 	bne.w	80027a4 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002674:	2302      	movs	r3, #2
 8002676:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002678:	2300      	movs	r3, #0
 800267a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800267e:	f107 0320 	add.w	r3, r7, #32
 8002682:	4618      	mov	r0, r3
 8002684:	f004 fe50 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 800268e:	f7ff fc69 	bl	8001f64 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002692:	4b3a      	ldr	r3, [pc, #232]	; (800277c <HAL_UART_MspInit+0x2b4>)
 8002694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002698:	4a38      	ldr	r2, [pc, #224]	; (800277c <HAL_UART_MspInit+0x2b4>)
 800269a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800269e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026a2:	4b36      	ldr	r3, [pc, #216]	; (800277c <HAL_UART_MspInit+0x2b4>)
 80026a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026b0:	4b32      	ldr	r3, [pc, #200]	; (800277c <HAL_UART_MspInit+0x2b4>)
 80026b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b6:	4a31      	ldr	r2, [pc, #196]	; (800277c <HAL_UART_MspInit+0x2b4>)
 80026b8:	f043 0310 	orr.w	r3, r3, #16
 80026bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026c0:	4b2e      	ldr	r3, [pc, #184]	; (800277c <HAL_UART_MspInit+0x2b4>)
 80026c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c6:	f003 0310 	and.w	r3, r3, #16
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80026ce:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80026d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d6:	2302      	movs	r3, #2
 80026d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026dc:	2300      	movs	r3, #0
 80026de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80026e8:	2307      	movs	r3, #7
 80026ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026f2:	4619      	mov	r1, r3
 80026f4:	4828      	ldr	r0, [pc, #160]	; (8002798 <HAL_UART_MspInit+0x2d0>)
 80026f6:	f003 fc27 	bl	8005f48 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <HAL_UART_MspInit+0x2d4>)
 80026fc:	4a28      	ldr	r2, [pc, #160]	; (80027a0 <HAL_UART_MspInit+0x2d8>)
 80026fe:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8002700:	4b26      	ldr	r3, [pc, #152]	; (800279c <HAL_UART_MspInit+0x2d4>)
 8002702:	2250      	movs	r2, #80	; 0x50
 8002704:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002706:	4b25      	ldr	r3, [pc, #148]	; (800279c <HAL_UART_MspInit+0x2d4>)
 8002708:	2240      	movs	r2, #64	; 0x40
 800270a:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_UART_MspInit+0x2d4>)
 800270e:	2200      	movs	r2, #0
 8002710:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002712:	4b22      	ldr	r3, [pc, #136]	; (800279c <HAL_UART_MspInit+0x2d4>)
 8002714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002718:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800271a:	4b20      	ldr	r3, [pc, #128]	; (800279c <HAL_UART_MspInit+0x2d4>)
 800271c:	2200      	movs	r2, #0
 800271e:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002720:	4b1e      	ldr	r3, [pc, #120]	; (800279c <HAL_UART_MspInit+0x2d4>)
 8002722:	2200      	movs	r2, #0
 8002724:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8002726:	4b1d      	ldr	r3, [pc, #116]	; (800279c <HAL_UART_MspInit+0x2d4>)
 8002728:	2200      	movs	r2, #0
 800272a:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 800272c:	4b1b      	ldr	r3, [pc, #108]	; (800279c <HAL_UART_MspInit+0x2d4>)
 800272e:	2200      	movs	r2, #0
 8002730:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002732:	4b1a      	ldr	r3, [pc, #104]	; (800279c <HAL_UART_MspInit+0x2d4>)
 8002734:	2204      	movs	r2, #4
 8002736:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002738:	4b18      	ldr	r3, [pc, #96]	; (800279c <HAL_UART_MspInit+0x2d4>)
 800273a:	2203      	movs	r2, #3
 800273c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <HAL_UART_MspInit+0x2d4>)
 8002740:	2200      	movs	r2, #0
 8002742:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002744:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_UART_MspInit+0x2d4>)
 8002746:	2200      	movs	r2, #0
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800274a:	4814      	ldr	r0, [pc, #80]	; (800279c <HAL_UART_MspInit+0x2d4>)
 800274c:	f000 fdc2 	bl	80032d4 <HAL_DMA_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_UART_MspInit+0x292>
      Error_Handler();
 8002756:	f7ff fc05 	bl	8001f64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a0f      	ldr	r2, [pc, #60]	; (800279c <HAL_UART_MspInit+0x2d4>)
 800275e:	679a      	str	r2, [r3, #120]	; 0x78
 8002760:	4a0e      	ldr	r2, [pc, #56]	; (800279c <HAL_UART_MspInit+0x2d4>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	2052      	movs	r0, #82	; 0x52
 800276c:	f000 fc87 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002770:	2052      	movs	r0, #82	; 0x52
 8002772:	f000 fc9e 	bl	80030b2 <HAL_NVIC_EnableIRQ>
}
 8002776:	e0cc      	b.n	8002912 <HAL_UART_MspInit+0x44a>
 8002778:	40004c00 	.word	0x40004c00
 800277c:	58024400 	.word	0x58024400
 8002780:	58020c00 	.word	0x58020c00
 8002784:	2400066c 	.word	0x2400066c
 8002788:	40020058 	.word	0x40020058
 800278c:	240006e4 	.word	0x240006e4
 8002790:	40020070 	.word	0x40020070
 8002794:	40007800 	.word	0x40007800
 8002798:	58021000 	.word	0x58021000
 800279c:	2400075c 	.word	0x2400075c
 80027a0:	40020010 	.word	0x40020010
  else if(huart->Instance==USART3)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a5c      	ldr	r2, [pc, #368]	; (800291c <HAL_UART_MspInit+0x454>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	f040 80b1 	bne.w	8002912 <HAL_UART_MspInit+0x44a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027b0:	2302      	movs	r3, #2
 80027b2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80027b4:	2300      	movs	r3, #0
 80027b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ba:	f107 0320 	add.w	r3, r7, #32
 80027be:	4618      	mov	r0, r3
 80027c0:	f004 fdb2 	bl	8007328 <HAL_RCCEx_PeriphCLKConfig>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_UART_MspInit+0x306>
      Error_Handler();
 80027ca:	f7ff fbcb 	bl	8001f64 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80027ce:	4b54      	ldr	r3, [pc, #336]	; (8002920 <HAL_UART_MspInit+0x458>)
 80027d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027d4:	4a52      	ldr	r2, [pc, #328]	; (8002920 <HAL_UART_MspInit+0x458>)
 80027d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027da:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027de:	4b50      	ldr	r3, [pc, #320]	; (8002920 <HAL_UART_MspInit+0x458>)
 80027e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ec:	4b4c      	ldr	r3, [pc, #304]	; (8002920 <HAL_UART_MspInit+0x458>)
 80027ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027f2:	4a4b      	ldr	r2, [pc, #300]	; (8002920 <HAL_UART_MspInit+0x458>)
 80027f4:	f043 0308 	orr.w	r3, r3, #8
 80027f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027fc:	4b48      	ldr	r3, [pc, #288]	; (8002920 <HAL_UART_MspInit+0x458>)
 80027fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800280a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800280e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002824:	2307      	movs	r3, #7
 8002826:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800282a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800282e:	4619      	mov	r1, r3
 8002830:	483c      	ldr	r0, [pc, #240]	; (8002924 <HAL_UART_MspInit+0x45c>)
 8002832:	f003 fb89 	bl	8005f48 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002836:	4b3c      	ldr	r3, [pc, #240]	; (8002928 <HAL_UART_MspInit+0x460>)
 8002838:	4a3c      	ldr	r2, [pc, #240]	; (800292c <HAL_UART_MspInit+0x464>)
 800283a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800283c:	4b3a      	ldr	r3, [pc, #232]	; (8002928 <HAL_UART_MspInit+0x460>)
 800283e:	222d      	movs	r2, #45	; 0x2d
 8002840:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002842:	4b39      	ldr	r3, [pc, #228]	; (8002928 <HAL_UART_MspInit+0x460>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002848:	4b37      	ldr	r3, [pc, #220]	; (8002928 <HAL_UART_MspInit+0x460>)
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <HAL_UART_MspInit+0x460>)
 8002850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002854:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002856:	4b34      	ldr	r3, [pc, #208]	; (8002928 <HAL_UART_MspInit+0x460>)
 8002858:	2200      	movs	r2, #0
 800285a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800285c:	4b32      	ldr	r3, [pc, #200]	; (8002928 <HAL_UART_MspInit+0x460>)
 800285e:	2200      	movs	r2, #0
 8002860:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002862:	4b31      	ldr	r3, [pc, #196]	; (8002928 <HAL_UART_MspInit+0x460>)
 8002864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002868:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800286a:	4b2f      	ldr	r3, [pc, #188]	; (8002928 <HAL_UART_MspInit+0x460>)
 800286c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002870:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002872:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <HAL_UART_MspInit+0x460>)
 8002874:	2200      	movs	r2, #0
 8002876:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002878:	482b      	ldr	r0, [pc, #172]	; (8002928 <HAL_UART_MspInit+0x460>)
 800287a:	f000 fd2b 	bl	80032d4 <HAL_DMA_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 8002884:	f7ff fb6e 	bl	8001f64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a27      	ldr	r2, [pc, #156]	; (8002928 <HAL_UART_MspInit+0x460>)
 800288c:	67da      	str	r2, [r3, #124]	; 0x7c
 800288e:	4a26      	ldr	r2, [pc, #152]	; (8002928 <HAL_UART_MspInit+0x460>)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8002894:	4b26      	ldr	r3, [pc, #152]	; (8002930 <HAL_UART_MspInit+0x468>)
 8002896:	4a27      	ldr	r2, [pc, #156]	; (8002934 <HAL_UART_MspInit+0x46c>)
 8002898:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800289a:	4b25      	ldr	r3, [pc, #148]	; (8002930 <HAL_UART_MspInit+0x468>)
 800289c:	222e      	movs	r2, #46	; 0x2e
 800289e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028a0:	4b23      	ldr	r3, [pc, #140]	; (8002930 <HAL_UART_MspInit+0x468>)
 80028a2:	2240      	movs	r2, #64	; 0x40
 80028a4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a6:	4b22      	ldr	r3, [pc, #136]	; (8002930 <HAL_UART_MspInit+0x468>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028ac:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_UART_MspInit+0x468>)
 80028ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028b4:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <HAL_UART_MspInit+0x468>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028ba:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <HAL_UART_MspInit+0x468>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <HAL_UART_MspInit+0x468>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028c6:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <HAL_UART_MspInit+0x468>)
 80028c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028cc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_UART_MspInit+0x468>)
 80028d0:	2204      	movs	r2, #4
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80028d4:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_UART_MspInit+0x468>)
 80028d6:	2203      	movs	r2, #3
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80028da:	4b15      	ldr	r3, [pc, #84]	; (8002930 <HAL_UART_MspInit+0x468>)
 80028dc:	2200      	movs	r2, #0
 80028de:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <HAL_UART_MspInit+0x468>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80028e6:	4812      	ldr	r0, [pc, #72]	; (8002930 <HAL_UART_MspInit+0x468>)
 80028e8:	f000 fcf4 	bl	80032d4 <HAL_DMA_Init>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <HAL_UART_MspInit+0x42e>
      Error_Handler();
 80028f2:	f7ff fb37 	bl	8001f64 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a0d      	ldr	r2, [pc, #52]	; (8002930 <HAL_UART_MspInit+0x468>)
 80028fa:	679a      	str	r2, [r3, #120]	; 0x78
 80028fc:	4a0c      	ldr	r2, [pc, #48]	; (8002930 <HAL_UART_MspInit+0x468>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	2100      	movs	r1, #0
 8002906:	2027      	movs	r0, #39	; 0x27
 8002908:	f000 fbb9 	bl	800307e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800290c:	2027      	movs	r0, #39	; 0x27
 800290e:	f000 fbd0 	bl	80030b2 <HAL_NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	37f0      	adds	r7, #240	; 0xf0
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40004800 	.word	0x40004800
 8002920:	58024400 	.word	0x58024400
 8002924:	58020c00 	.word	0x58020c00
 8002928:	240007d4 	.word	0x240007d4
 800292c:	40020028 	.word	0x40020028
 8002930:	2400084c 	.word	0x2400084c
 8002934:	40020040 	.word	0x40020040

08002938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800293c:	e7fe      	b.n	800293c <NMI_Handler+0x4>

0800293e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293e:	b480      	push	{r7}
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002942:	e7fe      	b.n	8002942 <HardFault_Handler+0x4>

08002944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002948:	e7fe      	b.n	8002948 <MemManage_Handler+0x4>

0800294a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800294e:	e7fe      	b.n	800294e <BusFault_Handler+0x4>

08002950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002954:	e7fe      	b.n	8002954 <UsageFault_Handler+0x4>

08002956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002956:	b480      	push	{r7}
 8002958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800295a:	bf00      	nop
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002984:	f000 fa74 	bl	8002e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002988:	f000 fbad 	bl	80030e6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}

08002990 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <DMA1_Stream0_IRQHandler+0x10>)
 8002996:	f001 ffc5 	bl	8004924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	2400075c 	.word	0x2400075c

080029a4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <DMA1_Stream1_IRQHandler+0x10>)
 80029aa:	f001 ffbb 	bl	8004924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	240007d4 	.word	0x240007d4

080029b8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <DMA1_Stream2_IRQHandler+0x10>)
 80029be:	f001 ffb1 	bl	8004924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	2400084c 	.word	0x2400084c

080029cc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80029d0:	4802      	ldr	r0, [pc, #8]	; (80029dc <DMA1_Stream3_IRQHandler+0x10>)
 80029d2:	f001 ffa7 	bl	8004924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	2400066c 	.word	0x2400066c

080029e0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80029e4:	4802      	ldr	r0, [pc, #8]	; (80029f0 <DMA1_Stream4_IRQHandler+0x10>)
 80029e6:	f001 ff9d 	bl	8004924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	240006e4 	.word	0x240006e4

080029f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 80029f8:	2040      	movs	r0, #64	; 0x40
 80029fa:	f003 fc88 	bl	800630e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 80029fe:	2080      	movs	r0, #128	; 0x80
 8002a00:	f003 fc85 	bl	800630e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a0c:	4802      	ldr	r0, [pc, #8]	; (8002a18 <USART3_IRQHandler+0x10>)
 8002a0e:	f007 fdd3 	bl	800a5b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a12:	bf00      	nop
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	240005dc 	.word	0x240005dc

08002a1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8002a20:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002a24:	f003 fc73 	bl	800630e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8002a28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002a2c:	f003 fc6f 	bl	800630e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8002a30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a34:	f003 fc6b 	bl	800630e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8002a38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a3c:	f003 fc67 	bl	800630e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002a4a:	f006 fab7 	bl	8008fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	24000424 	.word	0x24000424

08002a58 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a5c:	4802      	ldr	r0, [pc, #8]	; (8002a68 <TIM5_IRQHandler+0x10>)
 8002a5e:	f006 faad 	bl	8008fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	240003d8 	.word	0x240003d8

08002a6c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002a70:	4802      	ldr	r0, [pc, #8]	; (8002a7c <UART4_IRQHandler+0x10>)
 8002a72:	f007 fda1 	bl	800a5b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	240004bc 	.word	0x240004bc

08002a80 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002a84:	4802      	ldr	r0, [pc, #8]	; (8002a90 <UART7_IRQHandler+0x10>)
 8002a86:	f007 fd97 	bl	800a5b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	2400054c 	.word	0x2400054c

08002a94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a94:	b480      	push	{r7}
 8002a96:	af00      	add	r7, sp, #0
	return 1;
 8002a98:	2301      	movs	r3, #1
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <_kill>:

int _kill(int pid, int sig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002aae:	f009 fb3d 	bl	800c12c <__errno>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2216      	movs	r2, #22
 8002ab6:	601a      	str	r2, [r3, #0]
	return -1;
 8002ab8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <_exit>:

void _exit (int status)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002acc:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f7ff ffe7 	bl	8002aa4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002ad6:	e7fe      	b.n	8002ad6 <_exit+0x12>

08002ad8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	e00a      	b.n	8002b00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002aea:	f3af 8000 	nop.w
 8002aee:	4601      	mov	r1, r0
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	1c5a      	adds	r2, r3, #1
 8002af4:	60ba      	str	r2, [r7, #8]
 8002af6:	b2ca      	uxtb	r2, r1
 8002af8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3301      	adds	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	dbf0      	blt.n	8002aea <_read+0x12>
	}

return len;
 8002b08:	687b      	ldr	r3, [r7, #4]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
 8002b22:	e009      	b.n	8002b38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	60ba      	str	r2, [r7, #8]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3301      	adds	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	dbf1      	blt.n	8002b24 <_write+0x12>
	}
	return len;
 8002b40:	687b      	ldr	r3, [r7, #4]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <_close>:

int _close(int file)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
	return -1;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b72:	605a      	str	r2, [r3, #4]
	return 0;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	370c      	adds	r7, #12
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr

08002b82 <_isatty>:

int _isatty(int file)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
	return 1;
 8002b8a:	2301      	movs	r3, #1
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
	return 0;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bbc:	4a14      	ldr	r2, [pc, #80]	; (8002c10 <_sbrk+0x5c>)
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <_sbrk+0x60>)
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc8:	4b13      	ldr	r3, [pc, #76]	; (8002c18 <_sbrk+0x64>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d102      	bne.n	8002bd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bd0:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <_sbrk+0x64>)
 8002bd2:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <_sbrk+0x68>)
 8002bd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <_sbrk+0x64>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4413      	add	r3, r2
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d207      	bcs.n	8002bf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002be4:	f009 faa2 	bl	800c12c <__errno>
 8002be8:	4603      	mov	r3, r0
 8002bea:	220c      	movs	r2, #12
 8002bec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bee:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf2:	e009      	b.n	8002c08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bf4:	4b08      	ldr	r3, [pc, #32]	; (8002c18 <_sbrk+0x64>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bfa:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <_sbrk+0x64>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4413      	add	r3, r2
 8002c02:	4a05      	ldr	r2, [pc, #20]	; (8002c18 <_sbrk+0x64>)
 8002c04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c06:	68fb      	ldr	r3, [r7, #12]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3718      	adds	r7, #24
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	24000f68 	.word	0x24000f68
 8002c14:	00000400 	.word	0x00000400
 8002c18:	24000948 	.word	0x24000948
 8002c1c:	24000968 	.word	0x24000968

08002c20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c24:	4b39      	ldr	r3, [pc, #228]	; (8002d0c <SystemInit+0xec>)
 8002c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2a:	4a38      	ldr	r2, [pc, #224]	; (8002d0c <SystemInit+0xec>)
 8002c2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c34:	4b36      	ldr	r3, [pc, #216]	; (8002d10 <SystemInit+0xf0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	2b06      	cmp	r3, #6
 8002c3e:	d807      	bhi.n	8002c50 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c40:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <SystemInit+0xf0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f023 030f 	bic.w	r3, r3, #15
 8002c48:	4a31      	ldr	r2, [pc, #196]	; (8002d10 <SystemInit+0xf0>)
 8002c4a:	f043 0307 	orr.w	r3, r3, #7
 8002c4e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002c50:	4b30      	ldr	r3, [pc, #192]	; (8002d14 <SystemInit+0xf4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a2f      	ldr	r2, [pc, #188]	; (8002d14 <SystemInit+0xf4>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002c5c:	4b2d      	ldr	r3, [pc, #180]	; (8002d14 <SystemInit+0xf4>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002c62:	4b2c      	ldr	r3, [pc, #176]	; (8002d14 <SystemInit+0xf4>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	492b      	ldr	r1, [pc, #172]	; (8002d14 <SystemInit+0xf4>)
 8002c68:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <SystemInit+0xf8>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002c6e:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <SystemInit+0xf0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d007      	beq.n	8002c8a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002c7a:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <SystemInit+0xf0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 030f 	bic.w	r3, r3, #15
 8002c82:	4a23      	ldr	r2, [pc, #140]	; (8002d10 <SystemInit+0xf0>)
 8002c84:	f043 0307 	orr.w	r3, r3, #7
 8002c88:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002c8a:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <SystemInit+0xf4>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002c90:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <SystemInit+0xf4>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002c96:	4b1f      	ldr	r3, [pc, #124]	; (8002d14 <SystemInit+0xf4>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <SystemInit+0xf4>)
 8002c9e:	4a1f      	ldr	r2, [pc, #124]	; (8002d1c <SystemInit+0xfc>)
 8002ca0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ca2:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <SystemInit+0xf4>)
 8002ca4:	4a1e      	ldr	r2, [pc, #120]	; (8002d20 <SystemInit+0x100>)
 8002ca6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <SystemInit+0xf4>)
 8002caa:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <SystemInit+0x104>)
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002cae:	4b19      	ldr	r3, [pc, #100]	; (8002d14 <SystemInit+0xf4>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <SystemInit+0xf4>)
 8002cb6:	4a1b      	ldr	r2, [pc, #108]	; (8002d24 <SystemInit+0x104>)
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002cba:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <SystemInit+0xf4>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002cc0:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <SystemInit+0xf4>)
 8002cc2:	4a18      	ldr	r2, [pc, #96]	; (8002d24 <SystemInit+0x104>)
 8002cc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <SystemInit+0xf4>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002ccc:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <SystemInit+0xf4>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <SystemInit+0xf4>)
 8002cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <SystemInit+0xf4>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <SystemInit+0x108>)
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <SystemInit+0x10c>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cea:	d202      	bcs.n	8002cf2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002cec:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <SystemInit+0x110>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002cf2:	4b10      	ldr	r3, [pc, #64]	; (8002d34 <SystemInit+0x114>)
 8002cf4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002cf8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cfa:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <SystemInit+0xec>)
 8002cfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d00:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00
 8002d10:	52002000 	.word	0x52002000
 8002d14:	58024400 	.word	0x58024400
 8002d18:	eaf6ed7f 	.word	0xeaf6ed7f
 8002d1c:	02020200 	.word	0x02020200
 8002d20:	01ff0000 	.word	0x01ff0000
 8002d24:	01010280 	.word	0x01010280
 8002d28:	5c001000 	.word	0x5c001000
 8002d2c:	ffff0000 	.word	0xffff0000
 8002d30:	51008108 	.word	0x51008108
 8002d34:	52004000 	.word	0x52004000

08002d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002d38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d3c:	f7ff ff70 	bl	8002c20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d40:	480c      	ldr	r0, [pc, #48]	; (8002d74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d42:	490d      	ldr	r1, [pc, #52]	; (8002d78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d44:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d48:	e002      	b.n	8002d50 <LoopCopyDataInit>

08002d4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d4e:	3304      	adds	r3, #4

08002d50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d54:	d3f9      	bcc.n	8002d4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d58:	4c0a      	ldr	r4, [pc, #40]	; (8002d84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d5c:	e001      	b.n	8002d62 <LoopFillZerobss>

08002d5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d60:	3204      	adds	r2, #4

08002d62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d64:	d3fb      	bcc.n	8002d5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d66:	f009 f9e7 	bl	800c138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d6a:	f7fe f89b 	bl	8000ea4 <main>
  bx  lr
 8002d6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d70:	24000f68 	.word	0x24000f68
  ldr r0, =_sdata
 8002d74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002d78:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8002d7c:	0800ee64 	.word	0x0800ee64
  ldr r2, =_sbss
 8002d80:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002d84:	24000968 	.word	0x24000968

08002d88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d88:	e7fe      	b.n	8002d88 <ADC3_IRQHandler>
	...

08002d8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d92:	2003      	movs	r0, #3
 8002d94:	f000 f968 	bl	8003068 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d98:	f004 f8f0 	bl	8006f7c <HAL_RCC_GetSysClockFreq>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_Init+0x68>)
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	0a1b      	lsrs	r3, r3, #8
 8002da4:	f003 030f 	and.w	r3, r3, #15
 8002da8:	4913      	ldr	r1, [pc, #76]	; (8002df8 <HAL_Init+0x6c>)
 8002daa:	5ccb      	ldrb	r3, [r1, r3]
 8002dac:	f003 031f 	and.w	r3, r3, #31
 8002db0:	fa22 f303 	lsr.w	r3, r2, r3
 8002db4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <HAL_Init+0x68>)
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	f003 030f 	and.w	r3, r3, #15
 8002dbe:	4a0e      	ldr	r2, [pc, #56]	; (8002df8 <HAL_Init+0x6c>)
 8002dc0:	5cd3      	ldrb	r3, [r2, r3]
 8002dc2:	f003 031f 	and.w	r3, r3, #31
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dcc:	4a0b      	ldr	r2, [pc, #44]	; (8002dfc <HAL_Init+0x70>)
 8002dce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002dd0:	4a0b      	ldr	r2, [pc, #44]	; (8002e00 <HAL_Init+0x74>)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f000 f814 	bl	8002e04 <HAL_InitTick>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e002      	b.n	8002dec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002de6:	f7ff f939 	bl	800205c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	58024400 	.word	0x58024400
 8002df8:	0800ea2c 	.word	0x0800ea2c
 8002dfc:	24000004 	.word	0x24000004
 8002e00:	24000000 	.word	0x24000000

08002e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002e0c:	4b15      	ldr	r3, [pc, #84]	; (8002e64 <HAL_InitTick+0x60>)
 8002e0e:	781b      	ldrb	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e021      	b.n	8002e5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002e18:	4b13      	ldr	r3, [pc, #76]	; (8002e68 <HAL_InitTick+0x64>)
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <HAL_InitTick+0x60>)
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	4619      	mov	r1, r3
 8002e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f94d 	bl	80030ce <HAL_SYSTICK_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e00e      	b.n	8002e5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b0f      	cmp	r3, #15
 8002e42:	d80a      	bhi.n	8002e5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e44:	2200      	movs	r2, #0
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	f000 f917 	bl	800307e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e50:	4a06      	ldr	r2, [pc, #24]	; (8002e6c <HAL_InitTick+0x68>)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	2400000c 	.word	0x2400000c
 8002e68:	24000000 	.word	0x24000000
 8002e6c:	24000008 	.word	0x24000008

08002e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e74:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_IncTick+0x20>)
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_IncTick+0x24>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4413      	add	r3, r2
 8002e80:	4a04      	ldr	r2, [pc, #16]	; (8002e94 <HAL_IncTick+0x24>)
 8002e82:	6013      	str	r3, [r2, #0]
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	2400000c 	.word	0x2400000c
 8002e94:	24000954 	.word	0x24000954

08002e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e9c:	4b03      	ldr	r3, [pc, #12]	; (8002eac <HAL_GetTick+0x14>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	24000954 	.word	0x24000954

08002eb0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002eb4:	4b03      	ldr	r3, [pc, #12]	; (8002ec4 <HAL_GetREVID+0x14>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0c1b      	lsrs	r3, r3, #16
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	5c001000 	.word	0x5c001000

08002ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <__NVIC_SetPriorityGrouping+0x40>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <__NVIC_SetPriorityGrouping+0x44>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef6:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <__NVIC_SetPriorityGrouping+0x40>)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	60d3      	str	r3, [r2, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00
 8002f0c:	05fa0000 	.word	0x05fa0000

08002f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f14:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <__NVIC_GetPriorityGrouping+0x18>)
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	0a1b      	lsrs	r3, r3, #8
 8002f1a:	f003 0307 	and.w	r3, r3, #7
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	db0b      	blt.n	8002f56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3e:	88fb      	ldrh	r3, [r7, #6]
 8002f40:	f003 021f 	and.w	r2, r3, #31
 8002f44:	4907      	ldr	r1, [pc, #28]	; (8002f64 <__NVIC_EnableIRQ+0x38>)
 8002f46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	e000e100 	.word	0xe000e100

08002f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	6039      	str	r1, [r7, #0]
 8002f72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002f74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	db0a      	blt.n	8002f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	490c      	ldr	r1, [pc, #48]	; (8002fb4 <__NVIC_SetPriority+0x4c>)
 8002f82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f86:	0112      	lsls	r2, r2, #4
 8002f88:	b2d2      	uxtb	r2, r2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f90:	e00a      	b.n	8002fa8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	4908      	ldr	r1, [pc, #32]	; (8002fb8 <__NVIC_SetPriority+0x50>)
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	f003 030f 	and.w	r3, r3, #15
 8002f9e:	3b04      	subs	r3, #4
 8002fa0:	0112      	lsls	r2, r2, #4
 8002fa2:	b2d2      	uxtb	r2, r2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	761a      	strb	r2, [r3, #24]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000e100 	.word	0xe000e100
 8002fb8:	e000ed00 	.word	0xe000ed00

08002fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 0307 	and.w	r3, r3, #7
 8002fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f1c3 0307 	rsb	r3, r3, #7
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	bf28      	it	cs
 8002fda:	2304      	movcs	r3, #4
 8002fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3304      	adds	r3, #4
 8002fe2:	2b06      	cmp	r3, #6
 8002fe4:	d902      	bls.n	8002fec <NVIC_EncodePriority+0x30>
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	3b03      	subs	r3, #3
 8002fea:	e000      	b.n	8002fee <NVIC_EncodePriority+0x32>
 8002fec:	2300      	movs	r3, #0
 8002fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	401a      	ands	r2, r3
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003004:	f04f 31ff 	mov.w	r1, #4294967295
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	43d9      	mvns	r1, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	4313      	orrs	r3, r2
         );
}
 8003016:	4618      	mov	r0, r3
 8003018:	3724      	adds	r7, #36	; 0x24
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
	...

08003024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003034:	d301      	bcc.n	800303a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003036:	2301      	movs	r3, #1
 8003038:	e00f      	b.n	800305a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800303a:	4a0a      	ldr	r2, [pc, #40]	; (8003064 <SysTick_Config+0x40>)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3b01      	subs	r3, #1
 8003040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003042:	210f      	movs	r1, #15
 8003044:	f04f 30ff 	mov.w	r0, #4294967295
 8003048:	f7ff ff8e 	bl	8002f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800304c:	4b05      	ldr	r3, [pc, #20]	; (8003064 <SysTick_Config+0x40>)
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003052:	4b04      	ldr	r3, [pc, #16]	; (8003064 <SysTick_Config+0x40>)
 8003054:	2207      	movs	r2, #7
 8003056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	e000e010 	.word	0xe000e010

08003068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f7ff ff29 	bl	8002ec8 <__NVIC_SetPriorityGrouping>
}
 8003076:	bf00      	nop
 8003078:	3708      	adds	r7, #8
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b086      	sub	sp, #24
 8003082:	af00      	add	r7, sp, #0
 8003084:	4603      	mov	r3, r0
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	607a      	str	r2, [r7, #4]
 800308a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800308c:	f7ff ff40 	bl	8002f10 <__NVIC_GetPriorityGrouping>
 8003090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	6978      	ldr	r0, [r7, #20]
 8003098:	f7ff ff90 	bl	8002fbc <NVIC_EncodePriority>
 800309c:	4602      	mov	r2, r0
 800309e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff5f 	bl	8002f68 <__NVIC_SetPriority>
}
 80030aa:	bf00      	nop
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff33 	bl	8002f2c <__NVIC_EnableIRQ>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ffa4 	bl	8003024 <SysTick_Config>
 80030dc:	4603      	mov	r3, r0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80030ea:	f000 f802 	bl	80030f2 <HAL_SYSTICK_Callback>
}
 80030ee:	bf00      	nop
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80030f2:	b480      	push	{r7}
 80030f4:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e054      	b.n	80031bc <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	7f5b      	ldrb	r3, [r3, #29]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d105      	bne.n	8003128 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7fe ffb4 	bl	8002090 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	791b      	ldrb	r3, [r3, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10c      	bne.n	8003150 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a22      	ldr	r2, [pc, #136]	; (80031c4 <HAL_CRC_Init+0xc4>)
 800313c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0218 	bic.w	r2, r2, #24
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	e00c      	b.n	800316a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6899      	ldr	r1, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	461a      	mov	r2, r3
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f834 	bl	80031c8 <HAL_CRCEx_Polynomial_Set>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e028      	b.n	80031bc <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	795b      	ldrb	r3, [r3, #5]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d105      	bne.n	800317e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f04f 32ff 	mov.w	r2, #4294967295
 800317a:	611a      	str	r2, [r3, #16]
 800317c:	e004      	b.n	8003188 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6912      	ldr	r2, [r2, #16]
 8003186:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695a      	ldr	r2, [r3, #20]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699a      	ldr	r2, [r3, #24]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2201      	movs	r2, #1
 80031b8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3708      	adds	r7, #8
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	04c11db7 	.word	0x04c11db7

080031c8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80031d8:	231f      	movs	r3, #31
 80031da:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031dc:	bf00      	nop
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	1e5a      	subs	r2, r3, #1
 80031e2:	613a      	str	r2, [r7, #16]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d009      	beq.n	80031fc <HAL_CRCEx_Polynomial_Set+0x34>
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_CRCEx_Polynomial_Set+0x16>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b18      	cmp	r3, #24
 8003200:	d846      	bhi.n	8003290 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003202:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003208:	08003297 	.word	0x08003297
 800320c:	08003291 	.word	0x08003291
 8003210:	08003291 	.word	0x08003291
 8003214:	08003291 	.word	0x08003291
 8003218:	08003291 	.word	0x08003291
 800321c:	08003291 	.word	0x08003291
 8003220:	08003291 	.word	0x08003291
 8003224:	08003291 	.word	0x08003291
 8003228:	08003285 	.word	0x08003285
 800322c:	08003291 	.word	0x08003291
 8003230:	08003291 	.word	0x08003291
 8003234:	08003291 	.word	0x08003291
 8003238:	08003291 	.word	0x08003291
 800323c:	08003291 	.word	0x08003291
 8003240:	08003291 	.word	0x08003291
 8003244:	08003291 	.word	0x08003291
 8003248:	08003279 	.word	0x08003279
 800324c:	08003291 	.word	0x08003291
 8003250:	08003291 	.word	0x08003291
 8003254:	08003291 	.word	0x08003291
 8003258:	08003291 	.word	0x08003291
 800325c:	08003291 	.word	0x08003291
 8003260:	08003291 	.word	0x08003291
 8003264:	08003291 	.word	0x08003291
 8003268:	0800326d 	.word	0x0800326d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b06      	cmp	r3, #6
 8003270:	d913      	bls.n	800329a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003276:	e010      	b.n	800329a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	2b07      	cmp	r3, #7
 800327c:	d90f      	bls.n	800329e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003282:	e00c      	b.n	800329e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	2b0f      	cmp	r3, #15
 8003288:	d90b      	bls.n	80032a2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800328e:	e008      	b.n	80032a2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	75fb      	strb	r3, [r7, #23]
      break;
 8003294:	e006      	b.n	80032a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003296:	bf00      	nop
 8003298:	e004      	b.n	80032a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80032a2:	bf00      	nop
  }
  if (status == HAL_OK)
 80032a4:	7dfb      	ldrb	r3, [r7, #23]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10d      	bne.n	80032c6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f023 0118 	bic.w	r1, r3, #24
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80032c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	371c      	adds	r7, #28
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80032dc:	f7ff fddc 	bl	8002e98 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e316      	b.n	800391a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a66      	ldr	r2, [pc, #408]	; (800348c <HAL_DMA_Init+0x1b8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d04a      	beq.n	800338c <HAL_DMA_Init+0xb8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a65      	ldr	r2, [pc, #404]	; (8003490 <HAL_DMA_Init+0x1bc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d045      	beq.n	800338c <HAL_DMA_Init+0xb8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a63      	ldr	r2, [pc, #396]	; (8003494 <HAL_DMA_Init+0x1c0>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d040      	beq.n	800338c <HAL_DMA_Init+0xb8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a62      	ldr	r2, [pc, #392]	; (8003498 <HAL_DMA_Init+0x1c4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d03b      	beq.n	800338c <HAL_DMA_Init+0xb8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a60      	ldr	r2, [pc, #384]	; (800349c <HAL_DMA_Init+0x1c8>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d036      	beq.n	800338c <HAL_DMA_Init+0xb8>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a5f      	ldr	r2, [pc, #380]	; (80034a0 <HAL_DMA_Init+0x1cc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d031      	beq.n	800338c <HAL_DMA_Init+0xb8>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a5d      	ldr	r2, [pc, #372]	; (80034a4 <HAL_DMA_Init+0x1d0>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d02c      	beq.n	800338c <HAL_DMA_Init+0xb8>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a5c      	ldr	r2, [pc, #368]	; (80034a8 <HAL_DMA_Init+0x1d4>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d027      	beq.n	800338c <HAL_DMA_Init+0xb8>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a5a      	ldr	r2, [pc, #360]	; (80034ac <HAL_DMA_Init+0x1d8>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d022      	beq.n	800338c <HAL_DMA_Init+0xb8>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a59      	ldr	r2, [pc, #356]	; (80034b0 <HAL_DMA_Init+0x1dc>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d01d      	beq.n	800338c <HAL_DMA_Init+0xb8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a57      	ldr	r2, [pc, #348]	; (80034b4 <HAL_DMA_Init+0x1e0>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d018      	beq.n	800338c <HAL_DMA_Init+0xb8>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a56      	ldr	r2, [pc, #344]	; (80034b8 <HAL_DMA_Init+0x1e4>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d013      	beq.n	800338c <HAL_DMA_Init+0xb8>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a54      	ldr	r2, [pc, #336]	; (80034bc <HAL_DMA_Init+0x1e8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d00e      	beq.n	800338c <HAL_DMA_Init+0xb8>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a53      	ldr	r2, [pc, #332]	; (80034c0 <HAL_DMA_Init+0x1ec>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d009      	beq.n	800338c <HAL_DMA_Init+0xb8>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a51      	ldr	r2, [pc, #324]	; (80034c4 <HAL_DMA_Init+0x1f0>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d004      	beq.n	800338c <HAL_DMA_Init+0xb8>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a50      	ldr	r2, [pc, #320]	; (80034c8 <HAL_DMA_Init+0x1f4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d101      	bne.n	8003390 <HAL_DMA_Init+0xbc>
 800338c:	2301      	movs	r3, #1
 800338e:	e000      	b.n	8003392 <HAL_DMA_Init+0xbe>
 8003390:	2300      	movs	r3, #0
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 813b 	beq.w	800360e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a37      	ldr	r2, [pc, #220]	; (800348c <HAL_DMA_Init+0x1b8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d04a      	beq.n	8003448 <HAL_DMA_Init+0x174>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a36      	ldr	r2, [pc, #216]	; (8003490 <HAL_DMA_Init+0x1bc>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d045      	beq.n	8003448 <HAL_DMA_Init+0x174>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a34      	ldr	r2, [pc, #208]	; (8003494 <HAL_DMA_Init+0x1c0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d040      	beq.n	8003448 <HAL_DMA_Init+0x174>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a33      	ldr	r2, [pc, #204]	; (8003498 <HAL_DMA_Init+0x1c4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d03b      	beq.n	8003448 <HAL_DMA_Init+0x174>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a31      	ldr	r2, [pc, #196]	; (800349c <HAL_DMA_Init+0x1c8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d036      	beq.n	8003448 <HAL_DMA_Init+0x174>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a30      	ldr	r2, [pc, #192]	; (80034a0 <HAL_DMA_Init+0x1cc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d031      	beq.n	8003448 <HAL_DMA_Init+0x174>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a2e      	ldr	r2, [pc, #184]	; (80034a4 <HAL_DMA_Init+0x1d0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d02c      	beq.n	8003448 <HAL_DMA_Init+0x174>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a2d      	ldr	r2, [pc, #180]	; (80034a8 <HAL_DMA_Init+0x1d4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d027      	beq.n	8003448 <HAL_DMA_Init+0x174>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a2b      	ldr	r2, [pc, #172]	; (80034ac <HAL_DMA_Init+0x1d8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d022      	beq.n	8003448 <HAL_DMA_Init+0x174>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a2a      	ldr	r2, [pc, #168]	; (80034b0 <HAL_DMA_Init+0x1dc>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d01d      	beq.n	8003448 <HAL_DMA_Init+0x174>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a28      	ldr	r2, [pc, #160]	; (80034b4 <HAL_DMA_Init+0x1e0>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d018      	beq.n	8003448 <HAL_DMA_Init+0x174>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a27      	ldr	r2, [pc, #156]	; (80034b8 <HAL_DMA_Init+0x1e4>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d013      	beq.n	8003448 <HAL_DMA_Init+0x174>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a25      	ldr	r2, [pc, #148]	; (80034bc <HAL_DMA_Init+0x1e8>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d00e      	beq.n	8003448 <HAL_DMA_Init+0x174>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a24      	ldr	r2, [pc, #144]	; (80034c0 <HAL_DMA_Init+0x1ec>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d009      	beq.n	8003448 <HAL_DMA_Init+0x174>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <HAL_DMA_Init+0x1f0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d004      	beq.n	8003448 <HAL_DMA_Init+0x174>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a21      	ldr	r2, [pc, #132]	; (80034c8 <HAL_DMA_Init+0x1f4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d108      	bne.n	800345a <HAL_DMA_Init+0x186>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f022 0201 	bic.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	e007      	b.n	800346a <HAL_DMA_Init+0x196>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0201 	bic.w	r2, r2, #1
 8003468:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800346a:	e02f      	b.n	80034cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800346c:	f7ff fd14 	bl	8002e98 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b05      	cmp	r3, #5
 8003478:	d928      	bls.n	80034cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2203      	movs	r2, #3
 8003484:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e246      	b.n	800391a <HAL_DMA_Init+0x646>
 800348c:	40020010 	.word	0x40020010
 8003490:	40020028 	.word	0x40020028
 8003494:	40020040 	.word	0x40020040
 8003498:	40020058 	.word	0x40020058
 800349c:	40020070 	.word	0x40020070
 80034a0:	40020088 	.word	0x40020088
 80034a4:	400200a0 	.word	0x400200a0
 80034a8:	400200b8 	.word	0x400200b8
 80034ac:	40020410 	.word	0x40020410
 80034b0:	40020428 	.word	0x40020428
 80034b4:	40020440 	.word	0x40020440
 80034b8:	40020458 	.word	0x40020458
 80034bc:	40020470 	.word	0x40020470
 80034c0:	40020488 	.word	0x40020488
 80034c4:	400204a0 	.word	0x400204a0
 80034c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1c8      	bne.n	800346c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4b83      	ldr	r3, [pc, #524]	; (80036f4 <HAL_DMA_Init+0x420>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80034f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	2b04      	cmp	r3, #4
 800351e:	d107      	bne.n	8003530 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	4313      	orrs	r3, r2
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003530:	4b71      	ldr	r3, [pc, #452]	; (80036f8 <HAL_DMA_Init+0x424>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b71      	ldr	r3, [pc, #452]	; (80036fc <HAL_DMA_Init+0x428>)
 8003536:	4013      	ands	r3, r2
 8003538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800353c:	d328      	bcc.n	8003590 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b28      	cmp	r3, #40	; 0x28
 8003544:	d903      	bls.n	800354e <HAL_DMA_Init+0x27a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b2e      	cmp	r3, #46	; 0x2e
 800354c:	d917      	bls.n	800357e <HAL_DMA_Init+0x2aa>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	2b3e      	cmp	r3, #62	; 0x3e
 8003554:	d903      	bls.n	800355e <HAL_DMA_Init+0x28a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b42      	cmp	r3, #66	; 0x42
 800355c:	d90f      	bls.n	800357e <HAL_DMA_Init+0x2aa>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b46      	cmp	r3, #70	; 0x46
 8003564:	d903      	bls.n	800356e <HAL_DMA_Init+0x29a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b48      	cmp	r3, #72	; 0x48
 800356c:	d907      	bls.n	800357e <HAL_DMA_Init+0x2aa>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b4e      	cmp	r3, #78	; 0x4e
 8003574:	d905      	bls.n	8003582 <HAL_DMA_Init+0x2ae>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b52      	cmp	r3, #82	; 0x52
 800357c:	d801      	bhi.n	8003582 <HAL_DMA_Init+0x2ae>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <HAL_DMA_Init+0x2b0>
 8003582:	2300      	movs	r3, #0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800358e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	f023 0307 	bic.w	r3, r3, #7
 80035a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d117      	bne.n	80035ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00e      	beq.n	80035ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f002 fb31 	bl	8005c34 <DMA_CheckFifoParam>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2240      	movs	r2, #64	; 0x40
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e197      	b.n	800391a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f002 fa6c 	bl	8005ad0 <DMA_CalcBaseAndBitshift>
 80035f8:	4603      	mov	r3, r0
 80035fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	223f      	movs	r2, #63	; 0x3f
 8003606:	409a      	lsls	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	e0cd      	b.n	80037aa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a3b      	ldr	r2, [pc, #236]	; (8003700 <HAL_DMA_Init+0x42c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d022      	beq.n	800365e <HAL_DMA_Init+0x38a>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a39      	ldr	r2, [pc, #228]	; (8003704 <HAL_DMA_Init+0x430>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d01d      	beq.n	800365e <HAL_DMA_Init+0x38a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a38      	ldr	r2, [pc, #224]	; (8003708 <HAL_DMA_Init+0x434>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d018      	beq.n	800365e <HAL_DMA_Init+0x38a>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a36      	ldr	r2, [pc, #216]	; (800370c <HAL_DMA_Init+0x438>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d013      	beq.n	800365e <HAL_DMA_Init+0x38a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a35      	ldr	r2, [pc, #212]	; (8003710 <HAL_DMA_Init+0x43c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d00e      	beq.n	800365e <HAL_DMA_Init+0x38a>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a33      	ldr	r2, [pc, #204]	; (8003714 <HAL_DMA_Init+0x440>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d009      	beq.n	800365e <HAL_DMA_Init+0x38a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a32      	ldr	r2, [pc, #200]	; (8003718 <HAL_DMA_Init+0x444>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d004      	beq.n	800365e <HAL_DMA_Init+0x38a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a30      	ldr	r2, [pc, #192]	; (800371c <HAL_DMA_Init+0x448>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_DMA_Init+0x38e>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_DMA_Init+0x390>
 8003662:	2300      	movs	r3, #0
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8097 	beq.w	8003798 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a24      	ldr	r2, [pc, #144]	; (8003700 <HAL_DMA_Init+0x42c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d021      	beq.n	80036b8 <HAL_DMA_Init+0x3e4>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a22      	ldr	r2, [pc, #136]	; (8003704 <HAL_DMA_Init+0x430>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d01c      	beq.n	80036b8 <HAL_DMA_Init+0x3e4>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a21      	ldr	r2, [pc, #132]	; (8003708 <HAL_DMA_Init+0x434>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d017      	beq.n	80036b8 <HAL_DMA_Init+0x3e4>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1f      	ldr	r2, [pc, #124]	; (800370c <HAL_DMA_Init+0x438>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d012      	beq.n	80036b8 <HAL_DMA_Init+0x3e4>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1e      	ldr	r2, [pc, #120]	; (8003710 <HAL_DMA_Init+0x43c>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00d      	beq.n	80036b8 <HAL_DMA_Init+0x3e4>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <HAL_DMA_Init+0x440>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d008      	beq.n	80036b8 <HAL_DMA_Init+0x3e4>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1b      	ldr	r2, [pc, #108]	; (8003718 <HAL_DMA_Init+0x444>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d003      	beq.n	80036b8 <HAL_DMA_Init+0x3e4>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a19      	ldr	r2, [pc, #100]	; (800371c <HAL_DMA_Init+0x448>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2202      	movs	r2, #2
 80036be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4b12      	ldr	r3, [pc, #72]	; (8003720 <HAL_DMA_Init+0x44c>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d020      	beq.n	8003724 <HAL_DMA_Init+0x450>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b80      	cmp	r3, #128	; 0x80
 80036e8:	d102      	bne.n	80036f0 <HAL_DMA_Init+0x41c>
 80036ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036ee:	e01a      	b.n	8003726 <HAL_DMA_Init+0x452>
 80036f0:	2300      	movs	r3, #0
 80036f2:	e018      	b.n	8003726 <HAL_DMA_Init+0x452>
 80036f4:	fe10803f 	.word	0xfe10803f
 80036f8:	5c001000 	.word	0x5c001000
 80036fc:	ffff0000 	.word	0xffff0000
 8003700:	58025408 	.word	0x58025408
 8003704:	5802541c 	.word	0x5802541c
 8003708:	58025430 	.word	0x58025430
 800370c:	58025444 	.word	0x58025444
 8003710:	58025458 	.word	0x58025458
 8003714:	5802546c 	.word	0x5802546c
 8003718:	58025480 	.word	0x58025480
 800371c:	58025494 	.word	0x58025494
 8003720:	fffe000f 	.word	0xfffe000f
 8003724:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	68d2      	ldr	r2, [r2, #12]
 800372a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800372c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003734:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800373c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003744:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800374c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003754:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	461a      	mov	r2, r3
 800376a:	4b6e      	ldr	r3, [pc, #440]	; (8003924 <HAL_DMA_Init+0x650>)
 800376c:	4413      	add	r3, r2
 800376e:	4a6e      	ldr	r2, [pc, #440]	; (8003928 <HAL_DMA_Init+0x654>)
 8003770:	fba2 2303 	umull	r2, r3, r2, r3
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	009a      	lsls	r2, r3, #2
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f002 f9a7 	bl	8005ad0 <DMA_CalcBaseAndBitshift>
 8003782:	4603      	mov	r3, r0
 8003784:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378a:	f003 031f 	and.w	r3, r3, #31
 800378e:	2201      	movs	r2, #1
 8003790:	409a      	lsls	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	605a      	str	r2, [r3, #4]
 8003796:	e008      	b.n	80037aa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2240      	movs	r2, #64	; 0x40
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2203      	movs	r2, #3
 80037a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e0b7      	b.n	800391a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a5f      	ldr	r2, [pc, #380]	; (800392c <HAL_DMA_Init+0x658>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d072      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a5d      	ldr	r2, [pc, #372]	; (8003930 <HAL_DMA_Init+0x65c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d06d      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a5c      	ldr	r2, [pc, #368]	; (8003934 <HAL_DMA_Init+0x660>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d068      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a5a      	ldr	r2, [pc, #360]	; (8003938 <HAL_DMA_Init+0x664>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d063      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a59      	ldr	r2, [pc, #356]	; (800393c <HAL_DMA_Init+0x668>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d05e      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a57      	ldr	r2, [pc, #348]	; (8003940 <HAL_DMA_Init+0x66c>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d059      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a56      	ldr	r2, [pc, #344]	; (8003944 <HAL_DMA_Init+0x670>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d054      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a54      	ldr	r2, [pc, #336]	; (8003948 <HAL_DMA_Init+0x674>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d04f      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a53      	ldr	r2, [pc, #332]	; (800394c <HAL_DMA_Init+0x678>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d04a      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a51      	ldr	r2, [pc, #324]	; (8003950 <HAL_DMA_Init+0x67c>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d045      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a50      	ldr	r2, [pc, #320]	; (8003954 <HAL_DMA_Init+0x680>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d040      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a4e      	ldr	r2, [pc, #312]	; (8003958 <HAL_DMA_Init+0x684>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d03b      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a4d      	ldr	r2, [pc, #308]	; (800395c <HAL_DMA_Init+0x688>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d036      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a4b      	ldr	r2, [pc, #300]	; (8003960 <HAL_DMA_Init+0x68c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d031      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a4a      	ldr	r2, [pc, #296]	; (8003964 <HAL_DMA_Init+0x690>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d02c      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a48      	ldr	r2, [pc, #288]	; (8003968 <HAL_DMA_Init+0x694>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d027      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a47      	ldr	r2, [pc, #284]	; (800396c <HAL_DMA_Init+0x698>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d022      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a45      	ldr	r2, [pc, #276]	; (8003970 <HAL_DMA_Init+0x69c>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01d      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a44      	ldr	r2, [pc, #272]	; (8003974 <HAL_DMA_Init+0x6a0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d018      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a42      	ldr	r2, [pc, #264]	; (8003978 <HAL_DMA_Init+0x6a4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d013      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a41      	ldr	r2, [pc, #260]	; (800397c <HAL_DMA_Init+0x6a8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d00e      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a3f      	ldr	r2, [pc, #252]	; (8003980 <HAL_DMA_Init+0x6ac>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d009      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a3e      	ldr	r2, [pc, #248]	; (8003984 <HAL_DMA_Init+0x6b0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d004      	beq.n	800389a <HAL_DMA_Init+0x5c6>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a3c      	ldr	r2, [pc, #240]	; (8003988 <HAL_DMA_Init+0x6b4>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d101      	bne.n	800389e <HAL_DMA_Init+0x5ca>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <HAL_DMA_Init+0x5cc>
 800389e:	2300      	movs	r3, #0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d032      	beq.n	800390a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f002 fa41 	bl	8005d2c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b80      	cmp	r3, #128	; 0x80
 80038b0:	d102      	bne.n	80038b8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80038cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d010      	beq.n	80038f8 <HAL_DMA_Init+0x624>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d80c      	bhi.n	80038f8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f002 fabe 	bl	8005e60 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	e008      	b.n	800390a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	a7fdabf8 	.word	0xa7fdabf8
 8003928:	cccccccd 	.word	0xcccccccd
 800392c:	40020010 	.word	0x40020010
 8003930:	40020028 	.word	0x40020028
 8003934:	40020040 	.word	0x40020040
 8003938:	40020058 	.word	0x40020058
 800393c:	40020070 	.word	0x40020070
 8003940:	40020088 	.word	0x40020088
 8003944:	400200a0 	.word	0x400200a0
 8003948:	400200b8 	.word	0x400200b8
 800394c:	40020410 	.word	0x40020410
 8003950:	40020428 	.word	0x40020428
 8003954:	40020440 	.word	0x40020440
 8003958:	40020458 	.word	0x40020458
 800395c:	40020470 	.word	0x40020470
 8003960:	40020488 	.word	0x40020488
 8003964:	400204a0 	.word	0x400204a0
 8003968:	400204b8 	.word	0x400204b8
 800396c:	58025408 	.word	0x58025408
 8003970:	5802541c 	.word	0x5802541c
 8003974:	58025430 	.word	0x58025430
 8003978:	58025444 	.word	0x58025444
 800397c:	58025458 	.word	0x58025458
 8003980:	5802546c 	.word	0x5802546c
 8003984:	58025480 	.word	0x58025480
 8003988:	58025494 	.word	0x58025494

0800398c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
 8003998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e226      	b.n	8003df6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_DMA_Start_IT+0x2a>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e21f      	b.n	8003df6 <HAL_DMA_Start_IT+0x46a>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	f040 820a 	bne.w	8003de0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2202      	movs	r2, #2
 80039d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a68      	ldr	r2, [pc, #416]	; (8003b80 <HAL_DMA_Start_IT+0x1f4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d04a      	beq.n	8003a7a <HAL_DMA_Start_IT+0xee>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a66      	ldr	r2, [pc, #408]	; (8003b84 <HAL_DMA_Start_IT+0x1f8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d045      	beq.n	8003a7a <HAL_DMA_Start_IT+0xee>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a65      	ldr	r2, [pc, #404]	; (8003b88 <HAL_DMA_Start_IT+0x1fc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d040      	beq.n	8003a7a <HAL_DMA_Start_IT+0xee>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a63      	ldr	r2, [pc, #396]	; (8003b8c <HAL_DMA_Start_IT+0x200>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d03b      	beq.n	8003a7a <HAL_DMA_Start_IT+0xee>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a62      	ldr	r2, [pc, #392]	; (8003b90 <HAL_DMA_Start_IT+0x204>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d036      	beq.n	8003a7a <HAL_DMA_Start_IT+0xee>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a60      	ldr	r2, [pc, #384]	; (8003b94 <HAL_DMA_Start_IT+0x208>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d031      	beq.n	8003a7a <HAL_DMA_Start_IT+0xee>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a5f      	ldr	r2, [pc, #380]	; (8003b98 <HAL_DMA_Start_IT+0x20c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d02c      	beq.n	8003a7a <HAL_DMA_Start_IT+0xee>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a5d      	ldr	r2, [pc, #372]	; (8003b9c <HAL_DMA_Start_IT+0x210>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d027      	beq.n	8003a7a <HAL_DMA_Start_IT+0xee>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a5c      	ldr	r2, [pc, #368]	; (8003ba0 <HAL_DMA_Start_IT+0x214>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d022      	beq.n	8003a7a <HAL_DMA_Start_IT+0xee>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a5a      	ldr	r2, [pc, #360]	; (8003ba4 <HAL_DMA_Start_IT+0x218>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01d      	beq.n	8003a7a <HAL_DMA_Start_IT+0xee>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a59      	ldr	r2, [pc, #356]	; (8003ba8 <HAL_DMA_Start_IT+0x21c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d018      	beq.n	8003a7a <HAL_DMA_Start_IT+0xee>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a57      	ldr	r2, [pc, #348]	; (8003bac <HAL_DMA_Start_IT+0x220>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_DMA_Start_IT+0xee>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a56      	ldr	r2, [pc, #344]	; (8003bb0 <HAL_DMA_Start_IT+0x224>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_DMA_Start_IT+0xee>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a54      	ldr	r2, [pc, #336]	; (8003bb4 <HAL_DMA_Start_IT+0x228>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_DMA_Start_IT+0xee>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a53      	ldr	r2, [pc, #332]	; (8003bb8 <HAL_DMA_Start_IT+0x22c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_DMA_Start_IT+0xee>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a51      	ldr	r2, [pc, #324]	; (8003bbc <HAL_DMA_Start_IT+0x230>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d108      	bne.n	8003a8c <HAL_DMA_Start_IT+0x100>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0201 	bic.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e007      	b.n	8003a9c <HAL_DMA_Start_IT+0x110>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	68b9      	ldr	r1, [r7, #8]
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f001 fe68 	bl	8005778 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a34      	ldr	r2, [pc, #208]	; (8003b80 <HAL_DMA_Start_IT+0x1f4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d04a      	beq.n	8003b48 <HAL_DMA_Start_IT+0x1bc>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a33      	ldr	r2, [pc, #204]	; (8003b84 <HAL_DMA_Start_IT+0x1f8>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d045      	beq.n	8003b48 <HAL_DMA_Start_IT+0x1bc>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a31      	ldr	r2, [pc, #196]	; (8003b88 <HAL_DMA_Start_IT+0x1fc>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d040      	beq.n	8003b48 <HAL_DMA_Start_IT+0x1bc>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a30      	ldr	r2, [pc, #192]	; (8003b8c <HAL_DMA_Start_IT+0x200>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d03b      	beq.n	8003b48 <HAL_DMA_Start_IT+0x1bc>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a2e      	ldr	r2, [pc, #184]	; (8003b90 <HAL_DMA_Start_IT+0x204>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d036      	beq.n	8003b48 <HAL_DMA_Start_IT+0x1bc>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a2d      	ldr	r2, [pc, #180]	; (8003b94 <HAL_DMA_Start_IT+0x208>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d031      	beq.n	8003b48 <HAL_DMA_Start_IT+0x1bc>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a2b      	ldr	r2, [pc, #172]	; (8003b98 <HAL_DMA_Start_IT+0x20c>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d02c      	beq.n	8003b48 <HAL_DMA_Start_IT+0x1bc>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a2a      	ldr	r2, [pc, #168]	; (8003b9c <HAL_DMA_Start_IT+0x210>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d027      	beq.n	8003b48 <HAL_DMA_Start_IT+0x1bc>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a28      	ldr	r2, [pc, #160]	; (8003ba0 <HAL_DMA_Start_IT+0x214>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d022      	beq.n	8003b48 <HAL_DMA_Start_IT+0x1bc>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a27      	ldr	r2, [pc, #156]	; (8003ba4 <HAL_DMA_Start_IT+0x218>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d01d      	beq.n	8003b48 <HAL_DMA_Start_IT+0x1bc>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a25      	ldr	r2, [pc, #148]	; (8003ba8 <HAL_DMA_Start_IT+0x21c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d018      	beq.n	8003b48 <HAL_DMA_Start_IT+0x1bc>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a24      	ldr	r2, [pc, #144]	; (8003bac <HAL_DMA_Start_IT+0x220>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d013      	beq.n	8003b48 <HAL_DMA_Start_IT+0x1bc>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <HAL_DMA_Start_IT+0x224>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00e      	beq.n	8003b48 <HAL_DMA_Start_IT+0x1bc>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <HAL_DMA_Start_IT+0x228>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d009      	beq.n	8003b48 <HAL_DMA_Start_IT+0x1bc>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a1f      	ldr	r2, [pc, #124]	; (8003bb8 <HAL_DMA_Start_IT+0x22c>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d004      	beq.n	8003b48 <HAL_DMA_Start_IT+0x1bc>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1e      	ldr	r2, [pc, #120]	; (8003bbc <HAL_DMA_Start_IT+0x230>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d101      	bne.n	8003b4c <HAL_DMA_Start_IT+0x1c0>
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e000      	b.n	8003b4e <HAL_DMA_Start_IT+0x1c2>
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d036      	beq.n	8003bc0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 021e 	bic.w	r2, r3, #30
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0216 	orr.w	r2, r2, #22
 8003b64:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d03e      	beq.n	8003bec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 0208 	orr.w	r2, r2, #8
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	e035      	b.n	8003bec <HAL_DMA_Start_IT+0x260>
 8003b80:	40020010 	.word	0x40020010
 8003b84:	40020028 	.word	0x40020028
 8003b88:	40020040 	.word	0x40020040
 8003b8c:	40020058 	.word	0x40020058
 8003b90:	40020070 	.word	0x40020070
 8003b94:	40020088 	.word	0x40020088
 8003b98:	400200a0 	.word	0x400200a0
 8003b9c:	400200b8 	.word	0x400200b8
 8003ba0:	40020410 	.word	0x40020410
 8003ba4:	40020428 	.word	0x40020428
 8003ba8:	40020440 	.word	0x40020440
 8003bac:	40020458 	.word	0x40020458
 8003bb0:	40020470 	.word	0x40020470
 8003bb4:	40020488 	.word	0x40020488
 8003bb8:	400204a0 	.word	0x400204a0
 8003bbc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 020e 	bic.w	r2, r3, #14
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 020a 	orr.w	r2, r2, #10
 8003bd2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d007      	beq.n	8003bec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0204 	orr.w	r2, r2, #4
 8003bea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a83      	ldr	r2, [pc, #524]	; (8003e00 <HAL_DMA_Start_IT+0x474>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d072      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a82      	ldr	r2, [pc, #520]	; (8003e04 <HAL_DMA_Start_IT+0x478>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d06d      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a80      	ldr	r2, [pc, #512]	; (8003e08 <HAL_DMA_Start_IT+0x47c>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d068      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a7f      	ldr	r2, [pc, #508]	; (8003e0c <HAL_DMA_Start_IT+0x480>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d063      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a7d      	ldr	r2, [pc, #500]	; (8003e10 <HAL_DMA_Start_IT+0x484>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d05e      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a7c      	ldr	r2, [pc, #496]	; (8003e14 <HAL_DMA_Start_IT+0x488>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d059      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a7a      	ldr	r2, [pc, #488]	; (8003e18 <HAL_DMA_Start_IT+0x48c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d054      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a79      	ldr	r2, [pc, #484]	; (8003e1c <HAL_DMA_Start_IT+0x490>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d04f      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a77      	ldr	r2, [pc, #476]	; (8003e20 <HAL_DMA_Start_IT+0x494>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d04a      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a76      	ldr	r2, [pc, #472]	; (8003e24 <HAL_DMA_Start_IT+0x498>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d045      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a74      	ldr	r2, [pc, #464]	; (8003e28 <HAL_DMA_Start_IT+0x49c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d040      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a73      	ldr	r2, [pc, #460]	; (8003e2c <HAL_DMA_Start_IT+0x4a0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d03b      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a71      	ldr	r2, [pc, #452]	; (8003e30 <HAL_DMA_Start_IT+0x4a4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d036      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a70      	ldr	r2, [pc, #448]	; (8003e34 <HAL_DMA_Start_IT+0x4a8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d031      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a6e      	ldr	r2, [pc, #440]	; (8003e38 <HAL_DMA_Start_IT+0x4ac>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d02c      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a6d      	ldr	r2, [pc, #436]	; (8003e3c <HAL_DMA_Start_IT+0x4b0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d027      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a6b      	ldr	r2, [pc, #428]	; (8003e40 <HAL_DMA_Start_IT+0x4b4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d022      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a6a      	ldr	r2, [pc, #424]	; (8003e44 <HAL_DMA_Start_IT+0x4b8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d01d      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a68      	ldr	r2, [pc, #416]	; (8003e48 <HAL_DMA_Start_IT+0x4bc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d018      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a67      	ldr	r2, [pc, #412]	; (8003e4c <HAL_DMA_Start_IT+0x4c0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d013      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a65      	ldr	r2, [pc, #404]	; (8003e50 <HAL_DMA_Start_IT+0x4c4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d00e      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a64      	ldr	r2, [pc, #400]	; (8003e54 <HAL_DMA_Start_IT+0x4c8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d009      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a62      	ldr	r2, [pc, #392]	; (8003e58 <HAL_DMA_Start_IT+0x4cc>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <HAL_DMA_Start_IT+0x350>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a61      	ldr	r2, [pc, #388]	; (8003e5c <HAL_DMA_Start_IT+0x4d0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d101      	bne.n	8003ce0 <HAL_DMA_Start_IT+0x354>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <HAL_DMA_Start_IT+0x356>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01a      	beq.n	8003d1c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d02:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d007      	beq.n	8003d1c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d1a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a37      	ldr	r2, [pc, #220]	; (8003e00 <HAL_DMA_Start_IT+0x474>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d04a      	beq.n	8003dbc <HAL_DMA_Start_IT+0x430>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a36      	ldr	r2, [pc, #216]	; (8003e04 <HAL_DMA_Start_IT+0x478>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d045      	beq.n	8003dbc <HAL_DMA_Start_IT+0x430>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a34      	ldr	r2, [pc, #208]	; (8003e08 <HAL_DMA_Start_IT+0x47c>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d040      	beq.n	8003dbc <HAL_DMA_Start_IT+0x430>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a33      	ldr	r2, [pc, #204]	; (8003e0c <HAL_DMA_Start_IT+0x480>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d03b      	beq.n	8003dbc <HAL_DMA_Start_IT+0x430>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a31      	ldr	r2, [pc, #196]	; (8003e10 <HAL_DMA_Start_IT+0x484>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d036      	beq.n	8003dbc <HAL_DMA_Start_IT+0x430>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a30      	ldr	r2, [pc, #192]	; (8003e14 <HAL_DMA_Start_IT+0x488>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d031      	beq.n	8003dbc <HAL_DMA_Start_IT+0x430>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a2e      	ldr	r2, [pc, #184]	; (8003e18 <HAL_DMA_Start_IT+0x48c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d02c      	beq.n	8003dbc <HAL_DMA_Start_IT+0x430>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a2d      	ldr	r2, [pc, #180]	; (8003e1c <HAL_DMA_Start_IT+0x490>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d027      	beq.n	8003dbc <HAL_DMA_Start_IT+0x430>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a2b      	ldr	r2, [pc, #172]	; (8003e20 <HAL_DMA_Start_IT+0x494>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d022      	beq.n	8003dbc <HAL_DMA_Start_IT+0x430>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a2a      	ldr	r2, [pc, #168]	; (8003e24 <HAL_DMA_Start_IT+0x498>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d01d      	beq.n	8003dbc <HAL_DMA_Start_IT+0x430>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a28      	ldr	r2, [pc, #160]	; (8003e28 <HAL_DMA_Start_IT+0x49c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d018      	beq.n	8003dbc <HAL_DMA_Start_IT+0x430>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a27      	ldr	r2, [pc, #156]	; (8003e2c <HAL_DMA_Start_IT+0x4a0>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d013      	beq.n	8003dbc <HAL_DMA_Start_IT+0x430>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a25      	ldr	r2, [pc, #148]	; (8003e30 <HAL_DMA_Start_IT+0x4a4>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d00e      	beq.n	8003dbc <HAL_DMA_Start_IT+0x430>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a24      	ldr	r2, [pc, #144]	; (8003e34 <HAL_DMA_Start_IT+0x4a8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d009      	beq.n	8003dbc <HAL_DMA_Start_IT+0x430>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a22      	ldr	r2, [pc, #136]	; (8003e38 <HAL_DMA_Start_IT+0x4ac>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d004      	beq.n	8003dbc <HAL_DMA_Start_IT+0x430>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a21      	ldr	r2, [pc, #132]	; (8003e3c <HAL_DMA_Start_IT+0x4b0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d108      	bne.n	8003dce <HAL_DMA_Start_IT+0x442>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	e012      	b.n	8003df4 <HAL_DMA_Start_IT+0x468>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f042 0201 	orr.w	r2, r2, #1
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	e009      	b.n	8003df4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003de6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40020010 	.word	0x40020010
 8003e04:	40020028 	.word	0x40020028
 8003e08:	40020040 	.word	0x40020040
 8003e0c:	40020058 	.word	0x40020058
 8003e10:	40020070 	.word	0x40020070
 8003e14:	40020088 	.word	0x40020088
 8003e18:	400200a0 	.word	0x400200a0
 8003e1c:	400200b8 	.word	0x400200b8
 8003e20:	40020410 	.word	0x40020410
 8003e24:	40020428 	.word	0x40020428
 8003e28:	40020440 	.word	0x40020440
 8003e2c:	40020458 	.word	0x40020458
 8003e30:	40020470 	.word	0x40020470
 8003e34:	40020488 	.word	0x40020488
 8003e38:	400204a0 	.word	0x400204a0
 8003e3c:	400204b8 	.word	0x400204b8
 8003e40:	58025408 	.word	0x58025408
 8003e44:	5802541c 	.word	0x5802541c
 8003e48:	58025430 	.word	0x58025430
 8003e4c:	58025444 	.word	0x58025444
 8003e50:	58025458 	.word	0x58025458
 8003e54:	5802546c 	.word	0x5802546c
 8003e58:	58025480 	.word	0x58025480
 8003e5c:	58025494 	.word	0x58025494

08003e60 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003e68:	f7ff f816 	bl	8002e98 <HAL_GetTick>
 8003e6c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e2dc      	b.n	8004432 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d008      	beq.n	8003e96 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2280      	movs	r2, #128	; 0x80
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e2cd      	b.n	8004432 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a76      	ldr	r2, [pc, #472]	; (8004074 <HAL_DMA_Abort+0x214>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d04a      	beq.n	8003f36 <HAL_DMA_Abort+0xd6>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a74      	ldr	r2, [pc, #464]	; (8004078 <HAL_DMA_Abort+0x218>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d045      	beq.n	8003f36 <HAL_DMA_Abort+0xd6>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a73      	ldr	r2, [pc, #460]	; (800407c <HAL_DMA_Abort+0x21c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d040      	beq.n	8003f36 <HAL_DMA_Abort+0xd6>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a71      	ldr	r2, [pc, #452]	; (8004080 <HAL_DMA_Abort+0x220>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d03b      	beq.n	8003f36 <HAL_DMA_Abort+0xd6>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a70      	ldr	r2, [pc, #448]	; (8004084 <HAL_DMA_Abort+0x224>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d036      	beq.n	8003f36 <HAL_DMA_Abort+0xd6>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a6e      	ldr	r2, [pc, #440]	; (8004088 <HAL_DMA_Abort+0x228>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d031      	beq.n	8003f36 <HAL_DMA_Abort+0xd6>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a6d      	ldr	r2, [pc, #436]	; (800408c <HAL_DMA_Abort+0x22c>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d02c      	beq.n	8003f36 <HAL_DMA_Abort+0xd6>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a6b      	ldr	r2, [pc, #428]	; (8004090 <HAL_DMA_Abort+0x230>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d027      	beq.n	8003f36 <HAL_DMA_Abort+0xd6>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a6a      	ldr	r2, [pc, #424]	; (8004094 <HAL_DMA_Abort+0x234>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d022      	beq.n	8003f36 <HAL_DMA_Abort+0xd6>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a68      	ldr	r2, [pc, #416]	; (8004098 <HAL_DMA_Abort+0x238>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01d      	beq.n	8003f36 <HAL_DMA_Abort+0xd6>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a67      	ldr	r2, [pc, #412]	; (800409c <HAL_DMA_Abort+0x23c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d018      	beq.n	8003f36 <HAL_DMA_Abort+0xd6>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a65      	ldr	r2, [pc, #404]	; (80040a0 <HAL_DMA_Abort+0x240>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <HAL_DMA_Abort+0xd6>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a64      	ldr	r2, [pc, #400]	; (80040a4 <HAL_DMA_Abort+0x244>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d00e      	beq.n	8003f36 <HAL_DMA_Abort+0xd6>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a62      	ldr	r2, [pc, #392]	; (80040a8 <HAL_DMA_Abort+0x248>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d009      	beq.n	8003f36 <HAL_DMA_Abort+0xd6>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a61      	ldr	r2, [pc, #388]	; (80040ac <HAL_DMA_Abort+0x24c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d004      	beq.n	8003f36 <HAL_DMA_Abort+0xd6>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a5f      	ldr	r2, [pc, #380]	; (80040b0 <HAL_DMA_Abort+0x250>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d101      	bne.n	8003f3a <HAL_DMA_Abort+0xda>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <HAL_DMA_Abort+0xdc>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d013      	beq.n	8003f68 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 021e 	bic.w	r2, r2, #30
 8003f4e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f5e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	e00a      	b.n	8003f7e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 020e 	bic.w	r2, r2, #14
 8003f76:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a3c      	ldr	r2, [pc, #240]	; (8004074 <HAL_DMA_Abort+0x214>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d072      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a3a      	ldr	r2, [pc, #232]	; (8004078 <HAL_DMA_Abort+0x218>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d06d      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a39      	ldr	r2, [pc, #228]	; (800407c <HAL_DMA_Abort+0x21c>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d068      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a37      	ldr	r2, [pc, #220]	; (8004080 <HAL_DMA_Abort+0x220>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d063      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a36      	ldr	r2, [pc, #216]	; (8004084 <HAL_DMA_Abort+0x224>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d05e      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a34      	ldr	r2, [pc, #208]	; (8004088 <HAL_DMA_Abort+0x228>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d059      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a33      	ldr	r2, [pc, #204]	; (800408c <HAL_DMA_Abort+0x22c>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d054      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a31      	ldr	r2, [pc, #196]	; (8004090 <HAL_DMA_Abort+0x230>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d04f      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a30      	ldr	r2, [pc, #192]	; (8004094 <HAL_DMA_Abort+0x234>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d04a      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a2e      	ldr	r2, [pc, #184]	; (8004098 <HAL_DMA_Abort+0x238>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d045      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a2d      	ldr	r2, [pc, #180]	; (800409c <HAL_DMA_Abort+0x23c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d040      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a2b      	ldr	r2, [pc, #172]	; (80040a0 <HAL_DMA_Abort+0x240>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d03b      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a2a      	ldr	r2, [pc, #168]	; (80040a4 <HAL_DMA_Abort+0x244>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d036      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a28      	ldr	r2, [pc, #160]	; (80040a8 <HAL_DMA_Abort+0x248>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d031      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a27      	ldr	r2, [pc, #156]	; (80040ac <HAL_DMA_Abort+0x24c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d02c      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a25      	ldr	r2, [pc, #148]	; (80040b0 <HAL_DMA_Abort+0x250>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d027      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a24      	ldr	r2, [pc, #144]	; (80040b4 <HAL_DMA_Abort+0x254>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d022      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a22      	ldr	r2, [pc, #136]	; (80040b8 <HAL_DMA_Abort+0x258>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01d      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a21      	ldr	r2, [pc, #132]	; (80040bc <HAL_DMA_Abort+0x25c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d018      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1f      	ldr	r2, [pc, #124]	; (80040c0 <HAL_DMA_Abort+0x260>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d013      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a1e      	ldr	r2, [pc, #120]	; (80040c4 <HAL_DMA_Abort+0x264>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00e      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a1c      	ldr	r2, [pc, #112]	; (80040c8 <HAL_DMA_Abort+0x268>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d009      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a1b      	ldr	r2, [pc, #108]	; (80040cc <HAL_DMA_Abort+0x26c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d004      	beq.n	800406e <HAL_DMA_Abort+0x20e>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a19      	ldr	r2, [pc, #100]	; (80040d0 <HAL_DMA_Abort+0x270>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d132      	bne.n	80040d4 <HAL_DMA_Abort+0x274>
 800406e:	2301      	movs	r3, #1
 8004070:	e031      	b.n	80040d6 <HAL_DMA_Abort+0x276>
 8004072:	bf00      	nop
 8004074:	40020010 	.word	0x40020010
 8004078:	40020028 	.word	0x40020028
 800407c:	40020040 	.word	0x40020040
 8004080:	40020058 	.word	0x40020058
 8004084:	40020070 	.word	0x40020070
 8004088:	40020088 	.word	0x40020088
 800408c:	400200a0 	.word	0x400200a0
 8004090:	400200b8 	.word	0x400200b8
 8004094:	40020410 	.word	0x40020410
 8004098:	40020428 	.word	0x40020428
 800409c:	40020440 	.word	0x40020440
 80040a0:	40020458 	.word	0x40020458
 80040a4:	40020470 	.word	0x40020470
 80040a8:	40020488 	.word	0x40020488
 80040ac:	400204a0 	.word	0x400204a0
 80040b0:	400204b8 	.word	0x400204b8
 80040b4:	58025408 	.word	0x58025408
 80040b8:	5802541c 	.word	0x5802541c
 80040bc:	58025430 	.word	0x58025430
 80040c0:	58025444 	.word	0x58025444
 80040c4:	58025458 	.word	0x58025458
 80040c8:	5802546c 	.word	0x5802546c
 80040cc:	58025480 	.word	0x58025480
 80040d0:	58025494 	.word	0x58025494
 80040d4:	2300      	movs	r3, #0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a6d      	ldr	r2, [pc, #436]	; (80042a4 <HAL_DMA_Abort+0x444>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d04a      	beq.n	800418a <HAL_DMA_Abort+0x32a>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a6b      	ldr	r2, [pc, #428]	; (80042a8 <HAL_DMA_Abort+0x448>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d045      	beq.n	800418a <HAL_DMA_Abort+0x32a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a6a      	ldr	r2, [pc, #424]	; (80042ac <HAL_DMA_Abort+0x44c>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d040      	beq.n	800418a <HAL_DMA_Abort+0x32a>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a68      	ldr	r2, [pc, #416]	; (80042b0 <HAL_DMA_Abort+0x450>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d03b      	beq.n	800418a <HAL_DMA_Abort+0x32a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a67      	ldr	r2, [pc, #412]	; (80042b4 <HAL_DMA_Abort+0x454>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d036      	beq.n	800418a <HAL_DMA_Abort+0x32a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a65      	ldr	r2, [pc, #404]	; (80042b8 <HAL_DMA_Abort+0x458>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d031      	beq.n	800418a <HAL_DMA_Abort+0x32a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a64      	ldr	r2, [pc, #400]	; (80042bc <HAL_DMA_Abort+0x45c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d02c      	beq.n	800418a <HAL_DMA_Abort+0x32a>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a62      	ldr	r2, [pc, #392]	; (80042c0 <HAL_DMA_Abort+0x460>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d027      	beq.n	800418a <HAL_DMA_Abort+0x32a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a61      	ldr	r2, [pc, #388]	; (80042c4 <HAL_DMA_Abort+0x464>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d022      	beq.n	800418a <HAL_DMA_Abort+0x32a>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a5f      	ldr	r2, [pc, #380]	; (80042c8 <HAL_DMA_Abort+0x468>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d01d      	beq.n	800418a <HAL_DMA_Abort+0x32a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a5e      	ldr	r2, [pc, #376]	; (80042cc <HAL_DMA_Abort+0x46c>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d018      	beq.n	800418a <HAL_DMA_Abort+0x32a>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a5c      	ldr	r2, [pc, #368]	; (80042d0 <HAL_DMA_Abort+0x470>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d013      	beq.n	800418a <HAL_DMA_Abort+0x32a>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a5b      	ldr	r2, [pc, #364]	; (80042d4 <HAL_DMA_Abort+0x474>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d00e      	beq.n	800418a <HAL_DMA_Abort+0x32a>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a59      	ldr	r2, [pc, #356]	; (80042d8 <HAL_DMA_Abort+0x478>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_DMA_Abort+0x32a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a58      	ldr	r2, [pc, #352]	; (80042dc <HAL_DMA_Abort+0x47c>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d004      	beq.n	800418a <HAL_DMA_Abort+0x32a>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a56      	ldr	r2, [pc, #344]	; (80042e0 <HAL_DMA_Abort+0x480>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d108      	bne.n	800419c <HAL_DMA_Abort+0x33c>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0201 	bic.w	r2, r2, #1
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	e007      	b.n	80041ac <HAL_DMA_Abort+0x34c>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80041ac:	e013      	b.n	80041d6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041ae:	f7fe fe73 	bl	8002e98 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b05      	cmp	r3, #5
 80041ba:	d90c      	bls.n	80041d6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2203      	movs	r2, #3
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e12d      	b.n	8004432 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1e5      	bne.n	80041ae <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a2f      	ldr	r2, [pc, #188]	; (80042a4 <HAL_DMA_Abort+0x444>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d04a      	beq.n	8004282 <HAL_DMA_Abort+0x422>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a2d      	ldr	r2, [pc, #180]	; (80042a8 <HAL_DMA_Abort+0x448>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d045      	beq.n	8004282 <HAL_DMA_Abort+0x422>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a2c      	ldr	r2, [pc, #176]	; (80042ac <HAL_DMA_Abort+0x44c>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d040      	beq.n	8004282 <HAL_DMA_Abort+0x422>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a2a      	ldr	r2, [pc, #168]	; (80042b0 <HAL_DMA_Abort+0x450>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d03b      	beq.n	8004282 <HAL_DMA_Abort+0x422>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a29      	ldr	r2, [pc, #164]	; (80042b4 <HAL_DMA_Abort+0x454>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d036      	beq.n	8004282 <HAL_DMA_Abort+0x422>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a27      	ldr	r2, [pc, #156]	; (80042b8 <HAL_DMA_Abort+0x458>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d031      	beq.n	8004282 <HAL_DMA_Abort+0x422>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a26      	ldr	r2, [pc, #152]	; (80042bc <HAL_DMA_Abort+0x45c>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d02c      	beq.n	8004282 <HAL_DMA_Abort+0x422>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a24      	ldr	r2, [pc, #144]	; (80042c0 <HAL_DMA_Abort+0x460>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d027      	beq.n	8004282 <HAL_DMA_Abort+0x422>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a23      	ldr	r2, [pc, #140]	; (80042c4 <HAL_DMA_Abort+0x464>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d022      	beq.n	8004282 <HAL_DMA_Abort+0x422>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a21      	ldr	r2, [pc, #132]	; (80042c8 <HAL_DMA_Abort+0x468>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d01d      	beq.n	8004282 <HAL_DMA_Abort+0x422>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a20      	ldr	r2, [pc, #128]	; (80042cc <HAL_DMA_Abort+0x46c>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d018      	beq.n	8004282 <HAL_DMA_Abort+0x422>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a1e      	ldr	r2, [pc, #120]	; (80042d0 <HAL_DMA_Abort+0x470>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d013      	beq.n	8004282 <HAL_DMA_Abort+0x422>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <HAL_DMA_Abort+0x474>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00e      	beq.n	8004282 <HAL_DMA_Abort+0x422>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <HAL_DMA_Abort+0x478>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d009      	beq.n	8004282 <HAL_DMA_Abort+0x422>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a1a      	ldr	r2, [pc, #104]	; (80042dc <HAL_DMA_Abort+0x47c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d004      	beq.n	8004282 <HAL_DMA_Abort+0x422>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a18      	ldr	r2, [pc, #96]	; (80042e0 <HAL_DMA_Abort+0x480>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d101      	bne.n	8004286 <HAL_DMA_Abort+0x426>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <HAL_DMA_Abort+0x428>
 8004286:	2300      	movs	r3, #0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d02b      	beq.n	80042e4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	223f      	movs	r2, #63	; 0x3f
 800429c:	409a      	lsls	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	609a      	str	r2, [r3, #8]
 80042a2:	e02a      	b.n	80042fa <HAL_DMA_Abort+0x49a>
 80042a4:	40020010 	.word	0x40020010
 80042a8:	40020028 	.word	0x40020028
 80042ac:	40020040 	.word	0x40020040
 80042b0:	40020058 	.word	0x40020058
 80042b4:	40020070 	.word	0x40020070
 80042b8:	40020088 	.word	0x40020088
 80042bc:	400200a0 	.word	0x400200a0
 80042c0:	400200b8 	.word	0x400200b8
 80042c4:	40020410 	.word	0x40020410
 80042c8:	40020428 	.word	0x40020428
 80042cc:	40020440 	.word	0x40020440
 80042d0:	40020458 	.word	0x40020458
 80042d4:	40020470 	.word	0x40020470
 80042d8:	40020488 	.word	0x40020488
 80042dc:	400204a0 	.word	0x400204a0
 80042e0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ee:	f003 031f 	and.w	r3, r3, #31
 80042f2:	2201      	movs	r2, #1
 80042f4:	409a      	lsls	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a4f      	ldr	r2, [pc, #316]	; (800443c <HAL_DMA_Abort+0x5dc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d072      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a4d      	ldr	r2, [pc, #308]	; (8004440 <HAL_DMA_Abort+0x5e0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d06d      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a4c      	ldr	r2, [pc, #304]	; (8004444 <HAL_DMA_Abort+0x5e4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d068      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a4a      	ldr	r2, [pc, #296]	; (8004448 <HAL_DMA_Abort+0x5e8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d063      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a49      	ldr	r2, [pc, #292]	; (800444c <HAL_DMA_Abort+0x5ec>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d05e      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a47      	ldr	r2, [pc, #284]	; (8004450 <HAL_DMA_Abort+0x5f0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d059      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a46      	ldr	r2, [pc, #280]	; (8004454 <HAL_DMA_Abort+0x5f4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d054      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a44      	ldr	r2, [pc, #272]	; (8004458 <HAL_DMA_Abort+0x5f8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d04f      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a43      	ldr	r2, [pc, #268]	; (800445c <HAL_DMA_Abort+0x5fc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d04a      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a41      	ldr	r2, [pc, #260]	; (8004460 <HAL_DMA_Abort+0x600>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d045      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a40      	ldr	r2, [pc, #256]	; (8004464 <HAL_DMA_Abort+0x604>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d040      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a3e      	ldr	r2, [pc, #248]	; (8004468 <HAL_DMA_Abort+0x608>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d03b      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a3d      	ldr	r2, [pc, #244]	; (800446c <HAL_DMA_Abort+0x60c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d036      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a3b      	ldr	r2, [pc, #236]	; (8004470 <HAL_DMA_Abort+0x610>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d031      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a3a      	ldr	r2, [pc, #232]	; (8004474 <HAL_DMA_Abort+0x614>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d02c      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a38      	ldr	r2, [pc, #224]	; (8004478 <HAL_DMA_Abort+0x618>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d027      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a37      	ldr	r2, [pc, #220]	; (800447c <HAL_DMA_Abort+0x61c>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d022      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a35      	ldr	r2, [pc, #212]	; (8004480 <HAL_DMA_Abort+0x620>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d01d      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a34      	ldr	r2, [pc, #208]	; (8004484 <HAL_DMA_Abort+0x624>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d018      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a32      	ldr	r2, [pc, #200]	; (8004488 <HAL_DMA_Abort+0x628>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d013      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a31      	ldr	r2, [pc, #196]	; (800448c <HAL_DMA_Abort+0x62c>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d00e      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a2f      	ldr	r2, [pc, #188]	; (8004490 <HAL_DMA_Abort+0x630>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d009      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2e      	ldr	r2, [pc, #184]	; (8004494 <HAL_DMA_Abort+0x634>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d004      	beq.n	80043ea <HAL_DMA_Abort+0x58a>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a2c      	ldr	r2, [pc, #176]	; (8004498 <HAL_DMA_Abort+0x638>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d101      	bne.n	80043ee <HAL_DMA_Abort+0x58e>
 80043ea:	2301      	movs	r3, #1
 80043ec:	e000      	b.n	80043f0 <HAL_DMA_Abort+0x590>
 80043ee:	2300      	movs	r3, #0
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d015      	beq.n	8004420 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80043fc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00c      	beq.n	8004420 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004410:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004414:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800441e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3718      	adds	r7, #24
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40020010 	.word	0x40020010
 8004440:	40020028 	.word	0x40020028
 8004444:	40020040 	.word	0x40020040
 8004448:	40020058 	.word	0x40020058
 800444c:	40020070 	.word	0x40020070
 8004450:	40020088 	.word	0x40020088
 8004454:	400200a0 	.word	0x400200a0
 8004458:	400200b8 	.word	0x400200b8
 800445c:	40020410 	.word	0x40020410
 8004460:	40020428 	.word	0x40020428
 8004464:	40020440 	.word	0x40020440
 8004468:	40020458 	.word	0x40020458
 800446c:	40020470 	.word	0x40020470
 8004470:	40020488 	.word	0x40020488
 8004474:	400204a0 	.word	0x400204a0
 8004478:	400204b8 	.word	0x400204b8
 800447c:	58025408 	.word	0x58025408
 8004480:	5802541c 	.word	0x5802541c
 8004484:	58025430 	.word	0x58025430
 8004488:	58025444 	.word	0x58025444
 800448c:	58025458 	.word	0x58025458
 8004490:	5802546c 	.word	0x5802546c
 8004494:	58025480 	.word	0x58025480
 8004498:	58025494 	.word	0x58025494

0800449c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e205      	b.n	80048ba <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d004      	beq.n	80044c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2280      	movs	r2, #128	; 0x80
 80044be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e1fa      	b.n	80048ba <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a8c      	ldr	r2, [pc, #560]	; (80046fc <HAL_DMA_Abort_IT+0x260>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d04a      	beq.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a8b      	ldr	r2, [pc, #556]	; (8004700 <HAL_DMA_Abort_IT+0x264>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d045      	beq.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a89      	ldr	r2, [pc, #548]	; (8004704 <HAL_DMA_Abort_IT+0x268>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d040      	beq.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a88      	ldr	r2, [pc, #544]	; (8004708 <HAL_DMA_Abort_IT+0x26c>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d03b      	beq.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a86      	ldr	r2, [pc, #536]	; (800470c <HAL_DMA_Abort_IT+0x270>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d036      	beq.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a85      	ldr	r2, [pc, #532]	; (8004710 <HAL_DMA_Abort_IT+0x274>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d031      	beq.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a83      	ldr	r2, [pc, #524]	; (8004714 <HAL_DMA_Abort_IT+0x278>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d02c      	beq.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a82      	ldr	r2, [pc, #520]	; (8004718 <HAL_DMA_Abort_IT+0x27c>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d027      	beq.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a80      	ldr	r2, [pc, #512]	; (800471c <HAL_DMA_Abort_IT+0x280>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d022      	beq.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a7f      	ldr	r2, [pc, #508]	; (8004720 <HAL_DMA_Abort_IT+0x284>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d01d      	beq.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a7d      	ldr	r2, [pc, #500]	; (8004724 <HAL_DMA_Abort_IT+0x288>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d018      	beq.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a7c      	ldr	r2, [pc, #496]	; (8004728 <HAL_DMA_Abort_IT+0x28c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d013      	beq.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a7a      	ldr	r2, [pc, #488]	; (800472c <HAL_DMA_Abort_IT+0x290>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d00e      	beq.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a79      	ldr	r2, [pc, #484]	; (8004730 <HAL_DMA_Abort_IT+0x294>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d009      	beq.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a77      	ldr	r2, [pc, #476]	; (8004734 <HAL_DMA_Abort_IT+0x298>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <HAL_DMA_Abort_IT+0xc8>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a76      	ldr	r2, [pc, #472]	; (8004738 <HAL_DMA_Abort_IT+0x29c>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d101      	bne.n	8004568 <HAL_DMA_Abort_IT+0xcc>
 8004564:	2301      	movs	r3, #1
 8004566:	e000      	b.n	800456a <HAL_DMA_Abort_IT+0xce>
 8004568:	2300      	movs	r3, #0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d065      	beq.n	800463a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2204      	movs	r2, #4
 8004572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a60      	ldr	r2, [pc, #384]	; (80046fc <HAL_DMA_Abort_IT+0x260>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d04a      	beq.n	8004616 <HAL_DMA_Abort_IT+0x17a>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a5e      	ldr	r2, [pc, #376]	; (8004700 <HAL_DMA_Abort_IT+0x264>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d045      	beq.n	8004616 <HAL_DMA_Abort_IT+0x17a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a5d      	ldr	r2, [pc, #372]	; (8004704 <HAL_DMA_Abort_IT+0x268>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d040      	beq.n	8004616 <HAL_DMA_Abort_IT+0x17a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a5b      	ldr	r2, [pc, #364]	; (8004708 <HAL_DMA_Abort_IT+0x26c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d03b      	beq.n	8004616 <HAL_DMA_Abort_IT+0x17a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a5a      	ldr	r2, [pc, #360]	; (800470c <HAL_DMA_Abort_IT+0x270>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d036      	beq.n	8004616 <HAL_DMA_Abort_IT+0x17a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a58      	ldr	r2, [pc, #352]	; (8004710 <HAL_DMA_Abort_IT+0x274>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d031      	beq.n	8004616 <HAL_DMA_Abort_IT+0x17a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a57      	ldr	r2, [pc, #348]	; (8004714 <HAL_DMA_Abort_IT+0x278>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d02c      	beq.n	8004616 <HAL_DMA_Abort_IT+0x17a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a55      	ldr	r2, [pc, #340]	; (8004718 <HAL_DMA_Abort_IT+0x27c>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d027      	beq.n	8004616 <HAL_DMA_Abort_IT+0x17a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a54      	ldr	r2, [pc, #336]	; (800471c <HAL_DMA_Abort_IT+0x280>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d022      	beq.n	8004616 <HAL_DMA_Abort_IT+0x17a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a52      	ldr	r2, [pc, #328]	; (8004720 <HAL_DMA_Abort_IT+0x284>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d01d      	beq.n	8004616 <HAL_DMA_Abort_IT+0x17a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a51      	ldr	r2, [pc, #324]	; (8004724 <HAL_DMA_Abort_IT+0x288>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d018      	beq.n	8004616 <HAL_DMA_Abort_IT+0x17a>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a4f      	ldr	r2, [pc, #316]	; (8004728 <HAL_DMA_Abort_IT+0x28c>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d013      	beq.n	8004616 <HAL_DMA_Abort_IT+0x17a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a4e      	ldr	r2, [pc, #312]	; (800472c <HAL_DMA_Abort_IT+0x290>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00e      	beq.n	8004616 <HAL_DMA_Abort_IT+0x17a>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a4c      	ldr	r2, [pc, #304]	; (8004730 <HAL_DMA_Abort_IT+0x294>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d009      	beq.n	8004616 <HAL_DMA_Abort_IT+0x17a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a4b      	ldr	r2, [pc, #300]	; (8004734 <HAL_DMA_Abort_IT+0x298>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d004      	beq.n	8004616 <HAL_DMA_Abort_IT+0x17a>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a49      	ldr	r2, [pc, #292]	; (8004738 <HAL_DMA_Abort_IT+0x29c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d108      	bne.n	8004628 <HAL_DMA_Abort_IT+0x18c>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f022 0201 	bic.w	r2, r2, #1
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	e147      	b.n	80048b8 <HAL_DMA_Abort_IT+0x41c>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	e13e      	b.n	80048b8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 020e 	bic.w	r2, r2, #14
 8004648:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a2b      	ldr	r2, [pc, #172]	; (80046fc <HAL_DMA_Abort_IT+0x260>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d04a      	beq.n	80046ea <HAL_DMA_Abort_IT+0x24e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a29      	ldr	r2, [pc, #164]	; (8004700 <HAL_DMA_Abort_IT+0x264>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d045      	beq.n	80046ea <HAL_DMA_Abort_IT+0x24e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a28      	ldr	r2, [pc, #160]	; (8004704 <HAL_DMA_Abort_IT+0x268>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d040      	beq.n	80046ea <HAL_DMA_Abort_IT+0x24e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a26      	ldr	r2, [pc, #152]	; (8004708 <HAL_DMA_Abort_IT+0x26c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d03b      	beq.n	80046ea <HAL_DMA_Abort_IT+0x24e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a25      	ldr	r2, [pc, #148]	; (800470c <HAL_DMA_Abort_IT+0x270>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d036      	beq.n	80046ea <HAL_DMA_Abort_IT+0x24e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a23      	ldr	r2, [pc, #140]	; (8004710 <HAL_DMA_Abort_IT+0x274>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d031      	beq.n	80046ea <HAL_DMA_Abort_IT+0x24e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a22      	ldr	r2, [pc, #136]	; (8004714 <HAL_DMA_Abort_IT+0x278>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d02c      	beq.n	80046ea <HAL_DMA_Abort_IT+0x24e>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a20      	ldr	r2, [pc, #128]	; (8004718 <HAL_DMA_Abort_IT+0x27c>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d027      	beq.n	80046ea <HAL_DMA_Abort_IT+0x24e>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a1f      	ldr	r2, [pc, #124]	; (800471c <HAL_DMA_Abort_IT+0x280>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d022      	beq.n	80046ea <HAL_DMA_Abort_IT+0x24e>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1d      	ldr	r2, [pc, #116]	; (8004720 <HAL_DMA_Abort_IT+0x284>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d01d      	beq.n	80046ea <HAL_DMA_Abort_IT+0x24e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <HAL_DMA_Abort_IT+0x288>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d018      	beq.n	80046ea <HAL_DMA_Abort_IT+0x24e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a1a      	ldr	r2, [pc, #104]	; (8004728 <HAL_DMA_Abort_IT+0x28c>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d013      	beq.n	80046ea <HAL_DMA_Abort_IT+0x24e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a19      	ldr	r2, [pc, #100]	; (800472c <HAL_DMA_Abort_IT+0x290>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00e      	beq.n	80046ea <HAL_DMA_Abort_IT+0x24e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a17      	ldr	r2, [pc, #92]	; (8004730 <HAL_DMA_Abort_IT+0x294>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d009      	beq.n	80046ea <HAL_DMA_Abort_IT+0x24e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a16      	ldr	r2, [pc, #88]	; (8004734 <HAL_DMA_Abort_IT+0x298>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d004      	beq.n	80046ea <HAL_DMA_Abort_IT+0x24e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a14      	ldr	r2, [pc, #80]	; (8004738 <HAL_DMA_Abort_IT+0x29c>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d128      	bne.n	800473c <HAL_DMA_Abort_IT+0x2a0>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0201 	bic.w	r2, r2, #1
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	e027      	b.n	800474c <HAL_DMA_Abort_IT+0x2b0>
 80046fc:	40020010 	.word	0x40020010
 8004700:	40020028 	.word	0x40020028
 8004704:	40020040 	.word	0x40020040
 8004708:	40020058 	.word	0x40020058
 800470c:	40020070 	.word	0x40020070
 8004710:	40020088 	.word	0x40020088
 8004714:	400200a0 	.word	0x400200a0
 8004718:	400200b8 	.word	0x400200b8
 800471c:	40020410 	.word	0x40020410
 8004720:	40020428 	.word	0x40020428
 8004724:	40020440 	.word	0x40020440
 8004728:	40020458 	.word	0x40020458
 800472c:	40020470 	.word	0x40020470
 8004730:	40020488 	.word	0x40020488
 8004734:	400204a0 	.word	0x400204a0
 8004738:	400204b8 	.word	0x400204b8
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a5c      	ldr	r2, [pc, #368]	; (80048c4 <HAL_DMA_Abort_IT+0x428>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d072      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a5b      	ldr	r2, [pc, #364]	; (80048c8 <HAL_DMA_Abort_IT+0x42c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d06d      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a59      	ldr	r2, [pc, #356]	; (80048cc <HAL_DMA_Abort_IT+0x430>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d068      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a58      	ldr	r2, [pc, #352]	; (80048d0 <HAL_DMA_Abort_IT+0x434>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d063      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a56      	ldr	r2, [pc, #344]	; (80048d4 <HAL_DMA_Abort_IT+0x438>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d05e      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a55      	ldr	r2, [pc, #340]	; (80048d8 <HAL_DMA_Abort_IT+0x43c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d059      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a53      	ldr	r2, [pc, #332]	; (80048dc <HAL_DMA_Abort_IT+0x440>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d054      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a52      	ldr	r2, [pc, #328]	; (80048e0 <HAL_DMA_Abort_IT+0x444>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d04f      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a50      	ldr	r2, [pc, #320]	; (80048e4 <HAL_DMA_Abort_IT+0x448>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d04a      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a4f      	ldr	r2, [pc, #316]	; (80048e8 <HAL_DMA_Abort_IT+0x44c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d045      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a4d      	ldr	r2, [pc, #308]	; (80048ec <HAL_DMA_Abort_IT+0x450>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d040      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a4c      	ldr	r2, [pc, #304]	; (80048f0 <HAL_DMA_Abort_IT+0x454>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d03b      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a4a      	ldr	r2, [pc, #296]	; (80048f4 <HAL_DMA_Abort_IT+0x458>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d036      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a49      	ldr	r2, [pc, #292]	; (80048f8 <HAL_DMA_Abort_IT+0x45c>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d031      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a47      	ldr	r2, [pc, #284]	; (80048fc <HAL_DMA_Abort_IT+0x460>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d02c      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a46      	ldr	r2, [pc, #280]	; (8004900 <HAL_DMA_Abort_IT+0x464>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d027      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a44      	ldr	r2, [pc, #272]	; (8004904 <HAL_DMA_Abort_IT+0x468>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d022      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a43      	ldr	r2, [pc, #268]	; (8004908 <HAL_DMA_Abort_IT+0x46c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d01d      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a41      	ldr	r2, [pc, #260]	; (800490c <HAL_DMA_Abort_IT+0x470>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d018      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a40      	ldr	r2, [pc, #256]	; (8004910 <HAL_DMA_Abort_IT+0x474>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d013      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a3e      	ldr	r2, [pc, #248]	; (8004914 <HAL_DMA_Abort_IT+0x478>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00e      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a3d      	ldr	r2, [pc, #244]	; (8004918 <HAL_DMA_Abort_IT+0x47c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d009      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a3b      	ldr	r2, [pc, #236]	; (800491c <HAL_DMA_Abort_IT+0x480>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d004      	beq.n	800483c <HAL_DMA_Abort_IT+0x3a0>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a3a      	ldr	r2, [pc, #232]	; (8004920 <HAL_DMA_Abort_IT+0x484>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d101      	bne.n	8004840 <HAL_DMA_Abort_IT+0x3a4>
 800483c:	2301      	movs	r3, #1
 800483e:	e000      	b.n	8004842 <HAL_DMA_Abort_IT+0x3a6>
 8004840:	2300      	movs	r3, #0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d028      	beq.n	8004898 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004854:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800485a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	2201      	movs	r2, #1
 8004866:	409a      	lsls	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004874:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00c      	beq.n	8004898 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004888:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800488c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004896:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40020010 	.word	0x40020010
 80048c8:	40020028 	.word	0x40020028
 80048cc:	40020040 	.word	0x40020040
 80048d0:	40020058 	.word	0x40020058
 80048d4:	40020070 	.word	0x40020070
 80048d8:	40020088 	.word	0x40020088
 80048dc:	400200a0 	.word	0x400200a0
 80048e0:	400200b8 	.word	0x400200b8
 80048e4:	40020410 	.word	0x40020410
 80048e8:	40020428 	.word	0x40020428
 80048ec:	40020440 	.word	0x40020440
 80048f0:	40020458 	.word	0x40020458
 80048f4:	40020470 	.word	0x40020470
 80048f8:	40020488 	.word	0x40020488
 80048fc:	400204a0 	.word	0x400204a0
 8004900:	400204b8 	.word	0x400204b8
 8004904:	58025408 	.word	0x58025408
 8004908:	5802541c 	.word	0x5802541c
 800490c:	58025430 	.word	0x58025430
 8004910:	58025444 	.word	0x58025444
 8004914:	58025458 	.word	0x58025458
 8004918:	5802546c 	.word	0x5802546c
 800491c:	58025480 	.word	0x58025480
 8004920:	58025494 	.word	0x58025494

08004924 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	; 0x28
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004930:	4b67      	ldr	r3, [pc, #412]	; (8004ad0 <HAL_DMA_IRQHandler+0x1ac>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a67      	ldr	r2, [pc, #412]	; (8004ad4 <HAL_DMA_IRQHandler+0x1b0>)
 8004936:	fba2 2303 	umull	r2, r3, r2, r3
 800493a:	0a9b      	lsrs	r3, r3, #10
 800493c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004942:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004948:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a5f      	ldr	r2, [pc, #380]	; (8004ad8 <HAL_DMA_IRQHandler+0x1b4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d04a      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xd2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a5d      	ldr	r2, [pc, #372]	; (8004adc <HAL_DMA_IRQHandler+0x1b8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d045      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xd2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a5c      	ldr	r2, [pc, #368]	; (8004ae0 <HAL_DMA_IRQHandler+0x1bc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d040      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xd2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a5a      	ldr	r2, [pc, #360]	; (8004ae4 <HAL_DMA_IRQHandler+0x1c0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d03b      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xd2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a59      	ldr	r2, [pc, #356]	; (8004ae8 <HAL_DMA_IRQHandler+0x1c4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d036      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xd2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a57      	ldr	r2, [pc, #348]	; (8004aec <HAL_DMA_IRQHandler+0x1c8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d031      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xd2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a56      	ldr	r2, [pc, #344]	; (8004af0 <HAL_DMA_IRQHandler+0x1cc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d02c      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xd2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a54      	ldr	r2, [pc, #336]	; (8004af4 <HAL_DMA_IRQHandler+0x1d0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d027      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xd2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a53      	ldr	r2, [pc, #332]	; (8004af8 <HAL_DMA_IRQHandler+0x1d4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d022      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xd2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a51      	ldr	r2, [pc, #324]	; (8004afc <HAL_DMA_IRQHandler+0x1d8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d01d      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xd2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a50      	ldr	r2, [pc, #320]	; (8004b00 <HAL_DMA_IRQHandler+0x1dc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d018      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xd2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a4e      	ldr	r2, [pc, #312]	; (8004b04 <HAL_DMA_IRQHandler+0x1e0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d013      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xd2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a4d      	ldr	r2, [pc, #308]	; (8004b08 <HAL_DMA_IRQHandler+0x1e4>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d00e      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xd2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a4b      	ldr	r2, [pc, #300]	; (8004b0c <HAL_DMA_IRQHandler+0x1e8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d009      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xd2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a4a      	ldr	r2, [pc, #296]	; (8004b10 <HAL_DMA_IRQHandler+0x1ec>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d004      	beq.n	80049f6 <HAL_DMA_IRQHandler+0xd2>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a48      	ldr	r2, [pc, #288]	; (8004b14 <HAL_DMA_IRQHandler+0x1f0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d101      	bne.n	80049fa <HAL_DMA_IRQHandler+0xd6>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <HAL_DMA_IRQHandler+0xd8>
 80049fa:	2300      	movs	r3, #0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 842b 	beq.w	8005258 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	2208      	movs	r2, #8
 8004a0c:	409a      	lsls	r2, r3
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	4013      	ands	r3, r2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 80a2 	beq.w	8004b5c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a2e      	ldr	r2, [pc, #184]	; (8004ad8 <HAL_DMA_IRQHandler+0x1b4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d04a      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x194>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a2d      	ldr	r2, [pc, #180]	; (8004adc <HAL_DMA_IRQHandler+0x1b8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d045      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x194>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a2b      	ldr	r2, [pc, #172]	; (8004ae0 <HAL_DMA_IRQHandler+0x1bc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d040      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x194>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a2a      	ldr	r2, [pc, #168]	; (8004ae4 <HAL_DMA_IRQHandler+0x1c0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d03b      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x194>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a28      	ldr	r2, [pc, #160]	; (8004ae8 <HAL_DMA_IRQHandler+0x1c4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d036      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x194>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a27      	ldr	r2, [pc, #156]	; (8004aec <HAL_DMA_IRQHandler+0x1c8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d031      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x194>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a25      	ldr	r2, [pc, #148]	; (8004af0 <HAL_DMA_IRQHandler+0x1cc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d02c      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x194>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a24      	ldr	r2, [pc, #144]	; (8004af4 <HAL_DMA_IRQHandler+0x1d0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d027      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x194>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a22      	ldr	r2, [pc, #136]	; (8004af8 <HAL_DMA_IRQHandler+0x1d4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d022      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x194>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a21      	ldr	r2, [pc, #132]	; (8004afc <HAL_DMA_IRQHandler+0x1d8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d01d      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x194>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <HAL_DMA_IRQHandler+0x1dc>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d018      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x194>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1e      	ldr	r2, [pc, #120]	; (8004b04 <HAL_DMA_IRQHandler+0x1e0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d013      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x194>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1c      	ldr	r2, [pc, #112]	; (8004b08 <HAL_DMA_IRQHandler+0x1e4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00e      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x194>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1b      	ldr	r2, [pc, #108]	; (8004b0c <HAL_DMA_IRQHandler+0x1e8>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d009      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x194>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a19      	ldr	r2, [pc, #100]	; (8004b10 <HAL_DMA_IRQHandler+0x1ec>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d004      	beq.n	8004ab8 <HAL_DMA_IRQHandler+0x194>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a18      	ldr	r2, [pc, #96]	; (8004b14 <HAL_DMA_IRQHandler+0x1f0>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d12f      	bne.n	8004b18 <HAL_DMA_IRQHandler+0x1f4>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	bf14      	ite	ne
 8004ac6:	2301      	movne	r3, #1
 8004ac8:	2300      	moveq	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	e02e      	b.n	8004b2c <HAL_DMA_IRQHandler+0x208>
 8004ace:	bf00      	nop
 8004ad0:	24000000 	.word	0x24000000
 8004ad4:	1b4e81b5 	.word	0x1b4e81b5
 8004ad8:	40020010 	.word	0x40020010
 8004adc:	40020028 	.word	0x40020028
 8004ae0:	40020040 	.word	0x40020040
 8004ae4:	40020058 	.word	0x40020058
 8004ae8:	40020070 	.word	0x40020070
 8004aec:	40020088 	.word	0x40020088
 8004af0:	400200a0 	.word	0x400200a0
 8004af4:	400200b8 	.word	0x400200b8
 8004af8:	40020410 	.word	0x40020410
 8004afc:	40020428 	.word	0x40020428
 8004b00:	40020440 	.word	0x40020440
 8004b04:	40020458 	.word	0x40020458
 8004b08:	40020470 	.word	0x40020470
 8004b0c:	40020488 	.word	0x40020488
 8004b10:	400204a0 	.word	0x400204a0
 8004b14:	400204b8 	.word	0x400204b8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	bf14      	ite	ne
 8004b26:	2301      	movne	r3, #1
 8004b28:	2300      	moveq	r3, #0
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d015      	beq.n	8004b5c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0204 	bic.w	r2, r2, #4
 8004b3e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2208      	movs	r2, #8
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b54:	f043 0201 	orr.w	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b60:	f003 031f 	and.w	r3, r3, #31
 8004b64:	69ba      	ldr	r2, [r7, #24]
 8004b66:	fa22 f303 	lsr.w	r3, r2, r3
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d06e      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a69      	ldr	r2, [pc, #420]	; (8004d1c <HAL_DMA_IRQHandler+0x3f8>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d04a      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x2ee>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a67      	ldr	r2, [pc, #412]	; (8004d20 <HAL_DMA_IRQHandler+0x3fc>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d045      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x2ee>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a66      	ldr	r2, [pc, #408]	; (8004d24 <HAL_DMA_IRQHandler+0x400>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d040      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x2ee>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a64      	ldr	r2, [pc, #400]	; (8004d28 <HAL_DMA_IRQHandler+0x404>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d03b      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x2ee>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a63      	ldr	r2, [pc, #396]	; (8004d2c <HAL_DMA_IRQHandler+0x408>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d036      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x2ee>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a61      	ldr	r2, [pc, #388]	; (8004d30 <HAL_DMA_IRQHandler+0x40c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d031      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x2ee>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a60      	ldr	r2, [pc, #384]	; (8004d34 <HAL_DMA_IRQHandler+0x410>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d02c      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x2ee>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a5e      	ldr	r2, [pc, #376]	; (8004d38 <HAL_DMA_IRQHandler+0x414>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d027      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x2ee>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a5d      	ldr	r2, [pc, #372]	; (8004d3c <HAL_DMA_IRQHandler+0x418>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d022      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x2ee>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a5b      	ldr	r2, [pc, #364]	; (8004d40 <HAL_DMA_IRQHandler+0x41c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d01d      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x2ee>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a5a      	ldr	r2, [pc, #360]	; (8004d44 <HAL_DMA_IRQHandler+0x420>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d018      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x2ee>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a58      	ldr	r2, [pc, #352]	; (8004d48 <HAL_DMA_IRQHandler+0x424>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x2ee>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a57      	ldr	r2, [pc, #348]	; (8004d4c <HAL_DMA_IRQHandler+0x428>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00e      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x2ee>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a55      	ldr	r2, [pc, #340]	; (8004d50 <HAL_DMA_IRQHandler+0x42c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d009      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x2ee>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a54      	ldr	r2, [pc, #336]	; (8004d54 <HAL_DMA_IRQHandler+0x430>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d004      	beq.n	8004c12 <HAL_DMA_IRQHandler+0x2ee>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a52      	ldr	r2, [pc, #328]	; (8004d58 <HAL_DMA_IRQHandler+0x434>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d10a      	bne.n	8004c28 <HAL_DMA_IRQHandler+0x304>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	bf14      	ite	ne
 8004c20:	2301      	movne	r3, #1
 8004c22:	2300      	moveq	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	e003      	b.n	8004c30 <HAL_DMA_IRQHandler+0x30c>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00d      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c48:	f043 0202 	orr.w	r2, r3, #2
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	2204      	movs	r2, #4
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 808f 	beq.w	8004d84 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2c      	ldr	r2, [pc, #176]	; (8004d1c <HAL_DMA_IRQHandler+0x3f8>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d04a      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x3e2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a2a      	ldr	r2, [pc, #168]	; (8004d20 <HAL_DMA_IRQHandler+0x3fc>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d045      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x3e2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <HAL_DMA_IRQHandler+0x400>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d040      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x3e2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a27      	ldr	r2, [pc, #156]	; (8004d28 <HAL_DMA_IRQHandler+0x404>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d03b      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x3e2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a26      	ldr	r2, [pc, #152]	; (8004d2c <HAL_DMA_IRQHandler+0x408>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d036      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x3e2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a24      	ldr	r2, [pc, #144]	; (8004d30 <HAL_DMA_IRQHandler+0x40c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d031      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x3e2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a23      	ldr	r2, [pc, #140]	; (8004d34 <HAL_DMA_IRQHandler+0x410>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d02c      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x3e2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a21      	ldr	r2, [pc, #132]	; (8004d38 <HAL_DMA_IRQHandler+0x414>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d027      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x3e2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a20      	ldr	r2, [pc, #128]	; (8004d3c <HAL_DMA_IRQHandler+0x418>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d022      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x3e2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1e      	ldr	r2, [pc, #120]	; (8004d40 <HAL_DMA_IRQHandler+0x41c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01d      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x3e2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1d      	ldr	r2, [pc, #116]	; (8004d44 <HAL_DMA_IRQHandler+0x420>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d018      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x3e2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1b      	ldr	r2, [pc, #108]	; (8004d48 <HAL_DMA_IRQHandler+0x424>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d013      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x3e2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a1a      	ldr	r2, [pc, #104]	; (8004d4c <HAL_DMA_IRQHandler+0x428>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00e      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x3e2>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a18      	ldr	r2, [pc, #96]	; (8004d50 <HAL_DMA_IRQHandler+0x42c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d009      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x3e2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a17      	ldr	r2, [pc, #92]	; (8004d54 <HAL_DMA_IRQHandler+0x430>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d004      	beq.n	8004d06 <HAL_DMA_IRQHandler+0x3e2>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <HAL_DMA_IRQHandler+0x434>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d12a      	bne.n	8004d5c <HAL_DMA_IRQHandler+0x438>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bf14      	ite	ne
 8004d14:	2301      	movne	r3, #1
 8004d16:	2300      	moveq	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	e023      	b.n	8004d64 <HAL_DMA_IRQHandler+0x440>
 8004d1c:	40020010 	.word	0x40020010
 8004d20:	40020028 	.word	0x40020028
 8004d24:	40020040 	.word	0x40020040
 8004d28:	40020058 	.word	0x40020058
 8004d2c:	40020070 	.word	0x40020070
 8004d30:	40020088 	.word	0x40020088
 8004d34:	400200a0 	.word	0x400200a0
 8004d38:	400200b8 	.word	0x400200b8
 8004d3c:	40020410 	.word	0x40020410
 8004d40:	40020428 	.word	0x40020428
 8004d44:	40020440 	.word	0x40020440
 8004d48:	40020458 	.word	0x40020458
 8004d4c:	40020470 	.word	0x40020470
 8004d50:	40020488 	.word	0x40020488
 8004d54:	400204a0 	.word	0x400204a0
 8004d58:	400204b8 	.word	0x400204b8
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2300      	movs	r3, #0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00d      	beq.n	8004d84 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	2204      	movs	r2, #4
 8004d72:	409a      	lsls	r2, r3
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7c:	f043 0204 	orr.w	r2, r3, #4
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d88:	f003 031f 	and.w	r3, r3, #31
 8004d8c:	2210      	movs	r2, #16
 8004d8e:	409a      	lsls	r2, r3
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	4013      	ands	r3, r2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 80a6 	beq.w	8004ee6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a85      	ldr	r2, [pc, #532]	; (8004fb4 <HAL_DMA_IRQHandler+0x690>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d04a      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x516>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a83      	ldr	r2, [pc, #524]	; (8004fb8 <HAL_DMA_IRQHandler+0x694>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d045      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x516>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a82      	ldr	r2, [pc, #520]	; (8004fbc <HAL_DMA_IRQHandler+0x698>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d040      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x516>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a80      	ldr	r2, [pc, #512]	; (8004fc0 <HAL_DMA_IRQHandler+0x69c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d03b      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x516>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a7f      	ldr	r2, [pc, #508]	; (8004fc4 <HAL_DMA_IRQHandler+0x6a0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d036      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x516>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a7d      	ldr	r2, [pc, #500]	; (8004fc8 <HAL_DMA_IRQHandler+0x6a4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d031      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x516>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a7c      	ldr	r2, [pc, #496]	; (8004fcc <HAL_DMA_IRQHandler+0x6a8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d02c      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x516>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a7a      	ldr	r2, [pc, #488]	; (8004fd0 <HAL_DMA_IRQHandler+0x6ac>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d027      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x516>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a79      	ldr	r2, [pc, #484]	; (8004fd4 <HAL_DMA_IRQHandler+0x6b0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d022      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x516>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a77      	ldr	r2, [pc, #476]	; (8004fd8 <HAL_DMA_IRQHandler+0x6b4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d01d      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x516>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a76      	ldr	r2, [pc, #472]	; (8004fdc <HAL_DMA_IRQHandler+0x6b8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d018      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x516>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a74      	ldr	r2, [pc, #464]	; (8004fe0 <HAL_DMA_IRQHandler+0x6bc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d013      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x516>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a73      	ldr	r2, [pc, #460]	; (8004fe4 <HAL_DMA_IRQHandler+0x6c0>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d00e      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x516>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a71      	ldr	r2, [pc, #452]	; (8004fe8 <HAL_DMA_IRQHandler+0x6c4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d009      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x516>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a70      	ldr	r2, [pc, #448]	; (8004fec <HAL_DMA_IRQHandler+0x6c8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d004      	beq.n	8004e3a <HAL_DMA_IRQHandler+0x516>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a6e      	ldr	r2, [pc, #440]	; (8004ff0 <HAL_DMA_IRQHandler+0x6cc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d10a      	bne.n	8004e50 <HAL_DMA_IRQHandler+0x52c>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0308 	and.w	r3, r3, #8
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	bf14      	ite	ne
 8004e48:	2301      	movne	r3, #1
 8004e4a:	2300      	moveq	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	e009      	b.n	8004e64 <HAL_DMA_IRQHandler+0x540>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0304 	and.w	r3, r3, #4
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	bf14      	ite	ne
 8004e5e:	2301      	movne	r3, #1
 8004e60:	2300      	moveq	r3, #0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d03e      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	2210      	movs	r2, #16
 8004e72:	409a      	lsls	r2, r3
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d018      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d108      	bne.n	8004ea6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d024      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	4798      	blx	r3
 8004ea4:	e01f      	b.n	8004ee6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d01b      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	4798      	blx	r3
 8004eb6:	e016      	b.n	8004ee6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d107      	bne.n	8004ed6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0208 	bic.w	r2, r2, #8
 8004ed4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eea:	f003 031f 	and.w	r3, r3, #31
 8004eee:	2220      	movs	r2, #32
 8004ef0:	409a      	lsls	r2, r3
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 8110 	beq.w	800511c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a2c      	ldr	r2, [pc, #176]	; (8004fb4 <HAL_DMA_IRQHandler+0x690>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d04a      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x678>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a2b      	ldr	r2, [pc, #172]	; (8004fb8 <HAL_DMA_IRQHandler+0x694>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d045      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x678>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a29      	ldr	r2, [pc, #164]	; (8004fbc <HAL_DMA_IRQHandler+0x698>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d040      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x678>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a28      	ldr	r2, [pc, #160]	; (8004fc0 <HAL_DMA_IRQHandler+0x69c>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d03b      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x678>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a26      	ldr	r2, [pc, #152]	; (8004fc4 <HAL_DMA_IRQHandler+0x6a0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d036      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x678>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a25      	ldr	r2, [pc, #148]	; (8004fc8 <HAL_DMA_IRQHandler+0x6a4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d031      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x678>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a23      	ldr	r2, [pc, #140]	; (8004fcc <HAL_DMA_IRQHandler+0x6a8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d02c      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x678>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a22      	ldr	r2, [pc, #136]	; (8004fd0 <HAL_DMA_IRQHandler+0x6ac>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d027      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x678>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a20      	ldr	r2, [pc, #128]	; (8004fd4 <HAL_DMA_IRQHandler+0x6b0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d022      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x678>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1f      	ldr	r2, [pc, #124]	; (8004fd8 <HAL_DMA_IRQHandler+0x6b4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d01d      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x678>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <HAL_DMA_IRQHandler+0x6b8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d018      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x678>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1c      	ldr	r2, [pc, #112]	; (8004fe0 <HAL_DMA_IRQHandler+0x6bc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d013      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x678>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1a      	ldr	r2, [pc, #104]	; (8004fe4 <HAL_DMA_IRQHandler+0x6c0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00e      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x678>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a19      	ldr	r2, [pc, #100]	; (8004fe8 <HAL_DMA_IRQHandler+0x6c4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d009      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x678>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a17      	ldr	r2, [pc, #92]	; (8004fec <HAL_DMA_IRQHandler+0x6c8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d004      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x678>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a16      	ldr	r2, [pc, #88]	; (8004ff0 <HAL_DMA_IRQHandler+0x6cc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d12b      	bne.n	8004ff4 <HAL_DMA_IRQHandler+0x6d0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	bf14      	ite	ne
 8004faa:	2301      	movne	r3, #1
 8004fac:	2300      	moveq	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	e02a      	b.n	8005008 <HAL_DMA_IRQHandler+0x6e4>
 8004fb2:	bf00      	nop
 8004fb4:	40020010 	.word	0x40020010
 8004fb8:	40020028 	.word	0x40020028
 8004fbc:	40020040 	.word	0x40020040
 8004fc0:	40020058 	.word	0x40020058
 8004fc4:	40020070 	.word	0x40020070
 8004fc8:	40020088 	.word	0x40020088
 8004fcc:	400200a0 	.word	0x400200a0
 8004fd0:	400200b8 	.word	0x400200b8
 8004fd4:	40020410 	.word	0x40020410
 8004fd8:	40020428 	.word	0x40020428
 8004fdc:	40020440 	.word	0x40020440
 8004fe0:	40020458 	.word	0x40020458
 8004fe4:	40020470 	.word	0x40020470
 8004fe8:	40020488 	.word	0x40020488
 8004fec:	400204a0 	.word	0x400204a0
 8004ff0:	400204b8 	.word	0x400204b8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	bf14      	ite	ne
 8005002:	2301      	movne	r3, #1
 8005004:	2300      	moveq	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8087 	beq.w	800511c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005012:	f003 031f 	and.w	r3, r3, #31
 8005016:	2220      	movs	r2, #32
 8005018:	409a      	lsls	r2, r3
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b04      	cmp	r3, #4
 8005028:	d139      	bne.n	800509e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0216 	bic.w	r2, r2, #22
 8005038:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695a      	ldr	r2, [r3, #20]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005048:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	2b00      	cmp	r3, #0
 8005050:	d103      	bne.n	800505a <HAL_DMA_IRQHandler+0x736>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005056:	2b00      	cmp	r3, #0
 8005058:	d007      	beq.n	800506a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f022 0208 	bic.w	r2, r2, #8
 8005068:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	223f      	movs	r2, #63	; 0x3f
 8005074:	409a      	lsls	r2, r3
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 834a 	beq.w	8005728 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	4798      	blx	r3
          }
          return;
 800509c:	e344      	b.n	8005728 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d018      	beq.n	80050de <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d108      	bne.n	80050cc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d02c      	beq.n	800511c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	4798      	blx	r3
 80050ca:	e027      	b.n	800511c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d023      	beq.n	800511c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4798      	blx	r3
 80050dc:	e01e      	b.n	800511c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10f      	bne.n	800510c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f022 0210 	bic.w	r2, r2, #16
 80050fa:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 8306 	beq.w	8005732 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	f000 8088 	beq.w	8005244 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2204      	movs	r2, #4
 8005138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a7a      	ldr	r2, [pc, #488]	; (800532c <HAL_DMA_IRQHandler+0xa08>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d04a      	beq.n	80051dc <HAL_DMA_IRQHandler+0x8b8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a79      	ldr	r2, [pc, #484]	; (8005330 <HAL_DMA_IRQHandler+0xa0c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d045      	beq.n	80051dc <HAL_DMA_IRQHandler+0x8b8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a77      	ldr	r2, [pc, #476]	; (8005334 <HAL_DMA_IRQHandler+0xa10>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d040      	beq.n	80051dc <HAL_DMA_IRQHandler+0x8b8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a76      	ldr	r2, [pc, #472]	; (8005338 <HAL_DMA_IRQHandler+0xa14>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d03b      	beq.n	80051dc <HAL_DMA_IRQHandler+0x8b8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a74      	ldr	r2, [pc, #464]	; (800533c <HAL_DMA_IRQHandler+0xa18>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d036      	beq.n	80051dc <HAL_DMA_IRQHandler+0x8b8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a73      	ldr	r2, [pc, #460]	; (8005340 <HAL_DMA_IRQHandler+0xa1c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d031      	beq.n	80051dc <HAL_DMA_IRQHandler+0x8b8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a71      	ldr	r2, [pc, #452]	; (8005344 <HAL_DMA_IRQHandler+0xa20>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d02c      	beq.n	80051dc <HAL_DMA_IRQHandler+0x8b8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a70      	ldr	r2, [pc, #448]	; (8005348 <HAL_DMA_IRQHandler+0xa24>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d027      	beq.n	80051dc <HAL_DMA_IRQHandler+0x8b8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a6e      	ldr	r2, [pc, #440]	; (800534c <HAL_DMA_IRQHandler+0xa28>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d022      	beq.n	80051dc <HAL_DMA_IRQHandler+0x8b8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a6d      	ldr	r2, [pc, #436]	; (8005350 <HAL_DMA_IRQHandler+0xa2c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d01d      	beq.n	80051dc <HAL_DMA_IRQHandler+0x8b8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a6b      	ldr	r2, [pc, #428]	; (8005354 <HAL_DMA_IRQHandler+0xa30>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d018      	beq.n	80051dc <HAL_DMA_IRQHandler+0x8b8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a6a      	ldr	r2, [pc, #424]	; (8005358 <HAL_DMA_IRQHandler+0xa34>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d013      	beq.n	80051dc <HAL_DMA_IRQHandler+0x8b8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a68      	ldr	r2, [pc, #416]	; (800535c <HAL_DMA_IRQHandler+0xa38>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d00e      	beq.n	80051dc <HAL_DMA_IRQHandler+0x8b8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a67      	ldr	r2, [pc, #412]	; (8005360 <HAL_DMA_IRQHandler+0xa3c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d009      	beq.n	80051dc <HAL_DMA_IRQHandler+0x8b8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a65      	ldr	r2, [pc, #404]	; (8005364 <HAL_DMA_IRQHandler+0xa40>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d004      	beq.n	80051dc <HAL_DMA_IRQHandler+0x8b8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a64      	ldr	r2, [pc, #400]	; (8005368 <HAL_DMA_IRQHandler+0xa44>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d108      	bne.n	80051ee <HAL_DMA_IRQHandler+0x8ca>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f022 0201 	bic.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
 80051ec:	e007      	b.n	80051fe <HAL_DMA_IRQHandler+0x8da>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0201 	bic.w	r2, r2, #1
 80051fc:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005206:	429a      	cmp	r2, r3
 8005208:	d307      	bcc.n	800521a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0301 	and.w	r3, r3, #1
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1f2      	bne.n	80051fe <HAL_DMA_IRQHandler+0x8da>
 8005218:	e000      	b.n	800521c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800521a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d004      	beq.n	8005234 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2203      	movs	r2, #3
 800522e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005232:	e003      	b.n	800523c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005248:	2b00      	cmp	r3, #0
 800524a:	f000 8272 	beq.w	8005732 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	4798      	blx	r3
 8005256:	e26c      	b.n	8005732 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a43      	ldr	r2, [pc, #268]	; (800536c <HAL_DMA_IRQHandler+0xa48>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d022      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x984>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a42      	ldr	r2, [pc, #264]	; (8005370 <HAL_DMA_IRQHandler+0xa4c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d01d      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x984>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a40      	ldr	r2, [pc, #256]	; (8005374 <HAL_DMA_IRQHandler+0xa50>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d018      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x984>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a3f      	ldr	r2, [pc, #252]	; (8005378 <HAL_DMA_IRQHandler+0xa54>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d013      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x984>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a3d      	ldr	r2, [pc, #244]	; (800537c <HAL_DMA_IRQHandler+0xa58>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d00e      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x984>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a3c      	ldr	r2, [pc, #240]	; (8005380 <HAL_DMA_IRQHandler+0xa5c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d009      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x984>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a3a      	ldr	r2, [pc, #232]	; (8005384 <HAL_DMA_IRQHandler+0xa60>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d004      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x984>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a39      	ldr	r2, [pc, #228]	; (8005388 <HAL_DMA_IRQHandler+0xa64>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d101      	bne.n	80052ac <HAL_DMA_IRQHandler+0x988>
 80052a8:	2301      	movs	r3, #1
 80052aa:	e000      	b.n	80052ae <HAL_DMA_IRQHandler+0x98a>
 80052ac:	2300      	movs	r3, #0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 823f 	beq.w	8005732 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	2204      	movs	r2, #4
 80052c6:	409a      	lsls	r2, r3
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 80cd 	beq.w	800546c <HAL_DMA_IRQHandler+0xb48>
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f003 0304 	and.w	r3, r3, #4
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 80c7 	beq.w	800546c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e2:	f003 031f 	and.w	r3, r3, #31
 80052e6:	2204      	movs	r2, #4
 80052e8:	409a      	lsls	r2, r3
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d049      	beq.n	800538c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d109      	bne.n	8005316 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 8210 	beq.w	800572c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005314:	e20a      	b.n	800572c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 8206 	beq.w	800572c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005328:	e200      	b.n	800572c <HAL_DMA_IRQHandler+0xe08>
 800532a:	bf00      	nop
 800532c:	40020010 	.word	0x40020010
 8005330:	40020028 	.word	0x40020028
 8005334:	40020040 	.word	0x40020040
 8005338:	40020058 	.word	0x40020058
 800533c:	40020070 	.word	0x40020070
 8005340:	40020088 	.word	0x40020088
 8005344:	400200a0 	.word	0x400200a0
 8005348:	400200b8 	.word	0x400200b8
 800534c:	40020410 	.word	0x40020410
 8005350:	40020428 	.word	0x40020428
 8005354:	40020440 	.word	0x40020440
 8005358:	40020458 	.word	0x40020458
 800535c:	40020470 	.word	0x40020470
 8005360:	40020488 	.word	0x40020488
 8005364:	400204a0 	.word	0x400204a0
 8005368:	400204b8 	.word	0x400204b8
 800536c:	58025408 	.word	0x58025408
 8005370:	5802541c 	.word	0x5802541c
 8005374:	58025430 	.word	0x58025430
 8005378:	58025444 	.word	0x58025444
 800537c:	58025458 	.word	0x58025458
 8005380:	5802546c 	.word	0x5802546c
 8005384:	58025480 	.word	0x58025480
 8005388:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b00      	cmp	r3, #0
 8005394:	d160      	bne.n	8005458 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a8c      	ldr	r2, [pc, #560]	; (80055cc <HAL_DMA_IRQHandler+0xca8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d04a      	beq.n	8005436 <HAL_DMA_IRQHandler+0xb12>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a8a      	ldr	r2, [pc, #552]	; (80055d0 <HAL_DMA_IRQHandler+0xcac>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d045      	beq.n	8005436 <HAL_DMA_IRQHandler+0xb12>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a89      	ldr	r2, [pc, #548]	; (80055d4 <HAL_DMA_IRQHandler+0xcb0>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d040      	beq.n	8005436 <HAL_DMA_IRQHandler+0xb12>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a87      	ldr	r2, [pc, #540]	; (80055d8 <HAL_DMA_IRQHandler+0xcb4>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d03b      	beq.n	8005436 <HAL_DMA_IRQHandler+0xb12>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a86      	ldr	r2, [pc, #536]	; (80055dc <HAL_DMA_IRQHandler+0xcb8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d036      	beq.n	8005436 <HAL_DMA_IRQHandler+0xb12>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a84      	ldr	r2, [pc, #528]	; (80055e0 <HAL_DMA_IRQHandler+0xcbc>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d031      	beq.n	8005436 <HAL_DMA_IRQHandler+0xb12>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a83      	ldr	r2, [pc, #524]	; (80055e4 <HAL_DMA_IRQHandler+0xcc0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d02c      	beq.n	8005436 <HAL_DMA_IRQHandler+0xb12>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a81      	ldr	r2, [pc, #516]	; (80055e8 <HAL_DMA_IRQHandler+0xcc4>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d027      	beq.n	8005436 <HAL_DMA_IRQHandler+0xb12>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a80      	ldr	r2, [pc, #512]	; (80055ec <HAL_DMA_IRQHandler+0xcc8>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d022      	beq.n	8005436 <HAL_DMA_IRQHandler+0xb12>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a7e      	ldr	r2, [pc, #504]	; (80055f0 <HAL_DMA_IRQHandler+0xccc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d01d      	beq.n	8005436 <HAL_DMA_IRQHandler+0xb12>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a7d      	ldr	r2, [pc, #500]	; (80055f4 <HAL_DMA_IRQHandler+0xcd0>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d018      	beq.n	8005436 <HAL_DMA_IRQHandler+0xb12>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a7b      	ldr	r2, [pc, #492]	; (80055f8 <HAL_DMA_IRQHandler+0xcd4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d013      	beq.n	8005436 <HAL_DMA_IRQHandler+0xb12>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a7a      	ldr	r2, [pc, #488]	; (80055fc <HAL_DMA_IRQHandler+0xcd8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00e      	beq.n	8005436 <HAL_DMA_IRQHandler+0xb12>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a78      	ldr	r2, [pc, #480]	; (8005600 <HAL_DMA_IRQHandler+0xcdc>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d009      	beq.n	8005436 <HAL_DMA_IRQHandler+0xb12>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a77      	ldr	r2, [pc, #476]	; (8005604 <HAL_DMA_IRQHandler+0xce0>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d004      	beq.n	8005436 <HAL_DMA_IRQHandler+0xb12>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a75      	ldr	r2, [pc, #468]	; (8005608 <HAL_DMA_IRQHandler+0xce4>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d108      	bne.n	8005448 <HAL_DMA_IRQHandler+0xb24>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0208 	bic.w	r2, r2, #8
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e007      	b.n	8005458 <HAL_DMA_IRQHandler+0xb34>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0204 	bic.w	r2, r2, #4
 8005456:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 8165 	beq.w	800572c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800546a:	e15f      	b.n	800572c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005470:	f003 031f 	and.w	r3, r3, #31
 8005474:	2202      	movs	r2, #2
 8005476:	409a      	lsls	r2, r3
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	4013      	ands	r3, r2
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 80c5 	beq.w	800560c <HAL_DMA_IRQHandler+0xce8>
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 80bf 	beq.w	800560c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005492:	f003 031f 	and.w	r3, r3, #31
 8005496:	2202      	movs	r2, #2
 8005498:	409a      	lsls	r2, r3
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d018      	beq.n	80054da <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d109      	bne.n	80054c6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 813a 	beq.w	8005730 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054c4:	e134      	b.n	8005730 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 8130 	beq.w	8005730 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054d8:	e12a      	b.n	8005730 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f003 0320 	and.w	r3, r3, #32
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d168      	bne.n	80055b6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a38      	ldr	r2, [pc, #224]	; (80055cc <HAL_DMA_IRQHandler+0xca8>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d04a      	beq.n	8005584 <HAL_DMA_IRQHandler+0xc60>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a37      	ldr	r2, [pc, #220]	; (80055d0 <HAL_DMA_IRQHandler+0xcac>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d045      	beq.n	8005584 <HAL_DMA_IRQHandler+0xc60>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a35      	ldr	r2, [pc, #212]	; (80055d4 <HAL_DMA_IRQHandler+0xcb0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d040      	beq.n	8005584 <HAL_DMA_IRQHandler+0xc60>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a34      	ldr	r2, [pc, #208]	; (80055d8 <HAL_DMA_IRQHandler+0xcb4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d03b      	beq.n	8005584 <HAL_DMA_IRQHandler+0xc60>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a32      	ldr	r2, [pc, #200]	; (80055dc <HAL_DMA_IRQHandler+0xcb8>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d036      	beq.n	8005584 <HAL_DMA_IRQHandler+0xc60>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a31      	ldr	r2, [pc, #196]	; (80055e0 <HAL_DMA_IRQHandler+0xcbc>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d031      	beq.n	8005584 <HAL_DMA_IRQHandler+0xc60>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a2f      	ldr	r2, [pc, #188]	; (80055e4 <HAL_DMA_IRQHandler+0xcc0>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d02c      	beq.n	8005584 <HAL_DMA_IRQHandler+0xc60>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a2e      	ldr	r2, [pc, #184]	; (80055e8 <HAL_DMA_IRQHandler+0xcc4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d027      	beq.n	8005584 <HAL_DMA_IRQHandler+0xc60>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a2c      	ldr	r2, [pc, #176]	; (80055ec <HAL_DMA_IRQHandler+0xcc8>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d022      	beq.n	8005584 <HAL_DMA_IRQHandler+0xc60>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a2b      	ldr	r2, [pc, #172]	; (80055f0 <HAL_DMA_IRQHandler+0xccc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d01d      	beq.n	8005584 <HAL_DMA_IRQHandler+0xc60>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a29      	ldr	r2, [pc, #164]	; (80055f4 <HAL_DMA_IRQHandler+0xcd0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d018      	beq.n	8005584 <HAL_DMA_IRQHandler+0xc60>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a28      	ldr	r2, [pc, #160]	; (80055f8 <HAL_DMA_IRQHandler+0xcd4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d013      	beq.n	8005584 <HAL_DMA_IRQHandler+0xc60>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a26      	ldr	r2, [pc, #152]	; (80055fc <HAL_DMA_IRQHandler+0xcd8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00e      	beq.n	8005584 <HAL_DMA_IRQHandler+0xc60>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a25      	ldr	r2, [pc, #148]	; (8005600 <HAL_DMA_IRQHandler+0xcdc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d009      	beq.n	8005584 <HAL_DMA_IRQHandler+0xc60>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a23      	ldr	r2, [pc, #140]	; (8005604 <HAL_DMA_IRQHandler+0xce0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d004      	beq.n	8005584 <HAL_DMA_IRQHandler+0xc60>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a22      	ldr	r2, [pc, #136]	; (8005608 <HAL_DMA_IRQHandler+0xce4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d108      	bne.n	8005596 <HAL_DMA_IRQHandler+0xc72>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0214 	bic.w	r2, r2, #20
 8005592:	601a      	str	r2, [r3, #0]
 8005594:	e007      	b.n	80055a6 <HAL_DMA_IRQHandler+0xc82>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 020a 	bic.w	r2, r2, #10
 80055a4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 80b8 	beq.w	8005730 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055c8:	e0b2      	b.n	8005730 <HAL_DMA_IRQHandler+0xe0c>
 80055ca:	bf00      	nop
 80055cc:	40020010 	.word	0x40020010
 80055d0:	40020028 	.word	0x40020028
 80055d4:	40020040 	.word	0x40020040
 80055d8:	40020058 	.word	0x40020058
 80055dc:	40020070 	.word	0x40020070
 80055e0:	40020088 	.word	0x40020088
 80055e4:	400200a0 	.word	0x400200a0
 80055e8:	400200b8 	.word	0x400200b8
 80055ec:	40020410 	.word	0x40020410
 80055f0:	40020428 	.word	0x40020428
 80055f4:	40020440 	.word	0x40020440
 80055f8:	40020458 	.word	0x40020458
 80055fc:	40020470 	.word	0x40020470
 8005600:	40020488 	.word	0x40020488
 8005604:	400204a0 	.word	0x400204a0
 8005608:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005610:	f003 031f 	and.w	r3, r3, #31
 8005614:	2208      	movs	r2, #8
 8005616:	409a      	lsls	r2, r3
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	4013      	ands	r3, r2
 800561c:	2b00      	cmp	r3, #0
 800561e:	f000 8088 	beq.w	8005732 <HAL_DMA_IRQHandler+0xe0e>
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8082 	beq.w	8005732 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a41      	ldr	r2, [pc, #260]	; (8005738 <HAL_DMA_IRQHandler+0xe14>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d04a      	beq.n	80056ce <HAL_DMA_IRQHandler+0xdaa>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a3f      	ldr	r2, [pc, #252]	; (800573c <HAL_DMA_IRQHandler+0xe18>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d045      	beq.n	80056ce <HAL_DMA_IRQHandler+0xdaa>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a3e      	ldr	r2, [pc, #248]	; (8005740 <HAL_DMA_IRQHandler+0xe1c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d040      	beq.n	80056ce <HAL_DMA_IRQHandler+0xdaa>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a3c      	ldr	r2, [pc, #240]	; (8005744 <HAL_DMA_IRQHandler+0xe20>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d03b      	beq.n	80056ce <HAL_DMA_IRQHandler+0xdaa>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a3b      	ldr	r2, [pc, #236]	; (8005748 <HAL_DMA_IRQHandler+0xe24>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d036      	beq.n	80056ce <HAL_DMA_IRQHandler+0xdaa>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a39      	ldr	r2, [pc, #228]	; (800574c <HAL_DMA_IRQHandler+0xe28>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d031      	beq.n	80056ce <HAL_DMA_IRQHandler+0xdaa>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a38      	ldr	r2, [pc, #224]	; (8005750 <HAL_DMA_IRQHandler+0xe2c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d02c      	beq.n	80056ce <HAL_DMA_IRQHandler+0xdaa>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a36      	ldr	r2, [pc, #216]	; (8005754 <HAL_DMA_IRQHandler+0xe30>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d027      	beq.n	80056ce <HAL_DMA_IRQHandler+0xdaa>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a35      	ldr	r2, [pc, #212]	; (8005758 <HAL_DMA_IRQHandler+0xe34>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d022      	beq.n	80056ce <HAL_DMA_IRQHandler+0xdaa>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a33      	ldr	r2, [pc, #204]	; (800575c <HAL_DMA_IRQHandler+0xe38>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d01d      	beq.n	80056ce <HAL_DMA_IRQHandler+0xdaa>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a32      	ldr	r2, [pc, #200]	; (8005760 <HAL_DMA_IRQHandler+0xe3c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d018      	beq.n	80056ce <HAL_DMA_IRQHandler+0xdaa>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a30      	ldr	r2, [pc, #192]	; (8005764 <HAL_DMA_IRQHandler+0xe40>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d013      	beq.n	80056ce <HAL_DMA_IRQHandler+0xdaa>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a2f      	ldr	r2, [pc, #188]	; (8005768 <HAL_DMA_IRQHandler+0xe44>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d00e      	beq.n	80056ce <HAL_DMA_IRQHandler+0xdaa>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a2d      	ldr	r2, [pc, #180]	; (800576c <HAL_DMA_IRQHandler+0xe48>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d009      	beq.n	80056ce <HAL_DMA_IRQHandler+0xdaa>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a2c      	ldr	r2, [pc, #176]	; (8005770 <HAL_DMA_IRQHandler+0xe4c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d004      	beq.n	80056ce <HAL_DMA_IRQHandler+0xdaa>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a2a      	ldr	r2, [pc, #168]	; (8005774 <HAL_DMA_IRQHandler+0xe50>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d108      	bne.n	80056e0 <HAL_DMA_IRQHandler+0xdbc>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f022 021c 	bic.w	r2, r2, #28
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e007      	b.n	80056f0 <HAL_DMA_IRQHandler+0xdcc>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 020e 	bic.w	r2, r2, #14
 80056ee:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f4:	f003 031f 	and.w	r3, r3, #31
 80056f8:	2201      	movs	r2, #1
 80056fa:	409a      	lsls	r2, r3
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571a:	2b00      	cmp	r3, #0
 800571c:	d009      	beq.n	8005732 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	4798      	blx	r3
 8005726:	e004      	b.n	8005732 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005728:	bf00      	nop
 800572a:	e002      	b.n	8005732 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800572c:	bf00      	nop
 800572e:	e000      	b.n	8005732 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005730:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005732:	3728      	adds	r7, #40	; 0x28
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	40020010 	.word	0x40020010
 800573c:	40020028 	.word	0x40020028
 8005740:	40020040 	.word	0x40020040
 8005744:	40020058 	.word	0x40020058
 8005748:	40020070 	.word	0x40020070
 800574c:	40020088 	.word	0x40020088
 8005750:	400200a0 	.word	0x400200a0
 8005754:	400200b8 	.word	0x400200b8
 8005758:	40020410 	.word	0x40020410
 800575c:	40020428 	.word	0x40020428
 8005760:	40020440 	.word	0x40020440
 8005764:	40020458 	.word	0x40020458
 8005768:	40020470 	.word	0x40020470
 800576c:	40020488 	.word	0x40020488
 8005770:	400204a0 	.word	0x400204a0
 8005774:	400204b8 	.word	0x400204b8

08005778 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
 8005784:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005790:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a84      	ldr	r2, [pc, #528]	; (80059a8 <DMA_SetConfig+0x230>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d072      	beq.n	8005882 <DMA_SetConfig+0x10a>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a82      	ldr	r2, [pc, #520]	; (80059ac <DMA_SetConfig+0x234>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d06d      	beq.n	8005882 <DMA_SetConfig+0x10a>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a81      	ldr	r2, [pc, #516]	; (80059b0 <DMA_SetConfig+0x238>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d068      	beq.n	8005882 <DMA_SetConfig+0x10a>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a7f      	ldr	r2, [pc, #508]	; (80059b4 <DMA_SetConfig+0x23c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d063      	beq.n	8005882 <DMA_SetConfig+0x10a>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a7e      	ldr	r2, [pc, #504]	; (80059b8 <DMA_SetConfig+0x240>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d05e      	beq.n	8005882 <DMA_SetConfig+0x10a>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a7c      	ldr	r2, [pc, #496]	; (80059bc <DMA_SetConfig+0x244>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d059      	beq.n	8005882 <DMA_SetConfig+0x10a>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a7b      	ldr	r2, [pc, #492]	; (80059c0 <DMA_SetConfig+0x248>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d054      	beq.n	8005882 <DMA_SetConfig+0x10a>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a79      	ldr	r2, [pc, #484]	; (80059c4 <DMA_SetConfig+0x24c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d04f      	beq.n	8005882 <DMA_SetConfig+0x10a>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a78      	ldr	r2, [pc, #480]	; (80059c8 <DMA_SetConfig+0x250>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d04a      	beq.n	8005882 <DMA_SetConfig+0x10a>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a76      	ldr	r2, [pc, #472]	; (80059cc <DMA_SetConfig+0x254>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d045      	beq.n	8005882 <DMA_SetConfig+0x10a>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a75      	ldr	r2, [pc, #468]	; (80059d0 <DMA_SetConfig+0x258>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d040      	beq.n	8005882 <DMA_SetConfig+0x10a>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a73      	ldr	r2, [pc, #460]	; (80059d4 <DMA_SetConfig+0x25c>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d03b      	beq.n	8005882 <DMA_SetConfig+0x10a>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a72      	ldr	r2, [pc, #456]	; (80059d8 <DMA_SetConfig+0x260>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d036      	beq.n	8005882 <DMA_SetConfig+0x10a>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a70      	ldr	r2, [pc, #448]	; (80059dc <DMA_SetConfig+0x264>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d031      	beq.n	8005882 <DMA_SetConfig+0x10a>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a6f      	ldr	r2, [pc, #444]	; (80059e0 <DMA_SetConfig+0x268>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d02c      	beq.n	8005882 <DMA_SetConfig+0x10a>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a6d      	ldr	r2, [pc, #436]	; (80059e4 <DMA_SetConfig+0x26c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d027      	beq.n	8005882 <DMA_SetConfig+0x10a>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a6c      	ldr	r2, [pc, #432]	; (80059e8 <DMA_SetConfig+0x270>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d022      	beq.n	8005882 <DMA_SetConfig+0x10a>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a6a      	ldr	r2, [pc, #424]	; (80059ec <DMA_SetConfig+0x274>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d01d      	beq.n	8005882 <DMA_SetConfig+0x10a>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a69      	ldr	r2, [pc, #420]	; (80059f0 <DMA_SetConfig+0x278>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d018      	beq.n	8005882 <DMA_SetConfig+0x10a>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a67      	ldr	r2, [pc, #412]	; (80059f4 <DMA_SetConfig+0x27c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d013      	beq.n	8005882 <DMA_SetConfig+0x10a>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a66      	ldr	r2, [pc, #408]	; (80059f8 <DMA_SetConfig+0x280>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00e      	beq.n	8005882 <DMA_SetConfig+0x10a>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a64      	ldr	r2, [pc, #400]	; (80059fc <DMA_SetConfig+0x284>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d009      	beq.n	8005882 <DMA_SetConfig+0x10a>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a63      	ldr	r2, [pc, #396]	; (8005a00 <DMA_SetConfig+0x288>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d004      	beq.n	8005882 <DMA_SetConfig+0x10a>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a61      	ldr	r2, [pc, #388]	; (8005a04 <DMA_SetConfig+0x28c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d101      	bne.n	8005886 <DMA_SetConfig+0x10e>
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <DMA_SetConfig+0x110>
 8005886:	2300      	movs	r3, #0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00d      	beq.n	80058a8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005894:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800589a:	2b00      	cmp	r3, #0
 800589c:	d004      	beq.n	80058a8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80058a6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a3e      	ldr	r2, [pc, #248]	; (80059a8 <DMA_SetConfig+0x230>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d04a      	beq.n	8005948 <DMA_SetConfig+0x1d0>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a3d      	ldr	r2, [pc, #244]	; (80059ac <DMA_SetConfig+0x234>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d045      	beq.n	8005948 <DMA_SetConfig+0x1d0>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a3b      	ldr	r2, [pc, #236]	; (80059b0 <DMA_SetConfig+0x238>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d040      	beq.n	8005948 <DMA_SetConfig+0x1d0>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a3a      	ldr	r2, [pc, #232]	; (80059b4 <DMA_SetConfig+0x23c>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d03b      	beq.n	8005948 <DMA_SetConfig+0x1d0>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a38      	ldr	r2, [pc, #224]	; (80059b8 <DMA_SetConfig+0x240>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d036      	beq.n	8005948 <DMA_SetConfig+0x1d0>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a37      	ldr	r2, [pc, #220]	; (80059bc <DMA_SetConfig+0x244>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d031      	beq.n	8005948 <DMA_SetConfig+0x1d0>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a35      	ldr	r2, [pc, #212]	; (80059c0 <DMA_SetConfig+0x248>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d02c      	beq.n	8005948 <DMA_SetConfig+0x1d0>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a34      	ldr	r2, [pc, #208]	; (80059c4 <DMA_SetConfig+0x24c>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d027      	beq.n	8005948 <DMA_SetConfig+0x1d0>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a32      	ldr	r2, [pc, #200]	; (80059c8 <DMA_SetConfig+0x250>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d022      	beq.n	8005948 <DMA_SetConfig+0x1d0>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a31      	ldr	r2, [pc, #196]	; (80059cc <DMA_SetConfig+0x254>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d01d      	beq.n	8005948 <DMA_SetConfig+0x1d0>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a2f      	ldr	r2, [pc, #188]	; (80059d0 <DMA_SetConfig+0x258>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d018      	beq.n	8005948 <DMA_SetConfig+0x1d0>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a2e      	ldr	r2, [pc, #184]	; (80059d4 <DMA_SetConfig+0x25c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d013      	beq.n	8005948 <DMA_SetConfig+0x1d0>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a2c      	ldr	r2, [pc, #176]	; (80059d8 <DMA_SetConfig+0x260>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00e      	beq.n	8005948 <DMA_SetConfig+0x1d0>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a2b      	ldr	r2, [pc, #172]	; (80059dc <DMA_SetConfig+0x264>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d009      	beq.n	8005948 <DMA_SetConfig+0x1d0>
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a29      	ldr	r2, [pc, #164]	; (80059e0 <DMA_SetConfig+0x268>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d004      	beq.n	8005948 <DMA_SetConfig+0x1d0>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a28      	ldr	r2, [pc, #160]	; (80059e4 <DMA_SetConfig+0x26c>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d101      	bne.n	800594c <DMA_SetConfig+0x1d4>
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <DMA_SetConfig+0x1d6>
 800594c:	2300      	movs	r3, #0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d05a      	beq.n	8005a08 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005956:	f003 031f 	and.w	r3, r3, #31
 800595a:	223f      	movs	r2, #63	; 0x3f
 800595c:	409a      	lsls	r2, r3
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005970:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	2b40      	cmp	r3, #64	; 0x40
 8005980:	d108      	bne.n	8005994 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005992:	e087      	b.n	8005aa4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68ba      	ldr	r2, [r7, #8]
 800599a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	60da      	str	r2, [r3, #12]
}
 80059a4:	e07e      	b.n	8005aa4 <DMA_SetConfig+0x32c>
 80059a6:	bf00      	nop
 80059a8:	40020010 	.word	0x40020010
 80059ac:	40020028 	.word	0x40020028
 80059b0:	40020040 	.word	0x40020040
 80059b4:	40020058 	.word	0x40020058
 80059b8:	40020070 	.word	0x40020070
 80059bc:	40020088 	.word	0x40020088
 80059c0:	400200a0 	.word	0x400200a0
 80059c4:	400200b8 	.word	0x400200b8
 80059c8:	40020410 	.word	0x40020410
 80059cc:	40020428 	.word	0x40020428
 80059d0:	40020440 	.word	0x40020440
 80059d4:	40020458 	.word	0x40020458
 80059d8:	40020470 	.word	0x40020470
 80059dc:	40020488 	.word	0x40020488
 80059e0:	400204a0 	.word	0x400204a0
 80059e4:	400204b8 	.word	0x400204b8
 80059e8:	58025408 	.word	0x58025408
 80059ec:	5802541c 	.word	0x5802541c
 80059f0:	58025430 	.word	0x58025430
 80059f4:	58025444 	.word	0x58025444
 80059f8:	58025458 	.word	0x58025458
 80059fc:	5802546c 	.word	0x5802546c
 8005a00:	58025480 	.word	0x58025480
 8005a04:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a28      	ldr	r2, [pc, #160]	; (8005ab0 <DMA_SetConfig+0x338>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d022      	beq.n	8005a58 <DMA_SetConfig+0x2e0>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a27      	ldr	r2, [pc, #156]	; (8005ab4 <DMA_SetConfig+0x33c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d01d      	beq.n	8005a58 <DMA_SetConfig+0x2e0>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a25      	ldr	r2, [pc, #148]	; (8005ab8 <DMA_SetConfig+0x340>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d018      	beq.n	8005a58 <DMA_SetConfig+0x2e0>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a24      	ldr	r2, [pc, #144]	; (8005abc <DMA_SetConfig+0x344>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d013      	beq.n	8005a58 <DMA_SetConfig+0x2e0>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a22      	ldr	r2, [pc, #136]	; (8005ac0 <DMA_SetConfig+0x348>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d00e      	beq.n	8005a58 <DMA_SetConfig+0x2e0>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a21      	ldr	r2, [pc, #132]	; (8005ac4 <DMA_SetConfig+0x34c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d009      	beq.n	8005a58 <DMA_SetConfig+0x2e0>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a1f      	ldr	r2, [pc, #124]	; (8005ac8 <DMA_SetConfig+0x350>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d004      	beq.n	8005a58 <DMA_SetConfig+0x2e0>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a1e      	ldr	r2, [pc, #120]	; (8005acc <DMA_SetConfig+0x354>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d101      	bne.n	8005a5c <DMA_SetConfig+0x2e4>
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e000      	b.n	8005a5e <DMA_SetConfig+0x2e6>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d020      	beq.n	8005aa4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a66:	f003 031f 	and.w	r3, r3, #31
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	409a      	lsls	r2, r3
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	d108      	bne.n	8005a94 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	60da      	str	r2, [r3, #12]
}
 8005a92:	e007      	b.n	8005aa4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	68ba      	ldr	r2, [r7, #8]
 8005a9a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	60da      	str	r2, [r3, #12]
}
 8005aa4:	bf00      	nop
 8005aa6:	371c      	adds	r7, #28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	58025408 	.word	0x58025408
 8005ab4:	5802541c 	.word	0x5802541c
 8005ab8:	58025430 	.word	0x58025430
 8005abc:	58025444 	.word	0x58025444
 8005ac0:	58025458 	.word	0x58025458
 8005ac4:	5802546c 	.word	0x5802546c
 8005ac8:	58025480 	.word	0x58025480
 8005acc:	58025494 	.word	0x58025494

08005ad0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a42      	ldr	r2, [pc, #264]	; (8005be8 <DMA_CalcBaseAndBitshift+0x118>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d04a      	beq.n	8005b78 <DMA_CalcBaseAndBitshift+0xa8>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a41      	ldr	r2, [pc, #260]	; (8005bec <DMA_CalcBaseAndBitshift+0x11c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d045      	beq.n	8005b78 <DMA_CalcBaseAndBitshift+0xa8>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a3f      	ldr	r2, [pc, #252]	; (8005bf0 <DMA_CalcBaseAndBitshift+0x120>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d040      	beq.n	8005b78 <DMA_CalcBaseAndBitshift+0xa8>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a3e      	ldr	r2, [pc, #248]	; (8005bf4 <DMA_CalcBaseAndBitshift+0x124>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d03b      	beq.n	8005b78 <DMA_CalcBaseAndBitshift+0xa8>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a3c      	ldr	r2, [pc, #240]	; (8005bf8 <DMA_CalcBaseAndBitshift+0x128>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d036      	beq.n	8005b78 <DMA_CalcBaseAndBitshift+0xa8>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a3b      	ldr	r2, [pc, #236]	; (8005bfc <DMA_CalcBaseAndBitshift+0x12c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d031      	beq.n	8005b78 <DMA_CalcBaseAndBitshift+0xa8>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a39      	ldr	r2, [pc, #228]	; (8005c00 <DMA_CalcBaseAndBitshift+0x130>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d02c      	beq.n	8005b78 <DMA_CalcBaseAndBitshift+0xa8>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a38      	ldr	r2, [pc, #224]	; (8005c04 <DMA_CalcBaseAndBitshift+0x134>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d027      	beq.n	8005b78 <DMA_CalcBaseAndBitshift+0xa8>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a36      	ldr	r2, [pc, #216]	; (8005c08 <DMA_CalcBaseAndBitshift+0x138>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d022      	beq.n	8005b78 <DMA_CalcBaseAndBitshift+0xa8>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a35      	ldr	r2, [pc, #212]	; (8005c0c <DMA_CalcBaseAndBitshift+0x13c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d01d      	beq.n	8005b78 <DMA_CalcBaseAndBitshift+0xa8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a33      	ldr	r2, [pc, #204]	; (8005c10 <DMA_CalcBaseAndBitshift+0x140>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d018      	beq.n	8005b78 <DMA_CalcBaseAndBitshift+0xa8>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a32      	ldr	r2, [pc, #200]	; (8005c14 <DMA_CalcBaseAndBitshift+0x144>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d013      	beq.n	8005b78 <DMA_CalcBaseAndBitshift+0xa8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a30      	ldr	r2, [pc, #192]	; (8005c18 <DMA_CalcBaseAndBitshift+0x148>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d00e      	beq.n	8005b78 <DMA_CalcBaseAndBitshift+0xa8>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a2f      	ldr	r2, [pc, #188]	; (8005c1c <DMA_CalcBaseAndBitshift+0x14c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d009      	beq.n	8005b78 <DMA_CalcBaseAndBitshift+0xa8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a2d      	ldr	r2, [pc, #180]	; (8005c20 <DMA_CalcBaseAndBitshift+0x150>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d004      	beq.n	8005b78 <DMA_CalcBaseAndBitshift+0xa8>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a2c      	ldr	r2, [pc, #176]	; (8005c24 <DMA_CalcBaseAndBitshift+0x154>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d101      	bne.n	8005b7c <DMA_CalcBaseAndBitshift+0xac>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e000      	b.n	8005b7e <DMA_CalcBaseAndBitshift+0xae>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d024      	beq.n	8005bcc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	3b10      	subs	r3, #16
 8005b8a:	4a27      	ldr	r2, [pc, #156]	; (8005c28 <DMA_CalcBaseAndBitshift+0x158>)
 8005b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b90:	091b      	lsrs	r3, r3, #4
 8005b92:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f003 0307 	and.w	r3, r3, #7
 8005b9a:	4a24      	ldr	r2, [pc, #144]	; (8005c2c <DMA_CalcBaseAndBitshift+0x15c>)
 8005b9c:	5cd3      	ldrb	r3, [r2, r3]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d908      	bls.n	8005bbc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	4b1f      	ldr	r3, [pc, #124]	; (8005c30 <DMA_CalcBaseAndBitshift+0x160>)
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	1d1a      	adds	r2, r3, #4
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	659a      	str	r2, [r3, #88]	; 0x58
 8005bba:	e00d      	b.n	8005bd8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <DMA_CalcBaseAndBitshift+0x160>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6593      	str	r3, [r2, #88]	; 0x58
 8005bca:	e005      	b.n	8005bd8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3714      	adds	r7, #20
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	40020010 	.word	0x40020010
 8005bec:	40020028 	.word	0x40020028
 8005bf0:	40020040 	.word	0x40020040
 8005bf4:	40020058 	.word	0x40020058
 8005bf8:	40020070 	.word	0x40020070
 8005bfc:	40020088 	.word	0x40020088
 8005c00:	400200a0 	.word	0x400200a0
 8005c04:	400200b8 	.word	0x400200b8
 8005c08:	40020410 	.word	0x40020410
 8005c0c:	40020428 	.word	0x40020428
 8005c10:	40020440 	.word	0x40020440
 8005c14:	40020458 	.word	0x40020458
 8005c18:	40020470 	.word	0x40020470
 8005c1c:	40020488 	.word	0x40020488
 8005c20:	400204a0 	.word	0x400204a0
 8005c24:	400204b8 	.word	0x400204b8
 8005c28:	aaaaaaab 	.word	0xaaaaaaab
 8005c2c:	0800ea3c 	.word	0x0800ea3c
 8005c30:	fffffc00 	.word	0xfffffc00

08005c34 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d120      	bne.n	8005c8a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4c:	2b03      	cmp	r3, #3
 8005c4e:	d858      	bhi.n	8005d02 <DMA_CheckFifoParam+0xce>
 8005c50:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <DMA_CheckFifoParam+0x24>)
 8005c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c56:	bf00      	nop
 8005c58:	08005c69 	.word	0x08005c69
 8005c5c:	08005c7b 	.word	0x08005c7b
 8005c60:	08005c69 	.word	0x08005c69
 8005c64:	08005d03 	.word	0x08005d03
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d048      	beq.n	8005d06 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c78:	e045      	b.n	8005d06 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005c82:	d142      	bne.n	8005d0a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c88:	e03f      	b.n	8005d0a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c92:	d123      	bne.n	8005cdc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d838      	bhi.n	8005d0e <DMA_CheckFifoParam+0xda>
 8005c9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <DMA_CheckFifoParam+0x70>)
 8005c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca2:	bf00      	nop
 8005ca4:	08005cb5 	.word	0x08005cb5
 8005ca8:	08005cbb 	.word	0x08005cbb
 8005cac:	08005cb5 	.word	0x08005cb5
 8005cb0:	08005ccd 	.word	0x08005ccd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
        break;
 8005cb8:	e030      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d025      	beq.n	8005d12 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cca:	e022      	b.n	8005d12 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005cd4:	d11f      	bne.n	8005d16 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cda:	e01c      	b.n	8005d16 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d902      	bls.n	8005cea <DMA_CheckFifoParam+0xb6>
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d003      	beq.n	8005cf0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005ce8:	e018      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	73fb      	strb	r3, [r7, #15]
        break;
 8005cee:	e015      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00e      	beq.n	8005d1a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]
    break;
 8005d00:	e00b      	b.n	8005d1a <DMA_CheckFifoParam+0xe6>
        break;
 8005d02:	bf00      	nop
 8005d04:	e00a      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
        break;
 8005d06:	bf00      	nop
 8005d08:	e008      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
        break;
 8005d0a:	bf00      	nop
 8005d0c:	e006      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
        break;
 8005d0e:	bf00      	nop
 8005d10:	e004      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
        break;
 8005d12:	bf00      	nop
 8005d14:	e002      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
        break;
 8005d16:	bf00      	nop
 8005d18:	e000      	b.n	8005d1c <DMA_CheckFifoParam+0xe8>
    break;
 8005d1a:	bf00      	nop
    }
  }

  return status;
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop

08005d2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a38      	ldr	r2, [pc, #224]	; (8005e20 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d022      	beq.n	8005d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a36      	ldr	r2, [pc, #216]	; (8005e24 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01d      	beq.n	8005d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a35      	ldr	r2, [pc, #212]	; (8005e28 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d018      	beq.n	8005d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a33      	ldr	r2, [pc, #204]	; (8005e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a32      	ldr	r2, [pc, #200]	; (8005e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a30      	ldr	r2, [pc, #192]	; (8005e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a2f      	ldr	r2, [pc, #188]	; (8005e38 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a2d      	ldr	r2, [pc, #180]	; (8005e3c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d101      	bne.n	8005d8e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e000      	b.n	8005d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01a      	beq.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	3b08      	subs	r3, #8
 8005d9c:	4a28      	ldr	r2, [pc, #160]	; (8005e40 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005da2:	091b      	lsrs	r3, r3, #4
 8005da4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4b26      	ldr	r3, [pc, #152]	; (8005e44 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005daa:	4413      	add	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	461a      	mov	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a24      	ldr	r2, [pc, #144]	; (8005e48 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005db8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f003 031f 	and.w	r3, r3, #31
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	409a      	lsls	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005dc8:	e024      	b.n	8005e14 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	3b10      	subs	r3, #16
 8005dd2:	4a1e      	ldr	r2, [pc, #120]	; (8005e4c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005dd8:	091b      	lsrs	r3, r3, #4
 8005dda:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	4a1c      	ldr	r2, [pc, #112]	; (8005e50 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d806      	bhi.n	8005df2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	4a1b      	ldr	r2, [pc, #108]	; (8005e54 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d902      	bls.n	8005df2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	3308      	adds	r3, #8
 8005df0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4b18      	ldr	r3, [pc, #96]	; (8005e58 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a16      	ldr	r2, [pc, #88]	; (8005e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005e04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	409a      	lsls	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e14:	bf00      	nop
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	58025408 	.word	0x58025408
 8005e24:	5802541c 	.word	0x5802541c
 8005e28:	58025430 	.word	0x58025430
 8005e2c:	58025444 	.word	0x58025444
 8005e30:	58025458 	.word	0x58025458
 8005e34:	5802546c 	.word	0x5802546c
 8005e38:	58025480 	.word	0x58025480
 8005e3c:	58025494 	.word	0x58025494
 8005e40:	cccccccd 	.word	0xcccccccd
 8005e44:	16009600 	.word	0x16009600
 8005e48:	58025880 	.word	0x58025880
 8005e4c:	aaaaaaab 	.word	0xaaaaaaab
 8005e50:	400204b8 	.word	0x400204b8
 8005e54:	4002040f 	.word	0x4002040f
 8005e58:	10008200 	.word	0x10008200
 8005e5c:	40020880 	.word	0x40020880

08005e60 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d04a      	beq.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2b08      	cmp	r3, #8
 8005e7a:	d847      	bhi.n	8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a25      	ldr	r2, [pc, #148]	; (8005f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d022      	beq.n	8005ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a24      	ldr	r2, [pc, #144]	; (8005f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d01d      	beq.n	8005ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a22      	ldr	r2, [pc, #136]	; (8005f20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d018      	beq.n	8005ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a21      	ldr	r2, [pc, #132]	; (8005f24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d013      	beq.n	8005ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1f      	ldr	r2, [pc, #124]	; (8005f28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d00e      	beq.n	8005ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1e      	ldr	r2, [pc, #120]	; (8005f2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d009      	beq.n	8005ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1c      	ldr	r2, [pc, #112]	; (8005f30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d004      	beq.n	8005ecc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d101      	bne.n	8005ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	4b17      	ldr	r3, [pc, #92]	; (8005f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005eda:	4413      	add	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	461a      	mov	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005ee8:	671a      	str	r2, [r3, #112]	; 0x70
 8005eea:	e009      	b.n	8005f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	4b14      	ldr	r3, [pc, #80]	; (8005f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005ef0:	4413      	add	r3, r2
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a11      	ldr	r2, [pc, #68]	; (8005f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005efe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	2201      	movs	r2, #1
 8005f06:	409a      	lsls	r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005f0c:	bf00      	nop
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	58025408 	.word	0x58025408
 8005f1c:	5802541c 	.word	0x5802541c
 8005f20:	58025430 	.word	0x58025430
 8005f24:	58025444 	.word	0x58025444
 8005f28:	58025458 	.word	0x58025458
 8005f2c:	5802546c 	.word	0x5802546c
 8005f30:	58025480 	.word	0x58025480
 8005f34:	58025494 	.word	0x58025494
 8005f38:	1600963f 	.word	0x1600963f
 8005f3c:	58025940 	.word	0x58025940
 8005f40:	1000823f 	.word	0x1000823f
 8005f44:	40020940 	.word	0x40020940

08005f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b089      	sub	sp, #36	; 0x24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005f56:	4b89      	ldr	r3, [pc, #548]	; (800617c <HAL_GPIO_Init+0x234>)
 8005f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f5a:	e194      	b.n	8006286 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	2101      	movs	r1, #1
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	fa01 f303 	lsl.w	r3, r1, r3
 8005f68:	4013      	ands	r3, r2
 8005f6a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f000 8186 	beq.w	8006280 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f003 0303 	and.w	r3, r3, #3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d005      	beq.n	8005f8c <HAL_GPIO_Init+0x44>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	f003 0303 	and.w	r3, r3, #3
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	d130      	bne.n	8005fee <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	005b      	lsls	r3, r3, #1
 8005f96:	2203      	movs	r2, #3
 8005f98:	fa02 f303 	lsl.w	r3, r2, r3
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	005b      	lsls	r3, r3, #1
 8005fac:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	091b      	lsrs	r3, r3, #4
 8005fd8:	f003 0201 	and.w	r2, r3, #1
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	f003 0303 	and.w	r3, r3, #3
 8005ff6:	2b03      	cmp	r3, #3
 8005ff8:	d017      	beq.n	800602a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	005b      	lsls	r3, r3, #1
 8006004:	2203      	movs	r2, #3
 8006006:	fa02 f303 	lsl.w	r3, r2, r3
 800600a:	43db      	mvns	r3, r3
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	4013      	ands	r3, r2
 8006010:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	fa02 f303 	lsl.w	r3, r2, r3
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	4313      	orrs	r3, r2
 8006022:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	2b02      	cmp	r3, #2
 8006034:	d123      	bne.n	800607e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	08da      	lsrs	r2, r3, #3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3208      	adds	r2, #8
 800603e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	220f      	movs	r2, #15
 800604e:	fa02 f303 	lsl.w	r3, r2, r3
 8006052:	43db      	mvns	r3, r3
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	4013      	ands	r3, r2
 8006058:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	691a      	ldr	r2, [r3, #16]
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	fa02 f303 	lsl.w	r3, r2, r3
 800606a:	69ba      	ldr	r2, [r7, #24]
 800606c:	4313      	orrs	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	08da      	lsrs	r2, r3, #3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	3208      	adds	r2, #8
 8006078:	69b9      	ldr	r1, [r7, #24]
 800607a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	2203      	movs	r2, #3
 800608a:	fa02 f303 	lsl.w	r3, r2, r3
 800608e:	43db      	mvns	r3, r3
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	4013      	ands	r3, r2
 8006094:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f003 0203 	and.w	r2, r3, #3
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	fa02 f303 	lsl.w	r3, r2, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	69ba      	ldr	r2, [r7, #24]
 80060b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80e0 	beq.w	8006280 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060c0:	4b2f      	ldr	r3, [pc, #188]	; (8006180 <HAL_GPIO_Init+0x238>)
 80060c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060c6:	4a2e      	ldr	r2, [pc, #184]	; (8006180 <HAL_GPIO_Init+0x238>)
 80060c8:	f043 0302 	orr.w	r3, r3, #2
 80060cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80060d0:	4b2b      	ldr	r3, [pc, #172]	; (8006180 <HAL_GPIO_Init+0x238>)
 80060d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060de:	4a29      	ldr	r2, [pc, #164]	; (8006184 <HAL_GPIO_Init+0x23c>)
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	089b      	lsrs	r3, r3, #2
 80060e4:	3302      	adds	r3, #2
 80060e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	f003 0303 	and.w	r3, r3, #3
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	220f      	movs	r2, #15
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4013      	ands	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a20      	ldr	r2, [pc, #128]	; (8006188 <HAL_GPIO_Init+0x240>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d052      	beq.n	80061b0 <HAL_GPIO_Init+0x268>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a1f      	ldr	r2, [pc, #124]	; (800618c <HAL_GPIO_Init+0x244>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d031      	beq.n	8006176 <HAL_GPIO_Init+0x22e>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a1e      	ldr	r2, [pc, #120]	; (8006190 <HAL_GPIO_Init+0x248>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d02b      	beq.n	8006172 <HAL_GPIO_Init+0x22a>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a1d      	ldr	r2, [pc, #116]	; (8006194 <HAL_GPIO_Init+0x24c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d025      	beq.n	800616e <HAL_GPIO_Init+0x226>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a1c      	ldr	r2, [pc, #112]	; (8006198 <HAL_GPIO_Init+0x250>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d01f      	beq.n	800616a <HAL_GPIO_Init+0x222>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a1b      	ldr	r2, [pc, #108]	; (800619c <HAL_GPIO_Init+0x254>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d019      	beq.n	8006166 <HAL_GPIO_Init+0x21e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a1a      	ldr	r2, [pc, #104]	; (80061a0 <HAL_GPIO_Init+0x258>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d013      	beq.n	8006162 <HAL_GPIO_Init+0x21a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a19      	ldr	r2, [pc, #100]	; (80061a4 <HAL_GPIO_Init+0x25c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00d      	beq.n	800615e <HAL_GPIO_Init+0x216>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a18      	ldr	r2, [pc, #96]	; (80061a8 <HAL_GPIO_Init+0x260>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d007      	beq.n	800615a <HAL_GPIO_Init+0x212>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a17      	ldr	r2, [pc, #92]	; (80061ac <HAL_GPIO_Init+0x264>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d101      	bne.n	8006156 <HAL_GPIO_Init+0x20e>
 8006152:	2309      	movs	r3, #9
 8006154:	e02d      	b.n	80061b2 <HAL_GPIO_Init+0x26a>
 8006156:	230a      	movs	r3, #10
 8006158:	e02b      	b.n	80061b2 <HAL_GPIO_Init+0x26a>
 800615a:	2308      	movs	r3, #8
 800615c:	e029      	b.n	80061b2 <HAL_GPIO_Init+0x26a>
 800615e:	2307      	movs	r3, #7
 8006160:	e027      	b.n	80061b2 <HAL_GPIO_Init+0x26a>
 8006162:	2306      	movs	r3, #6
 8006164:	e025      	b.n	80061b2 <HAL_GPIO_Init+0x26a>
 8006166:	2305      	movs	r3, #5
 8006168:	e023      	b.n	80061b2 <HAL_GPIO_Init+0x26a>
 800616a:	2304      	movs	r3, #4
 800616c:	e021      	b.n	80061b2 <HAL_GPIO_Init+0x26a>
 800616e:	2303      	movs	r3, #3
 8006170:	e01f      	b.n	80061b2 <HAL_GPIO_Init+0x26a>
 8006172:	2302      	movs	r3, #2
 8006174:	e01d      	b.n	80061b2 <HAL_GPIO_Init+0x26a>
 8006176:	2301      	movs	r3, #1
 8006178:	e01b      	b.n	80061b2 <HAL_GPIO_Init+0x26a>
 800617a:	bf00      	nop
 800617c:	58000080 	.word	0x58000080
 8006180:	58024400 	.word	0x58024400
 8006184:	58000400 	.word	0x58000400
 8006188:	58020000 	.word	0x58020000
 800618c:	58020400 	.word	0x58020400
 8006190:	58020800 	.word	0x58020800
 8006194:	58020c00 	.word	0x58020c00
 8006198:	58021000 	.word	0x58021000
 800619c:	58021400 	.word	0x58021400
 80061a0:	58021800 	.word	0x58021800
 80061a4:	58021c00 	.word	0x58021c00
 80061a8:	58022000 	.word	0x58022000
 80061ac:	58022400 	.word	0x58022400
 80061b0:	2300      	movs	r3, #0
 80061b2:	69fa      	ldr	r2, [r7, #28]
 80061b4:	f002 0203 	and.w	r2, r2, #3
 80061b8:	0092      	lsls	r2, r2, #2
 80061ba:	4093      	lsls	r3, r2
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4313      	orrs	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80061c2:	4938      	ldr	r1, [pc, #224]	; (80062a4 <HAL_GPIO_Init+0x35c>)
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	089b      	lsrs	r3, r3, #2
 80061c8:	3302      	adds	r3, #2
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80061d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	43db      	mvns	r3, r3
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	4013      	ands	r3, r2
 80061e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d003      	beq.n	80061f6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80061f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80061fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	43db      	mvns	r3, r3
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	4013      	ands	r3, r2
 800620e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800621c:	69ba      	ldr	r2, [r7, #24]
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	43db      	mvns	r3, r3
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	4013      	ands	r3, r2
 800623a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	4313      	orrs	r3, r2
 800624e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	43db      	mvns	r3, r3
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	4013      	ands	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	4313      	orrs	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	69ba      	ldr	r2, [r7, #24]
 800627e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	3301      	adds	r3, #1
 8006284:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	fa22 f303 	lsr.w	r3, r2, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	f47f ae63 	bne.w	8005f5c <HAL_GPIO_Init+0x14>
  }
}
 8006296:	bf00      	nop
 8006298:	bf00      	nop
 800629a:	3724      	adds	r7, #36	; 0x24
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	58000400 	.word	0x58000400

080062a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	460b      	mov	r3, r1
 80062b2:	807b      	strh	r3, [r7, #2]
 80062b4:	4613      	mov	r3, r2
 80062b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80062b8:	787b      	ldrb	r3, [r7, #1]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062be:	887a      	ldrh	r2, [r7, #2]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80062c4:	e003      	b.n	80062ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80062c6:	887b      	ldrh	r3, [r7, #2]
 80062c8:	041a      	lsls	r2, r3, #16
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	619a      	str	r2, [r3, #24]
}
 80062ce:	bf00      	nop
 80062d0:	370c      	adds	r7, #12
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr

080062da <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80062da:	b480      	push	{r7}
 80062dc:	b085      	sub	sp, #20
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]
 80062e2:	460b      	mov	r3, r1
 80062e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062ec:	887a      	ldrh	r2, [r7, #2]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	4013      	ands	r3, r2
 80062f2:	041a      	lsls	r2, r3, #16
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	43d9      	mvns	r1, r3
 80062f8:	887b      	ldrh	r3, [r7, #2]
 80062fa:	400b      	ands	r3, r1
 80062fc:	431a      	orrs	r2, r3
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	619a      	str	r2, [r3, #24]
}
 8006302:	bf00      	nop
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	4603      	mov	r3, r0
 8006316:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006318:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800631c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	4013      	ands	r3, r2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d008      	beq.n	800633a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006332:	88fb      	ldrh	r3, [r7, #6]
 8006334:	4618      	mov	r0, r3
 8006336:	f7fb fdff 	bl	8001f38 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800634c:	4b19      	ldr	r3, [pc, #100]	; (80063b4 <HAL_PWREx_ConfigSupply+0x70>)
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b04      	cmp	r3, #4
 8006356:	d00a      	beq.n	800636e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006358:	4b16      	ldr	r3, [pc, #88]	; (80063b4 <HAL_PWREx_ConfigSupply+0x70>)
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	429a      	cmp	r2, r3
 8006364:	d001      	beq.n	800636a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006366:	2301      	movs	r3, #1
 8006368:	e01f      	b.n	80063aa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800636a:	2300      	movs	r3, #0
 800636c:	e01d      	b.n	80063aa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800636e:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <HAL_PWREx_ConfigSupply+0x70>)
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f023 0207 	bic.w	r2, r3, #7
 8006376:	490f      	ldr	r1, [pc, #60]	; (80063b4 <HAL_PWREx_ConfigSupply+0x70>)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4313      	orrs	r3, r2
 800637c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800637e:	f7fc fd8b 	bl	8002e98 <HAL_GetTick>
 8006382:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006384:	e009      	b.n	800639a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006386:	f7fc fd87 	bl	8002e98 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006394:	d901      	bls.n	800639a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e007      	b.n	80063aa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800639a:	4b06      	ldr	r3, [pc, #24]	; (80063b4 <HAL_PWREx_ConfigSupply+0x70>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a6:	d1ee      	bne.n	8006386 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	58024800 	.word	0x58024800

080063b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b08c      	sub	sp, #48	; 0x30
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d102      	bne.n	80063cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	f000 bc1c 	b.w	8006c04 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 8087 	beq.w	80064e8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80063da:	4b9e      	ldr	r3, [pc, #632]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80063e4:	4b9b      	ldr	r3, [pc, #620]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 80063e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80063ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	d007      	beq.n	8006400 <HAL_RCC_OscConfig+0x48>
 80063f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f2:	2b18      	cmp	r3, #24
 80063f4:	d110      	bne.n	8006418 <HAL_RCC_OscConfig+0x60>
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	f003 0303 	and.w	r3, r3, #3
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d10b      	bne.n	8006418 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006400:	4b94      	ldr	r3, [pc, #592]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d06c      	beq.n	80064e6 <HAL_RCC_OscConfig+0x12e>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	685b      	ldr	r3, [r3, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d168      	bne.n	80064e6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e3f5      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006420:	d106      	bne.n	8006430 <HAL_RCC_OscConfig+0x78>
 8006422:	4b8c      	ldr	r3, [pc, #560]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a8b      	ldr	r2, [pc, #556]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800642c:	6013      	str	r3, [r2, #0]
 800642e:	e02e      	b.n	800648e <HAL_RCC_OscConfig+0xd6>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d10c      	bne.n	8006452 <HAL_RCC_OscConfig+0x9a>
 8006438:	4b86      	ldr	r3, [pc, #536]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a85      	ldr	r2, [pc, #532]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 800643e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006442:	6013      	str	r3, [r2, #0]
 8006444:	4b83      	ldr	r3, [pc, #524]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a82      	ldr	r2, [pc, #520]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 800644a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	e01d      	b.n	800648e <HAL_RCC_OscConfig+0xd6>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800645a:	d10c      	bne.n	8006476 <HAL_RCC_OscConfig+0xbe>
 800645c:	4b7d      	ldr	r3, [pc, #500]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a7c      	ldr	r2, [pc, #496]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006462:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006466:	6013      	str	r3, [r2, #0]
 8006468:	4b7a      	ldr	r3, [pc, #488]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a79      	ldr	r2, [pc, #484]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 800646e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	e00b      	b.n	800648e <HAL_RCC_OscConfig+0xd6>
 8006476:	4b77      	ldr	r3, [pc, #476]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a76      	ldr	r2, [pc, #472]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 800647c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006480:	6013      	str	r3, [r2, #0]
 8006482:	4b74      	ldr	r3, [pc, #464]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a73      	ldr	r2, [pc, #460]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006488:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800648c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d013      	beq.n	80064be <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006496:	f7fc fcff 	bl	8002e98 <HAL_GetTick>
 800649a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800649c:	e008      	b.n	80064b0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800649e:	f7fc fcfb 	bl	8002e98 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	2b64      	cmp	r3, #100	; 0x64
 80064aa:	d901      	bls.n	80064b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e3a9      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80064b0:	4b68      	ldr	r3, [pc, #416]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d0f0      	beq.n	800649e <HAL_RCC_OscConfig+0xe6>
 80064bc:	e014      	b.n	80064e8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064be:	f7fc fceb 	bl	8002e98 <HAL_GetTick>
 80064c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064c4:	e008      	b.n	80064d8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80064c6:	f7fc fce7 	bl	8002e98 <HAL_GetTick>
 80064ca:	4602      	mov	r2, r0
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	2b64      	cmp	r3, #100	; 0x64
 80064d2:	d901      	bls.n	80064d8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80064d4:	2303      	movs	r3, #3
 80064d6:	e395      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80064d8:	4b5e      	ldr	r3, [pc, #376]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1f0      	bne.n	80064c6 <HAL_RCC_OscConfig+0x10e>
 80064e4:	e000      	b.n	80064e8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0302 	and.w	r3, r3, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f000 80ca 	beq.w	800668a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064f6:	4b57      	ldr	r3, [pc, #348]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064fe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006500:	4b54      	ldr	r3, [pc, #336]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006504:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d007      	beq.n	800651c <HAL_RCC_OscConfig+0x164>
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	2b18      	cmp	r3, #24
 8006510:	d156      	bne.n	80065c0 <HAL_RCC_OscConfig+0x208>
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	f003 0303 	and.w	r3, r3, #3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d151      	bne.n	80065c0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800651c:	4b4d      	ldr	r3, [pc, #308]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <HAL_RCC_OscConfig+0x17c>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e367      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006534:	4b47      	ldr	r3, [pc, #284]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f023 0219 	bic.w	r2, r3, #25
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	4944      	ldr	r1, [pc, #272]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006542:	4313      	orrs	r3, r2
 8006544:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006546:	f7fc fca7 	bl	8002e98 <HAL_GetTick>
 800654a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800654c:	e008      	b.n	8006560 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800654e:	f7fc fca3 	bl	8002e98 <HAL_GetTick>
 8006552:	4602      	mov	r2, r0
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	2b02      	cmp	r3, #2
 800655a:	d901      	bls.n	8006560 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e351      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006560:	4b3c      	ldr	r3, [pc, #240]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	d0f0      	beq.n	800654e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800656c:	f7fc fca0 	bl	8002eb0 <HAL_GetREVID>
 8006570:	4603      	mov	r3, r0
 8006572:	f241 0203 	movw	r2, #4099	; 0x1003
 8006576:	4293      	cmp	r3, r2
 8006578:	d817      	bhi.n	80065aa <HAL_RCC_OscConfig+0x1f2>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	2b40      	cmp	r3, #64	; 0x40
 8006580:	d108      	bne.n	8006594 <HAL_RCC_OscConfig+0x1dc>
 8006582:	4b34      	ldr	r3, [pc, #208]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800658a:	4a32      	ldr	r2, [pc, #200]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 800658c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006590:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006592:	e07a      	b.n	800668a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006594:	4b2f      	ldr	r3, [pc, #188]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	031b      	lsls	r3, r3, #12
 80065a2:	492c      	ldr	r1, [pc, #176]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065a8:	e06f      	b.n	800668a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065aa:	4b2a      	ldr	r3, [pc, #168]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	061b      	lsls	r3, r3, #24
 80065b8:	4926      	ldr	r1, [pc, #152]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80065be:	e064      	b.n	800668a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d047      	beq.n	8006658 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80065c8:	4b22      	ldr	r3, [pc, #136]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f023 0219 	bic.w	r2, r3, #25
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	491f      	ldr	r1, [pc, #124]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065da:	f7fc fc5d 	bl	8002e98 <HAL_GetTick>
 80065de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065e0:	e008      	b.n	80065f4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065e2:	f7fc fc59 	bl	8002e98 <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d901      	bls.n	80065f4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e307      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065f4:	4b17      	ldr	r3, [pc, #92]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0f0      	beq.n	80065e2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006600:	f7fc fc56 	bl	8002eb0 <HAL_GetREVID>
 8006604:	4603      	mov	r3, r0
 8006606:	f241 0203 	movw	r2, #4099	; 0x1003
 800660a:	4293      	cmp	r3, r2
 800660c:	d817      	bhi.n	800663e <HAL_RCC_OscConfig+0x286>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2b40      	cmp	r3, #64	; 0x40
 8006614:	d108      	bne.n	8006628 <HAL_RCC_OscConfig+0x270>
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800661e:	4a0d      	ldr	r2, [pc, #52]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006624:	6053      	str	r3, [r2, #4]
 8006626:	e030      	b.n	800668a <HAL_RCC_OscConfig+0x2d2>
 8006628:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	031b      	lsls	r3, r3, #12
 8006636:	4907      	ldr	r1, [pc, #28]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006638:	4313      	orrs	r3, r2
 800663a:	604b      	str	r3, [r1, #4]
 800663c:	e025      	b.n	800668a <HAL_RCC_OscConfig+0x2d2>
 800663e:	4b05      	ldr	r3, [pc, #20]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	061b      	lsls	r3, r3, #24
 800664c:	4901      	ldr	r1, [pc, #4]	; (8006654 <HAL_RCC_OscConfig+0x29c>)
 800664e:	4313      	orrs	r3, r2
 8006650:	604b      	str	r3, [r1, #4]
 8006652:	e01a      	b.n	800668a <HAL_RCC_OscConfig+0x2d2>
 8006654:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006658:	4b9e      	ldr	r3, [pc, #632]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a9d      	ldr	r2, [pc, #628]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 800665e:	f023 0301 	bic.w	r3, r3, #1
 8006662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006664:	f7fc fc18 	bl	8002e98 <HAL_GetTick>
 8006668:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800666c:	f7fc fc14 	bl	8002e98 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b02      	cmp	r3, #2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e2c2      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800667e:	4b95      	ldr	r3, [pc, #596]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1f0      	bne.n	800666c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0310 	and.w	r3, r3, #16
 8006692:	2b00      	cmp	r3, #0
 8006694:	f000 80a9 	beq.w	80067ea <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006698:	4b8e      	ldr	r3, [pc, #568]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066a0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066a2:	4b8c      	ldr	r3, [pc, #560]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 80066a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066a6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	2b08      	cmp	r3, #8
 80066ac:	d007      	beq.n	80066be <HAL_RCC_OscConfig+0x306>
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	2b18      	cmp	r3, #24
 80066b2:	d13a      	bne.n	800672a <HAL_RCC_OscConfig+0x372>
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d135      	bne.n	800672a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066be:	4b85      	ldr	r3, [pc, #532]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <HAL_RCC_OscConfig+0x31e>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	69db      	ldr	r3, [r3, #28]
 80066ce:	2b80      	cmp	r3, #128	; 0x80
 80066d0:	d001      	beq.n	80066d6 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e296      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066d6:	f7fc fbeb 	bl	8002eb0 <HAL_GetREVID>
 80066da:	4603      	mov	r3, r0
 80066dc:	f241 0203 	movw	r2, #4099	; 0x1003
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d817      	bhi.n	8006714 <HAL_RCC_OscConfig+0x35c>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	2b20      	cmp	r3, #32
 80066ea:	d108      	bne.n	80066fe <HAL_RCC_OscConfig+0x346>
 80066ec:	4b79      	ldr	r3, [pc, #484]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80066f4:	4a77      	ldr	r2, [pc, #476]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 80066f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066fa:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066fc:	e075      	b.n	80067ea <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066fe:	4b75      	ldr	r3, [pc, #468]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	069b      	lsls	r3, r3, #26
 800670c:	4971      	ldr	r1, [pc, #452]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 800670e:	4313      	orrs	r3, r2
 8006710:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006712:	e06a      	b.n	80067ea <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006714:	4b6f      	ldr	r3, [pc, #444]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a1b      	ldr	r3, [r3, #32]
 8006720:	061b      	lsls	r3, r3, #24
 8006722:	496c      	ldr	r1, [pc, #432]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 8006724:	4313      	orrs	r3, r2
 8006726:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006728:	e05f      	b.n	80067ea <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d042      	beq.n	80067b8 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006732:	4b68      	ldr	r3, [pc, #416]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a67      	ldr	r2, [pc, #412]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 8006738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800673c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673e:	f7fc fbab 	bl	8002e98 <HAL_GetTick>
 8006742:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006746:	f7fc fba7 	bl	8002e98 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e255      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006758:	4b5e      	ldr	r3, [pc, #376]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0f0      	beq.n	8006746 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006764:	f7fc fba4 	bl	8002eb0 <HAL_GetREVID>
 8006768:	4603      	mov	r3, r0
 800676a:	f241 0203 	movw	r2, #4099	; 0x1003
 800676e:	4293      	cmp	r3, r2
 8006770:	d817      	bhi.n	80067a2 <HAL_RCC_OscConfig+0x3ea>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	2b20      	cmp	r3, #32
 8006778:	d108      	bne.n	800678c <HAL_RCC_OscConfig+0x3d4>
 800677a:	4b56      	ldr	r3, [pc, #344]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006782:	4a54      	ldr	r2, [pc, #336]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 8006784:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006788:	6053      	str	r3, [r2, #4]
 800678a:	e02e      	b.n	80067ea <HAL_RCC_OscConfig+0x432>
 800678c:	4b51      	ldr	r3, [pc, #324]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a1b      	ldr	r3, [r3, #32]
 8006798:	069b      	lsls	r3, r3, #26
 800679a:	494e      	ldr	r1, [pc, #312]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 800679c:	4313      	orrs	r3, r2
 800679e:	604b      	str	r3, [r1, #4]
 80067a0:	e023      	b.n	80067ea <HAL_RCC_OscConfig+0x432>
 80067a2:	4b4c      	ldr	r3, [pc, #304]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	061b      	lsls	r3, r3, #24
 80067b0:	4948      	ldr	r1, [pc, #288]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	60cb      	str	r3, [r1, #12]
 80067b6:	e018      	b.n	80067ea <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80067b8:	4b46      	ldr	r3, [pc, #280]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a45      	ldr	r2, [pc, #276]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 80067be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c4:	f7fc fb68 	bl	8002e98 <HAL_GetTick>
 80067c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067ca:	e008      	b.n	80067de <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80067cc:	f7fc fb64 	bl	8002e98 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e212      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067de:	4b3d      	ldr	r3, [pc, #244]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1f0      	bne.n	80067cc <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0308 	and.w	r3, r3, #8
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d036      	beq.n	8006864 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d019      	beq.n	8006832 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067fe:	4b35      	ldr	r3, [pc, #212]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 8006800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006802:	4a34      	ldr	r2, [pc, #208]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 8006804:	f043 0301 	orr.w	r3, r3, #1
 8006808:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800680a:	f7fc fb45 	bl	8002e98 <HAL_GetTick>
 800680e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006810:	e008      	b.n	8006824 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006812:	f7fc fb41 	bl	8002e98 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e1ef      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006824:	4b2b      	ldr	r3, [pc, #172]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 8006826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006828:	f003 0302 	and.w	r3, r3, #2
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0f0      	beq.n	8006812 <HAL_RCC_OscConfig+0x45a>
 8006830:	e018      	b.n	8006864 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006832:	4b28      	ldr	r3, [pc, #160]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 8006834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006836:	4a27      	ldr	r2, [pc, #156]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 8006838:	f023 0301 	bic.w	r3, r3, #1
 800683c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683e:	f7fc fb2b 	bl	8002e98 <HAL_GetTick>
 8006842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006844:	e008      	b.n	8006858 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006846:	f7fc fb27 	bl	8002e98 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d901      	bls.n	8006858 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e1d5      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006858:	4b1e      	ldr	r3, [pc, #120]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 800685a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1f0      	bne.n	8006846 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b00      	cmp	r3, #0
 800686e:	d039      	beq.n	80068e4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d019      	beq.n	80068ac <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006878:	4b16      	ldr	r3, [pc, #88]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a15      	ldr	r2, [pc, #84]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 800687e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006882:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006884:	f7fc fb08 	bl	8002e98 <HAL_GetTick>
 8006888:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800688a:	e008      	b.n	800689e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800688c:	f7fc fb04 	bl	8002e98 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	2b02      	cmp	r3, #2
 8006898:	d901      	bls.n	800689e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e1b2      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800689e:	4b0d      	ldr	r3, [pc, #52]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0f0      	beq.n	800688c <HAL_RCC_OscConfig+0x4d4>
 80068aa:	e01b      	b.n	80068e4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068ac:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a08      	ldr	r2, [pc, #32]	; (80068d4 <HAL_RCC_OscConfig+0x51c>)
 80068b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068b8:	f7fc faee 	bl	8002e98 <HAL_GetTick>
 80068bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068be:	e00b      	b.n	80068d8 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80068c0:	f7fc faea 	bl	8002e98 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d904      	bls.n	80068d8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e198      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
 80068d2:	bf00      	nop
 80068d4:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068d8:	4ba3      	ldr	r3, [pc, #652]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d1ed      	bne.n	80068c0 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0304 	and.w	r3, r3, #4
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 8081 	beq.w	80069f4 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068f2:	4b9e      	ldr	r3, [pc, #632]	; (8006b6c <HAL_RCC_OscConfig+0x7b4>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a9d      	ldr	r2, [pc, #628]	; (8006b6c <HAL_RCC_OscConfig+0x7b4>)
 80068f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068fe:	f7fc facb 	bl	8002e98 <HAL_GetTick>
 8006902:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006904:	e008      	b.n	8006918 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006906:	f7fc fac7 	bl	8002e98 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	2b64      	cmp	r3, #100	; 0x64
 8006912:	d901      	bls.n	8006918 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e175      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006918:	4b94      	ldr	r3, [pc, #592]	; (8006b6c <HAL_RCC_OscConfig+0x7b4>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0f0      	beq.n	8006906 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d106      	bne.n	800693a <HAL_RCC_OscConfig+0x582>
 800692c:	4b8e      	ldr	r3, [pc, #568]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 800692e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006930:	4a8d      	ldr	r2, [pc, #564]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006932:	f043 0301 	orr.w	r3, r3, #1
 8006936:	6713      	str	r3, [r2, #112]	; 0x70
 8006938:	e02d      	b.n	8006996 <HAL_RCC_OscConfig+0x5de>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	689b      	ldr	r3, [r3, #8]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d10c      	bne.n	800695c <HAL_RCC_OscConfig+0x5a4>
 8006942:	4b89      	ldr	r3, [pc, #548]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006946:	4a88      	ldr	r2, [pc, #544]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006948:	f023 0301 	bic.w	r3, r3, #1
 800694c:	6713      	str	r3, [r2, #112]	; 0x70
 800694e:	4b86      	ldr	r3, [pc, #536]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006952:	4a85      	ldr	r2, [pc, #532]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006954:	f023 0304 	bic.w	r3, r3, #4
 8006958:	6713      	str	r3, [r2, #112]	; 0x70
 800695a:	e01c      	b.n	8006996 <HAL_RCC_OscConfig+0x5de>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b05      	cmp	r3, #5
 8006962:	d10c      	bne.n	800697e <HAL_RCC_OscConfig+0x5c6>
 8006964:	4b80      	ldr	r3, [pc, #512]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006968:	4a7f      	ldr	r2, [pc, #508]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 800696a:	f043 0304 	orr.w	r3, r3, #4
 800696e:	6713      	str	r3, [r2, #112]	; 0x70
 8006970:	4b7d      	ldr	r3, [pc, #500]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	4a7c      	ldr	r2, [pc, #496]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006976:	f043 0301 	orr.w	r3, r3, #1
 800697a:	6713      	str	r3, [r2, #112]	; 0x70
 800697c:	e00b      	b.n	8006996 <HAL_RCC_OscConfig+0x5de>
 800697e:	4b7a      	ldr	r3, [pc, #488]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006982:	4a79      	ldr	r2, [pc, #484]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006984:	f023 0301 	bic.w	r3, r3, #1
 8006988:	6713      	str	r3, [r2, #112]	; 0x70
 800698a:	4b77      	ldr	r3, [pc, #476]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	4a76      	ldr	r2, [pc, #472]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006990:	f023 0304 	bic.w	r3, r3, #4
 8006994:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d015      	beq.n	80069ca <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800699e:	f7fc fa7b 	bl	8002e98 <HAL_GetTick>
 80069a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069a4:	e00a      	b.n	80069bc <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069a6:	f7fc fa77 	bl	8002e98 <HAL_GetTick>
 80069aa:	4602      	mov	r2, r0
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	1ad3      	subs	r3, r2, r3
 80069b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d901      	bls.n	80069bc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e123      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069bc:	4b6a      	ldr	r3, [pc, #424]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 80069be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c0:	f003 0302 	and.w	r3, r3, #2
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0ee      	beq.n	80069a6 <HAL_RCC_OscConfig+0x5ee>
 80069c8:	e014      	b.n	80069f4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ca:	f7fc fa65 	bl	8002e98 <HAL_GetTick>
 80069ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069d0:	e00a      	b.n	80069e8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069d2:	f7fc fa61 	bl	8002e98 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d901      	bls.n	80069e8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e10d      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069e8:	4b5f      	ldr	r3, [pc, #380]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 80069ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1ee      	bne.n	80069d2 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 8102 	beq.w	8006c02 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069fe:	4b5a      	ldr	r3, [pc, #360]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a06:	2b18      	cmp	r3, #24
 8006a08:	f000 80bd 	beq.w	8006b86 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	f040 8095 	bne.w	8006b40 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a16:	4b54      	ldr	r3, [pc, #336]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a53      	ldr	r2, [pc, #332]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006a1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a22:	f7fc fa39 	bl	8002e98 <HAL_GetTick>
 8006a26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a28:	e008      	b.n	8006a3c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a2a:	f7fc fa35 	bl	8002e98 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d901      	bls.n	8006a3c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e0e3      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a3c:	4b4a      	ldr	r3, [pc, #296]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1f0      	bne.n	8006a2a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a48:	4b47      	ldr	r3, [pc, #284]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006a4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a4c:	4b48      	ldr	r3, [pc, #288]	; (8006b70 <HAL_RCC_OscConfig+0x7b8>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a58:	0112      	lsls	r2, r2, #4
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	4942      	ldr	r1, [pc, #264]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	628b      	str	r3, [r1, #40]	; 0x28
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	3b01      	subs	r3, #1
 8006a68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a70:	3b01      	subs	r3, #1
 8006a72:	025b      	lsls	r3, r3, #9
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	041b      	lsls	r3, r3, #16
 8006a80:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a84:	431a      	orrs	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	061b      	lsls	r3, r3, #24
 8006a8e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a92:	4935      	ldr	r1, [pc, #212]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006a98:	4b33      	ldr	r3, [pc, #204]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	4a32      	ldr	r2, [pc, #200]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006a9e:	f023 0301 	bic.w	r3, r3, #1
 8006aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006aa4:	4b30      	ldr	r3, [pc, #192]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aa8:	4b32      	ldr	r3, [pc, #200]	; (8006b74 <HAL_RCC_OscConfig+0x7bc>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ab0:	00d2      	lsls	r2, r2, #3
 8006ab2:	492d      	ldr	r1, [pc, #180]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ab8:	4b2b      	ldr	r3, [pc, #172]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	f023 020c 	bic.w	r2, r3, #12
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	4928      	ldr	r1, [pc, #160]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006aca:	4b27      	ldr	r3, [pc, #156]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	f023 0202 	bic.w	r2, r3, #2
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad6:	4924      	ldr	r1, [pc, #144]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006adc:	4b22      	ldr	r3, [pc, #136]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	4a21      	ldr	r2, [pc, #132]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae8:	4b1f      	ldr	r3, [pc, #124]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	4a1e      	ldr	r2, [pc, #120]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006af4:	4b1c      	ldr	r3, [pc, #112]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	4a1b      	ldr	r2, [pc, #108]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006afa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006b00:	4b19      	ldr	r3, [pc, #100]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	4a18      	ldr	r2, [pc, #96]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006b06:	f043 0301 	orr.w	r3, r3, #1
 8006b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b0c:	4b16      	ldr	r3, [pc, #88]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a15      	ldr	r2, [pc, #84]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b18:	f7fc f9be 	bl	8002e98 <HAL_GetTick>
 8006b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b1e:	e008      	b.n	8006b32 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b20:	f7fc f9ba 	bl	8002e98 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e068      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b32:	4b0d      	ldr	r3, [pc, #52]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0f0      	beq.n	8006b20 <HAL_RCC_OscConfig+0x768>
 8006b3e:	e060      	b.n	8006c02 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b40:	4b09      	ldr	r3, [pc, #36]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a08      	ldr	r2, [pc, #32]	; (8006b68 <HAL_RCC_OscConfig+0x7b0>)
 8006b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4c:	f7fc f9a4 	bl	8002e98 <HAL_GetTick>
 8006b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b52:	e011      	b.n	8006b78 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b54:	f7fc f9a0 	bl	8002e98 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d90a      	bls.n	8006b78 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e04e      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
 8006b66:	bf00      	nop
 8006b68:	58024400 	.word	0x58024400
 8006b6c:	58024800 	.word	0x58024800
 8006b70:	fffffc0c 	.word	0xfffffc0c
 8006b74:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b78:	4b24      	ldr	r3, [pc, #144]	; (8006c0c <HAL_RCC_OscConfig+0x854>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e7      	bne.n	8006b54 <HAL_RCC_OscConfig+0x79c>
 8006b84:	e03d      	b.n	8006c02 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b86:	4b21      	ldr	r3, [pc, #132]	; (8006c0c <HAL_RCC_OscConfig+0x854>)
 8006b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b8c:	4b1f      	ldr	r3, [pc, #124]	; (8006c0c <HAL_RCC_OscConfig+0x854>)
 8006b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b90:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d031      	beq.n	8006bfe <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	f003 0203 	and.w	r2, r3, #3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d12a      	bne.n	8006bfe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	091b      	lsrs	r3, r3, #4
 8006bac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d122      	bne.n	8006bfe <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d11a      	bne.n	8006bfe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	0a5b      	lsrs	r3, r3, #9
 8006bcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bd4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d111      	bne.n	8006bfe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	0c1b      	lsrs	r3, r3, #16
 8006bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d108      	bne.n	8006bfe <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	0e1b      	lsrs	r3, r3, #24
 8006bf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d001      	beq.n	8006c02 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e000      	b.n	8006c04 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3730      	adds	r7, #48	; 0x30
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	58024400 	.word	0x58024400

08006c10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d101      	bne.n	8006c24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e19c      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c24:	4b8a      	ldr	r3, [pc, #552]	; (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d910      	bls.n	8006c54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c32:	4b87      	ldr	r3, [pc, #540]	; (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f023 020f 	bic.w	r2, r3, #15
 8006c3a:	4985      	ldr	r1, [pc, #532]	; (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c42:	4b83      	ldr	r3, [pc, #524]	; (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 030f 	and.w	r3, r3, #15
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d001      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e184      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d010      	beq.n	8006c82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691a      	ldr	r2, [r3, #16]
 8006c64:	4b7b      	ldr	r3, [pc, #492]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d908      	bls.n	8006c82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c70:	4b78      	ldr	r3, [pc, #480]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	691b      	ldr	r3, [r3, #16]
 8006c7c:	4975      	ldr	r1, [pc, #468]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0308 	and.w	r3, r3, #8
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d010      	beq.n	8006cb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	695a      	ldr	r2, [r3, #20]
 8006c92:	4b70      	ldr	r3, [pc, #448]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006c94:	69db      	ldr	r3, [r3, #28]
 8006c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d908      	bls.n	8006cb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c9e:	4b6d      	ldr	r3, [pc, #436]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	496a      	ldr	r1, [pc, #424]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0310 	and.w	r3, r3, #16
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d010      	beq.n	8006cde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	699a      	ldr	r2, [r3, #24]
 8006cc0:	4b64      	ldr	r3, [pc, #400]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d908      	bls.n	8006cde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ccc:	4b61      	ldr	r3, [pc, #388]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	699b      	ldr	r3, [r3, #24]
 8006cd8:	495e      	ldr	r1, [pc, #376]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0320 	and.w	r3, r3, #32
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d010      	beq.n	8006d0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	69da      	ldr	r2, [r3, #28]
 8006cee:	4b59      	ldr	r3, [pc, #356]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cf0:	6a1b      	ldr	r3, [r3, #32]
 8006cf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d908      	bls.n	8006d0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006cfa:	4b56      	ldr	r3, [pc, #344]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006cfc:	6a1b      	ldr	r3, [r3, #32]
 8006cfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	4953      	ldr	r1, [pc, #332]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 0302 	and.w	r3, r3, #2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d010      	beq.n	8006d3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	4b4d      	ldr	r3, [pc, #308]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d908      	bls.n	8006d3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d28:	4b4a      	ldr	r3, [pc, #296]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	f023 020f 	bic.w	r2, r3, #15
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
 8006d34:	4947      	ldr	r1, [pc, #284]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d055      	beq.n	8006df2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d46:	4b43      	ldr	r3, [pc, #268]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	4940      	ldr	r1, [pc, #256]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d54:	4313      	orrs	r3, r2
 8006d56:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d107      	bne.n	8006d70 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d60:	4b3c      	ldr	r3, [pc, #240]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d121      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e0f6      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d107      	bne.n	8006d88 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d78:	4b36      	ldr	r3, [pc, #216]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d115      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e0ea      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d107      	bne.n	8006da0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d90:	4b30      	ldr	r3, [pc, #192]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d109      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e0de      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006da0:	4b2c      	ldr	r3, [pc, #176]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0304 	and.w	r3, r3, #4
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d101      	bne.n	8006db0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006dac:	2301      	movs	r3, #1
 8006dae:	e0d6      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006db0:	4b28      	ldr	r3, [pc, #160]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	f023 0207 	bic.w	r2, r3, #7
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	4925      	ldr	r1, [pc, #148]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc2:	f7fc f869 	bl	8002e98 <HAL_GetTick>
 8006dc6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc8:	e00a      	b.n	8006de0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dca:	f7fc f865 	bl	8002e98 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d901      	bls.n	8006de0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e0be      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006de0:	4b1c      	ldr	r3, [pc, #112]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d1eb      	bne.n	8006dca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d010      	beq.n	8006e20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68da      	ldr	r2, [r3, #12]
 8006e02:	4b14      	ldr	r3, [pc, #80]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	f003 030f 	and.w	r3, r3, #15
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d208      	bcs.n	8006e20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e0e:	4b11      	ldr	r3, [pc, #68]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	f023 020f 	bic.w	r2, r3, #15
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	490e      	ldr	r1, [pc, #56]	; (8006e54 <HAL_RCC_ClockConfig+0x244>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e20:	4b0b      	ldr	r3, [pc, #44]	; (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 030f 	and.w	r3, r3, #15
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d214      	bcs.n	8006e58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2e:	4b08      	ldr	r3, [pc, #32]	; (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f023 020f 	bic.w	r2, r3, #15
 8006e36:	4906      	ldr	r1, [pc, #24]	; (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3e:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <HAL_RCC_ClockConfig+0x240>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d005      	beq.n	8006e58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e086      	b.n	8006f5e <HAL_RCC_ClockConfig+0x34e>
 8006e50:	52002000 	.word	0x52002000
 8006e54:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d010      	beq.n	8006e86 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	4b3f      	ldr	r3, [pc, #252]	; (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006e6a:	699b      	ldr	r3, [r3, #24]
 8006e6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d208      	bcs.n	8006e86 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e74:	4b3c      	ldr	r3, [pc, #240]	; (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	4939      	ldr	r1, [pc, #228]	; (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0308 	and.w	r3, r3, #8
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d010      	beq.n	8006eb4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	695a      	ldr	r2, [r3, #20]
 8006e96:	4b34      	ldr	r3, [pc, #208]	; (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d208      	bcs.n	8006eb4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006ea2:	4b31      	ldr	r3, [pc, #196]	; (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	492e      	ldr	r1, [pc, #184]	; (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0310 	and.w	r3, r3, #16
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d010      	beq.n	8006ee2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	699a      	ldr	r2, [r3, #24]
 8006ec4:	4b28      	ldr	r3, [pc, #160]	; (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d208      	bcs.n	8006ee2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ed0:	4b25      	ldr	r3, [pc, #148]	; (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	4922      	ldr	r1, [pc, #136]	; (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0320 	and.w	r3, r3, #32
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d010      	beq.n	8006f10 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69da      	ldr	r2, [r3, #28]
 8006ef2:	4b1d      	ldr	r3, [pc, #116]	; (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d208      	bcs.n	8006f10 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006efe:	4b1a      	ldr	r3, [pc, #104]	; (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	4917      	ldr	r1, [pc, #92]	; (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f10:	f000 f834 	bl	8006f7c <HAL_RCC_GetSysClockFreq>
 8006f14:	4602      	mov	r2, r0
 8006f16:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006f18:	699b      	ldr	r3, [r3, #24]
 8006f1a:	0a1b      	lsrs	r3, r3, #8
 8006f1c:	f003 030f 	and.w	r3, r3, #15
 8006f20:	4912      	ldr	r1, [pc, #72]	; (8006f6c <HAL_RCC_ClockConfig+0x35c>)
 8006f22:	5ccb      	ldrb	r3, [r1, r3]
 8006f24:	f003 031f 	and.w	r3, r3, #31
 8006f28:	fa22 f303 	lsr.w	r3, r2, r3
 8006f2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f2e:	4b0e      	ldr	r3, [pc, #56]	; (8006f68 <HAL_RCC_ClockConfig+0x358>)
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	f003 030f 	and.w	r3, r3, #15
 8006f36:	4a0d      	ldr	r2, [pc, #52]	; (8006f6c <HAL_RCC_ClockConfig+0x35c>)
 8006f38:	5cd3      	ldrb	r3, [r2, r3]
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
 8006f44:	4a0a      	ldr	r2, [pc, #40]	; (8006f70 <HAL_RCC_ClockConfig+0x360>)
 8006f46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f48:	4a0a      	ldr	r2, [pc, #40]	; (8006f74 <HAL_RCC_ClockConfig+0x364>)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006f4e:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <HAL_RCC_ClockConfig+0x368>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fb ff56 	bl	8002e04 <HAL_InitTick>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	58024400 	.word	0x58024400
 8006f6c:	0800ea2c 	.word	0x0800ea2c
 8006f70:	24000004 	.word	0x24000004
 8006f74:	24000000 	.word	0x24000000
 8006f78:	24000008 	.word	0x24000008

08006f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b089      	sub	sp, #36	; 0x24
 8006f80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f82:	4bb3      	ldr	r3, [pc, #716]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f8a:	2b18      	cmp	r3, #24
 8006f8c:	f200 8155 	bhi.w	800723a <HAL_RCC_GetSysClockFreq+0x2be>
 8006f90:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f96:	bf00      	nop
 8006f98:	08006ffd 	.word	0x08006ffd
 8006f9c:	0800723b 	.word	0x0800723b
 8006fa0:	0800723b 	.word	0x0800723b
 8006fa4:	0800723b 	.word	0x0800723b
 8006fa8:	0800723b 	.word	0x0800723b
 8006fac:	0800723b 	.word	0x0800723b
 8006fb0:	0800723b 	.word	0x0800723b
 8006fb4:	0800723b 	.word	0x0800723b
 8006fb8:	08007023 	.word	0x08007023
 8006fbc:	0800723b 	.word	0x0800723b
 8006fc0:	0800723b 	.word	0x0800723b
 8006fc4:	0800723b 	.word	0x0800723b
 8006fc8:	0800723b 	.word	0x0800723b
 8006fcc:	0800723b 	.word	0x0800723b
 8006fd0:	0800723b 	.word	0x0800723b
 8006fd4:	0800723b 	.word	0x0800723b
 8006fd8:	08007029 	.word	0x08007029
 8006fdc:	0800723b 	.word	0x0800723b
 8006fe0:	0800723b 	.word	0x0800723b
 8006fe4:	0800723b 	.word	0x0800723b
 8006fe8:	0800723b 	.word	0x0800723b
 8006fec:	0800723b 	.word	0x0800723b
 8006ff0:	0800723b 	.word	0x0800723b
 8006ff4:	0800723b 	.word	0x0800723b
 8006ff8:	0800702f 	.word	0x0800702f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ffc:	4b94      	ldr	r3, [pc, #592]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0320 	and.w	r3, r3, #32
 8007004:	2b00      	cmp	r3, #0
 8007006:	d009      	beq.n	800701c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007008:	4b91      	ldr	r3, [pc, #580]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	08db      	lsrs	r3, r3, #3
 800700e:	f003 0303 	and.w	r3, r3, #3
 8007012:	4a90      	ldr	r2, [pc, #576]	; (8007254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007014:	fa22 f303 	lsr.w	r3, r2, r3
 8007018:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800701a:	e111      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800701c:	4b8d      	ldr	r3, [pc, #564]	; (8007254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800701e:	61bb      	str	r3, [r7, #24]
    break;
 8007020:	e10e      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007022:	4b8d      	ldr	r3, [pc, #564]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007024:	61bb      	str	r3, [r7, #24]
    break;
 8007026:	e10b      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007028:	4b8c      	ldr	r3, [pc, #560]	; (800725c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800702a:	61bb      	str	r3, [r7, #24]
    break;
 800702c:	e108      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800702e:	4b88      	ldr	r3, [pc, #544]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	f003 0303 	and.w	r3, r3, #3
 8007036:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007038:	4b85      	ldr	r3, [pc, #532]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800703a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800703c:	091b      	lsrs	r3, r3, #4
 800703e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007042:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007044:	4b82      	ldr	r3, [pc, #520]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800704e:	4b80      	ldr	r3, [pc, #512]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007052:	08db      	lsrs	r3, r3, #3
 8007054:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	fb02 f303 	mul.w	r3, r2, r3
 800705e:	ee07 3a90 	vmov	s15, r3
 8007062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007066:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 80e1 	beq.w	8007234 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b02      	cmp	r3, #2
 8007076:	f000 8083 	beq.w	8007180 <HAL_RCC_GetSysClockFreq+0x204>
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b02      	cmp	r3, #2
 800707e:	f200 80a1 	bhi.w	80071c4 <HAL_RCC_GetSysClockFreq+0x248>
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d003      	beq.n	8007090 <HAL_RCC_GetSysClockFreq+0x114>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d056      	beq.n	800713c <HAL_RCC_GetSysClockFreq+0x1c0>
 800708e:	e099      	b.n	80071c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007090:	4b6f      	ldr	r3, [pc, #444]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b00      	cmp	r3, #0
 800709a:	d02d      	beq.n	80070f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800709c:	4b6c      	ldr	r3, [pc, #432]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	08db      	lsrs	r3, r3, #3
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	4a6b      	ldr	r2, [pc, #428]	; (8007254 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070a8:	fa22 f303 	lsr.w	r3, r2, r3
 80070ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	ee07 3a90 	vmov	s15, r3
 80070b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	ee07 3a90 	vmov	s15, r3
 80070be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c6:	4b62      	ldr	r3, [pc, #392]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80070da:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007260 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80070f6:	e087      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007264 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710a:	4b51      	ldr	r3, [pc, #324]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800710c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711a:	ed97 6a02 	vldr	s12, [r7, #8]
 800711e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007260 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800712e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800713a:	e065      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007146:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007268 <HAL_RCC_GetSysClockFreq+0x2ec>
 800714a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800714e:	4b40      	ldr	r3, [pc, #256]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007162:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007260 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800717e:	e043      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800726c <HAL_RCC_GetSysClockFreq+0x2f0>
 800718e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007192:	4b2f      	ldr	r3, [pc, #188]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007260 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071c2:	e021      	b.n	8007208 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	ee07 3a90 	vmov	s15, r3
 80071ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007268 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d6:	4b1e      	ldr	r3, [pc, #120]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071de:	ee07 3a90 	vmov	s15, r3
 80071e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80071ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007260 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007202:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007206:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007208:	4b11      	ldr	r3, [pc, #68]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800720a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720c:	0a5b      	lsrs	r3, r3, #9
 800720e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007212:	3301      	adds	r3, #1
 8007214:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	ee07 3a90 	vmov	s15, r3
 800721c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007220:	edd7 6a07 	vldr	s13, [r7, #28]
 8007224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800722c:	ee17 3a90 	vmov	r3, s15
 8007230:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007232:	e005      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007234:	2300      	movs	r3, #0
 8007236:	61bb      	str	r3, [r7, #24]
    break;
 8007238:	e002      	b.n	8007240 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800723a:	4b07      	ldr	r3, [pc, #28]	; (8007258 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800723c:	61bb      	str	r3, [r7, #24]
    break;
 800723e:	bf00      	nop
  }

  return sysclockfreq;
 8007240:	69bb      	ldr	r3, [r7, #24]
}
 8007242:	4618      	mov	r0, r3
 8007244:	3724      	adds	r7, #36	; 0x24
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	58024400 	.word	0x58024400
 8007254:	03d09000 	.word	0x03d09000
 8007258:	003d0900 	.word	0x003d0900
 800725c:	02dc6c00 	.word	0x02dc6c00
 8007260:	46000000 	.word	0x46000000
 8007264:	4c742400 	.word	0x4c742400
 8007268:	4a742400 	.word	0x4a742400
 800726c:	4c371b00 	.word	0x4c371b00

08007270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007276:	f7ff fe81 	bl	8006f7c <HAL_RCC_GetSysClockFreq>
 800727a:	4602      	mov	r2, r0
 800727c:	4b10      	ldr	r3, [pc, #64]	; (80072c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	0a1b      	lsrs	r3, r3, #8
 8007282:	f003 030f 	and.w	r3, r3, #15
 8007286:	490f      	ldr	r1, [pc, #60]	; (80072c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007288:	5ccb      	ldrb	r3, [r1, r3]
 800728a:	f003 031f 	and.w	r3, r3, #31
 800728e:	fa22 f303 	lsr.w	r3, r2, r3
 8007292:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007294:	4b0a      	ldr	r3, [pc, #40]	; (80072c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	f003 030f 	and.w	r3, r3, #15
 800729c:	4a09      	ldr	r2, [pc, #36]	; (80072c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800729e:	5cd3      	ldrb	r3, [r2, r3]
 80072a0:	f003 031f 	and.w	r3, r3, #31
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	fa22 f303 	lsr.w	r3, r2, r3
 80072aa:	4a07      	ldr	r2, [pc, #28]	; (80072c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80072ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072ae:	4a07      	ldr	r2, [pc, #28]	; (80072cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072b4:	4b04      	ldr	r3, [pc, #16]	; (80072c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80072b6:	681b      	ldr	r3, [r3, #0]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	58024400 	.word	0x58024400
 80072c4:	0800ea2c 	.word	0x0800ea2c
 80072c8:	24000004 	.word	0x24000004
 80072cc:	24000000 	.word	0x24000000

080072d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072d4:	f7ff ffcc 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 80072d8:	4602      	mov	r2, r0
 80072da:	4b06      	ldr	r3, [pc, #24]	; (80072f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	091b      	lsrs	r3, r3, #4
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	4904      	ldr	r1, [pc, #16]	; (80072f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072e6:	5ccb      	ldrb	r3, [r1, r3]
 80072e8:	f003 031f 	and.w	r3, r3, #31
 80072ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	58024400 	.word	0x58024400
 80072f8:	0800ea2c 	.word	0x0800ea2c

080072fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007300:	f7ff ffb6 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 8007304:	4602      	mov	r2, r0
 8007306:	4b06      	ldr	r3, [pc, #24]	; (8007320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007308:	69db      	ldr	r3, [r3, #28]
 800730a:	0a1b      	lsrs	r3, r3, #8
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	4904      	ldr	r1, [pc, #16]	; (8007324 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007312:	5ccb      	ldrb	r3, [r1, r3]
 8007314:	f003 031f 	and.w	r3, r3, #31
 8007318:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800731c:	4618      	mov	r0, r3
 800731e:	bd80      	pop	{r7, pc}
 8007320:	58024400 	.word	0x58024400
 8007324:	0800ea2c 	.word	0x0800ea2c

08007328 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007330:	2300      	movs	r3, #0
 8007332:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007334:	2300      	movs	r3, #0
 8007336:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d03f      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007348:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800734c:	d02a      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800734e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007352:	d824      	bhi.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007354:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007358:	d018      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800735a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800735e:	d81e      	bhi.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007368:	d007      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800736a:	e018      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800736c:	4bab      	ldr	r3, [pc, #684]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800736e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007370:	4aaa      	ldr	r2, [pc, #680]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007376:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007378:	e015      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3304      	adds	r3, #4
 800737e:	2102      	movs	r1, #2
 8007380:	4618      	mov	r0, r3
 8007382:	f001 f9cf 	bl	8008724 <RCCEx_PLL2_Config>
 8007386:	4603      	mov	r3, r0
 8007388:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800738a:	e00c      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	3324      	adds	r3, #36	; 0x24
 8007390:	2102      	movs	r1, #2
 8007392:	4618      	mov	r0, r3
 8007394:	f001 fa78 	bl	8008888 <RCCEx_PLL3_Config>
 8007398:	4603      	mov	r3, r0
 800739a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800739c:	e003      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	75fb      	strb	r3, [r7, #23]
      break;
 80073a2:	e000      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80073a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d109      	bne.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80073ac:	4b9b      	ldr	r3, [pc, #620]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073b8:	4998      	ldr	r1, [pc, #608]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073ba:	4313      	orrs	r3, r2
 80073bc:	650b      	str	r3, [r1, #80]	; 0x50
 80073be:	e001      	b.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073c0:	7dfb      	ldrb	r3, [r7, #23]
 80073c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d03d      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	d826      	bhi.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80073d8:	a201      	add	r2, pc, #4	; (adr r2, 80073e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80073da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073de:	bf00      	nop
 80073e0:	080073f5 	.word	0x080073f5
 80073e4:	08007403 	.word	0x08007403
 80073e8:	08007415 	.word	0x08007415
 80073ec:	0800742d 	.word	0x0800742d
 80073f0:	0800742d 	.word	0x0800742d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073f4:	4b89      	ldr	r3, [pc, #548]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f8:	4a88      	ldr	r2, [pc, #544]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007400:	e015      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	3304      	adds	r3, #4
 8007406:	2100      	movs	r1, #0
 8007408:	4618      	mov	r0, r3
 800740a:	f001 f98b 	bl	8008724 <RCCEx_PLL2_Config>
 800740e:	4603      	mov	r3, r0
 8007410:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007412:	e00c      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3324      	adds	r3, #36	; 0x24
 8007418:	2100      	movs	r1, #0
 800741a:	4618      	mov	r0, r3
 800741c:	f001 fa34 	bl	8008888 <RCCEx_PLL3_Config>
 8007420:	4603      	mov	r3, r0
 8007422:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007424:	e003      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	75fb      	strb	r3, [r7, #23]
      break;
 800742a:	e000      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800742c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800742e:	7dfb      	ldrb	r3, [r7, #23]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d109      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007434:	4b79      	ldr	r3, [pc, #484]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007436:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007438:	f023 0207 	bic.w	r2, r3, #7
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007440:	4976      	ldr	r1, [pc, #472]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007442:	4313      	orrs	r3, r2
 8007444:	650b      	str	r3, [r1, #80]	; 0x50
 8007446:	e001      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
 800744a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007454:	2b00      	cmp	r3, #0
 8007456:	d042      	beq.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800745c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007460:	d02b      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007466:	d825      	bhi.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007468:	2bc0      	cmp	r3, #192	; 0xc0
 800746a:	d028      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x196>
 800746c:	2bc0      	cmp	r3, #192	; 0xc0
 800746e:	d821      	bhi.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007470:	2b80      	cmp	r3, #128	; 0x80
 8007472:	d016      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007474:	2b80      	cmp	r3, #128	; 0x80
 8007476:	d81d      	bhi.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007478:	2b00      	cmp	r3, #0
 800747a:	d002      	beq.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800747c:	2b40      	cmp	r3, #64	; 0x40
 800747e:	d007      	beq.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007480:	e018      	b.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007482:	4b66      	ldr	r3, [pc, #408]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007486:	4a65      	ldr	r2, [pc, #404]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800748c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800748e:	e017      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3304      	adds	r3, #4
 8007494:	2100      	movs	r1, #0
 8007496:	4618      	mov	r0, r3
 8007498:	f001 f944 	bl	8008724 <RCCEx_PLL2_Config>
 800749c:	4603      	mov	r3, r0
 800749e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80074a0:	e00e      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3324      	adds	r3, #36	; 0x24
 80074a6:	2100      	movs	r1, #0
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 f9ed 	bl	8008888 <RCCEx_PLL3_Config>
 80074ae:	4603      	mov	r3, r0
 80074b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80074b2:	e005      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	75fb      	strb	r3, [r7, #23]
      break;
 80074b8:	e002      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80074ba:	bf00      	nop
 80074bc:	e000      	b.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80074be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074c0:	7dfb      	ldrb	r3, [r7, #23]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d109      	bne.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80074c6:	4b55      	ldr	r3, [pc, #340]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d2:	4952      	ldr	r1, [pc, #328]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	650b      	str	r3, [r1, #80]	; 0x50
 80074d8:	e001      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074da:	7dfb      	ldrb	r3, [r7, #23]
 80074dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d049      	beq.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074f4:	d030      	beq.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80074f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074fa:	d82a      	bhi.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80074fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007500:	d02c      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007502:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007506:	d824      	bhi.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800750c:	d018      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800750e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007512:	d81e      	bhi.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007514:	2b00      	cmp	r3, #0
 8007516:	d003      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007518:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800751c:	d007      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800751e:	e018      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007520:	4b3e      	ldr	r3, [pc, #248]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	4a3d      	ldr	r2, [pc, #244]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800752a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800752c:	e017      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	3304      	adds	r3, #4
 8007532:	2100      	movs	r1, #0
 8007534:	4618      	mov	r0, r3
 8007536:	f001 f8f5 	bl	8008724 <RCCEx_PLL2_Config>
 800753a:	4603      	mov	r3, r0
 800753c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800753e:	e00e      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	3324      	adds	r3, #36	; 0x24
 8007544:	2100      	movs	r1, #0
 8007546:	4618      	mov	r0, r3
 8007548:	f001 f99e 	bl	8008888 <RCCEx_PLL3_Config>
 800754c:	4603      	mov	r3, r0
 800754e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007550:	e005      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	75fb      	strb	r3, [r7, #23]
      break;
 8007556:	e002      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007558:	bf00      	nop
 800755a:	e000      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800755c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10a      	bne.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007564:	4b2d      	ldr	r3, [pc, #180]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007568:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007572:	492a      	ldr	r1, [pc, #168]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007574:	4313      	orrs	r3, r2
 8007576:	658b      	str	r3, [r1, #88]	; 0x58
 8007578:	e001      	b.n	800757e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007586:	2b00      	cmp	r3, #0
 8007588:	d04c      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007594:	d030      	beq.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007596:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800759a:	d82a      	bhi.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800759c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80075a0:	d02c      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80075a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80075a6:	d824      	bhi.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80075a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075ac:	d018      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80075ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075b2:	d81e      	bhi.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80075b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075bc:	d007      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80075be:	e018      	b.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c0:	4b16      	ldr	r3, [pc, #88]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c4:	4a15      	ldr	r2, [pc, #84]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075cc:	e017      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	3304      	adds	r3, #4
 80075d2:	2100      	movs	r1, #0
 80075d4:	4618      	mov	r0, r3
 80075d6:	f001 f8a5 	bl	8008724 <RCCEx_PLL2_Config>
 80075da:	4603      	mov	r3, r0
 80075dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80075de:	e00e      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	3324      	adds	r3, #36	; 0x24
 80075e4:	2100      	movs	r1, #0
 80075e6:	4618      	mov	r0, r3
 80075e8:	f001 f94e 	bl	8008888 <RCCEx_PLL3_Config>
 80075ec:	4603      	mov	r3, r0
 80075ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075f0:	e005      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	75fb      	strb	r3, [r7, #23]
      break;
 80075f6:	e002      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80075f8:	bf00      	nop
 80075fa:	e000      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80075fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075fe:	7dfb      	ldrb	r3, [r7, #23]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10d      	bne.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007604:	4b05      	ldr	r3, [pc, #20]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007608:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007612:	4902      	ldr	r1, [pc, #8]	; (800761c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007614:	4313      	orrs	r3, r2
 8007616:	658b      	str	r3, [r1, #88]	; 0x58
 8007618:	e004      	b.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800761a:	bf00      	nop
 800761c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007620:	7dfb      	ldrb	r3, [r7, #23]
 8007622:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d032      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007634:	2b30      	cmp	r3, #48	; 0x30
 8007636:	d01c      	beq.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007638:	2b30      	cmp	r3, #48	; 0x30
 800763a:	d817      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800763c:	2b20      	cmp	r3, #32
 800763e:	d00c      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007640:	2b20      	cmp	r3, #32
 8007642:	d813      	bhi.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007644:	2b00      	cmp	r3, #0
 8007646:	d016      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007648:	2b10      	cmp	r3, #16
 800764a:	d10f      	bne.n	800766c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800764c:	4baf      	ldr	r3, [pc, #700]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800764e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007650:	4aae      	ldr	r2, [pc, #696]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007652:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007656:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007658:	e00e      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3304      	adds	r3, #4
 800765e:	2102      	movs	r1, #2
 8007660:	4618      	mov	r0, r3
 8007662:	f001 f85f 	bl	8008724 <RCCEx_PLL2_Config>
 8007666:	4603      	mov	r3, r0
 8007668:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800766a:	e005      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	75fb      	strb	r3, [r7, #23]
      break;
 8007670:	e002      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007672:	bf00      	nop
 8007674:	e000      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8007676:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007678:	7dfb      	ldrb	r3, [r7, #23]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d109      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800767e:	4ba3      	ldr	r3, [pc, #652]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007682:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800768a:	49a0      	ldr	r1, [pc, #640]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800768c:	4313      	orrs	r3, r2
 800768e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007690:	e001      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007692:	7dfb      	ldrb	r3, [r7, #23]
 8007694:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d047      	beq.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076aa:	d030      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80076ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076b0:	d82a      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80076b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076b6:	d02c      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80076b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076bc:	d824      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80076be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c2:	d018      	beq.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80076c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076c8:	d81e      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80076ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d2:	d007      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80076d4:	e018      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076d6:	4b8d      	ldr	r3, [pc, #564]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076da:	4a8c      	ldr	r2, [pc, #560]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80076dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076e2:	e017      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3304      	adds	r3, #4
 80076e8:	2100      	movs	r1, #0
 80076ea:	4618      	mov	r0, r3
 80076ec:	f001 f81a 	bl	8008724 <RCCEx_PLL2_Config>
 80076f0:	4603      	mov	r3, r0
 80076f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076f4:	e00e      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3324      	adds	r3, #36	; 0x24
 80076fa:	2100      	movs	r1, #0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 f8c3 	bl	8008888 <RCCEx_PLL3_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007706:	e005      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
      break;
 800770c:	e002      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800770e:	bf00      	nop
 8007710:	e000      	b.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007714:	7dfb      	ldrb	r3, [r7, #23]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d109      	bne.n	800772e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800771a:	4b7c      	ldr	r3, [pc, #496]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800771c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800771e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007726:	4979      	ldr	r1, [pc, #484]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007728:	4313      	orrs	r3, r2
 800772a:	650b      	str	r3, [r1, #80]	; 0x50
 800772c:	e001      	b.n	8007732 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800772e:	7dfb      	ldrb	r3, [r7, #23]
 8007730:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d049      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007742:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007746:	d02e      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007748:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800774c:	d828      	bhi.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800774e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007752:	d02a      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x482>
 8007754:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007758:	d822      	bhi.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800775a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800775e:	d026      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007760:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007764:	d81c      	bhi.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007766:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800776a:	d010      	beq.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800776c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007770:	d816      	bhi.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d01d      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8007776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800777a:	d111      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3304      	adds	r3, #4
 8007780:	2101      	movs	r1, #1
 8007782:	4618      	mov	r0, r3
 8007784:	f000 ffce 	bl	8008724 <RCCEx_PLL2_Config>
 8007788:	4603      	mov	r3, r0
 800778a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800778c:	e012      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	3324      	adds	r3, #36	; 0x24
 8007792:	2101      	movs	r1, #1
 8007794:	4618      	mov	r0, r3
 8007796:	f001 f877 	bl	8008888 <RCCEx_PLL3_Config>
 800779a:	4603      	mov	r3, r0
 800779c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800779e:	e009      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	75fb      	strb	r3, [r7, #23]
      break;
 80077a4:	e006      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80077a6:	bf00      	nop
 80077a8:	e004      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80077aa:	bf00      	nop
 80077ac:	e002      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80077ae:	bf00      	nop
 80077b0:	e000      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80077b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b4:	7dfb      	ldrb	r3, [r7, #23]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d109      	bne.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80077ba:	4b54      	ldr	r3, [pc, #336]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077c6:	4951      	ldr	r1, [pc, #324]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80077c8:	4313      	orrs	r3, r2
 80077ca:	650b      	str	r3, [r1, #80]	; 0x50
 80077cc:	e001      	b.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d04b      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077e8:	d02e      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80077ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077ee:	d828      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80077f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077f4:	d02a      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80077f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077fa:	d822      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80077fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007800:	d026      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007802:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007806:	d81c      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800780c:	d010      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800780e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007812:	d816      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007814:	2b00      	cmp	r3, #0
 8007816:	d01d      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800781c:	d111      	bne.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3304      	adds	r3, #4
 8007822:	2101      	movs	r1, #1
 8007824:	4618      	mov	r0, r3
 8007826:	f000 ff7d 	bl	8008724 <RCCEx_PLL2_Config>
 800782a:	4603      	mov	r3, r0
 800782c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800782e:	e012      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	3324      	adds	r3, #36	; 0x24
 8007834:	2101      	movs	r1, #1
 8007836:	4618      	mov	r0, r3
 8007838:	f001 f826 	bl	8008888 <RCCEx_PLL3_Config>
 800783c:	4603      	mov	r3, r0
 800783e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007840:	e009      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	75fb      	strb	r3, [r7, #23]
      break;
 8007846:	e006      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007848:	bf00      	nop
 800784a:	e004      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800784c:	bf00      	nop
 800784e:	e002      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007850:	bf00      	nop
 8007852:	e000      	b.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007856:	7dfb      	ldrb	r3, [r7, #23]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800785c:	4b2b      	ldr	r3, [pc, #172]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800785e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007860:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800786a:	4928      	ldr	r1, [pc, #160]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800786c:	4313      	orrs	r3, r2
 800786e:	658b      	str	r3, [r1, #88]	; 0x58
 8007870:	e001      	b.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007872:	7dfb      	ldrb	r3, [r7, #23]
 8007874:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d02f      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800788a:	d00e      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x582>
 800788c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007890:	d814      	bhi.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007892:	2b00      	cmp	r3, #0
 8007894:	d015      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800789a:	d10f      	bne.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800789c:	4b1b      	ldr	r3, [pc, #108]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800789e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a0:	4a1a      	ldr	r2, [pc, #104]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80078a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80078a8:	e00c      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	3304      	adds	r3, #4
 80078ae:	2101      	movs	r1, #1
 80078b0:	4618      	mov	r0, r3
 80078b2:	f000 ff37 	bl	8008724 <RCCEx_PLL2_Config>
 80078b6:	4603      	mov	r3, r0
 80078b8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80078ba:	e003      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	75fb      	strb	r3, [r7, #23]
      break;
 80078c0:	e000      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80078c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078c4:	7dfb      	ldrb	r3, [r7, #23]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d109      	bne.n	80078de <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80078ca:	4b10      	ldr	r3, [pc, #64]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80078cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d6:	490d      	ldr	r1, [pc, #52]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80078d8:	4313      	orrs	r3, r2
 80078da:	650b      	str	r3, [r1, #80]	; 0x50
 80078dc:	e001      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078de:	7dfb      	ldrb	r3, [r7, #23]
 80078e0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d033      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	d81c      	bhi.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80078f6:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	08007937 	.word	0x08007937
 8007900:	08007911 	.word	0x08007911
 8007904:	0800791f 	.word	0x0800791f
 8007908:	08007937 	.word	0x08007937
 800790c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007910:	4bb8      	ldr	r3, [pc, #736]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007914:	4ab7      	ldr	r2, [pc, #732]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007916:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800791a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800791c:	e00c      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	3304      	adds	r3, #4
 8007922:	2102      	movs	r1, #2
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fefd 	bl	8008724 <RCCEx_PLL2_Config>
 800792a:	4603      	mov	r3, r0
 800792c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800792e:	e003      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	75fb      	strb	r3, [r7, #23]
      break;
 8007934:	e000      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007936:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007938:	7dfb      	ldrb	r3, [r7, #23]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d109      	bne.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800793e:	4bad      	ldr	r3, [pc, #692]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007942:	f023 0203 	bic.w	r2, r3, #3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800794a:	49aa      	ldr	r1, [pc, #680]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800794c:	4313      	orrs	r3, r2
 800794e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007950:	e001      	b.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007952:	7dfb      	ldrb	r3, [r7, #23]
 8007954:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 8086 	beq.w	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007964:	4ba4      	ldr	r3, [pc, #656]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4aa3      	ldr	r2, [pc, #652]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800796a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800796e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007970:	f7fb fa92 	bl	8002e98 <HAL_GetTick>
 8007974:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007976:	e009      	b.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007978:	f7fb fa8e 	bl	8002e98 <HAL_GetTick>
 800797c:	4602      	mov	r2, r0
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	1ad3      	subs	r3, r2, r3
 8007982:	2b64      	cmp	r3, #100	; 0x64
 8007984:	d902      	bls.n	800798c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007986:	2303      	movs	r3, #3
 8007988:	75fb      	strb	r3, [r7, #23]
        break;
 800798a:	e005      	b.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800798c:	4b9a      	ldr	r3, [pc, #616]	; (8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007994:	2b00      	cmp	r3, #0
 8007996:	d0ef      	beq.n	8007978 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d166      	bne.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800799e:	4b95      	ldr	r3, [pc, #596]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079a8:	4053      	eors	r3, r2
 80079aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d013      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079b2:	4b90      	ldr	r3, [pc, #576]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079ba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079bc:	4b8d      	ldr	r3, [pc, #564]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c0:	4a8c      	ldr	r2, [pc, #560]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079c6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079c8:	4b8a      	ldr	r3, [pc, #552]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079cc:	4a89      	ldr	r2, [pc, #548]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079d2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80079d4:	4a87      	ldr	r2, [pc, #540]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079e4:	d115      	bne.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e6:	f7fb fa57 	bl	8002e98 <HAL_GetTick>
 80079ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079ec:	e00b      	b.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ee:	f7fb fa53 	bl	8002e98 <HAL_GetTick>
 80079f2:	4602      	mov	r2, r0
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	1ad3      	subs	r3, r2, r3
 80079f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d902      	bls.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	75fb      	strb	r3, [r7, #23]
            break;
 8007a04:	e005      	b.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a06:	4b7b      	ldr	r3, [pc, #492]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d0ed      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d126      	bne.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a26:	d10d      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007a28:	4b72      	ldr	r3, [pc, #456]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a36:	0919      	lsrs	r1, r3, #4
 8007a38:	4b70      	ldr	r3, [pc, #448]	; (8007bfc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007a3a:	400b      	ands	r3, r1
 8007a3c:	496d      	ldr	r1, [pc, #436]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	610b      	str	r3, [r1, #16]
 8007a42:	e005      	b.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007a44:	4b6b      	ldr	r3, [pc, #428]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	4a6a      	ldr	r2, [pc, #424]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007a4e:	6113      	str	r3, [r2, #16]
 8007a50:	4b68      	ldr	r3, [pc, #416]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a5e:	4965      	ldr	r1, [pc, #404]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	670b      	str	r3, [r1, #112]	; 0x70
 8007a64:	e004      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a66:	7dfb      	ldrb	r3, [r7, #23]
 8007a68:	75bb      	strb	r3, [r7, #22]
 8007a6a:	e001      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
 8007a6e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d07e      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a80:	2b28      	cmp	r3, #40	; 0x28
 8007a82:	d867      	bhi.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007a84:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8a:	bf00      	nop
 8007a8c:	08007b5b 	.word	0x08007b5b
 8007a90:	08007b55 	.word	0x08007b55
 8007a94:	08007b55 	.word	0x08007b55
 8007a98:	08007b55 	.word	0x08007b55
 8007a9c:	08007b55 	.word	0x08007b55
 8007aa0:	08007b55 	.word	0x08007b55
 8007aa4:	08007b55 	.word	0x08007b55
 8007aa8:	08007b55 	.word	0x08007b55
 8007aac:	08007b31 	.word	0x08007b31
 8007ab0:	08007b55 	.word	0x08007b55
 8007ab4:	08007b55 	.word	0x08007b55
 8007ab8:	08007b55 	.word	0x08007b55
 8007abc:	08007b55 	.word	0x08007b55
 8007ac0:	08007b55 	.word	0x08007b55
 8007ac4:	08007b55 	.word	0x08007b55
 8007ac8:	08007b55 	.word	0x08007b55
 8007acc:	08007b43 	.word	0x08007b43
 8007ad0:	08007b55 	.word	0x08007b55
 8007ad4:	08007b55 	.word	0x08007b55
 8007ad8:	08007b55 	.word	0x08007b55
 8007adc:	08007b55 	.word	0x08007b55
 8007ae0:	08007b55 	.word	0x08007b55
 8007ae4:	08007b55 	.word	0x08007b55
 8007ae8:	08007b55 	.word	0x08007b55
 8007aec:	08007b5b 	.word	0x08007b5b
 8007af0:	08007b55 	.word	0x08007b55
 8007af4:	08007b55 	.word	0x08007b55
 8007af8:	08007b55 	.word	0x08007b55
 8007afc:	08007b55 	.word	0x08007b55
 8007b00:	08007b55 	.word	0x08007b55
 8007b04:	08007b55 	.word	0x08007b55
 8007b08:	08007b55 	.word	0x08007b55
 8007b0c:	08007b5b 	.word	0x08007b5b
 8007b10:	08007b55 	.word	0x08007b55
 8007b14:	08007b55 	.word	0x08007b55
 8007b18:	08007b55 	.word	0x08007b55
 8007b1c:	08007b55 	.word	0x08007b55
 8007b20:	08007b55 	.word	0x08007b55
 8007b24:	08007b55 	.word	0x08007b55
 8007b28:	08007b55 	.word	0x08007b55
 8007b2c:	08007b5b 	.word	0x08007b5b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	3304      	adds	r3, #4
 8007b34:	2101      	movs	r1, #1
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 fdf4 	bl	8008724 <RCCEx_PLL2_Config>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b40:	e00c      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	3324      	adds	r3, #36	; 0x24
 8007b46:	2101      	movs	r1, #1
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f000 fe9d 	bl	8008888 <RCCEx_PLL3_Config>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b52:	e003      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	75fb      	strb	r3, [r7, #23]
      break;
 8007b58:	e000      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d109      	bne.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b66:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b6e:	4921      	ldr	r1, [pc, #132]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	654b      	str	r3, [r1, #84]	; 0x54
 8007b74:	e001      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b76:	7dfb      	ldrb	r3, [r7, #23]
 8007b78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0302 	and.w	r3, r3, #2
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d03e      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b8a:	2b05      	cmp	r3, #5
 8007b8c:	d820      	bhi.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8007b8e:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b94:	08007bd7 	.word	0x08007bd7
 8007b98:	08007bad 	.word	0x08007bad
 8007b9c:	08007bbf 	.word	0x08007bbf
 8007ba0:	08007bd7 	.word	0x08007bd7
 8007ba4:	08007bd7 	.word	0x08007bd7
 8007ba8:	08007bd7 	.word	0x08007bd7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3304      	adds	r3, #4
 8007bb0:	2101      	movs	r1, #1
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f000 fdb6 	bl	8008724 <RCCEx_PLL2_Config>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007bbc:	e00c      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	3324      	adds	r3, #36	; 0x24
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f000 fe5f 	bl	8008888 <RCCEx_PLL3_Config>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007bce:	e003      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8007bd4:	e000      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 8007bd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d110      	bne.n	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007bde:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be2:	f023 0207 	bic.w	r2, r3, #7
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bea:	4902      	ldr	r1, [pc, #8]	; (8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	654b      	str	r3, [r1, #84]	; 0x54
 8007bf0:	e008      	b.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8007bf2:	bf00      	nop
 8007bf4:	58024400 	.word	0x58024400
 8007bf8:	58024800 	.word	0x58024800
 8007bfc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c00:	7dfb      	ldrb	r3, [r7, #23]
 8007c02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d039      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c16:	2b05      	cmp	r3, #5
 8007c18:	d820      	bhi.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007c1a:	a201      	add	r2, pc, #4	; (adr r2, 8007c20 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c20:	08007c63 	.word	0x08007c63
 8007c24:	08007c39 	.word	0x08007c39
 8007c28:	08007c4b 	.word	0x08007c4b
 8007c2c:	08007c63 	.word	0x08007c63
 8007c30:	08007c63 	.word	0x08007c63
 8007c34:	08007c63 	.word	0x08007c63
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fd70 	bl	8008724 <RCCEx_PLL2_Config>
 8007c44:	4603      	mov	r3, r0
 8007c46:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c48:	e00c      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	3324      	adds	r3, #36	; 0x24
 8007c4e:	2101      	movs	r1, #1
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 fe19 	bl	8008888 <RCCEx_PLL3_Config>
 8007c56:	4603      	mov	r3, r0
 8007c58:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c5a:	e003      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c60:	e000      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c64:	7dfb      	ldrb	r3, [r7, #23]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10a      	bne.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c6a:	4bb7      	ldr	r3, [pc, #732]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c6e:	f023 0207 	bic.w	r2, r3, #7
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c78:	49b3      	ldr	r1, [pc, #716]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	658b      	str	r3, [r1, #88]	; 0x58
 8007c7e:	e001      	b.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0320 	and.w	r3, r3, #32
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d04b      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c9a:	d02e      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8007c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ca0:	d828      	bhi.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ca6:	d02a      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007ca8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cac:	d822      	bhi.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007cae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007cb2:	d026      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007cb4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007cb8:	d81c      	bhi.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007cba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cbe:	d010      	beq.n	8007ce2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8007cc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cc4:	d816      	bhi.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d01d      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007cca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cce:	d111      	bne.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fd24 	bl	8008724 <RCCEx_PLL2_Config>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007ce0:	e012      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	3324      	adds	r3, #36	; 0x24
 8007ce6:	2102      	movs	r1, #2
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f000 fdcd 	bl	8008888 <RCCEx_PLL3_Config>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007cf2:	e009      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cf8:	e006      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007cfa:	bf00      	nop
 8007cfc:	e004      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007cfe:	bf00      	nop
 8007d00:	e002      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007d02:	bf00      	nop
 8007d04:	e000      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007d06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d08:	7dfb      	ldrb	r3, [r7, #23]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10a      	bne.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d0e:	4b8e      	ldr	r3, [pc, #568]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d1c:	498a      	ldr	r1, [pc, #552]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	654b      	str	r3, [r1, #84]	; 0x54
 8007d22:	e001      	b.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d24:	7dfb      	ldrb	r3, [r7, #23]
 8007d26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d04b      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d3e:	d02e      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007d40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d44:	d828      	bhi.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d4a:	d02a      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d50:	d822      	bhi.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007d52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d56:	d026      	beq.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007d58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d5c:	d81c      	bhi.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d62:	d010      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d68:	d816      	bhi.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01d      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d72:	d111      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3304      	adds	r3, #4
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f000 fcd2 	bl	8008724 <RCCEx_PLL2_Config>
 8007d80:	4603      	mov	r3, r0
 8007d82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d84:	e012      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	3324      	adds	r3, #36	; 0x24
 8007d8a:	2102      	movs	r1, #2
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fd7b 	bl	8008888 <RCCEx_PLL3_Config>
 8007d92:	4603      	mov	r3, r0
 8007d94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d96:	e009      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d9c:	e006      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007d9e:	bf00      	nop
 8007da0:	e004      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007da2:	bf00      	nop
 8007da4:	e002      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007da6:	bf00      	nop
 8007da8:	e000      	b.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007daa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dac:	7dfb      	ldrb	r3, [r7, #23]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10a      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007db2:	4b65      	ldr	r3, [pc, #404]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dc0:	4961      	ldr	r1, [pc, #388]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	658b      	str	r3, [r1, #88]	; 0x58
 8007dc6:	e001      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc8:	7dfb      	ldrb	r3, [r7, #23]
 8007dca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d04b      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007dde:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007de2:	d02e      	beq.n	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8007de4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007de8:	d828      	bhi.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007dea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dee:	d02a      	beq.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007df4:	d822      	bhi.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007df6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007dfa:	d026      	beq.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007dfc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e00:	d81c      	bhi.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e06:	d010      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007e08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e0c:	d816      	bhi.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d01d      	beq.n	8007e4e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e16:	d111      	bne.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 fc80 	bl	8008724 <RCCEx_PLL2_Config>
 8007e24:	4603      	mov	r3, r0
 8007e26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007e28:	e012      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	3324      	adds	r3, #36	; 0x24
 8007e2e:	2102      	movs	r1, #2
 8007e30:	4618      	mov	r0, r3
 8007e32:	f000 fd29 	bl	8008888 <RCCEx_PLL3_Config>
 8007e36:	4603      	mov	r3, r0
 8007e38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007e3a:	e009      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e40:	e006      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007e42:	bf00      	nop
 8007e44:	e004      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007e46:	bf00      	nop
 8007e48:	e002      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007e4a:	bf00      	nop
 8007e4c:	e000      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d10a      	bne.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e56:	4b3c      	ldr	r3, [pc, #240]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e64:	4938      	ldr	r1, [pc, #224]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007e66:	4313      	orrs	r3, r2
 8007e68:	658b      	str	r3, [r1, #88]	; 0x58
 8007e6a:	e001      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0308 	and.w	r3, r3, #8
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d01a      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e86:	d10a      	bne.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3324      	adds	r3, #36	; 0x24
 8007e8c:	2102      	movs	r1, #2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fcfa 	bl	8008888 <RCCEx_PLL3_Config>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007e9e:	4b2a      	ldr	r3, [pc, #168]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eac:	4926      	ldr	r1, [pc, #152]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0310 	and.w	r3, r3, #16
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d01a      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec8:	d10a      	bne.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	3324      	adds	r3, #36	; 0x24
 8007ece:	2102      	movs	r1, #2
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 fcd9 	bl	8008888 <RCCEx_PLL3_Config>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d001      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ee0:	4b19      	ldr	r3, [pc, #100]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eee:	4916      	ldr	r1, [pc, #88]	; (8007f48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d036      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f0a:	d01f      	beq.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007f0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f10:	d817      	bhi.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f1a:	d009      	beq.n	8007f30 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007f1c:	e011      	b.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	3304      	adds	r3, #4
 8007f22:	2100      	movs	r1, #0
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 fbfd 	bl	8008724 <RCCEx_PLL2_Config>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007f2e:	e00e      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	3324      	adds	r3, #36	; 0x24
 8007f34:	2102      	movs	r1, #2
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 fca6 	bl	8008888 <RCCEx_PLL3_Config>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007f40:	e005      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	75fb      	strb	r3, [r7, #23]
      break;
 8007f46:	e002      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007f48:	58024400 	.word	0x58024400
      break;
 8007f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10a      	bne.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f54:	4b93      	ldr	r3, [pc, #588]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f62:	4990      	ldr	r1, [pc, #576]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f64:	4313      	orrs	r3, r2
 8007f66:	658b      	str	r3, [r1, #88]	; 0x58
 8007f68:	e001      	b.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f6a:	7dfb      	ldrb	r3, [r7, #23]
 8007f6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d033      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f84:	d01c      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007f86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f8a:	d816      	bhi.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f90:	d003      	beq.n	8007f9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007f92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f96:	d007      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007f98:	e00f      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f9a:	4b82      	ldr	r3, [pc, #520]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9e:	4a81      	ldr	r2, [pc, #516]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fa4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007fa6:	e00c      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3324      	adds	r3, #36	; 0x24
 8007fac:	2101      	movs	r1, #1
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 fc6a 	bl	8008888 <RCCEx_PLL3_Config>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007fb8:	e003      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8007fbe:	e000      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fc2:	7dfb      	ldrb	r3, [r7, #23]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d10a      	bne.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007fc8:	4b76      	ldr	r3, [pc, #472]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007fd6:	4973      	ldr	r1, [pc, #460]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	654b      	str	r3, [r1, #84]	; 0x54
 8007fdc:	e001      	b.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
 8007fe0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d029      	beq.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ffa:	d007      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007ffc:	e00f      	b.n	800801e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ffe:	4b69      	ldr	r3, [pc, #420]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008002:	4a68      	ldr	r2, [pc, #416]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008008:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800800a:	e00b      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3304      	adds	r3, #4
 8008010:	2102      	movs	r1, #2
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fb86 	bl	8008724 <RCCEx_PLL2_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800801c:	e002      	b.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	75fb      	strb	r3, [r7, #23]
      break;
 8008022:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008024:	7dfb      	ldrb	r3, [r7, #23]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d109      	bne.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800802a:	4b5e      	ldr	r3, [pc, #376]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800802c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800802e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008036:	495b      	ldr	r1, [pc, #364]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008038:	4313      	orrs	r3, r2
 800803a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800803c:	e001      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d00a      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3324      	adds	r3, #36	; 0x24
 8008052:	2102      	movs	r1, #2
 8008054:	4618      	mov	r0, r3
 8008056:	f000 fc17 	bl	8008888 <RCCEx_PLL3_Config>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d030      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008074:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008078:	d017      	beq.n	80080aa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800807a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800807e:	d811      	bhi.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008084:	d013      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800808a:	d80b      	bhi.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800808c:	2b00      	cmp	r3, #0
 800808e:	d010      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008090:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008094:	d106      	bne.n	80080a4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008096:	4b43      	ldr	r3, [pc, #268]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809a:	4a42      	ldr	r2, [pc, #264]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800809c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80080a2:	e007      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	75fb      	strb	r3, [r7, #23]
      break;
 80080a8:	e004      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80080aa:	bf00      	nop
 80080ac:	e002      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80080ae:	bf00      	nop
 80080b0:	e000      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80080b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d109      	bne.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080ba:	4b3a      	ldr	r3, [pc, #232]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080c6:	4937      	ldr	r1, [pc, #220]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	654b      	str	r3, [r1, #84]	; 0x54
 80080cc:	e001      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ce:	7dfb      	ldrb	r3, [r7, #23]
 80080d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d008      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080de:	4b31      	ldr	r3, [pc, #196]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ea:	492e      	ldr	r1, [pc, #184]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080ec:	4313      	orrs	r3, r2
 80080ee:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d009      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80080fc:	4b29      	ldr	r3, [pc, #164]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800810a:	4926      	ldr	r1, [pc, #152]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800810c:	4313      	orrs	r3, r2
 800810e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d008      	beq.n	800812e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800811c:	4b21      	ldr	r3, [pc, #132]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800811e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008120:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008128:	491e      	ldr	r1, [pc, #120]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800812a:	4313      	orrs	r3, r2
 800812c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00d      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800813a:	4b1a      	ldr	r3, [pc, #104]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	4a19      	ldr	r2, [pc, #100]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008140:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008144:	6113      	str	r3, [r2, #16]
 8008146:	4b17      	ldr	r3, [pc, #92]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008148:	691a      	ldr	r2, [r3, #16]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008150:	4914      	ldr	r1, [pc, #80]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008152:	4313      	orrs	r3, r2
 8008154:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	da08      	bge.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800815e:	4b11      	ldr	r3, [pc, #68]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008162:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800816a:	490e      	ldr	r1, [pc, #56]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800816c:	4313      	orrs	r3, r2
 800816e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d009      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800817c:	4b09      	ldr	r3, [pc, #36]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800817e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008180:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818a:	4906      	ldr	r1, [pc, #24]	; (80081a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800818c:	4313      	orrs	r3, r2
 800818e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008190:	7dbb      	ldrb	r3, [r7, #22]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d101      	bne.n	800819a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	e000      	b.n	800819c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800819a:	2301      	movs	r3, #1
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	58024400 	.word	0x58024400

080081a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80081ac:	f7ff f860 	bl	8007270 <HAL_RCC_GetHCLKFreq>
 80081b0:	4602      	mov	r2, r0
 80081b2:	4b06      	ldr	r3, [pc, #24]	; (80081cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	091b      	lsrs	r3, r3, #4
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	4904      	ldr	r1, [pc, #16]	; (80081d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80081be:	5ccb      	ldrb	r3, [r1, r3]
 80081c0:	f003 031f 	and.w	r3, r3, #31
 80081c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	58024400 	.word	0x58024400
 80081d0:	0800ea2c 	.word	0x0800ea2c

080081d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b089      	sub	sp, #36	; 0x24
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081dc:	4ba1      	ldr	r3, [pc, #644]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80081e6:	4b9f      	ldr	r3, [pc, #636]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ea:	0b1b      	lsrs	r3, r3, #12
 80081ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081f2:	4b9c      	ldr	r3, [pc, #624]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f6:	091b      	lsrs	r3, r3, #4
 80081f8:	f003 0301 	and.w	r3, r3, #1
 80081fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80081fe:	4b99      	ldr	r3, [pc, #612]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008202:	08db      	lsrs	r3, r3, #3
 8008204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	fb02 f303 	mul.w	r3, r2, r3
 800820e:	ee07 3a90 	vmov	s15, r3
 8008212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b00      	cmp	r3, #0
 800821e:	f000 8111 	beq.w	8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	2b02      	cmp	r3, #2
 8008226:	f000 8083 	beq.w	8008330 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	2b02      	cmp	r3, #2
 800822e:	f200 80a1 	bhi.w	8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d056      	beq.n	80082ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800823e:	e099      	b.n	8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008240:	4b88      	ldr	r3, [pc, #544]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f003 0320 	and.w	r3, r3, #32
 8008248:	2b00      	cmp	r3, #0
 800824a:	d02d      	beq.n	80082a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800824c:	4b85      	ldr	r3, [pc, #532]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	08db      	lsrs	r3, r3, #3
 8008252:	f003 0303 	and.w	r3, r3, #3
 8008256:	4a84      	ldr	r2, [pc, #528]	; (8008468 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008258:	fa22 f303 	lsr.w	r3, r2, r3
 800825c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	ee07 3a90 	vmov	s15, r3
 8008264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	ee07 3a90 	vmov	s15, r3
 800826e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008276:	4b7b      	ldr	r3, [pc, #492]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827e:	ee07 3a90 	vmov	s15, r3
 8008282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008286:	ed97 6a03 	vldr	s12, [r7, #12]
 800828a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800846c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800828e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800829a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80082a6:	e087      	b.n	80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082a8:	697b      	ldr	r3, [r7, #20]
 80082aa:	ee07 3a90 	vmov	s15, r3
 80082ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008470 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80082b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ba:	4b6a      	ldr	r3, [pc, #424]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800846c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082ea:	e065      	b.n	80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082fe:	4b59      	ldr	r3, [pc, #356]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008312:	eddf 5a56 	vldr	s11, [pc, #344]	; 800846c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800831e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800832e:	e043      	b.n	80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008478 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800833e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008342:	4b48      	ldr	r3, [pc, #288]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834a:	ee07 3a90 	vmov	s15, r3
 800834e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008352:	ed97 6a03 	vldr	s12, [r7, #12]
 8008356:	eddf 5a45 	vldr	s11, [pc, #276]	; 800846c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800835a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008372:	e021      	b.n	80083b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008474 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008386:	4b37      	ldr	r3, [pc, #220]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800838a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008396:	ed97 6a03 	vldr	s12, [r7, #12]
 800839a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800846c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800839e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80083b8:	4b2a      	ldr	r3, [pc, #168]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083bc:	0a5b      	lsrs	r3, r3, #9
 80083be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083c2:	ee07 3a90 	vmov	s15, r3
 80083c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083de:	ee17 2a90 	vmov	r2, s15
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80083e6:	4b1f      	ldr	r3, [pc, #124]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ea:	0c1b      	lsrs	r3, r3, #16
 80083ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083f0:	ee07 3a90 	vmov	s15, r3
 80083f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008400:	edd7 6a07 	vldr	s13, [r7, #28]
 8008404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800840c:	ee17 2a90 	vmov	r2, s15
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008414:	4b13      	ldr	r3, [pc, #76]	; (8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008418:	0e1b      	lsrs	r3, r3, #24
 800841a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800841e:	ee07 3a90 	vmov	s15, r3
 8008422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800842a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800842e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800843a:	ee17 2a90 	vmov	r2, s15
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008442:	e008      	b.n	8008456 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2200      	movs	r2, #0
 800844e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2200      	movs	r2, #0
 8008454:	609a      	str	r2, [r3, #8]
}
 8008456:	bf00      	nop
 8008458:	3724      	adds	r7, #36	; 0x24
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	58024400 	.word	0x58024400
 8008468:	03d09000 	.word	0x03d09000
 800846c:	46000000 	.word	0x46000000
 8008470:	4c742400 	.word	0x4c742400
 8008474:	4a742400 	.word	0x4a742400
 8008478:	4c371b00 	.word	0x4c371b00

0800847c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800847c:	b480      	push	{r7}
 800847e:	b089      	sub	sp, #36	; 0x24
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008484:	4ba1      	ldr	r3, [pc, #644]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008488:	f003 0303 	and.w	r3, r3, #3
 800848c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800848e:	4b9f      	ldr	r3, [pc, #636]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008492:	0d1b      	lsrs	r3, r3, #20
 8008494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008498:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800849a:	4b9c      	ldr	r3, [pc, #624]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800849c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800849e:	0a1b      	lsrs	r3, r3, #8
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80084a6:	4b99      	ldr	r3, [pc, #612]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084aa:	08db      	lsrs	r3, r3, #3
 80084ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	fb02 f303 	mul.w	r3, r2, r3
 80084b6:	ee07 3a90 	vmov	s15, r3
 80084ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 8111 	beq.w	80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	f000 8083 	beq.w	80085d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	f200 80a1 	bhi.w	800861c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80084da:	69bb      	ldr	r3, [r7, #24]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80084e0:	69bb      	ldr	r3, [r7, #24]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d056      	beq.n	8008594 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80084e6:	e099      	b.n	800861c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084e8:	4b88      	ldr	r3, [pc, #544]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f003 0320 	and.w	r3, r3, #32
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d02d      	beq.n	8008550 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084f4:	4b85      	ldr	r3, [pc, #532]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	08db      	lsrs	r3, r3, #3
 80084fa:	f003 0303 	and.w	r3, r3, #3
 80084fe:	4a84      	ldr	r2, [pc, #528]	; (8008710 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008500:	fa22 f303 	lsr.w	r3, r2, r3
 8008504:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	ee07 3a90 	vmov	s15, r3
 800850c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800851e:	4b7b      	ldr	r3, [pc, #492]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008526:	ee07 3a90 	vmov	s15, r3
 800852a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800852e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008532:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800853a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800853e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800854a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800854e:	e087      	b.n	8008660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	ee07 3a90 	vmov	s15, r3
 8008556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800855a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008718 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800855e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008562:	4b6a      	ldr	r3, [pc, #424]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800856a:	ee07 3a90 	vmov	s15, r3
 800856e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008572:	ed97 6a03 	vldr	s12, [r7, #12]
 8008576:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800857a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800858a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008592:	e065      	b.n	8008660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	ee07 3a90 	vmov	s15, r3
 800859a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800859e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800871c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a6:	4b59      	ldr	r3, [pc, #356]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085d6:	e043      	b.n	8008660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	ee07 3a90 	vmov	s15, r3
 80085de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008720 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80085e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ea:	4b48      	ldr	r3, [pc, #288]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f2:	ee07 3a90 	vmov	s15, r3
 80085f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80085fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800860a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800860e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008616:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800861a:	e021      	b.n	8008660 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	ee07 3a90 	vmov	s15, r3
 8008622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008626:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800871c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800862a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862e:	4b37      	ldr	r3, [pc, #220]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008642:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008714 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800864a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800865a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800865e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008660:	4b2a      	ldr	r3, [pc, #168]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008664:	0a5b      	lsrs	r3, r3, #9
 8008666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800866a:	ee07 3a90 	vmov	s15, r3
 800866e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008676:	ee37 7a87 	vadd.f32	s14, s15, s14
 800867a:	edd7 6a07 	vldr	s13, [r7, #28]
 800867e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008686:	ee17 2a90 	vmov	r2, s15
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800868e:	4b1f      	ldr	r3, [pc, #124]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	0c1b      	lsrs	r3, r3, #16
 8008694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008698:	ee07 3a90 	vmov	s15, r3
 800869c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80086ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086b4:	ee17 2a90 	vmov	r2, s15
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80086bc:	4b13      	ldr	r3, [pc, #76]	; (800870c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c0:	0e1b      	lsrs	r3, r3, #24
 80086c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c6:	ee07 3a90 	vmov	s15, r3
 80086ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80086da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086e2:	ee17 2a90 	vmov	r2, s15
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086ea:	e008      	b.n	80086fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2200      	movs	r2, #0
 80086fc:	609a      	str	r2, [r3, #8]
}
 80086fe:	bf00      	nop
 8008700:	3724      	adds	r7, #36	; 0x24
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr
 800870a:	bf00      	nop
 800870c:	58024400 	.word	0x58024400
 8008710:	03d09000 	.word	0x03d09000
 8008714:	46000000 	.word	0x46000000
 8008718:	4c742400 	.word	0x4c742400
 800871c:	4a742400 	.word	0x4a742400
 8008720:	4c371b00 	.word	0x4c371b00

08008724 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008732:	4b53      	ldr	r3, [pc, #332]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 8008734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	2b03      	cmp	r3, #3
 800873c:	d101      	bne.n	8008742 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800873e:	2301      	movs	r3, #1
 8008740:	e099      	b.n	8008876 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008742:	4b4f      	ldr	r3, [pc, #316]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	4a4e      	ldr	r2, [pc, #312]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 8008748:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800874c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800874e:	f7fa fba3 	bl	8002e98 <HAL_GetTick>
 8008752:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008754:	e008      	b.n	8008768 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008756:	f7fa fb9f 	bl	8002e98 <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	2b02      	cmp	r3, #2
 8008762:	d901      	bls.n	8008768 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008764:	2303      	movs	r3, #3
 8008766:	e086      	b.n	8008876 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008768:	4b45      	ldr	r3, [pc, #276]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1f0      	bne.n	8008756 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008774:	4b42      	ldr	r3, [pc, #264]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 8008776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008778:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	031b      	lsls	r3, r3, #12
 8008782:	493f      	ldr	r1, [pc, #252]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 8008784:	4313      	orrs	r3, r2
 8008786:	628b      	str	r3, [r1, #40]	; 0x28
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	3b01      	subs	r3, #1
 800878e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	3b01      	subs	r3, #1
 8008798:	025b      	lsls	r3, r3, #9
 800879a:	b29b      	uxth	r3, r3
 800879c:	431a      	orrs	r2, r3
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	3b01      	subs	r3, #1
 80087a4:	041b      	lsls	r3, r3, #16
 80087a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80087aa:	431a      	orrs	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	3b01      	subs	r3, #1
 80087b2:	061b      	lsls	r3, r3, #24
 80087b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80087b8:	4931      	ldr	r1, [pc, #196]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 80087ba:	4313      	orrs	r3, r2
 80087bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80087be:	4b30      	ldr	r3, [pc, #192]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 80087c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	695b      	ldr	r3, [r3, #20]
 80087ca:	492d      	ldr	r1, [pc, #180]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 80087cc:	4313      	orrs	r3, r2
 80087ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087d0:	4b2b      	ldr	r3, [pc, #172]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	f023 0220 	bic.w	r2, r3, #32
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	699b      	ldr	r3, [r3, #24]
 80087dc:	4928      	ldr	r1, [pc, #160]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087e2:	4b27      	ldr	r3, [pc, #156]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 80087e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e6:	4a26      	ldr	r2, [pc, #152]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 80087e8:	f023 0310 	bic.w	r3, r3, #16
 80087ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087ee:	4b24      	ldr	r3, [pc, #144]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 80087f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087f2:	4b24      	ldr	r3, [pc, #144]	; (8008884 <RCCEx_PLL2_Config+0x160>)
 80087f4:	4013      	ands	r3, r2
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	69d2      	ldr	r2, [r2, #28]
 80087fa:	00d2      	lsls	r2, r2, #3
 80087fc:	4920      	ldr	r1, [pc, #128]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008802:	4b1f      	ldr	r3, [pc, #124]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 8008804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008806:	4a1e      	ldr	r2, [pc, #120]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 8008808:	f043 0310 	orr.w	r3, r3, #16
 800880c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d106      	bne.n	8008822 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008814:	4b1a      	ldr	r3, [pc, #104]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 8008816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008818:	4a19      	ldr	r2, [pc, #100]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 800881a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800881e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008820:	e00f      	b.n	8008842 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d106      	bne.n	8008836 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008828:	4b15      	ldr	r3, [pc, #84]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	4a14      	ldr	r2, [pc, #80]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 800882e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008832:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008834:	e005      	b.n	8008842 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008836:	4b12      	ldr	r3, [pc, #72]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 8008838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883a:	4a11      	ldr	r2, [pc, #68]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 800883c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008840:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008842:	4b0f      	ldr	r3, [pc, #60]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a0e      	ldr	r2, [pc, #56]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 8008848:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800884c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800884e:	f7fa fb23 	bl	8002e98 <HAL_GetTick>
 8008852:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008854:	e008      	b.n	8008868 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008856:	f7fa fb1f 	bl	8002e98 <HAL_GetTick>
 800885a:	4602      	mov	r2, r0
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	2b02      	cmp	r3, #2
 8008862:	d901      	bls.n	8008868 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e006      	b.n	8008876 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008868:	4b05      	ldr	r3, [pc, #20]	; (8008880 <RCCEx_PLL2_Config+0x15c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d0f0      	beq.n	8008856 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008874:	7bfb      	ldrb	r3, [r7, #15]
}
 8008876:	4618      	mov	r0, r3
 8008878:	3710      	adds	r7, #16
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}
 800887e:	bf00      	nop
 8008880:	58024400 	.word	0x58024400
 8008884:	ffff0007 	.word	0xffff0007

08008888 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008896:	4b53      	ldr	r3, [pc, #332]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 8008898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889a:	f003 0303 	and.w	r3, r3, #3
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d101      	bne.n	80088a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e099      	b.n	80089da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80088a6:	4b4f      	ldr	r3, [pc, #316]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a4e      	ldr	r2, [pc, #312]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 80088ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088b2:	f7fa faf1 	bl	8002e98 <HAL_GetTick>
 80088b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088b8:	e008      	b.n	80088cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80088ba:	f7fa faed 	bl	8002e98 <HAL_GetTick>
 80088be:	4602      	mov	r2, r0
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	1ad3      	subs	r3, r2, r3
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d901      	bls.n	80088cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088c8:	2303      	movs	r3, #3
 80088ca:	e086      	b.n	80089da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088cc:	4b45      	ldr	r3, [pc, #276]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d1f0      	bne.n	80088ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088d8:	4b42      	ldr	r3, [pc, #264]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 80088da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	051b      	lsls	r3, r3, #20
 80088e6:	493f      	ldr	r1, [pc, #252]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 80088e8:	4313      	orrs	r3, r2
 80088ea:	628b      	str	r3, [r1, #40]	; 0x28
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	3b01      	subs	r3, #1
 80088f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	025b      	lsls	r3, r3, #9
 80088fe:	b29b      	uxth	r3, r3
 8008900:	431a      	orrs	r2, r3
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	3b01      	subs	r3, #1
 8008908:	041b      	lsls	r3, r3, #16
 800890a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800890e:	431a      	orrs	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	3b01      	subs	r3, #1
 8008916:	061b      	lsls	r3, r3, #24
 8008918:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800891c:	4931      	ldr	r1, [pc, #196]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 800891e:	4313      	orrs	r3, r2
 8008920:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008922:	4b30      	ldr	r3, [pc, #192]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 8008924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008926:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	695b      	ldr	r3, [r3, #20]
 800892e:	492d      	ldr	r1, [pc, #180]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 8008930:	4313      	orrs	r3, r2
 8008932:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008934:	4b2b      	ldr	r3, [pc, #172]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 8008936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008938:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	699b      	ldr	r3, [r3, #24]
 8008940:	4928      	ldr	r1, [pc, #160]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 8008942:	4313      	orrs	r3, r2
 8008944:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008946:	4b27      	ldr	r3, [pc, #156]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 8008948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894a:	4a26      	ldr	r2, [pc, #152]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 800894c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008950:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008952:	4b24      	ldr	r3, [pc, #144]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 8008954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008956:	4b24      	ldr	r3, [pc, #144]	; (80089e8 <RCCEx_PLL3_Config+0x160>)
 8008958:	4013      	ands	r3, r2
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	69d2      	ldr	r2, [r2, #28]
 800895e:	00d2      	lsls	r2, r2, #3
 8008960:	4920      	ldr	r1, [pc, #128]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 8008962:	4313      	orrs	r3, r2
 8008964:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008966:	4b1f      	ldr	r3, [pc, #124]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 8008968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896a:	4a1e      	ldr	r2, [pc, #120]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 800896c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008970:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d106      	bne.n	8008986 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008978:	4b1a      	ldr	r3, [pc, #104]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	4a19      	ldr	r2, [pc, #100]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 800897e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008982:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008984:	e00f      	b.n	80089a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b01      	cmp	r3, #1
 800898a:	d106      	bne.n	800899a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800898c:	4b15      	ldr	r3, [pc, #84]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 800898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008990:	4a14      	ldr	r2, [pc, #80]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 8008992:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008996:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008998:	e005      	b.n	80089a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800899a:	4b12      	ldr	r3, [pc, #72]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 800899c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899e:	4a11      	ldr	r2, [pc, #68]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 80089a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80089a6:	4b0f      	ldr	r3, [pc, #60]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a0e      	ldr	r2, [pc, #56]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 80089ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089b2:	f7fa fa71 	bl	8002e98 <HAL_GetTick>
 80089b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089b8:	e008      	b.n	80089cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80089ba:	f7fa fa6d 	bl	8002e98 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	2b02      	cmp	r3, #2
 80089c6:	d901      	bls.n	80089cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e006      	b.n	80089da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089cc:	4b05      	ldr	r3, [pc, #20]	; (80089e4 <RCCEx_PLL3_Config+0x15c>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0f0      	beq.n	80089ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	58024400 	.word	0x58024400
 80089e8:	ffff0007 	.word	0xffff0007

080089ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e0f1      	b.n	8008be2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a78      	ldr	r2, [pc, #480]	; (8008bec <HAL_SPI_Init+0x200>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d00f      	beq.n	8008a2e <HAL_SPI_Init+0x42>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a77      	ldr	r2, [pc, #476]	; (8008bf0 <HAL_SPI_Init+0x204>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d00a      	beq.n	8008a2e <HAL_SPI_Init+0x42>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a75      	ldr	r2, [pc, #468]	; (8008bf4 <HAL_SPI_Init+0x208>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d005      	beq.n	8008a2e <HAL_SPI_Init+0x42>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	2b0f      	cmp	r3, #15
 8008a28:	d901      	bls.n	8008a2e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e0d9      	b.n	8008be2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 f8e2 	bl	8008bf8 <SPI_GetPacketSize>
 8008a34:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a6c      	ldr	r2, [pc, #432]	; (8008bec <HAL_SPI_Init+0x200>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d00c      	beq.n	8008a5a <HAL_SPI_Init+0x6e>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a6a      	ldr	r2, [pc, #424]	; (8008bf0 <HAL_SPI_Init+0x204>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d007      	beq.n	8008a5a <HAL_SPI_Init+0x6e>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a69      	ldr	r2, [pc, #420]	; (8008bf4 <HAL_SPI_Init+0x208>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d002      	beq.n	8008a5a <HAL_SPI_Init+0x6e>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b08      	cmp	r3, #8
 8008a58:	d811      	bhi.n	8008a7e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a5e:	4a63      	ldr	r2, [pc, #396]	; (8008bec <HAL_SPI_Init+0x200>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d009      	beq.n	8008a78 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a61      	ldr	r2, [pc, #388]	; (8008bf0 <HAL_SPI_Init+0x204>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d004      	beq.n	8008a78 <HAL_SPI_Init+0x8c>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a60      	ldr	r2, [pc, #384]	; (8008bf4 <HAL_SPI_Init+0x208>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d104      	bne.n	8008a82 <HAL_SPI_Init+0x96>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b10      	cmp	r3, #16
 8008a7c:	d901      	bls.n	8008a82 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e0af      	b.n	8008be2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7f9 fb1c 	bl	80020d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f022 0201 	bic.w	r2, r2, #1
 8008ab2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689b      	ldr	r3, [r3, #8]
 8008aba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008abe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	699b      	ldr	r3, [r3, #24]
 8008ac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ac8:	d119      	bne.n	8008afe <HAL_SPI_Init+0x112>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ad2:	d103      	bne.n	8008adc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d008      	beq.n	8008aee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10c      	bne.n	8008afe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ae8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008aec:	d107      	bne.n	8008afe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008afc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	69da      	ldr	r2, [r3, #28]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b06:	431a      	orrs	r2, r3
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b10:	ea42 0103 	orr.w	r1, r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68da      	ldr	r2, [r3, #12]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2e:	431a      	orrs	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	699b      	ldr	r3, [r3, #24]
 8008b34:	431a      	orrs	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	431a      	orrs	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	695b      	ldr	r3, [r3, #20]
 8008b40:	431a      	orrs	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	431a      	orrs	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	431a      	orrs	r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b52:	431a      	orrs	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	431a      	orrs	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b5e:	ea42 0103 	orr.w	r1, r2, r3
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d113      	bne.n	8008b9e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b88:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b9c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f022 0201 	bic.w	r2, r2, #1
 8008bac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d00a      	beq.n	8008bd0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	40013000 	.word	0x40013000
 8008bf0:	40003800 	.word	0x40003800
 8008bf4:	40003c00 	.word	0x40003c00

08008bf8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c04:	095b      	lsrs	r3, r3, #5
 8008c06:	3301      	adds	r3, #1
 8008c08:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	3307      	adds	r3, #7
 8008c16:	08db      	lsrs	r3, r3, #3
 8008c18:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e049      	b.n	8008cd4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c46:	b2db      	uxtb	r3, r3
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d106      	bne.n	8008c5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7f9 faa3 	bl	80021a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	f000 fcf9 	bl	8009664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2201      	movs	r2, #1
 8008c76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2201      	movs	r2, #1
 8008c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2201      	movs	r2, #1
 8008c86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2201      	movs	r2, #1
 8008cae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3708      	adds	r7, #8
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b082      	sub	sp, #8
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d101      	bne.n	8008cee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e049      	b.n	8008d82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d106      	bne.n	8008d08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 f841 	bl	8008d8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2202      	movs	r2, #2
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	3304      	adds	r3, #4
 8008d18:	4619      	mov	r1, r3
 8008d1a:	4610      	mov	r0, r2
 8008d1c:	f000 fca2 	bl	8009664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d80:	2300      	movs	r3, #0
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3708      	adds	r7, #8
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b083      	sub	sp, #12
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d92:	bf00      	nop
 8008d94:	370c      	adds	r7, #12
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
	...

08008da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d109      	bne.n	8008dc4 <HAL_TIM_PWM_Start+0x24>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008db6:	b2db      	uxtb	r3, r3
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	bf14      	ite	ne
 8008dbc:	2301      	movne	r3, #1
 8008dbe:	2300      	moveq	r3, #0
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	e03c      	b.n	8008e3e <HAL_TIM_PWM_Start+0x9e>
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d109      	bne.n	8008dde <HAL_TIM_PWM_Start+0x3e>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	bf14      	ite	ne
 8008dd6:	2301      	movne	r3, #1
 8008dd8:	2300      	moveq	r3, #0
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	e02f      	b.n	8008e3e <HAL_TIM_PWM_Start+0x9e>
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	d109      	bne.n	8008df8 <HAL_TIM_PWM_Start+0x58>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	bf14      	ite	ne
 8008df0:	2301      	movne	r3, #1
 8008df2:	2300      	moveq	r3, #0
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	e022      	b.n	8008e3e <HAL_TIM_PWM_Start+0x9e>
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	2b0c      	cmp	r3, #12
 8008dfc:	d109      	bne.n	8008e12 <HAL_TIM_PWM_Start+0x72>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	bf14      	ite	ne
 8008e0a:	2301      	movne	r3, #1
 8008e0c:	2300      	moveq	r3, #0
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	e015      	b.n	8008e3e <HAL_TIM_PWM_Start+0x9e>
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	2b10      	cmp	r3, #16
 8008e16:	d109      	bne.n	8008e2c <HAL_TIM_PWM_Start+0x8c>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e1e:	b2db      	uxtb	r3, r3
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	bf14      	ite	ne
 8008e24:	2301      	movne	r3, #1
 8008e26:	2300      	moveq	r3, #0
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	e008      	b.n	8008e3e <HAL_TIM_PWM_Start+0x9e>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	bf14      	ite	ne
 8008e38:	2301      	movne	r3, #1
 8008e3a:	2300      	moveq	r3, #0
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d001      	beq.n	8008e46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	e0a1      	b.n	8008f8a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d104      	bne.n	8008e56 <HAL_TIM_PWM_Start+0xb6>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e54:	e023      	b.n	8008e9e <HAL_TIM_PWM_Start+0xfe>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b04      	cmp	r3, #4
 8008e5a:	d104      	bne.n	8008e66 <HAL_TIM_PWM_Start+0xc6>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2202      	movs	r2, #2
 8008e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e64:	e01b      	b.n	8008e9e <HAL_TIM_PWM_Start+0xfe>
 8008e66:	683b      	ldr	r3, [r7, #0]
 8008e68:	2b08      	cmp	r3, #8
 8008e6a:	d104      	bne.n	8008e76 <HAL_TIM_PWM_Start+0xd6>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e74:	e013      	b.n	8008e9e <HAL_TIM_PWM_Start+0xfe>
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2b0c      	cmp	r3, #12
 8008e7a:	d104      	bne.n	8008e86 <HAL_TIM_PWM_Start+0xe6>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e84:	e00b      	b.n	8008e9e <HAL_TIM_PWM_Start+0xfe>
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	2b10      	cmp	r3, #16
 8008e8a:	d104      	bne.n	8008e96 <HAL_TIM_PWM_Start+0xf6>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2202      	movs	r2, #2
 8008e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e94:	e003      	b.n	8008e9e <HAL_TIM_PWM_Start+0xfe>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2202      	movs	r2, #2
 8008e9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	6839      	ldr	r1, [r7, #0]
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f000 ffea 	bl	8009e80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a38      	ldr	r2, [pc, #224]	; (8008f94 <HAL_TIM_PWM_Start+0x1f4>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d013      	beq.n	8008ede <HAL_TIM_PWM_Start+0x13e>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a37      	ldr	r2, [pc, #220]	; (8008f98 <HAL_TIM_PWM_Start+0x1f8>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d00e      	beq.n	8008ede <HAL_TIM_PWM_Start+0x13e>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a35      	ldr	r2, [pc, #212]	; (8008f9c <HAL_TIM_PWM_Start+0x1fc>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d009      	beq.n	8008ede <HAL_TIM_PWM_Start+0x13e>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a34      	ldr	r2, [pc, #208]	; (8008fa0 <HAL_TIM_PWM_Start+0x200>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d004      	beq.n	8008ede <HAL_TIM_PWM_Start+0x13e>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a32      	ldr	r2, [pc, #200]	; (8008fa4 <HAL_TIM_PWM_Start+0x204>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d101      	bne.n	8008ee2 <HAL_TIM_PWM_Start+0x142>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e000      	b.n	8008ee4 <HAL_TIM_PWM_Start+0x144>
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d007      	beq.n	8008ef8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ef6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a25      	ldr	r2, [pc, #148]	; (8008f94 <HAL_TIM_PWM_Start+0x1f4>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d022      	beq.n	8008f48 <HAL_TIM_PWM_Start+0x1a8>
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f0a:	d01d      	beq.n	8008f48 <HAL_TIM_PWM_Start+0x1a8>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a25      	ldr	r2, [pc, #148]	; (8008fa8 <HAL_TIM_PWM_Start+0x208>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d018      	beq.n	8008f48 <HAL_TIM_PWM_Start+0x1a8>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a24      	ldr	r2, [pc, #144]	; (8008fac <HAL_TIM_PWM_Start+0x20c>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d013      	beq.n	8008f48 <HAL_TIM_PWM_Start+0x1a8>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a22      	ldr	r2, [pc, #136]	; (8008fb0 <HAL_TIM_PWM_Start+0x210>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00e      	beq.n	8008f48 <HAL_TIM_PWM_Start+0x1a8>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a1a      	ldr	r2, [pc, #104]	; (8008f98 <HAL_TIM_PWM_Start+0x1f8>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d009      	beq.n	8008f48 <HAL_TIM_PWM_Start+0x1a8>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a1e      	ldr	r2, [pc, #120]	; (8008fb4 <HAL_TIM_PWM_Start+0x214>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d004      	beq.n	8008f48 <HAL_TIM_PWM_Start+0x1a8>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a16      	ldr	r2, [pc, #88]	; (8008f9c <HAL_TIM_PWM_Start+0x1fc>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d115      	bne.n	8008f74 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	4b1a      	ldr	r3, [pc, #104]	; (8008fb8 <HAL_TIM_PWM_Start+0x218>)
 8008f50:	4013      	ands	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b06      	cmp	r3, #6
 8008f58:	d015      	beq.n	8008f86 <HAL_TIM_PWM_Start+0x1e6>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f60:	d011      	beq.n	8008f86 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f042 0201 	orr.w	r2, r2, #1
 8008f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f72:	e008      	b.n	8008f86 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f042 0201 	orr.w	r2, r2, #1
 8008f82:	601a      	str	r2, [r3, #0]
 8008f84:	e000      	b.n	8008f88 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	40010000 	.word	0x40010000
 8008f98:	40010400 	.word	0x40010400
 8008f9c:	40014000 	.word	0x40014000
 8008fa0:	40014400 	.word	0x40014400
 8008fa4:	40014800 	.word	0x40014800
 8008fa8:	40000400 	.word	0x40000400
 8008fac:	40000800 	.word	0x40000800
 8008fb0:	40000c00 	.word	0x40000c00
 8008fb4:	40001800 	.word	0x40001800
 8008fb8:	00010007 	.word	0x00010007

08008fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	691b      	ldr	r3, [r3, #16]
 8008fca:	f003 0302 	and.w	r3, r3, #2
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d122      	bne.n	8009018 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f003 0302 	and.w	r3, r3, #2
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d11b      	bne.n	8009018 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f06f 0202 	mvn.w	r2, #2
 8008fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2201      	movs	r2, #1
 8008fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	f003 0303 	and.w	r3, r3, #3
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d003      	beq.n	8009006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fb12 	bl	8009628 <HAL_TIM_IC_CaptureCallback>
 8009004:	e005      	b.n	8009012 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f000 fb04 	bl	8009614 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f000 fb15 	bl	800963c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	691b      	ldr	r3, [r3, #16]
 800901e:	f003 0304 	and.w	r3, r3, #4
 8009022:	2b04      	cmp	r3, #4
 8009024:	d122      	bne.n	800906c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b04      	cmp	r3, #4
 8009032:	d11b      	bne.n	800906c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f06f 0204 	mvn.w	r2, #4
 800903c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2202      	movs	r2, #2
 8009042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	699b      	ldr	r3, [r3, #24]
 800904a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800904e:	2b00      	cmp	r3, #0
 8009050:	d003      	beq.n	800905a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f000 fae8 	bl	8009628 <HAL_TIM_IC_CaptureCallback>
 8009058:	e005      	b.n	8009066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fada 	bl	8009614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 faeb 	bl	800963c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	f003 0308 	and.w	r3, r3, #8
 8009076:	2b08      	cmp	r3, #8
 8009078:	d122      	bne.n	80090c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	f003 0308 	and.w	r3, r3, #8
 8009084:	2b08      	cmp	r3, #8
 8009086:	d11b      	bne.n	80090c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f06f 0208 	mvn.w	r2, #8
 8009090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2204      	movs	r2, #4
 8009096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	f003 0303 	and.w	r3, r3, #3
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fabe 	bl	8009628 <HAL_TIM_IC_CaptureCallback>
 80090ac:	e005      	b.n	80090ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fab0 	bl	8009614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fac1 	bl	800963c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	691b      	ldr	r3, [r3, #16]
 80090c6:	f003 0310 	and.w	r3, r3, #16
 80090ca:	2b10      	cmp	r3, #16
 80090cc:	d122      	bne.n	8009114 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68db      	ldr	r3, [r3, #12]
 80090d4:	f003 0310 	and.w	r3, r3, #16
 80090d8:	2b10      	cmp	r3, #16
 80090da:	d11b      	bne.n	8009114 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f06f 0210 	mvn.w	r2, #16
 80090e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2208      	movs	r2, #8
 80090ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d003      	beq.n	8009102 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fa94 	bl	8009628 <HAL_TIM_IC_CaptureCallback>
 8009100:	e005      	b.n	800910e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa86 	bl	8009614 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fa97 	bl	800963c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2200      	movs	r2, #0
 8009112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b01      	cmp	r3, #1
 8009120:	d10e      	bne.n	8009140 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f003 0301 	and.w	r3, r3, #1
 800912c:	2b01      	cmp	r3, #1
 800912e:	d107      	bne.n	8009140 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f06f 0201 	mvn.w	r2, #1
 8009138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f7f8 ff07 	bl	8001f4e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800914a:	2b80      	cmp	r3, #128	; 0x80
 800914c:	d10e      	bne.n	800916c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009158:	2b80      	cmp	r3, #128	; 0x80
 800915a:	d107      	bne.n	800916c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 ffc6 	bl	800a0f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800917a:	d10e      	bne.n	800919a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68db      	ldr	r3, [r3, #12]
 8009182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009186:	2b80      	cmp	r3, #128	; 0x80
 8009188:	d107      	bne.n	800919a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 ffb9 	bl	800a10c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a4:	2b40      	cmp	r3, #64	; 0x40
 80091a6:	d10e      	bne.n	80091c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091b2:	2b40      	cmp	r3, #64	; 0x40
 80091b4:	d107      	bne.n	80091c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fa45 	bl	8009650 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	691b      	ldr	r3, [r3, #16]
 80091cc:	f003 0320 	and.w	r3, r3, #32
 80091d0:	2b20      	cmp	r3, #32
 80091d2:	d10e      	bne.n	80091f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	f003 0320 	and.w	r3, r3, #32
 80091de:	2b20      	cmp	r3, #32
 80091e0:	d107      	bne.n	80091f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f06f 0220 	mvn.w	r2, #32
 80091ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 ff79 	bl	800a0e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091f2:	bf00      	nop
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009208:	2300      	movs	r3, #0
 800920a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009212:	2b01      	cmp	r3, #1
 8009214:	d101      	bne.n	800921a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009216:	2302      	movs	r3, #2
 8009218:	e0ff      	b.n	800941a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b14      	cmp	r3, #20
 8009226:	f200 80f0 	bhi.w	800940a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800922a:	a201      	add	r2, pc, #4	; (adr r2, 8009230 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800922c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009230:	08009285 	.word	0x08009285
 8009234:	0800940b 	.word	0x0800940b
 8009238:	0800940b 	.word	0x0800940b
 800923c:	0800940b 	.word	0x0800940b
 8009240:	080092c5 	.word	0x080092c5
 8009244:	0800940b 	.word	0x0800940b
 8009248:	0800940b 	.word	0x0800940b
 800924c:	0800940b 	.word	0x0800940b
 8009250:	08009307 	.word	0x08009307
 8009254:	0800940b 	.word	0x0800940b
 8009258:	0800940b 	.word	0x0800940b
 800925c:	0800940b 	.word	0x0800940b
 8009260:	08009347 	.word	0x08009347
 8009264:	0800940b 	.word	0x0800940b
 8009268:	0800940b 	.word	0x0800940b
 800926c:	0800940b 	.word	0x0800940b
 8009270:	08009389 	.word	0x08009389
 8009274:	0800940b 	.word	0x0800940b
 8009278:	0800940b 	.word	0x0800940b
 800927c:	0800940b 	.word	0x0800940b
 8009280:	080093c9 	.word	0x080093c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68b9      	ldr	r1, [r7, #8]
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fa84 	bl	8009798 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	699a      	ldr	r2, [r3, #24]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f042 0208 	orr.w	r2, r2, #8
 800929e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	699a      	ldr	r2, [r3, #24]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f022 0204 	bic.w	r2, r2, #4
 80092ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6999      	ldr	r1, [r3, #24]
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	691a      	ldr	r2, [r3, #16]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	430a      	orrs	r2, r1
 80092c0:	619a      	str	r2, [r3, #24]
      break;
 80092c2:	e0a5      	b.n	8009410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68b9      	ldr	r1, [r7, #8]
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 faf4 	bl	80098b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	699a      	ldr	r2, [r3, #24]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	699a      	ldr	r2, [r3, #24]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6999      	ldr	r1, [r3, #24]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	021a      	lsls	r2, r3, #8
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	430a      	orrs	r2, r1
 8009302:	619a      	str	r2, [r3, #24]
      break;
 8009304:	e084      	b.n	8009410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	68b9      	ldr	r1, [r7, #8]
 800930c:	4618      	mov	r0, r3
 800930e:	f000 fb5d 	bl	80099cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	69da      	ldr	r2, [r3, #28]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f042 0208 	orr.w	r2, r2, #8
 8009320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	69da      	ldr	r2, [r3, #28]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f022 0204 	bic.w	r2, r2, #4
 8009330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	69d9      	ldr	r1, [r3, #28]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	691a      	ldr	r2, [r3, #16]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	430a      	orrs	r2, r1
 8009342:	61da      	str	r2, [r3, #28]
      break;
 8009344:	e064      	b.n	8009410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68b9      	ldr	r1, [r7, #8]
 800934c:	4618      	mov	r0, r3
 800934e:	f000 fbc5 	bl	8009adc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	69da      	ldr	r2, [r3, #28]
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	69da      	ldr	r2, [r3, #28]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	69d9      	ldr	r1, [r3, #28]
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	021a      	lsls	r2, r3, #8
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	430a      	orrs	r2, r1
 8009384:	61da      	str	r2, [r3, #28]
      break;
 8009386:	e043      	b.n	8009410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68b9      	ldr	r1, [r7, #8]
 800938e:	4618      	mov	r0, r3
 8009390:	f000 fc0e 	bl	8009bb0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f042 0208 	orr.w	r2, r2, #8
 80093a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f022 0204 	bic.w	r2, r2, #4
 80093b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093ba:	68bb      	ldr	r3, [r7, #8]
 80093bc:	691a      	ldr	r2, [r3, #16]
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	430a      	orrs	r2, r1
 80093c4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093c6:	e023      	b.n	8009410 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68b9      	ldr	r1, [r7, #8]
 80093ce:	4618      	mov	r0, r3
 80093d0:	f000 fc52 	bl	8009c78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	021a      	lsls	r2, r3, #8
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	430a      	orrs	r2, r1
 8009406:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009408:	e002      	b.n	8009410 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	75fb      	strb	r3, [r7, #23]
      break;
 800940e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3718      	adds	r7, #24
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop

08009424 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009438:	2b01      	cmp	r3, #1
 800943a:	d101      	bne.n	8009440 <HAL_TIM_ConfigClockSource+0x1c>
 800943c:	2302      	movs	r3, #2
 800943e:	e0dc      	b.n	80095fa <HAL_TIM_ConfigClockSource+0x1d6>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2202      	movs	r2, #2
 800944c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009458:	68ba      	ldr	r2, [r7, #8]
 800945a:	4b6a      	ldr	r3, [pc, #424]	; (8009604 <HAL_TIM_ConfigClockSource+0x1e0>)
 800945c:	4013      	ands	r3, r2
 800945e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009466:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a64      	ldr	r2, [pc, #400]	; (8009608 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009476:	4293      	cmp	r3, r2
 8009478:	f000 80a9 	beq.w	80095ce <HAL_TIM_ConfigClockSource+0x1aa>
 800947c:	4a62      	ldr	r2, [pc, #392]	; (8009608 <HAL_TIM_ConfigClockSource+0x1e4>)
 800947e:	4293      	cmp	r3, r2
 8009480:	f200 80ae 	bhi.w	80095e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009484:	4a61      	ldr	r2, [pc, #388]	; (800960c <HAL_TIM_ConfigClockSource+0x1e8>)
 8009486:	4293      	cmp	r3, r2
 8009488:	f000 80a1 	beq.w	80095ce <HAL_TIM_ConfigClockSource+0x1aa>
 800948c:	4a5f      	ldr	r2, [pc, #380]	; (800960c <HAL_TIM_ConfigClockSource+0x1e8>)
 800948e:	4293      	cmp	r3, r2
 8009490:	f200 80a6 	bhi.w	80095e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009494:	4a5e      	ldr	r2, [pc, #376]	; (8009610 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009496:	4293      	cmp	r3, r2
 8009498:	f000 8099 	beq.w	80095ce <HAL_TIM_ConfigClockSource+0x1aa>
 800949c:	4a5c      	ldr	r2, [pc, #368]	; (8009610 <HAL_TIM_ConfigClockSource+0x1ec>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	f200 809e 	bhi.w	80095e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80094a8:	f000 8091 	beq.w	80095ce <HAL_TIM_ConfigClockSource+0x1aa>
 80094ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80094b0:	f200 8096 	bhi.w	80095e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094b8:	f000 8089 	beq.w	80095ce <HAL_TIM_ConfigClockSource+0x1aa>
 80094bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094c0:	f200 808e 	bhi.w	80095e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094c8:	d03e      	beq.n	8009548 <HAL_TIM_ConfigClockSource+0x124>
 80094ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094ce:	f200 8087 	bhi.w	80095e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094d6:	f000 8086 	beq.w	80095e6 <HAL_TIM_ConfigClockSource+0x1c2>
 80094da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094de:	d87f      	bhi.n	80095e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094e0:	2b70      	cmp	r3, #112	; 0x70
 80094e2:	d01a      	beq.n	800951a <HAL_TIM_ConfigClockSource+0xf6>
 80094e4:	2b70      	cmp	r3, #112	; 0x70
 80094e6:	d87b      	bhi.n	80095e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094e8:	2b60      	cmp	r3, #96	; 0x60
 80094ea:	d050      	beq.n	800958e <HAL_TIM_ConfigClockSource+0x16a>
 80094ec:	2b60      	cmp	r3, #96	; 0x60
 80094ee:	d877      	bhi.n	80095e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094f0:	2b50      	cmp	r3, #80	; 0x50
 80094f2:	d03c      	beq.n	800956e <HAL_TIM_ConfigClockSource+0x14a>
 80094f4:	2b50      	cmp	r3, #80	; 0x50
 80094f6:	d873      	bhi.n	80095e0 <HAL_TIM_ConfigClockSource+0x1bc>
 80094f8:	2b40      	cmp	r3, #64	; 0x40
 80094fa:	d058      	beq.n	80095ae <HAL_TIM_ConfigClockSource+0x18a>
 80094fc:	2b40      	cmp	r3, #64	; 0x40
 80094fe:	d86f      	bhi.n	80095e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009500:	2b30      	cmp	r3, #48	; 0x30
 8009502:	d064      	beq.n	80095ce <HAL_TIM_ConfigClockSource+0x1aa>
 8009504:	2b30      	cmp	r3, #48	; 0x30
 8009506:	d86b      	bhi.n	80095e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009508:	2b20      	cmp	r3, #32
 800950a:	d060      	beq.n	80095ce <HAL_TIM_ConfigClockSource+0x1aa>
 800950c:	2b20      	cmp	r3, #32
 800950e:	d867      	bhi.n	80095e0 <HAL_TIM_ConfigClockSource+0x1bc>
 8009510:	2b00      	cmp	r3, #0
 8009512:	d05c      	beq.n	80095ce <HAL_TIM_ConfigClockSource+0x1aa>
 8009514:	2b10      	cmp	r3, #16
 8009516:	d05a      	beq.n	80095ce <HAL_TIM_ConfigClockSource+0x1aa>
 8009518:	e062      	b.n	80095e0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6818      	ldr	r0, [r3, #0]
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	6899      	ldr	r1, [r3, #8]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	685a      	ldr	r2, [r3, #4]
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	f000 fc89 	bl	8009e40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800953c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	609a      	str	r2, [r3, #8]
      break;
 8009546:	e04f      	b.n	80095e8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6818      	ldr	r0, [r3, #0]
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	6899      	ldr	r1, [r3, #8]
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	685a      	ldr	r2, [r3, #4]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	f000 fc72 	bl	8009e40 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	689a      	ldr	r2, [r3, #8]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800956a:	609a      	str	r2, [r3, #8]
      break;
 800956c:	e03c      	b.n	80095e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6818      	ldr	r0, [r3, #0]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	6859      	ldr	r1, [r3, #4]
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	68db      	ldr	r3, [r3, #12]
 800957a:	461a      	mov	r2, r3
 800957c:	f000 fbe2 	bl	8009d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2150      	movs	r1, #80	; 0x50
 8009586:	4618      	mov	r0, r3
 8009588:	f000 fc3c 	bl	8009e04 <TIM_ITRx_SetConfig>
      break;
 800958c:	e02c      	b.n	80095e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6818      	ldr	r0, [r3, #0]
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	6859      	ldr	r1, [r3, #4]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	461a      	mov	r2, r3
 800959c:	f000 fc01 	bl	8009da2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2160      	movs	r1, #96	; 0x60
 80095a6:	4618      	mov	r0, r3
 80095a8:	f000 fc2c 	bl	8009e04 <TIM_ITRx_SetConfig>
      break;
 80095ac:	e01c      	b.n	80095e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6818      	ldr	r0, [r3, #0]
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	6859      	ldr	r1, [r3, #4]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	461a      	mov	r2, r3
 80095bc:	f000 fbc2 	bl	8009d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2140      	movs	r1, #64	; 0x40
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 fc1c 	bl	8009e04 <TIM_ITRx_SetConfig>
      break;
 80095cc:	e00c      	b.n	80095e8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4619      	mov	r1, r3
 80095d8:	4610      	mov	r0, r2
 80095da:	f000 fc13 	bl	8009e04 <TIM_ITRx_SetConfig>
      break;
 80095de:	e003      	b.n	80095e8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	73fb      	strb	r3, [r7, #15]
      break;
 80095e4:	e000      	b.n	80095e8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80095e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80095f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
 8009602:	bf00      	nop
 8009604:	ffceff88 	.word	0xffceff88
 8009608:	00100040 	.word	0x00100040
 800960c:	00100030 	.word	0x00100030
 8009610:	00100020 	.word	0x00100020

08009614 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800963c:	b480      	push	{r7}
 800963e:	b083      	sub	sp, #12
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009644:	bf00      	nop
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009658:	bf00      	nop
 800965a:	370c      	adds	r7, #12
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009664:	b480      	push	{r7}
 8009666:	b085      	sub	sp, #20
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a40      	ldr	r2, [pc, #256]	; (8009778 <TIM_Base_SetConfig+0x114>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d013      	beq.n	80096a4 <TIM_Base_SetConfig+0x40>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009682:	d00f      	beq.n	80096a4 <TIM_Base_SetConfig+0x40>
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a3d      	ldr	r2, [pc, #244]	; (800977c <TIM_Base_SetConfig+0x118>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d00b      	beq.n	80096a4 <TIM_Base_SetConfig+0x40>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a3c      	ldr	r2, [pc, #240]	; (8009780 <TIM_Base_SetConfig+0x11c>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d007      	beq.n	80096a4 <TIM_Base_SetConfig+0x40>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	4a3b      	ldr	r2, [pc, #236]	; (8009784 <TIM_Base_SetConfig+0x120>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d003      	beq.n	80096a4 <TIM_Base_SetConfig+0x40>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4a3a      	ldr	r2, [pc, #232]	; (8009788 <TIM_Base_SetConfig+0x124>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d108      	bne.n	80096b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	4313      	orrs	r3, r2
 80096b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a2f      	ldr	r2, [pc, #188]	; (8009778 <TIM_Base_SetConfig+0x114>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d01f      	beq.n	80096fe <TIM_Base_SetConfig+0x9a>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096c4:	d01b      	beq.n	80096fe <TIM_Base_SetConfig+0x9a>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a2c      	ldr	r2, [pc, #176]	; (800977c <TIM_Base_SetConfig+0x118>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d017      	beq.n	80096fe <TIM_Base_SetConfig+0x9a>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a2b      	ldr	r2, [pc, #172]	; (8009780 <TIM_Base_SetConfig+0x11c>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d013      	beq.n	80096fe <TIM_Base_SetConfig+0x9a>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	4a2a      	ldr	r2, [pc, #168]	; (8009784 <TIM_Base_SetConfig+0x120>)
 80096da:	4293      	cmp	r3, r2
 80096dc:	d00f      	beq.n	80096fe <TIM_Base_SetConfig+0x9a>
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	4a29      	ldr	r2, [pc, #164]	; (8009788 <TIM_Base_SetConfig+0x124>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d00b      	beq.n	80096fe <TIM_Base_SetConfig+0x9a>
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4a28      	ldr	r2, [pc, #160]	; (800978c <TIM_Base_SetConfig+0x128>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d007      	beq.n	80096fe <TIM_Base_SetConfig+0x9a>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	4a27      	ldr	r2, [pc, #156]	; (8009790 <TIM_Base_SetConfig+0x12c>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d003      	beq.n	80096fe <TIM_Base_SetConfig+0x9a>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	4a26      	ldr	r2, [pc, #152]	; (8009794 <TIM_Base_SetConfig+0x130>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d108      	bne.n	8009710 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	4313      	orrs	r3, r2
 800970e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	695b      	ldr	r3, [r3, #20]
 800971a:	4313      	orrs	r3, r2
 800971c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	689a      	ldr	r2, [r3, #8]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4a10      	ldr	r2, [pc, #64]	; (8009778 <TIM_Base_SetConfig+0x114>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d00f      	beq.n	800975c <TIM_Base_SetConfig+0xf8>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a12      	ldr	r2, [pc, #72]	; (8009788 <TIM_Base_SetConfig+0x124>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d00b      	beq.n	800975c <TIM_Base_SetConfig+0xf8>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a11      	ldr	r2, [pc, #68]	; (800978c <TIM_Base_SetConfig+0x128>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d007      	beq.n	800975c <TIM_Base_SetConfig+0xf8>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	4a10      	ldr	r2, [pc, #64]	; (8009790 <TIM_Base_SetConfig+0x12c>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d003      	beq.n	800975c <TIM_Base_SetConfig+0xf8>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4a0f      	ldr	r2, [pc, #60]	; (8009794 <TIM_Base_SetConfig+0x130>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d103      	bne.n	8009764 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	691a      	ldr	r2, [r3, #16]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	615a      	str	r2, [r3, #20]
}
 800976a:	bf00      	nop
 800976c:	3714      	adds	r7, #20
 800976e:	46bd      	mov	sp, r7
 8009770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009774:	4770      	bx	lr
 8009776:	bf00      	nop
 8009778:	40010000 	.word	0x40010000
 800977c:	40000400 	.word	0x40000400
 8009780:	40000800 	.word	0x40000800
 8009784:	40000c00 	.word	0x40000c00
 8009788:	40010400 	.word	0x40010400
 800978c:	40014000 	.word	0x40014000
 8009790:	40014400 	.word	0x40014400
 8009794:	40014800 	.word	0x40014800

08009798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009798:	b480      	push	{r7}
 800979a:	b087      	sub	sp, #28
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a1b      	ldr	r3, [r3, #32]
 80097a6:	f023 0201 	bic.w	r2, r3, #1
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a1b      	ldr	r3, [r3, #32]
 80097b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	4b37      	ldr	r3, [pc, #220]	; (80098a0 <TIM_OC1_SetConfig+0x108>)
 80097c4:	4013      	ands	r3, r2
 80097c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f023 0303 	bic.w	r3, r3, #3
 80097ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68fa      	ldr	r2, [r7, #12]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f023 0302 	bic.w	r3, r3, #2
 80097e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	689b      	ldr	r3, [r3, #8]
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4a2d      	ldr	r2, [pc, #180]	; (80098a4 <TIM_OC1_SetConfig+0x10c>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d00f      	beq.n	8009814 <TIM_OC1_SetConfig+0x7c>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4a2c      	ldr	r2, [pc, #176]	; (80098a8 <TIM_OC1_SetConfig+0x110>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d00b      	beq.n	8009814 <TIM_OC1_SetConfig+0x7c>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	4a2b      	ldr	r2, [pc, #172]	; (80098ac <TIM_OC1_SetConfig+0x114>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d007      	beq.n	8009814 <TIM_OC1_SetConfig+0x7c>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4a2a      	ldr	r2, [pc, #168]	; (80098b0 <TIM_OC1_SetConfig+0x118>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d003      	beq.n	8009814 <TIM_OC1_SetConfig+0x7c>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	4a29      	ldr	r2, [pc, #164]	; (80098b4 <TIM_OC1_SetConfig+0x11c>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d10c      	bne.n	800982e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	f023 0308 	bic.w	r3, r3, #8
 800981a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	4313      	orrs	r3, r2
 8009824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009826:	697b      	ldr	r3, [r7, #20]
 8009828:	f023 0304 	bic.w	r3, r3, #4
 800982c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a1c      	ldr	r2, [pc, #112]	; (80098a4 <TIM_OC1_SetConfig+0x10c>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d00f      	beq.n	8009856 <TIM_OC1_SetConfig+0xbe>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a1b      	ldr	r2, [pc, #108]	; (80098a8 <TIM_OC1_SetConfig+0x110>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d00b      	beq.n	8009856 <TIM_OC1_SetConfig+0xbe>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a1a      	ldr	r2, [pc, #104]	; (80098ac <TIM_OC1_SetConfig+0x114>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d007      	beq.n	8009856 <TIM_OC1_SetConfig+0xbe>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a19      	ldr	r2, [pc, #100]	; (80098b0 <TIM_OC1_SetConfig+0x118>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d003      	beq.n	8009856 <TIM_OC1_SetConfig+0xbe>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a18      	ldr	r2, [pc, #96]	; (80098b4 <TIM_OC1_SetConfig+0x11c>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d111      	bne.n	800987a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800985c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	695b      	ldr	r3, [r3, #20]
 800986a:	693a      	ldr	r2, [r7, #16]
 800986c:	4313      	orrs	r3, r2
 800986e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	699b      	ldr	r3, [r3, #24]
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	4313      	orrs	r3, r2
 8009878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	693a      	ldr	r2, [r7, #16]
 800987e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68fa      	ldr	r2, [r7, #12]
 8009884:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	685a      	ldr	r2, [r3, #4]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	621a      	str	r2, [r3, #32]
}
 8009894:	bf00      	nop
 8009896:	371c      	adds	r7, #28
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	fffeff8f 	.word	0xfffeff8f
 80098a4:	40010000 	.word	0x40010000
 80098a8:	40010400 	.word	0x40010400
 80098ac:	40014000 	.word	0x40014000
 80098b0:	40014400 	.word	0x40014400
 80098b4:	40014800 	.word	0x40014800

080098b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b087      	sub	sp, #28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6a1b      	ldr	r3, [r3, #32]
 80098c6:	f023 0210 	bic.w	r2, r3, #16
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	685b      	ldr	r3, [r3, #4]
 80098d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	699b      	ldr	r3, [r3, #24]
 80098de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	4b34      	ldr	r3, [pc, #208]	; (80099b4 <TIM_OC2_SetConfig+0xfc>)
 80098e4:	4013      	ands	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	021b      	lsls	r3, r3, #8
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	f023 0320 	bic.w	r3, r3, #32
 8009902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	011b      	lsls	r3, r3, #4
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	4313      	orrs	r3, r2
 800990e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a29      	ldr	r2, [pc, #164]	; (80099b8 <TIM_OC2_SetConfig+0x100>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d003      	beq.n	8009920 <TIM_OC2_SetConfig+0x68>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a28      	ldr	r2, [pc, #160]	; (80099bc <TIM_OC2_SetConfig+0x104>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d10d      	bne.n	800993c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	011b      	lsls	r3, r3, #4
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	4313      	orrs	r3, r2
 8009932:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800993a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a1e      	ldr	r2, [pc, #120]	; (80099b8 <TIM_OC2_SetConfig+0x100>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d00f      	beq.n	8009964 <TIM_OC2_SetConfig+0xac>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	4a1d      	ldr	r2, [pc, #116]	; (80099bc <TIM_OC2_SetConfig+0x104>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d00b      	beq.n	8009964 <TIM_OC2_SetConfig+0xac>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a1c      	ldr	r2, [pc, #112]	; (80099c0 <TIM_OC2_SetConfig+0x108>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d007      	beq.n	8009964 <TIM_OC2_SetConfig+0xac>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	4a1b      	ldr	r2, [pc, #108]	; (80099c4 <TIM_OC2_SetConfig+0x10c>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d003      	beq.n	8009964 <TIM_OC2_SetConfig+0xac>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	4a1a      	ldr	r2, [pc, #104]	; (80099c8 <TIM_OC2_SetConfig+0x110>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d113      	bne.n	800998c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800996a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009972:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	695b      	ldr	r3, [r3, #20]
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	693a      	ldr	r2, [r7, #16]
 800997c:	4313      	orrs	r3, r2
 800997e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	699b      	ldr	r3, [r3, #24]
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	693a      	ldr	r2, [r7, #16]
 8009988:	4313      	orrs	r3, r2
 800998a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	697a      	ldr	r2, [r7, #20]
 80099a4:	621a      	str	r2, [r3, #32]
}
 80099a6:	bf00      	nop
 80099a8:	371c      	adds	r7, #28
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr
 80099b2:	bf00      	nop
 80099b4:	feff8fff 	.word	0xfeff8fff
 80099b8:	40010000 	.word	0x40010000
 80099bc:	40010400 	.word	0x40010400
 80099c0:	40014000 	.word	0x40014000
 80099c4:	40014400 	.word	0x40014400
 80099c8:	40014800 	.word	0x40014800

080099cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b087      	sub	sp, #28
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	69db      	ldr	r3, [r3, #28]
 80099f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	4b33      	ldr	r3, [pc, #204]	; (8009ac4 <TIM_OC3_SetConfig+0xf8>)
 80099f8:	4013      	ands	r3, r2
 80099fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f023 0303 	bic.w	r3, r3, #3
 8009a02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	021b      	lsls	r3, r3, #8
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a28      	ldr	r2, [pc, #160]	; (8009ac8 <TIM_OC3_SetConfig+0xfc>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d003      	beq.n	8009a32 <TIM_OC3_SetConfig+0x66>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a27      	ldr	r2, [pc, #156]	; (8009acc <TIM_OC3_SetConfig+0x100>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d10d      	bne.n	8009a4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	021b      	lsls	r3, r3, #8
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	4313      	orrs	r3, r2
 8009a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4a1d      	ldr	r2, [pc, #116]	; (8009ac8 <TIM_OC3_SetConfig+0xfc>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d00f      	beq.n	8009a76 <TIM_OC3_SetConfig+0xaa>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	4a1c      	ldr	r2, [pc, #112]	; (8009acc <TIM_OC3_SetConfig+0x100>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d00b      	beq.n	8009a76 <TIM_OC3_SetConfig+0xaa>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4a1b      	ldr	r2, [pc, #108]	; (8009ad0 <TIM_OC3_SetConfig+0x104>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d007      	beq.n	8009a76 <TIM_OC3_SetConfig+0xaa>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4a1a      	ldr	r2, [pc, #104]	; (8009ad4 <TIM_OC3_SetConfig+0x108>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d003      	beq.n	8009a76 <TIM_OC3_SetConfig+0xaa>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4a19      	ldr	r2, [pc, #100]	; (8009ad8 <TIM_OC3_SetConfig+0x10c>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d113      	bne.n	8009a9e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	695b      	ldr	r3, [r3, #20]
 8009a8a:	011b      	lsls	r3, r3, #4
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	699b      	ldr	r3, [r3, #24]
 8009a96:	011b      	lsls	r3, r3, #4
 8009a98:	693a      	ldr	r2, [r7, #16]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	693a      	ldr	r2, [r7, #16]
 8009aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	685a      	ldr	r2, [r3, #4]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	621a      	str	r2, [r3, #32]
}
 8009ab8:	bf00      	nop
 8009aba:	371c      	adds	r7, #28
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr
 8009ac4:	fffeff8f 	.word	0xfffeff8f
 8009ac8:	40010000 	.word	0x40010000
 8009acc:	40010400 	.word	0x40010400
 8009ad0:	40014000 	.word	0x40014000
 8009ad4:	40014400 	.word	0x40014400
 8009ad8:	40014800 	.word	0x40014800

08009adc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009adc:	b480      	push	{r7}
 8009ade:	b087      	sub	sp, #28
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6a1b      	ldr	r3, [r3, #32]
 8009aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	685b      	ldr	r3, [r3, #4]
 8009afc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	69db      	ldr	r3, [r3, #28]
 8009b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4b24      	ldr	r3, [pc, #144]	; (8009b98 <TIM_OC4_SetConfig+0xbc>)
 8009b08:	4013      	ands	r3, r2
 8009b0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	021b      	lsls	r3, r3, #8
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	031b      	lsls	r3, r3, #12
 8009b2e:	693a      	ldr	r2, [r7, #16]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a19      	ldr	r2, [pc, #100]	; (8009b9c <TIM_OC4_SetConfig+0xc0>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d00f      	beq.n	8009b5c <TIM_OC4_SetConfig+0x80>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a18      	ldr	r2, [pc, #96]	; (8009ba0 <TIM_OC4_SetConfig+0xc4>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d00b      	beq.n	8009b5c <TIM_OC4_SetConfig+0x80>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	4a17      	ldr	r2, [pc, #92]	; (8009ba4 <TIM_OC4_SetConfig+0xc8>)
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d007      	beq.n	8009b5c <TIM_OC4_SetConfig+0x80>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a16      	ldr	r2, [pc, #88]	; (8009ba8 <TIM_OC4_SetConfig+0xcc>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d003      	beq.n	8009b5c <TIM_OC4_SetConfig+0x80>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a15      	ldr	r2, [pc, #84]	; (8009bac <TIM_OC4_SetConfig+0xd0>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d109      	bne.n	8009b70 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	695b      	ldr	r3, [r3, #20]
 8009b68:	019b      	lsls	r3, r3, #6
 8009b6a:	697a      	ldr	r2, [r7, #20]
 8009b6c:	4313      	orrs	r3, r2
 8009b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	685a      	ldr	r2, [r3, #4]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	693a      	ldr	r2, [r7, #16]
 8009b88:	621a      	str	r2, [r3, #32]
}
 8009b8a:	bf00      	nop
 8009b8c:	371c      	adds	r7, #28
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	feff8fff 	.word	0xfeff8fff
 8009b9c:	40010000 	.word	0x40010000
 8009ba0:	40010400 	.word	0x40010400
 8009ba4:	40014000 	.word	0x40014000
 8009ba8:	40014400 	.word	0x40014400
 8009bac:	40014800 	.word	0x40014800

08009bb0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6a1b      	ldr	r3, [r3, #32]
 8009bbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6a1b      	ldr	r3, [r3, #32]
 8009bca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	685b      	ldr	r3, [r3, #4]
 8009bd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	4b21      	ldr	r3, [pc, #132]	; (8009c60 <TIM_OC5_SetConfig+0xb0>)
 8009bdc:	4013      	ands	r3, r2
 8009bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	68fa      	ldr	r2, [r7, #12]
 8009be6:	4313      	orrs	r3, r2
 8009be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009bf0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	689b      	ldr	r3, [r3, #8]
 8009bf6:	041b      	lsls	r3, r3, #16
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a18      	ldr	r2, [pc, #96]	; (8009c64 <TIM_OC5_SetConfig+0xb4>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d00f      	beq.n	8009c26 <TIM_OC5_SetConfig+0x76>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a17      	ldr	r2, [pc, #92]	; (8009c68 <TIM_OC5_SetConfig+0xb8>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d00b      	beq.n	8009c26 <TIM_OC5_SetConfig+0x76>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a16      	ldr	r2, [pc, #88]	; (8009c6c <TIM_OC5_SetConfig+0xbc>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d007      	beq.n	8009c26 <TIM_OC5_SetConfig+0x76>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	4a15      	ldr	r2, [pc, #84]	; (8009c70 <TIM_OC5_SetConfig+0xc0>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d003      	beq.n	8009c26 <TIM_OC5_SetConfig+0x76>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a14      	ldr	r2, [pc, #80]	; (8009c74 <TIM_OC5_SetConfig+0xc4>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d109      	bne.n	8009c3a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	021b      	lsls	r3, r3, #8
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	685a      	ldr	r2, [r3, #4]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	621a      	str	r2, [r3, #32]
}
 8009c54:	bf00      	nop
 8009c56:	371c      	adds	r7, #28
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	fffeff8f 	.word	0xfffeff8f
 8009c64:	40010000 	.word	0x40010000
 8009c68:	40010400 	.word	0x40010400
 8009c6c:	40014000 	.word	0x40014000
 8009c70:	40014400 	.word	0x40014400
 8009c74:	40014800 	.word	0x40014800

08009c78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	4b22      	ldr	r3, [pc, #136]	; (8009d2c <TIM_OC6_SetConfig+0xb4>)
 8009ca4:	4013      	ands	r3, r2
 8009ca6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	021b      	lsls	r3, r3, #8
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	051b      	lsls	r3, r3, #20
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a19      	ldr	r2, [pc, #100]	; (8009d30 <TIM_OC6_SetConfig+0xb8>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d00f      	beq.n	8009cf0 <TIM_OC6_SetConfig+0x78>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a18      	ldr	r2, [pc, #96]	; (8009d34 <TIM_OC6_SetConfig+0xbc>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d00b      	beq.n	8009cf0 <TIM_OC6_SetConfig+0x78>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	4a17      	ldr	r2, [pc, #92]	; (8009d38 <TIM_OC6_SetConfig+0xc0>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d007      	beq.n	8009cf0 <TIM_OC6_SetConfig+0x78>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4a16      	ldr	r2, [pc, #88]	; (8009d3c <TIM_OC6_SetConfig+0xc4>)
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d003      	beq.n	8009cf0 <TIM_OC6_SetConfig+0x78>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	4a15      	ldr	r2, [pc, #84]	; (8009d40 <TIM_OC6_SetConfig+0xc8>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d109      	bne.n	8009d04 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	695b      	ldr	r3, [r3, #20]
 8009cfc:	029b      	lsls	r3, r3, #10
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	685a      	ldr	r2, [r3, #4]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	693a      	ldr	r2, [r7, #16]
 8009d1c:	621a      	str	r2, [r3, #32]
}
 8009d1e:	bf00      	nop
 8009d20:	371c      	adds	r7, #28
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop
 8009d2c:	feff8fff 	.word	0xfeff8fff
 8009d30:	40010000 	.word	0x40010000
 8009d34:	40010400 	.word	0x40010400
 8009d38:	40014000 	.word	0x40014000
 8009d3c:	40014400 	.word	0x40014400
 8009d40:	40014800 	.word	0x40014800

08009d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6a1b      	ldr	r3, [r3, #32]
 8009d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	6a1b      	ldr	r3, [r3, #32]
 8009d5a:	f023 0201 	bic.w	r2, r3, #1
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	699b      	ldr	r3, [r3, #24]
 8009d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	011b      	lsls	r3, r3, #4
 8009d74:	693a      	ldr	r2, [r7, #16]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	f023 030a 	bic.w	r3, r3, #10
 8009d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d82:	697a      	ldr	r2, [r7, #20]
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	693a      	ldr	r2, [r7, #16]
 8009d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	621a      	str	r2, [r3, #32]
}
 8009d96:	bf00      	nop
 8009d98:	371c      	adds	r7, #28
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr

08009da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009da2:	b480      	push	{r7}
 8009da4:	b087      	sub	sp, #28
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	60f8      	str	r0, [r7, #12]
 8009daa:	60b9      	str	r1, [r7, #8]
 8009dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6a1b      	ldr	r3, [r3, #32]
 8009db2:	f023 0210 	bic.w	r2, r3, #16
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6a1b      	ldr	r3, [r3, #32]
 8009dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	031b      	lsls	r3, r3, #12
 8009dd2:	697a      	ldr	r2, [r7, #20]
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009dde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	011b      	lsls	r3, r3, #4
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	697a      	ldr	r2, [r7, #20]
 8009dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	621a      	str	r2, [r3, #32]
}
 8009df6:	bf00      	nop
 8009df8:	371c      	adds	r7, #28
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
	...

08009e04 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	4b09      	ldr	r3, [pc, #36]	; (8009e3c <TIM_ITRx_SetConfig+0x38>)
 8009e18:	4013      	ands	r3, r2
 8009e1a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009e1c:	683a      	ldr	r2, [r7, #0]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	f043 0307 	orr.w	r3, r3, #7
 8009e26:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	609a      	str	r2, [r3, #8]
}
 8009e2e:	bf00      	nop
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	ffcfff8f 	.word	0xffcfff8f

08009e40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
 8009e4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	689b      	ldr	r3, [r3, #8]
 8009e52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009e5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	021a      	lsls	r2, r3, #8
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	431a      	orrs	r2, r3
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	4313      	orrs	r3, r2
 8009e68:	697a      	ldr	r2, [r7, #20]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	697a      	ldr	r2, [r7, #20]
 8009e72:	609a      	str	r2, [r3, #8]
}
 8009e74:	bf00      	nop
 8009e76:	371c      	adds	r7, #28
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr

08009e80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	f003 031f 	and.w	r3, r3, #31
 8009e92:	2201      	movs	r2, #1
 8009e94:	fa02 f303 	lsl.w	r3, r2, r3
 8009e98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6a1a      	ldr	r2, [r3, #32]
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	43db      	mvns	r3, r3
 8009ea2:	401a      	ands	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6a1a      	ldr	r2, [r3, #32]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	f003 031f 	and.w	r3, r3, #31
 8009eb2:	6879      	ldr	r1, [r7, #4]
 8009eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8009eb8:	431a      	orrs	r2, r3
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	621a      	str	r2, [r3, #32]
}
 8009ebe:	bf00      	nop
 8009ec0:	371c      	adds	r7, #28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
	...

08009ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b085      	sub	sp, #20
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d101      	bne.n	8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e06d      	b.n	8009fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2202      	movs	r2, #2
 8009ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	4a30      	ldr	r2, [pc, #192]	; (8009fcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d004      	beq.n	8009f18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	4a2f      	ldr	r2, [pc, #188]	; (8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d108      	bne.n	8009f2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009f1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	4313      	orrs	r3, r2
 8009f28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a20      	ldr	r2, [pc, #128]	; (8009fcc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d022      	beq.n	8009f94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f56:	d01d      	beq.n	8009f94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a1d      	ldr	r2, [pc, #116]	; (8009fd4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d018      	beq.n	8009f94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a1c      	ldr	r2, [pc, #112]	; (8009fd8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d013      	beq.n	8009f94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a1a      	ldr	r2, [pc, #104]	; (8009fdc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d00e      	beq.n	8009f94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4a15      	ldr	r2, [pc, #84]	; (8009fd0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	d009      	beq.n	8009f94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a16      	ldr	r2, [pc, #88]	; (8009fe0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d004      	beq.n	8009f94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a15      	ldr	r2, [pc, #84]	; (8009fe4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d10c      	bne.n	8009fae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	68ba      	ldr	r2, [r7, #8]
 8009fa2:	4313      	orrs	r3, r2
 8009fa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68ba      	ldr	r2, [r7, #8]
 8009fac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	40010000 	.word	0x40010000
 8009fd0:	40010400 	.word	0x40010400
 8009fd4:	40000400 	.word	0x40000400
 8009fd8:	40000800 	.word	0x40000800
 8009fdc:	40000c00 	.word	0x40000c00
 8009fe0:	40001800 	.word	0x40001800
 8009fe4:	40014000 	.word	0x40014000

08009fe8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d101      	bne.n	800a004 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a000:	2302      	movs	r3, #2
 800a002:	e065      	b.n	800a0d0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	4313      	orrs	r3, r2
 800a018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	4313      	orrs	r3, r2
 800a026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	4313      	orrs	r3, r2
 800a034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4313      	orrs	r3, r2
 800a042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	4313      	orrs	r3, r2
 800a050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	695b      	ldr	r3, [r3, #20]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a06a:	4313      	orrs	r3, r2
 800a06c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	041b      	lsls	r3, r3, #16
 800a07a:	4313      	orrs	r3, r2
 800a07c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a16      	ldr	r2, [pc, #88]	; (800a0dc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d004      	beq.n	800a092 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a14      	ldr	r2, [pc, #80]	; (800a0e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d115      	bne.n	800a0be <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	051b      	lsls	r3, r3, #20
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	69db      	ldr	r3, [r3, #28]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	6a1b      	ldr	r3, [r3, #32]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0ce:	2300      	movs	r3, #0
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3714      	adds	r7, #20
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr
 800a0dc:	40010000 	.word	0x40010000
 800a0e0:	40010400 	.word	0x40010400

0800a0e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b083      	sub	sp, #12
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0ec:	bf00      	nop
 800a0ee:	370c      	adds	r7, #12
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a114:	bf00      	nop
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d101      	bne.n	800a132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e042      	b.n	800a1b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d106      	bne.n	800a14a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f7f8 f9bf 	bl	80024c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2224      	movs	r2, #36	; 0x24
 800a14e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f022 0201 	bic.w	r2, r2, #1
 800a160:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fdf0 	bl	800ad48 <UART_SetConfig>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d101      	bne.n	800a172 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e022      	b.n	800a1b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a176:	2b00      	cmp	r3, #0
 800a178:	d002      	beq.n	800a180 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f001 fb44 	bl	800b808 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	685a      	ldr	r2, [r3, #4]
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a18e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	689a      	ldr	r2, [r3, #8]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a19e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f042 0201 	orr.w	r2, r2, #1
 800a1ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f001 fbcb 	bl	800b94c <UART_CheckIdleState>
 800a1b6:	4603      	mov	r3, r0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3708      	adds	r7, #8
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}

0800a1c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b08a      	sub	sp, #40	; 0x28
 800a1c4:	af02      	add	r7, sp, #8
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	603b      	str	r3, [r7, #0]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1d6:	2b20      	cmp	r3, #32
 800a1d8:	f040 8083 	bne.w	800a2e2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d002      	beq.n	800a1e8 <HAL_UART_Transmit+0x28>
 800a1e2:	88fb      	ldrh	r3, [r7, #6]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d101      	bne.n	800a1ec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e07b      	b.n	800a2e4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d101      	bne.n	800a1fa <HAL_UART_Transmit+0x3a>
 800a1f6:	2302      	movs	r3, #2
 800a1f8:	e074      	b.n	800a2e4 <HAL_UART_Transmit+0x124>
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2200      	movs	r2, #0
 800a206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2221      	movs	r2, #33	; 0x21
 800a20e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a212:	f7f8 fe41 	bl	8002e98 <HAL_GetTick>
 800a216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	88fa      	ldrh	r2, [r7, #6]
 800a21c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	88fa      	ldrh	r2, [r7, #6]
 800a224:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	689b      	ldr	r3, [r3, #8]
 800a22c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a230:	d108      	bne.n	800a244 <HAL_UART_Transmit+0x84>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d104      	bne.n	800a244 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a23a:	2300      	movs	r3, #0
 800a23c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	61bb      	str	r3, [r7, #24]
 800a242:	e003      	b.n	800a24c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a248:	2300      	movs	r3, #0
 800a24a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a254:	e02c      	b.n	800a2b0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	9300      	str	r3, [sp, #0]
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	2200      	movs	r2, #0
 800a25e:	2180      	movs	r1, #128	; 0x80
 800a260:	68f8      	ldr	r0, [r7, #12]
 800a262:	f001 fbbe 	bl	800b9e2 <UART_WaitOnFlagUntilTimeout>
 800a266:	4603      	mov	r3, r0
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a26c:	2303      	movs	r3, #3
 800a26e:	e039      	b.n	800a2e4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10b      	bne.n	800a28e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	881b      	ldrh	r3, [r3, #0]
 800a27a:	461a      	mov	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a284:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	3302      	adds	r3, #2
 800a28a:	61bb      	str	r3, [r7, #24]
 800a28c:	e007      	b.n	800a29e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	781a      	ldrb	r2, [r3, #0]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a298:	69fb      	ldr	r3, [r7, #28]
 800a29a:	3301      	adds	r3, #1
 800a29c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	3b01      	subs	r3, #1
 800a2a8:	b29a      	uxth	r2, r3
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d1cc      	bne.n	800a256 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	2140      	movs	r1, #64	; 0x40
 800a2c6:	68f8      	ldr	r0, [r7, #12]
 800a2c8:	f001 fb8b 	bl	800b9e2 <UART_WaitOnFlagUntilTimeout>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d001      	beq.n	800a2d6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a2d2:	2303      	movs	r3, #3
 800a2d4:	e006      	b.n	800a2e4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2220      	movs	r2, #32
 800a2da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	e000      	b.n	800a2e4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a2e2:	2302      	movs	r3, #2
  }
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3720      	adds	r7, #32
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd80      	pop	{r7, pc}

0800a2ec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b08a      	sub	sp, #40	; 0x28
 800a2f0:	af02      	add	r7, sp, #8
 800a2f2:	60f8      	str	r0, [r7, #12]
 800a2f4:	60b9      	str	r1, [r7, #8]
 800a2f6:	603b      	str	r3, [r7, #0]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a302:	2b20      	cmp	r3, #32
 800a304:	f040 80c0 	bne.w	800a488 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d002      	beq.n	800a314 <HAL_UART_Receive+0x28>
 800a30e:	88fb      	ldrh	r3, [r7, #6]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d101      	bne.n	800a318 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e0b8      	b.n	800a48a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d101      	bne.n	800a326 <HAL_UART_Receive+0x3a>
 800a322:	2302      	movs	r3, #2
 800a324:	e0b1      	b.n	800a48a <HAL_UART_Receive+0x19e>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2201      	movs	r2, #1
 800a32a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	2222      	movs	r2, #34	; 0x22
 800a33a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a344:	f7f8 fda8 	bl	8002e98 <HAL_GetTick>
 800a348:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	88fa      	ldrh	r2, [r7, #6]
 800a34e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	88fa      	ldrh	r2, [r7, #6]
 800a356:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a362:	d10e      	bne.n	800a382 <HAL_UART_Receive+0x96>
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d105      	bne.n	800a378 <HAL_UART_Receive+0x8c>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a372:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a376:	e02d      	b.n	800a3d4 <HAL_UART_Receive+0xe8>
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	22ff      	movs	r2, #255	; 0xff
 800a37c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a380:	e028      	b.n	800a3d4 <HAL_UART_Receive+0xe8>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10d      	bne.n	800a3a6 <HAL_UART_Receive+0xba>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d104      	bne.n	800a39c <HAL_UART_Receive+0xb0>
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	22ff      	movs	r2, #255	; 0xff
 800a396:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a39a:	e01b      	b.n	800a3d4 <HAL_UART_Receive+0xe8>
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	227f      	movs	r2, #127	; 0x7f
 800a3a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3a4:	e016      	b.n	800a3d4 <HAL_UART_Receive+0xe8>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a3ae:	d10d      	bne.n	800a3cc <HAL_UART_Receive+0xe0>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d104      	bne.n	800a3c2 <HAL_UART_Receive+0xd6>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	227f      	movs	r2, #127	; 0x7f
 800a3bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3c0:	e008      	b.n	800a3d4 <HAL_UART_Receive+0xe8>
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	223f      	movs	r2, #63	; 0x3f
 800a3c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a3ca:	e003      	b.n	800a3d4 <HAL_UART_Receive+0xe8>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a3da:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3e4:	d108      	bne.n	800a3f8 <HAL_UART_Receive+0x10c>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d104      	bne.n	800a3f8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	61bb      	str	r3, [r7, #24]
 800a3f6:	e003      	b.n	800a400 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a408:	e032      	b.n	800a470 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	2200      	movs	r2, #0
 800a412:	2120      	movs	r1, #32
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f001 fae4 	bl	800b9e2 <UART_WaitOnFlagUntilTimeout>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d001      	beq.n	800a424 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800a420:	2303      	movs	r3, #3
 800a422:	e032      	b.n	800a48a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d10c      	bne.n	800a444 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a430:	b29a      	uxth	r2, r3
 800a432:	8a7b      	ldrh	r3, [r7, #18]
 800a434:	4013      	ands	r3, r2
 800a436:	b29a      	uxth	r2, r3
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	3302      	adds	r3, #2
 800a440:	61bb      	str	r3, [r7, #24]
 800a442:	e00c      	b.n	800a45e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44a:	b2da      	uxtb	r2, r3
 800a44c:	8a7b      	ldrh	r3, [r7, #18]
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	4013      	ands	r3, r2
 800a452:	b2da      	uxtb	r2, r3
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a458:	69fb      	ldr	r3, [r7, #28]
 800a45a:	3301      	adds	r3, #1
 800a45c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a464:	b29b      	uxth	r3, r3
 800a466:	3b01      	subs	r3, #1
 800a468:	b29a      	uxth	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a476:	b29b      	uxth	r3, r3
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d1c6      	bne.n	800a40a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2220      	movs	r2, #32
 800a480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	e000      	b.n	800a48a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800a488:	2302      	movs	r3, #2
  }
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3720      	adds	r7, #32
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}
	...

0800a494 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b08a      	sub	sp, #40	; 0x28
 800a498:	af00      	add	r7, sp, #0
 800a49a:	60f8      	str	r0, [r7, #12]
 800a49c:	60b9      	str	r1, [r7, #8]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4a8:	2b20      	cmp	r3, #32
 800a4aa:	d17a      	bne.n	800a5a2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d002      	beq.n	800a4b8 <HAL_UART_Transmit_DMA+0x24>
 800a4b2:	88fb      	ldrh	r3, [r7, #6]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e073      	b.n	800a5a4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d101      	bne.n	800a4ca <HAL_UART_Transmit_DMA+0x36>
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	e06c      	b.n	800a5a4 <HAL_UART_Transmit_DMA+0x110>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	68ba      	ldr	r2, [r7, #8]
 800a4d6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	88fa      	ldrh	r2, [r7, #6]
 800a4dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	88fa      	ldrh	r2, [r7, #6]
 800a4e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2221      	movs	r2, #33	; 0x21
 800a4f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d02c      	beq.n	800a55a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a504:	4a29      	ldr	r2, [pc, #164]	; (800a5ac <HAL_UART_Transmit_DMA+0x118>)
 800a506:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a50c:	4a28      	ldr	r2, [pc, #160]	; (800a5b0 <HAL_UART_Transmit_DMA+0x11c>)
 800a50e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a514:	4a27      	ldr	r2, [pc, #156]	; (800a5b4 <HAL_UART_Transmit_DMA+0x120>)
 800a516:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a51c:	2200      	movs	r2, #0
 800a51e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a528:	4619      	mov	r1, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3328      	adds	r3, #40	; 0x28
 800a530:	461a      	mov	r2, r3
 800a532:	88fb      	ldrh	r3, [r7, #6]
 800a534:	f7f9 fa2a 	bl	800398c <HAL_DMA_Start_IT>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d00d      	beq.n	800a55a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2210      	movs	r2, #16
 800a542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2220      	movs	r2, #32
 800a552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e024      	b.n	800a5a4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	2240      	movs	r2, #64	; 0x40
 800a560:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	3308      	adds	r3, #8
 800a570:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	e853 3f00 	ldrex	r3, [r3]
 800a578:	613b      	str	r3, [r7, #16]
   return(result);
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a580:	627b      	str	r3, [r7, #36]	; 0x24
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	3308      	adds	r3, #8
 800a588:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a58a:	623a      	str	r2, [r7, #32]
 800a58c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58e:	69f9      	ldr	r1, [r7, #28]
 800a590:	6a3a      	ldr	r2, [r7, #32]
 800a592:	e841 2300 	strex	r3, r2, [r1]
 800a596:	61bb      	str	r3, [r7, #24]
   return(result);
 800a598:	69bb      	ldr	r3, [r7, #24]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1e5      	bne.n	800a56a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	e000      	b.n	800a5a4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800a5a2:	2302      	movs	r3, #2
  }
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3728      	adds	r7, #40	; 0x28
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	0800bcc1 	.word	0x0800bcc1
 800a5b0:	0800bd57 	.word	0x0800bd57
 800a5b4:	0800bd73 	.word	0x0800bd73

0800a5b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b0ba      	sub	sp, #232	; 0xe8
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	69db      	ldr	r3, [r3, #28]
 800a5c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	689b      	ldr	r3, [r3, #8]
 800a5da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a5de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a5e2:	f640 030f 	movw	r3, #2063	; 0x80f
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a5ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d11b      	bne.n	800a62c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a5f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a5f8:	f003 0320 	and.w	r3, r3, #32
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d015      	beq.n	800a62c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a604:	f003 0320 	and.w	r3, r3, #32
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d105      	bne.n	800a618 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a60c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d009      	beq.n	800a62c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 835a 	beq.w	800acd6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	4798      	blx	r3
      }
      return;
 800a62a:	e354      	b.n	800acd6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a62c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a630:	2b00      	cmp	r3, #0
 800a632:	f000 811f 	beq.w	800a874 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a636:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a63a:	4b8b      	ldr	r3, [pc, #556]	; (800a868 <HAL_UART_IRQHandler+0x2b0>)
 800a63c:	4013      	ands	r3, r2
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d106      	bne.n	800a650 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a642:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a646:	4b89      	ldr	r3, [pc, #548]	; (800a86c <HAL_UART_IRQHandler+0x2b4>)
 800a648:	4013      	ands	r3, r2
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f000 8112 	beq.w	800a874 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d011      	beq.n	800a680 <HAL_UART_IRQHandler+0xc8>
 800a65c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00b      	beq.n	800a680 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2201      	movs	r2, #1
 800a66e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a676:	f043 0201 	orr.w	r2, r3, #1
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a684:	f003 0302 	and.w	r3, r3, #2
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d011      	beq.n	800a6b0 <HAL_UART_IRQHandler+0xf8>
 800a68c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a690:	f003 0301 	and.w	r3, r3, #1
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00b      	beq.n	800a6b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	2202      	movs	r2, #2
 800a69e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6a6:	f043 0204 	orr.w	r2, r3, #4
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d011      	beq.n	800a6e0 <HAL_UART_IRQHandler+0x128>
 800a6bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6c0:	f003 0301 	and.w	r3, r3, #1
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d00b      	beq.n	800a6e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	2204      	movs	r2, #4
 800a6ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6d6:	f043 0202 	orr.w	r2, r3, #2
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a6e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a6e4:	f003 0308 	and.w	r3, r3, #8
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d017      	beq.n	800a71c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a6ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a6f0:	f003 0320 	and.w	r3, r3, #32
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d105      	bne.n	800a704 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a6f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a6fc:	4b5a      	ldr	r3, [pc, #360]	; (800a868 <HAL_UART_IRQHandler+0x2b0>)
 800a6fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00b      	beq.n	800a71c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2208      	movs	r2, #8
 800a70a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a712:	f043 0208 	orr.w	r2, r3, #8
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a71c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a724:	2b00      	cmp	r3, #0
 800a726:	d012      	beq.n	800a74e <HAL_UART_IRQHandler+0x196>
 800a728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a72c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a730:	2b00      	cmp	r3, #0
 800a732:	d00c      	beq.n	800a74e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a73c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a744:	f043 0220 	orr.w	r2, r3, #32
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a754:	2b00      	cmp	r3, #0
 800a756:	f000 82c0 	beq.w	800acda <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a75a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a75e:	f003 0320 	and.w	r3, r3, #32
 800a762:	2b00      	cmp	r3, #0
 800a764:	d013      	beq.n	800a78e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a76a:	f003 0320 	and.w	r3, r3, #32
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d105      	bne.n	800a77e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d007      	beq.n	800a78e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a782:	2b00      	cmp	r3, #0
 800a784:	d003      	beq.n	800a78e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a794:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	689b      	ldr	r3, [r3, #8]
 800a79e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7a2:	2b40      	cmp	r3, #64	; 0x40
 800a7a4:	d005      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a7a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a7aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d04f      	beq.n	800a852 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f001 fa1e 	bl	800bbf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c2:	2b40      	cmp	r3, #64	; 0x40
 800a7c4:	d141      	bne.n	800a84a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3308      	adds	r3, #8
 800a7cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a7d4:	e853 3f00 	ldrex	r3, [r3]
 800a7d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a7dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a7e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a7f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a7f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a7fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a802:	e841 2300 	strex	r3, r2, [r1]
 800a806:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a80a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1d9      	bne.n	800a7c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a816:	2b00      	cmp	r3, #0
 800a818:	d013      	beq.n	800a842 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a81e:	4a14      	ldr	r2, [pc, #80]	; (800a870 <HAL_UART_IRQHandler+0x2b8>)
 800a820:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a826:	4618      	mov	r0, r3
 800a828:	f7f9 fe38 	bl	800449c <HAL_DMA_Abort_IT>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d017      	beq.n	800a862 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a83c:	4610      	mov	r0, r2
 800a83e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a840:	e00f      	b.n	800a862 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fa6a 	bl	800ad1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a848:	e00b      	b.n	800a862 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fa66 	bl	800ad1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a850:	e007      	b.n	800a862 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fa62 	bl	800ad1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a860:	e23b      	b.n	800acda <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a862:	bf00      	nop
    return;
 800a864:	e239      	b.n	800acda <HAL_UART_IRQHandler+0x722>
 800a866:	bf00      	nop
 800a868:	10000001 	.word	0x10000001
 800a86c:	04000120 	.word	0x04000120
 800a870:	0800bdf3 	.word	0x0800bdf3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a878:	2b01      	cmp	r3, #1
 800a87a:	f040 81ce 	bne.w	800ac1a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a87e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a882:	f003 0310 	and.w	r3, r3, #16
 800a886:	2b00      	cmp	r3, #0
 800a888:	f000 81c7 	beq.w	800ac1a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a88c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a890:	f003 0310 	and.w	r3, r3, #16
 800a894:	2b00      	cmp	r3, #0
 800a896:	f000 81c0 	beq.w	800ac1a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	2210      	movs	r2, #16
 800a8a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8ac:	2b40      	cmp	r3, #64	; 0x40
 800a8ae:	f040 813b 	bne.w	800ab28 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a8b      	ldr	r2, [pc, #556]	; (800aae8 <HAL_UART_IRQHandler+0x530>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d059      	beq.n	800a972 <HAL_UART_IRQHandler+0x3ba>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a89      	ldr	r2, [pc, #548]	; (800aaec <HAL_UART_IRQHandler+0x534>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d053      	beq.n	800a972 <HAL_UART_IRQHandler+0x3ba>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a87      	ldr	r2, [pc, #540]	; (800aaf0 <HAL_UART_IRQHandler+0x538>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d04d      	beq.n	800a972 <HAL_UART_IRQHandler+0x3ba>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a85      	ldr	r2, [pc, #532]	; (800aaf4 <HAL_UART_IRQHandler+0x53c>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d047      	beq.n	800a972 <HAL_UART_IRQHandler+0x3ba>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	4a83      	ldr	r2, [pc, #524]	; (800aaf8 <HAL_UART_IRQHandler+0x540>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d041      	beq.n	800a972 <HAL_UART_IRQHandler+0x3ba>
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	4a81      	ldr	r2, [pc, #516]	; (800aafc <HAL_UART_IRQHandler+0x544>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d03b      	beq.n	800a972 <HAL_UART_IRQHandler+0x3ba>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a7f      	ldr	r2, [pc, #508]	; (800ab00 <HAL_UART_IRQHandler+0x548>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d035      	beq.n	800a972 <HAL_UART_IRQHandler+0x3ba>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a7d      	ldr	r2, [pc, #500]	; (800ab04 <HAL_UART_IRQHandler+0x54c>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d02f      	beq.n	800a972 <HAL_UART_IRQHandler+0x3ba>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	4a7b      	ldr	r2, [pc, #492]	; (800ab08 <HAL_UART_IRQHandler+0x550>)
 800a91a:	4293      	cmp	r3, r2
 800a91c:	d029      	beq.n	800a972 <HAL_UART_IRQHandler+0x3ba>
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a79      	ldr	r2, [pc, #484]	; (800ab0c <HAL_UART_IRQHandler+0x554>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d023      	beq.n	800a972 <HAL_UART_IRQHandler+0x3ba>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	4a77      	ldr	r2, [pc, #476]	; (800ab10 <HAL_UART_IRQHandler+0x558>)
 800a932:	4293      	cmp	r3, r2
 800a934:	d01d      	beq.n	800a972 <HAL_UART_IRQHandler+0x3ba>
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	4a75      	ldr	r2, [pc, #468]	; (800ab14 <HAL_UART_IRQHandler+0x55c>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d017      	beq.n	800a972 <HAL_UART_IRQHandler+0x3ba>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a73      	ldr	r2, [pc, #460]	; (800ab18 <HAL_UART_IRQHandler+0x560>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d011      	beq.n	800a972 <HAL_UART_IRQHandler+0x3ba>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a71      	ldr	r2, [pc, #452]	; (800ab1c <HAL_UART_IRQHandler+0x564>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d00b      	beq.n	800a972 <HAL_UART_IRQHandler+0x3ba>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a6f      	ldr	r2, [pc, #444]	; (800ab20 <HAL_UART_IRQHandler+0x568>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d005      	beq.n	800a972 <HAL_UART_IRQHandler+0x3ba>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a6d      	ldr	r2, [pc, #436]	; (800ab24 <HAL_UART_IRQHandler+0x56c>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d105      	bne.n	800a97e <HAL_UART_IRQHandler+0x3c6>
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	e004      	b.n	800a988 <HAL_UART_IRQHandler+0x3d0>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	b29b      	uxth	r3, r3
 800a988:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a98c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 81a4 	beq.w	800acde <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a99c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	f080 819c 	bcs.w	800acde <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a9ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9ba:	f000 8086 	beq.w	800aaca <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a9ca:	e853 3f00 	ldrex	r3, [r3]
 800a9ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a9d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a9d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a9e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a9ec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a9f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a9f8:	e841 2300 	strex	r3, r2, [r1]
 800a9fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aa00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1da      	bne.n	800a9be <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	3308      	adds	r3, #8
 800aa0e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa12:	e853 3f00 	ldrex	r3, [r3]
 800aa16:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aa18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa1a:	f023 0301 	bic.w	r3, r3, #1
 800aa1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3308      	adds	r3, #8
 800aa28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800aa2c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aa30:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa32:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aa34:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aa38:	e841 2300 	strex	r3, r2, [r1]
 800aa3c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800aa3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e1      	bne.n	800aa08 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	3308      	adds	r3, #8
 800aa4a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa4e:	e853 3f00 	ldrex	r3, [r3]
 800aa52:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800aa54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	3308      	adds	r3, #8
 800aa64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800aa68:	66fa      	str	r2, [r7, #108]	; 0x6c
 800aa6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800aa6e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800aa70:	e841 2300 	strex	r3, r2, [r1]
 800aa74:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800aa76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1e3      	bne.n	800aa44 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2220      	movs	r2, #32
 800aa80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa92:	e853 3f00 	ldrex	r3, [r3]
 800aa96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800aa98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa9a:	f023 0310 	bic.w	r3, r3, #16
 800aa9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aaac:	65bb      	str	r3, [r7, #88]	; 0x58
 800aaae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aab0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aab2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aab4:	e841 2300 	strex	r3, r2, [r1]
 800aab8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800aaba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1e4      	bne.n	800aa8a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7f9 f9cb 	bl	8003e60 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	1ad3      	subs	r3, r2, r3
 800aada:	b29b      	uxth	r3, r3
 800aadc:	4619      	mov	r1, r3
 800aade:	6878      	ldr	r0, [r7, #4]
 800aae0:	f000 f926 	bl	800ad30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aae4:	e0fb      	b.n	800acde <HAL_UART_IRQHandler+0x726>
 800aae6:	bf00      	nop
 800aae8:	40020010 	.word	0x40020010
 800aaec:	40020028 	.word	0x40020028
 800aaf0:	40020040 	.word	0x40020040
 800aaf4:	40020058 	.word	0x40020058
 800aaf8:	40020070 	.word	0x40020070
 800aafc:	40020088 	.word	0x40020088
 800ab00:	400200a0 	.word	0x400200a0
 800ab04:	400200b8 	.word	0x400200b8
 800ab08:	40020410 	.word	0x40020410
 800ab0c:	40020428 	.word	0x40020428
 800ab10:	40020440 	.word	0x40020440
 800ab14:	40020458 	.word	0x40020458
 800ab18:	40020470 	.word	0x40020470
 800ab1c:	40020488 	.word	0x40020488
 800ab20:	400204a0 	.word	0x400204a0
 800ab24:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab34:	b29b      	uxth	r3, r3
 800ab36:	1ad3      	subs	r3, r2, r3
 800ab38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f000 80cc 	beq.w	800ace2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800ab4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	f000 80c7 	beq.w	800ace2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5c:	e853 3f00 	ldrex	r3, [r3]
 800ab60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ab62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	461a      	mov	r2, r3
 800ab72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ab76:	647b      	str	r3, [r7, #68]	; 0x44
 800ab78:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab7e:	e841 2300 	strex	r3, r2, [r1]
 800ab82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d1e4      	bne.n	800ab54 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	3308      	adds	r3, #8
 800ab90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab94:	e853 3f00 	ldrex	r3, [r3]
 800ab98:	623b      	str	r3, [r7, #32]
   return(result);
 800ab9a:	6a3a      	ldr	r2, [r7, #32]
 800ab9c:	4b54      	ldr	r3, [pc, #336]	; (800acf0 <HAL_UART_IRQHandler+0x738>)
 800ab9e:	4013      	ands	r3, r2
 800aba0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	3308      	adds	r3, #8
 800abaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800abae:	633a      	str	r2, [r7, #48]	; 0x30
 800abb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800abb6:	e841 2300 	strex	r3, r2, [r1]
 800abba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800abbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d1e3      	bne.n	800ab8a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2220      	movs	r2, #32
 800abc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	e853 3f00 	ldrex	r3, [r3]
 800abe2:	60fb      	str	r3, [r7, #12]
   return(result);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f023 0310 	bic.w	r3, r3, #16
 800abea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	461a      	mov	r2, r3
 800abf4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800abf8:	61fb      	str	r3, [r7, #28]
 800abfa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abfc:	69b9      	ldr	r1, [r7, #24]
 800abfe:	69fa      	ldr	r2, [r7, #28]
 800ac00:	e841 2300 	strex	r3, r2, [r1]
 800ac04:	617b      	str	r3, [r7, #20]
   return(result);
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1e4      	bne.n	800abd6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ac0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ac10:	4619      	mov	r1, r3
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f88c 	bl	800ad30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ac18:	e063      	b.n	800ace2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ac1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d00e      	beq.n	800ac44 <HAL_UART_IRQHandler+0x68c>
 800ac26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d008      	beq.n	800ac44 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ac3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f001 f919 	bl	800be74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ac42:	e051      	b.n	800ace8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ac44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d014      	beq.n	800ac7a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ac50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d105      	bne.n	800ac68 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ac5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d008      	beq.n	800ac7a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d03a      	beq.n	800ace6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	4798      	blx	r3
    }
    return;
 800ac78:	e035      	b.n	800ace6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ac7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d009      	beq.n	800ac9a <HAL_UART_IRQHandler+0x6e2>
 800ac86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d003      	beq.n	800ac9a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f001 f8c3 	bl	800be1e <UART_EndTransmit_IT>
    return;
 800ac98:	e026      	b.n	800ace8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ac9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d009      	beq.n	800acba <HAL_UART_IRQHandler+0x702>
 800aca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acaa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d003      	beq.n	800acba <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f001 f8f2 	bl	800be9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800acb8:	e016      	b.n	800ace8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800acba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d010      	beq.n	800ace8 <HAL_UART_IRQHandler+0x730>
 800acc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acca:	2b00      	cmp	r3, #0
 800accc:	da0c      	bge.n	800ace8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f001 f8da 	bl	800be88 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800acd4:	e008      	b.n	800ace8 <HAL_UART_IRQHandler+0x730>
      return;
 800acd6:	bf00      	nop
 800acd8:	e006      	b.n	800ace8 <HAL_UART_IRQHandler+0x730>
    return;
 800acda:	bf00      	nop
 800acdc:	e004      	b.n	800ace8 <HAL_UART_IRQHandler+0x730>
      return;
 800acde:	bf00      	nop
 800ace0:	e002      	b.n	800ace8 <HAL_UART_IRQHandler+0x730>
      return;
 800ace2:	bf00      	nop
 800ace4:	e000      	b.n	800ace8 <HAL_UART_IRQHandler+0x730>
    return;
 800ace6:	bf00      	nop
  }
}
 800ace8:	37e8      	adds	r7, #232	; 0xe8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	effffffe 	.word	0xeffffffe

0800acf4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ad3c:	bf00      	nop
 800ad3e:	370c      	adds	r7, #12
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad48:	b5b0      	push	{r4, r5, r7, lr}
 800ad4a:	b08e      	sub	sp, #56	; 0x38
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad50:	2300      	movs	r3, #0
 800ad52:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	689a      	ldr	r2, [r3, #8]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	691b      	ldr	r3, [r3, #16]
 800ad5e:	431a      	orrs	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	695b      	ldr	r3, [r3, #20]
 800ad64:	431a      	orrs	r2, r3
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	69db      	ldr	r3, [r3, #28]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	681a      	ldr	r2, [r3, #0]
 800ad74:	4bbf      	ldr	r3, [pc, #764]	; (800b074 <UART_SetConfig+0x32c>)
 800ad76:	4013      	ands	r3, r2
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	6812      	ldr	r2, [r2, #0]
 800ad7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad7e:	430b      	orrs	r3, r1
 800ad80:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	68da      	ldr	r2, [r3, #12]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	430a      	orrs	r2, r1
 800ad96:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	699b      	ldr	r3, [r3, #24]
 800ad9c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	4ab5      	ldr	r2, [pc, #724]	; (800b078 <UART_SetConfig+0x330>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d004      	beq.n	800adb2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6a1b      	ldr	r3, [r3, #32]
 800adac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adae:	4313      	orrs	r3, r2
 800adb0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	689a      	ldr	r2, [r3, #8]
 800adb8:	4bb0      	ldr	r3, [pc, #704]	; (800b07c <UART_SetConfig+0x334>)
 800adba:	4013      	ands	r3, r2
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	6812      	ldr	r2, [r2, #0]
 800adc0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800adc2:	430b      	orrs	r3, r1
 800adc4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adcc:	f023 010f 	bic.w	r1, r3, #15
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	430a      	orrs	r2, r1
 800adda:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4aa7      	ldr	r2, [pc, #668]	; (800b080 <UART_SetConfig+0x338>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d176      	bne.n	800aed4 <UART_SetConfig+0x18c>
 800ade6:	4ba7      	ldr	r3, [pc, #668]	; (800b084 <UART_SetConfig+0x33c>)
 800ade8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adee:	2b28      	cmp	r3, #40	; 0x28
 800adf0:	d86c      	bhi.n	800aecc <UART_SetConfig+0x184>
 800adf2:	a201      	add	r2, pc, #4	; (adr r2, 800adf8 <UART_SetConfig+0xb0>)
 800adf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf8:	0800ae9d 	.word	0x0800ae9d
 800adfc:	0800aecd 	.word	0x0800aecd
 800ae00:	0800aecd 	.word	0x0800aecd
 800ae04:	0800aecd 	.word	0x0800aecd
 800ae08:	0800aecd 	.word	0x0800aecd
 800ae0c:	0800aecd 	.word	0x0800aecd
 800ae10:	0800aecd 	.word	0x0800aecd
 800ae14:	0800aecd 	.word	0x0800aecd
 800ae18:	0800aea5 	.word	0x0800aea5
 800ae1c:	0800aecd 	.word	0x0800aecd
 800ae20:	0800aecd 	.word	0x0800aecd
 800ae24:	0800aecd 	.word	0x0800aecd
 800ae28:	0800aecd 	.word	0x0800aecd
 800ae2c:	0800aecd 	.word	0x0800aecd
 800ae30:	0800aecd 	.word	0x0800aecd
 800ae34:	0800aecd 	.word	0x0800aecd
 800ae38:	0800aead 	.word	0x0800aead
 800ae3c:	0800aecd 	.word	0x0800aecd
 800ae40:	0800aecd 	.word	0x0800aecd
 800ae44:	0800aecd 	.word	0x0800aecd
 800ae48:	0800aecd 	.word	0x0800aecd
 800ae4c:	0800aecd 	.word	0x0800aecd
 800ae50:	0800aecd 	.word	0x0800aecd
 800ae54:	0800aecd 	.word	0x0800aecd
 800ae58:	0800aeb5 	.word	0x0800aeb5
 800ae5c:	0800aecd 	.word	0x0800aecd
 800ae60:	0800aecd 	.word	0x0800aecd
 800ae64:	0800aecd 	.word	0x0800aecd
 800ae68:	0800aecd 	.word	0x0800aecd
 800ae6c:	0800aecd 	.word	0x0800aecd
 800ae70:	0800aecd 	.word	0x0800aecd
 800ae74:	0800aecd 	.word	0x0800aecd
 800ae78:	0800aebd 	.word	0x0800aebd
 800ae7c:	0800aecd 	.word	0x0800aecd
 800ae80:	0800aecd 	.word	0x0800aecd
 800ae84:	0800aecd 	.word	0x0800aecd
 800ae88:	0800aecd 	.word	0x0800aecd
 800ae8c:	0800aecd 	.word	0x0800aecd
 800ae90:	0800aecd 	.word	0x0800aecd
 800ae94:	0800aecd 	.word	0x0800aecd
 800ae98:	0800aec5 	.word	0x0800aec5
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aea2:	e222      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800aea4:	2304      	movs	r3, #4
 800aea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeaa:	e21e      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800aeac:	2308      	movs	r3, #8
 800aeae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeb2:	e21a      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800aeb4:	2310      	movs	r3, #16
 800aeb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeba:	e216      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800aebc:	2320      	movs	r3, #32
 800aebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aec2:	e212      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800aec4:	2340      	movs	r3, #64	; 0x40
 800aec6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aeca:	e20e      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800aecc:	2380      	movs	r3, #128	; 0x80
 800aece:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aed2:	e20a      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	4a6b      	ldr	r2, [pc, #428]	; (800b088 <UART_SetConfig+0x340>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d130      	bne.n	800af40 <UART_SetConfig+0x1f8>
 800aede:	4b69      	ldr	r3, [pc, #420]	; (800b084 <UART_SetConfig+0x33c>)
 800aee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee2:	f003 0307 	and.w	r3, r3, #7
 800aee6:	2b05      	cmp	r3, #5
 800aee8:	d826      	bhi.n	800af38 <UART_SetConfig+0x1f0>
 800aeea:	a201      	add	r2, pc, #4	; (adr r2, 800aef0 <UART_SetConfig+0x1a8>)
 800aeec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aef0:	0800af09 	.word	0x0800af09
 800aef4:	0800af11 	.word	0x0800af11
 800aef8:	0800af19 	.word	0x0800af19
 800aefc:	0800af21 	.word	0x0800af21
 800af00:	0800af29 	.word	0x0800af29
 800af04:	0800af31 	.word	0x0800af31
 800af08:	2300      	movs	r3, #0
 800af0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af0e:	e1ec      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800af10:	2304      	movs	r3, #4
 800af12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af16:	e1e8      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800af18:	2308      	movs	r3, #8
 800af1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af1e:	e1e4      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800af20:	2310      	movs	r3, #16
 800af22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af26:	e1e0      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800af28:	2320      	movs	r3, #32
 800af2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af2e:	e1dc      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800af30:	2340      	movs	r3, #64	; 0x40
 800af32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af36:	e1d8      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800af38:	2380      	movs	r3, #128	; 0x80
 800af3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af3e:	e1d4      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	4a51      	ldr	r2, [pc, #324]	; (800b08c <UART_SetConfig+0x344>)
 800af46:	4293      	cmp	r3, r2
 800af48:	d130      	bne.n	800afac <UART_SetConfig+0x264>
 800af4a:	4b4e      	ldr	r3, [pc, #312]	; (800b084 <UART_SetConfig+0x33c>)
 800af4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af4e:	f003 0307 	and.w	r3, r3, #7
 800af52:	2b05      	cmp	r3, #5
 800af54:	d826      	bhi.n	800afa4 <UART_SetConfig+0x25c>
 800af56:	a201      	add	r2, pc, #4	; (adr r2, 800af5c <UART_SetConfig+0x214>)
 800af58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af5c:	0800af75 	.word	0x0800af75
 800af60:	0800af7d 	.word	0x0800af7d
 800af64:	0800af85 	.word	0x0800af85
 800af68:	0800af8d 	.word	0x0800af8d
 800af6c:	0800af95 	.word	0x0800af95
 800af70:	0800af9d 	.word	0x0800af9d
 800af74:	2300      	movs	r3, #0
 800af76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af7a:	e1b6      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800af7c:	2304      	movs	r3, #4
 800af7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af82:	e1b2      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800af84:	2308      	movs	r3, #8
 800af86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af8a:	e1ae      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800af8c:	2310      	movs	r3, #16
 800af8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af92:	e1aa      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800af94:	2320      	movs	r3, #32
 800af96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af9a:	e1a6      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800af9c:	2340      	movs	r3, #64	; 0x40
 800af9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afa2:	e1a2      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800afa4:	2380      	movs	r3, #128	; 0x80
 800afa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afaa:	e19e      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a37      	ldr	r2, [pc, #220]	; (800b090 <UART_SetConfig+0x348>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d130      	bne.n	800b018 <UART_SetConfig+0x2d0>
 800afb6:	4b33      	ldr	r3, [pc, #204]	; (800b084 <UART_SetConfig+0x33c>)
 800afb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afba:	f003 0307 	and.w	r3, r3, #7
 800afbe:	2b05      	cmp	r3, #5
 800afc0:	d826      	bhi.n	800b010 <UART_SetConfig+0x2c8>
 800afc2:	a201      	add	r2, pc, #4	; (adr r2, 800afc8 <UART_SetConfig+0x280>)
 800afc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afc8:	0800afe1 	.word	0x0800afe1
 800afcc:	0800afe9 	.word	0x0800afe9
 800afd0:	0800aff1 	.word	0x0800aff1
 800afd4:	0800aff9 	.word	0x0800aff9
 800afd8:	0800b001 	.word	0x0800b001
 800afdc:	0800b009 	.word	0x0800b009
 800afe0:	2300      	movs	r3, #0
 800afe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afe6:	e180      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800afe8:	2304      	movs	r3, #4
 800afea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800afee:	e17c      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800aff0:	2308      	movs	r3, #8
 800aff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aff6:	e178      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800aff8:	2310      	movs	r3, #16
 800affa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800affe:	e174      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b000:	2320      	movs	r3, #32
 800b002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b006:	e170      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b008:	2340      	movs	r3, #64	; 0x40
 800b00a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b00e:	e16c      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b010:	2380      	movs	r3, #128	; 0x80
 800b012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b016:	e168      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a1d      	ldr	r2, [pc, #116]	; (800b094 <UART_SetConfig+0x34c>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d142      	bne.n	800b0a8 <UART_SetConfig+0x360>
 800b022:	4b18      	ldr	r3, [pc, #96]	; (800b084 <UART_SetConfig+0x33c>)
 800b024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b026:	f003 0307 	and.w	r3, r3, #7
 800b02a:	2b05      	cmp	r3, #5
 800b02c:	d838      	bhi.n	800b0a0 <UART_SetConfig+0x358>
 800b02e:	a201      	add	r2, pc, #4	; (adr r2, 800b034 <UART_SetConfig+0x2ec>)
 800b030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b034:	0800b04d 	.word	0x0800b04d
 800b038:	0800b055 	.word	0x0800b055
 800b03c:	0800b05d 	.word	0x0800b05d
 800b040:	0800b065 	.word	0x0800b065
 800b044:	0800b06d 	.word	0x0800b06d
 800b048:	0800b099 	.word	0x0800b099
 800b04c:	2300      	movs	r3, #0
 800b04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b052:	e14a      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b054:	2304      	movs	r3, #4
 800b056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b05a:	e146      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b05c:	2308      	movs	r3, #8
 800b05e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b062:	e142      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b064:	2310      	movs	r3, #16
 800b066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b06a:	e13e      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b06c:	2320      	movs	r3, #32
 800b06e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b072:	e13a      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b074:	cfff69f3 	.word	0xcfff69f3
 800b078:	58000c00 	.word	0x58000c00
 800b07c:	11fff4ff 	.word	0x11fff4ff
 800b080:	40011000 	.word	0x40011000
 800b084:	58024400 	.word	0x58024400
 800b088:	40004400 	.word	0x40004400
 800b08c:	40004800 	.word	0x40004800
 800b090:	40004c00 	.word	0x40004c00
 800b094:	40005000 	.word	0x40005000
 800b098:	2340      	movs	r3, #64	; 0x40
 800b09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b09e:	e124      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b0a0:	2380      	movs	r3, #128	; 0x80
 800b0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b0a6:	e120      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4acc      	ldr	r2, [pc, #816]	; (800b3e0 <UART_SetConfig+0x698>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d176      	bne.n	800b1a0 <UART_SetConfig+0x458>
 800b0b2:	4bcc      	ldr	r3, [pc, #816]	; (800b3e4 <UART_SetConfig+0x69c>)
 800b0b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b0ba:	2b28      	cmp	r3, #40	; 0x28
 800b0bc:	d86c      	bhi.n	800b198 <UART_SetConfig+0x450>
 800b0be:	a201      	add	r2, pc, #4	; (adr r2, 800b0c4 <UART_SetConfig+0x37c>)
 800b0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c4:	0800b169 	.word	0x0800b169
 800b0c8:	0800b199 	.word	0x0800b199
 800b0cc:	0800b199 	.word	0x0800b199
 800b0d0:	0800b199 	.word	0x0800b199
 800b0d4:	0800b199 	.word	0x0800b199
 800b0d8:	0800b199 	.word	0x0800b199
 800b0dc:	0800b199 	.word	0x0800b199
 800b0e0:	0800b199 	.word	0x0800b199
 800b0e4:	0800b171 	.word	0x0800b171
 800b0e8:	0800b199 	.word	0x0800b199
 800b0ec:	0800b199 	.word	0x0800b199
 800b0f0:	0800b199 	.word	0x0800b199
 800b0f4:	0800b199 	.word	0x0800b199
 800b0f8:	0800b199 	.word	0x0800b199
 800b0fc:	0800b199 	.word	0x0800b199
 800b100:	0800b199 	.word	0x0800b199
 800b104:	0800b179 	.word	0x0800b179
 800b108:	0800b199 	.word	0x0800b199
 800b10c:	0800b199 	.word	0x0800b199
 800b110:	0800b199 	.word	0x0800b199
 800b114:	0800b199 	.word	0x0800b199
 800b118:	0800b199 	.word	0x0800b199
 800b11c:	0800b199 	.word	0x0800b199
 800b120:	0800b199 	.word	0x0800b199
 800b124:	0800b181 	.word	0x0800b181
 800b128:	0800b199 	.word	0x0800b199
 800b12c:	0800b199 	.word	0x0800b199
 800b130:	0800b199 	.word	0x0800b199
 800b134:	0800b199 	.word	0x0800b199
 800b138:	0800b199 	.word	0x0800b199
 800b13c:	0800b199 	.word	0x0800b199
 800b140:	0800b199 	.word	0x0800b199
 800b144:	0800b189 	.word	0x0800b189
 800b148:	0800b199 	.word	0x0800b199
 800b14c:	0800b199 	.word	0x0800b199
 800b150:	0800b199 	.word	0x0800b199
 800b154:	0800b199 	.word	0x0800b199
 800b158:	0800b199 	.word	0x0800b199
 800b15c:	0800b199 	.word	0x0800b199
 800b160:	0800b199 	.word	0x0800b199
 800b164:	0800b191 	.word	0x0800b191
 800b168:	2301      	movs	r3, #1
 800b16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b16e:	e0bc      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b170:	2304      	movs	r3, #4
 800b172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b176:	e0b8      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b178:	2308      	movs	r3, #8
 800b17a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b17e:	e0b4      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b180:	2310      	movs	r3, #16
 800b182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b186:	e0b0      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b188:	2320      	movs	r3, #32
 800b18a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b18e:	e0ac      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b190:	2340      	movs	r3, #64	; 0x40
 800b192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b196:	e0a8      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b198:	2380      	movs	r3, #128	; 0x80
 800b19a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b19e:	e0a4      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a90      	ldr	r2, [pc, #576]	; (800b3e8 <UART_SetConfig+0x6a0>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d130      	bne.n	800b20c <UART_SetConfig+0x4c4>
 800b1aa:	4b8e      	ldr	r3, [pc, #568]	; (800b3e4 <UART_SetConfig+0x69c>)
 800b1ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ae:	f003 0307 	and.w	r3, r3, #7
 800b1b2:	2b05      	cmp	r3, #5
 800b1b4:	d826      	bhi.n	800b204 <UART_SetConfig+0x4bc>
 800b1b6:	a201      	add	r2, pc, #4	; (adr r2, 800b1bc <UART_SetConfig+0x474>)
 800b1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1bc:	0800b1d5 	.word	0x0800b1d5
 800b1c0:	0800b1dd 	.word	0x0800b1dd
 800b1c4:	0800b1e5 	.word	0x0800b1e5
 800b1c8:	0800b1ed 	.word	0x0800b1ed
 800b1cc:	0800b1f5 	.word	0x0800b1f5
 800b1d0:	0800b1fd 	.word	0x0800b1fd
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1da:	e086      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b1dc:	2304      	movs	r3, #4
 800b1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1e2:	e082      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b1e4:	2308      	movs	r3, #8
 800b1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1ea:	e07e      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b1ec:	2310      	movs	r3, #16
 800b1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1f2:	e07a      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b1f4:	2320      	movs	r3, #32
 800b1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1fa:	e076      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b1fc:	2340      	movs	r3, #64	; 0x40
 800b1fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b202:	e072      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b204:	2380      	movs	r3, #128	; 0x80
 800b206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b20a:	e06e      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a76      	ldr	r2, [pc, #472]	; (800b3ec <UART_SetConfig+0x6a4>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d130      	bne.n	800b278 <UART_SetConfig+0x530>
 800b216:	4b73      	ldr	r3, [pc, #460]	; (800b3e4 <UART_SetConfig+0x69c>)
 800b218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b21a:	f003 0307 	and.w	r3, r3, #7
 800b21e:	2b05      	cmp	r3, #5
 800b220:	d826      	bhi.n	800b270 <UART_SetConfig+0x528>
 800b222:	a201      	add	r2, pc, #4	; (adr r2, 800b228 <UART_SetConfig+0x4e0>)
 800b224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b228:	0800b241 	.word	0x0800b241
 800b22c:	0800b249 	.word	0x0800b249
 800b230:	0800b251 	.word	0x0800b251
 800b234:	0800b259 	.word	0x0800b259
 800b238:	0800b261 	.word	0x0800b261
 800b23c:	0800b269 	.word	0x0800b269
 800b240:	2300      	movs	r3, #0
 800b242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b246:	e050      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b248:	2304      	movs	r3, #4
 800b24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b24e:	e04c      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b250:	2308      	movs	r3, #8
 800b252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b256:	e048      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b258:	2310      	movs	r3, #16
 800b25a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b25e:	e044      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b260:	2320      	movs	r3, #32
 800b262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b266:	e040      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b268:	2340      	movs	r3, #64	; 0x40
 800b26a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b26e:	e03c      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b270:	2380      	movs	r3, #128	; 0x80
 800b272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b276:	e038      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a5c      	ldr	r2, [pc, #368]	; (800b3f0 <UART_SetConfig+0x6a8>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d130      	bne.n	800b2e4 <UART_SetConfig+0x59c>
 800b282:	4b58      	ldr	r3, [pc, #352]	; (800b3e4 <UART_SetConfig+0x69c>)
 800b284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b286:	f003 0307 	and.w	r3, r3, #7
 800b28a:	2b05      	cmp	r3, #5
 800b28c:	d826      	bhi.n	800b2dc <UART_SetConfig+0x594>
 800b28e:	a201      	add	r2, pc, #4	; (adr r2, 800b294 <UART_SetConfig+0x54c>)
 800b290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b294:	0800b2ad 	.word	0x0800b2ad
 800b298:	0800b2b5 	.word	0x0800b2b5
 800b29c:	0800b2bd 	.word	0x0800b2bd
 800b2a0:	0800b2c5 	.word	0x0800b2c5
 800b2a4:	0800b2cd 	.word	0x0800b2cd
 800b2a8:	0800b2d5 	.word	0x0800b2d5
 800b2ac:	2302      	movs	r3, #2
 800b2ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2b2:	e01a      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b2b4:	2304      	movs	r3, #4
 800b2b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ba:	e016      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b2bc:	2308      	movs	r3, #8
 800b2be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2c2:	e012      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b2c4:	2310      	movs	r3, #16
 800b2c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2ca:	e00e      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b2cc:	2320      	movs	r3, #32
 800b2ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2d2:	e00a      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b2d4:	2340      	movs	r3, #64	; 0x40
 800b2d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2da:	e006      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b2dc:	2380      	movs	r3, #128	; 0x80
 800b2de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b2e2:	e002      	b.n	800b2ea <UART_SetConfig+0x5a2>
 800b2e4:	2380      	movs	r3, #128	; 0x80
 800b2e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	4a40      	ldr	r2, [pc, #256]	; (800b3f0 <UART_SetConfig+0x6a8>)
 800b2f0:	4293      	cmp	r3, r2
 800b2f2:	f040 80ef 	bne.w	800b4d4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b2f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b2fa:	2b20      	cmp	r3, #32
 800b2fc:	dc46      	bgt.n	800b38c <UART_SetConfig+0x644>
 800b2fe:	2b02      	cmp	r3, #2
 800b300:	f2c0 8081 	blt.w	800b406 <UART_SetConfig+0x6be>
 800b304:	3b02      	subs	r3, #2
 800b306:	2b1e      	cmp	r3, #30
 800b308:	d87d      	bhi.n	800b406 <UART_SetConfig+0x6be>
 800b30a:	a201      	add	r2, pc, #4	; (adr r2, 800b310 <UART_SetConfig+0x5c8>)
 800b30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b310:	0800b393 	.word	0x0800b393
 800b314:	0800b407 	.word	0x0800b407
 800b318:	0800b39b 	.word	0x0800b39b
 800b31c:	0800b407 	.word	0x0800b407
 800b320:	0800b407 	.word	0x0800b407
 800b324:	0800b407 	.word	0x0800b407
 800b328:	0800b3ab 	.word	0x0800b3ab
 800b32c:	0800b407 	.word	0x0800b407
 800b330:	0800b407 	.word	0x0800b407
 800b334:	0800b407 	.word	0x0800b407
 800b338:	0800b407 	.word	0x0800b407
 800b33c:	0800b407 	.word	0x0800b407
 800b340:	0800b407 	.word	0x0800b407
 800b344:	0800b407 	.word	0x0800b407
 800b348:	0800b3bb 	.word	0x0800b3bb
 800b34c:	0800b407 	.word	0x0800b407
 800b350:	0800b407 	.word	0x0800b407
 800b354:	0800b407 	.word	0x0800b407
 800b358:	0800b407 	.word	0x0800b407
 800b35c:	0800b407 	.word	0x0800b407
 800b360:	0800b407 	.word	0x0800b407
 800b364:	0800b407 	.word	0x0800b407
 800b368:	0800b407 	.word	0x0800b407
 800b36c:	0800b407 	.word	0x0800b407
 800b370:	0800b407 	.word	0x0800b407
 800b374:	0800b407 	.word	0x0800b407
 800b378:	0800b407 	.word	0x0800b407
 800b37c:	0800b407 	.word	0x0800b407
 800b380:	0800b407 	.word	0x0800b407
 800b384:	0800b407 	.word	0x0800b407
 800b388:	0800b3f9 	.word	0x0800b3f9
 800b38c:	2b40      	cmp	r3, #64	; 0x40
 800b38e:	d036      	beq.n	800b3fe <UART_SetConfig+0x6b6>
 800b390:	e039      	b.n	800b406 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b392:	f7fc ff09 	bl	80081a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800b396:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b398:	e03b      	b.n	800b412 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b39a:	f107 0314 	add.w	r3, r7, #20
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7fc ff18 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b3a4:	69bb      	ldr	r3, [r7, #24]
 800b3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3a8:	e033      	b.n	800b412 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3aa:	f107 0308 	add.w	r3, r7, #8
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7fd f864 	bl	800847c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3b8:	e02b      	b.n	800b412 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3ba:	4b0a      	ldr	r3, [pc, #40]	; (800b3e4 <UART_SetConfig+0x69c>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f003 0320 	and.w	r3, r3, #32
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d009      	beq.n	800b3da <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b3c6:	4b07      	ldr	r3, [pc, #28]	; (800b3e4 <UART_SetConfig+0x69c>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	08db      	lsrs	r3, r3, #3
 800b3cc:	f003 0303 	and.w	r3, r3, #3
 800b3d0:	4a08      	ldr	r2, [pc, #32]	; (800b3f4 <UART_SetConfig+0x6ac>)
 800b3d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b3d8:	e01b      	b.n	800b412 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800b3da:	4b06      	ldr	r3, [pc, #24]	; (800b3f4 <UART_SetConfig+0x6ac>)
 800b3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3de:	e018      	b.n	800b412 <UART_SetConfig+0x6ca>
 800b3e0:	40011400 	.word	0x40011400
 800b3e4:	58024400 	.word	0x58024400
 800b3e8:	40007800 	.word	0x40007800
 800b3ec:	40007c00 	.word	0x40007c00
 800b3f0:	58000c00 	.word	0x58000c00
 800b3f4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b3f8:	4bc4      	ldr	r3, [pc, #784]	; (800b70c <UART_SetConfig+0x9c4>)
 800b3fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b3fc:	e009      	b.n	800b412 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b402:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b404:	e005      	b.n	800b412 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800b406:	2300      	movs	r3, #0
 800b408:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b410:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b414:	2b00      	cmp	r3, #0
 800b416:	f000 81da 	beq.w	800b7ce <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41e:	4abc      	ldr	r2, [pc, #752]	; (800b710 <UART_SetConfig+0x9c8>)
 800b420:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b424:	461a      	mov	r2, r3
 800b426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b428:	fbb3 f3f2 	udiv	r3, r3, r2
 800b42c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	685a      	ldr	r2, [r3, #4]
 800b432:	4613      	mov	r3, r2
 800b434:	005b      	lsls	r3, r3, #1
 800b436:	4413      	add	r3, r2
 800b438:	6a3a      	ldr	r2, [r7, #32]
 800b43a:	429a      	cmp	r2, r3
 800b43c:	d305      	bcc.n	800b44a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b444:	6a3a      	ldr	r2, [r7, #32]
 800b446:	429a      	cmp	r2, r3
 800b448:	d903      	bls.n	800b452 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b450:	e1bd      	b.n	800b7ce <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b454:	4618      	mov	r0, r3
 800b456:	f04f 0100 	mov.w	r1, #0
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b45e:	4aac      	ldr	r2, [pc, #688]	; (800b710 <UART_SetConfig+0x9c8>)
 800b460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b464:	b29a      	uxth	r2, r3
 800b466:	f04f 0300 	mov.w	r3, #0
 800b46a:	f7f4 ff91 	bl	8000390 <__aeabi_uldivmod>
 800b46e:	4602      	mov	r2, r0
 800b470:	460b      	mov	r3, r1
 800b472:	4610      	mov	r0, r2
 800b474:	4619      	mov	r1, r3
 800b476:	f04f 0200 	mov.w	r2, #0
 800b47a:	f04f 0300 	mov.w	r3, #0
 800b47e:	020b      	lsls	r3, r1, #8
 800b480:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b484:	0202      	lsls	r2, r0, #8
 800b486:	6879      	ldr	r1, [r7, #4]
 800b488:	6849      	ldr	r1, [r1, #4]
 800b48a:	0849      	lsrs	r1, r1, #1
 800b48c:	4608      	mov	r0, r1
 800b48e:	f04f 0100 	mov.w	r1, #0
 800b492:	1814      	adds	r4, r2, r0
 800b494:	eb43 0501 	adc.w	r5, r3, r1
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	685b      	ldr	r3, [r3, #4]
 800b49c:	461a      	mov	r2, r3
 800b49e:	f04f 0300 	mov.w	r3, #0
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	4629      	mov	r1, r5
 800b4a6:	f7f4 ff73 	bl	8000390 <__aeabi_uldivmod>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b4b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b4b8:	d308      	bcc.n	800b4cc <UART_SetConfig+0x784>
 800b4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b4c0:	d204      	bcs.n	800b4cc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4c8:	60da      	str	r2, [r3, #12]
 800b4ca:	e180      	b.n	800b7ce <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b4d2:	e17c      	b.n	800b7ce <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	69db      	ldr	r3, [r3, #28]
 800b4d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b4dc:	f040 80be 	bne.w	800b65c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800b4e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4e4:	2b20      	cmp	r3, #32
 800b4e6:	dc49      	bgt.n	800b57c <UART_SetConfig+0x834>
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	db7c      	blt.n	800b5e6 <UART_SetConfig+0x89e>
 800b4ec:	2b20      	cmp	r3, #32
 800b4ee:	d87a      	bhi.n	800b5e6 <UART_SetConfig+0x89e>
 800b4f0:	a201      	add	r2, pc, #4	; (adr r2, 800b4f8 <UART_SetConfig+0x7b0>)
 800b4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f6:	bf00      	nop
 800b4f8:	0800b583 	.word	0x0800b583
 800b4fc:	0800b58b 	.word	0x0800b58b
 800b500:	0800b5e7 	.word	0x0800b5e7
 800b504:	0800b5e7 	.word	0x0800b5e7
 800b508:	0800b593 	.word	0x0800b593
 800b50c:	0800b5e7 	.word	0x0800b5e7
 800b510:	0800b5e7 	.word	0x0800b5e7
 800b514:	0800b5e7 	.word	0x0800b5e7
 800b518:	0800b5a3 	.word	0x0800b5a3
 800b51c:	0800b5e7 	.word	0x0800b5e7
 800b520:	0800b5e7 	.word	0x0800b5e7
 800b524:	0800b5e7 	.word	0x0800b5e7
 800b528:	0800b5e7 	.word	0x0800b5e7
 800b52c:	0800b5e7 	.word	0x0800b5e7
 800b530:	0800b5e7 	.word	0x0800b5e7
 800b534:	0800b5e7 	.word	0x0800b5e7
 800b538:	0800b5b3 	.word	0x0800b5b3
 800b53c:	0800b5e7 	.word	0x0800b5e7
 800b540:	0800b5e7 	.word	0x0800b5e7
 800b544:	0800b5e7 	.word	0x0800b5e7
 800b548:	0800b5e7 	.word	0x0800b5e7
 800b54c:	0800b5e7 	.word	0x0800b5e7
 800b550:	0800b5e7 	.word	0x0800b5e7
 800b554:	0800b5e7 	.word	0x0800b5e7
 800b558:	0800b5e7 	.word	0x0800b5e7
 800b55c:	0800b5e7 	.word	0x0800b5e7
 800b560:	0800b5e7 	.word	0x0800b5e7
 800b564:	0800b5e7 	.word	0x0800b5e7
 800b568:	0800b5e7 	.word	0x0800b5e7
 800b56c:	0800b5e7 	.word	0x0800b5e7
 800b570:	0800b5e7 	.word	0x0800b5e7
 800b574:	0800b5e7 	.word	0x0800b5e7
 800b578:	0800b5d9 	.word	0x0800b5d9
 800b57c:	2b40      	cmp	r3, #64	; 0x40
 800b57e:	d02e      	beq.n	800b5de <UART_SetConfig+0x896>
 800b580:	e031      	b.n	800b5e6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b582:	f7fb fea5 	bl	80072d0 <HAL_RCC_GetPCLK1Freq>
 800b586:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b588:	e033      	b.n	800b5f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b58a:	f7fb feb7 	bl	80072fc <HAL_RCC_GetPCLK2Freq>
 800b58e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b590:	e02f      	b.n	800b5f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b592:	f107 0314 	add.w	r3, r7, #20
 800b596:	4618      	mov	r0, r3
 800b598:	f7fc fe1c 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5a0:	e027      	b.n	800b5f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5a2:	f107 0308 	add.w	r3, r7, #8
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7fc ff68 	bl	800847c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5b0:	e01f      	b.n	800b5f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5b2:	4b58      	ldr	r3, [pc, #352]	; (800b714 <UART_SetConfig+0x9cc>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f003 0320 	and.w	r3, r3, #32
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d009      	beq.n	800b5d2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5be:	4b55      	ldr	r3, [pc, #340]	; (800b714 <UART_SetConfig+0x9cc>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	08db      	lsrs	r3, r3, #3
 800b5c4:	f003 0303 	and.w	r3, r3, #3
 800b5c8:	4a53      	ldr	r2, [pc, #332]	; (800b718 <UART_SetConfig+0x9d0>)
 800b5ca:	fa22 f303 	lsr.w	r3, r2, r3
 800b5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5d0:	e00f      	b.n	800b5f2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b5d2:	4b51      	ldr	r3, [pc, #324]	; (800b718 <UART_SetConfig+0x9d0>)
 800b5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5d6:	e00c      	b.n	800b5f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b5d8:	4b4c      	ldr	r3, [pc, #304]	; (800b70c <UART_SetConfig+0x9c4>)
 800b5da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5dc:	e009      	b.n	800b5f2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b5e4:	e005      	b.n	800b5f2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b5f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 80ea 	beq.w	800b7ce <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fe:	4a44      	ldr	r2, [pc, #272]	; (800b710 <UART_SetConfig+0x9c8>)
 800b600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b604:	461a      	mov	r2, r3
 800b606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b608:	fbb3 f3f2 	udiv	r3, r3, r2
 800b60c:	005a      	lsls	r2, r3, #1
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	085b      	lsrs	r3, r3, #1
 800b614:	441a      	add	r2, r3
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	685b      	ldr	r3, [r3, #4]
 800b61a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b61e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	2b0f      	cmp	r3, #15
 800b624:	d916      	bls.n	800b654 <UART_SetConfig+0x90c>
 800b626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b62c:	d212      	bcs.n	800b654 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b630:	b29b      	uxth	r3, r3
 800b632:	f023 030f 	bic.w	r3, r3, #15
 800b636:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63a:	085b      	lsrs	r3, r3, #1
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	f003 0307 	and.w	r3, r3, #7
 800b642:	b29a      	uxth	r2, r3
 800b644:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b646:	4313      	orrs	r3, r2
 800b648:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b650:	60da      	str	r2, [r3, #12]
 800b652:	e0bc      	b.n	800b7ce <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b65a:	e0b8      	b.n	800b7ce <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b65c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b660:	2b20      	cmp	r3, #32
 800b662:	dc4b      	bgt.n	800b6fc <UART_SetConfig+0x9b4>
 800b664:	2b00      	cmp	r3, #0
 800b666:	f2c0 8087 	blt.w	800b778 <UART_SetConfig+0xa30>
 800b66a:	2b20      	cmp	r3, #32
 800b66c:	f200 8084 	bhi.w	800b778 <UART_SetConfig+0xa30>
 800b670:	a201      	add	r2, pc, #4	; (adr r2, 800b678 <UART_SetConfig+0x930>)
 800b672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b676:	bf00      	nop
 800b678:	0800b703 	.word	0x0800b703
 800b67c:	0800b71d 	.word	0x0800b71d
 800b680:	0800b779 	.word	0x0800b779
 800b684:	0800b779 	.word	0x0800b779
 800b688:	0800b725 	.word	0x0800b725
 800b68c:	0800b779 	.word	0x0800b779
 800b690:	0800b779 	.word	0x0800b779
 800b694:	0800b779 	.word	0x0800b779
 800b698:	0800b735 	.word	0x0800b735
 800b69c:	0800b779 	.word	0x0800b779
 800b6a0:	0800b779 	.word	0x0800b779
 800b6a4:	0800b779 	.word	0x0800b779
 800b6a8:	0800b779 	.word	0x0800b779
 800b6ac:	0800b779 	.word	0x0800b779
 800b6b0:	0800b779 	.word	0x0800b779
 800b6b4:	0800b779 	.word	0x0800b779
 800b6b8:	0800b745 	.word	0x0800b745
 800b6bc:	0800b779 	.word	0x0800b779
 800b6c0:	0800b779 	.word	0x0800b779
 800b6c4:	0800b779 	.word	0x0800b779
 800b6c8:	0800b779 	.word	0x0800b779
 800b6cc:	0800b779 	.word	0x0800b779
 800b6d0:	0800b779 	.word	0x0800b779
 800b6d4:	0800b779 	.word	0x0800b779
 800b6d8:	0800b779 	.word	0x0800b779
 800b6dc:	0800b779 	.word	0x0800b779
 800b6e0:	0800b779 	.word	0x0800b779
 800b6e4:	0800b779 	.word	0x0800b779
 800b6e8:	0800b779 	.word	0x0800b779
 800b6ec:	0800b779 	.word	0x0800b779
 800b6f0:	0800b779 	.word	0x0800b779
 800b6f4:	0800b779 	.word	0x0800b779
 800b6f8:	0800b76b 	.word	0x0800b76b
 800b6fc:	2b40      	cmp	r3, #64	; 0x40
 800b6fe:	d037      	beq.n	800b770 <UART_SetConfig+0xa28>
 800b700:	e03a      	b.n	800b778 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b702:	f7fb fde5 	bl	80072d0 <HAL_RCC_GetPCLK1Freq>
 800b706:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b708:	e03c      	b.n	800b784 <UART_SetConfig+0xa3c>
 800b70a:	bf00      	nop
 800b70c:	003d0900 	.word	0x003d0900
 800b710:	0800ea44 	.word	0x0800ea44
 800b714:	58024400 	.word	0x58024400
 800b718:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b71c:	f7fb fdee 	bl	80072fc <HAL_RCC_GetPCLK2Freq>
 800b720:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b722:	e02f      	b.n	800b784 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b724:	f107 0314 	add.w	r3, r7, #20
 800b728:	4618      	mov	r0, r3
 800b72a:	f7fc fd53 	bl	80081d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b732:	e027      	b.n	800b784 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b734:	f107 0308 	add.w	r3, r7, #8
 800b738:	4618      	mov	r0, r3
 800b73a:	f7fc fe9f 	bl	800847c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b742:	e01f      	b.n	800b784 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b744:	4b2c      	ldr	r3, [pc, #176]	; (800b7f8 <UART_SetConfig+0xab0>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f003 0320 	and.w	r3, r3, #32
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d009      	beq.n	800b764 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b750:	4b29      	ldr	r3, [pc, #164]	; (800b7f8 <UART_SetConfig+0xab0>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	08db      	lsrs	r3, r3, #3
 800b756:	f003 0303 	and.w	r3, r3, #3
 800b75a:	4a28      	ldr	r2, [pc, #160]	; (800b7fc <UART_SetConfig+0xab4>)
 800b75c:	fa22 f303 	lsr.w	r3, r2, r3
 800b760:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b762:	e00f      	b.n	800b784 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b764:	4b25      	ldr	r3, [pc, #148]	; (800b7fc <UART_SetConfig+0xab4>)
 800b766:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b768:	e00c      	b.n	800b784 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b76a:	4b25      	ldr	r3, [pc, #148]	; (800b800 <UART_SetConfig+0xab8>)
 800b76c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b76e:	e009      	b.n	800b784 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b770:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b774:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b776:	e005      	b.n	800b784 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b778:	2300      	movs	r3, #0
 800b77a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b782:	bf00      	nop
    }

    if (pclk != 0U)
 800b784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b786:	2b00      	cmp	r3, #0
 800b788:	d021      	beq.n	800b7ce <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78e:	4a1d      	ldr	r2, [pc, #116]	; (800b804 <UART_SetConfig+0xabc>)
 800b790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b794:	461a      	mov	r2, r3
 800b796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b798:	fbb3 f2f2 	udiv	r2, r3, r2
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	085b      	lsrs	r3, r3, #1
 800b7a2:	441a      	add	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	685b      	ldr	r3, [r3, #4]
 800b7a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7ac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b0:	2b0f      	cmp	r3, #15
 800b7b2:	d909      	bls.n	800b7c8 <UART_SetConfig+0xa80>
 800b7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7ba:	d205      	bcs.n	800b7c8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b7bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	60da      	str	r2, [r3, #12]
 800b7c6:	e002      	b.n	800b7ce <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2201      	movs	r2, #1
 800b7d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b7ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3738      	adds	r7, #56	; 0x38
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bdb0      	pop	{r4, r5, r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	58024400 	.word	0x58024400
 800b7fc:	03d09000 	.word	0x03d09000
 800b800:	003d0900 	.word	0x003d0900
 800b804:	0800ea44 	.word	0x0800ea44

0800b808 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b808:	b480      	push	{r7}
 800b80a:	b083      	sub	sp, #12
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b814:	f003 0301 	and.w	r3, r3, #1
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00a      	beq.n	800b832 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	430a      	orrs	r2, r1
 800b830:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b836:	f003 0302 	and.w	r3, r3, #2
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00a      	beq.n	800b854 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	430a      	orrs	r2, r1
 800b852:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b858:	f003 0304 	and.w	r3, r3, #4
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00a      	beq.n	800b876 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	430a      	orrs	r2, r1
 800b874:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b87a:	f003 0308 	and.w	r3, r3, #8
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d00a      	beq.n	800b898 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	430a      	orrs	r2, r1
 800b896:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b89c:	f003 0310 	and.w	r3, r3, #16
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d00a      	beq.n	800b8ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	430a      	orrs	r2, r1
 800b8b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8be:	f003 0320 	and.w	r3, r3, #32
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00a      	beq.n	800b8dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	430a      	orrs	r2, r1
 800b8da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d01a      	beq.n	800b91e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	430a      	orrs	r2, r1
 800b8fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b906:	d10a      	bne.n	800b91e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	430a      	orrs	r2, r1
 800b91c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00a      	beq.n	800b940 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	430a      	orrs	r2, r1
 800b93e:	605a      	str	r2, [r3, #4]
  }
}
 800b940:	bf00      	nop
 800b942:	370c      	adds	r7, #12
 800b944:	46bd      	mov	sp, r7
 800b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94a:	4770      	bx	lr

0800b94c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b086      	sub	sp, #24
 800b950:	af02      	add	r7, sp, #8
 800b952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2200      	movs	r2, #0
 800b958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b95c:	f7f7 fa9c 	bl	8002e98 <HAL_GetTick>
 800b960:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 0308 	and.w	r3, r3, #8
 800b96c:	2b08      	cmp	r3, #8
 800b96e:	d10e      	bne.n	800b98e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b974:	9300      	str	r3, [sp, #0]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 f82f 	bl	800b9e2 <UART_WaitOnFlagUntilTimeout>
 800b984:	4603      	mov	r3, r0
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b98a:	2303      	movs	r3, #3
 800b98c:	e025      	b.n	800b9da <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b04      	cmp	r3, #4
 800b99a:	d10e      	bne.n	800b9ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b99c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9a0:	9300      	str	r3, [sp, #0]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 f819 	bl	800b9e2 <UART_WaitOnFlagUntilTimeout>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d001      	beq.n	800b9ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	e00f      	b.n	800b9da <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2220      	movs	r2, #32
 800b9be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2220      	movs	r2, #32
 800b9c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b9d8:	2300      	movs	r3, #0
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3710      	adds	r7, #16
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b09c      	sub	sp, #112	; 0x70
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	60f8      	str	r0, [r7, #12]
 800b9ea:	60b9      	str	r1, [r7, #8]
 800b9ec:	603b      	str	r3, [r7, #0]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9f2:	e0a9      	b.n	800bb48 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9fa:	f000 80a5 	beq.w	800bb48 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9fe:	f7f7 fa4b 	bl	8002e98 <HAL_GetTick>
 800ba02:	4602      	mov	r2, r0
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	1ad3      	subs	r3, r2, r3
 800ba08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d302      	bcc.n	800ba14 <UART_WaitOnFlagUntilTimeout+0x32>
 800ba0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d140      	bne.n	800ba96 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba1c:	e853 3f00 	ldrex	r3, [r3]
 800ba20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ba22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ba28:	667b      	str	r3, [r7, #100]	; 0x64
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba32:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba3a:	e841 2300 	strex	r3, r2, [r1]
 800ba3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ba40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1e6      	bne.n	800ba14 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	3308      	adds	r3, #8
 800ba4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba50:	e853 3f00 	ldrex	r3, [r3]
 800ba54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba58:	f023 0301 	bic.w	r3, r3, #1
 800ba5c:	663b      	str	r3, [r7, #96]	; 0x60
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	3308      	adds	r3, #8
 800ba64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ba66:	64ba      	str	r2, [r7, #72]	; 0x48
 800ba68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba6e:	e841 2300 	strex	r3, r2, [r1]
 800ba72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ba74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1e5      	bne.n	800ba46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2220      	movs	r2, #32
 800ba7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2220      	movs	r2, #32
 800ba86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ba92:	2303      	movs	r3, #3
 800ba94:	e069      	b.n	800bb6a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f003 0304 	and.w	r3, r3, #4
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d051      	beq.n	800bb48 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	69db      	ldr	r3, [r3, #28]
 800baaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800baae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bab2:	d149      	bne.n	800bb48 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800babc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bac6:	e853 3f00 	ldrex	r3, [r3]
 800baca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bace:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bad2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	461a      	mov	r2, r3
 800bada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800badc:	637b      	str	r3, [r7, #52]	; 0x34
 800bade:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bae2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bae4:	e841 2300 	strex	r3, r2, [r1]
 800bae8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800baea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baec:	2b00      	cmp	r3, #0
 800baee:	d1e6      	bne.n	800babe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3308      	adds	r3, #8
 800baf6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf8:	697b      	ldr	r3, [r7, #20]
 800bafa:	e853 3f00 	ldrex	r3, [r3]
 800bafe:	613b      	str	r3, [r7, #16]
   return(result);
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	f023 0301 	bic.w	r3, r3, #1
 800bb06:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	3308      	adds	r3, #8
 800bb0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb10:	623a      	str	r2, [r7, #32]
 800bb12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb14:	69f9      	ldr	r1, [r7, #28]
 800bb16:	6a3a      	ldr	r2, [r7, #32]
 800bb18:	e841 2300 	strex	r3, r2, [r1]
 800bb1c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d1e5      	bne.n	800baf0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2220      	movs	r2, #32
 800bb28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	2220      	movs	r2, #32
 800bb30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2220      	movs	r2, #32
 800bb38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	2200      	movs	r2, #0
 800bb40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bb44:	2303      	movs	r3, #3
 800bb46:	e010      	b.n	800bb6a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	69da      	ldr	r2, [r3, #28]
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	4013      	ands	r3, r2
 800bb52:	68ba      	ldr	r2, [r7, #8]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	bf0c      	ite	eq
 800bb58:	2301      	moveq	r3, #1
 800bb5a:	2300      	movne	r3, #0
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	461a      	mov	r2, r3
 800bb60:	79fb      	ldrb	r3, [r7, #7]
 800bb62:	429a      	cmp	r2, r3
 800bb64:	f43f af46 	beq.w	800b9f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3770      	adds	r7, #112	; 0x70
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bd80      	pop	{r7, pc}

0800bb72 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bb72:	b480      	push	{r7}
 800bb74:	b08f      	sub	sp, #60	; 0x3c
 800bb76:	af00      	add	r7, sp, #0
 800bb78:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb80:	6a3b      	ldr	r3, [r7, #32]
 800bb82:	e853 3f00 	ldrex	r3, [r3]
 800bb86:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bb8e:	637b      	str	r3, [r7, #52]	; 0x34
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	461a      	mov	r2, r3
 800bb96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb9a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bba0:	e841 2300 	strex	r3, r2, [r1]
 800bba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d1e6      	bne.n	800bb7a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	3308      	adds	r3, #8
 800bbb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	e853 3f00 	ldrex	r3, [r3]
 800bbba:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbbc:	68bb      	ldr	r3, [r7, #8]
 800bbbe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800bbc2:	633b      	str	r3, [r7, #48]	; 0x30
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	3308      	adds	r3, #8
 800bbca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbcc:	61ba      	str	r2, [r7, #24]
 800bbce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd0:	6979      	ldr	r1, [r7, #20]
 800bbd2:	69ba      	ldr	r2, [r7, #24]
 800bbd4:	e841 2300 	strex	r3, r2, [r1]
 800bbd8:	613b      	str	r3, [r7, #16]
   return(result);
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1e5      	bne.n	800bbac <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2220      	movs	r2, #32
 800bbe4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800bbe8:	bf00      	nop
 800bbea:	373c      	adds	r7, #60	; 0x3c
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b095      	sub	sp, #84	; 0x54
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc04:	e853 3f00 	ldrex	r3, [r3]
 800bc08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc10:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	461a      	mov	r2, r3
 800bc18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc1a:	643b      	str	r3, [r7, #64]	; 0x40
 800bc1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc22:	e841 2300 	strex	r3, r2, [r1]
 800bc26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d1e6      	bne.n	800bbfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	3308      	adds	r3, #8
 800bc34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc36:	6a3b      	ldr	r3, [r7, #32]
 800bc38:	e853 3f00 	ldrex	r3, [r3]
 800bc3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc3e:	69fa      	ldr	r2, [r7, #28]
 800bc40:	4b1e      	ldr	r3, [pc, #120]	; (800bcbc <UART_EndRxTransfer+0xc8>)
 800bc42:	4013      	ands	r3, r2
 800bc44:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	3308      	adds	r3, #8
 800bc4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc56:	e841 2300 	strex	r3, r2, [r1]
 800bc5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d1e5      	bne.n	800bc2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d118      	bne.n	800bc9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	e853 3f00 	ldrex	r3, [r3]
 800bc76:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	f023 0310 	bic.w	r3, r3, #16
 800bc7e:	647b      	str	r3, [r7, #68]	; 0x44
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	461a      	mov	r2, r3
 800bc86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc88:	61bb      	str	r3, [r7, #24]
 800bc8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc8c:	6979      	ldr	r1, [r7, #20]
 800bc8e:	69ba      	ldr	r2, [r7, #24]
 800bc90:	e841 2300 	strex	r3, r2, [r1]
 800bc94:	613b      	str	r3, [r7, #16]
   return(result);
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d1e6      	bne.n	800bc6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2220      	movs	r2, #32
 800bca0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	671a      	str	r2, [r3, #112]	; 0x70
}
 800bcb0:	bf00      	nop
 800bcb2:	3754      	adds	r7, #84	; 0x54
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr
 800bcbc:	effffffe 	.word	0xeffffffe

0800bcc0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b090      	sub	sp, #64	; 0x40
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bccc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcd6:	d037      	beq.n	800bd48 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800bcd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcda:	2200      	movs	r2, #0
 800bcdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	3308      	adds	r3, #8
 800bce6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcea:	e853 3f00 	ldrex	r3, [r3]
 800bcee:	623b      	str	r3, [r7, #32]
   return(result);
 800bcf0:	6a3b      	ldr	r3, [r7, #32]
 800bcf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcf6:	63bb      	str	r3, [r7, #56]	; 0x38
 800bcf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	3308      	adds	r3, #8
 800bcfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bd00:	633a      	str	r2, [r7, #48]	; 0x30
 800bd02:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd08:	e841 2300 	strex	r3, r2, [r1]
 800bd0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1e5      	bne.n	800bce0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bd14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1a:	693b      	ldr	r3, [r7, #16]
 800bd1c:	e853 3f00 	ldrex	r3, [r3]
 800bd20:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd28:	637b      	str	r3, [r7, #52]	; 0x34
 800bd2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	461a      	mov	r2, r3
 800bd30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd32:	61fb      	str	r3, [r7, #28]
 800bd34:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd36:	69b9      	ldr	r1, [r7, #24]
 800bd38:	69fa      	ldr	r2, [r7, #28]
 800bd3a:	e841 2300 	strex	r3, r2, [r1]
 800bd3e:	617b      	str	r3, [r7, #20]
   return(result);
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d1e6      	bne.n	800bd14 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bd46:	e002      	b.n	800bd4e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800bd48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bd4a:	f7fe ffd3 	bl	800acf4 <HAL_UART_TxCpltCallback>
}
 800bd4e:	bf00      	nop
 800bd50:	3740      	adds	r7, #64	; 0x40
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b084      	sub	sp, #16
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd62:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bd64:	68f8      	ldr	r0, [r7, #12]
 800bd66:	f7fe ffcf 	bl	800ad08 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd6a:	bf00      	nop
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}

0800bd72 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd72:	b580      	push	{r7, lr}
 800bd74:	b086      	sub	sp, #24
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd7e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd86:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd8e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd9a:	2b80      	cmp	r3, #128	; 0x80
 800bd9c:	d109      	bne.n	800bdb2 <UART_DMAError+0x40>
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	2b21      	cmp	r3, #33	; 0x21
 800bda2:	d106      	bne.n	800bdb2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	2200      	movs	r2, #0
 800bda8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800bdac:	6978      	ldr	r0, [r7, #20]
 800bdae:	f7ff fee0 	bl	800bb72 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdbc:	2b40      	cmp	r3, #64	; 0x40
 800bdbe:	d109      	bne.n	800bdd4 <UART_DMAError+0x62>
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2b22      	cmp	r3, #34	; 0x22
 800bdc4:	d106      	bne.n	800bdd4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800bdce:	6978      	ldr	r0, [r7, #20]
 800bdd0:	f7ff ff10 	bl	800bbf4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdda:	f043 0210 	orr.w	r2, r3, #16
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bde4:	6978      	ldr	r0, [r7, #20]
 800bde6:	f7fe ff99 	bl	800ad1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdea:	bf00      	nop
 800bdec:	3718      	adds	r7, #24
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bdf2:	b580      	push	{r7, lr}
 800bdf4:	b084      	sub	sp, #16
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	2200      	movs	r2, #0
 800be04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be10:	68f8      	ldr	r0, [r7, #12]
 800be12:	f7fe ff83 	bl	800ad1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be16:	bf00      	nop
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be1e:	b580      	push	{r7, lr}
 800be20:	b088      	sub	sp, #32
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	e853 3f00 	ldrex	r3, [r3]
 800be32:	60bb      	str	r3, [r7, #8]
   return(result);
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be3a:	61fb      	str	r3, [r7, #28]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	461a      	mov	r2, r3
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	61bb      	str	r3, [r7, #24]
 800be46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be48:	6979      	ldr	r1, [r7, #20]
 800be4a:	69ba      	ldr	r2, [r7, #24]
 800be4c:	e841 2300 	strex	r3, r2, [r1]
 800be50:	613b      	str	r3, [r7, #16]
   return(result);
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1e6      	bne.n	800be26 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2220      	movs	r2, #32
 800be5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2200      	movs	r2, #0
 800be64:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7fe ff44 	bl	800acf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be6c:	bf00      	nop
 800be6e:	3720      	adds	r7, #32
 800be70:	46bd      	mov	sp, r7
 800be72:	bd80      	pop	{r7, pc}

0800be74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800be7c:	bf00      	nop
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800be88:	b480      	push	{r7}
 800be8a:	b083      	sub	sp, #12
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800be90:	bf00      	nop
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bea4:	bf00      	nop
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d101      	bne.n	800bec6 <HAL_UARTEx_EnableFifoMode+0x16>
 800bec2:	2302      	movs	r3, #2
 800bec4:	e02b      	b.n	800bf1e <HAL_UARTEx_EnableFifoMode+0x6e>
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2201      	movs	r2, #1
 800beca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2224      	movs	r2, #36	; 0x24
 800bed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	681a      	ldr	r2, [r3, #0]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f022 0201 	bic.w	r2, r2, #1
 800beec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bef4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800befc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 f8c2 	bl	800c090 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2220      	movs	r2, #32
 800bf10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}

0800bf26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bf26:	b480      	push	{r7}
 800bf28:	b085      	sub	sp, #20
 800bf2a:	af00      	add	r7, sp, #0
 800bf2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d101      	bne.n	800bf3c <HAL_UARTEx_DisableFifoMode+0x16>
 800bf38:	2302      	movs	r3, #2
 800bf3a:	e027      	b.n	800bf8c <HAL_UARTEx_DisableFifoMode+0x66>
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2224      	movs	r2, #36	; 0x24
 800bf48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	681a      	ldr	r2, [r3, #0]
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f022 0201 	bic.w	r2, r2, #1
 800bf62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bf6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	68fa      	ldr	r2, [r7, #12]
 800bf78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2220      	movs	r2, #32
 800bf7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2200      	movs	r2, #0
 800bf86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3714      	adds	r7, #20
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
 800bfa0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d101      	bne.n	800bfb0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bfac:	2302      	movs	r3, #2
 800bfae:	e02d      	b.n	800c00c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2224      	movs	r2, #36	; 0x24
 800bfbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f022 0201 	bic.w	r2, r2, #1
 800bfd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	689b      	ldr	r3, [r3, #8]
 800bfde:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	683a      	ldr	r2, [r7, #0]
 800bfe8:	430a      	orrs	r2, r1
 800bfea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f000 f84f 	bl	800c090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2220      	movs	r2, #32
 800bffe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c00a:	2300      	movs	r3, #0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3710      	adds	r7, #16
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c024:	2b01      	cmp	r3, #1
 800c026:	d101      	bne.n	800c02c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c028:	2302      	movs	r3, #2
 800c02a:	e02d      	b.n	800c088 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2224      	movs	r2, #36	; 0x24
 800c038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f022 0201 	bic.w	r2, r2, #1
 800c052:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	689b      	ldr	r3, [r3, #8]
 800c05a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	430a      	orrs	r2, r1
 800c066:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f000 f811 	bl	800c090 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2220      	movs	r2, #32
 800c07a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c086:	2300      	movs	r3, #0
}
 800c088:	4618      	mov	r0, r3
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c090:	b480      	push	{r7}
 800c092:	b085      	sub	sp, #20
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d108      	bne.n	800c0b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2201      	movs	r2, #1
 800c0ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c0b0:	e031      	b.n	800c116 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c0b2:	2310      	movs	r3, #16
 800c0b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c0b6:	2310      	movs	r3, #16
 800c0b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	0e5b      	lsrs	r3, r3, #25
 800c0c2:	b2db      	uxtb	r3, r3
 800c0c4:	f003 0307 	and.w	r3, r3, #7
 800c0c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	0f5b      	lsrs	r3, r3, #29
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	f003 0307 	and.w	r3, r3, #7
 800c0d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c0da:	7bbb      	ldrb	r3, [r7, #14]
 800c0dc:	7b3a      	ldrb	r2, [r7, #12]
 800c0de:	4911      	ldr	r1, [pc, #68]	; (800c124 <UARTEx_SetNbDataToProcess+0x94>)
 800c0e0:	5c8a      	ldrb	r2, [r1, r2]
 800c0e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c0e6:	7b3a      	ldrb	r2, [r7, #12]
 800c0e8:	490f      	ldr	r1, [pc, #60]	; (800c128 <UARTEx_SetNbDataToProcess+0x98>)
 800c0ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c0ec:	fb93 f3f2 	sdiv	r3, r3, r2
 800c0f0:	b29a      	uxth	r2, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c0f8:	7bfb      	ldrb	r3, [r7, #15]
 800c0fa:	7b7a      	ldrb	r2, [r7, #13]
 800c0fc:	4909      	ldr	r1, [pc, #36]	; (800c124 <UARTEx_SetNbDataToProcess+0x94>)
 800c0fe:	5c8a      	ldrb	r2, [r1, r2]
 800c100:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c104:	7b7a      	ldrb	r2, [r7, #13]
 800c106:	4908      	ldr	r1, [pc, #32]	; (800c128 <UARTEx_SetNbDataToProcess+0x98>)
 800c108:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c10a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c10e:	b29a      	uxth	r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c116:	bf00      	nop
 800c118:	3714      	adds	r7, #20
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr
 800c122:	bf00      	nop
 800c124:	0800ea5c 	.word	0x0800ea5c
 800c128:	0800ea64 	.word	0x0800ea64

0800c12c <__errno>:
 800c12c:	4b01      	ldr	r3, [pc, #4]	; (800c134 <__errno+0x8>)
 800c12e:	6818      	ldr	r0, [r3, #0]
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	24000010 	.word	0x24000010

0800c138 <__libc_init_array>:
 800c138:	b570      	push	{r4, r5, r6, lr}
 800c13a:	4d0d      	ldr	r5, [pc, #52]	; (800c170 <__libc_init_array+0x38>)
 800c13c:	4c0d      	ldr	r4, [pc, #52]	; (800c174 <__libc_init_array+0x3c>)
 800c13e:	1b64      	subs	r4, r4, r5
 800c140:	10a4      	asrs	r4, r4, #2
 800c142:	2600      	movs	r6, #0
 800c144:	42a6      	cmp	r6, r4
 800c146:	d109      	bne.n	800c15c <__libc_init_array+0x24>
 800c148:	4d0b      	ldr	r5, [pc, #44]	; (800c178 <__libc_init_array+0x40>)
 800c14a:	4c0c      	ldr	r4, [pc, #48]	; (800c17c <__libc_init_array+0x44>)
 800c14c:	f002 fc60 	bl	800ea10 <_init>
 800c150:	1b64      	subs	r4, r4, r5
 800c152:	10a4      	asrs	r4, r4, #2
 800c154:	2600      	movs	r6, #0
 800c156:	42a6      	cmp	r6, r4
 800c158:	d105      	bne.n	800c166 <__libc_init_array+0x2e>
 800c15a:	bd70      	pop	{r4, r5, r6, pc}
 800c15c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c160:	4798      	blx	r3
 800c162:	3601      	adds	r6, #1
 800c164:	e7ee      	b.n	800c144 <__libc_init_array+0xc>
 800c166:	f855 3b04 	ldr.w	r3, [r5], #4
 800c16a:	4798      	blx	r3
 800c16c:	3601      	adds	r6, #1
 800c16e:	e7f2      	b.n	800c156 <__libc_init_array+0x1e>
 800c170:	0800ee54 	.word	0x0800ee54
 800c174:	0800ee54 	.word	0x0800ee54
 800c178:	0800ee54 	.word	0x0800ee54
 800c17c:	0800ee5c 	.word	0x0800ee5c

0800c180 <memset>:
 800c180:	4402      	add	r2, r0
 800c182:	4603      	mov	r3, r0
 800c184:	4293      	cmp	r3, r2
 800c186:	d100      	bne.n	800c18a <memset+0xa>
 800c188:	4770      	bx	lr
 800c18a:	f803 1b01 	strb.w	r1, [r3], #1
 800c18e:	e7f9      	b.n	800c184 <memset+0x4>

0800c190 <__cvt>:
 800c190:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c192:	ed2d 8b02 	vpush	{d8}
 800c196:	eeb0 8b40 	vmov.f64	d8, d0
 800c19a:	b085      	sub	sp, #20
 800c19c:	4617      	mov	r7, r2
 800c19e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c1a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c1a2:	ee18 2a90 	vmov	r2, s17
 800c1a6:	f025 0520 	bic.w	r5, r5, #32
 800c1aa:	2a00      	cmp	r2, #0
 800c1ac:	bfb6      	itet	lt
 800c1ae:	222d      	movlt	r2, #45	; 0x2d
 800c1b0:	2200      	movge	r2, #0
 800c1b2:	eeb1 8b40 	vneglt.f64	d8, d0
 800c1b6:	2d46      	cmp	r5, #70	; 0x46
 800c1b8:	460c      	mov	r4, r1
 800c1ba:	701a      	strb	r2, [r3, #0]
 800c1bc:	d004      	beq.n	800c1c8 <__cvt+0x38>
 800c1be:	2d45      	cmp	r5, #69	; 0x45
 800c1c0:	d100      	bne.n	800c1c4 <__cvt+0x34>
 800c1c2:	3401      	adds	r4, #1
 800c1c4:	2102      	movs	r1, #2
 800c1c6:	e000      	b.n	800c1ca <__cvt+0x3a>
 800c1c8:	2103      	movs	r1, #3
 800c1ca:	ab03      	add	r3, sp, #12
 800c1cc:	9301      	str	r3, [sp, #4]
 800c1ce:	ab02      	add	r3, sp, #8
 800c1d0:	9300      	str	r3, [sp, #0]
 800c1d2:	4622      	mov	r2, r4
 800c1d4:	4633      	mov	r3, r6
 800c1d6:	eeb0 0b48 	vmov.f64	d0, d8
 800c1da:	f000 fca9 	bl	800cb30 <_dtoa_r>
 800c1de:	2d47      	cmp	r5, #71	; 0x47
 800c1e0:	d109      	bne.n	800c1f6 <__cvt+0x66>
 800c1e2:	07fb      	lsls	r3, r7, #31
 800c1e4:	d407      	bmi.n	800c1f6 <__cvt+0x66>
 800c1e6:	9b03      	ldr	r3, [sp, #12]
 800c1e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1ea:	1a1b      	subs	r3, r3, r0
 800c1ec:	6013      	str	r3, [r2, #0]
 800c1ee:	b005      	add	sp, #20
 800c1f0:	ecbd 8b02 	vpop	{d8}
 800c1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1f6:	2d46      	cmp	r5, #70	; 0x46
 800c1f8:	eb00 0204 	add.w	r2, r0, r4
 800c1fc:	d10c      	bne.n	800c218 <__cvt+0x88>
 800c1fe:	7803      	ldrb	r3, [r0, #0]
 800c200:	2b30      	cmp	r3, #48	; 0x30
 800c202:	d107      	bne.n	800c214 <__cvt+0x84>
 800c204:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c20c:	bf1c      	itt	ne
 800c20e:	f1c4 0401 	rsbne	r4, r4, #1
 800c212:	6034      	strne	r4, [r6, #0]
 800c214:	6833      	ldr	r3, [r6, #0]
 800c216:	441a      	add	r2, r3
 800c218:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c220:	bf08      	it	eq
 800c222:	9203      	streq	r2, [sp, #12]
 800c224:	2130      	movs	r1, #48	; 0x30
 800c226:	9b03      	ldr	r3, [sp, #12]
 800c228:	4293      	cmp	r3, r2
 800c22a:	d2dc      	bcs.n	800c1e6 <__cvt+0x56>
 800c22c:	1c5c      	adds	r4, r3, #1
 800c22e:	9403      	str	r4, [sp, #12]
 800c230:	7019      	strb	r1, [r3, #0]
 800c232:	e7f8      	b.n	800c226 <__cvt+0x96>

0800c234 <__exponent>:
 800c234:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c236:	4603      	mov	r3, r0
 800c238:	2900      	cmp	r1, #0
 800c23a:	bfb8      	it	lt
 800c23c:	4249      	neglt	r1, r1
 800c23e:	f803 2b02 	strb.w	r2, [r3], #2
 800c242:	bfb4      	ite	lt
 800c244:	222d      	movlt	r2, #45	; 0x2d
 800c246:	222b      	movge	r2, #43	; 0x2b
 800c248:	2909      	cmp	r1, #9
 800c24a:	7042      	strb	r2, [r0, #1]
 800c24c:	dd2a      	ble.n	800c2a4 <__exponent+0x70>
 800c24e:	f10d 0407 	add.w	r4, sp, #7
 800c252:	46a4      	mov	ip, r4
 800c254:	270a      	movs	r7, #10
 800c256:	46a6      	mov	lr, r4
 800c258:	460a      	mov	r2, r1
 800c25a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c25e:	fb07 1516 	mls	r5, r7, r6, r1
 800c262:	3530      	adds	r5, #48	; 0x30
 800c264:	2a63      	cmp	r2, #99	; 0x63
 800c266:	f104 34ff 	add.w	r4, r4, #4294967295
 800c26a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c26e:	4631      	mov	r1, r6
 800c270:	dcf1      	bgt.n	800c256 <__exponent+0x22>
 800c272:	3130      	adds	r1, #48	; 0x30
 800c274:	f1ae 0502 	sub.w	r5, lr, #2
 800c278:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c27c:	1c44      	adds	r4, r0, #1
 800c27e:	4629      	mov	r1, r5
 800c280:	4561      	cmp	r1, ip
 800c282:	d30a      	bcc.n	800c29a <__exponent+0x66>
 800c284:	f10d 0209 	add.w	r2, sp, #9
 800c288:	eba2 020e 	sub.w	r2, r2, lr
 800c28c:	4565      	cmp	r5, ip
 800c28e:	bf88      	it	hi
 800c290:	2200      	movhi	r2, #0
 800c292:	4413      	add	r3, r2
 800c294:	1a18      	subs	r0, r3, r0
 800c296:	b003      	add	sp, #12
 800c298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c29a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c29e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c2a2:	e7ed      	b.n	800c280 <__exponent+0x4c>
 800c2a4:	2330      	movs	r3, #48	; 0x30
 800c2a6:	3130      	adds	r1, #48	; 0x30
 800c2a8:	7083      	strb	r3, [r0, #2]
 800c2aa:	70c1      	strb	r1, [r0, #3]
 800c2ac:	1d03      	adds	r3, r0, #4
 800c2ae:	e7f1      	b.n	800c294 <__exponent+0x60>

0800c2b0 <_printf_float>:
 800c2b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b4:	b08b      	sub	sp, #44	; 0x2c
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c2bc:	4616      	mov	r6, r2
 800c2be:	461f      	mov	r7, r3
 800c2c0:	4605      	mov	r5, r0
 800c2c2:	f001 f9b7 	bl	800d634 <_localeconv_r>
 800c2c6:	f8d0 b000 	ldr.w	fp, [r0]
 800c2ca:	4658      	mov	r0, fp
 800c2cc:	f7f4 f808 	bl	80002e0 <strlen>
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	9308      	str	r3, [sp, #32]
 800c2d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c2d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c2dc:	6822      	ldr	r2, [r4, #0]
 800c2de:	3307      	adds	r3, #7
 800c2e0:	f023 0307 	bic.w	r3, r3, #7
 800c2e4:	f103 0108 	add.w	r1, r3, #8
 800c2e8:	f8c8 1000 	str.w	r1, [r8]
 800c2ec:	4682      	mov	sl, r0
 800c2ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c2f2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c2f6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800c558 <_printf_float+0x2a8>
 800c2fa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c2fe:	eeb0 6bc0 	vabs.f64	d6, d0
 800c302:	eeb4 6b47 	vcmp.f64	d6, d7
 800c306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c30a:	dd24      	ble.n	800c356 <_printf_float+0xa6>
 800c30c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c314:	d502      	bpl.n	800c31c <_printf_float+0x6c>
 800c316:	232d      	movs	r3, #45	; 0x2d
 800c318:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c31c:	4b90      	ldr	r3, [pc, #576]	; (800c560 <_printf_float+0x2b0>)
 800c31e:	4891      	ldr	r0, [pc, #580]	; (800c564 <_printf_float+0x2b4>)
 800c320:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c324:	bf94      	ite	ls
 800c326:	4698      	movls	r8, r3
 800c328:	4680      	movhi	r8, r0
 800c32a:	2303      	movs	r3, #3
 800c32c:	6123      	str	r3, [r4, #16]
 800c32e:	f022 0204 	bic.w	r2, r2, #4
 800c332:	2300      	movs	r3, #0
 800c334:	6022      	str	r2, [r4, #0]
 800c336:	9304      	str	r3, [sp, #16]
 800c338:	9700      	str	r7, [sp, #0]
 800c33a:	4633      	mov	r3, r6
 800c33c:	aa09      	add	r2, sp, #36	; 0x24
 800c33e:	4621      	mov	r1, r4
 800c340:	4628      	mov	r0, r5
 800c342:	f000 f9d3 	bl	800c6ec <_printf_common>
 800c346:	3001      	adds	r0, #1
 800c348:	f040 808a 	bne.w	800c460 <_printf_float+0x1b0>
 800c34c:	f04f 30ff 	mov.w	r0, #4294967295
 800c350:	b00b      	add	sp, #44	; 0x2c
 800c352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c356:	eeb4 0b40 	vcmp.f64	d0, d0
 800c35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c35e:	d709      	bvc.n	800c374 <_printf_float+0xc4>
 800c360:	ee10 3a90 	vmov	r3, s1
 800c364:	2b00      	cmp	r3, #0
 800c366:	bfbc      	itt	lt
 800c368:	232d      	movlt	r3, #45	; 0x2d
 800c36a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c36e:	487e      	ldr	r0, [pc, #504]	; (800c568 <_printf_float+0x2b8>)
 800c370:	4b7e      	ldr	r3, [pc, #504]	; (800c56c <_printf_float+0x2bc>)
 800c372:	e7d5      	b.n	800c320 <_printf_float+0x70>
 800c374:	6863      	ldr	r3, [r4, #4]
 800c376:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c37a:	9104      	str	r1, [sp, #16]
 800c37c:	1c59      	adds	r1, r3, #1
 800c37e:	d13c      	bne.n	800c3fa <_printf_float+0x14a>
 800c380:	2306      	movs	r3, #6
 800c382:	6063      	str	r3, [r4, #4]
 800c384:	2300      	movs	r3, #0
 800c386:	9303      	str	r3, [sp, #12]
 800c388:	ab08      	add	r3, sp, #32
 800c38a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c38e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c392:	ab07      	add	r3, sp, #28
 800c394:	6861      	ldr	r1, [r4, #4]
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	6022      	str	r2, [r4, #0]
 800c39a:	f10d 031b 	add.w	r3, sp, #27
 800c39e:	4628      	mov	r0, r5
 800c3a0:	f7ff fef6 	bl	800c190 <__cvt>
 800c3a4:	9b04      	ldr	r3, [sp, #16]
 800c3a6:	9907      	ldr	r1, [sp, #28]
 800c3a8:	2b47      	cmp	r3, #71	; 0x47
 800c3aa:	4680      	mov	r8, r0
 800c3ac:	d108      	bne.n	800c3c0 <_printf_float+0x110>
 800c3ae:	1cc8      	adds	r0, r1, #3
 800c3b0:	db02      	blt.n	800c3b8 <_printf_float+0x108>
 800c3b2:	6863      	ldr	r3, [r4, #4]
 800c3b4:	4299      	cmp	r1, r3
 800c3b6:	dd41      	ble.n	800c43c <_printf_float+0x18c>
 800c3b8:	f1a9 0902 	sub.w	r9, r9, #2
 800c3bc:	fa5f f989 	uxtb.w	r9, r9
 800c3c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c3c4:	d820      	bhi.n	800c408 <_printf_float+0x158>
 800c3c6:	3901      	subs	r1, #1
 800c3c8:	464a      	mov	r2, r9
 800c3ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c3ce:	9107      	str	r1, [sp, #28]
 800c3d0:	f7ff ff30 	bl	800c234 <__exponent>
 800c3d4:	9a08      	ldr	r2, [sp, #32]
 800c3d6:	9004      	str	r0, [sp, #16]
 800c3d8:	1813      	adds	r3, r2, r0
 800c3da:	2a01      	cmp	r2, #1
 800c3dc:	6123      	str	r3, [r4, #16]
 800c3de:	dc02      	bgt.n	800c3e6 <_printf_float+0x136>
 800c3e0:	6822      	ldr	r2, [r4, #0]
 800c3e2:	07d2      	lsls	r2, r2, #31
 800c3e4:	d501      	bpl.n	800c3ea <_printf_float+0x13a>
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	6123      	str	r3, [r4, #16]
 800c3ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d0a2      	beq.n	800c338 <_printf_float+0x88>
 800c3f2:	232d      	movs	r3, #45	; 0x2d
 800c3f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3f8:	e79e      	b.n	800c338 <_printf_float+0x88>
 800c3fa:	9904      	ldr	r1, [sp, #16]
 800c3fc:	2947      	cmp	r1, #71	; 0x47
 800c3fe:	d1c1      	bne.n	800c384 <_printf_float+0xd4>
 800c400:	2b00      	cmp	r3, #0
 800c402:	d1bf      	bne.n	800c384 <_printf_float+0xd4>
 800c404:	2301      	movs	r3, #1
 800c406:	e7bc      	b.n	800c382 <_printf_float+0xd2>
 800c408:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c40c:	d118      	bne.n	800c440 <_printf_float+0x190>
 800c40e:	2900      	cmp	r1, #0
 800c410:	6863      	ldr	r3, [r4, #4]
 800c412:	dd0b      	ble.n	800c42c <_printf_float+0x17c>
 800c414:	6121      	str	r1, [r4, #16]
 800c416:	b913      	cbnz	r3, 800c41e <_printf_float+0x16e>
 800c418:	6822      	ldr	r2, [r4, #0]
 800c41a:	07d0      	lsls	r0, r2, #31
 800c41c:	d502      	bpl.n	800c424 <_printf_float+0x174>
 800c41e:	3301      	adds	r3, #1
 800c420:	440b      	add	r3, r1
 800c422:	6123      	str	r3, [r4, #16]
 800c424:	2300      	movs	r3, #0
 800c426:	65a1      	str	r1, [r4, #88]	; 0x58
 800c428:	9304      	str	r3, [sp, #16]
 800c42a:	e7de      	b.n	800c3ea <_printf_float+0x13a>
 800c42c:	b913      	cbnz	r3, 800c434 <_printf_float+0x184>
 800c42e:	6822      	ldr	r2, [r4, #0]
 800c430:	07d2      	lsls	r2, r2, #31
 800c432:	d501      	bpl.n	800c438 <_printf_float+0x188>
 800c434:	3302      	adds	r3, #2
 800c436:	e7f4      	b.n	800c422 <_printf_float+0x172>
 800c438:	2301      	movs	r3, #1
 800c43a:	e7f2      	b.n	800c422 <_printf_float+0x172>
 800c43c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c440:	9b08      	ldr	r3, [sp, #32]
 800c442:	4299      	cmp	r1, r3
 800c444:	db05      	blt.n	800c452 <_printf_float+0x1a2>
 800c446:	6823      	ldr	r3, [r4, #0]
 800c448:	6121      	str	r1, [r4, #16]
 800c44a:	07d8      	lsls	r0, r3, #31
 800c44c:	d5ea      	bpl.n	800c424 <_printf_float+0x174>
 800c44e:	1c4b      	adds	r3, r1, #1
 800c450:	e7e7      	b.n	800c422 <_printf_float+0x172>
 800c452:	2900      	cmp	r1, #0
 800c454:	bfd4      	ite	le
 800c456:	f1c1 0202 	rsble	r2, r1, #2
 800c45a:	2201      	movgt	r2, #1
 800c45c:	4413      	add	r3, r2
 800c45e:	e7e0      	b.n	800c422 <_printf_float+0x172>
 800c460:	6823      	ldr	r3, [r4, #0]
 800c462:	055a      	lsls	r2, r3, #21
 800c464:	d407      	bmi.n	800c476 <_printf_float+0x1c6>
 800c466:	6923      	ldr	r3, [r4, #16]
 800c468:	4642      	mov	r2, r8
 800c46a:	4631      	mov	r1, r6
 800c46c:	4628      	mov	r0, r5
 800c46e:	47b8      	blx	r7
 800c470:	3001      	adds	r0, #1
 800c472:	d12a      	bne.n	800c4ca <_printf_float+0x21a>
 800c474:	e76a      	b.n	800c34c <_printf_float+0x9c>
 800c476:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c47a:	f240 80e2 	bls.w	800c642 <_printf_float+0x392>
 800c47e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c482:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c48a:	d133      	bne.n	800c4f4 <_printf_float+0x244>
 800c48c:	4a38      	ldr	r2, [pc, #224]	; (800c570 <_printf_float+0x2c0>)
 800c48e:	2301      	movs	r3, #1
 800c490:	4631      	mov	r1, r6
 800c492:	4628      	mov	r0, r5
 800c494:	47b8      	blx	r7
 800c496:	3001      	adds	r0, #1
 800c498:	f43f af58 	beq.w	800c34c <_printf_float+0x9c>
 800c49c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	db02      	blt.n	800c4aa <_printf_float+0x1fa>
 800c4a4:	6823      	ldr	r3, [r4, #0]
 800c4a6:	07d8      	lsls	r0, r3, #31
 800c4a8:	d50f      	bpl.n	800c4ca <_printf_float+0x21a>
 800c4aa:	4653      	mov	r3, sl
 800c4ac:	465a      	mov	r2, fp
 800c4ae:	4631      	mov	r1, r6
 800c4b0:	4628      	mov	r0, r5
 800c4b2:	47b8      	blx	r7
 800c4b4:	3001      	adds	r0, #1
 800c4b6:	f43f af49 	beq.w	800c34c <_printf_float+0x9c>
 800c4ba:	f04f 0800 	mov.w	r8, #0
 800c4be:	f104 091a 	add.w	r9, r4, #26
 800c4c2:	9b08      	ldr	r3, [sp, #32]
 800c4c4:	3b01      	subs	r3, #1
 800c4c6:	4543      	cmp	r3, r8
 800c4c8:	dc09      	bgt.n	800c4de <_printf_float+0x22e>
 800c4ca:	6823      	ldr	r3, [r4, #0]
 800c4cc:	079b      	lsls	r3, r3, #30
 800c4ce:	f100 8108 	bmi.w	800c6e2 <_printf_float+0x432>
 800c4d2:	68e0      	ldr	r0, [r4, #12]
 800c4d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4d6:	4298      	cmp	r0, r3
 800c4d8:	bfb8      	it	lt
 800c4da:	4618      	movlt	r0, r3
 800c4dc:	e738      	b.n	800c350 <_printf_float+0xa0>
 800c4de:	2301      	movs	r3, #1
 800c4e0:	464a      	mov	r2, r9
 800c4e2:	4631      	mov	r1, r6
 800c4e4:	4628      	mov	r0, r5
 800c4e6:	47b8      	blx	r7
 800c4e8:	3001      	adds	r0, #1
 800c4ea:	f43f af2f 	beq.w	800c34c <_printf_float+0x9c>
 800c4ee:	f108 0801 	add.w	r8, r8, #1
 800c4f2:	e7e6      	b.n	800c4c2 <_printf_float+0x212>
 800c4f4:	9b07      	ldr	r3, [sp, #28]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	dc3c      	bgt.n	800c574 <_printf_float+0x2c4>
 800c4fa:	4a1d      	ldr	r2, [pc, #116]	; (800c570 <_printf_float+0x2c0>)
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	4631      	mov	r1, r6
 800c500:	4628      	mov	r0, r5
 800c502:	47b8      	blx	r7
 800c504:	3001      	adds	r0, #1
 800c506:	f43f af21 	beq.w	800c34c <_printf_float+0x9c>
 800c50a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c50e:	4313      	orrs	r3, r2
 800c510:	d102      	bne.n	800c518 <_printf_float+0x268>
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	07d9      	lsls	r1, r3, #31
 800c516:	d5d8      	bpl.n	800c4ca <_printf_float+0x21a>
 800c518:	4653      	mov	r3, sl
 800c51a:	465a      	mov	r2, fp
 800c51c:	4631      	mov	r1, r6
 800c51e:	4628      	mov	r0, r5
 800c520:	47b8      	blx	r7
 800c522:	3001      	adds	r0, #1
 800c524:	f43f af12 	beq.w	800c34c <_printf_float+0x9c>
 800c528:	f04f 0900 	mov.w	r9, #0
 800c52c:	f104 0a1a 	add.w	sl, r4, #26
 800c530:	9b07      	ldr	r3, [sp, #28]
 800c532:	425b      	negs	r3, r3
 800c534:	454b      	cmp	r3, r9
 800c536:	dc01      	bgt.n	800c53c <_printf_float+0x28c>
 800c538:	9b08      	ldr	r3, [sp, #32]
 800c53a:	e795      	b.n	800c468 <_printf_float+0x1b8>
 800c53c:	2301      	movs	r3, #1
 800c53e:	4652      	mov	r2, sl
 800c540:	4631      	mov	r1, r6
 800c542:	4628      	mov	r0, r5
 800c544:	47b8      	blx	r7
 800c546:	3001      	adds	r0, #1
 800c548:	f43f af00 	beq.w	800c34c <_printf_float+0x9c>
 800c54c:	f109 0901 	add.w	r9, r9, #1
 800c550:	e7ee      	b.n	800c530 <_printf_float+0x280>
 800c552:	bf00      	nop
 800c554:	f3af 8000 	nop.w
 800c558:	ffffffff 	.word	0xffffffff
 800c55c:	7fefffff 	.word	0x7fefffff
 800c560:	0800ea70 	.word	0x0800ea70
 800c564:	0800ea74 	.word	0x0800ea74
 800c568:	0800ea7c 	.word	0x0800ea7c
 800c56c:	0800ea78 	.word	0x0800ea78
 800c570:	0800ea80 	.word	0x0800ea80
 800c574:	9a08      	ldr	r2, [sp, #32]
 800c576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c578:	429a      	cmp	r2, r3
 800c57a:	bfa8      	it	ge
 800c57c:	461a      	movge	r2, r3
 800c57e:	2a00      	cmp	r2, #0
 800c580:	4691      	mov	r9, r2
 800c582:	dc38      	bgt.n	800c5f6 <_printf_float+0x346>
 800c584:	2300      	movs	r3, #0
 800c586:	9305      	str	r3, [sp, #20]
 800c588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c58c:	f104 021a 	add.w	r2, r4, #26
 800c590:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c592:	9905      	ldr	r1, [sp, #20]
 800c594:	9304      	str	r3, [sp, #16]
 800c596:	eba3 0309 	sub.w	r3, r3, r9
 800c59a:	428b      	cmp	r3, r1
 800c59c:	dc33      	bgt.n	800c606 <_printf_float+0x356>
 800c59e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	db3c      	blt.n	800c620 <_printf_float+0x370>
 800c5a6:	6823      	ldr	r3, [r4, #0]
 800c5a8:	07da      	lsls	r2, r3, #31
 800c5aa:	d439      	bmi.n	800c620 <_printf_float+0x370>
 800c5ac:	9a08      	ldr	r2, [sp, #32]
 800c5ae:	9b04      	ldr	r3, [sp, #16]
 800c5b0:	9907      	ldr	r1, [sp, #28]
 800c5b2:	1ad3      	subs	r3, r2, r3
 800c5b4:	eba2 0901 	sub.w	r9, r2, r1
 800c5b8:	4599      	cmp	r9, r3
 800c5ba:	bfa8      	it	ge
 800c5bc:	4699      	movge	r9, r3
 800c5be:	f1b9 0f00 	cmp.w	r9, #0
 800c5c2:	dc35      	bgt.n	800c630 <_printf_float+0x380>
 800c5c4:	f04f 0800 	mov.w	r8, #0
 800c5c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5cc:	f104 0a1a 	add.w	sl, r4, #26
 800c5d0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c5d4:	1a9b      	subs	r3, r3, r2
 800c5d6:	eba3 0309 	sub.w	r3, r3, r9
 800c5da:	4543      	cmp	r3, r8
 800c5dc:	f77f af75 	ble.w	800c4ca <_printf_float+0x21a>
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	4652      	mov	r2, sl
 800c5e4:	4631      	mov	r1, r6
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	47b8      	blx	r7
 800c5ea:	3001      	adds	r0, #1
 800c5ec:	f43f aeae 	beq.w	800c34c <_printf_float+0x9c>
 800c5f0:	f108 0801 	add.w	r8, r8, #1
 800c5f4:	e7ec      	b.n	800c5d0 <_printf_float+0x320>
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	4642      	mov	r2, r8
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	47b8      	blx	r7
 800c600:	3001      	adds	r0, #1
 800c602:	d1bf      	bne.n	800c584 <_printf_float+0x2d4>
 800c604:	e6a2      	b.n	800c34c <_printf_float+0x9c>
 800c606:	2301      	movs	r3, #1
 800c608:	4631      	mov	r1, r6
 800c60a:	4628      	mov	r0, r5
 800c60c:	9204      	str	r2, [sp, #16]
 800c60e:	47b8      	blx	r7
 800c610:	3001      	adds	r0, #1
 800c612:	f43f ae9b 	beq.w	800c34c <_printf_float+0x9c>
 800c616:	9b05      	ldr	r3, [sp, #20]
 800c618:	9a04      	ldr	r2, [sp, #16]
 800c61a:	3301      	adds	r3, #1
 800c61c:	9305      	str	r3, [sp, #20]
 800c61e:	e7b7      	b.n	800c590 <_printf_float+0x2e0>
 800c620:	4653      	mov	r3, sl
 800c622:	465a      	mov	r2, fp
 800c624:	4631      	mov	r1, r6
 800c626:	4628      	mov	r0, r5
 800c628:	47b8      	blx	r7
 800c62a:	3001      	adds	r0, #1
 800c62c:	d1be      	bne.n	800c5ac <_printf_float+0x2fc>
 800c62e:	e68d      	b.n	800c34c <_printf_float+0x9c>
 800c630:	9a04      	ldr	r2, [sp, #16]
 800c632:	464b      	mov	r3, r9
 800c634:	4442      	add	r2, r8
 800c636:	4631      	mov	r1, r6
 800c638:	4628      	mov	r0, r5
 800c63a:	47b8      	blx	r7
 800c63c:	3001      	adds	r0, #1
 800c63e:	d1c1      	bne.n	800c5c4 <_printf_float+0x314>
 800c640:	e684      	b.n	800c34c <_printf_float+0x9c>
 800c642:	9a08      	ldr	r2, [sp, #32]
 800c644:	2a01      	cmp	r2, #1
 800c646:	dc01      	bgt.n	800c64c <_printf_float+0x39c>
 800c648:	07db      	lsls	r3, r3, #31
 800c64a:	d537      	bpl.n	800c6bc <_printf_float+0x40c>
 800c64c:	2301      	movs	r3, #1
 800c64e:	4642      	mov	r2, r8
 800c650:	4631      	mov	r1, r6
 800c652:	4628      	mov	r0, r5
 800c654:	47b8      	blx	r7
 800c656:	3001      	adds	r0, #1
 800c658:	f43f ae78 	beq.w	800c34c <_printf_float+0x9c>
 800c65c:	4653      	mov	r3, sl
 800c65e:	465a      	mov	r2, fp
 800c660:	4631      	mov	r1, r6
 800c662:	4628      	mov	r0, r5
 800c664:	47b8      	blx	r7
 800c666:	3001      	adds	r0, #1
 800c668:	f43f ae70 	beq.w	800c34c <_printf_float+0x9c>
 800c66c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c670:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c678:	d01b      	beq.n	800c6b2 <_printf_float+0x402>
 800c67a:	9b08      	ldr	r3, [sp, #32]
 800c67c:	f108 0201 	add.w	r2, r8, #1
 800c680:	3b01      	subs	r3, #1
 800c682:	4631      	mov	r1, r6
 800c684:	4628      	mov	r0, r5
 800c686:	47b8      	blx	r7
 800c688:	3001      	adds	r0, #1
 800c68a:	d10e      	bne.n	800c6aa <_printf_float+0x3fa>
 800c68c:	e65e      	b.n	800c34c <_printf_float+0x9c>
 800c68e:	2301      	movs	r3, #1
 800c690:	464a      	mov	r2, r9
 800c692:	4631      	mov	r1, r6
 800c694:	4628      	mov	r0, r5
 800c696:	47b8      	blx	r7
 800c698:	3001      	adds	r0, #1
 800c69a:	f43f ae57 	beq.w	800c34c <_printf_float+0x9c>
 800c69e:	f108 0801 	add.w	r8, r8, #1
 800c6a2:	9b08      	ldr	r3, [sp, #32]
 800c6a4:	3b01      	subs	r3, #1
 800c6a6:	4543      	cmp	r3, r8
 800c6a8:	dcf1      	bgt.n	800c68e <_printf_float+0x3de>
 800c6aa:	9b04      	ldr	r3, [sp, #16]
 800c6ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c6b0:	e6db      	b.n	800c46a <_printf_float+0x1ba>
 800c6b2:	f04f 0800 	mov.w	r8, #0
 800c6b6:	f104 091a 	add.w	r9, r4, #26
 800c6ba:	e7f2      	b.n	800c6a2 <_printf_float+0x3f2>
 800c6bc:	2301      	movs	r3, #1
 800c6be:	4642      	mov	r2, r8
 800c6c0:	e7df      	b.n	800c682 <_printf_float+0x3d2>
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	464a      	mov	r2, r9
 800c6c6:	4631      	mov	r1, r6
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	47b8      	blx	r7
 800c6cc:	3001      	adds	r0, #1
 800c6ce:	f43f ae3d 	beq.w	800c34c <_printf_float+0x9c>
 800c6d2:	f108 0801 	add.w	r8, r8, #1
 800c6d6:	68e3      	ldr	r3, [r4, #12]
 800c6d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c6da:	1a5b      	subs	r3, r3, r1
 800c6dc:	4543      	cmp	r3, r8
 800c6de:	dcf0      	bgt.n	800c6c2 <_printf_float+0x412>
 800c6e0:	e6f7      	b.n	800c4d2 <_printf_float+0x222>
 800c6e2:	f04f 0800 	mov.w	r8, #0
 800c6e6:	f104 0919 	add.w	r9, r4, #25
 800c6ea:	e7f4      	b.n	800c6d6 <_printf_float+0x426>

0800c6ec <_printf_common>:
 800c6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f0:	4616      	mov	r6, r2
 800c6f2:	4699      	mov	r9, r3
 800c6f4:	688a      	ldr	r2, [r1, #8]
 800c6f6:	690b      	ldr	r3, [r1, #16]
 800c6f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	bfb8      	it	lt
 800c700:	4613      	movlt	r3, r2
 800c702:	6033      	str	r3, [r6, #0]
 800c704:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c708:	4607      	mov	r7, r0
 800c70a:	460c      	mov	r4, r1
 800c70c:	b10a      	cbz	r2, 800c712 <_printf_common+0x26>
 800c70e:	3301      	adds	r3, #1
 800c710:	6033      	str	r3, [r6, #0]
 800c712:	6823      	ldr	r3, [r4, #0]
 800c714:	0699      	lsls	r1, r3, #26
 800c716:	bf42      	ittt	mi
 800c718:	6833      	ldrmi	r3, [r6, #0]
 800c71a:	3302      	addmi	r3, #2
 800c71c:	6033      	strmi	r3, [r6, #0]
 800c71e:	6825      	ldr	r5, [r4, #0]
 800c720:	f015 0506 	ands.w	r5, r5, #6
 800c724:	d106      	bne.n	800c734 <_printf_common+0x48>
 800c726:	f104 0a19 	add.w	sl, r4, #25
 800c72a:	68e3      	ldr	r3, [r4, #12]
 800c72c:	6832      	ldr	r2, [r6, #0]
 800c72e:	1a9b      	subs	r3, r3, r2
 800c730:	42ab      	cmp	r3, r5
 800c732:	dc26      	bgt.n	800c782 <_printf_common+0x96>
 800c734:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c738:	1e13      	subs	r3, r2, #0
 800c73a:	6822      	ldr	r2, [r4, #0]
 800c73c:	bf18      	it	ne
 800c73e:	2301      	movne	r3, #1
 800c740:	0692      	lsls	r2, r2, #26
 800c742:	d42b      	bmi.n	800c79c <_printf_common+0xb0>
 800c744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c748:	4649      	mov	r1, r9
 800c74a:	4638      	mov	r0, r7
 800c74c:	47c0      	blx	r8
 800c74e:	3001      	adds	r0, #1
 800c750:	d01e      	beq.n	800c790 <_printf_common+0xa4>
 800c752:	6823      	ldr	r3, [r4, #0]
 800c754:	68e5      	ldr	r5, [r4, #12]
 800c756:	6832      	ldr	r2, [r6, #0]
 800c758:	f003 0306 	and.w	r3, r3, #6
 800c75c:	2b04      	cmp	r3, #4
 800c75e:	bf08      	it	eq
 800c760:	1aad      	subeq	r5, r5, r2
 800c762:	68a3      	ldr	r3, [r4, #8]
 800c764:	6922      	ldr	r2, [r4, #16]
 800c766:	bf0c      	ite	eq
 800c768:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c76c:	2500      	movne	r5, #0
 800c76e:	4293      	cmp	r3, r2
 800c770:	bfc4      	itt	gt
 800c772:	1a9b      	subgt	r3, r3, r2
 800c774:	18ed      	addgt	r5, r5, r3
 800c776:	2600      	movs	r6, #0
 800c778:	341a      	adds	r4, #26
 800c77a:	42b5      	cmp	r5, r6
 800c77c:	d11a      	bne.n	800c7b4 <_printf_common+0xc8>
 800c77e:	2000      	movs	r0, #0
 800c780:	e008      	b.n	800c794 <_printf_common+0xa8>
 800c782:	2301      	movs	r3, #1
 800c784:	4652      	mov	r2, sl
 800c786:	4649      	mov	r1, r9
 800c788:	4638      	mov	r0, r7
 800c78a:	47c0      	blx	r8
 800c78c:	3001      	adds	r0, #1
 800c78e:	d103      	bne.n	800c798 <_printf_common+0xac>
 800c790:	f04f 30ff 	mov.w	r0, #4294967295
 800c794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c798:	3501      	adds	r5, #1
 800c79a:	e7c6      	b.n	800c72a <_printf_common+0x3e>
 800c79c:	18e1      	adds	r1, r4, r3
 800c79e:	1c5a      	adds	r2, r3, #1
 800c7a0:	2030      	movs	r0, #48	; 0x30
 800c7a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c7a6:	4422      	add	r2, r4
 800c7a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c7ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c7b0:	3302      	adds	r3, #2
 800c7b2:	e7c7      	b.n	800c744 <_printf_common+0x58>
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	4622      	mov	r2, r4
 800c7b8:	4649      	mov	r1, r9
 800c7ba:	4638      	mov	r0, r7
 800c7bc:	47c0      	blx	r8
 800c7be:	3001      	adds	r0, #1
 800c7c0:	d0e6      	beq.n	800c790 <_printf_common+0xa4>
 800c7c2:	3601      	adds	r6, #1
 800c7c4:	e7d9      	b.n	800c77a <_printf_common+0x8e>
	...

0800c7c8 <_printf_i>:
 800c7c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7cc:	460c      	mov	r4, r1
 800c7ce:	4691      	mov	r9, r2
 800c7d0:	7e27      	ldrb	r7, [r4, #24]
 800c7d2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c7d4:	2f78      	cmp	r7, #120	; 0x78
 800c7d6:	4680      	mov	r8, r0
 800c7d8:	469a      	mov	sl, r3
 800c7da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7de:	d807      	bhi.n	800c7f0 <_printf_i+0x28>
 800c7e0:	2f62      	cmp	r7, #98	; 0x62
 800c7e2:	d80a      	bhi.n	800c7fa <_printf_i+0x32>
 800c7e4:	2f00      	cmp	r7, #0
 800c7e6:	f000 80d8 	beq.w	800c99a <_printf_i+0x1d2>
 800c7ea:	2f58      	cmp	r7, #88	; 0x58
 800c7ec:	f000 80a3 	beq.w	800c936 <_printf_i+0x16e>
 800c7f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c7f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c7f8:	e03a      	b.n	800c870 <_printf_i+0xa8>
 800c7fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c7fe:	2b15      	cmp	r3, #21
 800c800:	d8f6      	bhi.n	800c7f0 <_printf_i+0x28>
 800c802:	a001      	add	r0, pc, #4	; (adr r0, 800c808 <_printf_i+0x40>)
 800c804:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c808:	0800c861 	.word	0x0800c861
 800c80c:	0800c875 	.word	0x0800c875
 800c810:	0800c7f1 	.word	0x0800c7f1
 800c814:	0800c7f1 	.word	0x0800c7f1
 800c818:	0800c7f1 	.word	0x0800c7f1
 800c81c:	0800c7f1 	.word	0x0800c7f1
 800c820:	0800c875 	.word	0x0800c875
 800c824:	0800c7f1 	.word	0x0800c7f1
 800c828:	0800c7f1 	.word	0x0800c7f1
 800c82c:	0800c7f1 	.word	0x0800c7f1
 800c830:	0800c7f1 	.word	0x0800c7f1
 800c834:	0800c981 	.word	0x0800c981
 800c838:	0800c8a5 	.word	0x0800c8a5
 800c83c:	0800c963 	.word	0x0800c963
 800c840:	0800c7f1 	.word	0x0800c7f1
 800c844:	0800c7f1 	.word	0x0800c7f1
 800c848:	0800c9a3 	.word	0x0800c9a3
 800c84c:	0800c7f1 	.word	0x0800c7f1
 800c850:	0800c8a5 	.word	0x0800c8a5
 800c854:	0800c7f1 	.word	0x0800c7f1
 800c858:	0800c7f1 	.word	0x0800c7f1
 800c85c:	0800c96b 	.word	0x0800c96b
 800c860:	680b      	ldr	r3, [r1, #0]
 800c862:	1d1a      	adds	r2, r3, #4
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	600a      	str	r2, [r1, #0]
 800c868:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c86c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c870:	2301      	movs	r3, #1
 800c872:	e0a3      	b.n	800c9bc <_printf_i+0x1f4>
 800c874:	6825      	ldr	r5, [r4, #0]
 800c876:	6808      	ldr	r0, [r1, #0]
 800c878:	062e      	lsls	r6, r5, #24
 800c87a:	f100 0304 	add.w	r3, r0, #4
 800c87e:	d50a      	bpl.n	800c896 <_printf_i+0xce>
 800c880:	6805      	ldr	r5, [r0, #0]
 800c882:	600b      	str	r3, [r1, #0]
 800c884:	2d00      	cmp	r5, #0
 800c886:	da03      	bge.n	800c890 <_printf_i+0xc8>
 800c888:	232d      	movs	r3, #45	; 0x2d
 800c88a:	426d      	negs	r5, r5
 800c88c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c890:	485e      	ldr	r0, [pc, #376]	; (800ca0c <_printf_i+0x244>)
 800c892:	230a      	movs	r3, #10
 800c894:	e019      	b.n	800c8ca <_printf_i+0x102>
 800c896:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c89a:	6805      	ldr	r5, [r0, #0]
 800c89c:	600b      	str	r3, [r1, #0]
 800c89e:	bf18      	it	ne
 800c8a0:	b22d      	sxthne	r5, r5
 800c8a2:	e7ef      	b.n	800c884 <_printf_i+0xbc>
 800c8a4:	680b      	ldr	r3, [r1, #0]
 800c8a6:	6825      	ldr	r5, [r4, #0]
 800c8a8:	1d18      	adds	r0, r3, #4
 800c8aa:	6008      	str	r0, [r1, #0]
 800c8ac:	0628      	lsls	r0, r5, #24
 800c8ae:	d501      	bpl.n	800c8b4 <_printf_i+0xec>
 800c8b0:	681d      	ldr	r5, [r3, #0]
 800c8b2:	e002      	b.n	800c8ba <_printf_i+0xf2>
 800c8b4:	0669      	lsls	r1, r5, #25
 800c8b6:	d5fb      	bpl.n	800c8b0 <_printf_i+0xe8>
 800c8b8:	881d      	ldrh	r5, [r3, #0]
 800c8ba:	4854      	ldr	r0, [pc, #336]	; (800ca0c <_printf_i+0x244>)
 800c8bc:	2f6f      	cmp	r7, #111	; 0x6f
 800c8be:	bf0c      	ite	eq
 800c8c0:	2308      	moveq	r3, #8
 800c8c2:	230a      	movne	r3, #10
 800c8c4:	2100      	movs	r1, #0
 800c8c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c8ca:	6866      	ldr	r6, [r4, #4]
 800c8cc:	60a6      	str	r6, [r4, #8]
 800c8ce:	2e00      	cmp	r6, #0
 800c8d0:	bfa2      	ittt	ge
 800c8d2:	6821      	ldrge	r1, [r4, #0]
 800c8d4:	f021 0104 	bicge.w	r1, r1, #4
 800c8d8:	6021      	strge	r1, [r4, #0]
 800c8da:	b90d      	cbnz	r5, 800c8e0 <_printf_i+0x118>
 800c8dc:	2e00      	cmp	r6, #0
 800c8de:	d04d      	beq.n	800c97c <_printf_i+0x1b4>
 800c8e0:	4616      	mov	r6, r2
 800c8e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c8e6:	fb03 5711 	mls	r7, r3, r1, r5
 800c8ea:	5dc7      	ldrb	r7, [r0, r7]
 800c8ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c8f0:	462f      	mov	r7, r5
 800c8f2:	42bb      	cmp	r3, r7
 800c8f4:	460d      	mov	r5, r1
 800c8f6:	d9f4      	bls.n	800c8e2 <_printf_i+0x11a>
 800c8f8:	2b08      	cmp	r3, #8
 800c8fa:	d10b      	bne.n	800c914 <_printf_i+0x14c>
 800c8fc:	6823      	ldr	r3, [r4, #0]
 800c8fe:	07df      	lsls	r7, r3, #31
 800c900:	d508      	bpl.n	800c914 <_printf_i+0x14c>
 800c902:	6923      	ldr	r3, [r4, #16]
 800c904:	6861      	ldr	r1, [r4, #4]
 800c906:	4299      	cmp	r1, r3
 800c908:	bfde      	ittt	le
 800c90a:	2330      	movle	r3, #48	; 0x30
 800c90c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c910:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c914:	1b92      	subs	r2, r2, r6
 800c916:	6122      	str	r2, [r4, #16]
 800c918:	f8cd a000 	str.w	sl, [sp]
 800c91c:	464b      	mov	r3, r9
 800c91e:	aa03      	add	r2, sp, #12
 800c920:	4621      	mov	r1, r4
 800c922:	4640      	mov	r0, r8
 800c924:	f7ff fee2 	bl	800c6ec <_printf_common>
 800c928:	3001      	adds	r0, #1
 800c92a:	d14c      	bne.n	800c9c6 <_printf_i+0x1fe>
 800c92c:	f04f 30ff 	mov.w	r0, #4294967295
 800c930:	b004      	add	sp, #16
 800c932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c936:	4835      	ldr	r0, [pc, #212]	; (800ca0c <_printf_i+0x244>)
 800c938:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c93c:	6823      	ldr	r3, [r4, #0]
 800c93e:	680e      	ldr	r6, [r1, #0]
 800c940:	061f      	lsls	r7, r3, #24
 800c942:	f856 5b04 	ldr.w	r5, [r6], #4
 800c946:	600e      	str	r6, [r1, #0]
 800c948:	d514      	bpl.n	800c974 <_printf_i+0x1ac>
 800c94a:	07d9      	lsls	r1, r3, #31
 800c94c:	bf44      	itt	mi
 800c94e:	f043 0320 	orrmi.w	r3, r3, #32
 800c952:	6023      	strmi	r3, [r4, #0]
 800c954:	b91d      	cbnz	r5, 800c95e <_printf_i+0x196>
 800c956:	6823      	ldr	r3, [r4, #0]
 800c958:	f023 0320 	bic.w	r3, r3, #32
 800c95c:	6023      	str	r3, [r4, #0]
 800c95e:	2310      	movs	r3, #16
 800c960:	e7b0      	b.n	800c8c4 <_printf_i+0xfc>
 800c962:	6823      	ldr	r3, [r4, #0]
 800c964:	f043 0320 	orr.w	r3, r3, #32
 800c968:	6023      	str	r3, [r4, #0]
 800c96a:	2378      	movs	r3, #120	; 0x78
 800c96c:	4828      	ldr	r0, [pc, #160]	; (800ca10 <_printf_i+0x248>)
 800c96e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c972:	e7e3      	b.n	800c93c <_printf_i+0x174>
 800c974:	065e      	lsls	r6, r3, #25
 800c976:	bf48      	it	mi
 800c978:	b2ad      	uxthmi	r5, r5
 800c97a:	e7e6      	b.n	800c94a <_printf_i+0x182>
 800c97c:	4616      	mov	r6, r2
 800c97e:	e7bb      	b.n	800c8f8 <_printf_i+0x130>
 800c980:	680b      	ldr	r3, [r1, #0]
 800c982:	6826      	ldr	r6, [r4, #0]
 800c984:	6960      	ldr	r0, [r4, #20]
 800c986:	1d1d      	adds	r5, r3, #4
 800c988:	600d      	str	r5, [r1, #0]
 800c98a:	0635      	lsls	r5, r6, #24
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	d501      	bpl.n	800c994 <_printf_i+0x1cc>
 800c990:	6018      	str	r0, [r3, #0]
 800c992:	e002      	b.n	800c99a <_printf_i+0x1d2>
 800c994:	0671      	lsls	r1, r6, #25
 800c996:	d5fb      	bpl.n	800c990 <_printf_i+0x1c8>
 800c998:	8018      	strh	r0, [r3, #0]
 800c99a:	2300      	movs	r3, #0
 800c99c:	6123      	str	r3, [r4, #16]
 800c99e:	4616      	mov	r6, r2
 800c9a0:	e7ba      	b.n	800c918 <_printf_i+0x150>
 800c9a2:	680b      	ldr	r3, [r1, #0]
 800c9a4:	1d1a      	adds	r2, r3, #4
 800c9a6:	600a      	str	r2, [r1, #0]
 800c9a8:	681e      	ldr	r6, [r3, #0]
 800c9aa:	6862      	ldr	r2, [r4, #4]
 800c9ac:	2100      	movs	r1, #0
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	f7f3 fc9e 	bl	80002f0 <memchr>
 800c9b4:	b108      	cbz	r0, 800c9ba <_printf_i+0x1f2>
 800c9b6:	1b80      	subs	r0, r0, r6
 800c9b8:	6060      	str	r0, [r4, #4]
 800c9ba:	6863      	ldr	r3, [r4, #4]
 800c9bc:	6123      	str	r3, [r4, #16]
 800c9be:	2300      	movs	r3, #0
 800c9c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9c4:	e7a8      	b.n	800c918 <_printf_i+0x150>
 800c9c6:	6923      	ldr	r3, [r4, #16]
 800c9c8:	4632      	mov	r2, r6
 800c9ca:	4649      	mov	r1, r9
 800c9cc:	4640      	mov	r0, r8
 800c9ce:	47d0      	blx	sl
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	d0ab      	beq.n	800c92c <_printf_i+0x164>
 800c9d4:	6823      	ldr	r3, [r4, #0]
 800c9d6:	079b      	lsls	r3, r3, #30
 800c9d8:	d413      	bmi.n	800ca02 <_printf_i+0x23a>
 800c9da:	68e0      	ldr	r0, [r4, #12]
 800c9dc:	9b03      	ldr	r3, [sp, #12]
 800c9de:	4298      	cmp	r0, r3
 800c9e0:	bfb8      	it	lt
 800c9e2:	4618      	movlt	r0, r3
 800c9e4:	e7a4      	b.n	800c930 <_printf_i+0x168>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	4632      	mov	r2, r6
 800c9ea:	4649      	mov	r1, r9
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	47d0      	blx	sl
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d09b      	beq.n	800c92c <_printf_i+0x164>
 800c9f4:	3501      	adds	r5, #1
 800c9f6:	68e3      	ldr	r3, [r4, #12]
 800c9f8:	9903      	ldr	r1, [sp, #12]
 800c9fa:	1a5b      	subs	r3, r3, r1
 800c9fc:	42ab      	cmp	r3, r5
 800c9fe:	dcf2      	bgt.n	800c9e6 <_printf_i+0x21e>
 800ca00:	e7eb      	b.n	800c9da <_printf_i+0x212>
 800ca02:	2500      	movs	r5, #0
 800ca04:	f104 0619 	add.w	r6, r4, #25
 800ca08:	e7f5      	b.n	800c9f6 <_printf_i+0x22e>
 800ca0a:	bf00      	nop
 800ca0c:	0800ea82 	.word	0x0800ea82
 800ca10:	0800ea93 	.word	0x0800ea93

0800ca14 <quorem>:
 800ca14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca18:	6903      	ldr	r3, [r0, #16]
 800ca1a:	690c      	ldr	r4, [r1, #16]
 800ca1c:	42a3      	cmp	r3, r4
 800ca1e:	4607      	mov	r7, r0
 800ca20:	f2c0 8081 	blt.w	800cb26 <quorem+0x112>
 800ca24:	3c01      	subs	r4, #1
 800ca26:	f101 0814 	add.w	r8, r1, #20
 800ca2a:	f100 0514 	add.w	r5, r0, #20
 800ca2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca32:	9301      	str	r3, [sp, #4]
 800ca34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca3c:	3301      	adds	r3, #1
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ca44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca48:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca4c:	d331      	bcc.n	800cab2 <quorem+0x9e>
 800ca4e:	f04f 0e00 	mov.w	lr, #0
 800ca52:	4640      	mov	r0, r8
 800ca54:	46ac      	mov	ip, r5
 800ca56:	46f2      	mov	sl, lr
 800ca58:	f850 2b04 	ldr.w	r2, [r0], #4
 800ca5c:	b293      	uxth	r3, r2
 800ca5e:	fb06 e303 	mla	r3, r6, r3, lr
 800ca62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ca66:	b29b      	uxth	r3, r3
 800ca68:	ebaa 0303 	sub.w	r3, sl, r3
 800ca6c:	0c12      	lsrs	r2, r2, #16
 800ca6e:	f8dc a000 	ldr.w	sl, [ip]
 800ca72:	fb06 e202 	mla	r2, r6, r2, lr
 800ca76:	fa13 f38a 	uxtah	r3, r3, sl
 800ca7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ca7e:	fa1f fa82 	uxth.w	sl, r2
 800ca82:	f8dc 2000 	ldr.w	r2, [ip]
 800ca86:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ca8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca94:	4581      	cmp	r9, r0
 800ca96:	f84c 3b04 	str.w	r3, [ip], #4
 800ca9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ca9e:	d2db      	bcs.n	800ca58 <quorem+0x44>
 800caa0:	f855 300b 	ldr.w	r3, [r5, fp]
 800caa4:	b92b      	cbnz	r3, 800cab2 <quorem+0x9e>
 800caa6:	9b01      	ldr	r3, [sp, #4]
 800caa8:	3b04      	subs	r3, #4
 800caaa:	429d      	cmp	r5, r3
 800caac:	461a      	mov	r2, r3
 800caae:	d32e      	bcc.n	800cb0e <quorem+0xfa>
 800cab0:	613c      	str	r4, [r7, #16]
 800cab2:	4638      	mov	r0, r7
 800cab4:	f001 f856 	bl	800db64 <__mcmp>
 800cab8:	2800      	cmp	r0, #0
 800caba:	db24      	blt.n	800cb06 <quorem+0xf2>
 800cabc:	3601      	adds	r6, #1
 800cabe:	4628      	mov	r0, r5
 800cac0:	f04f 0c00 	mov.w	ip, #0
 800cac4:	f858 2b04 	ldr.w	r2, [r8], #4
 800cac8:	f8d0 e000 	ldr.w	lr, [r0]
 800cacc:	b293      	uxth	r3, r2
 800cace:	ebac 0303 	sub.w	r3, ip, r3
 800cad2:	0c12      	lsrs	r2, r2, #16
 800cad4:	fa13 f38e 	uxtah	r3, r3, lr
 800cad8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cadc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cae6:	45c1      	cmp	r9, r8
 800cae8:	f840 3b04 	str.w	r3, [r0], #4
 800caec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800caf0:	d2e8      	bcs.n	800cac4 <quorem+0xb0>
 800caf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800caf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cafa:	b922      	cbnz	r2, 800cb06 <quorem+0xf2>
 800cafc:	3b04      	subs	r3, #4
 800cafe:	429d      	cmp	r5, r3
 800cb00:	461a      	mov	r2, r3
 800cb02:	d30a      	bcc.n	800cb1a <quorem+0x106>
 800cb04:	613c      	str	r4, [r7, #16]
 800cb06:	4630      	mov	r0, r6
 800cb08:	b003      	add	sp, #12
 800cb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0e:	6812      	ldr	r2, [r2, #0]
 800cb10:	3b04      	subs	r3, #4
 800cb12:	2a00      	cmp	r2, #0
 800cb14:	d1cc      	bne.n	800cab0 <quorem+0x9c>
 800cb16:	3c01      	subs	r4, #1
 800cb18:	e7c7      	b.n	800caaa <quorem+0x96>
 800cb1a:	6812      	ldr	r2, [r2, #0]
 800cb1c:	3b04      	subs	r3, #4
 800cb1e:	2a00      	cmp	r2, #0
 800cb20:	d1f0      	bne.n	800cb04 <quorem+0xf0>
 800cb22:	3c01      	subs	r4, #1
 800cb24:	e7eb      	b.n	800cafe <quorem+0xea>
 800cb26:	2000      	movs	r0, #0
 800cb28:	e7ee      	b.n	800cb08 <quorem+0xf4>
 800cb2a:	0000      	movs	r0, r0
 800cb2c:	0000      	movs	r0, r0
	...

0800cb30 <_dtoa_r>:
 800cb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb34:	ec59 8b10 	vmov	r8, r9, d0
 800cb38:	b095      	sub	sp, #84	; 0x54
 800cb3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cb3c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800cb3e:	9107      	str	r1, [sp, #28]
 800cb40:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800cb44:	4606      	mov	r6, r0
 800cb46:	9209      	str	r2, [sp, #36]	; 0x24
 800cb48:	9310      	str	r3, [sp, #64]	; 0x40
 800cb4a:	b975      	cbnz	r5, 800cb6a <_dtoa_r+0x3a>
 800cb4c:	2010      	movs	r0, #16
 800cb4e:	f000 fd75 	bl	800d63c <malloc>
 800cb52:	4602      	mov	r2, r0
 800cb54:	6270      	str	r0, [r6, #36]	; 0x24
 800cb56:	b920      	cbnz	r0, 800cb62 <_dtoa_r+0x32>
 800cb58:	4bab      	ldr	r3, [pc, #684]	; (800ce08 <_dtoa_r+0x2d8>)
 800cb5a:	21ea      	movs	r1, #234	; 0xea
 800cb5c:	48ab      	ldr	r0, [pc, #684]	; (800ce0c <_dtoa_r+0x2dc>)
 800cb5e:	f001 f9cb 	bl	800def8 <__assert_func>
 800cb62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb66:	6005      	str	r5, [r0, #0]
 800cb68:	60c5      	str	r5, [r0, #12]
 800cb6a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cb6c:	6819      	ldr	r1, [r3, #0]
 800cb6e:	b151      	cbz	r1, 800cb86 <_dtoa_r+0x56>
 800cb70:	685a      	ldr	r2, [r3, #4]
 800cb72:	604a      	str	r2, [r1, #4]
 800cb74:	2301      	movs	r3, #1
 800cb76:	4093      	lsls	r3, r2
 800cb78:	608b      	str	r3, [r1, #8]
 800cb7a:	4630      	mov	r0, r6
 800cb7c:	f000 fdb4 	bl	800d6e8 <_Bfree>
 800cb80:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cb82:	2200      	movs	r2, #0
 800cb84:	601a      	str	r2, [r3, #0]
 800cb86:	f1b9 0300 	subs.w	r3, r9, #0
 800cb8a:	bfbb      	ittet	lt
 800cb8c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cb90:	9303      	strlt	r3, [sp, #12]
 800cb92:	2300      	movge	r3, #0
 800cb94:	2201      	movlt	r2, #1
 800cb96:	bfac      	ite	ge
 800cb98:	6023      	strge	r3, [r4, #0]
 800cb9a:	6022      	strlt	r2, [r4, #0]
 800cb9c:	4b9c      	ldr	r3, [pc, #624]	; (800ce10 <_dtoa_r+0x2e0>)
 800cb9e:	9c03      	ldr	r4, [sp, #12]
 800cba0:	43a3      	bics	r3, r4
 800cba2:	d11a      	bne.n	800cbda <_dtoa_r+0xaa>
 800cba4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cba6:	f242 730f 	movw	r3, #9999	; 0x270f
 800cbaa:	6013      	str	r3, [r2, #0]
 800cbac:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800cbb0:	ea53 0308 	orrs.w	r3, r3, r8
 800cbb4:	f000 8512 	beq.w	800d5dc <_dtoa_r+0xaac>
 800cbb8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cbba:	b953      	cbnz	r3, 800cbd2 <_dtoa_r+0xa2>
 800cbbc:	4b95      	ldr	r3, [pc, #596]	; (800ce14 <_dtoa_r+0x2e4>)
 800cbbe:	e01f      	b.n	800cc00 <_dtoa_r+0xd0>
 800cbc0:	4b95      	ldr	r3, [pc, #596]	; (800ce18 <_dtoa_r+0x2e8>)
 800cbc2:	9300      	str	r3, [sp, #0]
 800cbc4:	3308      	adds	r3, #8
 800cbc6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800cbc8:	6013      	str	r3, [r2, #0]
 800cbca:	9800      	ldr	r0, [sp, #0]
 800cbcc:	b015      	add	sp, #84	; 0x54
 800cbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbd2:	4b90      	ldr	r3, [pc, #576]	; (800ce14 <_dtoa_r+0x2e4>)
 800cbd4:	9300      	str	r3, [sp, #0]
 800cbd6:	3303      	adds	r3, #3
 800cbd8:	e7f5      	b.n	800cbc6 <_dtoa_r+0x96>
 800cbda:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cbde:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cbe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cbea:	d10b      	bne.n	800cc04 <_dtoa_r+0xd4>
 800cbec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800cbee:	2301      	movs	r3, #1
 800cbf0:	6013      	str	r3, [r2, #0]
 800cbf2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	f000 84ee 	beq.w	800d5d6 <_dtoa_r+0xaa6>
 800cbfa:	4888      	ldr	r0, [pc, #544]	; (800ce1c <_dtoa_r+0x2ec>)
 800cbfc:	6018      	str	r0, [r3, #0]
 800cbfe:	1e43      	subs	r3, r0, #1
 800cc00:	9300      	str	r3, [sp, #0]
 800cc02:	e7e2      	b.n	800cbca <_dtoa_r+0x9a>
 800cc04:	a913      	add	r1, sp, #76	; 0x4c
 800cc06:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cc0a:	aa12      	add	r2, sp, #72	; 0x48
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	f001 f84d 	bl	800dcac <__d2b>
 800cc12:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800cc16:	4605      	mov	r5, r0
 800cc18:	9812      	ldr	r0, [sp, #72]	; 0x48
 800cc1a:	2900      	cmp	r1, #0
 800cc1c:	d047      	beq.n	800ccae <_dtoa_r+0x17e>
 800cc1e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800cc20:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cc24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800cc28:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800cc2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cc30:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800cc34:	2400      	movs	r4, #0
 800cc36:	ec43 2b16 	vmov	d6, r2, r3
 800cc3a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800cc3e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800cdf0 <_dtoa_r+0x2c0>
 800cc42:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cc46:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800cdf8 <_dtoa_r+0x2c8>
 800cc4a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800cc4e:	eeb0 7b46 	vmov.f64	d7, d6
 800cc52:	ee06 1a90 	vmov	s13, r1
 800cc56:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800cc5a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800ce00 <_dtoa_r+0x2d0>
 800cc5e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800cc62:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800cc66:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc6e:	ee16 ba90 	vmov	fp, s13
 800cc72:	9411      	str	r4, [sp, #68]	; 0x44
 800cc74:	d508      	bpl.n	800cc88 <_dtoa_r+0x158>
 800cc76:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800cc7a:	eeb4 6b47 	vcmp.f64	d6, d7
 800cc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc82:	bf18      	it	ne
 800cc84:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800cc88:	f1bb 0f16 	cmp.w	fp, #22
 800cc8c:	d832      	bhi.n	800ccf4 <_dtoa_r+0x1c4>
 800cc8e:	4b64      	ldr	r3, [pc, #400]	; (800ce20 <_dtoa_r+0x2f0>)
 800cc90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cc94:	ed93 7b00 	vldr	d7, [r3]
 800cc98:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800cc9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cca4:	d501      	bpl.n	800ccaa <_dtoa_r+0x17a>
 800cca6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ccaa:	2300      	movs	r3, #0
 800ccac:	e023      	b.n	800ccf6 <_dtoa_r+0x1c6>
 800ccae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800ccb0:	4401      	add	r1, r0
 800ccb2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800ccb6:	2b20      	cmp	r3, #32
 800ccb8:	bfc3      	ittte	gt
 800ccba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ccbe:	fa04 f303 	lslgt.w	r3, r4, r3
 800ccc2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800ccc6:	f1c3 0320 	rsble	r3, r3, #32
 800ccca:	bfc6      	itte	gt
 800cccc:	fa28 f804 	lsrgt.w	r8, r8, r4
 800ccd0:	ea43 0308 	orrgt.w	r3, r3, r8
 800ccd4:	fa08 f303 	lslle.w	r3, r8, r3
 800ccd8:	ee07 3a90 	vmov	s15, r3
 800ccdc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cce0:	3901      	subs	r1, #1
 800cce2:	ed8d 7b00 	vstr	d7, [sp]
 800cce6:	9c01      	ldr	r4, [sp, #4]
 800cce8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccec:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800ccf0:	2401      	movs	r4, #1
 800ccf2:	e7a0      	b.n	800cc36 <_dtoa_r+0x106>
 800ccf4:	2301      	movs	r3, #1
 800ccf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccf8:	1a43      	subs	r3, r0, r1
 800ccfa:	1e5a      	subs	r2, r3, #1
 800ccfc:	bf45      	ittet	mi
 800ccfe:	f1c3 0301 	rsbmi	r3, r3, #1
 800cd02:	9305      	strmi	r3, [sp, #20]
 800cd04:	2300      	movpl	r3, #0
 800cd06:	2300      	movmi	r3, #0
 800cd08:	9206      	str	r2, [sp, #24]
 800cd0a:	bf54      	ite	pl
 800cd0c:	9305      	strpl	r3, [sp, #20]
 800cd0e:	9306      	strmi	r3, [sp, #24]
 800cd10:	f1bb 0f00 	cmp.w	fp, #0
 800cd14:	db18      	blt.n	800cd48 <_dtoa_r+0x218>
 800cd16:	9b06      	ldr	r3, [sp, #24]
 800cd18:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800cd1c:	445b      	add	r3, fp
 800cd1e:	9306      	str	r3, [sp, #24]
 800cd20:	2300      	movs	r3, #0
 800cd22:	9a07      	ldr	r2, [sp, #28]
 800cd24:	2a09      	cmp	r2, #9
 800cd26:	d849      	bhi.n	800cdbc <_dtoa_r+0x28c>
 800cd28:	2a05      	cmp	r2, #5
 800cd2a:	bfc4      	itt	gt
 800cd2c:	3a04      	subgt	r2, #4
 800cd2e:	9207      	strgt	r2, [sp, #28]
 800cd30:	9a07      	ldr	r2, [sp, #28]
 800cd32:	f1a2 0202 	sub.w	r2, r2, #2
 800cd36:	bfcc      	ite	gt
 800cd38:	2400      	movgt	r4, #0
 800cd3a:	2401      	movle	r4, #1
 800cd3c:	2a03      	cmp	r2, #3
 800cd3e:	d848      	bhi.n	800cdd2 <_dtoa_r+0x2a2>
 800cd40:	e8df f002 	tbb	[pc, r2]
 800cd44:	3a2c2e0b 	.word	0x3a2c2e0b
 800cd48:	9b05      	ldr	r3, [sp, #20]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	eba3 030b 	sub.w	r3, r3, fp
 800cd50:	9305      	str	r3, [sp, #20]
 800cd52:	920e      	str	r2, [sp, #56]	; 0x38
 800cd54:	f1cb 0300 	rsb	r3, fp, #0
 800cd58:	e7e3      	b.n	800cd22 <_dtoa_r+0x1f2>
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	9208      	str	r2, [sp, #32]
 800cd5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd60:	2a00      	cmp	r2, #0
 800cd62:	dc39      	bgt.n	800cdd8 <_dtoa_r+0x2a8>
 800cd64:	f04f 0a01 	mov.w	sl, #1
 800cd68:	46d1      	mov	r9, sl
 800cd6a:	4652      	mov	r2, sl
 800cd6c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800cd70:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800cd72:	2100      	movs	r1, #0
 800cd74:	6079      	str	r1, [r7, #4]
 800cd76:	2004      	movs	r0, #4
 800cd78:	f100 0c14 	add.w	ip, r0, #20
 800cd7c:	4594      	cmp	ip, r2
 800cd7e:	6879      	ldr	r1, [r7, #4]
 800cd80:	d92f      	bls.n	800cde2 <_dtoa_r+0x2b2>
 800cd82:	4630      	mov	r0, r6
 800cd84:	930c      	str	r3, [sp, #48]	; 0x30
 800cd86:	f000 fc6f 	bl	800d668 <_Balloc>
 800cd8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd8c:	9000      	str	r0, [sp, #0]
 800cd8e:	4602      	mov	r2, r0
 800cd90:	2800      	cmp	r0, #0
 800cd92:	d149      	bne.n	800ce28 <_dtoa_r+0x2f8>
 800cd94:	4b23      	ldr	r3, [pc, #140]	; (800ce24 <_dtoa_r+0x2f4>)
 800cd96:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cd9a:	e6df      	b.n	800cb5c <_dtoa_r+0x2c>
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	e7dd      	b.n	800cd5c <_dtoa_r+0x22c>
 800cda0:	2200      	movs	r2, #0
 800cda2:	9208      	str	r2, [sp, #32]
 800cda4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cda6:	eb0b 0a02 	add.w	sl, fp, r2
 800cdaa:	f10a 0901 	add.w	r9, sl, #1
 800cdae:	464a      	mov	r2, r9
 800cdb0:	2a01      	cmp	r2, #1
 800cdb2:	bfb8      	it	lt
 800cdb4:	2201      	movlt	r2, #1
 800cdb6:	e7db      	b.n	800cd70 <_dtoa_r+0x240>
 800cdb8:	2201      	movs	r2, #1
 800cdba:	e7f2      	b.n	800cda2 <_dtoa_r+0x272>
 800cdbc:	2401      	movs	r4, #1
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800cdc4:	f04f 3aff 	mov.w	sl, #4294967295
 800cdc8:	2100      	movs	r1, #0
 800cdca:	46d1      	mov	r9, sl
 800cdcc:	2212      	movs	r2, #18
 800cdce:	9109      	str	r1, [sp, #36]	; 0x24
 800cdd0:	e7ce      	b.n	800cd70 <_dtoa_r+0x240>
 800cdd2:	2201      	movs	r2, #1
 800cdd4:	9208      	str	r2, [sp, #32]
 800cdd6:	e7f5      	b.n	800cdc4 <_dtoa_r+0x294>
 800cdd8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800cddc:	46d1      	mov	r9, sl
 800cdde:	4652      	mov	r2, sl
 800cde0:	e7c6      	b.n	800cd70 <_dtoa_r+0x240>
 800cde2:	3101      	adds	r1, #1
 800cde4:	6079      	str	r1, [r7, #4]
 800cde6:	0040      	lsls	r0, r0, #1
 800cde8:	e7c6      	b.n	800cd78 <_dtoa_r+0x248>
 800cdea:	bf00      	nop
 800cdec:	f3af 8000 	nop.w
 800cdf0:	636f4361 	.word	0x636f4361
 800cdf4:	3fd287a7 	.word	0x3fd287a7
 800cdf8:	8b60c8b3 	.word	0x8b60c8b3
 800cdfc:	3fc68a28 	.word	0x3fc68a28
 800ce00:	509f79fb 	.word	0x509f79fb
 800ce04:	3fd34413 	.word	0x3fd34413
 800ce08:	0800eab1 	.word	0x0800eab1
 800ce0c:	0800eac8 	.word	0x0800eac8
 800ce10:	7ff00000 	.word	0x7ff00000
 800ce14:	0800eaad 	.word	0x0800eaad
 800ce18:	0800eaa4 	.word	0x0800eaa4
 800ce1c:	0800ea81 	.word	0x0800ea81
 800ce20:	0800ebc0 	.word	0x0800ebc0
 800ce24:	0800eb27 	.word	0x0800eb27
 800ce28:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800ce2a:	9900      	ldr	r1, [sp, #0]
 800ce2c:	6011      	str	r1, [r2, #0]
 800ce2e:	f1b9 0f0e 	cmp.w	r9, #14
 800ce32:	d872      	bhi.n	800cf1a <_dtoa_r+0x3ea>
 800ce34:	2c00      	cmp	r4, #0
 800ce36:	d070      	beq.n	800cf1a <_dtoa_r+0x3ea>
 800ce38:	f1bb 0f00 	cmp.w	fp, #0
 800ce3c:	f340 80a6 	ble.w	800cf8c <_dtoa_r+0x45c>
 800ce40:	49ca      	ldr	r1, [pc, #808]	; (800d16c <_dtoa_r+0x63c>)
 800ce42:	f00b 020f 	and.w	r2, fp, #15
 800ce46:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ce4a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ce4e:	ed92 7b00 	vldr	d7, [r2]
 800ce52:	ea4f 112b 	mov.w	r1, fp, asr #4
 800ce56:	f000 808d 	beq.w	800cf74 <_dtoa_r+0x444>
 800ce5a:	4ac5      	ldr	r2, [pc, #788]	; (800d170 <_dtoa_r+0x640>)
 800ce5c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800ce60:	ed92 6b08 	vldr	d6, [r2, #32]
 800ce64:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800ce68:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ce6c:	f001 010f 	and.w	r1, r1, #15
 800ce70:	2203      	movs	r2, #3
 800ce72:	48bf      	ldr	r0, [pc, #764]	; (800d170 <_dtoa_r+0x640>)
 800ce74:	2900      	cmp	r1, #0
 800ce76:	d17f      	bne.n	800cf78 <_dtoa_r+0x448>
 800ce78:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ce7c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ce80:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ce84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800ce86:	2900      	cmp	r1, #0
 800ce88:	f000 80b2 	beq.w	800cff0 <_dtoa_r+0x4c0>
 800ce8c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ce90:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ce98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce9c:	f140 80a8 	bpl.w	800cff0 <_dtoa_r+0x4c0>
 800cea0:	f1b9 0f00 	cmp.w	r9, #0
 800cea4:	f000 80a4 	beq.w	800cff0 <_dtoa_r+0x4c0>
 800cea8:	f1ba 0f00 	cmp.w	sl, #0
 800ceac:	dd31      	ble.n	800cf12 <_dtoa_r+0x3e2>
 800ceae:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ceb2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ceb6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ceba:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cebe:	3201      	adds	r2, #1
 800cec0:	4650      	mov	r0, sl
 800cec2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cec6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ceca:	ee07 2a90 	vmov	s15, r2
 800cece:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ced2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ced6:	ed8d 5b02 	vstr	d5, [sp, #8]
 800ceda:	9c03      	ldr	r4, [sp, #12]
 800cedc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800cee0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800cee4:	2800      	cmp	r0, #0
 800cee6:	f040 8086 	bne.w	800cff6 <_dtoa_r+0x4c6>
 800ceea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ceee:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cef2:	ec42 1b17 	vmov	d7, r1, r2
 800cef6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cefa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cefe:	f300 8272 	bgt.w	800d3e6 <_dtoa_r+0x8b6>
 800cf02:	eeb1 7b47 	vneg.f64	d7, d7
 800cf06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0e:	f100 8267 	bmi.w	800d3e0 <_dtoa_r+0x8b0>
 800cf12:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800cf16:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800cf1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cf1c:	2a00      	cmp	r2, #0
 800cf1e:	f2c0 8129 	blt.w	800d174 <_dtoa_r+0x644>
 800cf22:	f1bb 0f0e 	cmp.w	fp, #14
 800cf26:	f300 8125 	bgt.w	800d174 <_dtoa_r+0x644>
 800cf2a:	4b90      	ldr	r3, [pc, #576]	; (800d16c <_dtoa_r+0x63c>)
 800cf2c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cf30:	ed93 6b00 	vldr	d6, [r3]
 800cf34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f280 80c3 	bge.w	800d0c2 <_dtoa_r+0x592>
 800cf3c:	f1b9 0f00 	cmp.w	r9, #0
 800cf40:	f300 80bf 	bgt.w	800d0c2 <_dtoa_r+0x592>
 800cf44:	f040 824c 	bne.w	800d3e0 <_dtoa_r+0x8b0>
 800cf48:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cf4c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cf50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cf54:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cf58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf5c:	464c      	mov	r4, r9
 800cf5e:	464f      	mov	r7, r9
 800cf60:	f280 8222 	bge.w	800d3a8 <_dtoa_r+0x878>
 800cf64:	f8dd 8000 	ldr.w	r8, [sp]
 800cf68:	2331      	movs	r3, #49	; 0x31
 800cf6a:	f808 3b01 	strb.w	r3, [r8], #1
 800cf6e:	f10b 0b01 	add.w	fp, fp, #1
 800cf72:	e21e      	b.n	800d3b2 <_dtoa_r+0x882>
 800cf74:	2202      	movs	r2, #2
 800cf76:	e77c      	b.n	800ce72 <_dtoa_r+0x342>
 800cf78:	07cc      	lsls	r4, r1, #31
 800cf7a:	d504      	bpl.n	800cf86 <_dtoa_r+0x456>
 800cf7c:	ed90 6b00 	vldr	d6, [r0]
 800cf80:	3201      	adds	r2, #1
 800cf82:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cf86:	1049      	asrs	r1, r1, #1
 800cf88:	3008      	adds	r0, #8
 800cf8a:	e773      	b.n	800ce74 <_dtoa_r+0x344>
 800cf8c:	d02e      	beq.n	800cfec <_dtoa_r+0x4bc>
 800cf8e:	f1cb 0100 	rsb	r1, fp, #0
 800cf92:	4a76      	ldr	r2, [pc, #472]	; (800d16c <_dtoa_r+0x63c>)
 800cf94:	f001 000f 	and.w	r0, r1, #15
 800cf98:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cf9c:	ed92 7b00 	vldr	d7, [r2]
 800cfa0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800cfa4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cfa8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800cfac:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800cfb0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800cfb4:	486e      	ldr	r0, [pc, #440]	; (800d170 <_dtoa_r+0x640>)
 800cfb6:	1109      	asrs	r1, r1, #4
 800cfb8:	2400      	movs	r4, #0
 800cfba:	2202      	movs	r2, #2
 800cfbc:	b939      	cbnz	r1, 800cfce <_dtoa_r+0x49e>
 800cfbe:	2c00      	cmp	r4, #0
 800cfc0:	f43f af60 	beq.w	800ce84 <_dtoa_r+0x354>
 800cfc4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cfc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfcc:	e75a      	b.n	800ce84 <_dtoa_r+0x354>
 800cfce:	07cf      	lsls	r7, r1, #31
 800cfd0:	d509      	bpl.n	800cfe6 <_dtoa_r+0x4b6>
 800cfd2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800cfd6:	ed90 7b00 	vldr	d7, [r0]
 800cfda:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cfde:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800cfe2:	3201      	adds	r2, #1
 800cfe4:	2401      	movs	r4, #1
 800cfe6:	1049      	asrs	r1, r1, #1
 800cfe8:	3008      	adds	r0, #8
 800cfea:	e7e7      	b.n	800cfbc <_dtoa_r+0x48c>
 800cfec:	2202      	movs	r2, #2
 800cfee:	e749      	b.n	800ce84 <_dtoa_r+0x354>
 800cff0:	465f      	mov	r7, fp
 800cff2:	4648      	mov	r0, r9
 800cff4:	e765      	b.n	800cec2 <_dtoa_r+0x392>
 800cff6:	ec42 1b17 	vmov	d7, r1, r2
 800cffa:	4a5c      	ldr	r2, [pc, #368]	; (800d16c <_dtoa_r+0x63c>)
 800cffc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d000:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d004:	9a00      	ldr	r2, [sp, #0]
 800d006:	1814      	adds	r4, r2, r0
 800d008:	9a08      	ldr	r2, [sp, #32]
 800d00a:	b352      	cbz	r2, 800d062 <_dtoa_r+0x532>
 800d00c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d010:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d014:	f8dd 8000 	ldr.w	r8, [sp]
 800d018:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d01c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d020:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d024:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d028:	ee14 2a90 	vmov	r2, s9
 800d02c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d030:	3230      	adds	r2, #48	; 0x30
 800d032:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d036:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d03e:	f808 2b01 	strb.w	r2, [r8], #1
 800d042:	d439      	bmi.n	800d0b8 <_dtoa_r+0x588>
 800d044:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d048:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d050:	d472      	bmi.n	800d138 <_dtoa_r+0x608>
 800d052:	45a0      	cmp	r8, r4
 800d054:	f43f af5d 	beq.w	800cf12 <_dtoa_r+0x3e2>
 800d058:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d05c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d060:	e7e0      	b.n	800d024 <_dtoa_r+0x4f4>
 800d062:	f8dd 8000 	ldr.w	r8, [sp]
 800d066:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d06a:	4621      	mov	r1, r4
 800d06c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d070:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d074:	ee14 2a90 	vmov	r2, s9
 800d078:	3230      	adds	r2, #48	; 0x30
 800d07a:	f808 2b01 	strb.w	r2, [r8], #1
 800d07e:	45a0      	cmp	r8, r4
 800d080:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d084:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d088:	d118      	bne.n	800d0bc <_dtoa_r+0x58c>
 800d08a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d08e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d092:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d09a:	dc4d      	bgt.n	800d138 <_dtoa_r+0x608>
 800d09c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d0a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0a8:	f57f af33 	bpl.w	800cf12 <_dtoa_r+0x3e2>
 800d0ac:	4688      	mov	r8, r1
 800d0ae:	3901      	subs	r1, #1
 800d0b0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d0b4:	2b30      	cmp	r3, #48	; 0x30
 800d0b6:	d0f9      	beq.n	800d0ac <_dtoa_r+0x57c>
 800d0b8:	46bb      	mov	fp, r7
 800d0ba:	e02a      	b.n	800d112 <_dtoa_r+0x5e2>
 800d0bc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d0c0:	e7d6      	b.n	800d070 <_dtoa_r+0x540>
 800d0c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0c6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d0ca:	f8dd 8000 	ldr.w	r8, [sp]
 800d0ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d0d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d0d6:	ee15 3a10 	vmov	r3, s10
 800d0da:	3330      	adds	r3, #48	; 0x30
 800d0dc:	f808 3b01 	strb.w	r3, [r8], #1
 800d0e0:	9b00      	ldr	r3, [sp, #0]
 800d0e2:	eba8 0303 	sub.w	r3, r8, r3
 800d0e6:	4599      	cmp	r9, r3
 800d0e8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d0ec:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d0f0:	d133      	bne.n	800d15a <_dtoa_r+0x62a>
 800d0f2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d0f6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0fe:	dc1a      	bgt.n	800d136 <_dtoa_r+0x606>
 800d100:	eeb4 7b46 	vcmp.f64	d7, d6
 800d104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d108:	d103      	bne.n	800d112 <_dtoa_r+0x5e2>
 800d10a:	ee15 3a10 	vmov	r3, s10
 800d10e:	07d9      	lsls	r1, r3, #31
 800d110:	d411      	bmi.n	800d136 <_dtoa_r+0x606>
 800d112:	4629      	mov	r1, r5
 800d114:	4630      	mov	r0, r6
 800d116:	f000 fae7 	bl	800d6e8 <_Bfree>
 800d11a:	2300      	movs	r3, #0
 800d11c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d11e:	f888 3000 	strb.w	r3, [r8]
 800d122:	f10b 0301 	add.w	r3, fp, #1
 800d126:	6013      	str	r3, [r2, #0]
 800d128:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	f43f ad4d 	beq.w	800cbca <_dtoa_r+0x9a>
 800d130:	f8c3 8000 	str.w	r8, [r3]
 800d134:	e549      	b.n	800cbca <_dtoa_r+0x9a>
 800d136:	465f      	mov	r7, fp
 800d138:	4643      	mov	r3, r8
 800d13a:	4698      	mov	r8, r3
 800d13c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d140:	2a39      	cmp	r2, #57	; 0x39
 800d142:	d106      	bne.n	800d152 <_dtoa_r+0x622>
 800d144:	9a00      	ldr	r2, [sp, #0]
 800d146:	429a      	cmp	r2, r3
 800d148:	d1f7      	bne.n	800d13a <_dtoa_r+0x60a>
 800d14a:	9900      	ldr	r1, [sp, #0]
 800d14c:	2230      	movs	r2, #48	; 0x30
 800d14e:	3701      	adds	r7, #1
 800d150:	700a      	strb	r2, [r1, #0]
 800d152:	781a      	ldrb	r2, [r3, #0]
 800d154:	3201      	adds	r2, #1
 800d156:	701a      	strb	r2, [r3, #0]
 800d158:	e7ae      	b.n	800d0b8 <_dtoa_r+0x588>
 800d15a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d15e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d166:	d1b2      	bne.n	800d0ce <_dtoa_r+0x59e>
 800d168:	e7d3      	b.n	800d112 <_dtoa_r+0x5e2>
 800d16a:	bf00      	nop
 800d16c:	0800ebc0 	.word	0x0800ebc0
 800d170:	0800eb98 	.word	0x0800eb98
 800d174:	9908      	ldr	r1, [sp, #32]
 800d176:	2900      	cmp	r1, #0
 800d178:	f000 80d1 	beq.w	800d31e <_dtoa_r+0x7ee>
 800d17c:	9907      	ldr	r1, [sp, #28]
 800d17e:	2901      	cmp	r1, #1
 800d180:	f300 80b4 	bgt.w	800d2ec <_dtoa_r+0x7bc>
 800d184:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d186:	2900      	cmp	r1, #0
 800d188:	f000 80ac 	beq.w	800d2e4 <_dtoa_r+0x7b4>
 800d18c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d190:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d194:	461c      	mov	r4, r3
 800d196:	930a      	str	r3, [sp, #40]	; 0x28
 800d198:	9b05      	ldr	r3, [sp, #20]
 800d19a:	4413      	add	r3, r2
 800d19c:	9305      	str	r3, [sp, #20]
 800d19e:	9b06      	ldr	r3, [sp, #24]
 800d1a0:	2101      	movs	r1, #1
 800d1a2:	4413      	add	r3, r2
 800d1a4:	4630      	mov	r0, r6
 800d1a6:	9306      	str	r3, [sp, #24]
 800d1a8:	f000 fb5a 	bl	800d860 <__i2b>
 800d1ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1ae:	4607      	mov	r7, r0
 800d1b0:	f1b8 0f00 	cmp.w	r8, #0
 800d1b4:	dd0d      	ble.n	800d1d2 <_dtoa_r+0x6a2>
 800d1b6:	9a06      	ldr	r2, [sp, #24]
 800d1b8:	2a00      	cmp	r2, #0
 800d1ba:	dd0a      	ble.n	800d1d2 <_dtoa_r+0x6a2>
 800d1bc:	4542      	cmp	r2, r8
 800d1be:	9905      	ldr	r1, [sp, #20]
 800d1c0:	bfa8      	it	ge
 800d1c2:	4642      	movge	r2, r8
 800d1c4:	1a89      	subs	r1, r1, r2
 800d1c6:	9105      	str	r1, [sp, #20]
 800d1c8:	9906      	ldr	r1, [sp, #24]
 800d1ca:	eba8 0802 	sub.w	r8, r8, r2
 800d1ce:	1a8a      	subs	r2, r1, r2
 800d1d0:	9206      	str	r2, [sp, #24]
 800d1d2:	b303      	cbz	r3, 800d216 <_dtoa_r+0x6e6>
 800d1d4:	9a08      	ldr	r2, [sp, #32]
 800d1d6:	2a00      	cmp	r2, #0
 800d1d8:	f000 80a6 	beq.w	800d328 <_dtoa_r+0x7f8>
 800d1dc:	2c00      	cmp	r4, #0
 800d1de:	dd13      	ble.n	800d208 <_dtoa_r+0x6d8>
 800d1e0:	4639      	mov	r1, r7
 800d1e2:	4622      	mov	r2, r4
 800d1e4:	4630      	mov	r0, r6
 800d1e6:	930c      	str	r3, [sp, #48]	; 0x30
 800d1e8:	f000 fbf6 	bl	800d9d8 <__pow5mult>
 800d1ec:	462a      	mov	r2, r5
 800d1ee:	4601      	mov	r1, r0
 800d1f0:	4607      	mov	r7, r0
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	f000 fb4a 	bl	800d88c <__multiply>
 800d1f8:	4629      	mov	r1, r5
 800d1fa:	900a      	str	r0, [sp, #40]	; 0x28
 800d1fc:	4630      	mov	r0, r6
 800d1fe:	f000 fa73 	bl	800d6e8 <_Bfree>
 800d202:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d204:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d206:	4615      	mov	r5, r2
 800d208:	1b1a      	subs	r2, r3, r4
 800d20a:	d004      	beq.n	800d216 <_dtoa_r+0x6e6>
 800d20c:	4629      	mov	r1, r5
 800d20e:	4630      	mov	r0, r6
 800d210:	f000 fbe2 	bl	800d9d8 <__pow5mult>
 800d214:	4605      	mov	r5, r0
 800d216:	2101      	movs	r1, #1
 800d218:	4630      	mov	r0, r6
 800d21a:	f000 fb21 	bl	800d860 <__i2b>
 800d21e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d220:	2b00      	cmp	r3, #0
 800d222:	4604      	mov	r4, r0
 800d224:	f340 8082 	ble.w	800d32c <_dtoa_r+0x7fc>
 800d228:	461a      	mov	r2, r3
 800d22a:	4601      	mov	r1, r0
 800d22c:	4630      	mov	r0, r6
 800d22e:	f000 fbd3 	bl	800d9d8 <__pow5mult>
 800d232:	9b07      	ldr	r3, [sp, #28]
 800d234:	2b01      	cmp	r3, #1
 800d236:	4604      	mov	r4, r0
 800d238:	dd7b      	ble.n	800d332 <_dtoa_r+0x802>
 800d23a:	2300      	movs	r3, #0
 800d23c:	930a      	str	r3, [sp, #40]	; 0x28
 800d23e:	6922      	ldr	r2, [r4, #16]
 800d240:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d244:	6910      	ldr	r0, [r2, #16]
 800d246:	f000 fabb 	bl	800d7c0 <__hi0bits>
 800d24a:	f1c0 0020 	rsb	r0, r0, #32
 800d24e:	9b06      	ldr	r3, [sp, #24]
 800d250:	4418      	add	r0, r3
 800d252:	f010 001f 	ands.w	r0, r0, #31
 800d256:	f000 808d 	beq.w	800d374 <_dtoa_r+0x844>
 800d25a:	f1c0 0220 	rsb	r2, r0, #32
 800d25e:	2a04      	cmp	r2, #4
 800d260:	f340 8086 	ble.w	800d370 <_dtoa_r+0x840>
 800d264:	f1c0 001c 	rsb	r0, r0, #28
 800d268:	9b05      	ldr	r3, [sp, #20]
 800d26a:	4403      	add	r3, r0
 800d26c:	9305      	str	r3, [sp, #20]
 800d26e:	9b06      	ldr	r3, [sp, #24]
 800d270:	4403      	add	r3, r0
 800d272:	4480      	add	r8, r0
 800d274:	9306      	str	r3, [sp, #24]
 800d276:	9b05      	ldr	r3, [sp, #20]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	dd05      	ble.n	800d288 <_dtoa_r+0x758>
 800d27c:	4629      	mov	r1, r5
 800d27e:	461a      	mov	r2, r3
 800d280:	4630      	mov	r0, r6
 800d282:	f000 fc03 	bl	800da8c <__lshift>
 800d286:	4605      	mov	r5, r0
 800d288:	9b06      	ldr	r3, [sp, #24]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	dd05      	ble.n	800d29a <_dtoa_r+0x76a>
 800d28e:	4621      	mov	r1, r4
 800d290:	461a      	mov	r2, r3
 800d292:	4630      	mov	r0, r6
 800d294:	f000 fbfa 	bl	800da8c <__lshift>
 800d298:	4604      	mov	r4, r0
 800d29a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d06b      	beq.n	800d378 <_dtoa_r+0x848>
 800d2a0:	4621      	mov	r1, r4
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f000 fc5e 	bl	800db64 <__mcmp>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	da65      	bge.n	800d378 <_dtoa_r+0x848>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	4629      	mov	r1, r5
 800d2b0:	220a      	movs	r2, #10
 800d2b2:	4630      	mov	r0, r6
 800d2b4:	f000 fa3a 	bl	800d72c <__multadd>
 800d2b8:	9b08      	ldr	r3, [sp, #32]
 800d2ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d2be:	4605      	mov	r5, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f000 8192 	beq.w	800d5ea <_dtoa_r+0xaba>
 800d2c6:	4639      	mov	r1, r7
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	220a      	movs	r2, #10
 800d2cc:	4630      	mov	r0, r6
 800d2ce:	f000 fa2d 	bl	800d72c <__multadd>
 800d2d2:	f1ba 0f00 	cmp.w	sl, #0
 800d2d6:	4607      	mov	r7, r0
 800d2d8:	f300 808e 	bgt.w	800d3f8 <_dtoa_r+0x8c8>
 800d2dc:	9b07      	ldr	r3, [sp, #28]
 800d2de:	2b02      	cmp	r3, #2
 800d2e0:	dc51      	bgt.n	800d386 <_dtoa_r+0x856>
 800d2e2:	e089      	b.n	800d3f8 <_dtoa_r+0x8c8>
 800d2e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d2e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d2ea:	e751      	b.n	800d190 <_dtoa_r+0x660>
 800d2ec:	f109 34ff 	add.w	r4, r9, #4294967295
 800d2f0:	42a3      	cmp	r3, r4
 800d2f2:	bfbf      	itttt	lt
 800d2f4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800d2f6:	1ae3      	sublt	r3, r4, r3
 800d2f8:	18d2      	addlt	r2, r2, r3
 800d2fa:	4613      	movlt	r3, r2
 800d2fc:	bfb7      	itett	lt
 800d2fe:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d300:	1b1c      	subge	r4, r3, r4
 800d302:	4623      	movlt	r3, r4
 800d304:	2400      	movlt	r4, #0
 800d306:	f1b9 0f00 	cmp.w	r9, #0
 800d30a:	bfb5      	itete	lt
 800d30c:	9a05      	ldrlt	r2, [sp, #20]
 800d30e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800d312:	eba2 0809 	sublt.w	r8, r2, r9
 800d316:	464a      	movge	r2, r9
 800d318:	bfb8      	it	lt
 800d31a:	2200      	movlt	r2, #0
 800d31c:	e73b      	b.n	800d196 <_dtoa_r+0x666>
 800d31e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d322:	9f08      	ldr	r7, [sp, #32]
 800d324:	461c      	mov	r4, r3
 800d326:	e743      	b.n	800d1b0 <_dtoa_r+0x680>
 800d328:	461a      	mov	r2, r3
 800d32a:	e76f      	b.n	800d20c <_dtoa_r+0x6dc>
 800d32c:	9b07      	ldr	r3, [sp, #28]
 800d32e:	2b01      	cmp	r3, #1
 800d330:	dc18      	bgt.n	800d364 <_dtoa_r+0x834>
 800d332:	9b02      	ldr	r3, [sp, #8]
 800d334:	b9b3      	cbnz	r3, 800d364 <_dtoa_r+0x834>
 800d336:	9b03      	ldr	r3, [sp, #12]
 800d338:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d33c:	b9a2      	cbnz	r2, 800d368 <_dtoa_r+0x838>
 800d33e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d342:	0d12      	lsrs	r2, r2, #20
 800d344:	0512      	lsls	r2, r2, #20
 800d346:	b18a      	cbz	r2, 800d36c <_dtoa_r+0x83c>
 800d348:	9b05      	ldr	r3, [sp, #20]
 800d34a:	3301      	adds	r3, #1
 800d34c:	9305      	str	r3, [sp, #20]
 800d34e:	9b06      	ldr	r3, [sp, #24]
 800d350:	3301      	adds	r3, #1
 800d352:	9306      	str	r3, [sp, #24]
 800d354:	2301      	movs	r3, #1
 800d356:	930a      	str	r3, [sp, #40]	; 0x28
 800d358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	f47f af6f 	bne.w	800d23e <_dtoa_r+0x70e>
 800d360:	2001      	movs	r0, #1
 800d362:	e774      	b.n	800d24e <_dtoa_r+0x71e>
 800d364:	2300      	movs	r3, #0
 800d366:	e7f6      	b.n	800d356 <_dtoa_r+0x826>
 800d368:	9b02      	ldr	r3, [sp, #8]
 800d36a:	e7f4      	b.n	800d356 <_dtoa_r+0x826>
 800d36c:	920a      	str	r2, [sp, #40]	; 0x28
 800d36e:	e7f3      	b.n	800d358 <_dtoa_r+0x828>
 800d370:	d081      	beq.n	800d276 <_dtoa_r+0x746>
 800d372:	4610      	mov	r0, r2
 800d374:	301c      	adds	r0, #28
 800d376:	e777      	b.n	800d268 <_dtoa_r+0x738>
 800d378:	f1b9 0f00 	cmp.w	r9, #0
 800d37c:	dc37      	bgt.n	800d3ee <_dtoa_r+0x8be>
 800d37e:	9b07      	ldr	r3, [sp, #28]
 800d380:	2b02      	cmp	r3, #2
 800d382:	dd34      	ble.n	800d3ee <_dtoa_r+0x8be>
 800d384:	46ca      	mov	sl, r9
 800d386:	f1ba 0f00 	cmp.w	sl, #0
 800d38a:	d10d      	bne.n	800d3a8 <_dtoa_r+0x878>
 800d38c:	4621      	mov	r1, r4
 800d38e:	4653      	mov	r3, sl
 800d390:	2205      	movs	r2, #5
 800d392:	4630      	mov	r0, r6
 800d394:	f000 f9ca 	bl	800d72c <__multadd>
 800d398:	4601      	mov	r1, r0
 800d39a:	4604      	mov	r4, r0
 800d39c:	4628      	mov	r0, r5
 800d39e:	f000 fbe1 	bl	800db64 <__mcmp>
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	f73f adde 	bgt.w	800cf64 <_dtoa_r+0x434>
 800d3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3aa:	f8dd 8000 	ldr.w	r8, [sp]
 800d3ae:	ea6f 0b03 	mvn.w	fp, r3
 800d3b2:	f04f 0900 	mov.w	r9, #0
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	4630      	mov	r0, r6
 800d3ba:	f000 f995 	bl	800d6e8 <_Bfree>
 800d3be:	2f00      	cmp	r7, #0
 800d3c0:	f43f aea7 	beq.w	800d112 <_dtoa_r+0x5e2>
 800d3c4:	f1b9 0f00 	cmp.w	r9, #0
 800d3c8:	d005      	beq.n	800d3d6 <_dtoa_r+0x8a6>
 800d3ca:	45b9      	cmp	r9, r7
 800d3cc:	d003      	beq.n	800d3d6 <_dtoa_r+0x8a6>
 800d3ce:	4649      	mov	r1, r9
 800d3d0:	4630      	mov	r0, r6
 800d3d2:	f000 f989 	bl	800d6e8 <_Bfree>
 800d3d6:	4639      	mov	r1, r7
 800d3d8:	4630      	mov	r0, r6
 800d3da:	f000 f985 	bl	800d6e8 <_Bfree>
 800d3de:	e698      	b.n	800d112 <_dtoa_r+0x5e2>
 800d3e0:	2400      	movs	r4, #0
 800d3e2:	4627      	mov	r7, r4
 800d3e4:	e7e0      	b.n	800d3a8 <_dtoa_r+0x878>
 800d3e6:	46bb      	mov	fp, r7
 800d3e8:	4604      	mov	r4, r0
 800d3ea:	4607      	mov	r7, r0
 800d3ec:	e5ba      	b.n	800cf64 <_dtoa_r+0x434>
 800d3ee:	9b08      	ldr	r3, [sp, #32]
 800d3f0:	46ca      	mov	sl, r9
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f000 8100 	beq.w	800d5f8 <_dtoa_r+0xac8>
 800d3f8:	f1b8 0f00 	cmp.w	r8, #0
 800d3fc:	dd05      	ble.n	800d40a <_dtoa_r+0x8da>
 800d3fe:	4639      	mov	r1, r7
 800d400:	4642      	mov	r2, r8
 800d402:	4630      	mov	r0, r6
 800d404:	f000 fb42 	bl	800da8c <__lshift>
 800d408:	4607      	mov	r7, r0
 800d40a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d05d      	beq.n	800d4cc <_dtoa_r+0x99c>
 800d410:	6879      	ldr	r1, [r7, #4]
 800d412:	4630      	mov	r0, r6
 800d414:	f000 f928 	bl	800d668 <_Balloc>
 800d418:	4680      	mov	r8, r0
 800d41a:	b928      	cbnz	r0, 800d428 <_dtoa_r+0x8f8>
 800d41c:	4b82      	ldr	r3, [pc, #520]	; (800d628 <_dtoa_r+0xaf8>)
 800d41e:	4602      	mov	r2, r0
 800d420:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d424:	f7ff bb9a 	b.w	800cb5c <_dtoa_r+0x2c>
 800d428:	693a      	ldr	r2, [r7, #16]
 800d42a:	3202      	adds	r2, #2
 800d42c:	0092      	lsls	r2, r2, #2
 800d42e:	f107 010c 	add.w	r1, r7, #12
 800d432:	300c      	adds	r0, #12
 800d434:	f000 f90a 	bl	800d64c <memcpy>
 800d438:	2201      	movs	r2, #1
 800d43a:	4641      	mov	r1, r8
 800d43c:	4630      	mov	r0, r6
 800d43e:	f000 fb25 	bl	800da8c <__lshift>
 800d442:	9b00      	ldr	r3, [sp, #0]
 800d444:	3301      	adds	r3, #1
 800d446:	9305      	str	r3, [sp, #20]
 800d448:	9b00      	ldr	r3, [sp, #0]
 800d44a:	4453      	add	r3, sl
 800d44c:	9309      	str	r3, [sp, #36]	; 0x24
 800d44e:	9b02      	ldr	r3, [sp, #8]
 800d450:	f003 0301 	and.w	r3, r3, #1
 800d454:	46b9      	mov	r9, r7
 800d456:	9308      	str	r3, [sp, #32]
 800d458:	4607      	mov	r7, r0
 800d45a:	9b05      	ldr	r3, [sp, #20]
 800d45c:	4621      	mov	r1, r4
 800d45e:	3b01      	subs	r3, #1
 800d460:	4628      	mov	r0, r5
 800d462:	9302      	str	r3, [sp, #8]
 800d464:	f7ff fad6 	bl	800ca14 <quorem>
 800d468:	4603      	mov	r3, r0
 800d46a:	3330      	adds	r3, #48	; 0x30
 800d46c:	9006      	str	r0, [sp, #24]
 800d46e:	4649      	mov	r1, r9
 800d470:	4628      	mov	r0, r5
 800d472:	930a      	str	r3, [sp, #40]	; 0x28
 800d474:	f000 fb76 	bl	800db64 <__mcmp>
 800d478:	463a      	mov	r2, r7
 800d47a:	4682      	mov	sl, r0
 800d47c:	4621      	mov	r1, r4
 800d47e:	4630      	mov	r0, r6
 800d480:	f000 fb8c 	bl	800db9c <__mdiff>
 800d484:	68c2      	ldr	r2, [r0, #12]
 800d486:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d488:	4680      	mov	r8, r0
 800d48a:	bb0a      	cbnz	r2, 800d4d0 <_dtoa_r+0x9a0>
 800d48c:	4601      	mov	r1, r0
 800d48e:	4628      	mov	r0, r5
 800d490:	f000 fb68 	bl	800db64 <__mcmp>
 800d494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d496:	4602      	mov	r2, r0
 800d498:	4641      	mov	r1, r8
 800d49a:	4630      	mov	r0, r6
 800d49c:	920e      	str	r2, [sp, #56]	; 0x38
 800d49e:	930a      	str	r3, [sp, #40]	; 0x28
 800d4a0:	f000 f922 	bl	800d6e8 <_Bfree>
 800d4a4:	9b07      	ldr	r3, [sp, #28]
 800d4a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4a8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d4ac:	ea43 0102 	orr.w	r1, r3, r2
 800d4b0:	9b08      	ldr	r3, [sp, #32]
 800d4b2:	430b      	orrs	r3, r1
 800d4b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4b6:	d10d      	bne.n	800d4d4 <_dtoa_r+0x9a4>
 800d4b8:	2b39      	cmp	r3, #57	; 0x39
 800d4ba:	d029      	beq.n	800d510 <_dtoa_r+0x9e0>
 800d4bc:	f1ba 0f00 	cmp.w	sl, #0
 800d4c0:	dd01      	ble.n	800d4c6 <_dtoa_r+0x996>
 800d4c2:	9b06      	ldr	r3, [sp, #24]
 800d4c4:	3331      	adds	r3, #49	; 0x31
 800d4c6:	9a02      	ldr	r2, [sp, #8]
 800d4c8:	7013      	strb	r3, [r2, #0]
 800d4ca:	e774      	b.n	800d3b6 <_dtoa_r+0x886>
 800d4cc:	4638      	mov	r0, r7
 800d4ce:	e7b8      	b.n	800d442 <_dtoa_r+0x912>
 800d4d0:	2201      	movs	r2, #1
 800d4d2:	e7e1      	b.n	800d498 <_dtoa_r+0x968>
 800d4d4:	f1ba 0f00 	cmp.w	sl, #0
 800d4d8:	db06      	blt.n	800d4e8 <_dtoa_r+0x9b8>
 800d4da:	9907      	ldr	r1, [sp, #28]
 800d4dc:	ea41 0a0a 	orr.w	sl, r1, sl
 800d4e0:	9908      	ldr	r1, [sp, #32]
 800d4e2:	ea5a 0101 	orrs.w	r1, sl, r1
 800d4e6:	d120      	bne.n	800d52a <_dtoa_r+0x9fa>
 800d4e8:	2a00      	cmp	r2, #0
 800d4ea:	ddec      	ble.n	800d4c6 <_dtoa_r+0x996>
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	9305      	str	r3, [sp, #20]
 800d4f4:	f000 faca 	bl	800da8c <__lshift>
 800d4f8:	4621      	mov	r1, r4
 800d4fa:	4605      	mov	r5, r0
 800d4fc:	f000 fb32 	bl	800db64 <__mcmp>
 800d500:	2800      	cmp	r0, #0
 800d502:	9b05      	ldr	r3, [sp, #20]
 800d504:	dc02      	bgt.n	800d50c <_dtoa_r+0x9dc>
 800d506:	d1de      	bne.n	800d4c6 <_dtoa_r+0x996>
 800d508:	07da      	lsls	r2, r3, #31
 800d50a:	d5dc      	bpl.n	800d4c6 <_dtoa_r+0x996>
 800d50c:	2b39      	cmp	r3, #57	; 0x39
 800d50e:	d1d8      	bne.n	800d4c2 <_dtoa_r+0x992>
 800d510:	9a02      	ldr	r2, [sp, #8]
 800d512:	2339      	movs	r3, #57	; 0x39
 800d514:	7013      	strb	r3, [r2, #0]
 800d516:	4643      	mov	r3, r8
 800d518:	4698      	mov	r8, r3
 800d51a:	3b01      	subs	r3, #1
 800d51c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d520:	2a39      	cmp	r2, #57	; 0x39
 800d522:	d051      	beq.n	800d5c8 <_dtoa_r+0xa98>
 800d524:	3201      	adds	r2, #1
 800d526:	701a      	strb	r2, [r3, #0]
 800d528:	e745      	b.n	800d3b6 <_dtoa_r+0x886>
 800d52a:	2a00      	cmp	r2, #0
 800d52c:	dd03      	ble.n	800d536 <_dtoa_r+0xa06>
 800d52e:	2b39      	cmp	r3, #57	; 0x39
 800d530:	d0ee      	beq.n	800d510 <_dtoa_r+0x9e0>
 800d532:	3301      	adds	r3, #1
 800d534:	e7c7      	b.n	800d4c6 <_dtoa_r+0x996>
 800d536:	9a05      	ldr	r2, [sp, #20]
 800d538:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d53a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d53e:	428a      	cmp	r2, r1
 800d540:	d02b      	beq.n	800d59a <_dtoa_r+0xa6a>
 800d542:	4629      	mov	r1, r5
 800d544:	2300      	movs	r3, #0
 800d546:	220a      	movs	r2, #10
 800d548:	4630      	mov	r0, r6
 800d54a:	f000 f8ef 	bl	800d72c <__multadd>
 800d54e:	45b9      	cmp	r9, r7
 800d550:	4605      	mov	r5, r0
 800d552:	f04f 0300 	mov.w	r3, #0
 800d556:	f04f 020a 	mov.w	r2, #10
 800d55a:	4649      	mov	r1, r9
 800d55c:	4630      	mov	r0, r6
 800d55e:	d107      	bne.n	800d570 <_dtoa_r+0xa40>
 800d560:	f000 f8e4 	bl	800d72c <__multadd>
 800d564:	4681      	mov	r9, r0
 800d566:	4607      	mov	r7, r0
 800d568:	9b05      	ldr	r3, [sp, #20]
 800d56a:	3301      	adds	r3, #1
 800d56c:	9305      	str	r3, [sp, #20]
 800d56e:	e774      	b.n	800d45a <_dtoa_r+0x92a>
 800d570:	f000 f8dc 	bl	800d72c <__multadd>
 800d574:	4639      	mov	r1, r7
 800d576:	4681      	mov	r9, r0
 800d578:	2300      	movs	r3, #0
 800d57a:	220a      	movs	r2, #10
 800d57c:	4630      	mov	r0, r6
 800d57e:	f000 f8d5 	bl	800d72c <__multadd>
 800d582:	4607      	mov	r7, r0
 800d584:	e7f0      	b.n	800d568 <_dtoa_r+0xa38>
 800d586:	f1ba 0f00 	cmp.w	sl, #0
 800d58a:	9a00      	ldr	r2, [sp, #0]
 800d58c:	bfcc      	ite	gt
 800d58e:	46d0      	movgt	r8, sl
 800d590:	f04f 0801 	movle.w	r8, #1
 800d594:	4490      	add	r8, r2
 800d596:	f04f 0900 	mov.w	r9, #0
 800d59a:	4629      	mov	r1, r5
 800d59c:	2201      	movs	r2, #1
 800d59e:	4630      	mov	r0, r6
 800d5a0:	9302      	str	r3, [sp, #8]
 800d5a2:	f000 fa73 	bl	800da8c <__lshift>
 800d5a6:	4621      	mov	r1, r4
 800d5a8:	4605      	mov	r5, r0
 800d5aa:	f000 fadb 	bl	800db64 <__mcmp>
 800d5ae:	2800      	cmp	r0, #0
 800d5b0:	dcb1      	bgt.n	800d516 <_dtoa_r+0x9e6>
 800d5b2:	d102      	bne.n	800d5ba <_dtoa_r+0xa8a>
 800d5b4:	9b02      	ldr	r3, [sp, #8]
 800d5b6:	07db      	lsls	r3, r3, #31
 800d5b8:	d4ad      	bmi.n	800d516 <_dtoa_r+0x9e6>
 800d5ba:	4643      	mov	r3, r8
 800d5bc:	4698      	mov	r8, r3
 800d5be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5c2:	2a30      	cmp	r2, #48	; 0x30
 800d5c4:	d0fa      	beq.n	800d5bc <_dtoa_r+0xa8c>
 800d5c6:	e6f6      	b.n	800d3b6 <_dtoa_r+0x886>
 800d5c8:	9a00      	ldr	r2, [sp, #0]
 800d5ca:	429a      	cmp	r2, r3
 800d5cc:	d1a4      	bne.n	800d518 <_dtoa_r+0x9e8>
 800d5ce:	f10b 0b01 	add.w	fp, fp, #1
 800d5d2:	2331      	movs	r3, #49	; 0x31
 800d5d4:	e778      	b.n	800d4c8 <_dtoa_r+0x998>
 800d5d6:	4b15      	ldr	r3, [pc, #84]	; (800d62c <_dtoa_r+0xafc>)
 800d5d8:	f7ff bb12 	b.w	800cc00 <_dtoa_r+0xd0>
 800d5dc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	f47f aaee 	bne.w	800cbc0 <_dtoa_r+0x90>
 800d5e4:	4b12      	ldr	r3, [pc, #72]	; (800d630 <_dtoa_r+0xb00>)
 800d5e6:	f7ff bb0b 	b.w	800cc00 <_dtoa_r+0xd0>
 800d5ea:	f1ba 0f00 	cmp.w	sl, #0
 800d5ee:	dc03      	bgt.n	800d5f8 <_dtoa_r+0xac8>
 800d5f0:	9b07      	ldr	r3, [sp, #28]
 800d5f2:	2b02      	cmp	r3, #2
 800d5f4:	f73f aec7 	bgt.w	800d386 <_dtoa_r+0x856>
 800d5f8:	f8dd 8000 	ldr.w	r8, [sp]
 800d5fc:	4621      	mov	r1, r4
 800d5fe:	4628      	mov	r0, r5
 800d600:	f7ff fa08 	bl	800ca14 <quorem>
 800d604:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d608:	f808 3b01 	strb.w	r3, [r8], #1
 800d60c:	9a00      	ldr	r2, [sp, #0]
 800d60e:	eba8 0202 	sub.w	r2, r8, r2
 800d612:	4592      	cmp	sl, r2
 800d614:	ddb7      	ble.n	800d586 <_dtoa_r+0xa56>
 800d616:	4629      	mov	r1, r5
 800d618:	2300      	movs	r3, #0
 800d61a:	220a      	movs	r2, #10
 800d61c:	4630      	mov	r0, r6
 800d61e:	f000 f885 	bl	800d72c <__multadd>
 800d622:	4605      	mov	r5, r0
 800d624:	e7ea      	b.n	800d5fc <_dtoa_r+0xacc>
 800d626:	bf00      	nop
 800d628:	0800eb27 	.word	0x0800eb27
 800d62c:	0800ea80 	.word	0x0800ea80
 800d630:	0800eaa4 	.word	0x0800eaa4

0800d634 <_localeconv_r>:
 800d634:	4800      	ldr	r0, [pc, #0]	; (800d638 <_localeconv_r+0x4>)
 800d636:	4770      	bx	lr
 800d638:	24000164 	.word	0x24000164

0800d63c <malloc>:
 800d63c:	4b02      	ldr	r3, [pc, #8]	; (800d648 <malloc+0xc>)
 800d63e:	4601      	mov	r1, r0
 800d640:	6818      	ldr	r0, [r3, #0]
 800d642:	f000 bbef 	b.w	800de24 <_malloc_r>
 800d646:	bf00      	nop
 800d648:	24000010 	.word	0x24000010

0800d64c <memcpy>:
 800d64c:	440a      	add	r2, r1
 800d64e:	4291      	cmp	r1, r2
 800d650:	f100 33ff 	add.w	r3, r0, #4294967295
 800d654:	d100      	bne.n	800d658 <memcpy+0xc>
 800d656:	4770      	bx	lr
 800d658:	b510      	push	{r4, lr}
 800d65a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d65e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d662:	4291      	cmp	r1, r2
 800d664:	d1f9      	bne.n	800d65a <memcpy+0xe>
 800d666:	bd10      	pop	{r4, pc}

0800d668 <_Balloc>:
 800d668:	b570      	push	{r4, r5, r6, lr}
 800d66a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d66c:	4604      	mov	r4, r0
 800d66e:	460d      	mov	r5, r1
 800d670:	b976      	cbnz	r6, 800d690 <_Balloc+0x28>
 800d672:	2010      	movs	r0, #16
 800d674:	f7ff ffe2 	bl	800d63c <malloc>
 800d678:	4602      	mov	r2, r0
 800d67a:	6260      	str	r0, [r4, #36]	; 0x24
 800d67c:	b920      	cbnz	r0, 800d688 <_Balloc+0x20>
 800d67e:	4b18      	ldr	r3, [pc, #96]	; (800d6e0 <_Balloc+0x78>)
 800d680:	4818      	ldr	r0, [pc, #96]	; (800d6e4 <_Balloc+0x7c>)
 800d682:	2166      	movs	r1, #102	; 0x66
 800d684:	f000 fc38 	bl	800def8 <__assert_func>
 800d688:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d68c:	6006      	str	r6, [r0, #0]
 800d68e:	60c6      	str	r6, [r0, #12]
 800d690:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d692:	68f3      	ldr	r3, [r6, #12]
 800d694:	b183      	cbz	r3, 800d6b8 <_Balloc+0x50>
 800d696:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d698:	68db      	ldr	r3, [r3, #12]
 800d69a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d69e:	b9b8      	cbnz	r0, 800d6d0 <_Balloc+0x68>
 800d6a0:	2101      	movs	r1, #1
 800d6a2:	fa01 f605 	lsl.w	r6, r1, r5
 800d6a6:	1d72      	adds	r2, r6, #5
 800d6a8:	0092      	lsls	r2, r2, #2
 800d6aa:	4620      	mov	r0, r4
 800d6ac:	f000 fb5a 	bl	800dd64 <_calloc_r>
 800d6b0:	b160      	cbz	r0, 800d6cc <_Balloc+0x64>
 800d6b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d6b6:	e00e      	b.n	800d6d6 <_Balloc+0x6e>
 800d6b8:	2221      	movs	r2, #33	; 0x21
 800d6ba:	2104      	movs	r1, #4
 800d6bc:	4620      	mov	r0, r4
 800d6be:	f000 fb51 	bl	800dd64 <_calloc_r>
 800d6c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6c4:	60f0      	str	r0, [r6, #12]
 800d6c6:	68db      	ldr	r3, [r3, #12]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1e4      	bne.n	800d696 <_Balloc+0x2e>
 800d6cc:	2000      	movs	r0, #0
 800d6ce:	bd70      	pop	{r4, r5, r6, pc}
 800d6d0:	6802      	ldr	r2, [r0, #0]
 800d6d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d6dc:	e7f7      	b.n	800d6ce <_Balloc+0x66>
 800d6de:	bf00      	nop
 800d6e0:	0800eab1 	.word	0x0800eab1
 800d6e4:	0800eb38 	.word	0x0800eb38

0800d6e8 <_Bfree>:
 800d6e8:	b570      	push	{r4, r5, r6, lr}
 800d6ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d6ec:	4605      	mov	r5, r0
 800d6ee:	460c      	mov	r4, r1
 800d6f0:	b976      	cbnz	r6, 800d710 <_Bfree+0x28>
 800d6f2:	2010      	movs	r0, #16
 800d6f4:	f7ff ffa2 	bl	800d63c <malloc>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	6268      	str	r0, [r5, #36]	; 0x24
 800d6fc:	b920      	cbnz	r0, 800d708 <_Bfree+0x20>
 800d6fe:	4b09      	ldr	r3, [pc, #36]	; (800d724 <_Bfree+0x3c>)
 800d700:	4809      	ldr	r0, [pc, #36]	; (800d728 <_Bfree+0x40>)
 800d702:	218a      	movs	r1, #138	; 0x8a
 800d704:	f000 fbf8 	bl	800def8 <__assert_func>
 800d708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d70c:	6006      	str	r6, [r0, #0]
 800d70e:	60c6      	str	r6, [r0, #12]
 800d710:	b13c      	cbz	r4, 800d722 <_Bfree+0x3a>
 800d712:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d714:	6862      	ldr	r2, [r4, #4]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d71c:	6021      	str	r1, [r4, #0]
 800d71e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d722:	bd70      	pop	{r4, r5, r6, pc}
 800d724:	0800eab1 	.word	0x0800eab1
 800d728:	0800eb38 	.word	0x0800eb38

0800d72c <__multadd>:
 800d72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d730:	690e      	ldr	r6, [r1, #16]
 800d732:	4607      	mov	r7, r0
 800d734:	4698      	mov	r8, r3
 800d736:	460c      	mov	r4, r1
 800d738:	f101 0014 	add.w	r0, r1, #20
 800d73c:	2300      	movs	r3, #0
 800d73e:	6805      	ldr	r5, [r0, #0]
 800d740:	b2a9      	uxth	r1, r5
 800d742:	fb02 8101 	mla	r1, r2, r1, r8
 800d746:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800d74a:	0c2d      	lsrs	r5, r5, #16
 800d74c:	fb02 c505 	mla	r5, r2, r5, ip
 800d750:	b289      	uxth	r1, r1
 800d752:	3301      	adds	r3, #1
 800d754:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800d758:	429e      	cmp	r6, r3
 800d75a:	f840 1b04 	str.w	r1, [r0], #4
 800d75e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800d762:	dcec      	bgt.n	800d73e <__multadd+0x12>
 800d764:	f1b8 0f00 	cmp.w	r8, #0
 800d768:	d022      	beq.n	800d7b0 <__multadd+0x84>
 800d76a:	68a3      	ldr	r3, [r4, #8]
 800d76c:	42b3      	cmp	r3, r6
 800d76e:	dc19      	bgt.n	800d7a4 <__multadd+0x78>
 800d770:	6861      	ldr	r1, [r4, #4]
 800d772:	4638      	mov	r0, r7
 800d774:	3101      	adds	r1, #1
 800d776:	f7ff ff77 	bl	800d668 <_Balloc>
 800d77a:	4605      	mov	r5, r0
 800d77c:	b928      	cbnz	r0, 800d78a <__multadd+0x5e>
 800d77e:	4602      	mov	r2, r0
 800d780:	4b0d      	ldr	r3, [pc, #52]	; (800d7b8 <__multadd+0x8c>)
 800d782:	480e      	ldr	r0, [pc, #56]	; (800d7bc <__multadd+0x90>)
 800d784:	21b5      	movs	r1, #181	; 0xb5
 800d786:	f000 fbb7 	bl	800def8 <__assert_func>
 800d78a:	6922      	ldr	r2, [r4, #16]
 800d78c:	3202      	adds	r2, #2
 800d78e:	f104 010c 	add.w	r1, r4, #12
 800d792:	0092      	lsls	r2, r2, #2
 800d794:	300c      	adds	r0, #12
 800d796:	f7ff ff59 	bl	800d64c <memcpy>
 800d79a:	4621      	mov	r1, r4
 800d79c:	4638      	mov	r0, r7
 800d79e:	f7ff ffa3 	bl	800d6e8 <_Bfree>
 800d7a2:	462c      	mov	r4, r5
 800d7a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800d7a8:	3601      	adds	r6, #1
 800d7aa:	f8c3 8014 	str.w	r8, [r3, #20]
 800d7ae:	6126      	str	r6, [r4, #16]
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7b6:	bf00      	nop
 800d7b8:	0800eb27 	.word	0x0800eb27
 800d7bc:	0800eb38 	.word	0x0800eb38

0800d7c0 <__hi0bits>:
 800d7c0:	0c03      	lsrs	r3, r0, #16
 800d7c2:	041b      	lsls	r3, r3, #16
 800d7c4:	b9d3      	cbnz	r3, 800d7fc <__hi0bits+0x3c>
 800d7c6:	0400      	lsls	r0, r0, #16
 800d7c8:	2310      	movs	r3, #16
 800d7ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d7ce:	bf04      	itt	eq
 800d7d0:	0200      	lsleq	r0, r0, #8
 800d7d2:	3308      	addeq	r3, #8
 800d7d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d7d8:	bf04      	itt	eq
 800d7da:	0100      	lsleq	r0, r0, #4
 800d7dc:	3304      	addeq	r3, #4
 800d7de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d7e2:	bf04      	itt	eq
 800d7e4:	0080      	lsleq	r0, r0, #2
 800d7e6:	3302      	addeq	r3, #2
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	db05      	blt.n	800d7f8 <__hi0bits+0x38>
 800d7ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d7f0:	f103 0301 	add.w	r3, r3, #1
 800d7f4:	bf08      	it	eq
 800d7f6:	2320      	moveq	r3, #32
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	4770      	bx	lr
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	e7e4      	b.n	800d7ca <__hi0bits+0xa>

0800d800 <__lo0bits>:
 800d800:	6803      	ldr	r3, [r0, #0]
 800d802:	f013 0207 	ands.w	r2, r3, #7
 800d806:	4601      	mov	r1, r0
 800d808:	d00b      	beq.n	800d822 <__lo0bits+0x22>
 800d80a:	07da      	lsls	r2, r3, #31
 800d80c:	d424      	bmi.n	800d858 <__lo0bits+0x58>
 800d80e:	0798      	lsls	r0, r3, #30
 800d810:	bf49      	itett	mi
 800d812:	085b      	lsrmi	r3, r3, #1
 800d814:	089b      	lsrpl	r3, r3, #2
 800d816:	2001      	movmi	r0, #1
 800d818:	600b      	strmi	r3, [r1, #0]
 800d81a:	bf5c      	itt	pl
 800d81c:	600b      	strpl	r3, [r1, #0]
 800d81e:	2002      	movpl	r0, #2
 800d820:	4770      	bx	lr
 800d822:	b298      	uxth	r0, r3
 800d824:	b9b0      	cbnz	r0, 800d854 <__lo0bits+0x54>
 800d826:	0c1b      	lsrs	r3, r3, #16
 800d828:	2010      	movs	r0, #16
 800d82a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d82e:	bf04      	itt	eq
 800d830:	0a1b      	lsreq	r3, r3, #8
 800d832:	3008      	addeq	r0, #8
 800d834:	071a      	lsls	r2, r3, #28
 800d836:	bf04      	itt	eq
 800d838:	091b      	lsreq	r3, r3, #4
 800d83a:	3004      	addeq	r0, #4
 800d83c:	079a      	lsls	r2, r3, #30
 800d83e:	bf04      	itt	eq
 800d840:	089b      	lsreq	r3, r3, #2
 800d842:	3002      	addeq	r0, #2
 800d844:	07da      	lsls	r2, r3, #31
 800d846:	d403      	bmi.n	800d850 <__lo0bits+0x50>
 800d848:	085b      	lsrs	r3, r3, #1
 800d84a:	f100 0001 	add.w	r0, r0, #1
 800d84e:	d005      	beq.n	800d85c <__lo0bits+0x5c>
 800d850:	600b      	str	r3, [r1, #0]
 800d852:	4770      	bx	lr
 800d854:	4610      	mov	r0, r2
 800d856:	e7e8      	b.n	800d82a <__lo0bits+0x2a>
 800d858:	2000      	movs	r0, #0
 800d85a:	4770      	bx	lr
 800d85c:	2020      	movs	r0, #32
 800d85e:	4770      	bx	lr

0800d860 <__i2b>:
 800d860:	b510      	push	{r4, lr}
 800d862:	460c      	mov	r4, r1
 800d864:	2101      	movs	r1, #1
 800d866:	f7ff feff 	bl	800d668 <_Balloc>
 800d86a:	4602      	mov	r2, r0
 800d86c:	b928      	cbnz	r0, 800d87a <__i2b+0x1a>
 800d86e:	4b05      	ldr	r3, [pc, #20]	; (800d884 <__i2b+0x24>)
 800d870:	4805      	ldr	r0, [pc, #20]	; (800d888 <__i2b+0x28>)
 800d872:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d876:	f000 fb3f 	bl	800def8 <__assert_func>
 800d87a:	2301      	movs	r3, #1
 800d87c:	6144      	str	r4, [r0, #20]
 800d87e:	6103      	str	r3, [r0, #16]
 800d880:	bd10      	pop	{r4, pc}
 800d882:	bf00      	nop
 800d884:	0800eb27 	.word	0x0800eb27
 800d888:	0800eb38 	.word	0x0800eb38

0800d88c <__multiply>:
 800d88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d890:	4614      	mov	r4, r2
 800d892:	690a      	ldr	r2, [r1, #16]
 800d894:	6923      	ldr	r3, [r4, #16]
 800d896:	429a      	cmp	r2, r3
 800d898:	bfb8      	it	lt
 800d89a:	460b      	movlt	r3, r1
 800d89c:	460d      	mov	r5, r1
 800d89e:	bfbc      	itt	lt
 800d8a0:	4625      	movlt	r5, r4
 800d8a2:	461c      	movlt	r4, r3
 800d8a4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800d8a8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d8ac:	68ab      	ldr	r3, [r5, #8]
 800d8ae:	6869      	ldr	r1, [r5, #4]
 800d8b0:	eb0a 0709 	add.w	r7, sl, r9
 800d8b4:	42bb      	cmp	r3, r7
 800d8b6:	b085      	sub	sp, #20
 800d8b8:	bfb8      	it	lt
 800d8ba:	3101      	addlt	r1, #1
 800d8bc:	f7ff fed4 	bl	800d668 <_Balloc>
 800d8c0:	b930      	cbnz	r0, 800d8d0 <__multiply+0x44>
 800d8c2:	4602      	mov	r2, r0
 800d8c4:	4b42      	ldr	r3, [pc, #264]	; (800d9d0 <__multiply+0x144>)
 800d8c6:	4843      	ldr	r0, [pc, #268]	; (800d9d4 <__multiply+0x148>)
 800d8c8:	f240 115d 	movw	r1, #349	; 0x15d
 800d8cc:	f000 fb14 	bl	800def8 <__assert_func>
 800d8d0:	f100 0614 	add.w	r6, r0, #20
 800d8d4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800d8d8:	4633      	mov	r3, r6
 800d8da:	2200      	movs	r2, #0
 800d8dc:	4543      	cmp	r3, r8
 800d8de:	d31e      	bcc.n	800d91e <__multiply+0x92>
 800d8e0:	f105 0c14 	add.w	ip, r5, #20
 800d8e4:	f104 0314 	add.w	r3, r4, #20
 800d8e8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800d8ec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800d8f0:	9202      	str	r2, [sp, #8]
 800d8f2:	ebac 0205 	sub.w	r2, ip, r5
 800d8f6:	3a15      	subs	r2, #21
 800d8f8:	f022 0203 	bic.w	r2, r2, #3
 800d8fc:	3204      	adds	r2, #4
 800d8fe:	f105 0115 	add.w	r1, r5, #21
 800d902:	458c      	cmp	ip, r1
 800d904:	bf38      	it	cc
 800d906:	2204      	movcc	r2, #4
 800d908:	9201      	str	r2, [sp, #4]
 800d90a:	9a02      	ldr	r2, [sp, #8]
 800d90c:	9303      	str	r3, [sp, #12]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d808      	bhi.n	800d924 <__multiply+0x98>
 800d912:	2f00      	cmp	r7, #0
 800d914:	dc55      	bgt.n	800d9c2 <__multiply+0x136>
 800d916:	6107      	str	r7, [r0, #16]
 800d918:	b005      	add	sp, #20
 800d91a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d91e:	f843 2b04 	str.w	r2, [r3], #4
 800d922:	e7db      	b.n	800d8dc <__multiply+0x50>
 800d924:	f8b3 a000 	ldrh.w	sl, [r3]
 800d928:	f1ba 0f00 	cmp.w	sl, #0
 800d92c:	d020      	beq.n	800d970 <__multiply+0xe4>
 800d92e:	f105 0e14 	add.w	lr, r5, #20
 800d932:	46b1      	mov	r9, r6
 800d934:	2200      	movs	r2, #0
 800d936:	f85e 4b04 	ldr.w	r4, [lr], #4
 800d93a:	f8d9 b000 	ldr.w	fp, [r9]
 800d93e:	b2a1      	uxth	r1, r4
 800d940:	fa1f fb8b 	uxth.w	fp, fp
 800d944:	fb0a b101 	mla	r1, sl, r1, fp
 800d948:	4411      	add	r1, r2
 800d94a:	f8d9 2000 	ldr.w	r2, [r9]
 800d94e:	0c24      	lsrs	r4, r4, #16
 800d950:	0c12      	lsrs	r2, r2, #16
 800d952:	fb0a 2404 	mla	r4, sl, r4, r2
 800d956:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800d95a:	b289      	uxth	r1, r1
 800d95c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d960:	45f4      	cmp	ip, lr
 800d962:	f849 1b04 	str.w	r1, [r9], #4
 800d966:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800d96a:	d8e4      	bhi.n	800d936 <__multiply+0xaa>
 800d96c:	9901      	ldr	r1, [sp, #4]
 800d96e:	5072      	str	r2, [r6, r1]
 800d970:	9a03      	ldr	r2, [sp, #12]
 800d972:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d976:	3304      	adds	r3, #4
 800d978:	f1b9 0f00 	cmp.w	r9, #0
 800d97c:	d01f      	beq.n	800d9be <__multiply+0x132>
 800d97e:	6834      	ldr	r4, [r6, #0]
 800d980:	f105 0114 	add.w	r1, r5, #20
 800d984:	46b6      	mov	lr, r6
 800d986:	f04f 0a00 	mov.w	sl, #0
 800d98a:	880a      	ldrh	r2, [r1, #0]
 800d98c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800d990:	fb09 b202 	mla	r2, r9, r2, fp
 800d994:	4492      	add	sl, r2
 800d996:	b2a4      	uxth	r4, r4
 800d998:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d99c:	f84e 4b04 	str.w	r4, [lr], #4
 800d9a0:	f851 4b04 	ldr.w	r4, [r1], #4
 800d9a4:	f8be 2000 	ldrh.w	r2, [lr]
 800d9a8:	0c24      	lsrs	r4, r4, #16
 800d9aa:	fb09 2404 	mla	r4, r9, r4, r2
 800d9ae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800d9b2:	458c      	cmp	ip, r1
 800d9b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d9b8:	d8e7      	bhi.n	800d98a <__multiply+0xfe>
 800d9ba:	9a01      	ldr	r2, [sp, #4]
 800d9bc:	50b4      	str	r4, [r6, r2]
 800d9be:	3604      	adds	r6, #4
 800d9c0:	e7a3      	b.n	800d90a <__multiply+0x7e>
 800d9c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d1a5      	bne.n	800d916 <__multiply+0x8a>
 800d9ca:	3f01      	subs	r7, #1
 800d9cc:	e7a1      	b.n	800d912 <__multiply+0x86>
 800d9ce:	bf00      	nop
 800d9d0:	0800eb27 	.word	0x0800eb27
 800d9d4:	0800eb38 	.word	0x0800eb38

0800d9d8 <__pow5mult>:
 800d9d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9dc:	4615      	mov	r5, r2
 800d9de:	f012 0203 	ands.w	r2, r2, #3
 800d9e2:	4606      	mov	r6, r0
 800d9e4:	460f      	mov	r7, r1
 800d9e6:	d007      	beq.n	800d9f8 <__pow5mult+0x20>
 800d9e8:	4c25      	ldr	r4, [pc, #148]	; (800da80 <__pow5mult+0xa8>)
 800d9ea:	3a01      	subs	r2, #1
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d9f2:	f7ff fe9b 	bl	800d72c <__multadd>
 800d9f6:	4607      	mov	r7, r0
 800d9f8:	10ad      	asrs	r5, r5, #2
 800d9fa:	d03d      	beq.n	800da78 <__pow5mult+0xa0>
 800d9fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d9fe:	b97c      	cbnz	r4, 800da20 <__pow5mult+0x48>
 800da00:	2010      	movs	r0, #16
 800da02:	f7ff fe1b 	bl	800d63c <malloc>
 800da06:	4602      	mov	r2, r0
 800da08:	6270      	str	r0, [r6, #36]	; 0x24
 800da0a:	b928      	cbnz	r0, 800da18 <__pow5mult+0x40>
 800da0c:	4b1d      	ldr	r3, [pc, #116]	; (800da84 <__pow5mult+0xac>)
 800da0e:	481e      	ldr	r0, [pc, #120]	; (800da88 <__pow5mult+0xb0>)
 800da10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800da14:	f000 fa70 	bl	800def8 <__assert_func>
 800da18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da1c:	6004      	str	r4, [r0, #0]
 800da1e:	60c4      	str	r4, [r0, #12]
 800da20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800da24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800da28:	b94c      	cbnz	r4, 800da3e <__pow5mult+0x66>
 800da2a:	f240 2171 	movw	r1, #625	; 0x271
 800da2e:	4630      	mov	r0, r6
 800da30:	f7ff ff16 	bl	800d860 <__i2b>
 800da34:	2300      	movs	r3, #0
 800da36:	f8c8 0008 	str.w	r0, [r8, #8]
 800da3a:	4604      	mov	r4, r0
 800da3c:	6003      	str	r3, [r0, #0]
 800da3e:	f04f 0900 	mov.w	r9, #0
 800da42:	07eb      	lsls	r3, r5, #31
 800da44:	d50a      	bpl.n	800da5c <__pow5mult+0x84>
 800da46:	4639      	mov	r1, r7
 800da48:	4622      	mov	r2, r4
 800da4a:	4630      	mov	r0, r6
 800da4c:	f7ff ff1e 	bl	800d88c <__multiply>
 800da50:	4639      	mov	r1, r7
 800da52:	4680      	mov	r8, r0
 800da54:	4630      	mov	r0, r6
 800da56:	f7ff fe47 	bl	800d6e8 <_Bfree>
 800da5a:	4647      	mov	r7, r8
 800da5c:	106d      	asrs	r5, r5, #1
 800da5e:	d00b      	beq.n	800da78 <__pow5mult+0xa0>
 800da60:	6820      	ldr	r0, [r4, #0]
 800da62:	b938      	cbnz	r0, 800da74 <__pow5mult+0x9c>
 800da64:	4622      	mov	r2, r4
 800da66:	4621      	mov	r1, r4
 800da68:	4630      	mov	r0, r6
 800da6a:	f7ff ff0f 	bl	800d88c <__multiply>
 800da6e:	6020      	str	r0, [r4, #0]
 800da70:	f8c0 9000 	str.w	r9, [r0]
 800da74:	4604      	mov	r4, r0
 800da76:	e7e4      	b.n	800da42 <__pow5mult+0x6a>
 800da78:	4638      	mov	r0, r7
 800da7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da7e:	bf00      	nop
 800da80:	0800ec88 	.word	0x0800ec88
 800da84:	0800eab1 	.word	0x0800eab1
 800da88:	0800eb38 	.word	0x0800eb38

0800da8c <__lshift>:
 800da8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da90:	460c      	mov	r4, r1
 800da92:	6849      	ldr	r1, [r1, #4]
 800da94:	6923      	ldr	r3, [r4, #16]
 800da96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800da9a:	68a3      	ldr	r3, [r4, #8]
 800da9c:	4607      	mov	r7, r0
 800da9e:	4691      	mov	r9, r2
 800daa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800daa4:	f108 0601 	add.w	r6, r8, #1
 800daa8:	42b3      	cmp	r3, r6
 800daaa:	db0b      	blt.n	800dac4 <__lshift+0x38>
 800daac:	4638      	mov	r0, r7
 800daae:	f7ff fddb 	bl	800d668 <_Balloc>
 800dab2:	4605      	mov	r5, r0
 800dab4:	b948      	cbnz	r0, 800daca <__lshift+0x3e>
 800dab6:	4602      	mov	r2, r0
 800dab8:	4b28      	ldr	r3, [pc, #160]	; (800db5c <__lshift+0xd0>)
 800daba:	4829      	ldr	r0, [pc, #164]	; (800db60 <__lshift+0xd4>)
 800dabc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dac0:	f000 fa1a 	bl	800def8 <__assert_func>
 800dac4:	3101      	adds	r1, #1
 800dac6:	005b      	lsls	r3, r3, #1
 800dac8:	e7ee      	b.n	800daa8 <__lshift+0x1c>
 800daca:	2300      	movs	r3, #0
 800dacc:	f100 0114 	add.w	r1, r0, #20
 800dad0:	f100 0210 	add.w	r2, r0, #16
 800dad4:	4618      	mov	r0, r3
 800dad6:	4553      	cmp	r3, sl
 800dad8:	db33      	blt.n	800db42 <__lshift+0xb6>
 800dada:	6920      	ldr	r0, [r4, #16]
 800dadc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dae0:	f104 0314 	add.w	r3, r4, #20
 800dae4:	f019 091f 	ands.w	r9, r9, #31
 800dae8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800daec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800daf0:	d02b      	beq.n	800db4a <__lshift+0xbe>
 800daf2:	f1c9 0e20 	rsb	lr, r9, #32
 800daf6:	468a      	mov	sl, r1
 800daf8:	2200      	movs	r2, #0
 800dafa:	6818      	ldr	r0, [r3, #0]
 800dafc:	fa00 f009 	lsl.w	r0, r0, r9
 800db00:	4302      	orrs	r2, r0
 800db02:	f84a 2b04 	str.w	r2, [sl], #4
 800db06:	f853 2b04 	ldr.w	r2, [r3], #4
 800db0a:	459c      	cmp	ip, r3
 800db0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800db10:	d8f3      	bhi.n	800dafa <__lshift+0x6e>
 800db12:	ebac 0304 	sub.w	r3, ip, r4
 800db16:	3b15      	subs	r3, #21
 800db18:	f023 0303 	bic.w	r3, r3, #3
 800db1c:	3304      	adds	r3, #4
 800db1e:	f104 0015 	add.w	r0, r4, #21
 800db22:	4584      	cmp	ip, r0
 800db24:	bf38      	it	cc
 800db26:	2304      	movcc	r3, #4
 800db28:	50ca      	str	r2, [r1, r3]
 800db2a:	b10a      	cbz	r2, 800db30 <__lshift+0xa4>
 800db2c:	f108 0602 	add.w	r6, r8, #2
 800db30:	3e01      	subs	r6, #1
 800db32:	4638      	mov	r0, r7
 800db34:	612e      	str	r6, [r5, #16]
 800db36:	4621      	mov	r1, r4
 800db38:	f7ff fdd6 	bl	800d6e8 <_Bfree>
 800db3c:	4628      	mov	r0, r5
 800db3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db42:	f842 0f04 	str.w	r0, [r2, #4]!
 800db46:	3301      	adds	r3, #1
 800db48:	e7c5      	b.n	800dad6 <__lshift+0x4a>
 800db4a:	3904      	subs	r1, #4
 800db4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800db50:	f841 2f04 	str.w	r2, [r1, #4]!
 800db54:	459c      	cmp	ip, r3
 800db56:	d8f9      	bhi.n	800db4c <__lshift+0xc0>
 800db58:	e7ea      	b.n	800db30 <__lshift+0xa4>
 800db5a:	bf00      	nop
 800db5c:	0800eb27 	.word	0x0800eb27
 800db60:	0800eb38 	.word	0x0800eb38

0800db64 <__mcmp>:
 800db64:	b530      	push	{r4, r5, lr}
 800db66:	6902      	ldr	r2, [r0, #16]
 800db68:	690c      	ldr	r4, [r1, #16]
 800db6a:	1b12      	subs	r2, r2, r4
 800db6c:	d10e      	bne.n	800db8c <__mcmp+0x28>
 800db6e:	f100 0314 	add.w	r3, r0, #20
 800db72:	3114      	adds	r1, #20
 800db74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800db78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800db7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800db80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800db84:	42a5      	cmp	r5, r4
 800db86:	d003      	beq.n	800db90 <__mcmp+0x2c>
 800db88:	d305      	bcc.n	800db96 <__mcmp+0x32>
 800db8a:	2201      	movs	r2, #1
 800db8c:	4610      	mov	r0, r2
 800db8e:	bd30      	pop	{r4, r5, pc}
 800db90:	4283      	cmp	r3, r0
 800db92:	d3f3      	bcc.n	800db7c <__mcmp+0x18>
 800db94:	e7fa      	b.n	800db8c <__mcmp+0x28>
 800db96:	f04f 32ff 	mov.w	r2, #4294967295
 800db9a:	e7f7      	b.n	800db8c <__mcmp+0x28>

0800db9c <__mdiff>:
 800db9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dba0:	460c      	mov	r4, r1
 800dba2:	4606      	mov	r6, r0
 800dba4:	4611      	mov	r1, r2
 800dba6:	4620      	mov	r0, r4
 800dba8:	4617      	mov	r7, r2
 800dbaa:	f7ff ffdb 	bl	800db64 <__mcmp>
 800dbae:	1e05      	subs	r5, r0, #0
 800dbb0:	d110      	bne.n	800dbd4 <__mdiff+0x38>
 800dbb2:	4629      	mov	r1, r5
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	f7ff fd57 	bl	800d668 <_Balloc>
 800dbba:	b930      	cbnz	r0, 800dbca <__mdiff+0x2e>
 800dbbc:	4b39      	ldr	r3, [pc, #228]	; (800dca4 <__mdiff+0x108>)
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	f240 2132 	movw	r1, #562	; 0x232
 800dbc4:	4838      	ldr	r0, [pc, #224]	; (800dca8 <__mdiff+0x10c>)
 800dbc6:	f000 f997 	bl	800def8 <__assert_func>
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dbd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbd4:	bfa4      	itt	ge
 800dbd6:	463b      	movge	r3, r7
 800dbd8:	4627      	movge	r7, r4
 800dbda:	4630      	mov	r0, r6
 800dbdc:	6879      	ldr	r1, [r7, #4]
 800dbde:	bfa6      	itte	ge
 800dbe0:	461c      	movge	r4, r3
 800dbe2:	2500      	movge	r5, #0
 800dbe4:	2501      	movlt	r5, #1
 800dbe6:	f7ff fd3f 	bl	800d668 <_Balloc>
 800dbea:	b920      	cbnz	r0, 800dbf6 <__mdiff+0x5a>
 800dbec:	4b2d      	ldr	r3, [pc, #180]	; (800dca4 <__mdiff+0x108>)
 800dbee:	4602      	mov	r2, r0
 800dbf0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dbf4:	e7e6      	b.n	800dbc4 <__mdiff+0x28>
 800dbf6:	693e      	ldr	r6, [r7, #16]
 800dbf8:	60c5      	str	r5, [r0, #12]
 800dbfa:	6925      	ldr	r5, [r4, #16]
 800dbfc:	f107 0114 	add.w	r1, r7, #20
 800dc00:	f104 0914 	add.w	r9, r4, #20
 800dc04:	f100 0e14 	add.w	lr, r0, #20
 800dc08:	f107 0210 	add.w	r2, r7, #16
 800dc0c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800dc10:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800dc14:	46f2      	mov	sl, lr
 800dc16:	2700      	movs	r7, #0
 800dc18:	f859 3b04 	ldr.w	r3, [r9], #4
 800dc1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dc20:	fa1f f883 	uxth.w	r8, r3
 800dc24:	fa17 f78b 	uxtah	r7, r7, fp
 800dc28:	0c1b      	lsrs	r3, r3, #16
 800dc2a:	eba7 0808 	sub.w	r8, r7, r8
 800dc2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dc32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dc36:	fa1f f888 	uxth.w	r8, r8
 800dc3a:	141f      	asrs	r7, r3, #16
 800dc3c:	454d      	cmp	r5, r9
 800dc3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dc42:	f84a 3b04 	str.w	r3, [sl], #4
 800dc46:	d8e7      	bhi.n	800dc18 <__mdiff+0x7c>
 800dc48:	1b2b      	subs	r3, r5, r4
 800dc4a:	3b15      	subs	r3, #21
 800dc4c:	f023 0303 	bic.w	r3, r3, #3
 800dc50:	3304      	adds	r3, #4
 800dc52:	3415      	adds	r4, #21
 800dc54:	42a5      	cmp	r5, r4
 800dc56:	bf38      	it	cc
 800dc58:	2304      	movcc	r3, #4
 800dc5a:	4419      	add	r1, r3
 800dc5c:	4473      	add	r3, lr
 800dc5e:	469e      	mov	lr, r3
 800dc60:	460d      	mov	r5, r1
 800dc62:	4565      	cmp	r5, ip
 800dc64:	d30e      	bcc.n	800dc84 <__mdiff+0xe8>
 800dc66:	f10c 0203 	add.w	r2, ip, #3
 800dc6a:	1a52      	subs	r2, r2, r1
 800dc6c:	f022 0203 	bic.w	r2, r2, #3
 800dc70:	3903      	subs	r1, #3
 800dc72:	458c      	cmp	ip, r1
 800dc74:	bf38      	it	cc
 800dc76:	2200      	movcc	r2, #0
 800dc78:	441a      	add	r2, r3
 800dc7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dc7e:	b17b      	cbz	r3, 800dca0 <__mdiff+0x104>
 800dc80:	6106      	str	r6, [r0, #16]
 800dc82:	e7a5      	b.n	800dbd0 <__mdiff+0x34>
 800dc84:	f855 8b04 	ldr.w	r8, [r5], #4
 800dc88:	fa17 f488 	uxtah	r4, r7, r8
 800dc8c:	1422      	asrs	r2, r4, #16
 800dc8e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800dc92:	b2a4      	uxth	r4, r4
 800dc94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800dc98:	f84e 4b04 	str.w	r4, [lr], #4
 800dc9c:	1417      	asrs	r7, r2, #16
 800dc9e:	e7e0      	b.n	800dc62 <__mdiff+0xc6>
 800dca0:	3e01      	subs	r6, #1
 800dca2:	e7ea      	b.n	800dc7a <__mdiff+0xde>
 800dca4:	0800eb27 	.word	0x0800eb27
 800dca8:	0800eb38 	.word	0x0800eb38

0800dcac <__d2b>:
 800dcac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dcb0:	4689      	mov	r9, r1
 800dcb2:	2101      	movs	r1, #1
 800dcb4:	ec57 6b10 	vmov	r6, r7, d0
 800dcb8:	4690      	mov	r8, r2
 800dcba:	f7ff fcd5 	bl	800d668 <_Balloc>
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	b930      	cbnz	r0, 800dcd0 <__d2b+0x24>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	4b25      	ldr	r3, [pc, #148]	; (800dd5c <__d2b+0xb0>)
 800dcc6:	4826      	ldr	r0, [pc, #152]	; (800dd60 <__d2b+0xb4>)
 800dcc8:	f240 310a 	movw	r1, #778	; 0x30a
 800dccc:	f000 f914 	bl	800def8 <__assert_func>
 800dcd0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dcd4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dcd8:	bb35      	cbnz	r5, 800dd28 <__d2b+0x7c>
 800dcda:	2e00      	cmp	r6, #0
 800dcdc:	9301      	str	r3, [sp, #4]
 800dcde:	d028      	beq.n	800dd32 <__d2b+0x86>
 800dce0:	4668      	mov	r0, sp
 800dce2:	9600      	str	r6, [sp, #0]
 800dce4:	f7ff fd8c 	bl	800d800 <__lo0bits>
 800dce8:	9900      	ldr	r1, [sp, #0]
 800dcea:	b300      	cbz	r0, 800dd2e <__d2b+0x82>
 800dcec:	9a01      	ldr	r2, [sp, #4]
 800dcee:	f1c0 0320 	rsb	r3, r0, #32
 800dcf2:	fa02 f303 	lsl.w	r3, r2, r3
 800dcf6:	430b      	orrs	r3, r1
 800dcf8:	40c2      	lsrs	r2, r0
 800dcfa:	6163      	str	r3, [r4, #20]
 800dcfc:	9201      	str	r2, [sp, #4]
 800dcfe:	9b01      	ldr	r3, [sp, #4]
 800dd00:	61a3      	str	r3, [r4, #24]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	bf14      	ite	ne
 800dd06:	2202      	movne	r2, #2
 800dd08:	2201      	moveq	r2, #1
 800dd0a:	6122      	str	r2, [r4, #16]
 800dd0c:	b1d5      	cbz	r5, 800dd44 <__d2b+0x98>
 800dd0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dd12:	4405      	add	r5, r0
 800dd14:	f8c9 5000 	str.w	r5, [r9]
 800dd18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dd1c:	f8c8 0000 	str.w	r0, [r8]
 800dd20:	4620      	mov	r0, r4
 800dd22:	b003      	add	sp, #12
 800dd24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dd28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dd2c:	e7d5      	b.n	800dcda <__d2b+0x2e>
 800dd2e:	6161      	str	r1, [r4, #20]
 800dd30:	e7e5      	b.n	800dcfe <__d2b+0x52>
 800dd32:	a801      	add	r0, sp, #4
 800dd34:	f7ff fd64 	bl	800d800 <__lo0bits>
 800dd38:	9b01      	ldr	r3, [sp, #4]
 800dd3a:	6163      	str	r3, [r4, #20]
 800dd3c:	2201      	movs	r2, #1
 800dd3e:	6122      	str	r2, [r4, #16]
 800dd40:	3020      	adds	r0, #32
 800dd42:	e7e3      	b.n	800dd0c <__d2b+0x60>
 800dd44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dd48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dd4c:	f8c9 0000 	str.w	r0, [r9]
 800dd50:	6918      	ldr	r0, [r3, #16]
 800dd52:	f7ff fd35 	bl	800d7c0 <__hi0bits>
 800dd56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dd5a:	e7df      	b.n	800dd1c <__d2b+0x70>
 800dd5c:	0800eb27 	.word	0x0800eb27
 800dd60:	0800eb38 	.word	0x0800eb38

0800dd64 <_calloc_r>:
 800dd64:	b513      	push	{r0, r1, r4, lr}
 800dd66:	434a      	muls	r2, r1
 800dd68:	4611      	mov	r1, r2
 800dd6a:	9201      	str	r2, [sp, #4]
 800dd6c:	f000 f85a 	bl	800de24 <_malloc_r>
 800dd70:	4604      	mov	r4, r0
 800dd72:	b118      	cbz	r0, 800dd7c <_calloc_r+0x18>
 800dd74:	9a01      	ldr	r2, [sp, #4]
 800dd76:	2100      	movs	r1, #0
 800dd78:	f7fe fa02 	bl	800c180 <memset>
 800dd7c:	4620      	mov	r0, r4
 800dd7e:	b002      	add	sp, #8
 800dd80:	bd10      	pop	{r4, pc}
	...

0800dd84 <_free_r>:
 800dd84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd86:	2900      	cmp	r1, #0
 800dd88:	d048      	beq.n	800de1c <_free_r+0x98>
 800dd8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd8e:	9001      	str	r0, [sp, #4]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	f1a1 0404 	sub.w	r4, r1, #4
 800dd96:	bfb8      	it	lt
 800dd98:	18e4      	addlt	r4, r4, r3
 800dd9a:	f000 f8ef 	bl	800df7c <__malloc_lock>
 800dd9e:	4a20      	ldr	r2, [pc, #128]	; (800de20 <_free_r+0x9c>)
 800dda0:	9801      	ldr	r0, [sp, #4]
 800dda2:	6813      	ldr	r3, [r2, #0]
 800dda4:	4615      	mov	r5, r2
 800dda6:	b933      	cbnz	r3, 800ddb6 <_free_r+0x32>
 800dda8:	6063      	str	r3, [r4, #4]
 800ddaa:	6014      	str	r4, [r2, #0]
 800ddac:	b003      	add	sp, #12
 800ddae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ddb2:	f000 b8e9 	b.w	800df88 <__malloc_unlock>
 800ddb6:	42a3      	cmp	r3, r4
 800ddb8:	d90b      	bls.n	800ddd2 <_free_r+0x4e>
 800ddba:	6821      	ldr	r1, [r4, #0]
 800ddbc:	1862      	adds	r2, r4, r1
 800ddbe:	4293      	cmp	r3, r2
 800ddc0:	bf04      	itt	eq
 800ddc2:	681a      	ldreq	r2, [r3, #0]
 800ddc4:	685b      	ldreq	r3, [r3, #4]
 800ddc6:	6063      	str	r3, [r4, #4]
 800ddc8:	bf04      	itt	eq
 800ddca:	1852      	addeq	r2, r2, r1
 800ddcc:	6022      	streq	r2, [r4, #0]
 800ddce:	602c      	str	r4, [r5, #0]
 800ddd0:	e7ec      	b.n	800ddac <_free_r+0x28>
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	b10b      	cbz	r3, 800dddc <_free_r+0x58>
 800ddd8:	42a3      	cmp	r3, r4
 800ddda:	d9fa      	bls.n	800ddd2 <_free_r+0x4e>
 800dddc:	6811      	ldr	r1, [r2, #0]
 800ddde:	1855      	adds	r5, r2, r1
 800dde0:	42a5      	cmp	r5, r4
 800dde2:	d10b      	bne.n	800ddfc <_free_r+0x78>
 800dde4:	6824      	ldr	r4, [r4, #0]
 800dde6:	4421      	add	r1, r4
 800dde8:	1854      	adds	r4, r2, r1
 800ddea:	42a3      	cmp	r3, r4
 800ddec:	6011      	str	r1, [r2, #0]
 800ddee:	d1dd      	bne.n	800ddac <_free_r+0x28>
 800ddf0:	681c      	ldr	r4, [r3, #0]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	6053      	str	r3, [r2, #4]
 800ddf6:	4421      	add	r1, r4
 800ddf8:	6011      	str	r1, [r2, #0]
 800ddfa:	e7d7      	b.n	800ddac <_free_r+0x28>
 800ddfc:	d902      	bls.n	800de04 <_free_r+0x80>
 800ddfe:	230c      	movs	r3, #12
 800de00:	6003      	str	r3, [r0, #0]
 800de02:	e7d3      	b.n	800ddac <_free_r+0x28>
 800de04:	6825      	ldr	r5, [r4, #0]
 800de06:	1961      	adds	r1, r4, r5
 800de08:	428b      	cmp	r3, r1
 800de0a:	bf04      	itt	eq
 800de0c:	6819      	ldreq	r1, [r3, #0]
 800de0e:	685b      	ldreq	r3, [r3, #4]
 800de10:	6063      	str	r3, [r4, #4]
 800de12:	bf04      	itt	eq
 800de14:	1949      	addeq	r1, r1, r5
 800de16:	6021      	streq	r1, [r4, #0]
 800de18:	6054      	str	r4, [r2, #4]
 800de1a:	e7c7      	b.n	800ddac <_free_r+0x28>
 800de1c:	b003      	add	sp, #12
 800de1e:	bd30      	pop	{r4, r5, pc}
 800de20:	2400094c 	.word	0x2400094c

0800de24 <_malloc_r>:
 800de24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de26:	1ccd      	adds	r5, r1, #3
 800de28:	f025 0503 	bic.w	r5, r5, #3
 800de2c:	3508      	adds	r5, #8
 800de2e:	2d0c      	cmp	r5, #12
 800de30:	bf38      	it	cc
 800de32:	250c      	movcc	r5, #12
 800de34:	2d00      	cmp	r5, #0
 800de36:	4606      	mov	r6, r0
 800de38:	db01      	blt.n	800de3e <_malloc_r+0x1a>
 800de3a:	42a9      	cmp	r1, r5
 800de3c:	d903      	bls.n	800de46 <_malloc_r+0x22>
 800de3e:	230c      	movs	r3, #12
 800de40:	6033      	str	r3, [r6, #0]
 800de42:	2000      	movs	r0, #0
 800de44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de46:	f000 f899 	bl	800df7c <__malloc_lock>
 800de4a:	4921      	ldr	r1, [pc, #132]	; (800ded0 <_malloc_r+0xac>)
 800de4c:	680a      	ldr	r2, [r1, #0]
 800de4e:	4614      	mov	r4, r2
 800de50:	b99c      	cbnz	r4, 800de7a <_malloc_r+0x56>
 800de52:	4f20      	ldr	r7, [pc, #128]	; (800ded4 <_malloc_r+0xb0>)
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	b923      	cbnz	r3, 800de62 <_malloc_r+0x3e>
 800de58:	4621      	mov	r1, r4
 800de5a:	4630      	mov	r0, r6
 800de5c:	f000 f83c 	bl	800ded8 <_sbrk_r>
 800de60:	6038      	str	r0, [r7, #0]
 800de62:	4629      	mov	r1, r5
 800de64:	4630      	mov	r0, r6
 800de66:	f000 f837 	bl	800ded8 <_sbrk_r>
 800de6a:	1c43      	adds	r3, r0, #1
 800de6c:	d123      	bne.n	800deb6 <_malloc_r+0x92>
 800de6e:	230c      	movs	r3, #12
 800de70:	6033      	str	r3, [r6, #0]
 800de72:	4630      	mov	r0, r6
 800de74:	f000 f888 	bl	800df88 <__malloc_unlock>
 800de78:	e7e3      	b.n	800de42 <_malloc_r+0x1e>
 800de7a:	6823      	ldr	r3, [r4, #0]
 800de7c:	1b5b      	subs	r3, r3, r5
 800de7e:	d417      	bmi.n	800deb0 <_malloc_r+0x8c>
 800de80:	2b0b      	cmp	r3, #11
 800de82:	d903      	bls.n	800de8c <_malloc_r+0x68>
 800de84:	6023      	str	r3, [r4, #0]
 800de86:	441c      	add	r4, r3
 800de88:	6025      	str	r5, [r4, #0]
 800de8a:	e004      	b.n	800de96 <_malloc_r+0x72>
 800de8c:	6863      	ldr	r3, [r4, #4]
 800de8e:	42a2      	cmp	r2, r4
 800de90:	bf0c      	ite	eq
 800de92:	600b      	streq	r3, [r1, #0]
 800de94:	6053      	strne	r3, [r2, #4]
 800de96:	4630      	mov	r0, r6
 800de98:	f000 f876 	bl	800df88 <__malloc_unlock>
 800de9c:	f104 000b 	add.w	r0, r4, #11
 800dea0:	1d23      	adds	r3, r4, #4
 800dea2:	f020 0007 	bic.w	r0, r0, #7
 800dea6:	1ac2      	subs	r2, r0, r3
 800dea8:	d0cc      	beq.n	800de44 <_malloc_r+0x20>
 800deaa:	1a1b      	subs	r3, r3, r0
 800deac:	50a3      	str	r3, [r4, r2]
 800deae:	e7c9      	b.n	800de44 <_malloc_r+0x20>
 800deb0:	4622      	mov	r2, r4
 800deb2:	6864      	ldr	r4, [r4, #4]
 800deb4:	e7cc      	b.n	800de50 <_malloc_r+0x2c>
 800deb6:	1cc4      	adds	r4, r0, #3
 800deb8:	f024 0403 	bic.w	r4, r4, #3
 800debc:	42a0      	cmp	r0, r4
 800debe:	d0e3      	beq.n	800de88 <_malloc_r+0x64>
 800dec0:	1a21      	subs	r1, r4, r0
 800dec2:	4630      	mov	r0, r6
 800dec4:	f000 f808 	bl	800ded8 <_sbrk_r>
 800dec8:	3001      	adds	r0, #1
 800deca:	d1dd      	bne.n	800de88 <_malloc_r+0x64>
 800decc:	e7cf      	b.n	800de6e <_malloc_r+0x4a>
 800dece:	bf00      	nop
 800ded0:	2400094c 	.word	0x2400094c
 800ded4:	24000950 	.word	0x24000950

0800ded8 <_sbrk_r>:
 800ded8:	b538      	push	{r3, r4, r5, lr}
 800deda:	4d06      	ldr	r5, [pc, #24]	; (800def4 <_sbrk_r+0x1c>)
 800dedc:	2300      	movs	r3, #0
 800dede:	4604      	mov	r4, r0
 800dee0:	4608      	mov	r0, r1
 800dee2:	602b      	str	r3, [r5, #0]
 800dee4:	f7f4 fe66 	bl	8002bb4 <_sbrk>
 800dee8:	1c43      	adds	r3, r0, #1
 800deea:	d102      	bne.n	800def2 <_sbrk_r+0x1a>
 800deec:	682b      	ldr	r3, [r5, #0]
 800deee:	b103      	cbz	r3, 800def2 <_sbrk_r+0x1a>
 800def0:	6023      	str	r3, [r4, #0]
 800def2:	bd38      	pop	{r3, r4, r5, pc}
 800def4:	24000958 	.word	0x24000958

0800def8 <__assert_func>:
 800def8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800defa:	4614      	mov	r4, r2
 800defc:	461a      	mov	r2, r3
 800defe:	4b09      	ldr	r3, [pc, #36]	; (800df24 <__assert_func+0x2c>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4605      	mov	r5, r0
 800df04:	68d8      	ldr	r0, [r3, #12]
 800df06:	b14c      	cbz	r4, 800df1c <__assert_func+0x24>
 800df08:	4b07      	ldr	r3, [pc, #28]	; (800df28 <__assert_func+0x30>)
 800df0a:	9100      	str	r1, [sp, #0]
 800df0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df10:	4906      	ldr	r1, [pc, #24]	; (800df2c <__assert_func+0x34>)
 800df12:	462b      	mov	r3, r5
 800df14:	f000 f80e 	bl	800df34 <fiprintf>
 800df18:	f000 fa64 	bl	800e3e4 <abort>
 800df1c:	4b04      	ldr	r3, [pc, #16]	; (800df30 <__assert_func+0x38>)
 800df1e:	461c      	mov	r4, r3
 800df20:	e7f3      	b.n	800df0a <__assert_func+0x12>
 800df22:	bf00      	nop
 800df24:	24000010 	.word	0x24000010
 800df28:	0800ec94 	.word	0x0800ec94
 800df2c:	0800eca1 	.word	0x0800eca1
 800df30:	0800eccf 	.word	0x0800eccf

0800df34 <fiprintf>:
 800df34:	b40e      	push	{r1, r2, r3}
 800df36:	b503      	push	{r0, r1, lr}
 800df38:	4601      	mov	r1, r0
 800df3a:	ab03      	add	r3, sp, #12
 800df3c:	4805      	ldr	r0, [pc, #20]	; (800df54 <fiprintf+0x20>)
 800df3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800df42:	6800      	ldr	r0, [r0, #0]
 800df44:	9301      	str	r3, [sp, #4]
 800df46:	f000 f84f 	bl	800dfe8 <_vfiprintf_r>
 800df4a:	b002      	add	sp, #8
 800df4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800df50:	b003      	add	sp, #12
 800df52:	4770      	bx	lr
 800df54:	24000010 	.word	0x24000010

0800df58 <__ascii_mbtowc>:
 800df58:	b082      	sub	sp, #8
 800df5a:	b901      	cbnz	r1, 800df5e <__ascii_mbtowc+0x6>
 800df5c:	a901      	add	r1, sp, #4
 800df5e:	b142      	cbz	r2, 800df72 <__ascii_mbtowc+0x1a>
 800df60:	b14b      	cbz	r3, 800df76 <__ascii_mbtowc+0x1e>
 800df62:	7813      	ldrb	r3, [r2, #0]
 800df64:	600b      	str	r3, [r1, #0]
 800df66:	7812      	ldrb	r2, [r2, #0]
 800df68:	1e10      	subs	r0, r2, #0
 800df6a:	bf18      	it	ne
 800df6c:	2001      	movne	r0, #1
 800df6e:	b002      	add	sp, #8
 800df70:	4770      	bx	lr
 800df72:	4610      	mov	r0, r2
 800df74:	e7fb      	b.n	800df6e <__ascii_mbtowc+0x16>
 800df76:	f06f 0001 	mvn.w	r0, #1
 800df7a:	e7f8      	b.n	800df6e <__ascii_mbtowc+0x16>

0800df7c <__malloc_lock>:
 800df7c:	4801      	ldr	r0, [pc, #4]	; (800df84 <__malloc_lock+0x8>)
 800df7e:	f000 bbf1 	b.w	800e764 <__retarget_lock_acquire_recursive>
 800df82:	bf00      	nop
 800df84:	24000960 	.word	0x24000960

0800df88 <__malloc_unlock>:
 800df88:	4801      	ldr	r0, [pc, #4]	; (800df90 <__malloc_unlock+0x8>)
 800df8a:	f000 bbec 	b.w	800e766 <__retarget_lock_release_recursive>
 800df8e:	bf00      	nop
 800df90:	24000960 	.word	0x24000960

0800df94 <__sfputc_r>:
 800df94:	6893      	ldr	r3, [r2, #8]
 800df96:	3b01      	subs	r3, #1
 800df98:	2b00      	cmp	r3, #0
 800df9a:	b410      	push	{r4}
 800df9c:	6093      	str	r3, [r2, #8]
 800df9e:	da08      	bge.n	800dfb2 <__sfputc_r+0x1e>
 800dfa0:	6994      	ldr	r4, [r2, #24]
 800dfa2:	42a3      	cmp	r3, r4
 800dfa4:	db01      	blt.n	800dfaa <__sfputc_r+0x16>
 800dfa6:	290a      	cmp	r1, #10
 800dfa8:	d103      	bne.n	800dfb2 <__sfputc_r+0x1e>
 800dfaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfae:	f000 b94b 	b.w	800e248 <__swbuf_r>
 800dfb2:	6813      	ldr	r3, [r2, #0]
 800dfb4:	1c58      	adds	r0, r3, #1
 800dfb6:	6010      	str	r0, [r2, #0]
 800dfb8:	7019      	strb	r1, [r3, #0]
 800dfba:	4608      	mov	r0, r1
 800dfbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfc0:	4770      	bx	lr

0800dfc2 <__sfputs_r>:
 800dfc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfc4:	4606      	mov	r6, r0
 800dfc6:	460f      	mov	r7, r1
 800dfc8:	4614      	mov	r4, r2
 800dfca:	18d5      	adds	r5, r2, r3
 800dfcc:	42ac      	cmp	r4, r5
 800dfce:	d101      	bne.n	800dfd4 <__sfputs_r+0x12>
 800dfd0:	2000      	movs	r0, #0
 800dfd2:	e007      	b.n	800dfe4 <__sfputs_r+0x22>
 800dfd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfd8:	463a      	mov	r2, r7
 800dfda:	4630      	mov	r0, r6
 800dfdc:	f7ff ffda 	bl	800df94 <__sfputc_r>
 800dfe0:	1c43      	adds	r3, r0, #1
 800dfe2:	d1f3      	bne.n	800dfcc <__sfputs_r+0xa>
 800dfe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dfe8 <_vfiprintf_r>:
 800dfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfec:	460d      	mov	r5, r1
 800dfee:	b09d      	sub	sp, #116	; 0x74
 800dff0:	4614      	mov	r4, r2
 800dff2:	4698      	mov	r8, r3
 800dff4:	4606      	mov	r6, r0
 800dff6:	b118      	cbz	r0, 800e000 <_vfiprintf_r+0x18>
 800dff8:	6983      	ldr	r3, [r0, #24]
 800dffa:	b90b      	cbnz	r3, 800e000 <_vfiprintf_r+0x18>
 800dffc:	f000 fb14 	bl	800e628 <__sinit>
 800e000:	4b89      	ldr	r3, [pc, #548]	; (800e228 <_vfiprintf_r+0x240>)
 800e002:	429d      	cmp	r5, r3
 800e004:	d11b      	bne.n	800e03e <_vfiprintf_r+0x56>
 800e006:	6875      	ldr	r5, [r6, #4]
 800e008:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e00a:	07d9      	lsls	r1, r3, #31
 800e00c:	d405      	bmi.n	800e01a <_vfiprintf_r+0x32>
 800e00e:	89ab      	ldrh	r3, [r5, #12]
 800e010:	059a      	lsls	r2, r3, #22
 800e012:	d402      	bmi.n	800e01a <_vfiprintf_r+0x32>
 800e014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e016:	f000 fba5 	bl	800e764 <__retarget_lock_acquire_recursive>
 800e01a:	89ab      	ldrh	r3, [r5, #12]
 800e01c:	071b      	lsls	r3, r3, #28
 800e01e:	d501      	bpl.n	800e024 <_vfiprintf_r+0x3c>
 800e020:	692b      	ldr	r3, [r5, #16]
 800e022:	b9eb      	cbnz	r3, 800e060 <_vfiprintf_r+0x78>
 800e024:	4629      	mov	r1, r5
 800e026:	4630      	mov	r0, r6
 800e028:	f000 f96e 	bl	800e308 <__swsetup_r>
 800e02c:	b1c0      	cbz	r0, 800e060 <_vfiprintf_r+0x78>
 800e02e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e030:	07dc      	lsls	r4, r3, #31
 800e032:	d50e      	bpl.n	800e052 <_vfiprintf_r+0x6a>
 800e034:	f04f 30ff 	mov.w	r0, #4294967295
 800e038:	b01d      	add	sp, #116	; 0x74
 800e03a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e03e:	4b7b      	ldr	r3, [pc, #492]	; (800e22c <_vfiprintf_r+0x244>)
 800e040:	429d      	cmp	r5, r3
 800e042:	d101      	bne.n	800e048 <_vfiprintf_r+0x60>
 800e044:	68b5      	ldr	r5, [r6, #8]
 800e046:	e7df      	b.n	800e008 <_vfiprintf_r+0x20>
 800e048:	4b79      	ldr	r3, [pc, #484]	; (800e230 <_vfiprintf_r+0x248>)
 800e04a:	429d      	cmp	r5, r3
 800e04c:	bf08      	it	eq
 800e04e:	68f5      	ldreq	r5, [r6, #12]
 800e050:	e7da      	b.n	800e008 <_vfiprintf_r+0x20>
 800e052:	89ab      	ldrh	r3, [r5, #12]
 800e054:	0598      	lsls	r0, r3, #22
 800e056:	d4ed      	bmi.n	800e034 <_vfiprintf_r+0x4c>
 800e058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e05a:	f000 fb84 	bl	800e766 <__retarget_lock_release_recursive>
 800e05e:	e7e9      	b.n	800e034 <_vfiprintf_r+0x4c>
 800e060:	2300      	movs	r3, #0
 800e062:	9309      	str	r3, [sp, #36]	; 0x24
 800e064:	2320      	movs	r3, #32
 800e066:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e06a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e06e:	2330      	movs	r3, #48	; 0x30
 800e070:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e234 <_vfiprintf_r+0x24c>
 800e074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e078:	f04f 0901 	mov.w	r9, #1
 800e07c:	4623      	mov	r3, r4
 800e07e:	469a      	mov	sl, r3
 800e080:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e084:	b10a      	cbz	r2, 800e08a <_vfiprintf_r+0xa2>
 800e086:	2a25      	cmp	r2, #37	; 0x25
 800e088:	d1f9      	bne.n	800e07e <_vfiprintf_r+0x96>
 800e08a:	ebba 0b04 	subs.w	fp, sl, r4
 800e08e:	d00b      	beq.n	800e0a8 <_vfiprintf_r+0xc0>
 800e090:	465b      	mov	r3, fp
 800e092:	4622      	mov	r2, r4
 800e094:	4629      	mov	r1, r5
 800e096:	4630      	mov	r0, r6
 800e098:	f7ff ff93 	bl	800dfc2 <__sfputs_r>
 800e09c:	3001      	adds	r0, #1
 800e09e:	f000 80aa 	beq.w	800e1f6 <_vfiprintf_r+0x20e>
 800e0a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0a4:	445a      	add	r2, fp
 800e0a6:	9209      	str	r2, [sp, #36]	; 0x24
 800e0a8:	f89a 3000 	ldrb.w	r3, [sl]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	f000 80a2 	beq.w	800e1f6 <_vfiprintf_r+0x20e>
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e0b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0bc:	f10a 0a01 	add.w	sl, sl, #1
 800e0c0:	9304      	str	r3, [sp, #16]
 800e0c2:	9307      	str	r3, [sp, #28]
 800e0c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0c8:	931a      	str	r3, [sp, #104]	; 0x68
 800e0ca:	4654      	mov	r4, sl
 800e0cc:	2205      	movs	r2, #5
 800e0ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0d2:	4858      	ldr	r0, [pc, #352]	; (800e234 <_vfiprintf_r+0x24c>)
 800e0d4:	f7f2 f90c 	bl	80002f0 <memchr>
 800e0d8:	9a04      	ldr	r2, [sp, #16]
 800e0da:	b9d8      	cbnz	r0, 800e114 <_vfiprintf_r+0x12c>
 800e0dc:	06d1      	lsls	r1, r2, #27
 800e0de:	bf44      	itt	mi
 800e0e0:	2320      	movmi	r3, #32
 800e0e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0e6:	0713      	lsls	r3, r2, #28
 800e0e8:	bf44      	itt	mi
 800e0ea:	232b      	movmi	r3, #43	; 0x2b
 800e0ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0f0:	f89a 3000 	ldrb.w	r3, [sl]
 800e0f4:	2b2a      	cmp	r3, #42	; 0x2a
 800e0f6:	d015      	beq.n	800e124 <_vfiprintf_r+0x13c>
 800e0f8:	9a07      	ldr	r2, [sp, #28]
 800e0fa:	4654      	mov	r4, sl
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	f04f 0c0a 	mov.w	ip, #10
 800e102:	4621      	mov	r1, r4
 800e104:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e108:	3b30      	subs	r3, #48	; 0x30
 800e10a:	2b09      	cmp	r3, #9
 800e10c:	d94e      	bls.n	800e1ac <_vfiprintf_r+0x1c4>
 800e10e:	b1b0      	cbz	r0, 800e13e <_vfiprintf_r+0x156>
 800e110:	9207      	str	r2, [sp, #28]
 800e112:	e014      	b.n	800e13e <_vfiprintf_r+0x156>
 800e114:	eba0 0308 	sub.w	r3, r0, r8
 800e118:	fa09 f303 	lsl.w	r3, r9, r3
 800e11c:	4313      	orrs	r3, r2
 800e11e:	9304      	str	r3, [sp, #16]
 800e120:	46a2      	mov	sl, r4
 800e122:	e7d2      	b.n	800e0ca <_vfiprintf_r+0xe2>
 800e124:	9b03      	ldr	r3, [sp, #12]
 800e126:	1d19      	adds	r1, r3, #4
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	9103      	str	r1, [sp, #12]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	bfbb      	ittet	lt
 800e130:	425b      	neglt	r3, r3
 800e132:	f042 0202 	orrlt.w	r2, r2, #2
 800e136:	9307      	strge	r3, [sp, #28]
 800e138:	9307      	strlt	r3, [sp, #28]
 800e13a:	bfb8      	it	lt
 800e13c:	9204      	strlt	r2, [sp, #16]
 800e13e:	7823      	ldrb	r3, [r4, #0]
 800e140:	2b2e      	cmp	r3, #46	; 0x2e
 800e142:	d10c      	bne.n	800e15e <_vfiprintf_r+0x176>
 800e144:	7863      	ldrb	r3, [r4, #1]
 800e146:	2b2a      	cmp	r3, #42	; 0x2a
 800e148:	d135      	bne.n	800e1b6 <_vfiprintf_r+0x1ce>
 800e14a:	9b03      	ldr	r3, [sp, #12]
 800e14c:	1d1a      	adds	r2, r3, #4
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	9203      	str	r2, [sp, #12]
 800e152:	2b00      	cmp	r3, #0
 800e154:	bfb8      	it	lt
 800e156:	f04f 33ff 	movlt.w	r3, #4294967295
 800e15a:	3402      	adds	r4, #2
 800e15c:	9305      	str	r3, [sp, #20]
 800e15e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e244 <_vfiprintf_r+0x25c>
 800e162:	7821      	ldrb	r1, [r4, #0]
 800e164:	2203      	movs	r2, #3
 800e166:	4650      	mov	r0, sl
 800e168:	f7f2 f8c2 	bl	80002f0 <memchr>
 800e16c:	b140      	cbz	r0, 800e180 <_vfiprintf_r+0x198>
 800e16e:	2340      	movs	r3, #64	; 0x40
 800e170:	eba0 000a 	sub.w	r0, r0, sl
 800e174:	fa03 f000 	lsl.w	r0, r3, r0
 800e178:	9b04      	ldr	r3, [sp, #16]
 800e17a:	4303      	orrs	r3, r0
 800e17c:	3401      	adds	r4, #1
 800e17e:	9304      	str	r3, [sp, #16]
 800e180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e184:	482c      	ldr	r0, [pc, #176]	; (800e238 <_vfiprintf_r+0x250>)
 800e186:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e18a:	2206      	movs	r2, #6
 800e18c:	f7f2 f8b0 	bl	80002f0 <memchr>
 800e190:	2800      	cmp	r0, #0
 800e192:	d03f      	beq.n	800e214 <_vfiprintf_r+0x22c>
 800e194:	4b29      	ldr	r3, [pc, #164]	; (800e23c <_vfiprintf_r+0x254>)
 800e196:	bb1b      	cbnz	r3, 800e1e0 <_vfiprintf_r+0x1f8>
 800e198:	9b03      	ldr	r3, [sp, #12]
 800e19a:	3307      	adds	r3, #7
 800e19c:	f023 0307 	bic.w	r3, r3, #7
 800e1a0:	3308      	adds	r3, #8
 800e1a2:	9303      	str	r3, [sp, #12]
 800e1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1a6:	443b      	add	r3, r7
 800e1a8:	9309      	str	r3, [sp, #36]	; 0x24
 800e1aa:	e767      	b.n	800e07c <_vfiprintf_r+0x94>
 800e1ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1b0:	460c      	mov	r4, r1
 800e1b2:	2001      	movs	r0, #1
 800e1b4:	e7a5      	b.n	800e102 <_vfiprintf_r+0x11a>
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	3401      	adds	r4, #1
 800e1ba:	9305      	str	r3, [sp, #20]
 800e1bc:	4619      	mov	r1, r3
 800e1be:	f04f 0c0a 	mov.w	ip, #10
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1c8:	3a30      	subs	r2, #48	; 0x30
 800e1ca:	2a09      	cmp	r2, #9
 800e1cc:	d903      	bls.n	800e1d6 <_vfiprintf_r+0x1ee>
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d0c5      	beq.n	800e15e <_vfiprintf_r+0x176>
 800e1d2:	9105      	str	r1, [sp, #20]
 800e1d4:	e7c3      	b.n	800e15e <_vfiprintf_r+0x176>
 800e1d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1da:	4604      	mov	r4, r0
 800e1dc:	2301      	movs	r3, #1
 800e1de:	e7f0      	b.n	800e1c2 <_vfiprintf_r+0x1da>
 800e1e0:	ab03      	add	r3, sp, #12
 800e1e2:	9300      	str	r3, [sp, #0]
 800e1e4:	462a      	mov	r2, r5
 800e1e6:	4b16      	ldr	r3, [pc, #88]	; (800e240 <_vfiprintf_r+0x258>)
 800e1e8:	a904      	add	r1, sp, #16
 800e1ea:	4630      	mov	r0, r6
 800e1ec:	f7fe f860 	bl	800c2b0 <_printf_float>
 800e1f0:	4607      	mov	r7, r0
 800e1f2:	1c78      	adds	r0, r7, #1
 800e1f4:	d1d6      	bne.n	800e1a4 <_vfiprintf_r+0x1bc>
 800e1f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e1f8:	07d9      	lsls	r1, r3, #31
 800e1fa:	d405      	bmi.n	800e208 <_vfiprintf_r+0x220>
 800e1fc:	89ab      	ldrh	r3, [r5, #12]
 800e1fe:	059a      	lsls	r2, r3, #22
 800e200:	d402      	bmi.n	800e208 <_vfiprintf_r+0x220>
 800e202:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e204:	f000 faaf 	bl	800e766 <__retarget_lock_release_recursive>
 800e208:	89ab      	ldrh	r3, [r5, #12]
 800e20a:	065b      	lsls	r3, r3, #25
 800e20c:	f53f af12 	bmi.w	800e034 <_vfiprintf_r+0x4c>
 800e210:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e212:	e711      	b.n	800e038 <_vfiprintf_r+0x50>
 800e214:	ab03      	add	r3, sp, #12
 800e216:	9300      	str	r3, [sp, #0]
 800e218:	462a      	mov	r2, r5
 800e21a:	4b09      	ldr	r3, [pc, #36]	; (800e240 <_vfiprintf_r+0x258>)
 800e21c:	a904      	add	r1, sp, #16
 800e21e:	4630      	mov	r0, r6
 800e220:	f7fe fad2 	bl	800c7c8 <_printf_i>
 800e224:	e7e4      	b.n	800e1f0 <_vfiprintf_r+0x208>
 800e226:	bf00      	nop
 800e228:	0800ee0c 	.word	0x0800ee0c
 800e22c:	0800ee2c 	.word	0x0800ee2c
 800e230:	0800edec 	.word	0x0800edec
 800e234:	0800ecda 	.word	0x0800ecda
 800e238:	0800ece4 	.word	0x0800ece4
 800e23c:	0800c2b1 	.word	0x0800c2b1
 800e240:	0800dfc3 	.word	0x0800dfc3
 800e244:	0800ece0 	.word	0x0800ece0

0800e248 <__swbuf_r>:
 800e248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e24a:	460e      	mov	r6, r1
 800e24c:	4614      	mov	r4, r2
 800e24e:	4605      	mov	r5, r0
 800e250:	b118      	cbz	r0, 800e25a <__swbuf_r+0x12>
 800e252:	6983      	ldr	r3, [r0, #24]
 800e254:	b90b      	cbnz	r3, 800e25a <__swbuf_r+0x12>
 800e256:	f000 f9e7 	bl	800e628 <__sinit>
 800e25a:	4b21      	ldr	r3, [pc, #132]	; (800e2e0 <__swbuf_r+0x98>)
 800e25c:	429c      	cmp	r4, r3
 800e25e:	d12b      	bne.n	800e2b8 <__swbuf_r+0x70>
 800e260:	686c      	ldr	r4, [r5, #4]
 800e262:	69a3      	ldr	r3, [r4, #24]
 800e264:	60a3      	str	r3, [r4, #8]
 800e266:	89a3      	ldrh	r3, [r4, #12]
 800e268:	071a      	lsls	r2, r3, #28
 800e26a:	d52f      	bpl.n	800e2cc <__swbuf_r+0x84>
 800e26c:	6923      	ldr	r3, [r4, #16]
 800e26e:	b36b      	cbz	r3, 800e2cc <__swbuf_r+0x84>
 800e270:	6923      	ldr	r3, [r4, #16]
 800e272:	6820      	ldr	r0, [r4, #0]
 800e274:	1ac0      	subs	r0, r0, r3
 800e276:	6963      	ldr	r3, [r4, #20]
 800e278:	b2f6      	uxtb	r6, r6
 800e27a:	4283      	cmp	r3, r0
 800e27c:	4637      	mov	r7, r6
 800e27e:	dc04      	bgt.n	800e28a <__swbuf_r+0x42>
 800e280:	4621      	mov	r1, r4
 800e282:	4628      	mov	r0, r5
 800e284:	f000 f93c 	bl	800e500 <_fflush_r>
 800e288:	bb30      	cbnz	r0, 800e2d8 <__swbuf_r+0x90>
 800e28a:	68a3      	ldr	r3, [r4, #8]
 800e28c:	3b01      	subs	r3, #1
 800e28e:	60a3      	str	r3, [r4, #8]
 800e290:	6823      	ldr	r3, [r4, #0]
 800e292:	1c5a      	adds	r2, r3, #1
 800e294:	6022      	str	r2, [r4, #0]
 800e296:	701e      	strb	r6, [r3, #0]
 800e298:	6963      	ldr	r3, [r4, #20]
 800e29a:	3001      	adds	r0, #1
 800e29c:	4283      	cmp	r3, r0
 800e29e:	d004      	beq.n	800e2aa <__swbuf_r+0x62>
 800e2a0:	89a3      	ldrh	r3, [r4, #12]
 800e2a2:	07db      	lsls	r3, r3, #31
 800e2a4:	d506      	bpl.n	800e2b4 <__swbuf_r+0x6c>
 800e2a6:	2e0a      	cmp	r6, #10
 800e2a8:	d104      	bne.n	800e2b4 <__swbuf_r+0x6c>
 800e2aa:	4621      	mov	r1, r4
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	f000 f927 	bl	800e500 <_fflush_r>
 800e2b2:	b988      	cbnz	r0, 800e2d8 <__swbuf_r+0x90>
 800e2b4:	4638      	mov	r0, r7
 800e2b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e2b8:	4b0a      	ldr	r3, [pc, #40]	; (800e2e4 <__swbuf_r+0x9c>)
 800e2ba:	429c      	cmp	r4, r3
 800e2bc:	d101      	bne.n	800e2c2 <__swbuf_r+0x7a>
 800e2be:	68ac      	ldr	r4, [r5, #8]
 800e2c0:	e7cf      	b.n	800e262 <__swbuf_r+0x1a>
 800e2c2:	4b09      	ldr	r3, [pc, #36]	; (800e2e8 <__swbuf_r+0xa0>)
 800e2c4:	429c      	cmp	r4, r3
 800e2c6:	bf08      	it	eq
 800e2c8:	68ec      	ldreq	r4, [r5, #12]
 800e2ca:	e7ca      	b.n	800e262 <__swbuf_r+0x1a>
 800e2cc:	4621      	mov	r1, r4
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	f000 f81a 	bl	800e308 <__swsetup_r>
 800e2d4:	2800      	cmp	r0, #0
 800e2d6:	d0cb      	beq.n	800e270 <__swbuf_r+0x28>
 800e2d8:	f04f 37ff 	mov.w	r7, #4294967295
 800e2dc:	e7ea      	b.n	800e2b4 <__swbuf_r+0x6c>
 800e2de:	bf00      	nop
 800e2e0:	0800ee0c 	.word	0x0800ee0c
 800e2e4:	0800ee2c 	.word	0x0800ee2c
 800e2e8:	0800edec 	.word	0x0800edec

0800e2ec <__ascii_wctomb>:
 800e2ec:	b149      	cbz	r1, 800e302 <__ascii_wctomb+0x16>
 800e2ee:	2aff      	cmp	r2, #255	; 0xff
 800e2f0:	bf85      	ittet	hi
 800e2f2:	238a      	movhi	r3, #138	; 0x8a
 800e2f4:	6003      	strhi	r3, [r0, #0]
 800e2f6:	700a      	strbls	r2, [r1, #0]
 800e2f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800e2fc:	bf98      	it	ls
 800e2fe:	2001      	movls	r0, #1
 800e300:	4770      	bx	lr
 800e302:	4608      	mov	r0, r1
 800e304:	4770      	bx	lr
	...

0800e308 <__swsetup_r>:
 800e308:	4b32      	ldr	r3, [pc, #200]	; (800e3d4 <__swsetup_r+0xcc>)
 800e30a:	b570      	push	{r4, r5, r6, lr}
 800e30c:	681d      	ldr	r5, [r3, #0]
 800e30e:	4606      	mov	r6, r0
 800e310:	460c      	mov	r4, r1
 800e312:	b125      	cbz	r5, 800e31e <__swsetup_r+0x16>
 800e314:	69ab      	ldr	r3, [r5, #24]
 800e316:	b913      	cbnz	r3, 800e31e <__swsetup_r+0x16>
 800e318:	4628      	mov	r0, r5
 800e31a:	f000 f985 	bl	800e628 <__sinit>
 800e31e:	4b2e      	ldr	r3, [pc, #184]	; (800e3d8 <__swsetup_r+0xd0>)
 800e320:	429c      	cmp	r4, r3
 800e322:	d10f      	bne.n	800e344 <__swsetup_r+0x3c>
 800e324:	686c      	ldr	r4, [r5, #4]
 800e326:	89a3      	ldrh	r3, [r4, #12]
 800e328:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e32c:	0719      	lsls	r1, r3, #28
 800e32e:	d42c      	bmi.n	800e38a <__swsetup_r+0x82>
 800e330:	06dd      	lsls	r5, r3, #27
 800e332:	d411      	bmi.n	800e358 <__swsetup_r+0x50>
 800e334:	2309      	movs	r3, #9
 800e336:	6033      	str	r3, [r6, #0]
 800e338:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e33c:	81a3      	strh	r3, [r4, #12]
 800e33e:	f04f 30ff 	mov.w	r0, #4294967295
 800e342:	e03e      	b.n	800e3c2 <__swsetup_r+0xba>
 800e344:	4b25      	ldr	r3, [pc, #148]	; (800e3dc <__swsetup_r+0xd4>)
 800e346:	429c      	cmp	r4, r3
 800e348:	d101      	bne.n	800e34e <__swsetup_r+0x46>
 800e34a:	68ac      	ldr	r4, [r5, #8]
 800e34c:	e7eb      	b.n	800e326 <__swsetup_r+0x1e>
 800e34e:	4b24      	ldr	r3, [pc, #144]	; (800e3e0 <__swsetup_r+0xd8>)
 800e350:	429c      	cmp	r4, r3
 800e352:	bf08      	it	eq
 800e354:	68ec      	ldreq	r4, [r5, #12]
 800e356:	e7e6      	b.n	800e326 <__swsetup_r+0x1e>
 800e358:	0758      	lsls	r0, r3, #29
 800e35a:	d512      	bpl.n	800e382 <__swsetup_r+0x7a>
 800e35c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e35e:	b141      	cbz	r1, 800e372 <__swsetup_r+0x6a>
 800e360:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e364:	4299      	cmp	r1, r3
 800e366:	d002      	beq.n	800e36e <__swsetup_r+0x66>
 800e368:	4630      	mov	r0, r6
 800e36a:	f7ff fd0b 	bl	800dd84 <_free_r>
 800e36e:	2300      	movs	r3, #0
 800e370:	6363      	str	r3, [r4, #52]	; 0x34
 800e372:	89a3      	ldrh	r3, [r4, #12]
 800e374:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e378:	81a3      	strh	r3, [r4, #12]
 800e37a:	2300      	movs	r3, #0
 800e37c:	6063      	str	r3, [r4, #4]
 800e37e:	6923      	ldr	r3, [r4, #16]
 800e380:	6023      	str	r3, [r4, #0]
 800e382:	89a3      	ldrh	r3, [r4, #12]
 800e384:	f043 0308 	orr.w	r3, r3, #8
 800e388:	81a3      	strh	r3, [r4, #12]
 800e38a:	6923      	ldr	r3, [r4, #16]
 800e38c:	b94b      	cbnz	r3, 800e3a2 <__swsetup_r+0x9a>
 800e38e:	89a3      	ldrh	r3, [r4, #12]
 800e390:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e394:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e398:	d003      	beq.n	800e3a2 <__swsetup_r+0x9a>
 800e39a:	4621      	mov	r1, r4
 800e39c:	4630      	mov	r0, r6
 800e39e:	f000 fa07 	bl	800e7b0 <__smakebuf_r>
 800e3a2:	89a0      	ldrh	r0, [r4, #12]
 800e3a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3a8:	f010 0301 	ands.w	r3, r0, #1
 800e3ac:	d00a      	beq.n	800e3c4 <__swsetup_r+0xbc>
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	60a3      	str	r3, [r4, #8]
 800e3b2:	6963      	ldr	r3, [r4, #20]
 800e3b4:	425b      	negs	r3, r3
 800e3b6:	61a3      	str	r3, [r4, #24]
 800e3b8:	6923      	ldr	r3, [r4, #16]
 800e3ba:	b943      	cbnz	r3, 800e3ce <__swsetup_r+0xc6>
 800e3bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e3c0:	d1ba      	bne.n	800e338 <__swsetup_r+0x30>
 800e3c2:	bd70      	pop	{r4, r5, r6, pc}
 800e3c4:	0781      	lsls	r1, r0, #30
 800e3c6:	bf58      	it	pl
 800e3c8:	6963      	ldrpl	r3, [r4, #20]
 800e3ca:	60a3      	str	r3, [r4, #8]
 800e3cc:	e7f4      	b.n	800e3b8 <__swsetup_r+0xb0>
 800e3ce:	2000      	movs	r0, #0
 800e3d0:	e7f7      	b.n	800e3c2 <__swsetup_r+0xba>
 800e3d2:	bf00      	nop
 800e3d4:	24000010 	.word	0x24000010
 800e3d8:	0800ee0c 	.word	0x0800ee0c
 800e3dc:	0800ee2c 	.word	0x0800ee2c
 800e3e0:	0800edec 	.word	0x0800edec

0800e3e4 <abort>:
 800e3e4:	b508      	push	{r3, lr}
 800e3e6:	2006      	movs	r0, #6
 800e3e8:	f000 fa4a 	bl	800e880 <raise>
 800e3ec:	2001      	movs	r0, #1
 800e3ee:	f7f4 fb69 	bl	8002ac4 <_exit>
	...

0800e3f4 <__sflush_r>:
 800e3f4:	898a      	ldrh	r2, [r1, #12]
 800e3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3fa:	4605      	mov	r5, r0
 800e3fc:	0710      	lsls	r0, r2, #28
 800e3fe:	460c      	mov	r4, r1
 800e400:	d458      	bmi.n	800e4b4 <__sflush_r+0xc0>
 800e402:	684b      	ldr	r3, [r1, #4]
 800e404:	2b00      	cmp	r3, #0
 800e406:	dc05      	bgt.n	800e414 <__sflush_r+0x20>
 800e408:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	dc02      	bgt.n	800e414 <__sflush_r+0x20>
 800e40e:	2000      	movs	r0, #0
 800e410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e414:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e416:	2e00      	cmp	r6, #0
 800e418:	d0f9      	beq.n	800e40e <__sflush_r+0x1a>
 800e41a:	2300      	movs	r3, #0
 800e41c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e420:	682f      	ldr	r7, [r5, #0]
 800e422:	602b      	str	r3, [r5, #0]
 800e424:	d032      	beq.n	800e48c <__sflush_r+0x98>
 800e426:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e428:	89a3      	ldrh	r3, [r4, #12]
 800e42a:	075a      	lsls	r2, r3, #29
 800e42c:	d505      	bpl.n	800e43a <__sflush_r+0x46>
 800e42e:	6863      	ldr	r3, [r4, #4]
 800e430:	1ac0      	subs	r0, r0, r3
 800e432:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e434:	b10b      	cbz	r3, 800e43a <__sflush_r+0x46>
 800e436:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e438:	1ac0      	subs	r0, r0, r3
 800e43a:	2300      	movs	r3, #0
 800e43c:	4602      	mov	r2, r0
 800e43e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e440:	6a21      	ldr	r1, [r4, #32]
 800e442:	4628      	mov	r0, r5
 800e444:	47b0      	blx	r6
 800e446:	1c43      	adds	r3, r0, #1
 800e448:	89a3      	ldrh	r3, [r4, #12]
 800e44a:	d106      	bne.n	800e45a <__sflush_r+0x66>
 800e44c:	6829      	ldr	r1, [r5, #0]
 800e44e:	291d      	cmp	r1, #29
 800e450:	d82c      	bhi.n	800e4ac <__sflush_r+0xb8>
 800e452:	4a2a      	ldr	r2, [pc, #168]	; (800e4fc <__sflush_r+0x108>)
 800e454:	40ca      	lsrs	r2, r1
 800e456:	07d6      	lsls	r6, r2, #31
 800e458:	d528      	bpl.n	800e4ac <__sflush_r+0xb8>
 800e45a:	2200      	movs	r2, #0
 800e45c:	6062      	str	r2, [r4, #4]
 800e45e:	04d9      	lsls	r1, r3, #19
 800e460:	6922      	ldr	r2, [r4, #16]
 800e462:	6022      	str	r2, [r4, #0]
 800e464:	d504      	bpl.n	800e470 <__sflush_r+0x7c>
 800e466:	1c42      	adds	r2, r0, #1
 800e468:	d101      	bne.n	800e46e <__sflush_r+0x7a>
 800e46a:	682b      	ldr	r3, [r5, #0]
 800e46c:	b903      	cbnz	r3, 800e470 <__sflush_r+0x7c>
 800e46e:	6560      	str	r0, [r4, #84]	; 0x54
 800e470:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e472:	602f      	str	r7, [r5, #0]
 800e474:	2900      	cmp	r1, #0
 800e476:	d0ca      	beq.n	800e40e <__sflush_r+0x1a>
 800e478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e47c:	4299      	cmp	r1, r3
 800e47e:	d002      	beq.n	800e486 <__sflush_r+0x92>
 800e480:	4628      	mov	r0, r5
 800e482:	f7ff fc7f 	bl	800dd84 <_free_r>
 800e486:	2000      	movs	r0, #0
 800e488:	6360      	str	r0, [r4, #52]	; 0x34
 800e48a:	e7c1      	b.n	800e410 <__sflush_r+0x1c>
 800e48c:	6a21      	ldr	r1, [r4, #32]
 800e48e:	2301      	movs	r3, #1
 800e490:	4628      	mov	r0, r5
 800e492:	47b0      	blx	r6
 800e494:	1c41      	adds	r1, r0, #1
 800e496:	d1c7      	bne.n	800e428 <__sflush_r+0x34>
 800e498:	682b      	ldr	r3, [r5, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d0c4      	beq.n	800e428 <__sflush_r+0x34>
 800e49e:	2b1d      	cmp	r3, #29
 800e4a0:	d001      	beq.n	800e4a6 <__sflush_r+0xb2>
 800e4a2:	2b16      	cmp	r3, #22
 800e4a4:	d101      	bne.n	800e4aa <__sflush_r+0xb6>
 800e4a6:	602f      	str	r7, [r5, #0]
 800e4a8:	e7b1      	b.n	800e40e <__sflush_r+0x1a>
 800e4aa:	89a3      	ldrh	r3, [r4, #12]
 800e4ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4b0:	81a3      	strh	r3, [r4, #12]
 800e4b2:	e7ad      	b.n	800e410 <__sflush_r+0x1c>
 800e4b4:	690f      	ldr	r7, [r1, #16]
 800e4b6:	2f00      	cmp	r7, #0
 800e4b8:	d0a9      	beq.n	800e40e <__sflush_r+0x1a>
 800e4ba:	0793      	lsls	r3, r2, #30
 800e4bc:	680e      	ldr	r6, [r1, #0]
 800e4be:	bf08      	it	eq
 800e4c0:	694b      	ldreq	r3, [r1, #20]
 800e4c2:	600f      	str	r7, [r1, #0]
 800e4c4:	bf18      	it	ne
 800e4c6:	2300      	movne	r3, #0
 800e4c8:	eba6 0807 	sub.w	r8, r6, r7
 800e4cc:	608b      	str	r3, [r1, #8]
 800e4ce:	f1b8 0f00 	cmp.w	r8, #0
 800e4d2:	dd9c      	ble.n	800e40e <__sflush_r+0x1a>
 800e4d4:	6a21      	ldr	r1, [r4, #32]
 800e4d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e4d8:	4643      	mov	r3, r8
 800e4da:	463a      	mov	r2, r7
 800e4dc:	4628      	mov	r0, r5
 800e4de:	47b0      	blx	r6
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	dc06      	bgt.n	800e4f2 <__sflush_r+0xfe>
 800e4e4:	89a3      	ldrh	r3, [r4, #12]
 800e4e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e4ea:	81a3      	strh	r3, [r4, #12]
 800e4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e4f0:	e78e      	b.n	800e410 <__sflush_r+0x1c>
 800e4f2:	4407      	add	r7, r0
 800e4f4:	eba8 0800 	sub.w	r8, r8, r0
 800e4f8:	e7e9      	b.n	800e4ce <__sflush_r+0xda>
 800e4fa:	bf00      	nop
 800e4fc:	20400001 	.word	0x20400001

0800e500 <_fflush_r>:
 800e500:	b538      	push	{r3, r4, r5, lr}
 800e502:	690b      	ldr	r3, [r1, #16]
 800e504:	4605      	mov	r5, r0
 800e506:	460c      	mov	r4, r1
 800e508:	b913      	cbnz	r3, 800e510 <_fflush_r+0x10>
 800e50a:	2500      	movs	r5, #0
 800e50c:	4628      	mov	r0, r5
 800e50e:	bd38      	pop	{r3, r4, r5, pc}
 800e510:	b118      	cbz	r0, 800e51a <_fflush_r+0x1a>
 800e512:	6983      	ldr	r3, [r0, #24]
 800e514:	b90b      	cbnz	r3, 800e51a <_fflush_r+0x1a>
 800e516:	f000 f887 	bl	800e628 <__sinit>
 800e51a:	4b14      	ldr	r3, [pc, #80]	; (800e56c <_fflush_r+0x6c>)
 800e51c:	429c      	cmp	r4, r3
 800e51e:	d11b      	bne.n	800e558 <_fflush_r+0x58>
 800e520:	686c      	ldr	r4, [r5, #4]
 800e522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d0ef      	beq.n	800e50a <_fflush_r+0xa>
 800e52a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e52c:	07d0      	lsls	r0, r2, #31
 800e52e:	d404      	bmi.n	800e53a <_fflush_r+0x3a>
 800e530:	0599      	lsls	r1, r3, #22
 800e532:	d402      	bmi.n	800e53a <_fflush_r+0x3a>
 800e534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e536:	f000 f915 	bl	800e764 <__retarget_lock_acquire_recursive>
 800e53a:	4628      	mov	r0, r5
 800e53c:	4621      	mov	r1, r4
 800e53e:	f7ff ff59 	bl	800e3f4 <__sflush_r>
 800e542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e544:	07da      	lsls	r2, r3, #31
 800e546:	4605      	mov	r5, r0
 800e548:	d4e0      	bmi.n	800e50c <_fflush_r+0xc>
 800e54a:	89a3      	ldrh	r3, [r4, #12]
 800e54c:	059b      	lsls	r3, r3, #22
 800e54e:	d4dd      	bmi.n	800e50c <_fflush_r+0xc>
 800e550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e552:	f000 f908 	bl	800e766 <__retarget_lock_release_recursive>
 800e556:	e7d9      	b.n	800e50c <_fflush_r+0xc>
 800e558:	4b05      	ldr	r3, [pc, #20]	; (800e570 <_fflush_r+0x70>)
 800e55a:	429c      	cmp	r4, r3
 800e55c:	d101      	bne.n	800e562 <_fflush_r+0x62>
 800e55e:	68ac      	ldr	r4, [r5, #8]
 800e560:	e7df      	b.n	800e522 <_fflush_r+0x22>
 800e562:	4b04      	ldr	r3, [pc, #16]	; (800e574 <_fflush_r+0x74>)
 800e564:	429c      	cmp	r4, r3
 800e566:	bf08      	it	eq
 800e568:	68ec      	ldreq	r4, [r5, #12]
 800e56a:	e7da      	b.n	800e522 <_fflush_r+0x22>
 800e56c:	0800ee0c 	.word	0x0800ee0c
 800e570:	0800ee2c 	.word	0x0800ee2c
 800e574:	0800edec 	.word	0x0800edec

0800e578 <std>:
 800e578:	2300      	movs	r3, #0
 800e57a:	b510      	push	{r4, lr}
 800e57c:	4604      	mov	r4, r0
 800e57e:	e9c0 3300 	strd	r3, r3, [r0]
 800e582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e586:	6083      	str	r3, [r0, #8]
 800e588:	8181      	strh	r1, [r0, #12]
 800e58a:	6643      	str	r3, [r0, #100]	; 0x64
 800e58c:	81c2      	strh	r2, [r0, #14]
 800e58e:	6183      	str	r3, [r0, #24]
 800e590:	4619      	mov	r1, r3
 800e592:	2208      	movs	r2, #8
 800e594:	305c      	adds	r0, #92	; 0x5c
 800e596:	f7fd fdf3 	bl	800c180 <memset>
 800e59a:	4b05      	ldr	r3, [pc, #20]	; (800e5b0 <std+0x38>)
 800e59c:	6263      	str	r3, [r4, #36]	; 0x24
 800e59e:	4b05      	ldr	r3, [pc, #20]	; (800e5b4 <std+0x3c>)
 800e5a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5a2:	4b05      	ldr	r3, [pc, #20]	; (800e5b8 <std+0x40>)
 800e5a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5a6:	4b05      	ldr	r3, [pc, #20]	; (800e5bc <std+0x44>)
 800e5a8:	6224      	str	r4, [r4, #32]
 800e5aa:	6323      	str	r3, [r4, #48]	; 0x30
 800e5ac:	bd10      	pop	{r4, pc}
 800e5ae:	bf00      	nop
 800e5b0:	0800e8b9 	.word	0x0800e8b9
 800e5b4:	0800e8db 	.word	0x0800e8db
 800e5b8:	0800e913 	.word	0x0800e913
 800e5bc:	0800e937 	.word	0x0800e937

0800e5c0 <_cleanup_r>:
 800e5c0:	4901      	ldr	r1, [pc, #4]	; (800e5c8 <_cleanup_r+0x8>)
 800e5c2:	f000 b8af 	b.w	800e724 <_fwalk_reent>
 800e5c6:	bf00      	nop
 800e5c8:	0800e501 	.word	0x0800e501

0800e5cc <__sfmoreglue>:
 800e5cc:	b570      	push	{r4, r5, r6, lr}
 800e5ce:	1e4a      	subs	r2, r1, #1
 800e5d0:	2568      	movs	r5, #104	; 0x68
 800e5d2:	4355      	muls	r5, r2
 800e5d4:	460e      	mov	r6, r1
 800e5d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e5da:	f7ff fc23 	bl	800de24 <_malloc_r>
 800e5de:	4604      	mov	r4, r0
 800e5e0:	b140      	cbz	r0, 800e5f4 <__sfmoreglue+0x28>
 800e5e2:	2100      	movs	r1, #0
 800e5e4:	e9c0 1600 	strd	r1, r6, [r0]
 800e5e8:	300c      	adds	r0, #12
 800e5ea:	60a0      	str	r0, [r4, #8]
 800e5ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e5f0:	f7fd fdc6 	bl	800c180 <memset>
 800e5f4:	4620      	mov	r0, r4
 800e5f6:	bd70      	pop	{r4, r5, r6, pc}

0800e5f8 <__sfp_lock_acquire>:
 800e5f8:	4801      	ldr	r0, [pc, #4]	; (800e600 <__sfp_lock_acquire+0x8>)
 800e5fa:	f000 b8b3 	b.w	800e764 <__retarget_lock_acquire_recursive>
 800e5fe:	bf00      	nop
 800e600:	24000964 	.word	0x24000964

0800e604 <__sfp_lock_release>:
 800e604:	4801      	ldr	r0, [pc, #4]	; (800e60c <__sfp_lock_release+0x8>)
 800e606:	f000 b8ae 	b.w	800e766 <__retarget_lock_release_recursive>
 800e60a:	bf00      	nop
 800e60c:	24000964 	.word	0x24000964

0800e610 <__sinit_lock_acquire>:
 800e610:	4801      	ldr	r0, [pc, #4]	; (800e618 <__sinit_lock_acquire+0x8>)
 800e612:	f000 b8a7 	b.w	800e764 <__retarget_lock_acquire_recursive>
 800e616:	bf00      	nop
 800e618:	2400095f 	.word	0x2400095f

0800e61c <__sinit_lock_release>:
 800e61c:	4801      	ldr	r0, [pc, #4]	; (800e624 <__sinit_lock_release+0x8>)
 800e61e:	f000 b8a2 	b.w	800e766 <__retarget_lock_release_recursive>
 800e622:	bf00      	nop
 800e624:	2400095f 	.word	0x2400095f

0800e628 <__sinit>:
 800e628:	b510      	push	{r4, lr}
 800e62a:	4604      	mov	r4, r0
 800e62c:	f7ff fff0 	bl	800e610 <__sinit_lock_acquire>
 800e630:	69a3      	ldr	r3, [r4, #24]
 800e632:	b11b      	cbz	r3, 800e63c <__sinit+0x14>
 800e634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e638:	f7ff bff0 	b.w	800e61c <__sinit_lock_release>
 800e63c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e640:	6523      	str	r3, [r4, #80]	; 0x50
 800e642:	4b13      	ldr	r3, [pc, #76]	; (800e690 <__sinit+0x68>)
 800e644:	4a13      	ldr	r2, [pc, #76]	; (800e694 <__sinit+0x6c>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	62a2      	str	r2, [r4, #40]	; 0x28
 800e64a:	42a3      	cmp	r3, r4
 800e64c:	bf04      	itt	eq
 800e64e:	2301      	moveq	r3, #1
 800e650:	61a3      	streq	r3, [r4, #24]
 800e652:	4620      	mov	r0, r4
 800e654:	f000 f820 	bl	800e698 <__sfp>
 800e658:	6060      	str	r0, [r4, #4]
 800e65a:	4620      	mov	r0, r4
 800e65c:	f000 f81c 	bl	800e698 <__sfp>
 800e660:	60a0      	str	r0, [r4, #8]
 800e662:	4620      	mov	r0, r4
 800e664:	f000 f818 	bl	800e698 <__sfp>
 800e668:	2200      	movs	r2, #0
 800e66a:	60e0      	str	r0, [r4, #12]
 800e66c:	2104      	movs	r1, #4
 800e66e:	6860      	ldr	r0, [r4, #4]
 800e670:	f7ff ff82 	bl	800e578 <std>
 800e674:	68a0      	ldr	r0, [r4, #8]
 800e676:	2201      	movs	r2, #1
 800e678:	2109      	movs	r1, #9
 800e67a:	f7ff ff7d 	bl	800e578 <std>
 800e67e:	68e0      	ldr	r0, [r4, #12]
 800e680:	2202      	movs	r2, #2
 800e682:	2112      	movs	r1, #18
 800e684:	f7ff ff78 	bl	800e578 <std>
 800e688:	2301      	movs	r3, #1
 800e68a:	61a3      	str	r3, [r4, #24]
 800e68c:	e7d2      	b.n	800e634 <__sinit+0xc>
 800e68e:	bf00      	nop
 800e690:	0800ea6c 	.word	0x0800ea6c
 800e694:	0800e5c1 	.word	0x0800e5c1

0800e698 <__sfp>:
 800e698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e69a:	4607      	mov	r7, r0
 800e69c:	f7ff ffac 	bl	800e5f8 <__sfp_lock_acquire>
 800e6a0:	4b1e      	ldr	r3, [pc, #120]	; (800e71c <__sfp+0x84>)
 800e6a2:	681e      	ldr	r6, [r3, #0]
 800e6a4:	69b3      	ldr	r3, [r6, #24]
 800e6a6:	b913      	cbnz	r3, 800e6ae <__sfp+0x16>
 800e6a8:	4630      	mov	r0, r6
 800e6aa:	f7ff ffbd 	bl	800e628 <__sinit>
 800e6ae:	3648      	adds	r6, #72	; 0x48
 800e6b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e6b4:	3b01      	subs	r3, #1
 800e6b6:	d503      	bpl.n	800e6c0 <__sfp+0x28>
 800e6b8:	6833      	ldr	r3, [r6, #0]
 800e6ba:	b30b      	cbz	r3, 800e700 <__sfp+0x68>
 800e6bc:	6836      	ldr	r6, [r6, #0]
 800e6be:	e7f7      	b.n	800e6b0 <__sfp+0x18>
 800e6c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e6c4:	b9d5      	cbnz	r5, 800e6fc <__sfp+0x64>
 800e6c6:	4b16      	ldr	r3, [pc, #88]	; (800e720 <__sfp+0x88>)
 800e6c8:	60e3      	str	r3, [r4, #12]
 800e6ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e6ce:	6665      	str	r5, [r4, #100]	; 0x64
 800e6d0:	f000 f847 	bl	800e762 <__retarget_lock_init_recursive>
 800e6d4:	f7ff ff96 	bl	800e604 <__sfp_lock_release>
 800e6d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e6dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e6e0:	6025      	str	r5, [r4, #0]
 800e6e2:	61a5      	str	r5, [r4, #24]
 800e6e4:	2208      	movs	r2, #8
 800e6e6:	4629      	mov	r1, r5
 800e6e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e6ec:	f7fd fd48 	bl	800c180 <memset>
 800e6f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e6f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e6f8:	4620      	mov	r0, r4
 800e6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6fc:	3468      	adds	r4, #104	; 0x68
 800e6fe:	e7d9      	b.n	800e6b4 <__sfp+0x1c>
 800e700:	2104      	movs	r1, #4
 800e702:	4638      	mov	r0, r7
 800e704:	f7ff ff62 	bl	800e5cc <__sfmoreglue>
 800e708:	4604      	mov	r4, r0
 800e70a:	6030      	str	r0, [r6, #0]
 800e70c:	2800      	cmp	r0, #0
 800e70e:	d1d5      	bne.n	800e6bc <__sfp+0x24>
 800e710:	f7ff ff78 	bl	800e604 <__sfp_lock_release>
 800e714:	230c      	movs	r3, #12
 800e716:	603b      	str	r3, [r7, #0]
 800e718:	e7ee      	b.n	800e6f8 <__sfp+0x60>
 800e71a:	bf00      	nop
 800e71c:	0800ea6c 	.word	0x0800ea6c
 800e720:	ffff0001 	.word	0xffff0001

0800e724 <_fwalk_reent>:
 800e724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e728:	4606      	mov	r6, r0
 800e72a:	4688      	mov	r8, r1
 800e72c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e730:	2700      	movs	r7, #0
 800e732:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e736:	f1b9 0901 	subs.w	r9, r9, #1
 800e73a:	d505      	bpl.n	800e748 <_fwalk_reent+0x24>
 800e73c:	6824      	ldr	r4, [r4, #0]
 800e73e:	2c00      	cmp	r4, #0
 800e740:	d1f7      	bne.n	800e732 <_fwalk_reent+0xe>
 800e742:	4638      	mov	r0, r7
 800e744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e748:	89ab      	ldrh	r3, [r5, #12]
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d907      	bls.n	800e75e <_fwalk_reent+0x3a>
 800e74e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e752:	3301      	adds	r3, #1
 800e754:	d003      	beq.n	800e75e <_fwalk_reent+0x3a>
 800e756:	4629      	mov	r1, r5
 800e758:	4630      	mov	r0, r6
 800e75a:	47c0      	blx	r8
 800e75c:	4307      	orrs	r7, r0
 800e75e:	3568      	adds	r5, #104	; 0x68
 800e760:	e7e9      	b.n	800e736 <_fwalk_reent+0x12>

0800e762 <__retarget_lock_init_recursive>:
 800e762:	4770      	bx	lr

0800e764 <__retarget_lock_acquire_recursive>:
 800e764:	4770      	bx	lr

0800e766 <__retarget_lock_release_recursive>:
 800e766:	4770      	bx	lr

0800e768 <__swhatbuf_r>:
 800e768:	b570      	push	{r4, r5, r6, lr}
 800e76a:	460e      	mov	r6, r1
 800e76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e770:	2900      	cmp	r1, #0
 800e772:	b096      	sub	sp, #88	; 0x58
 800e774:	4614      	mov	r4, r2
 800e776:	461d      	mov	r5, r3
 800e778:	da07      	bge.n	800e78a <__swhatbuf_r+0x22>
 800e77a:	2300      	movs	r3, #0
 800e77c:	602b      	str	r3, [r5, #0]
 800e77e:	89b3      	ldrh	r3, [r6, #12]
 800e780:	061a      	lsls	r2, r3, #24
 800e782:	d410      	bmi.n	800e7a6 <__swhatbuf_r+0x3e>
 800e784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e788:	e00e      	b.n	800e7a8 <__swhatbuf_r+0x40>
 800e78a:	466a      	mov	r2, sp
 800e78c:	f000 f8fa 	bl	800e984 <_fstat_r>
 800e790:	2800      	cmp	r0, #0
 800e792:	dbf2      	blt.n	800e77a <__swhatbuf_r+0x12>
 800e794:	9a01      	ldr	r2, [sp, #4]
 800e796:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e79a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e79e:	425a      	negs	r2, r3
 800e7a0:	415a      	adcs	r2, r3
 800e7a2:	602a      	str	r2, [r5, #0]
 800e7a4:	e7ee      	b.n	800e784 <__swhatbuf_r+0x1c>
 800e7a6:	2340      	movs	r3, #64	; 0x40
 800e7a8:	2000      	movs	r0, #0
 800e7aa:	6023      	str	r3, [r4, #0]
 800e7ac:	b016      	add	sp, #88	; 0x58
 800e7ae:	bd70      	pop	{r4, r5, r6, pc}

0800e7b0 <__smakebuf_r>:
 800e7b0:	898b      	ldrh	r3, [r1, #12]
 800e7b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7b4:	079d      	lsls	r5, r3, #30
 800e7b6:	4606      	mov	r6, r0
 800e7b8:	460c      	mov	r4, r1
 800e7ba:	d507      	bpl.n	800e7cc <__smakebuf_r+0x1c>
 800e7bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e7c0:	6023      	str	r3, [r4, #0]
 800e7c2:	6123      	str	r3, [r4, #16]
 800e7c4:	2301      	movs	r3, #1
 800e7c6:	6163      	str	r3, [r4, #20]
 800e7c8:	b002      	add	sp, #8
 800e7ca:	bd70      	pop	{r4, r5, r6, pc}
 800e7cc:	ab01      	add	r3, sp, #4
 800e7ce:	466a      	mov	r2, sp
 800e7d0:	f7ff ffca 	bl	800e768 <__swhatbuf_r>
 800e7d4:	9900      	ldr	r1, [sp, #0]
 800e7d6:	4605      	mov	r5, r0
 800e7d8:	4630      	mov	r0, r6
 800e7da:	f7ff fb23 	bl	800de24 <_malloc_r>
 800e7de:	b948      	cbnz	r0, 800e7f4 <__smakebuf_r+0x44>
 800e7e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7e4:	059a      	lsls	r2, r3, #22
 800e7e6:	d4ef      	bmi.n	800e7c8 <__smakebuf_r+0x18>
 800e7e8:	f023 0303 	bic.w	r3, r3, #3
 800e7ec:	f043 0302 	orr.w	r3, r3, #2
 800e7f0:	81a3      	strh	r3, [r4, #12]
 800e7f2:	e7e3      	b.n	800e7bc <__smakebuf_r+0xc>
 800e7f4:	4b0d      	ldr	r3, [pc, #52]	; (800e82c <__smakebuf_r+0x7c>)
 800e7f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e7f8:	89a3      	ldrh	r3, [r4, #12]
 800e7fa:	6020      	str	r0, [r4, #0]
 800e7fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e800:	81a3      	strh	r3, [r4, #12]
 800e802:	9b00      	ldr	r3, [sp, #0]
 800e804:	6163      	str	r3, [r4, #20]
 800e806:	9b01      	ldr	r3, [sp, #4]
 800e808:	6120      	str	r0, [r4, #16]
 800e80a:	b15b      	cbz	r3, 800e824 <__smakebuf_r+0x74>
 800e80c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e810:	4630      	mov	r0, r6
 800e812:	f000 f8c9 	bl	800e9a8 <_isatty_r>
 800e816:	b128      	cbz	r0, 800e824 <__smakebuf_r+0x74>
 800e818:	89a3      	ldrh	r3, [r4, #12]
 800e81a:	f023 0303 	bic.w	r3, r3, #3
 800e81e:	f043 0301 	orr.w	r3, r3, #1
 800e822:	81a3      	strh	r3, [r4, #12]
 800e824:	89a0      	ldrh	r0, [r4, #12]
 800e826:	4305      	orrs	r5, r0
 800e828:	81a5      	strh	r5, [r4, #12]
 800e82a:	e7cd      	b.n	800e7c8 <__smakebuf_r+0x18>
 800e82c:	0800e5c1 	.word	0x0800e5c1

0800e830 <_raise_r>:
 800e830:	291f      	cmp	r1, #31
 800e832:	b538      	push	{r3, r4, r5, lr}
 800e834:	4604      	mov	r4, r0
 800e836:	460d      	mov	r5, r1
 800e838:	d904      	bls.n	800e844 <_raise_r+0x14>
 800e83a:	2316      	movs	r3, #22
 800e83c:	6003      	str	r3, [r0, #0]
 800e83e:	f04f 30ff 	mov.w	r0, #4294967295
 800e842:	bd38      	pop	{r3, r4, r5, pc}
 800e844:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e846:	b112      	cbz	r2, 800e84e <_raise_r+0x1e>
 800e848:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e84c:	b94b      	cbnz	r3, 800e862 <_raise_r+0x32>
 800e84e:	4620      	mov	r0, r4
 800e850:	f000 f830 	bl	800e8b4 <_getpid_r>
 800e854:	462a      	mov	r2, r5
 800e856:	4601      	mov	r1, r0
 800e858:	4620      	mov	r0, r4
 800e85a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e85e:	f000 b817 	b.w	800e890 <_kill_r>
 800e862:	2b01      	cmp	r3, #1
 800e864:	d00a      	beq.n	800e87c <_raise_r+0x4c>
 800e866:	1c59      	adds	r1, r3, #1
 800e868:	d103      	bne.n	800e872 <_raise_r+0x42>
 800e86a:	2316      	movs	r3, #22
 800e86c:	6003      	str	r3, [r0, #0]
 800e86e:	2001      	movs	r0, #1
 800e870:	e7e7      	b.n	800e842 <_raise_r+0x12>
 800e872:	2400      	movs	r4, #0
 800e874:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e878:	4628      	mov	r0, r5
 800e87a:	4798      	blx	r3
 800e87c:	2000      	movs	r0, #0
 800e87e:	e7e0      	b.n	800e842 <_raise_r+0x12>

0800e880 <raise>:
 800e880:	4b02      	ldr	r3, [pc, #8]	; (800e88c <raise+0xc>)
 800e882:	4601      	mov	r1, r0
 800e884:	6818      	ldr	r0, [r3, #0]
 800e886:	f7ff bfd3 	b.w	800e830 <_raise_r>
 800e88a:	bf00      	nop
 800e88c:	24000010 	.word	0x24000010

0800e890 <_kill_r>:
 800e890:	b538      	push	{r3, r4, r5, lr}
 800e892:	4d07      	ldr	r5, [pc, #28]	; (800e8b0 <_kill_r+0x20>)
 800e894:	2300      	movs	r3, #0
 800e896:	4604      	mov	r4, r0
 800e898:	4608      	mov	r0, r1
 800e89a:	4611      	mov	r1, r2
 800e89c:	602b      	str	r3, [r5, #0]
 800e89e:	f7f4 f901 	bl	8002aa4 <_kill>
 800e8a2:	1c43      	adds	r3, r0, #1
 800e8a4:	d102      	bne.n	800e8ac <_kill_r+0x1c>
 800e8a6:	682b      	ldr	r3, [r5, #0]
 800e8a8:	b103      	cbz	r3, 800e8ac <_kill_r+0x1c>
 800e8aa:	6023      	str	r3, [r4, #0]
 800e8ac:	bd38      	pop	{r3, r4, r5, pc}
 800e8ae:	bf00      	nop
 800e8b0:	24000958 	.word	0x24000958

0800e8b4 <_getpid_r>:
 800e8b4:	f7f4 b8ee 	b.w	8002a94 <_getpid>

0800e8b8 <__sread>:
 800e8b8:	b510      	push	{r4, lr}
 800e8ba:	460c      	mov	r4, r1
 800e8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8c0:	f000 f894 	bl	800e9ec <_read_r>
 800e8c4:	2800      	cmp	r0, #0
 800e8c6:	bfab      	itete	ge
 800e8c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e8ca:	89a3      	ldrhlt	r3, [r4, #12]
 800e8cc:	181b      	addge	r3, r3, r0
 800e8ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e8d2:	bfac      	ite	ge
 800e8d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e8d6:	81a3      	strhlt	r3, [r4, #12]
 800e8d8:	bd10      	pop	{r4, pc}

0800e8da <__swrite>:
 800e8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8de:	461f      	mov	r7, r3
 800e8e0:	898b      	ldrh	r3, [r1, #12]
 800e8e2:	05db      	lsls	r3, r3, #23
 800e8e4:	4605      	mov	r5, r0
 800e8e6:	460c      	mov	r4, r1
 800e8e8:	4616      	mov	r6, r2
 800e8ea:	d505      	bpl.n	800e8f8 <__swrite+0x1e>
 800e8ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8f0:	2302      	movs	r3, #2
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f000 f868 	bl	800e9c8 <_lseek_r>
 800e8f8:	89a3      	ldrh	r3, [r4, #12]
 800e8fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e902:	81a3      	strh	r3, [r4, #12]
 800e904:	4632      	mov	r2, r6
 800e906:	463b      	mov	r3, r7
 800e908:	4628      	mov	r0, r5
 800e90a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e90e:	f000 b817 	b.w	800e940 <_write_r>

0800e912 <__sseek>:
 800e912:	b510      	push	{r4, lr}
 800e914:	460c      	mov	r4, r1
 800e916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e91a:	f000 f855 	bl	800e9c8 <_lseek_r>
 800e91e:	1c43      	adds	r3, r0, #1
 800e920:	89a3      	ldrh	r3, [r4, #12]
 800e922:	bf15      	itete	ne
 800e924:	6560      	strne	r0, [r4, #84]	; 0x54
 800e926:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e92a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e92e:	81a3      	strheq	r3, [r4, #12]
 800e930:	bf18      	it	ne
 800e932:	81a3      	strhne	r3, [r4, #12]
 800e934:	bd10      	pop	{r4, pc}

0800e936 <__sclose>:
 800e936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e93a:	f000 b813 	b.w	800e964 <_close_r>
	...

0800e940 <_write_r>:
 800e940:	b538      	push	{r3, r4, r5, lr}
 800e942:	4d07      	ldr	r5, [pc, #28]	; (800e960 <_write_r+0x20>)
 800e944:	4604      	mov	r4, r0
 800e946:	4608      	mov	r0, r1
 800e948:	4611      	mov	r1, r2
 800e94a:	2200      	movs	r2, #0
 800e94c:	602a      	str	r2, [r5, #0]
 800e94e:	461a      	mov	r2, r3
 800e950:	f7f4 f8df 	bl	8002b12 <_write>
 800e954:	1c43      	adds	r3, r0, #1
 800e956:	d102      	bne.n	800e95e <_write_r+0x1e>
 800e958:	682b      	ldr	r3, [r5, #0]
 800e95a:	b103      	cbz	r3, 800e95e <_write_r+0x1e>
 800e95c:	6023      	str	r3, [r4, #0]
 800e95e:	bd38      	pop	{r3, r4, r5, pc}
 800e960:	24000958 	.word	0x24000958

0800e964 <_close_r>:
 800e964:	b538      	push	{r3, r4, r5, lr}
 800e966:	4d06      	ldr	r5, [pc, #24]	; (800e980 <_close_r+0x1c>)
 800e968:	2300      	movs	r3, #0
 800e96a:	4604      	mov	r4, r0
 800e96c:	4608      	mov	r0, r1
 800e96e:	602b      	str	r3, [r5, #0]
 800e970:	f7f4 f8eb 	bl	8002b4a <_close>
 800e974:	1c43      	adds	r3, r0, #1
 800e976:	d102      	bne.n	800e97e <_close_r+0x1a>
 800e978:	682b      	ldr	r3, [r5, #0]
 800e97a:	b103      	cbz	r3, 800e97e <_close_r+0x1a>
 800e97c:	6023      	str	r3, [r4, #0]
 800e97e:	bd38      	pop	{r3, r4, r5, pc}
 800e980:	24000958 	.word	0x24000958

0800e984 <_fstat_r>:
 800e984:	b538      	push	{r3, r4, r5, lr}
 800e986:	4d07      	ldr	r5, [pc, #28]	; (800e9a4 <_fstat_r+0x20>)
 800e988:	2300      	movs	r3, #0
 800e98a:	4604      	mov	r4, r0
 800e98c:	4608      	mov	r0, r1
 800e98e:	4611      	mov	r1, r2
 800e990:	602b      	str	r3, [r5, #0]
 800e992:	f7f4 f8e6 	bl	8002b62 <_fstat>
 800e996:	1c43      	adds	r3, r0, #1
 800e998:	d102      	bne.n	800e9a0 <_fstat_r+0x1c>
 800e99a:	682b      	ldr	r3, [r5, #0]
 800e99c:	b103      	cbz	r3, 800e9a0 <_fstat_r+0x1c>
 800e99e:	6023      	str	r3, [r4, #0]
 800e9a0:	bd38      	pop	{r3, r4, r5, pc}
 800e9a2:	bf00      	nop
 800e9a4:	24000958 	.word	0x24000958

0800e9a8 <_isatty_r>:
 800e9a8:	b538      	push	{r3, r4, r5, lr}
 800e9aa:	4d06      	ldr	r5, [pc, #24]	; (800e9c4 <_isatty_r+0x1c>)
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	4608      	mov	r0, r1
 800e9b2:	602b      	str	r3, [r5, #0]
 800e9b4:	f7f4 f8e5 	bl	8002b82 <_isatty>
 800e9b8:	1c43      	adds	r3, r0, #1
 800e9ba:	d102      	bne.n	800e9c2 <_isatty_r+0x1a>
 800e9bc:	682b      	ldr	r3, [r5, #0]
 800e9be:	b103      	cbz	r3, 800e9c2 <_isatty_r+0x1a>
 800e9c0:	6023      	str	r3, [r4, #0]
 800e9c2:	bd38      	pop	{r3, r4, r5, pc}
 800e9c4:	24000958 	.word	0x24000958

0800e9c8 <_lseek_r>:
 800e9c8:	b538      	push	{r3, r4, r5, lr}
 800e9ca:	4d07      	ldr	r5, [pc, #28]	; (800e9e8 <_lseek_r+0x20>)
 800e9cc:	4604      	mov	r4, r0
 800e9ce:	4608      	mov	r0, r1
 800e9d0:	4611      	mov	r1, r2
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	602a      	str	r2, [r5, #0]
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	f7f4 f8de 	bl	8002b98 <_lseek>
 800e9dc:	1c43      	adds	r3, r0, #1
 800e9de:	d102      	bne.n	800e9e6 <_lseek_r+0x1e>
 800e9e0:	682b      	ldr	r3, [r5, #0]
 800e9e2:	b103      	cbz	r3, 800e9e6 <_lseek_r+0x1e>
 800e9e4:	6023      	str	r3, [r4, #0]
 800e9e6:	bd38      	pop	{r3, r4, r5, pc}
 800e9e8:	24000958 	.word	0x24000958

0800e9ec <_read_r>:
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	4d07      	ldr	r5, [pc, #28]	; (800ea0c <_read_r+0x20>)
 800e9f0:	4604      	mov	r4, r0
 800e9f2:	4608      	mov	r0, r1
 800e9f4:	4611      	mov	r1, r2
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	602a      	str	r2, [r5, #0]
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	f7f4 f86c 	bl	8002ad8 <_read>
 800ea00:	1c43      	adds	r3, r0, #1
 800ea02:	d102      	bne.n	800ea0a <_read_r+0x1e>
 800ea04:	682b      	ldr	r3, [r5, #0]
 800ea06:	b103      	cbz	r3, 800ea0a <_read_r+0x1e>
 800ea08:	6023      	str	r3, [r4, #0]
 800ea0a:	bd38      	pop	{r3, r4, r5, pc}
 800ea0c:	24000958 	.word	0x24000958

0800ea10 <_init>:
 800ea10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea12:	bf00      	nop
 800ea14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea16:	bc08      	pop	{r3}
 800ea18:	469e      	mov	lr, r3
 800ea1a:	4770      	bx	lr

0800ea1c <_fini>:
 800ea1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea1e:	bf00      	nop
 800ea20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea22:	bc08      	pop	{r3}
 800ea24:	469e      	mov	lr, r3
 800ea26:	4770      	bx	lr
