
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f754  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cdc  0800f9f8  0800f9f8  0001f9f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080116d4  080116d4  000216d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  080116dc  080116dc  000216dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  080116e4  080116e4  000216e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f4  24000000  080116ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ae4  240001f4  080118e0  000301f4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000cd8  080118e0  00030cd8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003090c  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004546  00000000  00000000  00060b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001578  00000000  00000000  00065078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001440  00000000  00000000  000665f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cc28  00000000  00000000  00067a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001e15b  00000000  00000000  000a4658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d634  00000000  00000000  000c27b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0022fde7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006b58  00000000  00000000  0022fe3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f9dc 	.word	0x0800f9dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	0800f9dc 	.word	0x0800f9dc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address){
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21(){
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read(){
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f103 010a 	add.w	r1, r3, #10
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	f00a fb60 	bl	800ada0 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 010c 	add.w	r1, r3, #12
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2202      	movs	r2, #2
 80006ee:	f00a fbed 	bl	800aecc <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	749a      	strb	r2, [r3, #18]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	0bdb      	lsrs	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	74da      	strb	r2, [r3, #19]
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN5AMT2117AMT21_Check_ValueEv>:

HAL_StatusTypeDef AMT21::AMT21_Check_Value(){
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000734:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d820      	bhi.n	800079c <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	109b      	asrs	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4053      	eors	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b25a      	sxtb	r2, r3
 800078a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800078e:	4053      	eors	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	3301      	adds	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
 800079a:	e7db      	b.n	8000754 <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7c9b      	ldrb	r3, [r3, #18]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d10a      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7cdb      	ldrb	r3, [r3, #19]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d105      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 80007cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e003      	b.n	80007e0 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
	}
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZN5AMT2112getAngPos180Ev>:
{
	return this->raw_value;
}

int16_t AMT21::getAngPos180()
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
//	uint8_t iii =  (this->raw_value & 0x1FFF);
	return ((((this->raw_value & 0x2000) >> 13) * (-16383)) + (this->raw_value & 0x3FFF) ) * -1;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	135b      	asrs	r3, r3, #13
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	0392      	lsls	r2, r2, #14
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800081a:	b29b      	uxth	r3, r3
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
//	return this->raw_value;
//	this->value =
//	return iii;
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	ed87 0a01 	vstr	s0, [r7, #4]
 8000838:	edd7 7a01 	vldr	s15, [r7, #4]
 800083c:	eef0 7ae7 	vabs.f32	s15, s15
 8000840:	eeb0 0a67 	vmov.f32	s0, s15
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	ed87 0a01 	vstr	s0, [r7, #4]
 8000858:	edd7 7a01 	vldr	s15, [r7, #4]
 800085c:	fef8 7a67 	vrinta.f32	s15, s15
 8000860:	eeb0 0a67 	vmov.f32	s0, s15
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8000882:	615a      	str	r2, [r3, #20]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000888:	619a      	str	r2, [r3, #24]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000890:	61da      	str	r2, [r3, #28]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	4a15      	ldr	r2, [pc, #84]	; (80008ec <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8000896:	621a      	str	r2, [r3, #32]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	22c7      	movs	r2, #199	; 0xc7
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 60.0f;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 80008ba:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 80008c0:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 80008c2:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80008f4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f000 f832 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	60da      	str	r2, [r3, #12]
}
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	41a00000 	.word	0x41a00000
 80008e8:	469c4000 	.word	0x469c4000
 80008ec:	43480000 	.word	0x43480000
 80008f0:	42700000 	.word	0x42700000
 80008f4:	00000000 	.word	0x00000000

080008f8 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
}
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	4619      	mov	r1, r3
 8000920:	4610      	mov	r0, r2
 8000922:	f009 f82d 	bl	8009980 <HAL_TIM_PWM_Start>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8000930:	b580      	push	{r7, lr}
 8000932:	ed2d 8b02 	vpush	{d8}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	edd3 7a04 	vldr	s15, [r3, #16]
 800094c:	eeb0 0a67 	vmov.f32	s0, s15
 8000950:	f7ff ff6d 	bl	800082e <_ZSt4fabsf>
 8000954:	eeb0 7a40 	vmov.f32	s14, s0
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	edd3 7a05 	vldr	s15, [r3, #20]
 800095e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	bf94      	ite	ls
 8000968:	2301      	movls	r3, #1
 800096a:	2300      	movhi	r3, #0
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d003      	beq.n	800097a <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e01b      	b.n	80009b2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000980:	eeb0 0a67 	vmov.f32	s0, s15
 8000984:	f7ff ff53 	bl	800082e <_ZSt4fabsf>
 8000988:	eeb0 7a40 	vmov.f32	s14, s0
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099a:	bfac      	ite	ge
 800099c:	2301      	movge	r3, #1
 800099e:	2300      	movlt	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e001      	b.n	80009b2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80009b8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8000c54 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 80009bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c4:	f2c0 80db 	blt.w	8000b7e <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6898      	ldr	r0, [r3, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	2201      	movs	r2, #1
 80009d4:	4619      	mov	r1, r3
 80009d6:	f006 f9f9 	bl	8006dcc <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e2:	3301      	adds	r3, #1
 80009e4:	ee07 3a90 	vmov	s15, r3
 80009e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80009f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009f4:	eddf 6a98 	vldr	s13, [pc, #608]	; 8000c58 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 80009f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 80009fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a04:	eeb0 0a67 	vmov.f32	s0, s15
 8000a08:	f7ff ff21 	bl	800084e <_ZSt5roundf>
 8000a0c:	eef0 7a40 	vmov.f32	s15, s0
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a1a:	ee17 2a90 	vmov	r2, s15
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d113      	bne.n	8000a50 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000a32:	085b      	lsrs	r3, r3, #1
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fa5b 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a3a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a48:	ee17 2a90 	vmov	r2, s15
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8000a4e:	e1e0      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d113      	bne.n	8000a80 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a60:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000a62:	085b      	lsrs	r3, r3, #1
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fa43 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a6a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a78:	ee17 2a90 	vmov	r2, s15
 8000a7c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a7e:	e1c8      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b08      	cmp	r3, #8
 8000a86:	d113      	bne.n	8000ab0 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a90:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000a92:	085b      	lsrs	r3, r3, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fa2b 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000aa8:	ee17 2a90 	vmov	r2, s15
 8000aac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000aae:	e1b0      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b0c      	cmp	r3, #12
 8000ab6:	d113      	bne.n	8000ae0 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000ac2:	085b      	lsrs	r3, r3, #1
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fa13 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000aca:	eeb0 7b40 	vmov.f64	d7, d0
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ad8:	ee17 2a90 	vmov	r2, s15
 8000adc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ade:	e198      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b10      	cmp	r3, #16
 8000ae6:	d113      	bne.n	8000b10 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000af2:	085b      	lsrs	r3, r3, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f9fb 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000afa:	eeb0 7b40 	vmov.f64	d7, d0
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b08:	ee17 2a90 	vmov	r2, s15
 8000b0c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000b0e:	e180      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b14      	cmp	r3, #20
 8000b16:	d113      	bne.n	8000b40 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b20:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000b22:	085b      	lsrs	r3, r3, #1
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f9e3 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b2a:	eeb0 7b40 	vmov.f64	d7, d0
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b38:	ee17 2a90 	vmov	r2, s15
 8000b3c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b3e:	e168      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2200      	movs	r2, #0
 8000b48:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2200      	movs	r2, #0
 8000b52:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2200      	movs	r2, #0
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b7c:	e149      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b84:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000c5c <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8000b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b90:	f200 80e5 	bhi.w	8000d5e <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6898      	ldr	r0, [r3, #8]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f006 f913 	bl	8006dcc <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bae:	3301      	adds	r3, #1
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000bb8:	ed97 0a03 	vldr	s0, [r7, #12]
 8000bbc:	f7ff fe37 	bl	800082e <_ZSt4fabsf>
 8000bc0:	eef0 7a40 	vmov.f32	s15, s0
 8000bc4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000bc8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000c58 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8000bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000bd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	f7ff fe37 	bl	800084e <_ZSt5roundf>
 8000be0:	eef0 7a40 	vmov.f32	s15, s0
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bee:	ee17 2a90 	vmov	r2, s15
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d113      	bne.n	8000c24 <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c04:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000c06:	085b      	lsrs	r3, r3, #1
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f971 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c0e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c1c:	ee17 2a90 	vmov	r2, s15
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c22:	e0f6      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b04      	cmp	r3, #4
 8000c2a:	d119      	bne.n	8000c60 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c34:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000c36:	085b      	lsrs	r3, r3, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f959 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c3e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c4c:	ee17 2a90 	vmov	r2, s15
 8000c50:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000c52:	e0de      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8000c54:	3a83126f 	.word	0x3a83126f
 8000c58:	4d64e1c0 	.word	0x4d64e1c0
 8000c5c:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d113      	bne.n	8000c90 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c70:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000c72:	085b      	lsrs	r3, r3, #1
 8000c74:	4618      	mov	r0, r3
 8000c76:	f000 f93b 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c7a:	eeb0 7b40 	vmov.f64	d7, d0
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c88:	ee17 2a90 	vmov	r2, s15
 8000c8c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c8e:	e0c0      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	2b0c      	cmp	r3, #12
 8000c96:	d113      	bne.n	8000cc0 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000ca2:	085b      	lsrs	r3, r3, #1
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f923 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000caa:	eeb0 7b40 	vmov.f64	d7, d0
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cb8:	ee17 2a90 	vmov	r2, s15
 8000cbc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000cbe:	e0a8      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b10      	cmp	r3, #16
 8000cc6:	d113      	bne.n	8000cf0 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cd0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000cd2:	085b      	lsrs	r3, r3, #1
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f000 f90b 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000cda:	eeb0 7b40 	vmov.f64	d7, d0
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ce8:	ee17 2a90 	vmov	r2, s15
 8000cec:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000cee:	e090      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b14      	cmp	r3, #20
 8000cf6:	d113      	bne.n	8000d20 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d00:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000d02:	085b      	lsrs	r3, r3, #1
 8000d04:	4618      	mov	r0, r3
 8000d06:	f000 f8f3 	bl	8000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000d0a:	eeb0 7b40 	vmov.f64	d7, d0
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d18:	ee17 2a90 	vmov	r2, s15
 8000d1c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000d1e:	e078      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2200      	movs	r2, #0
 8000d28:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2200      	movs	r2, #0
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2200      	movs	r2, #0
 8000d46:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000d5c:	e059      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d105      	bne.n	8000d72 <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d70:	e04f      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d105      	bne.n	8000d86 <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2200      	movs	r2, #0
 8000d82:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d84:	e045      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b08      	cmp	r3, #8
 8000d8c:	d105      	bne.n	8000d9a <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2200      	movs	r2, #0
 8000d96:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d98:	e03b      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b0c      	cmp	r3, #12
 8000da0:	d105      	bne.n	8000dae <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2200      	movs	r2, #0
 8000daa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000dac:	e031      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	2b10      	cmp	r3, #16
 8000db4:	d105      	bne.n	8000dc2 <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000dc0:	e027      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b14      	cmp	r3, #20
 8000dc8:	d105      	bne.n	8000dd6 <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000dd4:	e01d      	b.n	8000e12 <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2200      	movs	r2, #0
 8000de8:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2200      	movs	r2, #0
 8000df2:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2200      	movs	r2, #0
 8000e06:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	ecbd 8b02 	vpop	{d8}
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop

08000e20 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8000e2c:	ed97 0a00 	vldr	s0, [r7]
 8000e30:	f7ff fcfd 	bl	800082e <_ZSt4fabsf>
 8000e34:	eef0 7a40 	vmov.f32	s15, s0
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	ee07 3a90 	vmov	s15, r3
 8000e56:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e5a:	eeb0 0b47 	vmov.f64	d0, d7
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8000e74:	78fb      	ldrb	r3, [r7, #3]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff ffe5 	bl	8000e46 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e7c:	eeb0 7b40 	vmov.f64	d7, d0
 8000e80:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	0000      	movs	r0, r0
 8000e94:	0000      	movs	r0, r0
	...

08000e98 <_ZN7Stepper20StepperOpenLoopSpeedEf>:
void Stepper::StepperOpenLoopSpeed(float _speed) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	ed93 7a07 	vldr	s14, [r3, #28]
 8000eaa:	edd7 7a00 	vldr	s15, [r7]
 8000eae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000eb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	edd3 7a08 	vldr	s15, [r3, #32]
 8000ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ec6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI)));
 8000eca:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8000ee8 <_ZN7Stepper20StepperOpenLoopSpeedEf+0x50>
 8000ece:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 8000ed2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff fd28 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	54442eea 	.word	0x54442eea
 8000eec:	401921fb 	.word	0x401921fb

08000ef0 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	ee07 3a90 	vmov	s15, r3
 8000efe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f02:	eeb0 0b47 	vmov.f64	d0, d7
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_ZN11robot_jointC1Ev>:
struct joint_state {
    float q1,q2,q3,q4;
};
typedef struct joint_state joint_config;

struct robot_joint{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	661a      	str	r2, [r3, #96]	; 0x60
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f2e:	665a      	str	r2, [r3, #100]	; 0x64
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	669a      	str	r2, [r3, #104]	; 0x68
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f3e:	66da      	str	r2, [r3, #108]	; 0x6c
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f04f 0200 	mov.w	r2, #0
 8000f46:	671a      	str	r2, [r3, #112]	; 0x70
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	675a      	str	r2, [r3, #116]	; 0x74
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f04f 0200 	mov.w	r2, #0
 8000f56:	679a      	str	r2, [r3, #120]	; 0x78
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a06      	ldr	r2, [pc, #24]	; (8000f74 <_ZN11robot_jointC1Ev+0x64>)
 8000f5c:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <_ZN11robot_jointC1Ev+0x68>)
 8000f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	3c23d70a 	.word	0x3c23d70a
 8000f78:	38d1b717 	.word	0x38d1b717

08000f7c <_Z12KalmanFilterf11robot_joint>:
////     p21 = P21 + P22*dt + (Q*dt3)/2 - (((Q*dt3)/2 + P22*dt + P21)*(P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
////	 p22 = P22 + Q*dt2 - (((Q*dt3)/2 + P22*dt + P12)*((Q*dt3)/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
//}

fcb_joint KalmanFilter(float theta_k, fcb_joint joint)
{
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	ed2d 8b08 	vpush	{d8-d11}
 8000f84:	b08a      	sub	sp, #40	; 0x28
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	ed87 0a00 	vstr	s0, [r7]
 8000f8e:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8000f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	bug1 = joint.Encoder;
	float X1 = joint.X11;
 8000f96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000f9a:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = joint.X21;
 8000f9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000fa0:	623b      	str	r3, [r7, #32]
	float P11 = joint.p11;
 8000fa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000fa6:	61fb      	str	r3, [r7, #28]
	float P12 = joint.p12;
 8000fa8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000fac:	61bb      	str	r3, [r7, #24]
	float P21 = joint.p21;
 8000fae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000fb2:	617b      	str	r3, [r7, #20]
	float P22 = joint.p22;
 8000fb4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8000fb8:	613b      	str	r3, [r7, #16]
	float Q = joint.Q;
 8000fba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8000fbe:	60fb      	str	r3, [r7, #12]
	float R = joint.R;
 8000fc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8000fc4:	60bb      	str	r3, [r7, #8]
	joint.X11 = X1 + (X2*dt) - ((X1 - theta_k + X2*dt)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8000fc6:	4bef      	ldr	r3, [pc, #956]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 8000fc8:	ed93 7a00 	vldr	s14, [r3]
 8000fcc:	edd7 7a08 	vldr	s15, [r7, #32]
 8000fd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fd4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fdc:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8000fe0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000fe4:	edd7 7a00 	vldr	s15, [r7]
 8000fe8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000fec:	4be5      	ldr	r3, [pc, #916]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 8000fee:	edd3 6a00 	vldr	s13, [r3]
 8000ff2:	edd7 7a08 	vldr	s15, [r7, #32]
 8000ff6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ffe:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001002:	4be0      	ldr	r3, [pc, #896]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001004:	ed93 7a00 	vldr	s14, [r3]
 8001008:	edd7 7a05 	vldr	s15, [r7, #20]
 800100c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001010:	edd7 7a07 	vldr	s15, [r7, #28]
 8001014:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001018:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800101c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001020:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001024:	4bd7      	ldr	r3, [pc, #860]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	2004      	movs	r0, #4
 800102c:	eeb0 0a67 	vmov.f32	s0, s15
 8001030:	f001 ffd4 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001034:	eeb0 7b40 	vmov.f64	d7, d0
 8001038:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800103c:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001040:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001044:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001048:	4bce      	ldr	r3, [pc, #824]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 800104a:	ed93 7a00 	vldr	s14, [r3]
 800104e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001052:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001056:	edd7 7a06 	vldr	s15, [r7, #24]
 800105a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800105e:	4bc9      	ldr	r3, [pc, #804]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001060:	edd3 7a00 	vldr	s15, [r3]
 8001064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001068:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800106c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001070:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001074:	ed97 7a07 	vldr	s14, [r7, #28]
 8001078:	edd7 7a02 	vldr	s15, [r7, #8]
 800107c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001080:	4bc0      	ldr	r3, [pc, #768]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001082:	edd3 6a00 	vldr	s13, [r3]
 8001086:	edd7 7a05 	vldr	s15, [r7, #20]
 800108a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800108e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001092:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001096:	edd7 7a03 	vldr	s15, [r7, #12]
 800109a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800109e:	4bb9      	ldr	r3, [pc, #740]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	2004      	movs	r0, #4
 80010a6:	eeb0 0a67 	vmov.f32	s0, s15
 80010aa:	f001 ff97 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80010ae:	eeb0 7b40 	vmov.f64	d7, d0
 80010b2:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80010b6:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80010ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80010be:	ee3a 6b07 	vadd.f64	d6, d10, d7
 80010c2:	4bb0      	ldr	r3, [pc, #704]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 80010c4:	ed93 7a00 	vldr	s14, [r3]
 80010c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80010cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80010d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d8:	4baa      	ldr	r3, [pc, #680]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 80010da:	edd3 7a00 	vldr	s15, [r3]
 80010de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80010ea:	ee89 7b06 	vdiv.f64	d7, d9, d6
 80010ee:	ee38 7b47 	vsub.f64	d7, d8, d7
 80010f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010f6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	joint.X21 = X2 - (((Q*pow(dt,3))/2 + P22*dt + P21)*(X1 - theta_k + X2*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 80010fa:	edd7 7a08 	vldr	s15, [r7, #32]
 80010fe:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001102:	edd7 7a03 	vldr	s15, [r7, #12]
 8001106:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800110a:	4b9e      	ldr	r3, [pc, #632]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 800110c:	edd3 7a00 	vldr	s15, [r3]
 8001110:	2003      	movs	r0, #3
 8001112:	eeb0 0a67 	vmov.f32	s0, s15
 8001116:	f001 ff61 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800111a:	eeb0 7b40 	vmov.f64	d7, d0
 800111e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001122:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001126:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800112a:	4b96      	ldr	r3, [pc, #600]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 800112c:	ed93 7a00 	vldr	s14, [r3]
 8001130:	edd7 7a04 	vldr	s15, [r7, #16]
 8001134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001138:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800113c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001140:	edd7 7a05 	vldr	s15, [r7, #20]
 8001144:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001148:	ee36 6b07 	vadd.f64	d6, d6, d7
 800114c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001150:	edd7 7a00 	vldr	s15, [r7]
 8001154:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001158:	4b8a      	ldr	r3, [pc, #552]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 800115a:	edd3 5a00 	vldr	s11, [r3]
 800115e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001162:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800116a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800116e:	ee26 9b07 	vmul.f64	d9, d6, d7
 8001172:	ed97 7a07 	vldr	s14, [r7, #28]
 8001176:	edd7 7a02 	vldr	s15, [r7, #8]
 800117a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800117e:	4b81      	ldr	r3, [pc, #516]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001180:	edd3 6a00 	vldr	s13, [r3]
 8001184:	edd7 7a05 	vldr	s15, [r7, #20]
 8001188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001194:	edd7 7a03 	vldr	s15, [r7, #12]
 8001198:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800119c:	4b79      	ldr	r3, [pc, #484]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	2004      	movs	r0, #4
 80011a4:	eeb0 0a67 	vmov.f32	s0, s15
 80011a8:	f001 ff18 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80011ac:	eeb0 7b40 	vmov.f64	d7, d0
 80011b0:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80011b4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80011b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80011bc:	ee3a 6b07 	vadd.f64	d6, d10, d7
 80011c0:	4b70      	ldr	r3, [pc, #448]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 80011c2:	ed93 7a00 	vldr	s14, [r3]
 80011c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80011ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011d6:	4b6b      	ldr	r3, [pc, #428]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011e4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011e8:	ee89 7b06 	vdiv.f64	d7, d9, d6
 80011ec:	ee38 7b47 	vsub.f64	d7, d8, d7
 80011f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011f4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	joint.p11 = -((P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)) - 1)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 80011f8:	4b62      	ldr	r3, [pc, #392]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 80011fa:	ed93 7a00 	vldr	s14, [r3]
 80011fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8001202:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001206:	edd7 7a07 	vldr	s15, [r7, #28]
 800120a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120e:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001212:	edd7 7a03 	vldr	s15, [r7, #12]
 8001216:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800121a:	4b5a      	ldr	r3, [pc, #360]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 800121c:	edd3 7a00 	vldr	s15, [r3]
 8001220:	2004      	movs	r0, #4
 8001222:	eeb0 0a67 	vmov.f32	s0, s15
 8001226:	f001 fed9 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800122a:	eeb0 7b40 	vmov.f64	d7, d0
 800122e:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001232:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001236:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800123a:	ee38 6b07 	vadd.f64	d6, d8, d7
 800123e:	4b51      	ldr	r3, [pc, #324]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001240:	ed93 7a00 	vldr	s14, [r3]
 8001244:	edd7 7a04 	vldr	s15, [r7, #16]
 8001248:	ee27 7a27 	vmul.f32	s14, s14, s15
 800124c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001250:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001254:	4b4b      	ldr	r3, [pc, #300]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800125e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001262:	ee36 8b07 	vadd.f64	d8, d6, d7
 8001266:	ed97 7a07 	vldr	s14, [r7, #28]
 800126a:	edd7 7a02 	vldr	s15, [r7, #8]
 800126e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001272:	4b44      	ldr	r3, [pc, #272]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001274:	edd3 6a00 	vldr	s13, [r3]
 8001278:	edd7 7a05 	vldr	s15, [r7, #20]
 800127c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001284:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001288:	edd7 7a03 	vldr	s15, [r7, #12]
 800128c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001290:	4b3c      	ldr	r3, [pc, #240]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	2004      	movs	r0, #4
 8001298:	eeb0 0a67 	vmov.f32	s0, s15
 800129c:	f001 fe9e 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012a0:	eeb0 7b40 	vmov.f64	d7, d0
 80012a4:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80012a8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80012ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012b0:	ee39 6b07 	vadd.f64	d6, d9, d7
 80012b4:	4b33      	ldr	r3, [pc, #204]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 80012b6:	ed93 7a00 	vldr	s14, [r3]
 80012ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80012be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80012c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012ca:	4b2e      	ldr	r3, [pc, #184]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80012dc:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80012e0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80012e4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80012e8:	eeb1 8b47 	vneg.f64	d8, d7
 80012ec:	4b25      	ldr	r3, [pc, #148]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 80012ee:	ed93 7a00 	vldr	s14, [r3]
 80012f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80012f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80012fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001302:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001306:	edd7 7a03 	vldr	s15, [r7, #12]
 800130a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001310:	edd3 7a00 	vldr	s15, [r3]
 8001314:	2004      	movs	r0, #4
 8001316:	eeb0 0a67 	vmov.f32	s0, s15
 800131a:	f001 fe5f 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800131e:	eeb0 7b40 	vmov.f64	d7, d0
 8001322:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001326:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800132a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800132e:	ee39 6b07 	vadd.f64	d6, d9, d7
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001334:	ed93 7a00 	vldr	s14, [r3]
 8001338:	edd7 7a04 	vldr	s15, [r7, #16]
 800133c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001340:	edd7 7a06 	vldr	s15, [r7, #24]
 8001344:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 800134a:	edd3 7a00 	vldr	s15, [r3]
 800134e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001352:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001356:	ee36 7b07 	vadd.f64	d7, d6, d7
 800135a:	ee28 7b07 	vmul.f64	d7, d8, d7
 800135e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001362:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	joint.p12 = -((P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)) - 1)*((Q*pow(dt,3))/2 + P22*dt + P12);
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001368:	ed93 7a00 	vldr	s14, [r3]
 800136c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001370:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001374:	edd7 7a07 	vldr	s15, [r7, #28]
 8001378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137c:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001380:	e002      	b.n	8001388 <_Z12KalmanFilterf11robot_joint+0x40c>
 8001382:	bf00      	nop
 8001384:	24000a90 	.word	0x24000a90
 8001388:	edd7 7a03 	vldr	s15, [r7, #12]
 800138c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001390:	4bef      	ldr	r3, [pc, #956]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001392:	edd3 7a00 	vldr	s15, [r3]
 8001396:	2004      	movs	r0, #4
 8001398:	eeb0 0a67 	vmov.f32	s0, s15
 800139c:	f001 fe1e 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80013a0:	eeb0 7b40 	vmov.f64	d7, d0
 80013a4:	ee29 6b07 	vmul.f64	d6, d9, d7
 80013a8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80013ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80013b0:	ee38 6b07 	vadd.f64	d6, d8, d7
 80013b4:	4be6      	ldr	r3, [pc, #920]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80013b6:	ed93 7a00 	vldr	s14, [r3]
 80013ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80013be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80013c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ca:	4be1      	ldr	r3, [pc, #900]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80013cc:	edd3 7a00 	vldr	s15, [r3]
 80013d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013d4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80013d8:	ee36 8b07 	vadd.f64	d8, d6, d7
 80013dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80013e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80013e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013e8:	4bd9      	ldr	r3, [pc, #868]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80013ea:	edd3 6a00 	vldr	s13, [r3]
 80013ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80013f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fa:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80013fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001402:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001406:	4bd2      	ldr	r3, [pc, #840]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001408:	edd3 7a00 	vldr	s15, [r3]
 800140c:	2004      	movs	r0, #4
 800140e:	eeb0 0a67 	vmov.f32	s0, s15
 8001412:	f001 fde3 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001416:	eeb0 7b40 	vmov.f64	d7, d0
 800141a:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800141e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001422:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001426:	ee39 6b07 	vadd.f64	d6, d9, d7
 800142a:	4bc9      	ldr	r3, [pc, #804]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800142c:	ed93 7a00 	vldr	s14, [r3]
 8001430:	edd7 7a04 	vldr	s15, [r7, #16]
 8001434:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001438:	edd7 7a06 	vldr	s15, [r7, #24]
 800143c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001440:	4bc3      	ldr	r3, [pc, #780]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001442:	edd3 7a00 	vldr	s15, [r3]
 8001446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800144a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800144e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001452:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001456:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800145a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800145e:	eeb1 8b47 	vneg.f64	d8, d7
 8001462:	edd7 7a03 	vldr	s15, [r7, #12]
 8001466:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800146a:	4bb9      	ldr	r3, [pc, #740]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800146c:	edd3 7a00 	vldr	s15, [r3]
 8001470:	2003      	movs	r0, #3
 8001472:	eeb0 0a67 	vmov.f32	s0, s15
 8001476:	f001 fdb1 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800147a:	eeb0 7b40 	vmov.f64	d7, d0
 800147e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001482:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001486:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800148a:	4bb1      	ldr	r3, [pc, #708]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800148c:	ed93 7a00 	vldr	s14, [r3]
 8001490:	edd7 7a04 	vldr	s15, [r7, #16]
 8001494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001498:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800149c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80014a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80014a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80014a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80014ac:	ee28 7b07 	vmul.f64	d7, d8, d7
 80014b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80014b4:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	joint.p21 = P21 + P22*dt + (Q*pow(dt,3))/2 - (((Q*pow(dt,3))/2 + P22*dt + P21)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 80014b8:	4ba5      	ldr	r3, [pc, #660]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80014ba:	ed93 7a00 	vldr	s14, [r3]
 80014be:	edd7 7a04 	vldr	s15, [r7, #16]
 80014c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80014ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ce:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80014d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d6:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80014da:	4b9d      	ldr	r3, [pc, #628]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	2003      	movs	r0, #3
 80014e2:	eeb0 0a67 	vmov.f32	s0, s15
 80014e6:	f001 fd79 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80014ea:	eeb0 7b40 	vmov.f64	d7, d0
 80014ee:	ee29 6b07 	vmul.f64	d6, d9, d7
 80014f2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80014f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80014fa:	ee38 8b07 	vadd.f64	d8, d8, d7
 80014fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001502:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001506:	4b92      	ldr	r3, [pc, #584]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001508:	edd3 7a00 	vldr	s15, [r3]
 800150c:	2003      	movs	r0, #3
 800150e:	eeb0 0a67 	vmov.f32	s0, s15
 8001512:	f001 fd63 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001516:	eeb0 7b40 	vmov.f64	d7, d0
 800151a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800151e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001522:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001526:	4b8a      	ldr	r3, [pc, #552]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001528:	ed93 7a00 	vldr	s14, [r3]
 800152c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001534:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001538:	ee36 6b07 	vadd.f64	d6, d6, d7
 800153c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001540:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001544:	ee36 9b07 	vadd.f64	d9, d6, d7
 8001548:	4b81      	ldr	r3, [pc, #516]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800154a:	ed93 7a00 	vldr	s14, [r3]
 800154e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001552:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001556:	edd7 7a07 	vldr	s15, [r7, #28]
 800155a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001562:	edd7 7a03 	vldr	s15, [r7, #12]
 8001566:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800156a:	4b79      	ldr	r3, [pc, #484]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800156c:	edd3 7a00 	vldr	s15, [r3]
 8001570:	2004      	movs	r0, #4
 8001572:	eeb0 0a67 	vmov.f32	s0, s15
 8001576:	f001 fd31 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800157a:	eeb0 7b40 	vmov.f64	d7, d0
 800157e:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001582:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001586:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800158a:	ee3a 6b07 	vadd.f64	d6, d10, d7
 800158e:	4b70      	ldr	r3, [pc, #448]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001590:	ed93 7a00 	vldr	s14, [r3]
 8001594:	edd7 7a04 	vldr	s15, [r7, #16]
 8001598:	ee27 7a27 	vmul.f32	s14, s14, s15
 800159c:	edd7 7a06 	vldr	s15, [r7, #24]
 80015a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015a4:	4b6a      	ldr	r3, [pc, #424]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015b6:	ee29 9b07 	vmul.f64	d9, d9, d7
 80015ba:	ed97 7a07 	vldr	s14, [r7, #28]
 80015be:	edd7 7a02 	vldr	s15, [r7, #8]
 80015c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015c6:	4b62      	ldr	r3, [pc, #392]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80015c8:	edd3 6a00 	vldr	s13, [r3]
 80015cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80015d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d8:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80015dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e0:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80015e4:	4b5a      	ldr	r3, [pc, #360]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	2004      	movs	r0, #4
 80015ec:	eeb0 0a67 	vmov.f32	s0, s15
 80015f0:	f001 fcf4 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80015f4:	eeb0 7b40 	vmov.f64	d7, d0
 80015f8:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80015fc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001600:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001604:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001608:	4b51      	ldr	r3, [pc, #324]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800160a:	ed93 7a00 	vldr	s14, [r3]
 800160e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001612:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001616:	edd7 7a06 	vldr	s15, [r7, #24]
 800161a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800161e:	4b4c      	ldr	r3, [pc, #304]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001620:	edd3 7a00 	vldr	s15, [r3]
 8001624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001628:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800162c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001630:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001634:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001638:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800163c:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	joint.p22 = P22 + Q*pow(dt,2) - (((Q*pow(dt,3))/2 + P22*dt + P12)*((Q*pow(dt,3))/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001640:	edd7 7a04 	vldr	s15, [r7, #16]
 8001644:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001648:	edd7 7a03 	vldr	s15, [r7, #12]
 800164c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001650:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	2002      	movs	r0, #2
 8001658:	eeb0 0a67 	vmov.f32	s0, s15
 800165c:	f001 fcbe 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001660:	eeb0 7b40 	vmov.f64	d7, d0
 8001664:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001668:	ee38 8b07 	vadd.f64	d8, d8, d7
 800166c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001670:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001674:	4b36      	ldr	r3, [pc, #216]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	2003      	movs	r0, #3
 800167c:	eeb0 0a67 	vmov.f32	s0, s15
 8001680:	f001 fcac 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001684:	eeb0 7b40 	vmov.f64	d7, d0
 8001688:	ee29 7b07 	vmul.f64	d7, d9, d7
 800168c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001690:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001694:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001696:	ed93 7a00 	vldr	s14, [r3]
 800169a:	edd7 7a04 	vldr	s15, [r7, #16]
 800169e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ae:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016b2:	ee36 9b07 	vadd.f64	d9, d6, d7
 80016b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ba:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80016be:	4b24      	ldr	r3, [pc, #144]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80016c0:	edd3 7a00 	vldr	s15, [r3]
 80016c4:	2003      	movs	r0, #3
 80016c6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ca:	f001 fc87 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80016ce:	eeb0 7b40 	vmov.f64	d7, d0
 80016d2:	ee2a 7b07 	vmul.f64	d7, d10, d7
 80016d6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80016da:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80016e0:	ed93 7a00 	vldr	s14, [r3]
 80016e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80016e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80016f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80016f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80016fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001700:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001704:	ed97 7a07 	vldr	s14, [r7, #28]
 8001708:	edd7 7a02 	vldr	s15, [r7, #8]
 800170c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001710:	4b0f      	ldr	r3, [pc, #60]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001712:	edd3 6a00 	vldr	s13, [r3]
 8001716:	edd7 7a05 	vldr	s15, [r7, #20]
 800171a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800171e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001722:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001726:	edd7 7a03 	vldr	s15, [r7, #12]
 800172a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 800172e:	4b08      	ldr	r3, [pc, #32]	; (8001750 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001730:	edd3 7a00 	vldr	s15, [r3]
 8001734:	2004      	movs	r0, #4
 8001736:	eeb0 0a67 	vmov.f32	s0, s15
 800173a:	f001 fc4f 	bl	8002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800173e:	eeb0 7b40 	vmov.f64	d7, d0
 8001742:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001746:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800174a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800174e:	e001      	b.n	8001754 <_Z12KalmanFilterf11robot_joint+0x7d8>
 8001750:	24000a90 	.word	0x24000a90
 8001754:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001758:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <_Z12KalmanFilterf11robot_joint+0x838>)
 800175a:	ed93 7a00 	vldr	s14, [r3]
 800175e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001762:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001766:	edd7 7a06 	vldr	s15, [r7, #24]
 800176a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <_Z12KalmanFilterf11robot_joint+0x838>)
 8001770:	edd3 7a00 	vldr	s15, [r3]
 8001774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001778:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800177c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001780:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001784:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001788:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800178c:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
	return  joint;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4618      	mov	r0, r3
 8001794:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001798:	2284      	movs	r2, #132	; 0x84
 800179a:	4619      	mov	r1, r3
 800179c:	f00b fcd6 	bl	800d14c <memcpy>
//	 X21 = X2 - (((Q*dt3)/2 + P22*dt + P21)*(X1 - theta_k + X2*dt))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
//	 p11 = -((P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt)) - 1)*(P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
//	 p12 = -((P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt)) - 1)*((Q*dt3)/2 + P22*dt + P12);
//   p21 = P21 + P22*dt + (Q*dt3)/2 - (((Q*dt3)/2 + P22*dt + P21)*(P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
//	 p22 = P22 + Q*dt2 - (((Q*dt3)/2 + P22*dt + P12)*((Q*dt3)/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
}
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	ecbd 8b08 	vpop	{d8-d11}
 80017aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017ae:	b004      	add	sp, #16
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	24000a90 	.word	0x24000a90

080017b8 <HAL_TIM_PeriodElapsedCallback>:

    return buff;
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ba:	ed2d 8b02 	vpush	{d8}
 80017be:	b0c9      	sub	sp, #292	; 0x124
 80017c0:	af1e      	add	r7, sp, #120	; 0x78
 80017c2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	if (htim == &htim5){	//
	}
	if (htim == &htim12){	//

	}
	if (htim == &htim7) { 	//
 80017c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80017ca:	4a71      	ldr	r2, [pc, #452]	; (8001990 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	f040 825a 	bne.w	8001c86 <HAL_TIM_PeriodElapsedCallback+0x4ce>

		encoderJ1.AMT21_Read();
 80017d2:	4870      	ldr	r0, [pc, #448]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80017d4:	f7fe ff77 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80017d8:	486e      	ldr	r0, [pc, #440]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80017da:	f7fe ffa3 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	4b6d      	ldr	r3, [pc, #436]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80017e4:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80017e6:	4b6c      	ldr	r3, [pc, #432]	; (8001998 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d106      	bne.n	80017fc <HAL_TIM_PeriodElapsedCallback+0x44>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 80017ee:	4869      	ldr	r0, [pc, #420]	; (8001994 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80017f0:	f7fe fffc 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b68      	ldr	r3, [pc, #416]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80017fa:	801a      	strh	r2, [r3, #0]
//			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
//		}



	    float t_2 = t*t;
 80017fc:	4b68      	ldr	r3, [pc, #416]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80017fe:	ed93 7a00 	vldr	s14, [r3]
 8001802:	4b67      	ldr	r3, [pc, #412]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800180c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	    float t_3 = t*t*t;
 8001810:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001812:	ed93 7a00 	vldr	s14, [r3]
 8001816:	4b62      	ldr	r3, [pc, #392]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001818:	edd3 7a00 	vldr	s15, [r3]
 800181c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001820:	4b5f      	ldr	r3, [pc, #380]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800182a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

	    fcb_joint3.Goal_Position =  C0_q1 + (C2_q1*t_2) - (C3_q1*t_3);
 800182e:	4b5d      	ldr	r3, [pc, #372]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001830:	ed93 7a00 	vldr	s14, [r3]
 8001834:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001838:	ee27 7a27 	vmul.f32	s14, s14, s15
 800183c:	4b5a      	ldr	r3, [pc, #360]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001846:	4b59      	ldr	r3, [pc, #356]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001848:	edd3 6a00 	vldr	s13, [r3]
 800184c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8001850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001858:	4b55      	ldr	r3, [pc, #340]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800185a:	edc3 7a01 	vstr	s15, [r3, #4]

//	    kalman_pos = fcb_joint1.Goal_Position;
	    kalman_pos = (fcb_joint1.Old_p - fcb_joint1.Encoder);
 800185e:	4b4f      	ldr	r3, [pc, #316]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001860:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001864:	4b4d      	ldr	r3, [pc, #308]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	b21b      	sxth	r3, r3
 800186a:	ee07 3a90 	vmov	s15, r3
 800186e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001876:	4b4f      	ldr	r3, [pc, #316]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001878:	edc3 7a00 	vstr	s15, [r3]

	    kalman_velo_input =  kalman_pos ;
 800187c:	4b4d      	ldr	r3, [pc, #308]	; (80019b4 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a4d      	ldr	r2, [pc, #308]	; (80019b8 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001882:	6013      	str	r3, [r2, #0]

	    if (direction_traj == 1){
 8001884:	4b4d      	ldr	r3, [pc, #308]	; (80019bc <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b01      	cmp	r3, #1
 800188a:	bf0c      	ite	eq
 800188c:	2301      	moveq	r3, #1
 800188e:	2300      	movne	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 8096 	beq.w	80019c4 <HAL_TIM_PeriodElapsedCallback+0x20c>
	    	fcb_joint1.Goal_Position = unwrap_pose + (C0_q1 + (C2_q1*t_2) - (C3_q1*t_3)) - 0.8 ;
 8001898:	4b42      	ldr	r3, [pc, #264]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800189a:	ed93 7a00 	vldr	s14, [r3]
 800189e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80018a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018a6:	4b40      	ldr	r3, [pc, #256]	; (80019a8 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80018a8:	edd3 7a00 	vldr	s15, [r3]
 80018ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018b0:	4b3e      	ldr	r3, [pc, #248]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 80018b2:	edd3 6a00 	vldr	s13, [r3]
 80018b6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80018ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018c2:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80018c4:	edd3 7a00 	vldr	s15, [r3]
 80018c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018d0:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 8001988 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 80018d4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80018d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018dc:	4b2f      	ldr	r3, [pc, #188]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80018de:	edc3 7a01 	vstr	s15, [r3, #4]
	    	fcb_joint1.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * -2 ;
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80018e4:	edd3 7a00 	vldr	s15, [r3]
 80018e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018ec:	ee37 6b07 	vadd.f64	d6, d7, d7
 80018f0:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80018f2:	edd3 7a00 	vldr	s15, [r3]
 80018f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80018fa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80018fe:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001900:	edd3 7a00 	vldr	s15, [r3]
 8001904:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001908:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800190c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001910:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001914:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001918:	ee25 7b07 	vmul.f64	d7, d5, d7
 800191c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001920:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001924:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001928:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800192e:	edc3 7a02 	vstr	s15, [r3, #8]
	    	fcb_joint3.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * -2 ;
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001934:	edd3 7a00 	vldr	s15, [r3]
 8001938:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800193c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001942:	edd3 7a00 	vldr	s15, [r3]
 8001946:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800194a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001958:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800195c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001960:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001964:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001968:	ee25 7b07 	vmul.f64	d7, d5, d7
 800196c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001970:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8001974:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001978:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800197e:	edc3 7a02 	vstr	s15, [r3, #8]
 8001982:	e090      	b.n	8001aa6 <HAL_TIM_PeriodElapsedCallback+0x2ee>
 8001984:	f3af 8000 	nop.w
 8001988:	9999999a 	.word	0x9999999a
 800198c:	3fe99999 	.word	0x3fe99999
 8001990:	24000484 	.word	0x24000484
 8001994:	24000a08 	.word	0x24000a08
 8001998:	24000a6c 	.word	0x24000a6c
 800199c:	24000aa8 	.word	0x24000aa8
 80019a0:	24000a78 	.word	0x24000a78
 80019a4:	24000a7c 	.word	0x24000a7c
 80019a8:	24000004 	.word	0x24000004
 80019ac:	24000a80 	.word	0x24000a80
 80019b0:	24000bb0 	.word	0x24000bb0
 80019b4:	24000a8c 	.word	0x24000a8c
 80019b8:	24000aa0 	.word	0x24000aa0
 80019bc:	24000a70 	.word	0x24000a70
 80019c0:	24000aa4 	.word	0x24000aa4
	    }
	    else
	    {
	    	fcb_joint1.Goal_Position = unwrap_pose - (C0_q1 + (C2_q1*t_2) - (C3_q1*t_3)) + 0.8;
 80019c4:	4bb8      	ldr	r3, [pc, #736]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80019c6:	ed93 7a00 	vldr	s14, [r3]
 80019ca:	4bb8      	ldr	r3, [pc, #736]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 80019cc:	edd3 6a00 	vldr	s13, [r3]
 80019d0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80019d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80019d8:	4bb5      	ldr	r3, [pc, #724]	; (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80019e2:	4bb4      	ldr	r3, [pc, #720]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80019e4:	ed93 6a00 	vldr	s12, [r3]
 80019e8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80019ec:	ee66 7a27 	vmul.f32	s15, s12, s15
 80019f0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019fc:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 8001c98 <HAL_TIM_PeriodElapsedCallback+0x4e0>
 8001a00:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001a04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a08:	4bab      	ldr	r3, [pc, #684]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001a0a:	edc3 7a01 	vstr	s15, [r3, #4]
	    	fcb_joint1.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * 2 ;
 8001a0e:	4ba7      	ldr	r3, [pc, #668]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a18:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001a1c:	4ba7      	ldr	r3, [pc, #668]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001a1e:	edd3 7a00 	vldr	s15, [r3]
 8001a22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a26:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a2a:	4ba2      	ldr	r3, [pc, #648]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a34:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001a38:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001a3c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001a40:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001a48:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a4c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a54:	4b98      	ldr	r3, [pc, #608]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001a56:	edc3 7a02 	vstr	s15, [r3, #8]
	    	fcb_joint3.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * 2 ;
 8001a5a:	4b94      	ldr	r3, [pc, #592]	; (8001cac <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a64:	ee37 6b07 	vadd.f64	d6, d7, d7
 8001a68:	4b94      	ldr	r3, [pc, #592]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001a6a:	edd3 7a00 	vldr	s15, [r3]
 8001a6e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a72:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001a76:	4b8f      	ldr	r3, [pc, #572]	; (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a80:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8001a84:	ee27 5b05 	vmul.f64	d5, d7, d5
 8001a88:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8001a8c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a90:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001a94:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001a98:	ee37 7b07 	vadd.f64	d7, d7, d7
 8001a9c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001aa0:	4b87      	ldr	r3, [pc, #540]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001aa2:	edc3 7a02 	vstr	s15, [r3, #8]


//		fcb_joint1.Goal_Velocity = sin(0.314 * 2 * t) * 2000;
//		fcb_joint3.Goal_Velocity = sin(0.314 * 2 * t) * 4000;

	    chess_board_ang = chessboard_angular_velocity * t;
 8001aa6:	4b87      	ldr	r3, [pc, #540]	; (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x50c>)
 8001aa8:	ed93 7a00 	vldr	s14, [r3]
 8001aac:	4b83      	ldr	r3, [pc, #524]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001aae:	edd3 7a00 	vldr	s15, [r3]
 8001ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab6:	4b84      	ldr	r3, [pc, #528]	; (8001cc8 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8001ab8:	edc3 7a00 	vstr	s15, [r3]

//		setpointJ1 = Goal_velocity_q1;
//		setpointJ3 = Goal_velocity_q3;


		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 8001abc:	4b7e      	ldr	r3, [pc, #504]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001abe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ac2:	4b7d      	ldr	r3, [pc, #500]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001ac4:	881b      	ldrh	r3, [r3, #0]
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	ee07 3a90 	vmov	s15, r3
 8001acc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad4:	4b78      	ldr	r3, [pc, #480]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001ad6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 8001ada:	4b79      	ldr	r3, [pc, #484]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001adc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ae0:	4b77      	ldr	r3, [pc, #476]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	b21b      	sxth	r3, r3
 8001ae6:	ee07 3a90 	vmov	s15, r3
 8001aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af2:	4b73      	ldr	r3, [pc, #460]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001af4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8001af8:	4b6f      	ldr	r3, [pc, #444]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001afa:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001afe:	4b6e      	ldr	r3, [pc, #440]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001b00:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b08:	4b6b      	ldr	r3, [pc, #428]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001b0a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 8001b0e:	4b6c      	ldr	r3, [pc, #432]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001b10:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001b14:	4b6a      	ldr	r3, [pc, #424]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001b16:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1e:	4b68      	ldr	r3, [pc, #416]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001b20:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

		fcb_joint1.Kp_p = 0.0 ;
 8001b24:	4b64      	ldr	r3, [pc, #400]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001b26:	f04f 0200 	mov.w	r2, #0
 8001b2a:	61da      	str	r2, [r3, #28]
		fcb_joint1.Ki_p = 0.0 ;
 8001b2c:	4b62      	ldr	r3, [pc, #392]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	621a      	str	r2, [r3, #32]
		fcb_joint1.Kd_p = 0.0 ;
 8001b34:	4b60      	ldr	r3, [pc, #384]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint1.Kp_v = 0.0 ;
 8001b3c:	4b5e      	ldr	r3, [pc, #376]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint1.Ki_v = 0.0 ;
 8001b44:	4b5c      	ldr	r3, [pc, #368]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint1.Kd_v = 0.0 ;
 8001b4c:	4b5a      	ldr	r3, [pc, #360]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001b4e:	f04f 0200 	mov.w	r2, #0
 8001b52:	631a      	str	r2, [r3, #48]	; 0x30

		fcb_joint3.Kp_p = 0.0 ;
 8001b54:	4b5a      	ldr	r3, [pc, #360]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	61da      	str	r2, [r3, #28]
		fcb_joint3.Ki_p = 0.0 ;
 8001b5c:	4b58      	ldr	r3, [pc, #352]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
		fcb_joint3.Kd_p = 0.0 ;
 8001b64:	4b56      	ldr	r3, [pc, #344]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001b66:	f04f 0200 	mov.w	r2, #0
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint3.Kp_v = 0.0 ;
 8001b6c:	4b54      	ldr	r3, [pc, #336]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint3.Ki_v = 0.0 ;
 8001b74:	4b52      	ldr	r3, [pc, #328]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001b76:	f04f 0200 	mov.w	r2, #0
 8001b7a:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint3.Kd_v = 0.0 ;
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	631a      	str	r2, [r3, #48]	; 0x30

//		KalmanFilter(float theta_k,float kalman_pos,float kalman_velo,float P11,float P12,float P21,float P22);
//		KalmanFilter(fcb_joint1.Encoder/ 2609.0 , X11, X21, p11, p12, p21, p22, fcb_joint1);
		fcb_joint1 = KalmanFilter(fcb_joint1.Encoder/ 2609.0 ,fcb_joint1);
 8001b84:	4b4c      	ldr	r3, [pc, #304]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	b21b      	sxth	r3, r3
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b92:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8001ca0 <HAL_TIM_PeriodElapsedCallback+0x4e8>
 8001b96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b9a:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 8001b9e:	4e46      	ldr	r6, [pc, #280]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001ba0:	463d      	mov	r5, r7
 8001ba2:	4c45      	ldr	r4, [pc, #276]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001ba4:	4668      	mov	r0, sp
 8001ba6:	f104 030c 	add.w	r3, r4, #12
 8001baa:	2278      	movs	r2, #120	; 0x78
 8001bac:	4619      	mov	r1, r3
 8001bae:	f00b facd 	bl	800d14c <memcpy>
 8001bb2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001bb6:	eeb0 0a48 	vmov.f32	s0, s16
 8001bba:	4628      	mov	r0, r5
 8001bbc:	f7ff f9de 	bl	8000f7c <_Z12KalmanFilterf11robot_joint>
 8001bc0:	4630      	mov	r0, r6
 8001bc2:	463b      	mov	r3, r7
 8001bc4:	2284      	movs	r2, #132	; 0x84
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f00b fac0 	bl	800d14c <memcpy>
//											  (fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_Error_p));
//
//		fcb_joint1.Output_Stepper_Frequency = (fcb_joint1.Kp_p * fcb_joint1.Error_p);
//		fcb_joint3.Output_Stepper_Frequency = (fcb_joint3.Kp_p * fcb_joint3.Error_p);

		fcb_joint1.Output_Stepper_Frequency = fcb_joint1.Goal_Position;
 8001bcc:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	4a39      	ldr	r2, [pc, #228]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001bd2:	6553      	str	r3, [r2, #84]	; 0x54
		fcb_joint3.Output_Stepper_Frequency = fcb_joint3.Goal_Position;
 8001bd4:	4b3a      	ldr	r3, [pc, #232]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4a39      	ldr	r2, [pc, #228]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001bda:	6553      	str	r3, [r2, #84]	; 0x54



		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be0:	4a35      	ldr	r2, [pc, #212]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001be2:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 8001be4:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be8:	4a35      	ldr	r2, [pc, #212]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001bea:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint1.Old_p = fcb_joint1.Encoder;
 8001bec:	4b32      	ldr	r3, [pc, #200]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001bee:	881b      	ldrh	r3, [r3, #0]
 8001bf0:	b21b      	sxth	r3, r3
 8001bf2:	ee07 3a90 	vmov	s15, r3
 8001bf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001bfc:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001c10:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
//		stepperJ1.StepperSetFrequency(300.0f);

//		stepperJ1.StepperSetFrequency(uJ1);
//		stepperJ3.StepperSetFrequency(0.0f);

		stepperJ1.StepperOpenLoopSpeed(fcb_joint1.Goal_Velocity);
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001c16:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c1e:	482b      	ldr	r0, [pc, #172]	; (8001ccc <HAL_TIM_PeriodElapsedCallback+0x514>)
 8001c20:	f7ff f93a 	bl	8000e98 <_ZN7Stepper20StepperOpenLoopSpeedEf>
		stepperJ3.StepperOpenLoopSpeed(fcb_joint3.Goal_Velocity);
 8001c24:	4b26      	ldr	r3, [pc, #152]	; (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8001c26:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2e:	4828      	ldr	r0, [pc, #160]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x518>)
 8001c30:	f7ff f932 	bl	8000e98 <_ZN7Stepper20StepperOpenLoopSpeedEf>

		#endif

		t = t + (sample_time_1000) ;
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001c36:	ed93 7a00 	vldr	s14, [r3]
 8001c3a:	4b26      	ldr	r3, [pc, #152]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x51c>)
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001c46:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Time)
 8001c4a:	4b1c      	ldr	r3, [pc, #112]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001c4c:	ed93 7a00 	vldr	s14, [r3]
 8001c50:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x520>)
 8001c52:	edd3 7a00 	vldr	s15, [r3]
 8001c56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5e:	bfac      	ite	ge
 8001c60:	2301      	movge	r3, #1
 8001c62:	2300      	movlt	r3, #0
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d00d      	beq.n	8001c86 <HAL_TIM_PeriodElapsedCallback+0x4ce>
		{
			t = 0.0;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_TIM_PeriodElapsedCallback+0x504>)
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
			direction_traj ^= 1;
 8001c72:	4b1a      	ldr	r3, [pc, #104]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x524>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f083 0301 	eor.w	r3, r3, #1
 8001c7a:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x524>)
 8001c7c:	6013      	str	r3, [r2, #0]
			unwrap_pose =  fcb_joint1.Goal_Position;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	4a09      	ldr	r2, [pc, #36]	; (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 8001c84:	6013      	str	r3, [r2, #0]
		}

	}
}
 8001c86:	bf00      	nop
 8001c88:	37ac      	adds	r7, #172	; 0xac
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	ecbd 8b02 	vpop	{d8}
 8001c90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c92:	bf00      	nop
 8001c94:	f3af 8000 	nop.w
 8001c98:	9999999a 	.word	0x9999999a
 8001c9c:	3fe99999 	.word	0x3fe99999
 8001ca0:	00000000 	.word	0x00000000
 8001ca4:	40a46200 	.word	0x40a46200
 8001ca8:	24000aa4 	.word	0x24000aa4
 8001cac:	24000a7c 	.word	0x24000a7c
 8001cb0:	24000004 	.word	0x24000004
 8001cb4:	24000a80 	.word	0x24000a80
 8001cb8:	24000aa8 	.word	0x24000aa8
 8001cbc:	24000a78 	.word	0x24000a78
 8001cc0:	24000bb0 	.word	0x24000bb0
 8001cc4:	24000010 	.word	0x24000010
 8001cc8:	24000a74 	.word	0x24000a74
 8001ccc:	24000a1c 	.word	0x24000a1c
 8001cd0:	24000a44 	.word	0x24000a44
 8001cd4:	2400000c 	.word	0x2400000c
 8001cd8:	24000000 	.word	0x24000000
 8001cdc:	24000a70 	.word	0x24000a70

08001ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ce4:	f002 f9fa 	bl	80040dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ce8:	f000 f8f4 	bl	8001ed4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cec:	f001 f81a 	bl	8002d24 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001cf0:	f000 ffd8 	bl	8002ca4 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8001cf4:	f000 ff76 	bl	8002be4 <_ZL19MX_USART3_UART_Initv>
  MX_TIM2_Init();
 8001cf8:	f000 fac4 	bl	8002284 <_ZL12MX_TIM2_Initv>
  MX_UART4_Init();
 8001cfc:	f000 fea8 	bl	8002a50 <_ZL13MX_UART4_Initv>
  MX_TIM4_Init();
 8001d00:	f000 fbe0 	bl	80024c4 <_ZL12MX_TIM4_Initv>
  MX_SPI3_Init();
 8001d04:	f000 f998 	bl	8002038 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 8001d08:	f000 f9f0 	bl	80020ec <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8001d0c:	f000 fb4a 	bl	80023a4 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8001d10:	f000 fc6a 	bl	80025e8 <_ZL12MX_TIM5_Initv>
  MX_TIM15_Init();
 8001d14:	f000 fdda 	bl	80028cc <_ZL13MX_TIM15_Initv>
  MX_CRC_Init();
 8001d18:	f000 f966 	bl	8001fe8 <_ZL11MX_CRC_Initv>
  MX_UART7_Init();
 8001d1c:	f000 ff00 	bl	8002b20 <_ZL13MX_UART7_Initv>
  MX_TIM6_Init();
 8001d20:	f000 fcc0 	bl	80026a4 <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 8001d24:	f000 fcfe 	bl	8002724 <_ZL12MX_TIM7_Initv>
  MX_TIM12_Init();
 8001d28:	f000 fd3c 	bl	80027a4 <_ZL13MX_TIM12_Initv>
  MX_TIM13_Init();
 8001d2c:	f000 fd7e 	bl	800282c <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 8001d30:	f000 fda4 	bl	800287c <_ZL13MX_TIM14_Initv>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001d34:	2201      	movs	r2, #1
 8001d36:	2101      	movs	r1, #1
 8001d38:	4857      	ldr	r0, [pc, #348]	; (8001e98 <main+0x1b8>)
 8001d3a:	f005 f847 	bl	8006dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001d3e:	2201      	movs	r2, #1
 8001d40:	2102      	movs	r1, #2
 8001d42:	4856      	ldr	r0, [pc, #344]	; (8001e9c <main+0x1bc>)
 8001d44:	f005 f842 	bl	8006dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d4e:	4852      	ldr	r0, [pc, #328]	; (8001e98 <main+0x1b8>)
 8001d50:	f005 f83c 	bl	8006dcc <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 8001d54:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8001ea0 <main+0x1c0>
 8001d58:	4852      	ldr	r0, [pc, #328]	; (8001ea4 <main+0x1c4>)
 8001d5a:	f7fe fde9 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(16);
 8001d5e:	2110      	movs	r1, #16
 8001d60:	4850      	ldr	r0, [pc, #320]	; (8001ea4 <main+0x1c4>)
 8001d62:	f7ff f881 	bl	8000e68 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(3);
 8001d66:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001d6a:	484e      	ldr	r0, [pc, #312]	; (8001ea4 <main+0x1c4>)
 8001d6c:	f7ff f858 	bl	8000e20 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 8001d70:	484c      	ldr	r0, [pc, #304]	; (8001ea4 <main+0x1c4>)
 8001d72:	f7fe fdcc 	bl	800090e <_ZN7Stepper13StepperEnableEv>
//	stepperJ2.StepperSetMicrostep(1);
//	stepperJ2.StepperSetRatio(1);
//	stepperJ1.StepperSetFrequency(15842.0f);
	stepperJ3.StepperSetFrequency(0.0f);
 8001d76:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8001ea0 <main+0x1c0>
 8001d7a:	484b      	ldr	r0, [pc, #300]	; (8001ea8 <main+0x1c8>)
 8001d7c:	f7fe fdd8 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(8);
 8001d80:	2108      	movs	r1, #8
 8001d82:	4849      	ldr	r0, [pc, #292]	; (8001ea8 <main+0x1c8>)
 8001d84:	f7ff f870 	bl	8000e68 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 8001d88:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 8001d8c:	4846      	ldr	r0, [pc, #280]	; (8001ea8 <main+0x1c8>)
 8001d8e:	f7ff f847 	bl	8000e20 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8001d92:	4845      	ldr	r0, [pc, #276]	; (8001ea8 <main+0x1c8>)
 8001d94:	f7fe fdbb 	bl	800090e <_ZN7Stepper13StepperEnableEv>

//	stepperJ4.StepperSetMicrostep(1);
//	stepperJ4.StepperSetRatio(1);
#endif

	HAL_TIM_Base_Start_IT(&htim5);
 8001d98:	4844      	ldr	r0, [pc, #272]	; (8001eac <main+0x1cc>)
 8001d9a:	f007 fd17 	bl	80097cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 8001d9e:	4844      	ldr	r0, [pc, #272]	; (8001eb0 <main+0x1d0>)
 8001da0:	f007 fd14 	bl	80097cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001da4:	4843      	ldr	r0, [pc, #268]	; (8001eb4 <main+0x1d4>)
 8001da6:	f007 fd11 	bl	80097cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim12);
 8001daa:	4843      	ldr	r0, [pc, #268]	; (8001eb8 <main+0x1d8>)
 8001dac:	f007 fd0e 	bl	80097cc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim14);
 8001db0:	4842      	ldr	r0, [pc, #264]	; (8001ebc <main+0x1dc>)
 8001db2:	f007 fd0b 	bl	80097cc <HAL_TIM_Base_Start_IT>

	// Encoder
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8001db6:	4b42      	ldr	r3, [pc, #264]	; (8001ec0 <main+0x1e0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b40      	ldr	r3, [pc, #256]	; (8001ec0 <main+0x1e0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0220 	orr.w	r2, r2, #32
 8001dc4:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <main+0x1e0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	4b3c      	ldr	r3, [pc, #240]	; (8001ec0 <main+0x1e0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd4:	601a      	str	r2, [r3, #0]
//	stepperJ1.StepperOpenLoopSpeed(1.00f);

	// Backup
	fcb_joint1.Kp_p = 0.0 ;
 8001dd6:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <main+0x1e4>)
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	61da      	str	r2, [r3, #28]
	fcb_joint1.Kp_v = 0.0 ;
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <main+0x1e4>)
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint1.Ki_p = 0.0 ;
 8001de6:	4b37      	ldr	r3, [pc, #220]	; (8001ec4 <main+0x1e4>)
 8001de8:	f04f 0200 	mov.w	r2, #0
 8001dec:	621a      	str	r2, [r3, #32]
	fcb_joint1.Ki_v = 0.0 ;
 8001dee:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <main+0x1e4>)
 8001df0:	f04f 0200 	mov.w	r2, #0
 8001df4:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint1.Kd_p = 0.0 ;
 8001df6:	4b33      	ldr	r3, [pc, #204]	; (8001ec4 <main+0x1e4>)
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint1.Kd_p = 0.0 ;
 8001dfe:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <main+0x1e4>)
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint2.Kp_p = 0.0 ;
 8001e06:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <main+0x1e8>)
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
	fcb_joint2.Kp_v = 0.0 ;
 8001e0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <main+0x1e8>)
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint2.Ki_p = 0.0 ;
 8001e16:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <main+0x1e8>)
 8001e18:	f04f 0200 	mov.w	r2, #0
 8001e1c:	621a      	str	r2, [r3, #32]
	fcb_joint2.Ki_v = 0.0 ;
 8001e1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <main+0x1e8>)
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint2.Kd_p = 0.0 ;
 8001e26:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <main+0x1e8>)
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint2.Kd_p = 0.0 ;
 8001e2e:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <main+0x1e8>)
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint3.Kp_p = 0.0 ;
 8001e36:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <main+0x1ec>)
 8001e38:	f04f 0200 	mov.w	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
	fcb_joint3.Kp_v = 0.0 ;
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <main+0x1ec>)
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint3.Ki_p = 0.0 ;
 8001e46:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <main+0x1ec>)
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	621a      	str	r2, [r3, #32]
	fcb_joint3.Ki_v = 0.0 ;
 8001e4e:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <main+0x1ec>)
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint3.Kd_p = 0.0 ;
 8001e56:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <main+0x1ec>)
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint3.Kd_p = 0.0 ;
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <main+0x1ec>)
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint4.Kp_p = 0.0 ;
 8001e66:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <main+0x1f0>)
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
	fcb_joint4.Kp_v = 0.0 ;
 8001e6e:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <main+0x1f0>)
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint4.Ki_p = 0.0 ;
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <main+0x1f0>)
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	621a      	str	r2, [r3, #32]
	fcb_joint4.Ki_v = 0.0 ;
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <main+0x1f0>)
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint4.Kd_p = 0.0 ;
 8001e86:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <main+0x1f0>)
 8001e88:	f04f 0200 	mov.w	r2, #0
 8001e8c:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint4.Kd_p = 0.0 ;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <main+0x1f0>)
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001e96:	e7fe      	b.n	8001e96 <main+0x1b6>
 8001e98:	58020400 	.word	0x58020400
 8001e9c:	58021000 	.word	0x58021000
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	24000a1c 	.word	0x24000a1c
 8001ea8:	24000a44 	.word	0x24000a44
 8001eac:	240003ec 	.word	0x240003ec
 8001eb0:	24000438 	.word	0x24000438
 8001eb4:	24000484 	.word	0x24000484
 8001eb8:	240004d0 	.word	0x240004d0
 8001ebc:	24000568 	.word	0x24000568
 8001ec0:	24000720 	.word	0x24000720
 8001ec4:	24000aa8 	.word	0x24000aa8
 8001ec8:	24000b2c 	.word	0x24000b2c
 8001ecc:	24000bb0 	.word	0x24000bb0
 8001ed0:	24000c34 	.word	0x24000c34

08001ed4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b09c      	sub	sp, #112	; 0x70
 8001ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ede:	224c      	movs	r2, #76	; 0x4c
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f00b f940 	bl	800d168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ee8:	1d3b      	adds	r3, r7, #4
 8001eea:	2220      	movs	r2, #32
 8001eec:	2100      	movs	r1, #0
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f00b f93a 	bl	800d168 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f004 ff9d 	bl	8006e34 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001efa:	2300      	movs	r3, #0
 8001efc:	603b      	str	r3, [r7, #0]
 8001efe:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <_Z18SystemClock_Configv+0x10c>)
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	4a37      	ldr	r2, [pc, #220]	; (8001fe0 <_Z18SystemClock_Configv+0x10c>)
 8001f04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f08:	6193      	str	r3, [r2, #24]
 8001f0a:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <_Z18SystemClock_Configv+0x10c>)
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f12:	603b      	str	r3, [r7, #0]
 8001f14:	4b33      	ldr	r3, [pc, #204]	; (8001fe4 <_Z18SystemClock_Configv+0x110>)
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f18:	4a32      	ldr	r2, [pc, #200]	; (8001fe4 <_Z18SystemClock_Configv+0x110>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001f20:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <_Z18SystemClock_Configv+0x110>)
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001f2c:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <_Z18SystemClock_Configv+0x10c>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f38:	bf14      	ite	ne
 8001f3a:	2301      	movne	r3, #1
 8001f3c:	2300      	moveq	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d000      	beq.n	8001f46 <_Z18SystemClock_Configv+0x72>
 8001f44:	e7f2      	b.n	8001f2c <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f46:	2302      	movs	r3, #2
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f4e:	2340      	movs	r3, #64	; 0x40
 8001f50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f52:	2302      	movs	r3, #2
 8001f54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f56:	2300      	movs	r3, #0
 8001f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f5a:	2304      	movs	r3, #4
 8001f5c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001f5e:	233c      	movs	r3, #60	; 0x3c
 8001f60:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001f62:	2302      	movs	r3, #2
 8001f64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001f66:	2306      	movs	r3, #6
 8001f68:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001f6e:	230c      	movs	r3, #12
 8001f70:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001f72:	2300      	movs	r3, #0
 8001f74:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f004 ff92 	bl	8006ea8 <HAL_RCC_OscConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	bf14      	ite	ne
 8001f8a:	2301      	movne	r3, #1
 8001f8c:	2300      	moveq	r3, #0
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8001f94:	f001 f808 	bl	8002fa8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f98:	233f      	movs	r3, #63	; 0x3f
 8001f9a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001fa4:	2308      	movs	r3, #8
 8001fa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001fa8:	2340      	movs	r3, #64	; 0x40
 8001faa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001fac:	2340      	movs	r3, #64	; 0x40
 8001fae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001fb6:	2340      	movs	r3, #64	; 0x40
 8001fb8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f005 fb9e 	bl	8007700 <HAL_RCC_ClockConfig>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	bf14      	ite	ne
 8001fca:	2301      	movne	r3, #1
 8001fcc:	2300      	moveq	r3, #0
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8001fd4:	f000 ffe8 	bl	8002fa8 <Error_Handler>
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3770      	adds	r7, #112	; 0x70
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	58024800 	.word	0x58024800
 8001fe4:	58000400 	.word	0x58000400

08001fe8 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001fec:	4b10      	ldr	r3, [pc, #64]	; (8002030 <_ZL11MX_CRC_Initv+0x48>)
 8001fee:	4a11      	ldr	r2, [pc, #68]	; (8002034 <_ZL11MX_CRC_Initv+0x4c>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <_ZL11MX_CRC_Initv+0x48>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <_ZL11MX_CRC_Initv+0x48>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <_ZL11MX_CRC_Initv+0x48>)
 8002000:	2200      	movs	r2, #0
 8002002:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002004:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <_ZL11MX_CRC_Initv+0x48>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800200a:	4b09      	ldr	r3, [pc, #36]	; (8002030 <_ZL11MX_CRC_Initv+0x48>)
 800200c:	2201      	movs	r2, #1
 800200e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002010:	4807      	ldr	r0, [pc, #28]	; (8002030 <_ZL11MX_CRC_Initv+0x48>)
 8002012:	f002 fa1d 	bl	8004450 <HAL_CRC_Init>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	bf14      	ite	ne
 800201c:	2301      	movne	r3, #1
 800201e:	2300      	moveq	r3, #0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8002026:	f000 ffbf 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	24000210 	.word	0x24000210
 8002034:	58024c00 	.word	0x58024c00

08002038 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800203c:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 800203e:	4a2a      	ldr	r2, [pc, #168]	; (80020e8 <_ZL12MX_SPI3_Initv+0xb0>)
 8002040:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002042:	4b28      	ldr	r3, [pc, #160]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 8002044:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002048:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002050:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 8002052:	2203      	movs	r2, #3
 8002054:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002056:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800205c:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 800205e:	2200      	movs	r2, #0
 8002060:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002062:	4b20      	ldr	r3, [pc, #128]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 8002064:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002068:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 800206c:	2200      	movs	r2, #0
 800206e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002070:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 8002072:	2200      	movs	r2, #0
 8002074:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 8002078:	2200      	movs	r2, #0
 800207a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800207c:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 800207e:	2200      	movs	r2, #0
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002082:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 8002084:	2200      	movs	r2, #0
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002088:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 800208a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800208e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002090:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 8002092:	2200      	movs	r2, #0
 8002094:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002096:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 8002098:	2200      	movs	r2, #0
 800209a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 800209e:	2200      	movs	r2, #0
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 80020bc:	2200      	movs	r2, #0
 80020be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80020c6:	4807      	ldr	r0, [pc, #28]	; (80020e4 <_ZL12MX_SPI3_Initv+0xac>)
 80020c8:	f007 fa08 	bl	80094dc <HAL_SPI_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	bf14      	ite	ne
 80020d2:	2301      	movne	r3, #1
 80020d4:	2300      	moveq	r3, #0
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <_ZL12MX_SPI3_Initv+0xa8>
  {
    Error_Handler();
 80020dc:	f000 ff64 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	24000234 	.word	0x24000234
 80020e8:	40003c00 	.word	0x40003c00

080020ec <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b09a      	sub	sp, #104	; 0x68
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020f2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
 80020fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002100:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800210c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
 800211c:	615a      	str	r2, [r3, #20]
 800211e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002120:	1d3b      	adds	r3, r7, #4
 8002122:	222c      	movs	r2, #44	; 0x2c
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f00b f81e 	bl	800d168 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <_ZL12MX_TIM1_Initv+0x190>)
 800212e:	4a54      	ldr	r2, [pc, #336]	; (8002280 <_ZL12MX_TIM1_Initv+0x194>)
 8002130:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8002132:	4b52      	ldr	r3, [pc, #328]	; (800227c <_ZL12MX_TIM1_Initv+0x190>)
 8002134:	22c7      	movs	r2, #199	; 0xc7
 8002136:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <_ZL12MX_TIM1_Initv+0x190>)
 800213a:	2200      	movs	r2, #0
 800213c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 800213e:	4b4f      	ldr	r3, [pc, #316]	; (800227c <_ZL12MX_TIM1_Initv+0x190>)
 8002140:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002144:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002146:	4b4d      	ldr	r3, [pc, #308]	; (800227c <_ZL12MX_TIM1_Initv+0x190>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800214c:	4b4b      	ldr	r3, [pc, #300]	; (800227c <_ZL12MX_TIM1_Initv+0x190>)
 800214e:	2200      	movs	r2, #0
 8002150:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002152:	4b4a      	ldr	r3, [pc, #296]	; (800227c <_ZL12MX_TIM1_Initv+0x190>)
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002158:	4848      	ldr	r0, [pc, #288]	; (800227c <_ZL12MX_TIM1_Initv+0x190>)
 800215a:	f007 fae0 	bl	800971e <HAL_TIM_Base_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf14      	ite	ne
 8002164:	2301      	movne	r3, #1
 8002166:	2300      	moveq	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 800216e:	f000 ff1b 	bl	8002fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002176:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002178:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800217c:	4619      	mov	r1, r3
 800217e:	483f      	ldr	r0, [pc, #252]	; (800227c <_ZL12MX_TIM1_Initv+0x190>)
 8002180:	f007 ff40 	bl	800a004 <HAL_TIM_ConfigClockSource>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	bf14      	ite	ne
 800218a:	2301      	movne	r3, #1
 800218c:	2300      	moveq	r3, #0
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8002194:	f000 ff08 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002198:	4838      	ldr	r0, [pc, #224]	; (800227c <_ZL12MX_TIM1_Initv+0x190>)
 800219a:	f007 fb8f 	bl	80098bc <HAL_TIM_PWM_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf14      	ite	ne
 80021a4:	2301      	movne	r3, #1
 80021a6:	2300      	moveq	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 80021ae:	f000 fefb 	bl	8002fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021b2:	2300      	movs	r3, #0
 80021b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021b6:	2300      	movs	r3, #0
 80021b8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ba:	2300      	movs	r3, #0
 80021bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80021c2:	4619      	mov	r1, r3
 80021c4:	482d      	ldr	r0, [pc, #180]	; (800227c <_ZL12MX_TIM1_Initv+0x190>)
 80021c6:	f008 fc71 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf14      	ite	ne
 80021d0:	2301      	movne	r3, #1
 80021d2:	2300      	moveq	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 80021da:	f000 fee5 	bl	8002fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021de:	2360      	movs	r3, #96	; 0x60
 80021e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80021e2:	f240 1339 	movw	r3, #313	; 0x139
 80021e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e8:	2300      	movs	r3, #0
 80021ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021ec:	2300      	movs	r3, #0
 80021ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021f0:	2300      	movs	r3, #0
 80021f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021f4:	2300      	movs	r3, #0
 80021f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021f8:	2300      	movs	r3, #0
 80021fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002200:	2204      	movs	r2, #4
 8002202:	4619      	mov	r1, r3
 8002204:	481d      	ldr	r0, [pc, #116]	; (800227c <_ZL12MX_TIM1_Initv+0x190>)
 8002206:	f007 fde9 	bl	8009ddc <HAL_TIM_PWM_ConfigChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	bf14      	ite	ne
 8002210:	2301      	movne	r3, #1
 8002212:	2300      	moveq	r3, #0
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 800221a:	f000 fec5 	bl	8002fa8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002232:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002236:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800223c:	2300      	movs	r3, #0
 800223e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002240:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	4619      	mov	r1, r3
 8002252:	480a      	ldr	r0, [pc, #40]	; (800227c <_ZL12MX_TIM1_Initv+0x190>)
 8002254:	f008 fcb8 	bl	800abc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	bf14      	ite	ne
 800225e:	2301      	movne	r3, #1
 8002260:	2300      	moveq	r3, #0
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <_ZL12MX_TIM1_Initv+0x180>
  {
    Error_Handler();
 8002268:	f000 fe9e 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800226c:	4803      	ldr	r0, [pc, #12]	; (800227c <_ZL12MX_TIM1_Initv+0x190>)
 800226e:	f001 f9cf 	bl	8003610 <HAL_TIM_MspPostInit>

}
 8002272:	bf00      	nop
 8002274:	3768      	adds	r7, #104	; 0x68
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	240002bc 	.word	0x240002bc
 8002280:	40010000 	.word	0x40010000

08002284 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08e      	sub	sp, #56	; 0x38
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800228a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002298:	f107 031c 	add.w	r3, r7, #28
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a4:	463b      	mov	r3, r7
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
 80022b0:	611a      	str	r2, [r3, #16]
 80022b2:	615a      	str	r2, [r3, #20]
 80022b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022b6:	4b3a      	ldr	r3, [pc, #232]	; (80023a0 <_ZL12MX_TIM2_Initv+0x11c>)
 80022b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 80022be:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <_ZL12MX_TIM2_Initv+0x11c>)
 80022c0:	22c7      	movs	r2, #199	; 0xc7
 80022c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c4:	4b36      	ldr	r3, [pc, #216]	; (80023a0 <_ZL12MX_TIM2_Initv+0x11c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 80022ca:	4b35      	ldr	r3, [pc, #212]	; (80023a0 <_ZL12MX_TIM2_Initv+0x11c>)
 80022cc:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80022d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d2:	4b33      	ldr	r3, [pc, #204]	; (80023a0 <_ZL12MX_TIM2_Initv+0x11c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022d8:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <_ZL12MX_TIM2_Initv+0x11c>)
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022de:	4830      	ldr	r0, [pc, #192]	; (80023a0 <_ZL12MX_TIM2_Initv+0x11c>)
 80022e0:	f007 fa1d 	bl	800971e <HAL_TIM_Base_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf14      	ite	ne
 80022ea:	2301      	movne	r3, #1
 80022ec:	2300      	moveq	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 80022f4:	f000 fe58 	bl	8002fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002302:	4619      	mov	r1, r3
 8002304:	4826      	ldr	r0, [pc, #152]	; (80023a0 <_ZL12MX_TIM2_Initv+0x11c>)
 8002306:	f007 fe7d 	bl	800a004 <HAL_TIM_ConfigClockSource>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	bf14      	ite	ne
 8002310:	2301      	movne	r3, #1
 8002312:	2300      	moveq	r3, #0
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 800231a:	f000 fe45 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800231e:	4820      	ldr	r0, [pc, #128]	; (80023a0 <_ZL12MX_TIM2_Initv+0x11c>)
 8002320:	f007 facc 	bl	80098bc <HAL_TIM_PWM_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8002334:	f000 fe38 	bl	8002fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002338:	2300      	movs	r3, #0
 800233a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002340:	f107 031c 	add.w	r3, r7, #28
 8002344:	4619      	mov	r1, r3
 8002346:	4816      	ldr	r0, [pc, #88]	; (80023a0 <_ZL12MX_TIM2_Initv+0x11c>)
 8002348:	f008 fbb0 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf14      	ite	ne
 8002352:	2301      	movne	r3, #1
 8002354:	2300      	moveq	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 800235c:	f000 fe24 	bl	8002fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002360:	2360      	movs	r3, #96	; 0x60
 8002362:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8002364:	f240 1339 	movw	r3, #313	; 0x139
 8002368:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800236a:	2300      	movs	r3, #0
 800236c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002372:	463b      	mov	r3, r7
 8002374:	2208      	movs	r2, #8
 8002376:	4619      	mov	r1, r3
 8002378:	4809      	ldr	r0, [pc, #36]	; (80023a0 <_ZL12MX_TIM2_Initv+0x11c>)
 800237a:	f007 fd2f 	bl	8009ddc <HAL_TIM_PWM_ConfigChannel>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d001      	beq.n	8002392 <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 800238e:	f000 fe0b 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002392:	4803      	ldr	r0, [pc, #12]	; (80023a0 <_ZL12MX_TIM2_Initv+0x11c>)
 8002394:	f001 f93c 	bl	8003610 <HAL_TIM_MspPostInit>

}
 8002398:	bf00      	nop
 800239a:	3738      	adds	r7, #56	; 0x38
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	24000308 	.word	0x24000308

080023a4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08e      	sub	sp, #56	; 0x38
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023c4:	463b      	mov	r3, r7
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]
 80023d0:	611a      	str	r2, [r3, #16]
 80023d2:	615a      	str	r2, [r3, #20]
 80023d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023d6:	4b39      	ldr	r3, [pc, #228]	; (80024bc <_ZL12MX_TIM3_Initv+0x118>)
 80023d8:	4a39      	ldr	r2, [pc, #228]	; (80024c0 <_ZL12MX_TIM3_Initv+0x11c>)
 80023da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 80023dc:	4b37      	ldr	r3, [pc, #220]	; (80024bc <_ZL12MX_TIM3_Initv+0x118>)
 80023de:	22c7      	movs	r2, #199	; 0xc7
 80023e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023e2:	4b36      	ldr	r3, [pc, #216]	; (80024bc <_ZL12MX_TIM3_Initv+0x118>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 80023e8:	4b34      	ldr	r3, [pc, #208]	; (80024bc <_ZL12MX_TIM3_Initv+0x118>)
 80023ea:	f640 125f 	movw	r2, #2399	; 0x95f
 80023ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023f0:	4b32      	ldr	r3, [pc, #200]	; (80024bc <_ZL12MX_TIM3_Initv+0x118>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023f6:	4b31      	ldr	r3, [pc, #196]	; (80024bc <_ZL12MX_TIM3_Initv+0x118>)
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023fc:	482f      	ldr	r0, [pc, #188]	; (80024bc <_ZL12MX_TIM3_Initv+0x118>)
 80023fe:	f007 f98e 	bl	800971e <HAL_TIM_Base_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf14      	ite	ne
 8002408:	2301      	movne	r3, #1
 800240a:	2300      	moveq	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8002412:	f000 fdc9 	bl	8002fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800241c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002420:	4619      	mov	r1, r3
 8002422:	4826      	ldr	r0, [pc, #152]	; (80024bc <_ZL12MX_TIM3_Initv+0x118>)
 8002424:	f007 fdee 	bl	800a004 <HAL_TIM_ConfigClockSource>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	bf14      	ite	ne
 800242e:	2301      	movne	r3, #1
 8002430:	2300      	moveq	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8002438:	f000 fdb6 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800243c:	481f      	ldr	r0, [pc, #124]	; (80024bc <_ZL12MX_TIM3_Initv+0x118>)
 800243e:	f007 fa3d 	bl	80098bc <HAL_TIM_PWM_Init>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 8002452:	f000 fda9 	bl	8002fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800245e:	f107 031c 	add.w	r3, r7, #28
 8002462:	4619      	mov	r1, r3
 8002464:	4815      	ldr	r0, [pc, #84]	; (80024bc <_ZL12MX_TIM3_Initv+0x118>)
 8002466:	f008 fb21 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf14      	ite	ne
 8002470:	2301      	movne	r3, #1
 8002472:	2300      	moveq	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 800247a:	f000 fd95 	bl	8002fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800247e:	2360      	movs	r3, #96	; 0x60
 8002480:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800248e:	463b      	mov	r3, r7
 8002490:	2200      	movs	r2, #0
 8002492:	4619      	mov	r1, r3
 8002494:	4809      	ldr	r0, [pc, #36]	; (80024bc <_ZL12MX_TIM3_Initv+0x118>)
 8002496:	f007 fca1 	bl	8009ddc <HAL_TIM_PWM_ConfigChannel>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	bf14      	ite	ne
 80024a0:	2301      	movne	r3, #1
 80024a2:	2300      	moveq	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <_ZL12MX_TIM3_Initv+0x10a>
  {
    Error_Handler();
 80024aa:	f000 fd7d 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024ae:	4803      	ldr	r0, [pc, #12]	; (80024bc <_ZL12MX_TIM3_Initv+0x118>)
 80024b0:	f001 f8ae 	bl	8003610 <HAL_TIM_MspPostInit>

}
 80024b4:	bf00      	nop
 80024b6:	3738      	adds	r7, #56	; 0x38
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	24000354 	.word	0x24000354
 80024c0:	40000400 	.word	0x40000400

080024c4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08e      	sub	sp, #56	; 0x38
 80024c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
 80024d2:	605a      	str	r2, [r3, #4]
 80024d4:	609a      	str	r2, [r3, #8]
 80024d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d8:	f107 031c 	add.w	r3, r7, #28
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024e4:	463b      	mov	r3, r7
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	60da      	str	r2, [r3, #12]
 80024f0:	611a      	str	r2, [r3, #16]
 80024f2:	615a      	str	r2, [r3, #20]
 80024f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80024f6:	4b3a      	ldr	r3, [pc, #232]	; (80025e0 <_ZL12MX_TIM4_Initv+0x11c>)
 80024f8:	4a3a      	ldr	r2, [pc, #232]	; (80025e4 <_ZL12MX_TIM4_Initv+0x120>)
 80024fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 80024fc:	4b38      	ldr	r3, [pc, #224]	; (80025e0 <_ZL12MX_TIM4_Initv+0x11c>)
 80024fe:	22c7      	movs	r2, #199	; 0xc7
 8002500:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002502:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <_ZL12MX_TIM4_Initv+0x11c>)
 8002504:	2200      	movs	r2, #0
 8002506:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 8002508:	4b35      	ldr	r3, [pc, #212]	; (80025e0 <_ZL12MX_TIM4_Initv+0x11c>)
 800250a:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800250e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002510:	4b33      	ldr	r3, [pc, #204]	; (80025e0 <_ZL12MX_TIM4_Initv+0x11c>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002516:	4b32      	ldr	r3, [pc, #200]	; (80025e0 <_ZL12MX_TIM4_Initv+0x11c>)
 8002518:	2280      	movs	r2, #128	; 0x80
 800251a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800251c:	4830      	ldr	r0, [pc, #192]	; (80025e0 <_ZL12MX_TIM4_Initv+0x11c>)
 800251e:	f007 f8fe 	bl	800971e <HAL_TIM_Base_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf14      	ite	ne
 8002528:	2301      	movne	r3, #1
 800252a:	2300      	moveq	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8002532:	f000 fd39 	bl	8002fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800253a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800253c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002540:	4619      	mov	r1, r3
 8002542:	4827      	ldr	r0, [pc, #156]	; (80025e0 <_ZL12MX_TIM4_Initv+0x11c>)
 8002544:	f007 fd5e 	bl	800a004 <HAL_TIM_ConfigClockSource>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	bf14      	ite	ne
 800254e:	2301      	movne	r3, #1
 8002550:	2300      	moveq	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8002558:	f000 fd26 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800255c:	4820      	ldr	r0, [pc, #128]	; (80025e0 <_ZL12MX_TIM4_Initv+0x11c>)
 800255e:	f007 f9ad 	bl	80098bc <HAL_TIM_PWM_Init>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	bf14      	ite	ne
 8002568:	2301      	movne	r3, #1
 800256a:	2300      	moveq	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 8002572:	f000 fd19 	bl	8002fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800257e:	f107 031c 	add.w	r3, r7, #28
 8002582:	4619      	mov	r1, r3
 8002584:	4816      	ldr	r0, [pc, #88]	; (80025e0 <_ZL12MX_TIM4_Initv+0x11c>)
 8002586:	f008 fa91 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 800259a:	f000 fd05 	bl	8002fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800259e:	2360      	movs	r3, #96	; 0x60
 80025a0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80025a2:	f240 1339 	movw	r3, #313	; 0x139
 80025a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025b0:	463b      	mov	r3, r7
 80025b2:	2208      	movs	r2, #8
 80025b4:	4619      	mov	r1, r3
 80025b6:	480a      	ldr	r0, [pc, #40]	; (80025e0 <_ZL12MX_TIM4_Initv+0x11c>)
 80025b8:	f007 fc10 	bl	8009ddc <HAL_TIM_PWM_ConfigChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bf14      	ite	ne
 80025c2:	2301      	movne	r3, #1
 80025c4:	2300      	moveq	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <_ZL12MX_TIM4_Initv+0x10c>
  {
    Error_Handler();
 80025cc:	f000 fcec 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025d0:	4803      	ldr	r0, [pc, #12]	; (80025e0 <_ZL12MX_TIM4_Initv+0x11c>)
 80025d2:	f001 f81d 	bl	8003610 <HAL_TIM_MspPostInit>

}
 80025d6:	bf00      	nop
 80025d8:	3738      	adds	r7, #56	; 0x38
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	240003a0 	.word	0x240003a0
 80025e4:	40000800 	.word	0x40000800

080025e8 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ee:	f107 0310 	add.w	r3, r7, #16
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	609a      	str	r2, [r3, #8]
 80025fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002606:	4b25      	ldr	r3, [pc, #148]	; (800269c <_ZL12MX_TIM5_Initv+0xb4>)
 8002608:	4a25      	ldr	r2, [pc, #148]	; (80026a0 <_ZL12MX_TIM5_Initv+0xb8>)
 800260a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 800260c:	4b23      	ldr	r3, [pc, #140]	; (800269c <_ZL12MX_TIM5_Initv+0xb4>)
 800260e:	22c7      	movs	r2, #199	; 0xc7
 8002610:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002612:	4b22      	ldr	r3, [pc, #136]	; (800269c <_ZL12MX_TIM5_Initv+0xb4>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8002618:	4b20      	ldr	r3, [pc, #128]	; (800269c <_ZL12MX_TIM5_Initv+0xb4>)
 800261a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800261e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <_ZL12MX_TIM5_Initv+0xb4>)
 8002622:	2200      	movs	r2, #0
 8002624:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002626:	4b1d      	ldr	r3, [pc, #116]	; (800269c <_ZL12MX_TIM5_Initv+0xb4>)
 8002628:	2280      	movs	r2, #128	; 0x80
 800262a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800262c:	481b      	ldr	r0, [pc, #108]	; (800269c <_ZL12MX_TIM5_Initv+0xb4>)
 800262e:	f007 f876 	bl	800971e <HAL_TIM_Base_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <_ZL12MX_TIM5_Initv+0x5e>
  {
    Error_Handler();
 8002642:	f000 fcb1 	bl	8002fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800264a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	4619      	mov	r1, r3
 8002652:	4812      	ldr	r0, [pc, #72]	; (800269c <_ZL12MX_TIM5_Initv+0xb4>)
 8002654:	f007 fcd6 	bl	800a004 <HAL_TIM_ConfigClockSource>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <_ZL12MX_TIM5_Initv+0x84>
  {
    Error_Handler();
 8002668:	f000 fc9e 	bl	8002fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266c:	2300      	movs	r3, #0
 800266e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	4619      	mov	r1, r3
 8002678:	4808      	ldr	r0, [pc, #32]	; (800269c <_ZL12MX_TIM5_Initv+0xb4>)
 800267a:	f008 fa17 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	bf14      	ite	ne
 8002684:	2301      	movne	r3, #1
 8002686:	2300      	moveq	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <_ZL12MX_TIM5_Initv+0xaa>
  {
    Error_Handler();
 800268e:	f000 fc8b 	bl	8002fa8 <Error_Handler>
  /* USER CODE BEGIN TIM5_Init 2 */
//  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE END TIM5_Init 2 */

}
 8002692:	bf00      	nop
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	240003ec 	.word	0x240003ec
 80026a0:	40000c00 	.word	0x40000c00

080026a4 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026aa:	1d3b      	adds	r3, r7, #4
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <_ZL12MX_TIM6_Initv+0x78>)
 80026b6:	4a1a      	ldr	r2, [pc, #104]	; (8002720 <_ZL12MX_TIM6_Initv+0x7c>)
 80026b8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 80026ba:	4b18      	ldr	r3, [pc, #96]	; (800271c <_ZL12MX_TIM6_Initv+0x78>)
 80026bc:	22c7      	movs	r2, #199	; 0xc7
 80026be:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c0:	4b16      	ldr	r3, [pc, #88]	; (800271c <_ZL12MX_TIM6_Initv+0x78>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <_ZL12MX_TIM6_Initv+0x78>)
 80026c8:	f241 726f 	movw	r2, #5999	; 0x176f
 80026cc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <_ZL12MX_TIM6_Initv+0x78>)
 80026d0:	2280      	movs	r2, #128	; 0x80
 80026d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80026d4:	4811      	ldr	r0, [pc, #68]	; (800271c <_ZL12MX_TIM6_Initv+0x78>)
 80026d6:	f007 f822 	bl	800971e <HAL_TIM_Base_Init>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf14      	ite	ne
 80026e0:	2301      	movne	r3, #1
 80026e2:	2300      	moveq	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 80026ea:	f000 fc5d 	bl	8002fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f2:	2300      	movs	r3, #0
 80026f4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	4619      	mov	r1, r3
 80026fa:	4808      	ldr	r0, [pc, #32]	; (800271c <_ZL12MX_TIM6_Initv+0x78>)
 80026fc:	f008 f9d6 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf14      	ite	ne
 8002706:	2301      	movne	r3, #1
 8002708:	2300      	moveq	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8002710:	f000 fc4a 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002714:	bf00      	nop
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	24000438 	.word	0x24000438
 8002720:	40001000 	.word	0x40001000

08002724 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002734:	4b19      	ldr	r3, [pc, #100]	; (800279c <_ZL12MX_TIM7_Initv+0x78>)
 8002736:	4a1a      	ldr	r2, [pc, #104]	; (80027a0 <_ZL12MX_TIM7_Initv+0x7c>)
 8002738:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 800273a:	4b18      	ldr	r3, [pc, #96]	; (800279c <_ZL12MX_TIM7_Initv+0x78>)
 800273c:	22c7      	movs	r2, #199	; 0xc7
 800273e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <_ZL12MX_TIM7_Initv+0x78>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <_ZL12MX_TIM7_Initv+0x78>)
 8002748:	f240 42af 	movw	r2, #1199	; 0x4af
 800274c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800274e:	4b13      	ldr	r3, [pc, #76]	; (800279c <_ZL12MX_TIM7_Initv+0x78>)
 8002750:	2280      	movs	r2, #128	; 0x80
 8002752:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002754:	4811      	ldr	r0, [pc, #68]	; (800279c <_ZL12MX_TIM7_Initv+0x78>)
 8002756:	f006 ffe2 	bl	800971e <HAL_TIM_Base_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf14      	ite	ne
 8002760:	2301      	movne	r3, #1
 8002762:	2300      	moveq	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 800276a:	f000 fc1d 	bl	8002fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	4619      	mov	r1, r3
 800277a:	4808      	ldr	r0, [pc, #32]	; (800279c <_ZL12MX_TIM7_Initv+0x78>)
 800277c:	f008 f996 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	bf14      	ite	ne
 8002786:	2301      	movne	r3, #1
 8002788:	2300      	moveq	r3, #0
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 8002790:	f000 fc0a 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002794:	bf00      	nop
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	24000484 	.word	0x24000484
 80027a0:	40001400 	.word	0x40001400

080027a4 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027aa:	463b      	mov	r3, r7
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80027b6:	4b1b      	ldr	r3, [pc, #108]	; (8002824 <_ZL13MX_TIM12_Initv+0x80>)
 80027b8:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <_ZL13MX_TIM12_Initv+0x84>)
 80027ba:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <_ZL13MX_TIM12_Initv+0x80>)
 80027be:	22c7      	movs	r2, #199	; 0xc7
 80027c0:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c2:	4b18      	ldr	r3, [pc, #96]	; (8002824 <_ZL13MX_TIM12_Initv+0x80>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 80027c8:	4b16      	ldr	r3, [pc, #88]	; (8002824 <_ZL13MX_TIM12_Initv+0x80>)
 80027ca:	f240 2257 	movw	r2, #599	; 0x257
 80027ce:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <_ZL13MX_TIM12_Initv+0x80>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027d6:	4b13      	ldr	r3, [pc, #76]	; (8002824 <_ZL13MX_TIM12_Initv+0x80>)
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80027dc:	4811      	ldr	r0, [pc, #68]	; (8002824 <_ZL13MX_TIM12_Initv+0x80>)
 80027de:	f006 ff9e 	bl	800971e <HAL_TIM_Base_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf14      	ite	ne
 80027e8:	2301      	movne	r3, #1
 80027ea:	2300      	moveq	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <_ZL13MX_TIM12_Initv+0x52>
  {
    Error_Handler();
 80027f2:	f000 fbd9 	bl	8002fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027fa:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80027fc:	463b      	mov	r3, r7
 80027fe:	4619      	mov	r1, r3
 8002800:	4808      	ldr	r0, [pc, #32]	; (8002824 <_ZL13MX_TIM12_Initv+0x80>)
 8002802:	f007 fbff 	bl	800a004 <HAL_TIM_ConfigClockSource>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf14      	ite	ne
 800280c:	2301      	movne	r3, #1
 800280e:	2300      	moveq	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <_ZL13MX_TIM12_Initv+0x76>
  {
    Error_Handler();
 8002816:	f000 fbc7 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	240004d0 	.word	0x240004d0
 8002828:	40001800 	.word	0x40001800

0800282c <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002830:	4b10      	ldr	r3, [pc, #64]	; (8002874 <_ZL13MX_TIM13_Initv+0x48>)
 8002832:	4a11      	ldr	r2, [pc, #68]	; (8002878 <_ZL13MX_TIM13_Initv+0x4c>)
 8002834:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 8002836:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <_ZL13MX_TIM13_Initv+0x48>)
 8002838:	22c7      	movs	r2, #199	; 0xc7
 800283a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283c:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <_ZL13MX_TIM13_Initv+0x48>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <_ZL13MX_TIM13_Initv+0x48>)
 8002844:	f240 2257 	movw	r2, #599	; 0x257
 8002848:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <_ZL13MX_TIM13_Initv+0x48>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <_ZL13MX_TIM13_Initv+0x48>)
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002856:	4807      	ldr	r0, [pc, #28]	; (8002874 <_ZL13MX_TIM13_Initv+0x48>)
 8002858:	f006 ff61 	bl	800971e <HAL_TIM_Base_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 800286c:	f000 fb9c 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}
 8002874:	2400051c 	.word	0x2400051c
 8002878:	40001c00 	.word	0x40001c00

0800287c <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <_ZL13MX_TIM14_Initv+0x48>)
 8002882:	4a11      	ldr	r2, [pc, #68]	; (80028c8 <_ZL13MX_TIM14_Initv+0x4c>)
 8002884:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <_ZL13MX_TIM14_Initv+0x48>)
 8002888:	22c7      	movs	r2, #199	; 0xc7
 800288a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <_ZL13MX_TIM14_Initv+0x48>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <_ZL13MX_TIM14_Initv+0x48>)
 8002894:	f640 125f 	movw	r2, #2399	; 0x95f
 8002898:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800289a:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <_ZL13MX_TIM14_Initv+0x48>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <_ZL13MX_TIM14_Initv+0x48>)
 80028a2:	2280      	movs	r2, #128	; 0x80
 80028a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80028a6:	4807      	ldr	r0, [pc, #28]	; (80028c4 <_ZL13MX_TIM14_Initv+0x48>)
 80028a8:	f006 ff39 	bl	800971e <HAL_TIM_Base_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bf14      	ite	ne
 80028b2:	2301      	movne	r3, #1
 80028b4:	2300      	moveq	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 80028bc:	f000 fb74 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	24000568 	.word	0x24000568
 80028c8:	40002000 	.word	0x40002000

080028cc <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b09a      	sub	sp, #104	; 0x68
 80028d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028d2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
 80028fc:	615a      	str	r2, [r3, #20]
 80028fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	222c      	movs	r2, #44	; 0x2c
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f00a fc2e 	bl	800d168 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800290c:	4b4e      	ldr	r3, [pc, #312]	; (8002a48 <_ZL13MX_TIM15_Initv+0x17c>)
 800290e:	4a4f      	ldr	r2, [pc, #316]	; (8002a4c <_ZL13MX_TIM15_Initv+0x180>)
 8002910:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8002912:	4b4d      	ldr	r3, [pc, #308]	; (8002a48 <_ZL13MX_TIM15_Initv+0x17c>)
 8002914:	22ef      	movs	r2, #239	; 0xef
 8002916:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002918:	4b4b      	ldr	r3, [pc, #300]	; (8002a48 <_ZL13MX_TIM15_Initv+0x17c>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 800291e:	4b4a      	ldr	r3, [pc, #296]	; (8002a48 <_ZL13MX_TIM15_Initv+0x17c>)
 8002920:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002924:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002926:	4b48      	ldr	r3, [pc, #288]	; (8002a48 <_ZL13MX_TIM15_Initv+0x17c>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800292c:	4b46      	ldr	r3, [pc, #280]	; (8002a48 <_ZL13MX_TIM15_Initv+0x17c>)
 800292e:	2200      	movs	r2, #0
 8002930:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002932:	4b45      	ldr	r3, [pc, #276]	; (8002a48 <_ZL13MX_TIM15_Initv+0x17c>)
 8002934:	2280      	movs	r2, #128	; 0x80
 8002936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002938:	4843      	ldr	r0, [pc, #268]	; (8002a48 <_ZL13MX_TIM15_Initv+0x17c>)
 800293a:	f006 fef0 	bl	800971e <HAL_TIM_Base_Init>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf14      	ite	ne
 8002944:	2301      	movne	r3, #1
 8002946:	2300      	moveq	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <_ZL13MX_TIM15_Initv+0x86>
  {
    Error_Handler();
 800294e:	f000 fb2b 	bl	8002fa8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002956:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002958:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800295c:	4619      	mov	r1, r3
 800295e:	483a      	ldr	r0, [pc, #232]	; (8002a48 <_ZL13MX_TIM15_Initv+0x17c>)
 8002960:	f007 fb50 	bl	800a004 <HAL_TIM_ConfigClockSource>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	bf14      	ite	ne
 800296a:	2301      	movne	r3, #1
 800296c:	2300      	moveq	r3, #0
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <_ZL13MX_TIM15_Initv+0xac>
  {
    Error_Handler();
 8002974:	f000 fb18 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002978:	4833      	ldr	r0, [pc, #204]	; (8002a48 <_ZL13MX_TIM15_Initv+0x17c>)
 800297a:	f006 ff9f 	bl	80098bc <HAL_TIM_PWM_Init>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf14      	ite	ne
 8002984:	2301      	movne	r3, #1
 8002986:	2300      	moveq	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <_ZL13MX_TIM15_Initv+0xc6>
  {
    Error_Handler();
 800298e:	f000 fb0b 	bl	8002fa8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002992:	2300      	movs	r3, #0
 8002994:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002996:	2300      	movs	r3, #0
 8002998:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800299a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800299e:	4619      	mov	r1, r3
 80029a0:	4829      	ldr	r0, [pc, #164]	; (8002a48 <_ZL13MX_TIM15_Initv+0x17c>)
 80029a2:	f008 f883 	bl	800aaac <HAL_TIMEx_MasterConfigSynchronization>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	bf14      	ite	ne
 80029ac:	2301      	movne	r3, #1
 80029ae:	2300      	moveq	r3, #0
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <_ZL13MX_TIM15_Initv+0xee>
  {
    Error_Handler();
 80029b6:	f000 faf7 	bl	8002fa8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029ba:	2360      	movs	r3, #96	; 0x60
 80029bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80029be:	f240 1339 	movw	r3, #313	; 0x139
 80029c2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029c4:	2300      	movs	r3, #0
 80029c6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029c8:	2300      	movs	r3, #0
 80029ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029d0:	2300      	movs	r3, #0
 80029d2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029d4:	2300      	movs	r3, #0
 80029d6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029dc:	2204      	movs	r2, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	4819      	ldr	r0, [pc, #100]	; (8002a48 <_ZL13MX_TIM15_Initv+0x17c>)
 80029e2:	f007 f9fb 	bl	8009ddc <HAL_TIM_PWM_ConfigChannel>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <_ZL13MX_TIM15_Initv+0x12e>
  {
    Error_Handler();
 80029f6:	f000 fad7 	bl	8002fa8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4809      	ldr	r0, [pc, #36]	; (8002a48 <_ZL13MX_TIM15_Initv+0x17c>)
 8002a22:	f008 f8d1 	bl	800abc8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	bf14      	ite	ne
 8002a2c:	2301      	movne	r3, #1
 8002a2e:	2300      	moveq	r3, #0
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <_ZL13MX_TIM15_Initv+0x16e>
  {
    Error_Handler();
 8002a36:	f000 fab7 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002a3a:	4803      	ldr	r0, [pc, #12]	; (8002a48 <_ZL13MX_TIM15_Initv+0x17c>)
 8002a3c:	f000 fde8 	bl	8003610 <HAL_TIM_MspPostInit>

}
 8002a40:	bf00      	nop
 8002a42:	3768      	adds	r7, #104	; 0x68
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	240005b4 	.word	0x240005b4
 8002a4c:	40014000 	.word	0x40014000

08002a50 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002a54:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002a56:	4a30      	ldr	r2, [pc, #192]	; (8002b18 <_ZL13MX_UART4_Initv+0xc8>)
 8002a58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8002a5a:	4b2e      	ldr	r3, [pc, #184]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002a5c:	4a2f      	ldr	r2, [pc, #188]	; (8002b1c <_ZL13MX_UART4_Initv+0xcc>)
 8002a5e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002a60:	4b2c      	ldr	r3, [pc, #176]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002a66:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002a6c:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002a72:	4b28      	ldr	r3, [pc, #160]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002a74:	220c      	movs	r2, #12
 8002a76:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a78:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a7e:	4b25      	ldr	r3, [pc, #148]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a84:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8002a90:	4b20      	ldr	r3, [pc, #128]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002a92:	2208      	movs	r2, #8
 8002a94:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8002a96:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002a98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002a9c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002a9e:	481d      	ldr	r0, [pc, #116]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002aa0:	f008 f92e 	bl	800ad00 <HAL_UART_Init>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf14      	ite	ne
 8002aaa:	2301      	movne	r3, #1
 8002aac:	2300      	moveq	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <_ZL13MX_UART4_Initv+0x68>
  {
    Error_Handler();
 8002ab4:	f000 fa78 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002ab8:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8002abc:	4815      	ldr	r0, [pc, #84]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002abe:	f009 fee6 	bl	800c88e <HAL_UARTEx_SetTxFifoThreshold>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <_ZL13MX_UART4_Initv+0x86>
  {
    Error_Handler();
 8002ad2:	f000 fa69 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002ad6:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8002ada:	480e      	ldr	r0, [pc, #56]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002adc:	f009 ff15 	bl	800c90a <HAL_UARTEx_SetRxFifoThreshold>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	bf14      	ite	ne
 8002ae6:	2301      	movne	r3, #1
 8002ae8:	2300      	moveq	r3, #0
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <_ZL13MX_UART4_Initv+0xa4>
  {
    Error_Handler();
 8002af0:	f000 fa5a 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8002af4:	4807      	ldr	r0, [pc, #28]	; (8002b14 <_ZL13MX_UART4_Initv+0xc4>)
 8002af6:	f009 fe56 	bl	800c7a6 <HAL_UARTEx_EnableFifoMode>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	bf14      	ite	ne
 8002b00:	2301      	movne	r3, #1
 8002b02:	2300      	moveq	r3, #0
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <_ZL13MX_UART4_Initv+0xbe>
  {
    Error_Handler();
 8002b0a:	f000 fa4d 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	24000600 	.word	0x24000600
 8002b18:	40004c00 	.word	0x40004c00
 8002b1c:	001e8480 	.word	0x001e8480

08002b20 <_ZL13MX_UART7_Initv>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002b24:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <_ZL13MX_UART7_Initv+0xbc>)
 8002b26:	4a2e      	ldr	r2, [pc, #184]	; (8002be0 <_ZL13MX_UART7_Initv+0xc0>)
 8002b28:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	; (8002bdc <_ZL13MX_UART7_Initv+0xbc>)
 8002b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b30:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002b32:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <_ZL13MX_UART7_Initv+0xbc>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002b38:	4b28      	ldr	r3, [pc, #160]	; (8002bdc <_ZL13MX_UART7_Initv+0xbc>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002b3e:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <_ZL13MX_UART7_Initv+0xbc>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002b44:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <_ZL13MX_UART7_Initv+0xbc>)
 8002b46:	220c      	movs	r2, #12
 8002b48:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <_ZL13MX_UART7_Initv+0xbc>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b50:	4b22      	ldr	r3, [pc, #136]	; (8002bdc <_ZL13MX_UART7_Initv+0xbc>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b56:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <_ZL13MX_UART7_Initv+0xbc>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <_ZL13MX_UART7_Initv+0xbc>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b62:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <_ZL13MX_UART7_Initv+0xbc>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002b68:	481c      	ldr	r0, [pc, #112]	; (8002bdc <_ZL13MX_UART7_Initv+0xbc>)
 8002b6a:	f008 f8c9 	bl	800ad00 <HAL_UART_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	bf14      	ite	ne
 8002b74:	2301      	movne	r3, #1
 8002b76:	2300      	moveq	r3, #0
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <_ZL13MX_UART7_Initv+0x62>
  {
    Error_Handler();
 8002b7e:	f000 fa13 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002b82:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8002b86:	4815      	ldr	r0, [pc, #84]	; (8002bdc <_ZL13MX_UART7_Initv+0xbc>)
 8002b88:	f009 fe81 	bl	800c88e <HAL_UARTEx_SetTxFifoThreshold>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	bf14      	ite	ne
 8002b92:	2301      	movne	r3, #1
 8002b94:	2300      	moveq	r3, #0
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <_ZL13MX_UART7_Initv+0x80>
  {
    Error_Handler();
 8002b9c:	f000 fa04 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002ba0:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8002ba4:	480d      	ldr	r0, [pc, #52]	; (8002bdc <_ZL13MX_UART7_Initv+0xbc>)
 8002ba6:	f009 feb0 	bl	800c90a <HAL_UARTEx_SetRxFifoThreshold>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <_ZL13MX_UART7_Initv+0x9e>
  {
    Error_Handler();
 8002bba:	f000 f9f5 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8002bbe:	4807      	ldr	r0, [pc, #28]	; (8002bdc <_ZL13MX_UART7_Initv+0xbc>)
 8002bc0:	f009 fdf1 	bl	800c7a6 <HAL_UARTEx_EnableFifoMode>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	bf14      	ite	ne
 8002bca:	2301      	movne	r3, #1
 8002bcc:	2300      	moveq	r3, #0
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <_ZL13MX_UART7_Initv+0xb8>
  {
    Error_Handler();
 8002bd4:	f000 f9e8 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	24000690 	.word	0x24000690
 8002be0:	40007800 	.word	0x40007800

08002be4 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002be8:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002bea:	4a2d      	ldr	r2, [pc, #180]	; (8002ca0 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8002bec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002bee:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf6:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002bfc:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002c02:	4b26      	ldr	r3, [pc, #152]	; (8002c9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002c08:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c0e:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c14:	4b21      	ldr	r3, [pc, #132]	; (8002c9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c1a:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c20:	4b1e      	ldr	r3, [pc, #120]	; (8002c9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c26:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002c2c:	481b      	ldr	r0, [pc, #108]	; (8002c9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c2e:	f008 f867 	bl	800ad00 <HAL_UART_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8002c42:	f000 f9b1 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c46:	2100      	movs	r1, #0
 8002c48:	4814      	ldr	r0, [pc, #80]	; (8002c9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c4a:	f009 fe20 	bl	800c88e <HAL_UARTEx_SetTxFifoThreshold>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8002c5e:	f000 f9a3 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c62:	2100      	movs	r1, #0
 8002c64:	480d      	ldr	r0, [pc, #52]	; (8002c9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c66:	f009 fe50 	bl	800c90a <HAL_UARTEx_SetRxFifoThreshold>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	bf14      	ite	ne
 8002c70:	2301      	movne	r3, #1
 8002c72:	2300      	moveq	r3, #0
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8002c7a:	f000 f995 	bl	8002fa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002c7e:	4807      	ldr	r0, [pc, #28]	; (8002c9c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8002c80:	f009 fdcc 	bl	800c81c <HAL_UARTEx_DisableFifoMode>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	bf14      	ite	ne
 8002c8a:	2301      	movne	r3, #1
 8002c8c:	2300      	moveq	r3, #0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8002c94:	f000 f988 	bl	8002fa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002c98:	bf00      	nop
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	24000720 	.word	0x24000720
 8002ca0:	40004800 	.word	0x40004800

08002ca4 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <_ZL11MX_DMA_Initv+0x7c>)
 8002cac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cb0:	4a1b      	ldr	r2, [pc, #108]	; (8002d20 <_ZL11MX_DMA_Initv+0x7c>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002cba:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <_ZL11MX_DMA_Initv+0x7c>)
 8002cbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	607b      	str	r3, [r7, #4]
 8002cc6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002cc8:	2200      	movs	r2, #0
 8002cca:	2100      	movs	r1, #0
 8002ccc:	200b      	movs	r0, #11
 8002cce:	f001 fb7e 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002cd2:	200b      	movs	r0, #11
 8002cd4:	f001 fb95 	bl	8004402 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	200c      	movs	r0, #12
 8002cde:	f001 fb76 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002ce2:	200c      	movs	r0, #12
 8002ce4:	f001 fb8d 	bl	8004402 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	2100      	movs	r1, #0
 8002cec:	200d      	movs	r0, #13
 8002cee:	f001 fb6e 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002cf2:	200d      	movs	r0, #13
 8002cf4:	f001 fb85 	bl	8004402 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	200e      	movs	r0, #14
 8002cfe:	f001 fb66 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002d02:	200e      	movs	r0, #14
 8002d04:	f001 fb7d 	bl	8004402 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	200f      	movs	r0, #15
 8002d0e:	f001 fb5e 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002d12:	200f      	movs	r0, #15
 8002d14:	f001 fb75 	bl	8004402 <HAL_NVIC_EnableIRQ>

}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	58024400 	.word	0x58024400

08002d24 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b08c      	sub	sp, #48	; 0x30
 8002d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2a:	f107 031c 	add.w	r3, r7, #28
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	605a      	str	r2, [r3, #4]
 8002d34:	609a      	str	r2, [r3, #8]
 8002d36:	60da      	str	r2, [r3, #12]
 8002d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d3a:	4b8e      	ldr	r3, [pc, #568]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d40:	4a8c      	ldr	r2, [pc, #560]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002d42:	f043 0310 	orr.w	r3, r3, #16
 8002d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d4a:	4b8a      	ldr	r3, [pc, #552]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d58:	4b86      	ldr	r3, [pc, #536]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d5e:	4a85      	ldr	r2, [pc, #532]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002d60:	f043 0304 	orr.w	r3, r3, #4
 8002d64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d68:	4b82      	ldr	r3, [pc, #520]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d6e:	f003 0304 	and.w	r3, r3, #4
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d76:	4b7f      	ldr	r3, [pc, #508]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d7c:	4a7d      	ldr	r2, [pc, #500]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d86:	4b7b      	ldr	r3, [pc, #492]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d94:	4b77      	ldr	r3, [pc, #476]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d9a:	4a76      	ldr	r2, [pc, #472]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002da4:	4b73      	ldr	r3, [pc, #460]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002db2:	4b70      	ldr	r3, [pc, #448]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db8:	4a6e      	ldr	r2, [pc, #440]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002dba:	f043 0302 	orr.w	r3, r3, #2
 8002dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dc2:	4b6c      	ldr	r3, [pc, #432]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dd0:	4b68      	ldr	r3, [pc, #416]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd6:	4a67      	ldr	r2, [pc, #412]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002dd8:	f043 0308 	orr.w	r3, r3, #8
 8002ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002de0:	4b64      	ldr	r3, [pc, #400]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	607b      	str	r3, [r7, #4]
 8002dec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dee:	4b61      	ldr	r3, [pc, #388]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002df4:	4a5f      	ldr	r2, [pc, #380]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002df6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dfe:	4b5d      	ldr	r3, [pc, #372]	; (8002f74 <_ZL12MX_GPIO_Initv+0x250>)
 8002e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e08:	603b      	str	r3, [r7, #0]
 8002e0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f644 2121 	movw	r1, #18977	; 0x4a21
 8002e12:	4859      	ldr	r0, [pc, #356]	; (8002f78 <_ZL12MX_GPIO_Initv+0x254>)
 8002e14:	f003 ffda 	bl	8006dcc <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f24c 0102 	movw	r1, #49154	; 0xc002
 8002e1e:	4857      	ldr	r0, [pc, #348]	; (8002f7c <_ZL12MX_GPIO_Initv+0x258>)
 8002e20:	f003 ffd4 	bl	8006dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002e24:	2200      	movs	r2, #0
 8002e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e2a:	4855      	ldr	r0, [pc, #340]	; (8002f80 <_ZL12MX_GPIO_Initv+0x25c>)
 8002e2c:	f003 ffce 	bl	8006dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8002e30:	2200      	movs	r2, #0
 8002e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e36:	4853      	ldr	r0, [pc, #332]	; (8002f84 <_ZL12MX_GPIO_Initv+0x260>)
 8002e38:	f003 ffc8 	bl	8006dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e42:	4851      	ldr	r0, [pc, #324]	; (8002f88 <_ZL12MX_GPIO_Initv+0x264>)
 8002e44:	f003 ffc2 	bl	8006dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 8002e48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e54:	2300      	movs	r3, #0
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 8002e58:	f107 031c 	add.w	r3, r7, #28
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4849      	ldr	r0, [pc, #292]	; (8002f84 <_ZL12MX_GPIO_Initv+0x260>)
 8002e60:	f003 fe04 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002e64:	f644 2321 	movw	r3, #18977	; 0x4a21
 8002e68:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e72:	2300      	movs	r3, #0
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e76:	f107 031c 	add.w	r3, r7, #28
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	483e      	ldr	r0, [pc, #248]	; (8002f78 <_ZL12MX_GPIO_Initv+0x254>)
 8002e7e:	f003 fdf5 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8002e82:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e92:	f107 031c 	add.w	r3, r7, #28
 8002e96:	4619      	mov	r1, r3
 8002e98:	4838      	ldr	r0, [pc, #224]	; (8002f7c <_ZL12MX_GPIO_Initv+0x258>)
 8002e9a:	f003 fde7 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8002e9e:	f24c 0302 	movw	r3, #49154	; 0xc002
 8002ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eac:	2300      	movs	r3, #0
 8002eae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eb0:	f107 031c 	add.w	r3, r7, #28
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4831      	ldr	r0, [pc, #196]	; (8002f7c <_ZL12MX_GPIO_Initv+0x258>)
 8002eb8:	f003 fdd8 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002ebc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ec0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002ece:	f107 031c 	add.w	r3, r7, #28
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	482a      	ldr	r0, [pc, #168]	; (8002f80 <_ZL12MX_GPIO_Initv+0x25c>)
 8002ed6:	f003 fdc9 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8002eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8002eec:	f107 031c 	add.w	r3, r7, #28
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4824      	ldr	r0, [pc, #144]	; (8002f84 <_ZL12MX_GPIO_Initv+0x260>)
 8002ef4:	f003 fdba 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_DE_Pin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8002ef8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efe:	2301      	movs	r3, #1
 8002f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f02:	2300      	movs	r3, #0
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f06:	2300      	movs	r3, #0
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8002f0a:	f107 031c 	add.w	r3, r7, #28
 8002f0e:	4619      	mov	r1, r3
 8002f10:	481d      	ldr	r0, [pc, #116]	; (8002f88 <_ZL12MX_GPIO_Initv+0x264>)
 8002f12:	f003 fdab 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8002f16:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8002f26:	f107 031c 	add.w	r3, r7, #28
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4817      	ldr	r0, [pc, #92]	; (8002f8c <_ZL12MX_GPIO_Initv+0x268>)
 8002f2e:	f003 fd9d 	bl	8006a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8002f32:	23c0      	movs	r3, #192	; 0xc0
 8002f34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f40:	f107 031c 	add.w	r3, r7, #28
 8002f44:	4619      	mov	r1, r3
 8002f46:	480c      	ldr	r0, [pc, #48]	; (8002f78 <_ZL12MX_GPIO_Initv+0x254>)
 8002f48:	f003 fd90 	bl	8006a6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2100      	movs	r1, #0
 8002f50:	2017      	movs	r0, #23
 8002f52:	f001 fa3c 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f56:	2017      	movs	r0, #23
 8002f58:	f001 fa53 	bl	8004402 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2100      	movs	r1, #0
 8002f60:	2028      	movs	r0, #40	; 0x28
 8002f62:	f001 fa34 	bl	80043ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f66:	2028      	movs	r0, #40	; 0x28
 8002f68:	f001 fa4b 	bl	8004402 <HAL_NVIC_EnableIRQ>

}
 8002f6c:	bf00      	nop
 8002f6e:	3730      	adds	r7, #48	; 0x30
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	58024400 	.word	0x58024400
 8002f78:	58020400 	.word	0x58020400
 8002f7c:	58021000 	.word	0x58021000
 8002f80:	58020c00 	.word	0x58020c00
 8002f84:	58020800 	.word	0x58020800
 8002f88:	58020000 	.word	0x58020000
 8002f8c:	58021800 	.word	0x58021800

08002f90 <HAL_GPIO_EXTI_Callback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {

}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	4603      	mov	r3, r0
 8002f98:	80fb      	strh	r3, [r7, #6]

}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002fac:	2200      	movs	r2, #0
 8002fae:	2101      	movs	r1, #1
 8002fb0:	4808      	ldr	r0, [pc, #32]	; (8002fd4 <Error_Handler+0x2c>)
 8002fb2:	f003 ff0b 	bl	8006dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2102      	movs	r1, #2
 8002fba:	4807      	ldr	r0, [pc, #28]	; (8002fd8 <Error_Handler+0x30>)
 8002fbc:	f003 ff06 	bl	8006dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002fc6:	4803      	ldr	r0, [pc, #12]	; (8002fd4 <Error_Handler+0x2c>)
 8002fc8:	f003 ff00 	bl	8006dcc <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fcc:	b672      	cpsid	i
}
 8002fce:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002fd0:	e7fe      	b.n	8002fd0 <Error_Handler+0x28>
 8002fd2:	bf00      	nop
 8002fd4:	58020400 	.word	0x58020400
 8002fd8:	58021000 	.word	0x58021000

08002fdc <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002fe6:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8002fe8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002fec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	ee06 3a90 	vmov	s13, r3
 8002ff6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8002ffa:	eeb0 1b46 	vmov.f64	d1, d6
 8002ffe:	eeb0 0b47 	vmov.f64	d0, d7
 8003002:	f009 fd45 	bl	800ca90 <pow>
 8003006:	eeb0 7b40 	vmov.f64	d7, d0
    }
 800300a:	eeb0 0b47 	vmov.f64	d0, d7
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af02      	add	r7, sp, #8
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b01      	cmp	r3, #1
 8003022:	f040 80ca 	bne.w	80031ba <_Z41__static_initialization_and_destruction_0ii+0x1a6>
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800302c:	4293      	cmp	r3, r2
 800302e:	f040 80c4 	bne.w	80031ba <_Z41__static_initialization_and_destruction_0ii+0x1a6>
AMT21 encoderJ1(&huart4, 0xD4);
 8003032:	22d4      	movs	r2, #212	; 0xd4
 8003034:	496b      	ldr	r1, [pc, #428]	; (80031e4 <_Z41__static_initialization_and_destruction_0ii+0x1d0>)
 8003036:	486c      	ldr	r0, [pc, #432]	; (80031e8 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8003038:	f7fd fb26 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 800303c:	2320      	movs	r3, #32
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	4b6a      	ldr	r3, [pc, #424]	; (80031ec <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8003042:	2200      	movs	r2, #0
 8003044:	496a      	ldr	r1, [pc, #424]	; (80031f0 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8003046:	486b      	ldr	r0, [pc, #428]	; (80031f4 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8003048:	f7fd fc12 	bl	8000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 800304c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	4b69      	ldr	r3, [pc, #420]	; (80031f8 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8003054:	2204      	movs	r2, #4
 8003056:	4969      	ldr	r1, [pc, #420]	; (80031fc <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8003058:	4869      	ldr	r0, [pc, #420]	; (8003200 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 800305a:	f7fd fc09 	bl	8000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
volatile const float C2_q1 = (3.0*C0_q1) / (Time*Time);
 800305e:	4b69      	ldr	r3, [pc, #420]	; (8003204 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8003060:	edd3 7a00 	vldr	s15, [r3]
 8003064:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003068:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800306c:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003070:	4b65      	ldr	r3, [pc, #404]	; (8003208 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8003072:	ed93 7a00 	vldr	s14, [r3]
 8003076:	4b64      	ldr	r3, [pc, #400]	; (8003208 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8003078:	edd3 7a00 	vldr	s15, [r3]
 800307c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003080:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003084:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003088:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800308c:	4b5f      	ldr	r3, [pc, #380]	; (800320c <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 800308e:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = (2.0*C0_q1) / (Time*Time*Time);
 8003092:	4b5c      	ldr	r3, [pc, #368]	; (8003204 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800309c:	ee37 5b07 	vadd.f64	d5, d7, d7
 80030a0:	4b59      	ldr	r3, [pc, #356]	; (8003208 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80030a2:	ed93 7a00 	vldr	s14, [r3]
 80030a6:	4b58      	ldr	r3, [pc, #352]	; (8003208 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80030a8:	edd3 7a00 	vldr	s15, [r3]
 80030ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b0:	4b55      	ldr	r3, [pc, #340]	; (8003208 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ba:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80030be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80030c2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030c6:	4b52      	ldr	r3, [pc, #328]	; (8003210 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 80030c8:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = (3.0*C0_q3) / (Time*Time);
 80030cc:	4b51      	ldr	r3, [pc, #324]	; (8003214 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80030ce:	edd3 7a00 	vldr	s15, [r3]
 80030d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80030d6:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80030da:	ee27 5b06 	vmul.f64	d5, d7, d6
 80030de:	4b4a      	ldr	r3, [pc, #296]	; (8003208 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80030e0:	ed93 7a00 	vldr	s14, [r3]
 80030e4:	4b48      	ldr	r3, [pc, #288]	; (8003208 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ee:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80030f2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80030f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80030fa:	4b47      	ldr	r3, [pc, #284]	; (8003218 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80030fc:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = (2.0*C0_q3) / (Time*Time*Time);
 8003100:	4b44      	ldr	r3, [pc, #272]	; (8003214 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8003102:	edd3 7a00 	vldr	s15, [r3]
 8003106:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800310a:	ee37 5b07 	vadd.f64	d5, d7, d7
 800310e:	4b3e      	ldr	r3, [pc, #248]	; (8003208 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8003110:	ed93 7a00 	vldr	s14, [r3]
 8003114:	4b3c      	ldr	r3, [pc, #240]	; (8003208 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8003116:	edd3 7a00 	vldr	s15, [r3]
 800311a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800311e:	4b3a      	ldr	r3, [pc, #232]	; (8003208 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8003120:	edd3 7a00 	vldr	s15, [r3]
 8003124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003128:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800312c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003130:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003134:	4b39      	ldr	r3, [pc, #228]	; (800321c <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8003136:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt = sample_time_1000;
 800313a:	4b39      	ldr	r3, [pc, #228]	; (8003220 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a39      	ldr	r2, [pc, #228]	; (8003224 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8003140:	6013      	str	r3, [r2, #0]
volatile const float dt2 = dt*dt;
 8003142:	4b38      	ldr	r3, [pc, #224]	; (8003224 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8003144:	ed93 7a00 	vldr	s14, [r3]
 8003148:	4b36      	ldr	r3, [pc, #216]	; (8003224 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800314a:	edd3 7a00 	vldr	s15, [r3]
 800314e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003152:	4b35      	ldr	r3, [pc, #212]	; (8003228 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003154:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt3 = dt*dt*dt;
 8003158:	4b32      	ldr	r3, [pc, #200]	; (8003224 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800315a:	ed93 7a00 	vldr	s14, [r3]
 800315e:	4b31      	ldr	r3, [pc, #196]	; (8003224 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8003160:	edd3 7a00 	vldr	s15, [r3]
 8003164:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003168:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003172:	4b2e      	ldr	r3, [pc, #184]	; (800322c <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003174:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt4 = dt*dt*dt*dt;
 8003178:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800317a:	ed93 7a00 	vldr	s14, [r3]
 800317e:	4b29      	ldr	r3, [pc, #164]	; (8003224 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8003180:	edd3 7a00 	vldr	s15, [r3]
 8003184:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003188:	4b26      	ldr	r3, [pc, #152]	; (8003224 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 800318a:	edd3 7a00 	vldr	s15, [r3]
 800318e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003192:	4b24      	ldr	r3, [pc, #144]	; (8003224 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8003194:	edd3 7a00 	vldr	s15, [r3]
 8003198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800319c:	4b24      	ldr	r3, [pc, #144]	; (8003230 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 800319e:	edc3 7a00 	vstr	s15, [r3]
fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;
 80031a2:	4824      	ldr	r0, [pc, #144]	; (8003234 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 80031a4:	f7fd feb4 	bl	8000f10 <_ZN11robot_jointC1Ev>
 80031a8:	4823      	ldr	r0, [pc, #140]	; (8003238 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 80031aa:	f7fd feb1 	bl	8000f10 <_ZN11robot_jointC1Ev>
 80031ae:	4823      	ldr	r0, [pc, #140]	; (800323c <_Z41__static_initialization_and_destruction_0ii+0x228>)
 80031b0:	f7fd feae 	bl	8000f10 <_ZN11robot_jointC1Ev>
 80031b4:	4822      	ldr	r0, [pc, #136]	; (8003240 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 80031b6:	f7fd feab 	bl	8000f10 <_ZN11robot_jointC1Ev>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10d      	bne.n	80031dc <_Z41__static_initialization_and_destruction_0ii+0x1c8>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d108      	bne.n	80031dc <_Z41__static_initialization_and_destruction_0ii+0x1c8>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 80031ca:	480d      	ldr	r0, [pc, #52]	; (8003200 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 80031cc:	f7fd fb94 	bl	80008f8 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 80031d0:	4808      	ldr	r0, [pc, #32]	; (80031f4 <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 80031d2:	f7fd fb91 	bl	80008f8 <_ZN7StepperD1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 80031d6:	4804      	ldr	r0, [pc, #16]	; (80031e8 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 80031d8:	f7fd fa6a 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 80031dc:	bf00      	nop
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	24000600 	.word	0x24000600
 80031e8:	24000a08 	.word	0x24000a08
 80031ec:	58020400 	.word	0x58020400
 80031f0:	24000354 	.word	0x24000354
 80031f4:	24000a1c 	.word	0x24000a1c
 80031f8:	58021000 	.word	0x58021000
 80031fc:	240005b4 	.word	0x240005b4
 8003200:	24000a44 	.word	0x24000a44
 8003204:	24000004 	.word	0x24000004
 8003208:	24000000 	.word	0x24000000
 800320c:	24000a7c 	.word	0x24000a7c
 8003210:	24000a80 	.word	0x24000a80
 8003214:	24000008 	.word	0x24000008
 8003218:	24000a84 	.word	0x24000a84
 800321c:	24000a88 	.word	0x24000a88
 8003220:	2400000c 	.word	0x2400000c
 8003224:	24000a90 	.word	0x24000a90
 8003228:	24000a94 	.word	0x24000a94
 800322c:	24000a98 	.word	0x24000a98
 8003230:	24000a9c 	.word	0x24000a9c
 8003234:	24000aa8 	.word	0x24000aa8
 8003238:	24000b2c 	.word	0x24000b2c
 800323c:	24000bb0 	.word	0x24000bb0
 8003240:	24000c34 	.word	0x24000c34

08003244 <_GLOBAL__sub_I_hcrc>:
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
 8003248:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800324c:	2001      	movs	r0, #1
 800324e:	f7ff fee1 	bl	8003014 <_Z41__static_initialization_and_destruction_0ii>
 8003252:	bd80      	pop	{r7, pc}

08003254 <_GLOBAL__sub_D_hcrc>:
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
 8003258:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800325c:	2000      	movs	r0, #0
 800325e:	f7ff fed9 	bl	8003014 <_Z41__static_initialization_and_destruction_0ii>
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326a:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <HAL_MspInit+0x30>)
 800326c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003270:	4a08      	ldr	r2, [pc, #32]	; (8003294 <HAL_MspInit+0x30>)
 8003272:	f043 0302 	orr.w	r3, r3, #2
 8003276:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_MspInit+0x30>)
 800327c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	607b      	str	r3, [r7, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	58024400 	.word	0x58024400

08003298 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0b      	ldr	r2, [pc, #44]	; (80032d4 <HAL_CRC_MspInit+0x3c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d10e      	bne.n	80032c8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80032aa:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_CRC_MspInit+0x40>)
 80032ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b0:	4a09      	ldr	r2, [pc, #36]	; (80032d8 <HAL_CRC_MspInit+0x40>)
 80032b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80032b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ba:	4b07      	ldr	r3, [pc, #28]	; (80032d8 <HAL_CRC_MspInit+0x40>)
 80032bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80032c8:	bf00      	nop
 80032ca:	3714      	adds	r7, #20
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	58024c00 	.word	0x58024c00
 80032d8:	58024400 	.word	0x58024400

080032dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b0b8      	sub	sp, #224	; 0xe0
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	605a      	str	r2, [r3, #4]
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	60da      	str	r2, [r3, #12]
 80032f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032f4:	f107 0310 	add.w	r3, r7, #16
 80032f8:	22bc      	movs	r2, #188	; 0xbc
 80032fa:	2100      	movs	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f009 ff33 	bl	800d168 <memset>
  if(hspi->Instance==SPI3)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a25      	ldr	r2, [pc, #148]	; (800339c <HAL_SPI_MspInit+0xc0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d142      	bne.n	8003392 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 800330c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003310:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003312:	2300      	movs	r3, #0
 8003314:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003316:	f107 0310 	add.w	r3, r7, #16
 800331a:	4618      	mov	r0, r3
 800331c:	f004 fd7c 	bl	8007e18 <HAL_RCCEx_PeriphCLKConfig>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8003326:	f7ff fe3f 	bl	8002fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <HAL_SPI_MspInit+0xc4>)
 800332c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003330:	4a1b      	ldr	r2, [pc, #108]	; (80033a0 <HAL_SPI_MspInit+0xc4>)
 8003332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003336:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800333a:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <HAL_SPI_MspInit+0xc4>)
 800333c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003344:	60fb      	str	r3, [r7, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003348:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <HAL_SPI_MspInit+0xc4>)
 800334a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800334e:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <HAL_SPI_MspInit+0xc4>)
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <HAL_SPI_MspInit+0xc4>)
 800335a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800335e:	f003 0304 	and.w	r3, r3, #4
 8003362:	60bb      	str	r3, [r7, #8]
 8003364:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003366:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800336a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336e:	2302      	movs	r3, #2
 8003370:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003380:	2306      	movs	r3, #6
 8003382:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003386:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800338a:	4619      	mov	r1, r3
 800338c:	4805      	ldr	r0, [pc, #20]	; (80033a4 <HAL_SPI_MspInit+0xc8>)
 800338e:	f003 fb6d 	bl	8006a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003392:	bf00      	nop
 8003394:	37e0      	adds	r7, #224	; 0xe0
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40003c00 	.word	0x40003c00
 80033a0:	58024400 	.word	0x58024400
 80033a4:	58020800 	.word	0x58020800

080033a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08e      	sub	sp, #56	; 0x38
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a8b      	ldr	r2, [pc, #556]	; (80035e4 <HAL_TIM_Base_MspInit+0x23c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d10f      	bne.n	80033da <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033ba:	4b8b      	ldr	r3, [pc, #556]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 80033bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033c0:	4a89      	ldr	r2, [pc, #548]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80033ca:	4b87      	ldr	r3, [pc, #540]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 80033cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	637b      	str	r3, [r7, #52]	; 0x34
 80033d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80033d8:	e100      	b.n	80035dc <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM2)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e2:	d10f      	bne.n	8003404 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80033e4:	4b80      	ldr	r3, [pc, #512]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 80033e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033ea:	4a7f      	ldr	r2, [pc, #508]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033f4:	4b7c      	ldr	r3, [pc, #496]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 80033f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	633b      	str	r3, [r7, #48]	; 0x30
 8003400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003402:	e0eb      	b.n	80035dc <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM3)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a78      	ldr	r2, [pc, #480]	; (80035ec <HAL_TIM_Base_MspInit+0x244>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d10f      	bne.n	800342e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800340e:	4b76      	ldr	r3, [pc, #472]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 8003410:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003414:	4a74      	ldr	r2, [pc, #464]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 8003416:	f043 0302 	orr.w	r3, r3, #2
 800341a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800341e:	4b72      	ldr	r3, [pc, #456]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 8003420:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800342c:	e0d6      	b.n	80035dc <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM4)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a6f      	ldr	r2, [pc, #444]	; (80035f0 <HAL_TIM_Base_MspInit+0x248>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d10f      	bne.n	8003458 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003438:	4b6b      	ldr	r3, [pc, #428]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 800343a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800343e:	4a6a      	ldr	r2, [pc, #424]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 8003440:	f043 0304 	orr.w	r3, r3, #4
 8003444:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003448:	4b67      	ldr	r3, [pc, #412]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 800344a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
 8003454:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003456:	e0c1      	b.n	80035dc <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM5)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a65      	ldr	r2, [pc, #404]	; (80035f4 <HAL_TIM_Base_MspInit+0x24c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d117      	bne.n	8003492 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003462:	4b61      	ldr	r3, [pc, #388]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 8003464:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003468:	4a5f      	ldr	r2, [pc, #380]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 800346a:	f043 0308 	orr.w	r3, r3, #8
 800346e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003472:	4b5d      	ldr	r3, [pc, #372]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 8003474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003480:	2200      	movs	r2, #0
 8003482:	2100      	movs	r1, #0
 8003484:	2032      	movs	r0, #50	; 0x32
 8003486:	f000 ffa2 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800348a:	2032      	movs	r0, #50	; 0x32
 800348c:	f000 ffb9 	bl	8004402 <HAL_NVIC_EnableIRQ>
}
 8003490:	e0a4      	b.n	80035dc <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM6)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a58      	ldr	r2, [pc, #352]	; (80035f8 <HAL_TIM_Base_MspInit+0x250>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d117      	bne.n	80034cc <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800349c:	4b52      	ldr	r3, [pc, #328]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 800349e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034a2:	4a51      	ldr	r2, [pc, #324]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 80034a4:	f043 0310 	orr.w	r3, r3, #16
 80034a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034ac:	4b4e      	ldr	r3, [pc, #312]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 80034ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034b2:	f003 0310 	and.w	r3, r3, #16
 80034b6:	623b      	str	r3, [r7, #32]
 80034b8:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80034ba:	2200      	movs	r2, #0
 80034bc:	2100      	movs	r1, #0
 80034be:	2036      	movs	r0, #54	; 0x36
 80034c0:	f000 ff85 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034c4:	2036      	movs	r0, #54	; 0x36
 80034c6:	f000 ff9c 	bl	8004402 <HAL_NVIC_EnableIRQ>
}
 80034ca:	e087      	b.n	80035dc <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM7)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a4a      	ldr	r2, [pc, #296]	; (80035fc <HAL_TIM_Base_MspInit+0x254>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d117      	bne.n	8003506 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80034d6:	4b44      	ldr	r3, [pc, #272]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 80034d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034dc:	4a42      	ldr	r2, [pc, #264]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 80034de:	f043 0320 	orr.w	r3, r3, #32
 80034e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034e6:	4b40      	ldr	r3, [pc, #256]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 80034e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034ec:	f003 0320 	and.w	r3, r3, #32
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80034f4:	2200      	movs	r2, #0
 80034f6:	2100      	movs	r1, #0
 80034f8:	2037      	movs	r0, #55	; 0x37
 80034fa:	f000 ff68 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80034fe:	2037      	movs	r0, #55	; 0x37
 8003500:	f000 ff7f 	bl	8004402 <HAL_NVIC_EnableIRQ>
}
 8003504:	e06a      	b.n	80035dc <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM12)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a3d      	ldr	r2, [pc, #244]	; (8003600 <HAL_TIM_Base_MspInit+0x258>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d117      	bne.n	8003540 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003510:	4b35      	ldr	r3, [pc, #212]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 8003512:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003516:	4a34      	ldr	r2, [pc, #208]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 8003518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800351c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003520:	4b31      	ldr	r3, [pc, #196]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 8003522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352a:	61bb      	str	r3, [r7, #24]
 800352c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800352e:	2200      	movs	r2, #0
 8003530:	2100      	movs	r1, #0
 8003532:	202b      	movs	r0, #43	; 0x2b
 8003534:	f000 ff4b 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003538:	202b      	movs	r0, #43	; 0x2b
 800353a:	f000 ff62 	bl	8004402 <HAL_NVIC_EnableIRQ>
}
 800353e:	e04d      	b.n	80035dc <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM13)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2f      	ldr	r2, [pc, #188]	; (8003604 <HAL_TIM_Base_MspInit+0x25c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d117      	bne.n	800357a <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800354a:	4b27      	ldr	r3, [pc, #156]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 800354c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003550:	4a25      	ldr	r2, [pc, #148]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 8003552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003556:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800355a:	4b23      	ldr	r3, [pc, #140]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 800355c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003568:	2200      	movs	r2, #0
 800356a:	2100      	movs	r1, #0
 800356c:	202c      	movs	r0, #44	; 0x2c
 800356e:	f000 ff2e 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003572:	202c      	movs	r0, #44	; 0x2c
 8003574:	f000 ff45 	bl	8004402 <HAL_NVIC_EnableIRQ>
}
 8003578:	e030      	b.n	80035dc <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM14)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a22      	ldr	r2, [pc, #136]	; (8003608 <HAL_TIM_Base_MspInit+0x260>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d117      	bne.n	80035b4 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003584:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 8003586:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800358a:	4a17      	ldr	r2, [pc, #92]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 800358c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003590:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003594:	4b14      	ldr	r3, [pc, #80]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 8003596:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	613b      	str	r3, [r7, #16]
 80035a0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2100      	movs	r1, #0
 80035a6:	202d      	movs	r0, #45	; 0x2d
 80035a8:	f000 ff11 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80035ac:	202d      	movs	r0, #45	; 0x2d
 80035ae:	f000 ff28 	bl	8004402 <HAL_NVIC_EnableIRQ>
}
 80035b2:	e013      	b.n	80035dc <HAL_TIM_Base_MspInit+0x234>
  else if(htim_base->Instance==TIM15)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a14      	ldr	r2, [pc, #80]	; (800360c <HAL_TIM_Base_MspInit+0x264>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d10e      	bne.n	80035dc <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80035be:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 80035c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035c4:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 80035c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <HAL_TIM_Base_MspInit+0x240>)
 80035d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80035d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
}
 80035dc:	bf00      	nop
 80035de:	3738      	adds	r7, #56	; 0x38
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40010000 	.word	0x40010000
 80035e8:	58024400 	.word	0x58024400
 80035ec:	40000400 	.word	0x40000400
 80035f0:	40000800 	.word	0x40000800
 80035f4:	40000c00 	.word	0x40000c00
 80035f8:	40001000 	.word	0x40001000
 80035fc:	40001400 	.word	0x40001400
 8003600:	40001800 	.word	0x40001800
 8003604:	40001c00 	.word	0x40001c00
 8003608:	40002000 	.word	0x40002000
 800360c:	40014000 	.word	0x40014000

08003610 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08c      	sub	sp, #48	; 0x30
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003618:	f107 031c 	add.w	r3, r7, #28
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a5e      	ldr	r2, [pc, #376]	; (80037a8 <HAL_TIM_MspPostInit+0x198>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d120      	bne.n	8003674 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003632:	4b5e      	ldr	r3, [pc, #376]	; (80037ac <HAL_TIM_MspPostInit+0x19c>)
 8003634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003638:	4a5c      	ldr	r2, [pc, #368]	; (80037ac <HAL_TIM_MspPostInit+0x19c>)
 800363a:	f043 0310 	orr.w	r3, r3, #16
 800363e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003642:	4b5a      	ldr	r3, [pc, #360]	; (80037ac <HAL_TIM_MspPostInit+0x19c>)
 8003644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8003650:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003656:	2302      	movs	r3, #2
 8003658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365a:	2300      	movs	r3, #0
 800365c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365e:	2300      	movs	r3, #0
 8003660:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003662:	2301      	movs	r3, #1
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8003666:	f107 031c 	add.w	r3, r7, #28
 800366a:	4619      	mov	r1, r3
 800366c:	4850      	ldr	r0, [pc, #320]	; (80037b0 <HAL_TIM_MspPostInit+0x1a0>)
 800366e:	f003 f9fd 	bl	8006a6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003672:	e094      	b.n	800379e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367c:	d120      	bne.n	80036c0 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800367e:	4b4b      	ldr	r3, [pc, #300]	; (80037ac <HAL_TIM_MspPostInit+0x19c>)
 8003680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003684:	4a49      	ldr	r2, [pc, #292]	; (80037ac <HAL_TIM_MspPostInit+0x19c>)
 8003686:	f043 0302 	orr.w	r3, r3, #2
 800368a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800368e:	4b47      	ldr	r3, [pc, #284]	; (80037ac <HAL_TIM_MspPostInit+0x19c>)
 8003690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 800369c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2302      	movs	r3, #2
 80036a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a6:	2300      	movs	r3, #0
 80036a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036aa:	2300      	movs	r3, #0
 80036ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036ae:	2301      	movs	r3, #1
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 80036b2:	f107 031c 	add.w	r3, r7, #28
 80036b6:	4619      	mov	r1, r3
 80036b8:	483e      	ldr	r0, [pc, #248]	; (80037b4 <HAL_TIM_MspPostInit+0x1a4>)
 80036ba:	f003 f9d7 	bl	8006a6c <HAL_GPIO_Init>
}
 80036be:	e06e      	b.n	800379e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a3c      	ldr	r2, [pc, #240]	; (80037b8 <HAL_TIM_MspPostInit+0x1a8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d11f      	bne.n	800370a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ca:	4b38      	ldr	r3, [pc, #224]	; (80037ac <HAL_TIM_MspPostInit+0x19c>)
 80036cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036d0:	4a36      	ldr	r2, [pc, #216]	; (80037ac <HAL_TIM_MspPostInit+0x19c>)
 80036d2:	f043 0301 	orr.w	r3, r3, #1
 80036d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036da:	4b34      	ldr	r3, [pc, #208]	; (80037ac <HAL_TIM_MspPostInit+0x19c>)
 80036dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 80036e8:	2340      	movs	r3, #64	; 0x40
 80036ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ec:	2302      	movs	r3, #2
 80036ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f0:	2300      	movs	r3, #0
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f4:	2300      	movs	r3, #0
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036f8:	2302      	movs	r3, #2
 80036fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 80036fc:	f107 031c 	add.w	r3, r7, #28
 8003700:	4619      	mov	r1, r3
 8003702:	482e      	ldr	r0, [pc, #184]	; (80037bc <HAL_TIM_MspPostInit+0x1ac>)
 8003704:	f003 f9b2 	bl	8006a6c <HAL_GPIO_Init>
}
 8003708:	e049      	b.n	800379e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a2c      	ldr	r2, [pc, #176]	; (80037c0 <HAL_TIM_MspPostInit+0x1b0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d120      	bne.n	8003756 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003714:	4b25      	ldr	r3, [pc, #148]	; (80037ac <HAL_TIM_MspPostInit+0x19c>)
 8003716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800371a:	4a24      	ldr	r2, [pc, #144]	; (80037ac <HAL_TIM_MspPostInit+0x19c>)
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003724:	4b21      	ldr	r3, [pc, #132]	; (80037ac <HAL_TIM_MspPostInit+0x19c>)
 8003726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8003732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003738:	2302      	movs	r3, #2
 800373a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373c:	2300      	movs	r3, #0
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003740:	2300      	movs	r3, #0
 8003742:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003744:	2302      	movs	r3, #2
 8003746:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8003748:	f107 031c 	add.w	r3, r7, #28
 800374c:	4619      	mov	r1, r3
 800374e:	4819      	ldr	r0, [pc, #100]	; (80037b4 <HAL_TIM_MspPostInit+0x1a4>)
 8003750:	f003 f98c 	bl	8006a6c <HAL_GPIO_Init>
}
 8003754:	e023      	b.n	800379e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <HAL_TIM_MspPostInit+0x1b4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d11e      	bne.n	800379e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003760:	4b12      	ldr	r3, [pc, #72]	; (80037ac <HAL_TIM_MspPostInit+0x19c>)
 8003762:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003766:	4a11      	ldr	r2, [pc, #68]	; (80037ac <HAL_TIM_MspPostInit+0x19c>)
 8003768:	f043 0310 	orr.w	r3, r3, #16
 800376c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <HAL_TIM_MspPostInit+0x19c>)
 8003772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003776:	f003 0310 	and.w	r3, r3, #16
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 800377e:	2340      	movs	r3, #64	; 0x40
 8003780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003782:	2302      	movs	r3, #2
 8003784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800378a:	2300      	movs	r3, #0
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 800378e:	2304      	movs	r3, #4
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8003792:	f107 031c 	add.w	r3, r7, #28
 8003796:	4619      	mov	r1, r3
 8003798:	4805      	ldr	r0, [pc, #20]	; (80037b0 <HAL_TIM_MspPostInit+0x1a0>)
 800379a:	f003 f967 	bl	8006a6c <HAL_GPIO_Init>
}
 800379e:	bf00      	nop
 80037a0:	3730      	adds	r7, #48	; 0x30
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40010000 	.word	0x40010000
 80037ac:	58024400 	.word	0x58024400
 80037b0:	58021000 	.word	0x58021000
 80037b4:	58020400 	.word	0x58020400
 80037b8:	40000400 	.word	0x40000400
 80037bc:	58020000 	.word	0x58020000
 80037c0:	40000800 	.word	0x40000800
 80037c4:	40014000 	.word	0x40014000

080037c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b0bc      	sub	sp, #240	; 0xf0
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	609a      	str	r2, [r3, #8]
 80037dc:	60da      	str	r2, [r3, #12]
 80037de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037e0:	f107 0320 	add.w	r3, r7, #32
 80037e4:	22bc      	movs	r2, #188	; 0xbc
 80037e6:	2100      	movs	r1, #0
 80037e8:	4618      	mov	r0, r3
 80037ea:	f009 fcbd 	bl	800d168 <memset>
  if(huart->Instance==UART4)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4aa1      	ldr	r2, [pc, #644]	; (8003a78 <HAL_UART_MspInit+0x2b0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	f040 80b7 	bne.w	8003968 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80037fa:	2302      	movs	r3, #2
 80037fc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80037fe:	2300      	movs	r3, #0
 8003800:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003804:	f107 0320 	add.w	r3, r7, #32
 8003808:	4618      	mov	r0, r3
 800380a:	f004 fb05 	bl	8007e18 <HAL_RCCEx_PeriphCLKConfig>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003814:	f7ff fbc8 	bl	8002fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003818:	4b98      	ldr	r3, [pc, #608]	; (8003a7c <HAL_UART_MspInit+0x2b4>)
 800381a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800381e:	4a97      	ldr	r2, [pc, #604]	; (8003a7c <HAL_UART_MspInit+0x2b4>)
 8003820:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003824:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003828:	4b94      	ldr	r3, [pc, #592]	; (8003a7c <HAL_UART_MspInit+0x2b4>)
 800382a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800382e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003832:	61fb      	str	r3, [r7, #28]
 8003834:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003836:	4b91      	ldr	r3, [pc, #580]	; (8003a7c <HAL_UART_MspInit+0x2b4>)
 8003838:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800383c:	4a8f      	ldr	r2, [pc, #572]	; (8003a7c <HAL_UART_MspInit+0x2b4>)
 800383e:	f043 0308 	orr.w	r3, r3, #8
 8003842:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003846:	4b8d      	ldr	r3, [pc, #564]	; (8003a7c <HAL_UART_MspInit+0x2b4>)
 8003848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003854:	2303      	movs	r3, #3
 8003856:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800385a:	2302      	movs	r3, #2
 800385c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003860:	2300      	movs	r3, #0
 8003862:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003866:	2300      	movs	r3, #0
 8003868:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800386c:	2308      	movs	r3, #8
 800386e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003872:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003876:	4619      	mov	r1, r3
 8003878:	4881      	ldr	r0, [pc, #516]	; (8003a80 <HAL_UART_MspInit+0x2b8>)
 800387a:	f003 f8f7 	bl	8006a6c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 800387e:	4b81      	ldr	r3, [pc, #516]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 8003880:	4a81      	ldr	r2, [pc, #516]	; (8003a88 <HAL_UART_MspInit+0x2c0>)
 8003882:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 8003884:	4b7f      	ldr	r3, [pc, #508]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 8003886:	223f      	movs	r2, #63	; 0x3f
 8003888:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800388a:	4b7e      	ldr	r3, [pc, #504]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 800388c:	2200      	movs	r2, #0
 800388e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003890:	4b7c      	ldr	r3, [pc, #496]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 8003892:	2200      	movs	r2, #0
 8003894:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003896:	4b7b      	ldr	r3, [pc, #492]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 8003898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800389c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800389e:	4b79      	ldr	r3, [pc, #484]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038a4:	4b77      	ldr	r3, [pc, #476]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80038aa:	4b76      	ldr	r3, [pc, #472]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80038b0:	4b74      	ldr	r3, [pc, #464]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80038b6:	4b73      	ldr	r3, [pc, #460]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 80038b8:	2204      	movs	r2, #4
 80038ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80038bc:	4b71      	ldr	r3, [pc, #452]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 80038be:	2203      	movs	r2, #3
 80038c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80038c2:	4b70      	ldr	r3, [pc, #448]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80038c8:	4b6e      	ldr	r3, [pc, #440]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80038ce:	486d      	ldr	r0, [pc, #436]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 80038d0:	f000 fea8 	bl	8004624 <HAL_DMA_Init>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80038da:	f7ff fb65 	bl	8002fa8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a68      	ldr	r2, [pc, #416]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 80038e2:	67da      	str	r2, [r3, #124]	; 0x7c
 80038e4:	4a67      	ldr	r2, [pc, #412]	; (8003a84 <HAL_UART_MspInit+0x2bc>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80038ea:	4b68      	ldr	r3, [pc, #416]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 80038ec:	4a68      	ldr	r2, [pc, #416]	; (8003a90 <HAL_UART_MspInit+0x2c8>)
 80038ee:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 80038f0:	4b66      	ldr	r3, [pc, #408]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 80038f2:	2240      	movs	r2, #64	; 0x40
 80038f4:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038f6:	4b65      	ldr	r3, [pc, #404]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 80038f8:	2240      	movs	r2, #64	; 0x40
 80038fa:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038fc:	4b63      	ldr	r3, [pc, #396]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 80038fe:	2200      	movs	r2, #0
 8003900:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003902:	4b62      	ldr	r3, [pc, #392]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 8003904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003908:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800390a:	4b60      	ldr	r3, [pc, #384]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 800390c:	2200      	movs	r2, #0
 800390e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003910:	4b5e      	ldr	r3, [pc, #376]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 8003912:	2200      	movs	r2, #0
 8003914:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003916:	4b5d      	ldr	r3, [pc, #372]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 8003918:	2200      	movs	r2, #0
 800391a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800391c:	4b5b      	ldr	r3, [pc, #364]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 800391e:	2200      	movs	r2, #0
 8003920:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003922:	4b5a      	ldr	r3, [pc, #360]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 8003924:	2204      	movs	r2, #4
 8003926:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003928:	4b58      	ldr	r3, [pc, #352]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 800392a:	2203      	movs	r2, #3
 800392c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800392e:	4b57      	ldr	r3, [pc, #348]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 8003930:	2200      	movs	r2, #0
 8003932:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003934:	4b55      	ldr	r3, [pc, #340]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 8003936:	2200      	movs	r2, #0
 8003938:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800393a:	4854      	ldr	r0, [pc, #336]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 800393c:	f000 fe72 	bl	8004624 <HAL_DMA_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 8003946:	f7ff fb2f 	bl	8002fa8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a4f      	ldr	r2, [pc, #316]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 800394e:	679a      	str	r2, [r3, #120]	; 0x78
 8003950:	4a4e      	ldr	r2, [pc, #312]	; (8003a8c <HAL_UART_MspInit+0x2c4>)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003956:	2200      	movs	r2, #0
 8003958:	2100      	movs	r1, #0
 800395a:	2034      	movs	r0, #52	; 0x34
 800395c:	f000 fd37 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003960:	2034      	movs	r0, #52	; 0x34
 8003962:	f000 fd4e 	bl	8004402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003966:	e154      	b.n	8003c12 <HAL_UART_MspInit+0x44a>
  else if(huart->Instance==UART7)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a49      	ldr	r2, [pc, #292]	; (8003a94 <HAL_UART_MspInit+0x2cc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	f040 8098 	bne.w	8003aa4 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003974:	2302      	movs	r3, #2
 8003976:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003978:	2300      	movs	r3, #0
 800397a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800397e:	f107 0320 	add.w	r3, r7, #32
 8003982:	4618      	mov	r0, r3
 8003984:	f004 fa48 	bl	8007e18 <HAL_RCCEx_PeriphCLKConfig>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 800398e:	f7ff fb0b 	bl	8002fa8 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003992:	4b3a      	ldr	r3, [pc, #232]	; (8003a7c <HAL_UART_MspInit+0x2b4>)
 8003994:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003998:	4a38      	ldr	r2, [pc, #224]	; (8003a7c <HAL_UART_MspInit+0x2b4>)
 800399a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800399e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039a2:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <HAL_UART_MspInit+0x2b4>)
 80039a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039b0:	4b32      	ldr	r3, [pc, #200]	; (8003a7c <HAL_UART_MspInit+0x2b4>)
 80039b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039b6:	4a31      	ldr	r2, [pc, #196]	; (8003a7c <HAL_UART_MspInit+0x2b4>)
 80039b8:	f043 0310 	orr.w	r3, r3, #16
 80039bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039c0:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <HAL_UART_MspInit+0x2b4>)
 80039c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80039ce:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80039d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d6:	2302      	movs	r3, #2
 80039d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e2:	2300      	movs	r3, #0
 80039e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80039e8:	2307      	movs	r3, #7
 80039ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80039f2:	4619      	mov	r1, r3
 80039f4:	4828      	ldr	r0, [pc, #160]	; (8003a98 <HAL_UART_MspInit+0x2d0>)
 80039f6:	f003 f839 	bl	8006a6c <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 80039fa:	4b28      	ldr	r3, [pc, #160]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 80039fc:	4a28      	ldr	r2, [pc, #160]	; (8003aa0 <HAL_UART_MspInit+0x2d8>)
 80039fe:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8003a00:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 8003a02:	2250      	movs	r2, #80	; 0x50
 8003a04:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a06:	4b25      	ldr	r3, [pc, #148]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 8003a08:	2240      	movs	r2, #64	; 0x40
 8003a0a:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a0c:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 8003a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a18:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a1a:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a20:	4b1e      	ldr	r3, [pc, #120]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8003a26:	4b1d      	ldr	r3, [pc, #116]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a2c:	4b1b      	ldr	r3, [pc, #108]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003a32:	4b1a      	ldr	r3, [pc, #104]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 8003a34:	2204      	movs	r2, #4
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003a38:	4b18      	ldr	r3, [pc, #96]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003a3e:	4b17      	ldr	r3, [pc, #92]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003a44:	4b15      	ldr	r3, [pc, #84]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8003a4a:	4814      	ldr	r0, [pc, #80]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 8003a4c:	f000 fdea 	bl	8004624 <HAL_DMA_Init>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_UART_MspInit+0x292>
      Error_Handler();
 8003a56:	f7ff faa7 	bl	8002fa8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a0f      	ldr	r2, [pc, #60]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 8003a5e:	679a      	str	r2, [r3, #120]	; 0x78
 8003a60:	4a0e      	ldr	r2, [pc, #56]	; (8003a9c <HAL_UART_MspInit+0x2d4>)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8003a66:	2200      	movs	r2, #0
 8003a68:	2100      	movs	r1, #0
 8003a6a:	2052      	movs	r0, #82	; 0x52
 8003a6c:	f000 fcaf 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8003a70:	2052      	movs	r0, #82	; 0x52
 8003a72:	f000 fcc6 	bl	8004402 <HAL_NVIC_EnableIRQ>
}
 8003a76:	e0cc      	b.n	8003c12 <HAL_UART_MspInit+0x44a>
 8003a78:	40004c00 	.word	0x40004c00
 8003a7c:	58024400 	.word	0x58024400
 8003a80:	58020c00 	.word	0x58020c00
 8003a84:	240007b0 	.word	0x240007b0
 8003a88:	40020058 	.word	0x40020058
 8003a8c:	24000828 	.word	0x24000828
 8003a90:	40020070 	.word	0x40020070
 8003a94:	40007800 	.word	0x40007800
 8003a98:	58021000 	.word	0x58021000
 8003a9c:	240008a0 	.word	0x240008a0
 8003aa0:	40020010 	.word	0x40020010
  else if(huart->Instance==USART3)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a5c      	ldr	r2, [pc, #368]	; (8003c1c <HAL_UART_MspInit+0x454>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	f040 80b1 	bne.w	8003c12 <HAL_UART_MspInit+0x44a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003aba:	f107 0320 	add.w	r3, r7, #32
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f004 f9aa 	bl	8007e18 <HAL_RCCEx_PeriphCLKConfig>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <HAL_UART_MspInit+0x306>
      Error_Handler();
 8003aca:	f7ff fa6d 	bl	8002fa8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ace:	4b54      	ldr	r3, [pc, #336]	; (8003c20 <HAL_UART_MspInit+0x458>)
 8003ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ad4:	4a52      	ldr	r2, [pc, #328]	; (8003c20 <HAL_UART_MspInit+0x458>)
 8003ad6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ada:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ade:	4b50      	ldr	r3, [pc, #320]	; (8003c20 <HAL_UART_MspInit+0x458>)
 8003ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003aec:	4b4c      	ldr	r3, [pc, #304]	; (8003c20 <HAL_UART_MspInit+0x458>)
 8003aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af2:	4a4b      	ldr	r2, [pc, #300]	; (8003c20 <HAL_UART_MspInit+0x458>)
 8003af4:	f043 0308 	orr.w	r3, r3, #8
 8003af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003afc:	4b48      	ldr	r3, [pc, #288]	; (8003c20 <HAL_UART_MspInit+0x458>)
 8003afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003b0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b12:	2302      	movs	r3, #2
 8003b14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b24:	2307      	movs	r3, #7
 8003b26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b2a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003b2e:	4619      	mov	r1, r3
 8003b30:	483c      	ldr	r0, [pc, #240]	; (8003c24 <HAL_UART_MspInit+0x45c>)
 8003b32:	f002 ff9b 	bl	8006a6c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003b36:	4b3c      	ldr	r3, [pc, #240]	; (8003c28 <HAL_UART_MspInit+0x460>)
 8003b38:	4a3c      	ldr	r2, [pc, #240]	; (8003c2c <HAL_UART_MspInit+0x464>)
 8003b3a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003b3c:	4b3a      	ldr	r3, [pc, #232]	; (8003c28 <HAL_UART_MspInit+0x460>)
 8003b3e:	222d      	movs	r2, #45	; 0x2d
 8003b40:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b42:	4b39      	ldr	r3, [pc, #228]	; (8003c28 <HAL_UART_MspInit+0x460>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b48:	4b37      	ldr	r3, [pc, #220]	; (8003c28 <HAL_UART_MspInit+0x460>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b4e:	4b36      	ldr	r3, [pc, #216]	; (8003c28 <HAL_UART_MspInit+0x460>)
 8003b50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b54:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b56:	4b34      	ldr	r3, [pc, #208]	; (8003c28 <HAL_UART_MspInit+0x460>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b5c:	4b32      	ldr	r3, [pc, #200]	; (8003c28 <HAL_UART_MspInit+0x460>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003b62:	4b31      	ldr	r3, [pc, #196]	; (8003c28 <HAL_UART_MspInit+0x460>)
 8003b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b68:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003b6a:	4b2f      	ldr	r3, [pc, #188]	; (8003c28 <HAL_UART_MspInit+0x460>)
 8003b6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b70:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b72:	4b2d      	ldr	r3, [pc, #180]	; (8003c28 <HAL_UART_MspInit+0x460>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003b78:	482b      	ldr	r0, [pc, #172]	; (8003c28 <HAL_UART_MspInit+0x460>)
 8003b7a:	f000 fd53 	bl	8004624 <HAL_DMA_Init>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 8003b84:	f7ff fa10 	bl	8002fa8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a27      	ldr	r2, [pc, #156]	; (8003c28 <HAL_UART_MspInit+0x460>)
 8003b8c:	67da      	str	r2, [r3, #124]	; 0x7c
 8003b8e:	4a26      	ldr	r2, [pc, #152]	; (8003c28 <HAL_UART_MspInit+0x460>)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8003b94:	4b26      	ldr	r3, [pc, #152]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003b96:	4a27      	ldr	r2, [pc, #156]	; (8003c34 <HAL_UART_MspInit+0x46c>)
 8003b98:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003b9a:	4b25      	ldr	r3, [pc, #148]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003b9c:	222e      	movs	r2, #46	; 0x2e
 8003b9e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ba0:	4b23      	ldr	r3, [pc, #140]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003ba2:	2240      	movs	r2, #64	; 0x40
 8003ba4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ba6:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bac:	4b20      	ldr	r3, [pc, #128]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bb2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bb4:	4b1e      	ldr	r3, [pc, #120]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bba:	4b1d      	ldr	r3, [pc, #116]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003bc0:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003bc6:	4b1a      	ldr	r3, [pc, #104]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003bc8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003bcc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003bce:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003bd4:	4b16      	ldr	r3, [pc, #88]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003bd6:	2203      	movs	r2, #3
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003bda:	4b15      	ldr	r3, [pc, #84]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003be0:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003be6:	4812      	ldr	r0, [pc, #72]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003be8:	f000 fd1c 	bl	8004624 <HAL_DMA_Init>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_UART_MspInit+0x42e>
      Error_Handler();
 8003bf2:	f7ff f9d9 	bl	8002fa8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a0d      	ldr	r2, [pc, #52]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003bfa:	679a      	str	r2, [r3, #120]	; 0x78
 8003bfc:	4a0c      	ldr	r2, [pc, #48]	; (8003c30 <HAL_UART_MspInit+0x468>)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003c02:	2200      	movs	r2, #0
 8003c04:	2100      	movs	r1, #0
 8003c06:	2027      	movs	r0, #39	; 0x27
 8003c08:	f000 fbe1 	bl	80043ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c0c:	2027      	movs	r0, #39	; 0x27
 8003c0e:	f000 fbf8 	bl	8004402 <HAL_NVIC_EnableIRQ>
}
 8003c12:	bf00      	nop
 8003c14:	37f0      	adds	r7, #240	; 0xf0
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	40004800 	.word	0x40004800
 8003c20:	58024400 	.word	0x58024400
 8003c24:	58020c00 	.word	0x58020c00
 8003c28:	24000918 	.word	0x24000918
 8003c2c:	40020028 	.word	0x40020028
 8003c30:	24000990 	.word	0x24000990
 8003c34:	40020040 	.word	0x40020040

08003c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c3c:	e7fe      	b.n	8003c3c <NMI_Handler+0x4>

08003c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c42:	e7fe      	b.n	8003c42 <HardFault_Handler+0x4>

08003c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c48:	e7fe      	b.n	8003c48 <MemManage_Handler+0x4>

08003c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c4e:	e7fe      	b.n	8003c4e <BusFault_Handler+0x4>

08003c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c54:	e7fe      	b.n	8003c54 <UsageFault_Handler+0x4>

08003c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c56:	b480      	push	{r7}
 8003c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c5a:	bf00      	nop
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c68:	bf00      	nop
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c72:	b480      	push	{r7}
 8003c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c76:	bf00      	nop
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c84:	f000 fa9c 	bl	80041c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8003c88:	f000 fbd5 	bl	8004436 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003c8c:	bf00      	nop
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8003c94:	4802      	ldr	r0, [pc, #8]	; (8003ca0 <DMA1_Stream0_IRQHandler+0x10>)
 8003c96:	f001 fd83 	bl	80057a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003c9a:	bf00      	nop
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	240008a0 	.word	0x240008a0

08003ca4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003ca8:	4802      	ldr	r0, [pc, #8]	; (8003cb4 <DMA1_Stream1_IRQHandler+0x10>)
 8003caa:	f001 fd79 	bl	80057a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003cae:	bf00      	nop
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	24000918 	.word	0x24000918

08003cb8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003cbc:	4802      	ldr	r0, [pc, #8]	; (8003cc8 <DMA1_Stream2_IRQHandler+0x10>)
 8003cbe:	f001 fd6f 	bl	80057a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003cc2:	bf00      	nop
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	24000990 	.word	0x24000990

08003ccc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003cd0:	4802      	ldr	r0, [pc, #8]	; (8003cdc <DMA1_Stream3_IRQHandler+0x10>)
 8003cd2:	f001 fd65 	bl	80057a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003cd6:	bf00      	nop
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	240007b0 	.word	0x240007b0

08003ce0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003ce4:	4802      	ldr	r0, [pc, #8]	; (8003cf0 <DMA1_Stream4_IRQHandler+0x10>)
 8003ce6:	f001 fd5b 	bl	80057a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003cea:	bf00      	nop
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	24000828 	.word	0x24000828

08003cf4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8003cf8:	2040      	movs	r0, #64	; 0x40
 8003cfa:	f003 f880 	bl	8006dfe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 8003cfe:	2080      	movs	r0, #128	; 0x80
 8003d00:	f003 f87d 	bl	8006dfe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003d04:	bf00      	nop
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d0c:	4802      	ldr	r0, [pc, #8]	; (8003d18 <USART3_IRQHandler+0x10>)
 8003d0e:	f007 f9b1 	bl	800b074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d12:	bf00      	nop
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	24000720 	.word	0x24000720

08003d1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8003d20:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003d24:	f003 f86b 	bl	8006dfe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8003d28:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003d2c:	f003 f867 	bl	8006dfe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8003d30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003d34:	f003 f863 	bl	8006dfe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8003d38:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003d3c:	f003 f85f 	bl	8006dfe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d40:	bf00      	nop
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003d48:	4802      	ldr	r0, [pc, #8]	; (8003d54 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003d4a:	f005 ff27 	bl	8009b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003d4e:	bf00      	nop
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	240004d0 	.word	0x240004d0

08003d58 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003d5c:	4802      	ldr	r0, [pc, #8]	; (8003d68 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003d5e:	f005 ff1d 	bl	8009b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003d62:	bf00      	nop
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	2400051c 	.word	0x2400051c

08003d6c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003d70:	4802      	ldr	r0, [pc, #8]	; (8003d7c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003d72:	f005 ff13 	bl	8009b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	24000568 	.word	0x24000568

08003d80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003d84:	4802      	ldr	r0, [pc, #8]	; (8003d90 <TIM5_IRQHandler+0x10>)
 8003d86:	f005 ff09 	bl	8009b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003d8a:	bf00      	nop
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	240003ec 	.word	0x240003ec

08003d94 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003d98:	4802      	ldr	r0, [pc, #8]	; (8003da4 <UART4_IRQHandler+0x10>)
 8003d9a:	f007 f96b 	bl	800b074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	24000600 	.word	0x24000600

08003da8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003dac:	4802      	ldr	r0, [pc, #8]	; (8003db8 <TIM6_DAC_IRQHandler+0x10>)
 8003dae:	f005 fef5 	bl	8009b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	24000438 	.word	0x24000438

08003dbc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003dc0:	4802      	ldr	r0, [pc, #8]	; (8003dcc <TIM7_IRQHandler+0x10>)
 8003dc2:	f005 feeb 	bl	8009b9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003dc6:	bf00      	nop
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	24000484 	.word	0x24000484

08003dd0 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003dd4:	4802      	ldr	r0, [pc, #8]	; (8003de0 <UART7_IRQHandler+0x10>)
 8003dd6:	f007 f94d 	bl	800b074 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	24000690 	.word	0x24000690

08003de4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
	return 1;
 8003de8:	2301      	movs	r3, #1
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <_kill>:

int _kill(int pid, int sig)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003dfe:	f009 f97b 	bl	800d0f8 <__errno>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2216      	movs	r2, #22
 8003e06:	601a      	str	r2, [r3, #0]
	return -1;
 8003e08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <_exit>:

void _exit (int status)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff ffe7 	bl	8003df4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003e26:	e7fe      	b.n	8003e26 <_exit+0x12>

08003e28 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e34:	2300      	movs	r3, #0
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e00a      	b.n	8003e50 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003e3a:	f3af 8000 	nop.w
 8003e3e:	4601      	mov	r1, r0
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	60ba      	str	r2, [r7, #8]
 8003e46:	b2ca      	uxtb	r2, r1
 8003e48:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	dbf0      	blt.n	8003e3a <_read+0x12>
	}

return len;
 8003e58:	687b      	ldr	r3, [r7, #4]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b086      	sub	sp, #24
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	60f8      	str	r0, [r7, #12]
 8003e6a:	60b9      	str	r1, [r7, #8]
 8003e6c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e6e:	2300      	movs	r3, #0
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	e009      	b.n	8003e88 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	60ba      	str	r2, [r7, #8]
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	3301      	adds	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	dbf1      	blt.n	8003e74 <_write+0x12>
	}
	return len;
 8003e90:	687b      	ldr	r3, [r7, #4]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <_close>:

int _close(int file)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
	return -1;
 8003ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	370c      	adds	r7, #12
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b083      	sub	sp, #12
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ec2:	605a      	str	r2, [r3, #4]
	return 0;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <_isatty>:

int _isatty(int file)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
	return 1;
 8003eda:	2301      	movs	r3, #1
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
	return 0;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f0c:	4a14      	ldr	r2, [pc, #80]	; (8003f60 <_sbrk+0x5c>)
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <_sbrk+0x60>)
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f18:	4b13      	ldr	r3, [pc, #76]	; (8003f68 <_sbrk+0x64>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d102      	bne.n	8003f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f20:	4b11      	ldr	r3, [pc, #68]	; (8003f68 <_sbrk+0x64>)
 8003f22:	4a12      	ldr	r2, [pc, #72]	; (8003f6c <_sbrk+0x68>)
 8003f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <_sbrk+0x64>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d207      	bcs.n	8003f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f34:	f009 f8e0 	bl	800d0f8 <__errno>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	220c      	movs	r2, #12
 8003f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f42:	e009      	b.n	8003f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f44:	4b08      	ldr	r3, [pc, #32]	; (8003f68 <_sbrk+0x64>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f4a:	4b07      	ldr	r3, [pc, #28]	; (8003f68 <_sbrk+0x64>)
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4413      	add	r3, r2
 8003f52:	4a05      	ldr	r2, [pc, #20]	; (8003f68 <_sbrk+0x64>)
 8003f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f56:	68fb      	ldr	r3, [r7, #12]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	240012d8 	.word	0x240012d8
 8003f64:	00000400 	.word	0x00000400
 8003f68:	24000cb8 	.word	0x24000cb8
 8003f6c:	24000cd8 	.word	0x24000cd8

08003f70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f70:	b480      	push	{r7}
 8003f72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f74:	4b39      	ldr	r3, [pc, #228]	; (800405c <SystemInit+0xec>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	4a38      	ldr	r2, [pc, #224]	; (800405c <SystemInit+0xec>)
 8003f7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f84:	4b36      	ldr	r3, [pc, #216]	; (8004060 <SystemInit+0xf0>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	2b06      	cmp	r3, #6
 8003f8e:	d807      	bhi.n	8003fa0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f90:	4b33      	ldr	r3, [pc, #204]	; (8004060 <SystemInit+0xf0>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 030f 	bic.w	r3, r3, #15
 8003f98:	4a31      	ldr	r2, [pc, #196]	; (8004060 <SystemInit+0xf0>)
 8003f9a:	f043 0307 	orr.w	r3, r3, #7
 8003f9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003fa0:	4b30      	ldr	r3, [pc, #192]	; (8004064 <SystemInit+0xf4>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2f      	ldr	r2, [pc, #188]	; (8004064 <SystemInit+0xf4>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003fac:	4b2d      	ldr	r3, [pc, #180]	; (8004064 <SystemInit+0xf4>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003fb2:	4b2c      	ldr	r3, [pc, #176]	; (8004064 <SystemInit+0xf4>)
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	492b      	ldr	r1, [pc, #172]	; (8004064 <SystemInit+0xf4>)
 8003fb8:	4b2b      	ldr	r3, [pc, #172]	; (8004068 <SystemInit+0xf8>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fbe:	4b28      	ldr	r3, [pc, #160]	; (8004060 <SystemInit+0xf0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fca:	4b25      	ldr	r3, [pc, #148]	; (8004060 <SystemInit+0xf0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 030f 	bic.w	r3, r3, #15
 8003fd2:	4a23      	ldr	r2, [pc, #140]	; (8004060 <SystemInit+0xf0>)
 8003fd4:	f043 0307 	orr.w	r3, r3, #7
 8003fd8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003fda:	4b22      	ldr	r3, [pc, #136]	; (8004064 <SystemInit+0xf4>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003fe0:	4b20      	ldr	r3, [pc, #128]	; (8004064 <SystemInit+0xf4>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003fe6:	4b1f      	ldr	r3, [pc, #124]	; (8004064 <SystemInit+0xf4>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003fec:	4b1d      	ldr	r3, [pc, #116]	; (8004064 <SystemInit+0xf4>)
 8003fee:	4a1f      	ldr	r2, [pc, #124]	; (800406c <SystemInit+0xfc>)
 8003ff0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003ff2:	4b1c      	ldr	r3, [pc, #112]	; (8004064 <SystemInit+0xf4>)
 8003ff4:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <SystemInit+0x100>)
 8003ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003ff8:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <SystemInit+0xf4>)
 8003ffa:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <SystemInit+0x104>)
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003ffe:	4b19      	ldr	r3, [pc, #100]	; (8004064 <SystemInit+0xf4>)
 8004000:	2200      	movs	r2, #0
 8004002:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004004:	4b17      	ldr	r3, [pc, #92]	; (8004064 <SystemInit+0xf4>)
 8004006:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <SystemInit+0x104>)
 8004008:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800400a:	4b16      	ldr	r3, [pc, #88]	; (8004064 <SystemInit+0xf4>)
 800400c:	2200      	movs	r2, #0
 800400e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004010:	4b14      	ldr	r3, [pc, #80]	; (8004064 <SystemInit+0xf4>)
 8004012:	4a18      	ldr	r2, [pc, #96]	; (8004074 <SystemInit+0x104>)
 8004014:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004016:	4b13      	ldr	r3, [pc, #76]	; (8004064 <SystemInit+0xf4>)
 8004018:	2200      	movs	r2, #0
 800401a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <SystemInit+0xf4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a10      	ldr	r2, [pc, #64]	; (8004064 <SystemInit+0xf4>)
 8004022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004026:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004028:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <SystemInit+0xf4>)
 800402a:	2200      	movs	r2, #0
 800402c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <SystemInit+0x108>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	4b12      	ldr	r3, [pc, #72]	; (800407c <SystemInit+0x10c>)
 8004034:	4013      	ands	r3, r2
 8004036:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800403a:	d202      	bcs.n	8004042 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800403c:	4b10      	ldr	r3, [pc, #64]	; (8004080 <SystemInit+0x110>)
 800403e:	2201      	movs	r2, #1
 8004040:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004042:	4b10      	ldr	r3, [pc, #64]	; (8004084 <SystemInit+0x114>)
 8004044:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004048:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800404a:	4b04      	ldr	r3, [pc, #16]	; (800405c <SystemInit+0xec>)
 800404c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004050:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004052:	bf00      	nop
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	e000ed00 	.word	0xe000ed00
 8004060:	52002000 	.word	0x52002000
 8004064:	58024400 	.word	0x58024400
 8004068:	eaf6ed7f 	.word	0xeaf6ed7f
 800406c:	02020200 	.word	0x02020200
 8004070:	01ff0000 	.word	0x01ff0000
 8004074:	01010280 	.word	0x01010280
 8004078:	5c001000 	.word	0x5c001000
 800407c:	ffff0000 	.word	0xffff0000
 8004080:	51008108 	.word	0x51008108
 8004084:	52004000 	.word	0x52004000

08004088 <Reset_Handler>:
 8004088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80040c0 <LoopFillZerobss+0xe>
 800408c:	f7ff ff70 	bl	8003f70 <SystemInit>
 8004090:	480c      	ldr	r0, [pc, #48]	; (80040c4 <LoopFillZerobss+0x12>)
 8004092:	490d      	ldr	r1, [pc, #52]	; (80040c8 <LoopFillZerobss+0x16>)
 8004094:	4a0d      	ldr	r2, [pc, #52]	; (80040cc <LoopFillZerobss+0x1a>)
 8004096:	2300      	movs	r3, #0
 8004098:	e002      	b.n	80040a0 <LoopCopyDataInit>

0800409a <CopyDataInit>:
 800409a:	58d4      	ldr	r4, [r2, r3]
 800409c:	50c4      	str	r4, [r0, r3]
 800409e:	3304      	adds	r3, #4

080040a0 <LoopCopyDataInit>:
 80040a0:	18c4      	adds	r4, r0, r3
 80040a2:	428c      	cmp	r4, r1
 80040a4:	d3f9      	bcc.n	800409a <CopyDataInit>
 80040a6:	4a0a      	ldr	r2, [pc, #40]	; (80040d0 <LoopFillZerobss+0x1e>)
 80040a8:	4c0a      	ldr	r4, [pc, #40]	; (80040d4 <LoopFillZerobss+0x22>)
 80040aa:	2300      	movs	r3, #0
 80040ac:	e001      	b.n	80040b2 <LoopFillZerobss>

080040ae <FillZerobss>:
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	3204      	adds	r2, #4

080040b2 <LoopFillZerobss>:
 80040b2:	42a2      	cmp	r2, r4
 80040b4:	d3fb      	bcc.n	80040ae <FillZerobss>
 80040b6:	f009 f825 	bl	800d104 <__libc_init_array>
 80040ba:	f7fd fe11 	bl	8001ce0 <main>
 80040be:	4770      	bx	lr
 80040c0:	240012d8 	.word	0x240012d8
 80040c4:	24000000 	.word	0x24000000
 80040c8:	240001f4 	.word	0x240001f4
 80040cc:	080116ec 	.word	0x080116ec
 80040d0:	240001f4 	.word	0x240001f4
 80040d4:	24000cd8 	.word	0x24000cd8

080040d8 <ADC3_IRQHandler>:
 80040d8:	e7fe      	b.n	80040d8 <ADC3_IRQHandler>
	...

080040dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040e2:	2003      	movs	r0, #3
 80040e4:	f000 f968 	bl	80043b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040e8:	f003 fcc0 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 80040ec:	4602      	mov	r2, r0
 80040ee:	4b15      	ldr	r3, [pc, #84]	; (8004144 <HAL_Init+0x68>)
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	4913      	ldr	r1, [pc, #76]	; (8004148 <HAL_Init+0x6c>)
 80040fa:	5ccb      	ldrb	r3, [r1, r3]
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
 8004104:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004106:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <HAL_Init+0x68>)
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	4a0e      	ldr	r2, [pc, #56]	; (8004148 <HAL_Init+0x6c>)
 8004110:	5cd3      	ldrb	r3, [r2, r3]
 8004112:	f003 031f 	and.w	r3, r3, #31
 8004116:	687a      	ldr	r2, [r7, #4]
 8004118:	fa22 f303 	lsr.w	r3, r2, r3
 800411c:	4a0b      	ldr	r2, [pc, #44]	; (800414c <HAL_Init+0x70>)
 800411e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004120:	4a0b      	ldr	r2, [pc, #44]	; (8004150 <HAL_Init+0x74>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004126:	2000      	movs	r0, #0
 8004128:	f000 f814 	bl	8004154 <HAL_InitTick>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e002      	b.n	800413c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004136:	f7ff f895 	bl	8003264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	58024400 	.word	0x58024400
 8004148:	0800f9f8 	.word	0x0800f9f8
 800414c:	24000018 	.word	0x24000018
 8004150:	24000014 	.word	0x24000014

08004154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800415c:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <HAL_InitTick+0x60>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e021      	b.n	80041ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004168:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <HAL_InitTick+0x64>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <HAL_InitTick+0x60>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	4619      	mov	r1, r3
 8004172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004176:	fbb3 f3f1 	udiv	r3, r3, r1
 800417a:	fbb2 f3f3 	udiv	r3, r2, r3
 800417e:	4618      	mov	r0, r3
 8004180:	f000 f94d 	bl	800441e <HAL_SYSTICK_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e00e      	b.n	80041ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b0f      	cmp	r3, #15
 8004192:	d80a      	bhi.n	80041aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004194:	2200      	movs	r2, #0
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	f04f 30ff 	mov.w	r0, #4294967295
 800419c:	f000 f917 	bl	80043ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041a0:	4a06      	ldr	r2, [pc, #24]	; (80041bc <HAL_InitTick+0x68>)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	e000      	b.n	80041ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3708      	adds	r7, #8
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	24000020 	.word	0x24000020
 80041b8:	24000014 	.word	0x24000014
 80041bc:	2400001c 	.word	0x2400001c

080041c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80041c4:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <HAL_IncTick+0x20>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <HAL_IncTick+0x24>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4413      	add	r3, r2
 80041d0:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <HAL_IncTick+0x24>)
 80041d2:	6013      	str	r3, [r2, #0]
}
 80041d4:	bf00      	nop
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr
 80041de:	bf00      	nop
 80041e0:	24000020 	.word	0x24000020
 80041e4:	24000cc4 	.word	0x24000cc4

080041e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return uwTick;
 80041ec:	4b03      	ldr	r3, [pc, #12]	; (80041fc <HAL_GetTick+0x14>)
 80041ee:	681b      	ldr	r3, [r3, #0]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	24000cc4 	.word	0x24000cc4

08004200 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004204:	4b03      	ldr	r3, [pc, #12]	; (8004214 <HAL_GetREVID+0x14>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	0c1b      	lsrs	r3, r3, #16
}
 800420a:	4618      	mov	r0, r3
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	5c001000 	.word	0x5c001000

08004218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <__NVIC_SetPriorityGrouping+0x40>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004234:	4013      	ands	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <__NVIC_SetPriorityGrouping+0x44>)
 8004242:	4313      	orrs	r3, r2
 8004244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004246:	4a04      	ldr	r2, [pc, #16]	; (8004258 <__NVIC_SetPriorityGrouping+0x40>)
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	60d3      	str	r3, [r2, #12]
}
 800424c:	bf00      	nop
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	e000ed00 	.word	0xe000ed00
 800425c:	05fa0000 	.word	0x05fa0000

08004260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004264:	4b04      	ldr	r3, [pc, #16]	; (8004278 <__NVIC_GetPriorityGrouping+0x18>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	0a1b      	lsrs	r3, r3, #8
 800426a:	f003 0307 	and.w	r3, r3, #7
}
 800426e:	4618      	mov	r0, r3
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr
 8004278:	e000ed00 	.word	0xe000ed00

0800427c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	4603      	mov	r3, r0
 8004284:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004286:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800428a:	2b00      	cmp	r3, #0
 800428c:	db0b      	blt.n	80042a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800428e:	88fb      	ldrh	r3, [r7, #6]
 8004290:	f003 021f 	and.w	r2, r3, #31
 8004294:	4907      	ldr	r1, [pc, #28]	; (80042b4 <__NVIC_EnableIRQ+0x38>)
 8004296:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800429a:	095b      	lsrs	r3, r3, #5
 800429c:	2001      	movs	r0, #1
 800429e:	fa00 f202 	lsl.w	r2, r0, r2
 80042a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	e000e100 	.word	0xe000e100

080042b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	6039      	str	r1, [r7, #0]
 80042c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80042c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	db0a      	blt.n	80042e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	490c      	ldr	r1, [pc, #48]	; (8004304 <__NVIC_SetPriority+0x4c>)
 80042d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042d6:	0112      	lsls	r2, r2, #4
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	440b      	add	r3, r1
 80042dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042e0:	e00a      	b.n	80042f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	4908      	ldr	r1, [pc, #32]	; (8004308 <__NVIC_SetPriority+0x50>)
 80042e8:	88fb      	ldrh	r3, [r7, #6]
 80042ea:	f003 030f 	and.w	r3, r3, #15
 80042ee:	3b04      	subs	r3, #4
 80042f0:	0112      	lsls	r2, r2, #4
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	440b      	add	r3, r1
 80042f6:	761a      	strb	r2, [r3, #24]
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	e000e100 	.word	0xe000e100
 8004308:	e000ed00 	.word	0xe000ed00

0800430c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800430c:	b480      	push	{r7}
 800430e:	b089      	sub	sp, #36	; 0x24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f003 0307 	and.w	r3, r3, #7
 800431e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	f1c3 0307 	rsb	r3, r3, #7
 8004326:	2b04      	cmp	r3, #4
 8004328:	bf28      	it	cs
 800432a:	2304      	movcs	r3, #4
 800432c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	3304      	adds	r3, #4
 8004332:	2b06      	cmp	r3, #6
 8004334:	d902      	bls.n	800433c <NVIC_EncodePriority+0x30>
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	3b03      	subs	r3, #3
 800433a:	e000      	b.n	800433e <NVIC_EncodePriority+0x32>
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004340:	f04f 32ff 	mov.w	r2, #4294967295
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	fa02 f303 	lsl.w	r3, r2, r3
 800434a:	43da      	mvns	r2, r3
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	401a      	ands	r2, r3
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004354:	f04f 31ff 	mov.w	r1, #4294967295
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	fa01 f303 	lsl.w	r3, r1, r3
 800435e:	43d9      	mvns	r1, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004364:	4313      	orrs	r3, r2
         );
}
 8004366:	4618      	mov	r0, r3
 8004368:	3724      	adds	r7, #36	; 0x24
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
	...

08004374 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3b01      	subs	r3, #1
 8004380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004384:	d301      	bcc.n	800438a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004386:	2301      	movs	r3, #1
 8004388:	e00f      	b.n	80043aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800438a:	4a0a      	ldr	r2, [pc, #40]	; (80043b4 <SysTick_Config+0x40>)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3b01      	subs	r3, #1
 8004390:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004392:	210f      	movs	r1, #15
 8004394:	f04f 30ff 	mov.w	r0, #4294967295
 8004398:	f7ff ff8e 	bl	80042b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <SysTick_Config+0x40>)
 800439e:	2200      	movs	r2, #0
 80043a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043a2:	4b04      	ldr	r3, [pc, #16]	; (80043b4 <SysTick_Config+0x40>)
 80043a4:	2207      	movs	r2, #7
 80043a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	e000e010 	.word	0xe000e010

080043b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f7ff ff29 	bl	8004218 <__NVIC_SetPriorityGrouping>
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b086      	sub	sp, #24
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	4603      	mov	r3, r0
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	607a      	str	r2, [r7, #4]
 80043da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043dc:	f7ff ff40 	bl	8004260 <__NVIC_GetPriorityGrouping>
 80043e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	6978      	ldr	r0, [r7, #20]
 80043e8:	f7ff ff90 	bl	800430c <NVIC_EncodePriority>
 80043ec:	4602      	mov	r2, r0
 80043ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043f2:	4611      	mov	r1, r2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff ff5f 	bl	80042b8 <__NVIC_SetPriority>
}
 80043fa:	bf00      	nop
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b082      	sub	sp, #8
 8004406:	af00      	add	r7, sp, #0
 8004408:	4603      	mov	r3, r0
 800440a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800440c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff33 	bl	800427c <__NVIC_EnableIRQ>
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ffa4 	bl	8004374 <SysTick_Config>
 800442c:	4603      	mov	r3, r0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800443a:	f000 f802 	bl	8004442 <HAL_SYSTICK_Callback>
}
 800443e:	bf00      	nop
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8004442:	b480      	push	{r7}
 8004444:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e054      	b.n	800450c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	7f5b      	ldrb	r3, [r3, #29]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fe ff10 	bl	8003298 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	791b      	ldrb	r3, [r3, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d10c      	bne.n	80044a0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a22      	ldr	r2, [pc, #136]	; (8004514 <HAL_CRC_Init+0xc4>)
 800448c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0218 	bic.w	r2, r2, #24
 800449c:	609a      	str	r2, [r3, #8]
 800449e:	e00c      	b.n	80044ba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6899      	ldr	r1, [r3, #8]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	461a      	mov	r2, r3
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f834 	bl	8004518 <HAL_CRCEx_Polynomial_Set>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e028      	b.n	800450c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	795b      	ldrb	r3, [r3, #5]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d105      	bne.n	80044ce <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f04f 32ff 	mov.w	r2, #4294967295
 80044ca:	611a      	str	r2, [r3, #16]
 80044cc:	e004      	b.n	80044d8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6912      	ldr	r2, [r2, #16]
 80044d6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695a      	ldr	r2, [r3, #20]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3708      	adds	r7, #8
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	04c11db7 	.word	0x04c11db7

08004518 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004528:	231f      	movs	r3, #31
 800452a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800452c:	bf00      	nop
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	1e5a      	subs	r2, r3, #1
 8004532:	613a      	str	r2, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <HAL_CRCEx_Polynomial_Set+0x34>
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	fa22 f303 	lsr.w	r3, r2, r3
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_CRCEx_Polynomial_Set+0x16>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b18      	cmp	r3, #24
 8004550:	d846      	bhi.n	80045e0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004552:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004558:	080045e7 	.word	0x080045e7
 800455c:	080045e1 	.word	0x080045e1
 8004560:	080045e1 	.word	0x080045e1
 8004564:	080045e1 	.word	0x080045e1
 8004568:	080045e1 	.word	0x080045e1
 800456c:	080045e1 	.word	0x080045e1
 8004570:	080045e1 	.word	0x080045e1
 8004574:	080045e1 	.word	0x080045e1
 8004578:	080045d5 	.word	0x080045d5
 800457c:	080045e1 	.word	0x080045e1
 8004580:	080045e1 	.word	0x080045e1
 8004584:	080045e1 	.word	0x080045e1
 8004588:	080045e1 	.word	0x080045e1
 800458c:	080045e1 	.word	0x080045e1
 8004590:	080045e1 	.word	0x080045e1
 8004594:	080045e1 	.word	0x080045e1
 8004598:	080045c9 	.word	0x080045c9
 800459c:	080045e1 	.word	0x080045e1
 80045a0:	080045e1 	.word	0x080045e1
 80045a4:	080045e1 	.word	0x080045e1
 80045a8:	080045e1 	.word	0x080045e1
 80045ac:	080045e1 	.word	0x080045e1
 80045b0:	080045e1 	.word	0x080045e1
 80045b4:	080045e1 	.word	0x080045e1
 80045b8:	080045bd 	.word	0x080045bd
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	2b06      	cmp	r3, #6
 80045c0:	d913      	bls.n	80045ea <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80045c6:	e010      	b.n	80045ea <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	2b07      	cmp	r3, #7
 80045cc:	d90f      	bls.n	80045ee <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80045d2:	e00c      	b.n	80045ee <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	2b0f      	cmp	r3, #15
 80045d8:	d90b      	bls.n	80045f2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80045de:	e008      	b.n	80045f2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	75fb      	strb	r3, [r7, #23]
      break;
 80045e4:	e006      	b.n	80045f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80045e6:	bf00      	nop
 80045e8:	e004      	b.n	80045f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80045ea:	bf00      	nop
 80045ec:	e002      	b.n	80045f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80045ee:	bf00      	nop
 80045f0:	e000      	b.n	80045f4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80045f2:	bf00      	nop
  }
  if (status == HAL_OK)
 80045f4:	7dfb      	ldrb	r3, [r7, #23]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10d      	bne.n	8004616 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f023 0118 	bic.w	r1, r3, #24
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	430a      	orrs	r2, r1
 8004614:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004616:	7dfb      	ldrb	r3, [r7, #23]
}
 8004618:	4618      	mov	r0, r3
 800461a:	371c      	adds	r7, #28
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b086      	sub	sp, #24
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800462c:	f7ff fddc 	bl	80041e8 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e316      	b.n	8004c6a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a66      	ldr	r2, [pc, #408]	; (80047dc <HAL_DMA_Init+0x1b8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d04a      	beq.n	80046dc <HAL_DMA_Init+0xb8>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a65      	ldr	r2, [pc, #404]	; (80047e0 <HAL_DMA_Init+0x1bc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d045      	beq.n	80046dc <HAL_DMA_Init+0xb8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a63      	ldr	r2, [pc, #396]	; (80047e4 <HAL_DMA_Init+0x1c0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d040      	beq.n	80046dc <HAL_DMA_Init+0xb8>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a62      	ldr	r2, [pc, #392]	; (80047e8 <HAL_DMA_Init+0x1c4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d03b      	beq.n	80046dc <HAL_DMA_Init+0xb8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a60      	ldr	r2, [pc, #384]	; (80047ec <HAL_DMA_Init+0x1c8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d036      	beq.n	80046dc <HAL_DMA_Init+0xb8>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a5f      	ldr	r2, [pc, #380]	; (80047f0 <HAL_DMA_Init+0x1cc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d031      	beq.n	80046dc <HAL_DMA_Init+0xb8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a5d      	ldr	r2, [pc, #372]	; (80047f4 <HAL_DMA_Init+0x1d0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d02c      	beq.n	80046dc <HAL_DMA_Init+0xb8>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a5c      	ldr	r2, [pc, #368]	; (80047f8 <HAL_DMA_Init+0x1d4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d027      	beq.n	80046dc <HAL_DMA_Init+0xb8>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a5a      	ldr	r2, [pc, #360]	; (80047fc <HAL_DMA_Init+0x1d8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d022      	beq.n	80046dc <HAL_DMA_Init+0xb8>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a59      	ldr	r2, [pc, #356]	; (8004800 <HAL_DMA_Init+0x1dc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d01d      	beq.n	80046dc <HAL_DMA_Init+0xb8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a57      	ldr	r2, [pc, #348]	; (8004804 <HAL_DMA_Init+0x1e0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d018      	beq.n	80046dc <HAL_DMA_Init+0xb8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a56      	ldr	r2, [pc, #344]	; (8004808 <HAL_DMA_Init+0x1e4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d013      	beq.n	80046dc <HAL_DMA_Init+0xb8>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a54      	ldr	r2, [pc, #336]	; (800480c <HAL_DMA_Init+0x1e8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00e      	beq.n	80046dc <HAL_DMA_Init+0xb8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a53      	ldr	r2, [pc, #332]	; (8004810 <HAL_DMA_Init+0x1ec>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d009      	beq.n	80046dc <HAL_DMA_Init+0xb8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a51      	ldr	r2, [pc, #324]	; (8004814 <HAL_DMA_Init+0x1f0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d004      	beq.n	80046dc <HAL_DMA_Init+0xb8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a50      	ldr	r2, [pc, #320]	; (8004818 <HAL_DMA_Init+0x1f4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <HAL_DMA_Init+0xbc>
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <HAL_DMA_Init+0xbe>
 80046e0:	2300      	movs	r3, #0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 813b 	beq.w	800495e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a37      	ldr	r2, [pc, #220]	; (80047dc <HAL_DMA_Init+0x1b8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d04a      	beq.n	8004798 <HAL_DMA_Init+0x174>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a36      	ldr	r2, [pc, #216]	; (80047e0 <HAL_DMA_Init+0x1bc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d045      	beq.n	8004798 <HAL_DMA_Init+0x174>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a34      	ldr	r2, [pc, #208]	; (80047e4 <HAL_DMA_Init+0x1c0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d040      	beq.n	8004798 <HAL_DMA_Init+0x174>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a33      	ldr	r2, [pc, #204]	; (80047e8 <HAL_DMA_Init+0x1c4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d03b      	beq.n	8004798 <HAL_DMA_Init+0x174>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a31      	ldr	r2, [pc, #196]	; (80047ec <HAL_DMA_Init+0x1c8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d036      	beq.n	8004798 <HAL_DMA_Init+0x174>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a30      	ldr	r2, [pc, #192]	; (80047f0 <HAL_DMA_Init+0x1cc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d031      	beq.n	8004798 <HAL_DMA_Init+0x174>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a2e      	ldr	r2, [pc, #184]	; (80047f4 <HAL_DMA_Init+0x1d0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02c      	beq.n	8004798 <HAL_DMA_Init+0x174>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a2d      	ldr	r2, [pc, #180]	; (80047f8 <HAL_DMA_Init+0x1d4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d027      	beq.n	8004798 <HAL_DMA_Init+0x174>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a2b      	ldr	r2, [pc, #172]	; (80047fc <HAL_DMA_Init+0x1d8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d022      	beq.n	8004798 <HAL_DMA_Init+0x174>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a2a      	ldr	r2, [pc, #168]	; (8004800 <HAL_DMA_Init+0x1dc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d01d      	beq.n	8004798 <HAL_DMA_Init+0x174>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a28      	ldr	r2, [pc, #160]	; (8004804 <HAL_DMA_Init+0x1e0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d018      	beq.n	8004798 <HAL_DMA_Init+0x174>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a27      	ldr	r2, [pc, #156]	; (8004808 <HAL_DMA_Init+0x1e4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d013      	beq.n	8004798 <HAL_DMA_Init+0x174>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a25      	ldr	r2, [pc, #148]	; (800480c <HAL_DMA_Init+0x1e8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d00e      	beq.n	8004798 <HAL_DMA_Init+0x174>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a24      	ldr	r2, [pc, #144]	; (8004810 <HAL_DMA_Init+0x1ec>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d009      	beq.n	8004798 <HAL_DMA_Init+0x174>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a22      	ldr	r2, [pc, #136]	; (8004814 <HAL_DMA_Init+0x1f0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d004      	beq.n	8004798 <HAL_DMA_Init+0x174>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a21      	ldr	r2, [pc, #132]	; (8004818 <HAL_DMA_Init+0x1f4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d108      	bne.n	80047aa <HAL_DMA_Init+0x186>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0201 	bic.w	r2, r2, #1
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	e007      	b.n	80047ba <HAL_DMA_Init+0x196>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0201 	bic.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80047ba:	e02f      	b.n	800481c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047bc:	f7ff fd14 	bl	80041e8 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b05      	cmp	r3, #5
 80047c8:	d928      	bls.n	800481c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2203      	movs	r2, #3
 80047d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e246      	b.n	8004c6a <HAL_DMA_Init+0x646>
 80047dc:	40020010 	.word	0x40020010
 80047e0:	40020028 	.word	0x40020028
 80047e4:	40020040 	.word	0x40020040
 80047e8:	40020058 	.word	0x40020058
 80047ec:	40020070 	.word	0x40020070
 80047f0:	40020088 	.word	0x40020088
 80047f4:	400200a0 	.word	0x400200a0
 80047f8:	400200b8 	.word	0x400200b8
 80047fc:	40020410 	.word	0x40020410
 8004800:	40020428 	.word	0x40020428
 8004804:	40020440 	.word	0x40020440
 8004808:	40020458 	.word	0x40020458
 800480c:	40020470 	.word	0x40020470
 8004810:	40020488 	.word	0x40020488
 8004814:	400204a0 	.word	0x400204a0
 8004818:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1c8      	bne.n	80047bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	4b83      	ldr	r3, [pc, #524]	; (8004a44 <HAL_DMA_Init+0x420>)
 8004836:	4013      	ands	r3, r2
 8004838:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004842:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800484e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800485a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486c:	2b04      	cmp	r3, #4
 800486e:	d107      	bne.n	8004880 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	4313      	orrs	r3, r2
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004880:	4b71      	ldr	r3, [pc, #452]	; (8004a48 <HAL_DMA_Init+0x424>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4b71      	ldr	r3, [pc, #452]	; (8004a4c <HAL_DMA_Init+0x428>)
 8004886:	4013      	ands	r3, r2
 8004888:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800488c:	d328      	bcc.n	80048e0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b28      	cmp	r3, #40	; 0x28
 8004894:	d903      	bls.n	800489e <HAL_DMA_Init+0x27a>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b2e      	cmp	r3, #46	; 0x2e
 800489c:	d917      	bls.n	80048ce <HAL_DMA_Init+0x2aa>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b3e      	cmp	r3, #62	; 0x3e
 80048a4:	d903      	bls.n	80048ae <HAL_DMA_Init+0x28a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b42      	cmp	r3, #66	; 0x42
 80048ac:	d90f      	bls.n	80048ce <HAL_DMA_Init+0x2aa>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b46      	cmp	r3, #70	; 0x46
 80048b4:	d903      	bls.n	80048be <HAL_DMA_Init+0x29a>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b48      	cmp	r3, #72	; 0x48
 80048bc:	d907      	bls.n	80048ce <HAL_DMA_Init+0x2aa>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b4e      	cmp	r3, #78	; 0x4e
 80048c4:	d905      	bls.n	80048d2 <HAL_DMA_Init+0x2ae>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b52      	cmp	r3, #82	; 0x52
 80048cc:	d801      	bhi.n	80048d2 <HAL_DMA_Init+0x2ae>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_DMA_Init+0x2b0>
 80048d2:	2300      	movs	r3, #0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d003      	beq.n	80048e0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048de:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695b      	ldr	r3, [r3, #20]
 80048ee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f023 0307 	bic.w	r3, r3, #7
 80048f6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	4313      	orrs	r3, r2
 8004900:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004906:	2b04      	cmp	r3, #4
 8004908:	d117      	bne.n	800493a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00e      	beq.n	800493a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f001 ff1b 	bl	8006758 <DMA_CheckFifoParam>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2240      	movs	r2, #64	; 0x40
 800492c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2201      	movs	r2, #1
 8004932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e197      	b.n	8004c6a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f001 fe56 	bl	80065f4 <DMA_CalcBaseAndBitshift>
 8004948:	4603      	mov	r3, r0
 800494a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	223f      	movs	r2, #63	; 0x3f
 8004956:	409a      	lsls	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	609a      	str	r2, [r3, #8]
 800495c:	e0cd      	b.n	8004afa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a3b      	ldr	r2, [pc, #236]	; (8004a50 <HAL_DMA_Init+0x42c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d022      	beq.n	80049ae <HAL_DMA_Init+0x38a>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a39      	ldr	r2, [pc, #228]	; (8004a54 <HAL_DMA_Init+0x430>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d01d      	beq.n	80049ae <HAL_DMA_Init+0x38a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a38      	ldr	r2, [pc, #224]	; (8004a58 <HAL_DMA_Init+0x434>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d018      	beq.n	80049ae <HAL_DMA_Init+0x38a>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a36      	ldr	r2, [pc, #216]	; (8004a5c <HAL_DMA_Init+0x438>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <HAL_DMA_Init+0x38a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a35      	ldr	r2, [pc, #212]	; (8004a60 <HAL_DMA_Init+0x43c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d00e      	beq.n	80049ae <HAL_DMA_Init+0x38a>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a33      	ldr	r2, [pc, #204]	; (8004a64 <HAL_DMA_Init+0x440>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d009      	beq.n	80049ae <HAL_DMA_Init+0x38a>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a32      	ldr	r2, [pc, #200]	; (8004a68 <HAL_DMA_Init+0x444>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d004      	beq.n	80049ae <HAL_DMA_Init+0x38a>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a30      	ldr	r2, [pc, #192]	; (8004a6c <HAL_DMA_Init+0x448>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d101      	bne.n	80049b2 <HAL_DMA_Init+0x38e>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <HAL_DMA_Init+0x390>
 80049b2:	2300      	movs	r3, #0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 8097 	beq.w	8004ae8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a24      	ldr	r2, [pc, #144]	; (8004a50 <HAL_DMA_Init+0x42c>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d021      	beq.n	8004a08 <HAL_DMA_Init+0x3e4>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a22      	ldr	r2, [pc, #136]	; (8004a54 <HAL_DMA_Init+0x430>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d01c      	beq.n	8004a08 <HAL_DMA_Init+0x3e4>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a21      	ldr	r2, [pc, #132]	; (8004a58 <HAL_DMA_Init+0x434>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d017      	beq.n	8004a08 <HAL_DMA_Init+0x3e4>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <HAL_DMA_Init+0x438>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d012      	beq.n	8004a08 <HAL_DMA_Init+0x3e4>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a1e      	ldr	r2, [pc, #120]	; (8004a60 <HAL_DMA_Init+0x43c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00d      	beq.n	8004a08 <HAL_DMA_Init+0x3e4>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1c      	ldr	r2, [pc, #112]	; (8004a64 <HAL_DMA_Init+0x440>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d008      	beq.n	8004a08 <HAL_DMA_Init+0x3e4>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1b      	ldr	r2, [pc, #108]	; (8004a68 <HAL_DMA_Init+0x444>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d003      	beq.n	8004a08 <HAL_DMA_Init+0x3e4>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a19      	ldr	r2, [pc, #100]	; (8004a6c <HAL_DMA_Init+0x448>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <HAL_DMA_Init+0x44c>)
 8004a26:	4013      	ands	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b40      	cmp	r3, #64	; 0x40
 8004a30:	d020      	beq.n	8004a74 <HAL_DMA_Init+0x450>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	2b80      	cmp	r3, #128	; 0x80
 8004a38:	d102      	bne.n	8004a40 <HAL_DMA_Init+0x41c>
 8004a3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a3e:	e01a      	b.n	8004a76 <HAL_DMA_Init+0x452>
 8004a40:	2300      	movs	r3, #0
 8004a42:	e018      	b.n	8004a76 <HAL_DMA_Init+0x452>
 8004a44:	fe10803f 	.word	0xfe10803f
 8004a48:	5c001000 	.word	0x5c001000
 8004a4c:	ffff0000 	.word	0xffff0000
 8004a50:	58025408 	.word	0x58025408
 8004a54:	5802541c 	.word	0x5802541c
 8004a58:	58025430 	.word	0x58025430
 8004a5c:	58025444 	.word	0x58025444
 8004a60:	58025458 	.word	0x58025458
 8004a64:	5802546c 	.word	0x5802546c
 8004a68:	58025480 	.word	0x58025480
 8004a6c:	58025494 	.word	0x58025494
 8004a70:	fffe000f 	.word	0xfffe000f
 8004a74:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	68d2      	ldr	r2, [r2, #12]
 8004a7a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004a7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004a84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004a8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004a94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004a9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a1b      	ldr	r3, [r3, #32]
 8004aa2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004aa4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4b6e      	ldr	r3, [pc, #440]	; (8004c74 <HAL_DMA_Init+0x650>)
 8004abc:	4413      	add	r3, r2
 8004abe:	4a6e      	ldr	r2, [pc, #440]	; (8004c78 <HAL_DMA_Init+0x654>)
 8004ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ac4:	091b      	lsrs	r3, r3, #4
 8004ac6:	009a      	lsls	r2, r3, #2
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f001 fd91 	bl	80065f4 <DMA_CalcBaseAndBitshift>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	2201      	movs	r2, #1
 8004ae0:	409a      	lsls	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	605a      	str	r2, [r3, #4]
 8004ae6:	e008      	b.n	8004afa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2240      	movs	r2, #64	; 0x40
 8004aec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2203      	movs	r2, #3
 8004af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e0b7      	b.n	8004c6a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a5f      	ldr	r2, [pc, #380]	; (8004c7c <HAL_DMA_Init+0x658>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d072      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a5d      	ldr	r2, [pc, #372]	; (8004c80 <HAL_DMA_Init+0x65c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d06d      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a5c      	ldr	r2, [pc, #368]	; (8004c84 <HAL_DMA_Init+0x660>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d068      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a5a      	ldr	r2, [pc, #360]	; (8004c88 <HAL_DMA_Init+0x664>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d063      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a59      	ldr	r2, [pc, #356]	; (8004c8c <HAL_DMA_Init+0x668>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d05e      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a57      	ldr	r2, [pc, #348]	; (8004c90 <HAL_DMA_Init+0x66c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d059      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a56      	ldr	r2, [pc, #344]	; (8004c94 <HAL_DMA_Init+0x670>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d054      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a54      	ldr	r2, [pc, #336]	; (8004c98 <HAL_DMA_Init+0x674>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d04f      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a53      	ldr	r2, [pc, #332]	; (8004c9c <HAL_DMA_Init+0x678>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d04a      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a51      	ldr	r2, [pc, #324]	; (8004ca0 <HAL_DMA_Init+0x67c>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d045      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a50      	ldr	r2, [pc, #320]	; (8004ca4 <HAL_DMA_Init+0x680>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d040      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a4e      	ldr	r2, [pc, #312]	; (8004ca8 <HAL_DMA_Init+0x684>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d03b      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a4d      	ldr	r2, [pc, #308]	; (8004cac <HAL_DMA_Init+0x688>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d036      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a4b      	ldr	r2, [pc, #300]	; (8004cb0 <HAL_DMA_Init+0x68c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d031      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a4a      	ldr	r2, [pc, #296]	; (8004cb4 <HAL_DMA_Init+0x690>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d02c      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a48      	ldr	r2, [pc, #288]	; (8004cb8 <HAL_DMA_Init+0x694>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d027      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a47      	ldr	r2, [pc, #284]	; (8004cbc <HAL_DMA_Init+0x698>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d022      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a45      	ldr	r2, [pc, #276]	; (8004cc0 <HAL_DMA_Init+0x69c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01d      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a44      	ldr	r2, [pc, #272]	; (8004cc4 <HAL_DMA_Init+0x6a0>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d018      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a42      	ldr	r2, [pc, #264]	; (8004cc8 <HAL_DMA_Init+0x6a4>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a41      	ldr	r2, [pc, #260]	; (8004ccc <HAL_DMA_Init+0x6a8>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00e      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a3f      	ldr	r2, [pc, #252]	; (8004cd0 <HAL_DMA_Init+0x6ac>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d009      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a3e      	ldr	r2, [pc, #248]	; (8004cd4 <HAL_DMA_Init+0x6b0>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_DMA_Init+0x5c6>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a3c      	ldr	r2, [pc, #240]	; (8004cd8 <HAL_DMA_Init+0x6b4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d101      	bne.n	8004bee <HAL_DMA_Init+0x5ca>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <HAL_DMA_Init+0x5cc>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d032      	beq.n	8004c5a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f001 fe2b 	bl	8006850 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b80      	cmp	r3, #128	; 0x80
 8004c00:	d102      	bne.n	8004c08 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004c1c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d010      	beq.n	8004c48 <HAL_DMA_Init+0x624>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d80c      	bhi.n	8004c48 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f001 fea8 	bl	8006984 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	e008      	b.n	8004c5a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	a7fdabf8 	.word	0xa7fdabf8
 8004c78:	cccccccd 	.word	0xcccccccd
 8004c7c:	40020010 	.word	0x40020010
 8004c80:	40020028 	.word	0x40020028
 8004c84:	40020040 	.word	0x40020040
 8004c88:	40020058 	.word	0x40020058
 8004c8c:	40020070 	.word	0x40020070
 8004c90:	40020088 	.word	0x40020088
 8004c94:	400200a0 	.word	0x400200a0
 8004c98:	400200b8 	.word	0x400200b8
 8004c9c:	40020410 	.word	0x40020410
 8004ca0:	40020428 	.word	0x40020428
 8004ca4:	40020440 	.word	0x40020440
 8004ca8:	40020458 	.word	0x40020458
 8004cac:	40020470 	.word	0x40020470
 8004cb0:	40020488 	.word	0x40020488
 8004cb4:	400204a0 	.word	0x400204a0
 8004cb8:	400204b8 	.word	0x400204b8
 8004cbc:	58025408 	.word	0x58025408
 8004cc0:	5802541c 	.word	0x5802541c
 8004cc4:	58025430 	.word	0x58025430
 8004cc8:	58025444 	.word	0x58025444
 8004ccc:	58025458 	.word	0x58025458
 8004cd0:	5802546c 	.word	0x5802546c
 8004cd4:	58025480 	.word	0x58025480
 8004cd8:	58025494 	.word	0x58025494

08004cdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004ce4:	f7ff fa80 	bl	80041e8 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e2dc      	b.n	80052ae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d008      	beq.n	8004d12 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2280      	movs	r2, #128	; 0x80
 8004d04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e2cd      	b.n	80052ae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a76      	ldr	r2, [pc, #472]	; (8004ef0 <HAL_DMA_Abort+0x214>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d04a      	beq.n	8004db2 <HAL_DMA_Abort+0xd6>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a74      	ldr	r2, [pc, #464]	; (8004ef4 <HAL_DMA_Abort+0x218>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d045      	beq.n	8004db2 <HAL_DMA_Abort+0xd6>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a73      	ldr	r2, [pc, #460]	; (8004ef8 <HAL_DMA_Abort+0x21c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d040      	beq.n	8004db2 <HAL_DMA_Abort+0xd6>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a71      	ldr	r2, [pc, #452]	; (8004efc <HAL_DMA_Abort+0x220>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d03b      	beq.n	8004db2 <HAL_DMA_Abort+0xd6>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a70      	ldr	r2, [pc, #448]	; (8004f00 <HAL_DMA_Abort+0x224>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d036      	beq.n	8004db2 <HAL_DMA_Abort+0xd6>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a6e      	ldr	r2, [pc, #440]	; (8004f04 <HAL_DMA_Abort+0x228>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d031      	beq.n	8004db2 <HAL_DMA_Abort+0xd6>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a6d      	ldr	r2, [pc, #436]	; (8004f08 <HAL_DMA_Abort+0x22c>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d02c      	beq.n	8004db2 <HAL_DMA_Abort+0xd6>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a6b      	ldr	r2, [pc, #428]	; (8004f0c <HAL_DMA_Abort+0x230>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d027      	beq.n	8004db2 <HAL_DMA_Abort+0xd6>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a6a      	ldr	r2, [pc, #424]	; (8004f10 <HAL_DMA_Abort+0x234>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d022      	beq.n	8004db2 <HAL_DMA_Abort+0xd6>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a68      	ldr	r2, [pc, #416]	; (8004f14 <HAL_DMA_Abort+0x238>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d01d      	beq.n	8004db2 <HAL_DMA_Abort+0xd6>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a67      	ldr	r2, [pc, #412]	; (8004f18 <HAL_DMA_Abort+0x23c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d018      	beq.n	8004db2 <HAL_DMA_Abort+0xd6>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a65      	ldr	r2, [pc, #404]	; (8004f1c <HAL_DMA_Abort+0x240>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <HAL_DMA_Abort+0xd6>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a64      	ldr	r2, [pc, #400]	; (8004f20 <HAL_DMA_Abort+0x244>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_DMA_Abort+0xd6>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a62      	ldr	r2, [pc, #392]	; (8004f24 <HAL_DMA_Abort+0x248>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_DMA_Abort+0xd6>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a61      	ldr	r2, [pc, #388]	; (8004f28 <HAL_DMA_Abort+0x24c>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_DMA_Abort+0xd6>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a5f      	ldr	r2, [pc, #380]	; (8004f2c <HAL_DMA_Abort+0x250>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d101      	bne.n	8004db6 <HAL_DMA_Abort+0xda>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <HAL_DMA_Abort+0xdc>
 8004db6:	2300      	movs	r3, #0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d013      	beq.n	8004de4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 021e 	bic.w	r2, r2, #30
 8004dca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695a      	ldr	r2, [r3, #20]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dda:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	e00a      	b.n	8004dfa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 020e 	bic.w	r2, r2, #14
 8004df2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a3c      	ldr	r2, [pc, #240]	; (8004ef0 <HAL_DMA_Abort+0x214>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d072      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a3a      	ldr	r2, [pc, #232]	; (8004ef4 <HAL_DMA_Abort+0x218>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d06d      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a39      	ldr	r2, [pc, #228]	; (8004ef8 <HAL_DMA_Abort+0x21c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d068      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a37      	ldr	r2, [pc, #220]	; (8004efc <HAL_DMA_Abort+0x220>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d063      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a36      	ldr	r2, [pc, #216]	; (8004f00 <HAL_DMA_Abort+0x224>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d05e      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a34      	ldr	r2, [pc, #208]	; (8004f04 <HAL_DMA_Abort+0x228>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d059      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a33      	ldr	r2, [pc, #204]	; (8004f08 <HAL_DMA_Abort+0x22c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d054      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a31      	ldr	r2, [pc, #196]	; (8004f0c <HAL_DMA_Abort+0x230>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d04f      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a30      	ldr	r2, [pc, #192]	; (8004f10 <HAL_DMA_Abort+0x234>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d04a      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a2e      	ldr	r2, [pc, #184]	; (8004f14 <HAL_DMA_Abort+0x238>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d045      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a2d      	ldr	r2, [pc, #180]	; (8004f18 <HAL_DMA_Abort+0x23c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d040      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a2b      	ldr	r2, [pc, #172]	; (8004f1c <HAL_DMA_Abort+0x240>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d03b      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2a      	ldr	r2, [pc, #168]	; (8004f20 <HAL_DMA_Abort+0x244>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d036      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a28      	ldr	r2, [pc, #160]	; (8004f24 <HAL_DMA_Abort+0x248>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d031      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a27      	ldr	r2, [pc, #156]	; (8004f28 <HAL_DMA_Abort+0x24c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d02c      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a25      	ldr	r2, [pc, #148]	; (8004f2c <HAL_DMA_Abort+0x250>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d027      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a24      	ldr	r2, [pc, #144]	; (8004f30 <HAL_DMA_Abort+0x254>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d022      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a22      	ldr	r2, [pc, #136]	; (8004f34 <HAL_DMA_Abort+0x258>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01d      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a21      	ldr	r2, [pc, #132]	; (8004f38 <HAL_DMA_Abort+0x25c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d018      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a1f      	ldr	r2, [pc, #124]	; (8004f3c <HAL_DMA_Abort+0x260>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a1e      	ldr	r2, [pc, #120]	; (8004f40 <HAL_DMA_Abort+0x264>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00e      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1c      	ldr	r2, [pc, #112]	; (8004f44 <HAL_DMA_Abort+0x268>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d009      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a1b      	ldr	r2, [pc, #108]	; (8004f48 <HAL_DMA_Abort+0x26c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d004      	beq.n	8004eea <HAL_DMA_Abort+0x20e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a19      	ldr	r2, [pc, #100]	; (8004f4c <HAL_DMA_Abort+0x270>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d132      	bne.n	8004f50 <HAL_DMA_Abort+0x274>
 8004eea:	2301      	movs	r3, #1
 8004eec:	e031      	b.n	8004f52 <HAL_DMA_Abort+0x276>
 8004eee:	bf00      	nop
 8004ef0:	40020010 	.word	0x40020010
 8004ef4:	40020028 	.word	0x40020028
 8004ef8:	40020040 	.word	0x40020040
 8004efc:	40020058 	.word	0x40020058
 8004f00:	40020070 	.word	0x40020070
 8004f04:	40020088 	.word	0x40020088
 8004f08:	400200a0 	.word	0x400200a0
 8004f0c:	400200b8 	.word	0x400200b8
 8004f10:	40020410 	.word	0x40020410
 8004f14:	40020428 	.word	0x40020428
 8004f18:	40020440 	.word	0x40020440
 8004f1c:	40020458 	.word	0x40020458
 8004f20:	40020470 	.word	0x40020470
 8004f24:	40020488 	.word	0x40020488
 8004f28:	400204a0 	.word	0x400204a0
 8004f2c:	400204b8 	.word	0x400204b8
 8004f30:	58025408 	.word	0x58025408
 8004f34:	5802541c 	.word	0x5802541c
 8004f38:	58025430 	.word	0x58025430
 8004f3c:	58025444 	.word	0x58025444
 8004f40:	58025458 	.word	0x58025458
 8004f44:	5802546c 	.word	0x5802546c
 8004f48:	58025480 	.word	0x58025480
 8004f4c:	58025494 	.word	0x58025494
 8004f50:	2300      	movs	r3, #0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f64:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a6d      	ldr	r2, [pc, #436]	; (8005120 <HAL_DMA_Abort+0x444>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d04a      	beq.n	8005006 <HAL_DMA_Abort+0x32a>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a6b      	ldr	r2, [pc, #428]	; (8005124 <HAL_DMA_Abort+0x448>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d045      	beq.n	8005006 <HAL_DMA_Abort+0x32a>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a6a      	ldr	r2, [pc, #424]	; (8005128 <HAL_DMA_Abort+0x44c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d040      	beq.n	8005006 <HAL_DMA_Abort+0x32a>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a68      	ldr	r2, [pc, #416]	; (800512c <HAL_DMA_Abort+0x450>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d03b      	beq.n	8005006 <HAL_DMA_Abort+0x32a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a67      	ldr	r2, [pc, #412]	; (8005130 <HAL_DMA_Abort+0x454>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d036      	beq.n	8005006 <HAL_DMA_Abort+0x32a>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a65      	ldr	r2, [pc, #404]	; (8005134 <HAL_DMA_Abort+0x458>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d031      	beq.n	8005006 <HAL_DMA_Abort+0x32a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a64      	ldr	r2, [pc, #400]	; (8005138 <HAL_DMA_Abort+0x45c>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d02c      	beq.n	8005006 <HAL_DMA_Abort+0x32a>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a62      	ldr	r2, [pc, #392]	; (800513c <HAL_DMA_Abort+0x460>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d027      	beq.n	8005006 <HAL_DMA_Abort+0x32a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a61      	ldr	r2, [pc, #388]	; (8005140 <HAL_DMA_Abort+0x464>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d022      	beq.n	8005006 <HAL_DMA_Abort+0x32a>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a5f      	ldr	r2, [pc, #380]	; (8005144 <HAL_DMA_Abort+0x468>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d01d      	beq.n	8005006 <HAL_DMA_Abort+0x32a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a5e      	ldr	r2, [pc, #376]	; (8005148 <HAL_DMA_Abort+0x46c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d018      	beq.n	8005006 <HAL_DMA_Abort+0x32a>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a5c      	ldr	r2, [pc, #368]	; (800514c <HAL_DMA_Abort+0x470>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d013      	beq.n	8005006 <HAL_DMA_Abort+0x32a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a5b      	ldr	r2, [pc, #364]	; (8005150 <HAL_DMA_Abort+0x474>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d00e      	beq.n	8005006 <HAL_DMA_Abort+0x32a>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a59      	ldr	r2, [pc, #356]	; (8005154 <HAL_DMA_Abort+0x478>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d009      	beq.n	8005006 <HAL_DMA_Abort+0x32a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a58      	ldr	r2, [pc, #352]	; (8005158 <HAL_DMA_Abort+0x47c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d004      	beq.n	8005006 <HAL_DMA_Abort+0x32a>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a56      	ldr	r2, [pc, #344]	; (800515c <HAL_DMA_Abort+0x480>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d108      	bne.n	8005018 <HAL_DMA_Abort+0x33c>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f022 0201 	bic.w	r2, r2, #1
 8005014:	601a      	str	r2, [r3, #0]
 8005016:	e007      	b.n	8005028 <HAL_DMA_Abort+0x34c>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0201 	bic.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005028:	e013      	b.n	8005052 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800502a:	f7ff f8dd 	bl	80041e8 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b05      	cmp	r3, #5
 8005036:	d90c      	bls.n	8005052 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2220      	movs	r2, #32
 800503c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2203      	movs	r2, #3
 8005042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e12d      	b.n	80052ae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e5      	bne.n	800502a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a2f      	ldr	r2, [pc, #188]	; (8005120 <HAL_DMA_Abort+0x444>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d04a      	beq.n	80050fe <HAL_DMA_Abort+0x422>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a2d      	ldr	r2, [pc, #180]	; (8005124 <HAL_DMA_Abort+0x448>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d045      	beq.n	80050fe <HAL_DMA_Abort+0x422>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a2c      	ldr	r2, [pc, #176]	; (8005128 <HAL_DMA_Abort+0x44c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d040      	beq.n	80050fe <HAL_DMA_Abort+0x422>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a2a      	ldr	r2, [pc, #168]	; (800512c <HAL_DMA_Abort+0x450>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d03b      	beq.n	80050fe <HAL_DMA_Abort+0x422>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a29      	ldr	r2, [pc, #164]	; (8005130 <HAL_DMA_Abort+0x454>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d036      	beq.n	80050fe <HAL_DMA_Abort+0x422>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a27      	ldr	r2, [pc, #156]	; (8005134 <HAL_DMA_Abort+0x458>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d031      	beq.n	80050fe <HAL_DMA_Abort+0x422>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a26      	ldr	r2, [pc, #152]	; (8005138 <HAL_DMA_Abort+0x45c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d02c      	beq.n	80050fe <HAL_DMA_Abort+0x422>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a24      	ldr	r2, [pc, #144]	; (800513c <HAL_DMA_Abort+0x460>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d027      	beq.n	80050fe <HAL_DMA_Abort+0x422>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a23      	ldr	r2, [pc, #140]	; (8005140 <HAL_DMA_Abort+0x464>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d022      	beq.n	80050fe <HAL_DMA_Abort+0x422>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a21      	ldr	r2, [pc, #132]	; (8005144 <HAL_DMA_Abort+0x468>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d01d      	beq.n	80050fe <HAL_DMA_Abort+0x422>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a20      	ldr	r2, [pc, #128]	; (8005148 <HAL_DMA_Abort+0x46c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d018      	beq.n	80050fe <HAL_DMA_Abort+0x422>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1e      	ldr	r2, [pc, #120]	; (800514c <HAL_DMA_Abort+0x470>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d013      	beq.n	80050fe <HAL_DMA_Abort+0x422>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1d      	ldr	r2, [pc, #116]	; (8005150 <HAL_DMA_Abort+0x474>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d00e      	beq.n	80050fe <HAL_DMA_Abort+0x422>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a1b      	ldr	r2, [pc, #108]	; (8005154 <HAL_DMA_Abort+0x478>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d009      	beq.n	80050fe <HAL_DMA_Abort+0x422>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1a      	ldr	r2, [pc, #104]	; (8005158 <HAL_DMA_Abort+0x47c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d004      	beq.n	80050fe <HAL_DMA_Abort+0x422>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a18      	ldr	r2, [pc, #96]	; (800515c <HAL_DMA_Abort+0x480>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d101      	bne.n	8005102 <HAL_DMA_Abort+0x426>
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <HAL_DMA_Abort+0x428>
 8005102:	2300      	movs	r3, #0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d02b      	beq.n	8005160 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005112:	f003 031f 	and.w	r3, r3, #31
 8005116:	223f      	movs	r2, #63	; 0x3f
 8005118:	409a      	lsls	r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	609a      	str	r2, [r3, #8]
 800511e:	e02a      	b.n	8005176 <HAL_DMA_Abort+0x49a>
 8005120:	40020010 	.word	0x40020010
 8005124:	40020028 	.word	0x40020028
 8005128:	40020040 	.word	0x40020040
 800512c:	40020058 	.word	0x40020058
 8005130:	40020070 	.word	0x40020070
 8005134:	40020088 	.word	0x40020088
 8005138:	400200a0 	.word	0x400200a0
 800513c:	400200b8 	.word	0x400200b8
 8005140:	40020410 	.word	0x40020410
 8005144:	40020428 	.word	0x40020428
 8005148:	40020440 	.word	0x40020440
 800514c:	40020458 	.word	0x40020458
 8005150:	40020470 	.word	0x40020470
 8005154:	40020488 	.word	0x40020488
 8005158:	400204a0 	.word	0x400204a0
 800515c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005164:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	2201      	movs	r2, #1
 8005170:	409a      	lsls	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a4f      	ldr	r2, [pc, #316]	; (80052b8 <HAL_DMA_Abort+0x5dc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d072      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a4d      	ldr	r2, [pc, #308]	; (80052bc <HAL_DMA_Abort+0x5e0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d06d      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a4c      	ldr	r2, [pc, #304]	; (80052c0 <HAL_DMA_Abort+0x5e4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d068      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a4a      	ldr	r2, [pc, #296]	; (80052c4 <HAL_DMA_Abort+0x5e8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d063      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a49      	ldr	r2, [pc, #292]	; (80052c8 <HAL_DMA_Abort+0x5ec>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d05e      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a47      	ldr	r2, [pc, #284]	; (80052cc <HAL_DMA_Abort+0x5f0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d059      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a46      	ldr	r2, [pc, #280]	; (80052d0 <HAL_DMA_Abort+0x5f4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d054      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a44      	ldr	r2, [pc, #272]	; (80052d4 <HAL_DMA_Abort+0x5f8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d04f      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a43      	ldr	r2, [pc, #268]	; (80052d8 <HAL_DMA_Abort+0x5fc>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d04a      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a41      	ldr	r2, [pc, #260]	; (80052dc <HAL_DMA_Abort+0x600>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d045      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a40      	ldr	r2, [pc, #256]	; (80052e0 <HAL_DMA_Abort+0x604>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d040      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a3e      	ldr	r2, [pc, #248]	; (80052e4 <HAL_DMA_Abort+0x608>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d03b      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a3d      	ldr	r2, [pc, #244]	; (80052e8 <HAL_DMA_Abort+0x60c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d036      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a3b      	ldr	r2, [pc, #236]	; (80052ec <HAL_DMA_Abort+0x610>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d031      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a3a      	ldr	r2, [pc, #232]	; (80052f0 <HAL_DMA_Abort+0x614>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d02c      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a38      	ldr	r2, [pc, #224]	; (80052f4 <HAL_DMA_Abort+0x618>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d027      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a37      	ldr	r2, [pc, #220]	; (80052f8 <HAL_DMA_Abort+0x61c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d022      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a35      	ldr	r2, [pc, #212]	; (80052fc <HAL_DMA_Abort+0x620>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d01d      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a34      	ldr	r2, [pc, #208]	; (8005300 <HAL_DMA_Abort+0x624>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d018      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a32      	ldr	r2, [pc, #200]	; (8005304 <HAL_DMA_Abort+0x628>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d013      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a31      	ldr	r2, [pc, #196]	; (8005308 <HAL_DMA_Abort+0x62c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00e      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a2f      	ldr	r2, [pc, #188]	; (800530c <HAL_DMA_Abort+0x630>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d009      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a2e      	ldr	r2, [pc, #184]	; (8005310 <HAL_DMA_Abort+0x634>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d004      	beq.n	8005266 <HAL_DMA_Abort+0x58a>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a2c      	ldr	r2, [pc, #176]	; (8005314 <HAL_DMA_Abort+0x638>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d101      	bne.n	800526a <HAL_DMA_Abort+0x58e>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <HAL_DMA_Abort+0x590>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d015      	beq.n	800529c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005278:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00c      	beq.n	800529c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800528c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005290:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800529a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80052ac:	2300      	movs	r3, #0
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40020010 	.word	0x40020010
 80052bc:	40020028 	.word	0x40020028
 80052c0:	40020040 	.word	0x40020040
 80052c4:	40020058 	.word	0x40020058
 80052c8:	40020070 	.word	0x40020070
 80052cc:	40020088 	.word	0x40020088
 80052d0:	400200a0 	.word	0x400200a0
 80052d4:	400200b8 	.word	0x400200b8
 80052d8:	40020410 	.word	0x40020410
 80052dc:	40020428 	.word	0x40020428
 80052e0:	40020440 	.word	0x40020440
 80052e4:	40020458 	.word	0x40020458
 80052e8:	40020470 	.word	0x40020470
 80052ec:	40020488 	.word	0x40020488
 80052f0:	400204a0 	.word	0x400204a0
 80052f4:	400204b8 	.word	0x400204b8
 80052f8:	58025408 	.word	0x58025408
 80052fc:	5802541c 	.word	0x5802541c
 8005300:	58025430 	.word	0x58025430
 8005304:	58025444 	.word	0x58025444
 8005308:	58025458 	.word	0x58025458
 800530c:	5802546c 	.word	0x5802546c
 8005310:	58025480 	.word	0x58025480
 8005314:	58025494 	.word	0x58025494

08005318 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e205      	b.n	8005736 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b02      	cmp	r3, #2
 8005334:	d004      	beq.n	8005340 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2280      	movs	r2, #128	; 0x80
 800533a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e1fa      	b.n	8005736 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a8c      	ldr	r2, [pc, #560]	; (8005578 <HAL_DMA_Abort_IT+0x260>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d04a      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xc8>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a8b      	ldr	r2, [pc, #556]	; (800557c <HAL_DMA_Abort_IT+0x264>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d045      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xc8>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a89      	ldr	r2, [pc, #548]	; (8005580 <HAL_DMA_Abort_IT+0x268>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d040      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xc8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a88      	ldr	r2, [pc, #544]	; (8005584 <HAL_DMA_Abort_IT+0x26c>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d03b      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xc8>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a86      	ldr	r2, [pc, #536]	; (8005588 <HAL_DMA_Abort_IT+0x270>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d036      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xc8>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a85      	ldr	r2, [pc, #532]	; (800558c <HAL_DMA_Abort_IT+0x274>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d031      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xc8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a83      	ldr	r2, [pc, #524]	; (8005590 <HAL_DMA_Abort_IT+0x278>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d02c      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xc8>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a82      	ldr	r2, [pc, #520]	; (8005594 <HAL_DMA_Abort_IT+0x27c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d027      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xc8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a80      	ldr	r2, [pc, #512]	; (8005598 <HAL_DMA_Abort_IT+0x280>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d022      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xc8>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a7f      	ldr	r2, [pc, #508]	; (800559c <HAL_DMA_Abort_IT+0x284>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d01d      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xc8>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a7d      	ldr	r2, [pc, #500]	; (80055a0 <HAL_DMA_Abort_IT+0x288>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d018      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xc8>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a7c      	ldr	r2, [pc, #496]	; (80055a4 <HAL_DMA_Abort_IT+0x28c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d013      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xc8>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a7a      	ldr	r2, [pc, #488]	; (80055a8 <HAL_DMA_Abort_IT+0x290>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00e      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xc8>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a79      	ldr	r2, [pc, #484]	; (80055ac <HAL_DMA_Abort_IT+0x294>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d009      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xc8>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a77      	ldr	r2, [pc, #476]	; (80055b0 <HAL_DMA_Abort_IT+0x298>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d004      	beq.n	80053e0 <HAL_DMA_Abort_IT+0xc8>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a76      	ldr	r2, [pc, #472]	; (80055b4 <HAL_DMA_Abort_IT+0x29c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d101      	bne.n	80053e4 <HAL_DMA_Abort_IT+0xcc>
 80053e0:	2301      	movs	r3, #1
 80053e2:	e000      	b.n	80053e6 <HAL_DMA_Abort_IT+0xce>
 80053e4:	2300      	movs	r3, #0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d065      	beq.n	80054b6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2204      	movs	r2, #4
 80053ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a60      	ldr	r2, [pc, #384]	; (8005578 <HAL_DMA_Abort_IT+0x260>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d04a      	beq.n	8005492 <HAL_DMA_Abort_IT+0x17a>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a5e      	ldr	r2, [pc, #376]	; (800557c <HAL_DMA_Abort_IT+0x264>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d045      	beq.n	8005492 <HAL_DMA_Abort_IT+0x17a>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a5d      	ldr	r2, [pc, #372]	; (8005580 <HAL_DMA_Abort_IT+0x268>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d040      	beq.n	8005492 <HAL_DMA_Abort_IT+0x17a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a5b      	ldr	r2, [pc, #364]	; (8005584 <HAL_DMA_Abort_IT+0x26c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d03b      	beq.n	8005492 <HAL_DMA_Abort_IT+0x17a>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a5a      	ldr	r2, [pc, #360]	; (8005588 <HAL_DMA_Abort_IT+0x270>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d036      	beq.n	8005492 <HAL_DMA_Abort_IT+0x17a>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a58      	ldr	r2, [pc, #352]	; (800558c <HAL_DMA_Abort_IT+0x274>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d031      	beq.n	8005492 <HAL_DMA_Abort_IT+0x17a>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a57      	ldr	r2, [pc, #348]	; (8005590 <HAL_DMA_Abort_IT+0x278>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d02c      	beq.n	8005492 <HAL_DMA_Abort_IT+0x17a>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a55      	ldr	r2, [pc, #340]	; (8005594 <HAL_DMA_Abort_IT+0x27c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d027      	beq.n	8005492 <HAL_DMA_Abort_IT+0x17a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a54      	ldr	r2, [pc, #336]	; (8005598 <HAL_DMA_Abort_IT+0x280>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d022      	beq.n	8005492 <HAL_DMA_Abort_IT+0x17a>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a52      	ldr	r2, [pc, #328]	; (800559c <HAL_DMA_Abort_IT+0x284>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d01d      	beq.n	8005492 <HAL_DMA_Abort_IT+0x17a>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a51      	ldr	r2, [pc, #324]	; (80055a0 <HAL_DMA_Abort_IT+0x288>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d018      	beq.n	8005492 <HAL_DMA_Abort_IT+0x17a>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a4f      	ldr	r2, [pc, #316]	; (80055a4 <HAL_DMA_Abort_IT+0x28c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <HAL_DMA_Abort_IT+0x17a>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a4e      	ldr	r2, [pc, #312]	; (80055a8 <HAL_DMA_Abort_IT+0x290>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00e      	beq.n	8005492 <HAL_DMA_Abort_IT+0x17a>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a4c      	ldr	r2, [pc, #304]	; (80055ac <HAL_DMA_Abort_IT+0x294>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d009      	beq.n	8005492 <HAL_DMA_Abort_IT+0x17a>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a4b      	ldr	r2, [pc, #300]	; (80055b0 <HAL_DMA_Abort_IT+0x298>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_DMA_Abort_IT+0x17a>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a49      	ldr	r2, [pc, #292]	; (80055b4 <HAL_DMA_Abort_IT+0x29c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d108      	bne.n	80054a4 <HAL_DMA_Abort_IT+0x18c>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]
 80054a2:	e147      	b.n	8005734 <HAL_DMA_Abort_IT+0x41c>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0201 	bic.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	e13e      	b.n	8005734 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 020e 	bic.w	r2, r2, #14
 80054c4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a2b      	ldr	r2, [pc, #172]	; (8005578 <HAL_DMA_Abort_IT+0x260>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d04a      	beq.n	8005566 <HAL_DMA_Abort_IT+0x24e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a29      	ldr	r2, [pc, #164]	; (800557c <HAL_DMA_Abort_IT+0x264>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d045      	beq.n	8005566 <HAL_DMA_Abort_IT+0x24e>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a28      	ldr	r2, [pc, #160]	; (8005580 <HAL_DMA_Abort_IT+0x268>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d040      	beq.n	8005566 <HAL_DMA_Abort_IT+0x24e>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a26      	ldr	r2, [pc, #152]	; (8005584 <HAL_DMA_Abort_IT+0x26c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d03b      	beq.n	8005566 <HAL_DMA_Abort_IT+0x24e>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a25      	ldr	r2, [pc, #148]	; (8005588 <HAL_DMA_Abort_IT+0x270>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d036      	beq.n	8005566 <HAL_DMA_Abort_IT+0x24e>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a23      	ldr	r2, [pc, #140]	; (800558c <HAL_DMA_Abort_IT+0x274>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d031      	beq.n	8005566 <HAL_DMA_Abort_IT+0x24e>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a22      	ldr	r2, [pc, #136]	; (8005590 <HAL_DMA_Abort_IT+0x278>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d02c      	beq.n	8005566 <HAL_DMA_Abort_IT+0x24e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a20      	ldr	r2, [pc, #128]	; (8005594 <HAL_DMA_Abort_IT+0x27c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d027      	beq.n	8005566 <HAL_DMA_Abort_IT+0x24e>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a1f      	ldr	r2, [pc, #124]	; (8005598 <HAL_DMA_Abort_IT+0x280>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d022      	beq.n	8005566 <HAL_DMA_Abort_IT+0x24e>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1d      	ldr	r2, [pc, #116]	; (800559c <HAL_DMA_Abort_IT+0x284>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01d      	beq.n	8005566 <HAL_DMA_Abort_IT+0x24e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a1c      	ldr	r2, [pc, #112]	; (80055a0 <HAL_DMA_Abort_IT+0x288>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d018      	beq.n	8005566 <HAL_DMA_Abort_IT+0x24e>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a1a      	ldr	r2, [pc, #104]	; (80055a4 <HAL_DMA_Abort_IT+0x28c>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d013      	beq.n	8005566 <HAL_DMA_Abort_IT+0x24e>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a19      	ldr	r2, [pc, #100]	; (80055a8 <HAL_DMA_Abort_IT+0x290>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00e      	beq.n	8005566 <HAL_DMA_Abort_IT+0x24e>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a17      	ldr	r2, [pc, #92]	; (80055ac <HAL_DMA_Abort_IT+0x294>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d009      	beq.n	8005566 <HAL_DMA_Abort_IT+0x24e>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a16      	ldr	r2, [pc, #88]	; (80055b0 <HAL_DMA_Abort_IT+0x298>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d004      	beq.n	8005566 <HAL_DMA_Abort_IT+0x24e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a14      	ldr	r2, [pc, #80]	; (80055b4 <HAL_DMA_Abort_IT+0x29c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d128      	bne.n	80055b8 <HAL_DMA_Abort_IT+0x2a0>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0201 	bic.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	e027      	b.n	80055c8 <HAL_DMA_Abort_IT+0x2b0>
 8005578:	40020010 	.word	0x40020010
 800557c:	40020028 	.word	0x40020028
 8005580:	40020040 	.word	0x40020040
 8005584:	40020058 	.word	0x40020058
 8005588:	40020070 	.word	0x40020070
 800558c:	40020088 	.word	0x40020088
 8005590:	400200a0 	.word	0x400200a0
 8005594:	400200b8 	.word	0x400200b8
 8005598:	40020410 	.word	0x40020410
 800559c:	40020428 	.word	0x40020428
 80055a0:	40020440 	.word	0x40020440
 80055a4:	40020458 	.word	0x40020458
 80055a8:	40020470 	.word	0x40020470
 80055ac:	40020488 	.word	0x40020488
 80055b0:	400204a0 	.word	0x400204a0
 80055b4:	400204b8 	.word	0x400204b8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0201 	bic.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a5c      	ldr	r2, [pc, #368]	; (8005740 <HAL_DMA_Abort_IT+0x428>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d072      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a5b      	ldr	r2, [pc, #364]	; (8005744 <HAL_DMA_Abort_IT+0x42c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d06d      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a59      	ldr	r2, [pc, #356]	; (8005748 <HAL_DMA_Abort_IT+0x430>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d068      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a58      	ldr	r2, [pc, #352]	; (800574c <HAL_DMA_Abort_IT+0x434>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d063      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a56      	ldr	r2, [pc, #344]	; (8005750 <HAL_DMA_Abort_IT+0x438>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d05e      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a55      	ldr	r2, [pc, #340]	; (8005754 <HAL_DMA_Abort_IT+0x43c>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d059      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a53      	ldr	r2, [pc, #332]	; (8005758 <HAL_DMA_Abort_IT+0x440>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d054      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a52      	ldr	r2, [pc, #328]	; (800575c <HAL_DMA_Abort_IT+0x444>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d04f      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a50      	ldr	r2, [pc, #320]	; (8005760 <HAL_DMA_Abort_IT+0x448>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d04a      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a4f      	ldr	r2, [pc, #316]	; (8005764 <HAL_DMA_Abort_IT+0x44c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d045      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a4d      	ldr	r2, [pc, #308]	; (8005768 <HAL_DMA_Abort_IT+0x450>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d040      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a4c      	ldr	r2, [pc, #304]	; (800576c <HAL_DMA_Abort_IT+0x454>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d03b      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a4a      	ldr	r2, [pc, #296]	; (8005770 <HAL_DMA_Abort_IT+0x458>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d036      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a49      	ldr	r2, [pc, #292]	; (8005774 <HAL_DMA_Abort_IT+0x45c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d031      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a47      	ldr	r2, [pc, #284]	; (8005778 <HAL_DMA_Abort_IT+0x460>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d02c      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a46      	ldr	r2, [pc, #280]	; (800577c <HAL_DMA_Abort_IT+0x464>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d027      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a44      	ldr	r2, [pc, #272]	; (8005780 <HAL_DMA_Abort_IT+0x468>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d022      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a43      	ldr	r2, [pc, #268]	; (8005784 <HAL_DMA_Abort_IT+0x46c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d01d      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a41      	ldr	r2, [pc, #260]	; (8005788 <HAL_DMA_Abort_IT+0x470>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d018      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a40      	ldr	r2, [pc, #256]	; (800578c <HAL_DMA_Abort_IT+0x474>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a3e      	ldr	r2, [pc, #248]	; (8005790 <HAL_DMA_Abort_IT+0x478>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a3d      	ldr	r2, [pc, #244]	; (8005794 <HAL_DMA_Abort_IT+0x47c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a3b      	ldr	r2, [pc, #236]	; (8005798 <HAL_DMA_Abort_IT+0x480>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_DMA_Abort_IT+0x3a0>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a3a      	ldr	r2, [pc, #232]	; (800579c <HAL_DMA_Abort_IT+0x484>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d101      	bne.n	80056bc <HAL_DMA_Abort_IT+0x3a4>
 80056b8:	2301      	movs	r3, #1
 80056ba:	e000      	b.n	80056be <HAL_DMA_Abort_IT+0x3a6>
 80056bc:	2300      	movs	r3, #0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d028      	beq.n	8005714 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056d0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056dc:	f003 031f 	and.w	r3, r3, #31
 80056e0:	2201      	movs	r2, #1
 80056e2:	409a      	lsls	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80056f0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00c      	beq.n	8005714 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005704:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005708:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005712:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	40020010 	.word	0x40020010
 8005744:	40020028 	.word	0x40020028
 8005748:	40020040 	.word	0x40020040
 800574c:	40020058 	.word	0x40020058
 8005750:	40020070 	.word	0x40020070
 8005754:	40020088 	.word	0x40020088
 8005758:	400200a0 	.word	0x400200a0
 800575c:	400200b8 	.word	0x400200b8
 8005760:	40020410 	.word	0x40020410
 8005764:	40020428 	.word	0x40020428
 8005768:	40020440 	.word	0x40020440
 800576c:	40020458 	.word	0x40020458
 8005770:	40020470 	.word	0x40020470
 8005774:	40020488 	.word	0x40020488
 8005778:	400204a0 	.word	0x400204a0
 800577c:	400204b8 	.word	0x400204b8
 8005780:	58025408 	.word	0x58025408
 8005784:	5802541c 	.word	0x5802541c
 8005788:	58025430 	.word	0x58025430
 800578c:	58025444 	.word	0x58025444
 8005790:	58025458 	.word	0x58025458
 8005794:	5802546c 	.word	0x5802546c
 8005798:	58025480 	.word	0x58025480
 800579c:	58025494 	.word	0x58025494

080057a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	; 0x28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057ac:	4b67      	ldr	r3, [pc, #412]	; (800594c <HAL_DMA_IRQHandler+0x1ac>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a67      	ldr	r2, [pc, #412]	; (8005950 <HAL_DMA_IRQHandler+0x1b0>)
 80057b2:	fba2 2303 	umull	r2, r3, r2, r3
 80057b6:	0a9b      	lsrs	r3, r3, #10
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057be:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a5f      	ldr	r2, [pc, #380]	; (8005954 <HAL_DMA_IRQHandler+0x1b4>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d04a      	beq.n	8005872 <HAL_DMA_IRQHandler+0xd2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a5d      	ldr	r2, [pc, #372]	; (8005958 <HAL_DMA_IRQHandler+0x1b8>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d045      	beq.n	8005872 <HAL_DMA_IRQHandler+0xd2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a5c      	ldr	r2, [pc, #368]	; (800595c <HAL_DMA_IRQHandler+0x1bc>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d040      	beq.n	8005872 <HAL_DMA_IRQHandler+0xd2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a5a      	ldr	r2, [pc, #360]	; (8005960 <HAL_DMA_IRQHandler+0x1c0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d03b      	beq.n	8005872 <HAL_DMA_IRQHandler+0xd2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a59      	ldr	r2, [pc, #356]	; (8005964 <HAL_DMA_IRQHandler+0x1c4>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d036      	beq.n	8005872 <HAL_DMA_IRQHandler+0xd2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a57      	ldr	r2, [pc, #348]	; (8005968 <HAL_DMA_IRQHandler+0x1c8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d031      	beq.n	8005872 <HAL_DMA_IRQHandler+0xd2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a56      	ldr	r2, [pc, #344]	; (800596c <HAL_DMA_IRQHandler+0x1cc>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d02c      	beq.n	8005872 <HAL_DMA_IRQHandler+0xd2>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a54      	ldr	r2, [pc, #336]	; (8005970 <HAL_DMA_IRQHandler+0x1d0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d027      	beq.n	8005872 <HAL_DMA_IRQHandler+0xd2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a53      	ldr	r2, [pc, #332]	; (8005974 <HAL_DMA_IRQHandler+0x1d4>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d022      	beq.n	8005872 <HAL_DMA_IRQHandler+0xd2>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a51      	ldr	r2, [pc, #324]	; (8005978 <HAL_DMA_IRQHandler+0x1d8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d01d      	beq.n	8005872 <HAL_DMA_IRQHandler+0xd2>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a50      	ldr	r2, [pc, #320]	; (800597c <HAL_DMA_IRQHandler+0x1dc>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d018      	beq.n	8005872 <HAL_DMA_IRQHandler+0xd2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a4e      	ldr	r2, [pc, #312]	; (8005980 <HAL_DMA_IRQHandler+0x1e0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d013      	beq.n	8005872 <HAL_DMA_IRQHandler+0xd2>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a4d      	ldr	r2, [pc, #308]	; (8005984 <HAL_DMA_IRQHandler+0x1e4>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d00e      	beq.n	8005872 <HAL_DMA_IRQHandler+0xd2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a4b      	ldr	r2, [pc, #300]	; (8005988 <HAL_DMA_IRQHandler+0x1e8>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d009      	beq.n	8005872 <HAL_DMA_IRQHandler+0xd2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a4a      	ldr	r2, [pc, #296]	; (800598c <HAL_DMA_IRQHandler+0x1ec>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d004      	beq.n	8005872 <HAL_DMA_IRQHandler+0xd2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a48      	ldr	r2, [pc, #288]	; (8005990 <HAL_DMA_IRQHandler+0x1f0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d101      	bne.n	8005876 <HAL_DMA_IRQHandler+0xd6>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <HAL_DMA_IRQHandler+0xd8>
 8005876:	2300      	movs	r3, #0
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 842b 	beq.w	80060d4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005882:	f003 031f 	and.w	r3, r3, #31
 8005886:	2208      	movs	r2, #8
 8005888:	409a      	lsls	r2, r3
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	4013      	ands	r3, r2
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80a2 	beq.w	80059d8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a2e      	ldr	r2, [pc, #184]	; (8005954 <HAL_DMA_IRQHandler+0x1b4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d04a      	beq.n	8005934 <HAL_DMA_IRQHandler+0x194>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a2d      	ldr	r2, [pc, #180]	; (8005958 <HAL_DMA_IRQHandler+0x1b8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d045      	beq.n	8005934 <HAL_DMA_IRQHandler+0x194>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a2b      	ldr	r2, [pc, #172]	; (800595c <HAL_DMA_IRQHandler+0x1bc>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d040      	beq.n	8005934 <HAL_DMA_IRQHandler+0x194>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a2a      	ldr	r2, [pc, #168]	; (8005960 <HAL_DMA_IRQHandler+0x1c0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d03b      	beq.n	8005934 <HAL_DMA_IRQHandler+0x194>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a28      	ldr	r2, [pc, #160]	; (8005964 <HAL_DMA_IRQHandler+0x1c4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d036      	beq.n	8005934 <HAL_DMA_IRQHandler+0x194>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a27      	ldr	r2, [pc, #156]	; (8005968 <HAL_DMA_IRQHandler+0x1c8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d031      	beq.n	8005934 <HAL_DMA_IRQHandler+0x194>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a25      	ldr	r2, [pc, #148]	; (800596c <HAL_DMA_IRQHandler+0x1cc>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d02c      	beq.n	8005934 <HAL_DMA_IRQHandler+0x194>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a24      	ldr	r2, [pc, #144]	; (8005970 <HAL_DMA_IRQHandler+0x1d0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d027      	beq.n	8005934 <HAL_DMA_IRQHandler+0x194>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a22      	ldr	r2, [pc, #136]	; (8005974 <HAL_DMA_IRQHandler+0x1d4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d022      	beq.n	8005934 <HAL_DMA_IRQHandler+0x194>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a21      	ldr	r2, [pc, #132]	; (8005978 <HAL_DMA_IRQHandler+0x1d8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d01d      	beq.n	8005934 <HAL_DMA_IRQHandler+0x194>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a1f      	ldr	r2, [pc, #124]	; (800597c <HAL_DMA_IRQHandler+0x1dc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d018      	beq.n	8005934 <HAL_DMA_IRQHandler+0x194>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1e      	ldr	r2, [pc, #120]	; (8005980 <HAL_DMA_IRQHandler+0x1e0>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d013      	beq.n	8005934 <HAL_DMA_IRQHandler+0x194>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a1c      	ldr	r2, [pc, #112]	; (8005984 <HAL_DMA_IRQHandler+0x1e4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00e      	beq.n	8005934 <HAL_DMA_IRQHandler+0x194>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1b      	ldr	r2, [pc, #108]	; (8005988 <HAL_DMA_IRQHandler+0x1e8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d009      	beq.n	8005934 <HAL_DMA_IRQHandler+0x194>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a19      	ldr	r2, [pc, #100]	; (800598c <HAL_DMA_IRQHandler+0x1ec>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <HAL_DMA_IRQHandler+0x194>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a18      	ldr	r2, [pc, #96]	; (8005990 <HAL_DMA_IRQHandler+0x1f0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d12f      	bne.n	8005994 <HAL_DMA_IRQHandler+0x1f4>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	bf14      	ite	ne
 8005942:	2301      	movne	r3, #1
 8005944:	2300      	moveq	r3, #0
 8005946:	b2db      	uxtb	r3, r3
 8005948:	e02e      	b.n	80059a8 <HAL_DMA_IRQHandler+0x208>
 800594a:	bf00      	nop
 800594c:	24000014 	.word	0x24000014
 8005950:	1b4e81b5 	.word	0x1b4e81b5
 8005954:	40020010 	.word	0x40020010
 8005958:	40020028 	.word	0x40020028
 800595c:	40020040 	.word	0x40020040
 8005960:	40020058 	.word	0x40020058
 8005964:	40020070 	.word	0x40020070
 8005968:	40020088 	.word	0x40020088
 800596c:	400200a0 	.word	0x400200a0
 8005970:	400200b8 	.word	0x400200b8
 8005974:	40020410 	.word	0x40020410
 8005978:	40020428 	.word	0x40020428
 800597c:	40020440 	.word	0x40020440
 8005980:	40020458 	.word	0x40020458
 8005984:	40020470 	.word	0x40020470
 8005988:	40020488 	.word	0x40020488
 800598c:	400204a0 	.word	0x400204a0
 8005990:	400204b8 	.word	0x400204b8
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bf14      	ite	ne
 80059a2:	2301      	movne	r3, #1
 80059a4:	2300      	moveq	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d015      	beq.n	80059d8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f022 0204 	bic.w	r2, r2, #4
 80059ba:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	2208      	movs	r2, #8
 80059c6:	409a      	lsls	r2, r3
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d0:	f043 0201 	orr.w	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059dc:	f003 031f 	and.w	r3, r3, #31
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	fa22 f303 	lsr.w	r3, r2, r3
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d06e      	beq.n	8005acc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a69      	ldr	r2, [pc, #420]	; (8005b98 <HAL_DMA_IRQHandler+0x3f8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d04a      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x2ee>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a67      	ldr	r2, [pc, #412]	; (8005b9c <HAL_DMA_IRQHandler+0x3fc>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d045      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x2ee>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a66      	ldr	r2, [pc, #408]	; (8005ba0 <HAL_DMA_IRQHandler+0x400>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d040      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x2ee>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a64      	ldr	r2, [pc, #400]	; (8005ba4 <HAL_DMA_IRQHandler+0x404>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d03b      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x2ee>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a63      	ldr	r2, [pc, #396]	; (8005ba8 <HAL_DMA_IRQHandler+0x408>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d036      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x2ee>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a61      	ldr	r2, [pc, #388]	; (8005bac <HAL_DMA_IRQHandler+0x40c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d031      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x2ee>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a60      	ldr	r2, [pc, #384]	; (8005bb0 <HAL_DMA_IRQHandler+0x410>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d02c      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x2ee>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a5e      	ldr	r2, [pc, #376]	; (8005bb4 <HAL_DMA_IRQHandler+0x414>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d027      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x2ee>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a5d      	ldr	r2, [pc, #372]	; (8005bb8 <HAL_DMA_IRQHandler+0x418>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d022      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x2ee>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a5b      	ldr	r2, [pc, #364]	; (8005bbc <HAL_DMA_IRQHandler+0x41c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d01d      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x2ee>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a5a      	ldr	r2, [pc, #360]	; (8005bc0 <HAL_DMA_IRQHandler+0x420>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d018      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x2ee>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a58      	ldr	r2, [pc, #352]	; (8005bc4 <HAL_DMA_IRQHandler+0x424>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d013      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x2ee>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a57      	ldr	r2, [pc, #348]	; (8005bc8 <HAL_DMA_IRQHandler+0x428>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00e      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x2ee>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a55      	ldr	r2, [pc, #340]	; (8005bcc <HAL_DMA_IRQHandler+0x42c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d009      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x2ee>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a54      	ldr	r2, [pc, #336]	; (8005bd0 <HAL_DMA_IRQHandler+0x430>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d004      	beq.n	8005a8e <HAL_DMA_IRQHandler+0x2ee>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a52      	ldr	r2, [pc, #328]	; (8005bd4 <HAL_DMA_IRQHandler+0x434>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d10a      	bne.n	8005aa4 <HAL_DMA_IRQHandler+0x304>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	bf14      	ite	ne
 8005a9c:	2301      	movne	r3, #1
 8005a9e:	2300      	moveq	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	e003      	b.n	8005aac <HAL_DMA_IRQHandler+0x30c>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00d      	beq.n	8005acc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ab4:	f003 031f 	and.w	r3, r3, #31
 8005ab8:	2201      	movs	r2, #1
 8005aba:	409a      	lsls	r2, r3
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac4:	f043 0202 	orr.w	r2, r3, #2
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ad0:	f003 031f 	and.w	r3, r3, #31
 8005ad4:	2204      	movs	r2, #4
 8005ad6:	409a      	lsls	r2, r3
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	4013      	ands	r3, r2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 808f 	beq.w	8005c00 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a2c      	ldr	r2, [pc, #176]	; (8005b98 <HAL_DMA_IRQHandler+0x3f8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d04a      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x3e2>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a2a      	ldr	r2, [pc, #168]	; (8005b9c <HAL_DMA_IRQHandler+0x3fc>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d045      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x3e2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a29      	ldr	r2, [pc, #164]	; (8005ba0 <HAL_DMA_IRQHandler+0x400>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d040      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x3e2>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a27      	ldr	r2, [pc, #156]	; (8005ba4 <HAL_DMA_IRQHandler+0x404>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d03b      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x3e2>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a26      	ldr	r2, [pc, #152]	; (8005ba8 <HAL_DMA_IRQHandler+0x408>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d036      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x3e2>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a24      	ldr	r2, [pc, #144]	; (8005bac <HAL_DMA_IRQHandler+0x40c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d031      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x3e2>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a23      	ldr	r2, [pc, #140]	; (8005bb0 <HAL_DMA_IRQHandler+0x410>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d02c      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x3e2>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a21      	ldr	r2, [pc, #132]	; (8005bb4 <HAL_DMA_IRQHandler+0x414>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d027      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x3e2>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a20      	ldr	r2, [pc, #128]	; (8005bb8 <HAL_DMA_IRQHandler+0x418>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d022      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x3e2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a1e      	ldr	r2, [pc, #120]	; (8005bbc <HAL_DMA_IRQHandler+0x41c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d01d      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x3e2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a1d      	ldr	r2, [pc, #116]	; (8005bc0 <HAL_DMA_IRQHandler+0x420>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d018      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x3e2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1b      	ldr	r2, [pc, #108]	; (8005bc4 <HAL_DMA_IRQHandler+0x424>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d013      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x3e2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1a      	ldr	r2, [pc, #104]	; (8005bc8 <HAL_DMA_IRQHandler+0x428>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d00e      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x3e2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a18      	ldr	r2, [pc, #96]	; (8005bcc <HAL_DMA_IRQHandler+0x42c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d009      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x3e2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a17      	ldr	r2, [pc, #92]	; (8005bd0 <HAL_DMA_IRQHandler+0x430>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d004      	beq.n	8005b82 <HAL_DMA_IRQHandler+0x3e2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a15      	ldr	r2, [pc, #84]	; (8005bd4 <HAL_DMA_IRQHandler+0x434>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d12a      	bne.n	8005bd8 <HAL_DMA_IRQHandler+0x438>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bf14      	ite	ne
 8005b90:	2301      	movne	r3, #1
 8005b92:	2300      	moveq	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	e023      	b.n	8005be0 <HAL_DMA_IRQHandler+0x440>
 8005b98:	40020010 	.word	0x40020010
 8005b9c:	40020028 	.word	0x40020028
 8005ba0:	40020040 	.word	0x40020040
 8005ba4:	40020058 	.word	0x40020058
 8005ba8:	40020070 	.word	0x40020070
 8005bac:	40020088 	.word	0x40020088
 8005bb0:	400200a0 	.word	0x400200a0
 8005bb4:	400200b8 	.word	0x400200b8
 8005bb8:	40020410 	.word	0x40020410
 8005bbc:	40020428 	.word	0x40020428
 8005bc0:	40020440 	.word	0x40020440
 8005bc4:	40020458 	.word	0x40020458
 8005bc8:	40020470 	.word	0x40020470
 8005bcc:	40020488 	.word	0x40020488
 8005bd0:	400204a0 	.word	0x400204a0
 8005bd4:	400204b8 	.word	0x400204b8
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2300      	movs	r3, #0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00d      	beq.n	8005c00 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be8:	f003 031f 	and.w	r3, r3, #31
 8005bec:	2204      	movs	r2, #4
 8005bee:	409a      	lsls	r2, r3
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf8:	f043 0204 	orr.w	r2, r3, #4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	2210      	movs	r2, #16
 8005c0a:	409a      	lsls	r2, r3
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 80a6 	beq.w	8005d62 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a85      	ldr	r2, [pc, #532]	; (8005e30 <HAL_DMA_IRQHandler+0x690>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d04a      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x516>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a83      	ldr	r2, [pc, #524]	; (8005e34 <HAL_DMA_IRQHandler+0x694>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d045      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x516>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a82      	ldr	r2, [pc, #520]	; (8005e38 <HAL_DMA_IRQHandler+0x698>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d040      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x516>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a80      	ldr	r2, [pc, #512]	; (8005e3c <HAL_DMA_IRQHandler+0x69c>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d03b      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x516>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a7f      	ldr	r2, [pc, #508]	; (8005e40 <HAL_DMA_IRQHandler+0x6a0>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d036      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x516>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a7d      	ldr	r2, [pc, #500]	; (8005e44 <HAL_DMA_IRQHandler+0x6a4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d031      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x516>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a7c      	ldr	r2, [pc, #496]	; (8005e48 <HAL_DMA_IRQHandler+0x6a8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d02c      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x516>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a7a      	ldr	r2, [pc, #488]	; (8005e4c <HAL_DMA_IRQHandler+0x6ac>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d027      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x516>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a79      	ldr	r2, [pc, #484]	; (8005e50 <HAL_DMA_IRQHandler+0x6b0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d022      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x516>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a77      	ldr	r2, [pc, #476]	; (8005e54 <HAL_DMA_IRQHandler+0x6b4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d01d      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x516>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a76      	ldr	r2, [pc, #472]	; (8005e58 <HAL_DMA_IRQHandler+0x6b8>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d018      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x516>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a74      	ldr	r2, [pc, #464]	; (8005e5c <HAL_DMA_IRQHandler+0x6bc>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d013      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x516>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a73      	ldr	r2, [pc, #460]	; (8005e60 <HAL_DMA_IRQHandler+0x6c0>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00e      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x516>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a71      	ldr	r2, [pc, #452]	; (8005e64 <HAL_DMA_IRQHandler+0x6c4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d009      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x516>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a70      	ldr	r2, [pc, #448]	; (8005e68 <HAL_DMA_IRQHandler+0x6c8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d004      	beq.n	8005cb6 <HAL_DMA_IRQHandler+0x516>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a6e      	ldr	r2, [pc, #440]	; (8005e6c <HAL_DMA_IRQHandler+0x6cc>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d10a      	bne.n	8005ccc <HAL_DMA_IRQHandler+0x52c>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	bf14      	ite	ne
 8005cc4:	2301      	movne	r3, #1
 8005cc6:	2300      	moveq	r3, #0
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	e009      	b.n	8005ce0 <HAL_DMA_IRQHandler+0x540>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0304 	and.w	r3, r3, #4
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	bf14      	ite	ne
 8005cda:	2301      	movne	r3, #1
 8005cdc:	2300      	moveq	r3, #0
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d03e      	beq.n	8005d62 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ce8:	f003 031f 	and.w	r3, r3, #31
 8005cec:	2210      	movs	r2, #16
 8005cee:	409a      	lsls	r2, r3
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d018      	beq.n	8005d34 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d108      	bne.n	8005d22 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d024      	beq.n	8005d62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	4798      	blx	r3
 8005d20:	e01f      	b.n	8005d62 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01b      	beq.n	8005d62 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	4798      	blx	r3
 8005d32:	e016      	b.n	8005d62 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d107      	bne.n	8005d52 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f022 0208 	bic.w	r2, r2, #8
 8005d50:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d66:	f003 031f 	and.w	r3, r3, #31
 8005d6a:	2220      	movs	r2, #32
 8005d6c:	409a      	lsls	r2, r3
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	4013      	ands	r3, r2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 8110 	beq.w	8005f98 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a2c      	ldr	r2, [pc, #176]	; (8005e30 <HAL_DMA_IRQHandler+0x690>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d04a      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x678>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a2b      	ldr	r2, [pc, #172]	; (8005e34 <HAL_DMA_IRQHandler+0x694>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d045      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x678>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a29      	ldr	r2, [pc, #164]	; (8005e38 <HAL_DMA_IRQHandler+0x698>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d040      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x678>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a28      	ldr	r2, [pc, #160]	; (8005e3c <HAL_DMA_IRQHandler+0x69c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d03b      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x678>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a26      	ldr	r2, [pc, #152]	; (8005e40 <HAL_DMA_IRQHandler+0x6a0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d036      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x678>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a25      	ldr	r2, [pc, #148]	; (8005e44 <HAL_DMA_IRQHandler+0x6a4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d031      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x678>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a23      	ldr	r2, [pc, #140]	; (8005e48 <HAL_DMA_IRQHandler+0x6a8>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d02c      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x678>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a22      	ldr	r2, [pc, #136]	; (8005e4c <HAL_DMA_IRQHandler+0x6ac>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d027      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x678>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a20      	ldr	r2, [pc, #128]	; (8005e50 <HAL_DMA_IRQHandler+0x6b0>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d022      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x678>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a1f      	ldr	r2, [pc, #124]	; (8005e54 <HAL_DMA_IRQHandler+0x6b4>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d01d      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x678>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a1d      	ldr	r2, [pc, #116]	; (8005e58 <HAL_DMA_IRQHandler+0x6b8>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d018      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x678>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a1c      	ldr	r2, [pc, #112]	; (8005e5c <HAL_DMA_IRQHandler+0x6bc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d013      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x678>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a1a      	ldr	r2, [pc, #104]	; (8005e60 <HAL_DMA_IRQHandler+0x6c0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d00e      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x678>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a19      	ldr	r2, [pc, #100]	; (8005e64 <HAL_DMA_IRQHandler+0x6c4>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d009      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x678>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a17      	ldr	r2, [pc, #92]	; (8005e68 <HAL_DMA_IRQHandler+0x6c8>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d004      	beq.n	8005e18 <HAL_DMA_IRQHandler+0x678>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a16      	ldr	r2, [pc, #88]	; (8005e6c <HAL_DMA_IRQHandler+0x6cc>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d12b      	bne.n	8005e70 <HAL_DMA_IRQHandler+0x6d0>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 0310 	and.w	r3, r3, #16
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	bf14      	ite	ne
 8005e26:	2301      	movne	r3, #1
 8005e28:	2300      	moveq	r3, #0
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	e02a      	b.n	8005e84 <HAL_DMA_IRQHandler+0x6e4>
 8005e2e:	bf00      	nop
 8005e30:	40020010 	.word	0x40020010
 8005e34:	40020028 	.word	0x40020028
 8005e38:	40020040 	.word	0x40020040
 8005e3c:	40020058 	.word	0x40020058
 8005e40:	40020070 	.word	0x40020070
 8005e44:	40020088 	.word	0x40020088
 8005e48:	400200a0 	.word	0x400200a0
 8005e4c:	400200b8 	.word	0x400200b8
 8005e50:	40020410 	.word	0x40020410
 8005e54:	40020428 	.word	0x40020428
 8005e58:	40020440 	.word	0x40020440
 8005e5c:	40020458 	.word	0x40020458
 8005e60:	40020470 	.word	0x40020470
 8005e64:	40020488 	.word	0x40020488
 8005e68:	400204a0 	.word	0x400204a0
 8005e6c:	400204b8 	.word	0x400204b8
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	bf14      	ite	ne
 8005e7e:	2301      	movne	r3, #1
 8005e80:	2300      	moveq	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 8087 	beq.w	8005f98 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e8e:	f003 031f 	and.w	r3, r3, #31
 8005e92:	2220      	movs	r2, #32
 8005e94:	409a      	lsls	r2, r3
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b04      	cmp	r3, #4
 8005ea4:	d139      	bne.n	8005f1a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f022 0216 	bic.w	r2, r2, #22
 8005eb4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ec4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d103      	bne.n	8005ed6 <HAL_DMA_IRQHandler+0x736>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d007      	beq.n	8005ee6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 0208 	bic.w	r2, r2, #8
 8005ee4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eea:	f003 031f 	and.w	r3, r3, #31
 8005eee:	223f      	movs	r2, #63	; 0x3f
 8005ef0:	409a      	lsls	r2, r3
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	f000 834a 	beq.w	80065a4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	4798      	blx	r3
          }
          return;
 8005f18:	e344      	b.n	80065a4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d018      	beq.n	8005f5a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d108      	bne.n	8005f48 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d02c      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	4798      	blx	r3
 8005f46:	e027      	b.n	8005f98 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d023      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	4798      	blx	r3
 8005f58:	e01e      	b.n	8005f98 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10f      	bne.n	8005f88 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0210 	bic.w	r2, r2, #16
 8005f76:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8306 	beq.w	80065ae <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 8088 	beq.w	80060c0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2204      	movs	r2, #4
 8005fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a7a      	ldr	r2, [pc, #488]	; (80061a8 <HAL_DMA_IRQHandler+0xa08>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d04a      	beq.n	8006058 <HAL_DMA_IRQHandler+0x8b8>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a79      	ldr	r2, [pc, #484]	; (80061ac <HAL_DMA_IRQHandler+0xa0c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d045      	beq.n	8006058 <HAL_DMA_IRQHandler+0x8b8>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a77      	ldr	r2, [pc, #476]	; (80061b0 <HAL_DMA_IRQHandler+0xa10>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d040      	beq.n	8006058 <HAL_DMA_IRQHandler+0x8b8>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a76      	ldr	r2, [pc, #472]	; (80061b4 <HAL_DMA_IRQHandler+0xa14>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d03b      	beq.n	8006058 <HAL_DMA_IRQHandler+0x8b8>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a74      	ldr	r2, [pc, #464]	; (80061b8 <HAL_DMA_IRQHandler+0xa18>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d036      	beq.n	8006058 <HAL_DMA_IRQHandler+0x8b8>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a73      	ldr	r2, [pc, #460]	; (80061bc <HAL_DMA_IRQHandler+0xa1c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d031      	beq.n	8006058 <HAL_DMA_IRQHandler+0x8b8>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a71      	ldr	r2, [pc, #452]	; (80061c0 <HAL_DMA_IRQHandler+0xa20>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d02c      	beq.n	8006058 <HAL_DMA_IRQHandler+0x8b8>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a70      	ldr	r2, [pc, #448]	; (80061c4 <HAL_DMA_IRQHandler+0xa24>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d027      	beq.n	8006058 <HAL_DMA_IRQHandler+0x8b8>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a6e      	ldr	r2, [pc, #440]	; (80061c8 <HAL_DMA_IRQHandler+0xa28>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d022      	beq.n	8006058 <HAL_DMA_IRQHandler+0x8b8>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a6d      	ldr	r2, [pc, #436]	; (80061cc <HAL_DMA_IRQHandler+0xa2c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d01d      	beq.n	8006058 <HAL_DMA_IRQHandler+0x8b8>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a6b      	ldr	r2, [pc, #428]	; (80061d0 <HAL_DMA_IRQHandler+0xa30>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d018      	beq.n	8006058 <HAL_DMA_IRQHandler+0x8b8>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a6a      	ldr	r2, [pc, #424]	; (80061d4 <HAL_DMA_IRQHandler+0xa34>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d013      	beq.n	8006058 <HAL_DMA_IRQHandler+0x8b8>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a68      	ldr	r2, [pc, #416]	; (80061d8 <HAL_DMA_IRQHandler+0xa38>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00e      	beq.n	8006058 <HAL_DMA_IRQHandler+0x8b8>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a67      	ldr	r2, [pc, #412]	; (80061dc <HAL_DMA_IRQHandler+0xa3c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d009      	beq.n	8006058 <HAL_DMA_IRQHandler+0x8b8>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a65      	ldr	r2, [pc, #404]	; (80061e0 <HAL_DMA_IRQHandler+0xa40>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d004      	beq.n	8006058 <HAL_DMA_IRQHandler+0x8b8>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a64      	ldr	r2, [pc, #400]	; (80061e4 <HAL_DMA_IRQHandler+0xa44>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d108      	bne.n	800606a <HAL_DMA_IRQHandler+0x8ca>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	e007      	b.n	800607a <HAL_DMA_IRQHandler+0x8da>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0201 	bic.w	r2, r2, #1
 8006078:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3301      	adds	r3, #1
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006082:	429a      	cmp	r2, r3
 8006084:	d307      	bcc.n	8006096 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1f2      	bne.n	800607a <HAL_DMA_IRQHandler+0x8da>
 8006094:	e000      	b.n	8006098 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006096:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d004      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2203      	movs	r2, #3
 80060aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80060ae:	e003      	b.n	80060b8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2200      	movs	r2, #0
 80060bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	f000 8272 	beq.w	80065ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	4798      	blx	r3
 80060d2:	e26c      	b.n	80065ae <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a43      	ldr	r2, [pc, #268]	; (80061e8 <HAL_DMA_IRQHandler+0xa48>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d022      	beq.n	8006124 <HAL_DMA_IRQHandler+0x984>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a42      	ldr	r2, [pc, #264]	; (80061ec <HAL_DMA_IRQHandler+0xa4c>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d01d      	beq.n	8006124 <HAL_DMA_IRQHandler+0x984>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a40      	ldr	r2, [pc, #256]	; (80061f0 <HAL_DMA_IRQHandler+0xa50>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d018      	beq.n	8006124 <HAL_DMA_IRQHandler+0x984>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a3f      	ldr	r2, [pc, #252]	; (80061f4 <HAL_DMA_IRQHandler+0xa54>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d013      	beq.n	8006124 <HAL_DMA_IRQHandler+0x984>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a3d      	ldr	r2, [pc, #244]	; (80061f8 <HAL_DMA_IRQHandler+0xa58>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d00e      	beq.n	8006124 <HAL_DMA_IRQHandler+0x984>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a3c      	ldr	r2, [pc, #240]	; (80061fc <HAL_DMA_IRQHandler+0xa5c>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d009      	beq.n	8006124 <HAL_DMA_IRQHandler+0x984>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a3a      	ldr	r2, [pc, #232]	; (8006200 <HAL_DMA_IRQHandler+0xa60>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d004      	beq.n	8006124 <HAL_DMA_IRQHandler+0x984>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a39      	ldr	r2, [pc, #228]	; (8006204 <HAL_DMA_IRQHandler+0xa64>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d101      	bne.n	8006128 <HAL_DMA_IRQHandler+0x988>
 8006124:	2301      	movs	r3, #1
 8006126:	e000      	b.n	800612a <HAL_DMA_IRQHandler+0x98a>
 8006128:	2300      	movs	r3, #0
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 823f 	beq.w	80065ae <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613c:	f003 031f 	and.w	r3, r3, #31
 8006140:	2204      	movs	r2, #4
 8006142:	409a      	lsls	r2, r3
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	4013      	ands	r3, r2
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 80cd 	beq.w	80062e8 <HAL_DMA_IRQHandler+0xb48>
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b00      	cmp	r3, #0
 8006156:	f000 80c7 	beq.w	80062e8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615e:	f003 031f 	and.w	r3, r3, #31
 8006162:	2204      	movs	r2, #4
 8006164:	409a      	lsls	r2, r3
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d049      	beq.n	8006208 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 8210 	beq.w	80065a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006190:	e20a      	b.n	80065a8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 8206 	beq.w	80065a8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061a4:	e200      	b.n	80065a8 <HAL_DMA_IRQHandler+0xe08>
 80061a6:	bf00      	nop
 80061a8:	40020010 	.word	0x40020010
 80061ac:	40020028 	.word	0x40020028
 80061b0:	40020040 	.word	0x40020040
 80061b4:	40020058 	.word	0x40020058
 80061b8:	40020070 	.word	0x40020070
 80061bc:	40020088 	.word	0x40020088
 80061c0:	400200a0 	.word	0x400200a0
 80061c4:	400200b8 	.word	0x400200b8
 80061c8:	40020410 	.word	0x40020410
 80061cc:	40020428 	.word	0x40020428
 80061d0:	40020440 	.word	0x40020440
 80061d4:	40020458 	.word	0x40020458
 80061d8:	40020470 	.word	0x40020470
 80061dc:	40020488 	.word	0x40020488
 80061e0:	400204a0 	.word	0x400204a0
 80061e4:	400204b8 	.word	0x400204b8
 80061e8:	58025408 	.word	0x58025408
 80061ec:	5802541c 	.word	0x5802541c
 80061f0:	58025430 	.word	0x58025430
 80061f4:	58025444 	.word	0x58025444
 80061f8:	58025458 	.word	0x58025458
 80061fc:	5802546c 	.word	0x5802546c
 8006200:	58025480 	.word	0x58025480
 8006204:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b00      	cmp	r3, #0
 8006210:	d160      	bne.n	80062d4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a8c      	ldr	r2, [pc, #560]	; (8006448 <HAL_DMA_IRQHandler+0xca8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d04a      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xb12>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a8a      	ldr	r2, [pc, #552]	; (800644c <HAL_DMA_IRQHandler+0xcac>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d045      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xb12>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a89      	ldr	r2, [pc, #548]	; (8006450 <HAL_DMA_IRQHandler+0xcb0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d040      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xb12>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a87      	ldr	r2, [pc, #540]	; (8006454 <HAL_DMA_IRQHandler+0xcb4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d03b      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xb12>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a86      	ldr	r2, [pc, #536]	; (8006458 <HAL_DMA_IRQHandler+0xcb8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d036      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xb12>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a84      	ldr	r2, [pc, #528]	; (800645c <HAL_DMA_IRQHandler+0xcbc>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d031      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xb12>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a83      	ldr	r2, [pc, #524]	; (8006460 <HAL_DMA_IRQHandler+0xcc0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d02c      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xb12>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a81      	ldr	r2, [pc, #516]	; (8006464 <HAL_DMA_IRQHandler+0xcc4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d027      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xb12>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a80      	ldr	r2, [pc, #512]	; (8006468 <HAL_DMA_IRQHandler+0xcc8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d022      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xb12>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a7e      	ldr	r2, [pc, #504]	; (800646c <HAL_DMA_IRQHandler+0xccc>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d01d      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xb12>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a7d      	ldr	r2, [pc, #500]	; (8006470 <HAL_DMA_IRQHandler+0xcd0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d018      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xb12>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a7b      	ldr	r2, [pc, #492]	; (8006474 <HAL_DMA_IRQHandler+0xcd4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d013      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xb12>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a7a      	ldr	r2, [pc, #488]	; (8006478 <HAL_DMA_IRQHandler+0xcd8>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00e      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xb12>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a78      	ldr	r2, [pc, #480]	; (800647c <HAL_DMA_IRQHandler+0xcdc>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d009      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xb12>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a77      	ldr	r2, [pc, #476]	; (8006480 <HAL_DMA_IRQHandler+0xce0>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d004      	beq.n	80062b2 <HAL_DMA_IRQHandler+0xb12>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a75      	ldr	r2, [pc, #468]	; (8006484 <HAL_DMA_IRQHandler+0xce4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d108      	bne.n	80062c4 <HAL_DMA_IRQHandler+0xb24>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f022 0208 	bic.w	r2, r2, #8
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e007      	b.n	80062d4 <HAL_DMA_IRQHandler+0xb34>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 0204 	bic.w	r2, r2, #4
 80062d2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 8165 	beq.w	80065a8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062e6:	e15f      	b.n	80065a8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ec:	f003 031f 	and.w	r3, r3, #31
 80062f0:	2202      	movs	r2, #2
 80062f2:	409a      	lsls	r2, r3
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	4013      	ands	r3, r2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 80c5 	beq.w	8006488 <HAL_DMA_IRQHandler+0xce8>
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	f000 80bf 	beq.w	8006488 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630e:	f003 031f 	and.w	r3, r3, #31
 8006312:	2202      	movs	r2, #2
 8006314:	409a      	lsls	r2, r3
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d018      	beq.n	8006356 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d109      	bne.n	8006342 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 813a 	beq.w	80065ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006340:	e134      	b.n	80065ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 8130 	beq.w	80065ac <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006354:	e12a      	b.n	80065ac <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f003 0320 	and.w	r3, r3, #32
 800635c:	2b00      	cmp	r3, #0
 800635e:	d168      	bne.n	8006432 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a38      	ldr	r2, [pc, #224]	; (8006448 <HAL_DMA_IRQHandler+0xca8>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d04a      	beq.n	8006400 <HAL_DMA_IRQHandler+0xc60>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a37      	ldr	r2, [pc, #220]	; (800644c <HAL_DMA_IRQHandler+0xcac>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d045      	beq.n	8006400 <HAL_DMA_IRQHandler+0xc60>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a35      	ldr	r2, [pc, #212]	; (8006450 <HAL_DMA_IRQHandler+0xcb0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d040      	beq.n	8006400 <HAL_DMA_IRQHandler+0xc60>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a34      	ldr	r2, [pc, #208]	; (8006454 <HAL_DMA_IRQHandler+0xcb4>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d03b      	beq.n	8006400 <HAL_DMA_IRQHandler+0xc60>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a32      	ldr	r2, [pc, #200]	; (8006458 <HAL_DMA_IRQHandler+0xcb8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d036      	beq.n	8006400 <HAL_DMA_IRQHandler+0xc60>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a31      	ldr	r2, [pc, #196]	; (800645c <HAL_DMA_IRQHandler+0xcbc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d031      	beq.n	8006400 <HAL_DMA_IRQHandler+0xc60>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a2f      	ldr	r2, [pc, #188]	; (8006460 <HAL_DMA_IRQHandler+0xcc0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d02c      	beq.n	8006400 <HAL_DMA_IRQHandler+0xc60>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a2e      	ldr	r2, [pc, #184]	; (8006464 <HAL_DMA_IRQHandler+0xcc4>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d027      	beq.n	8006400 <HAL_DMA_IRQHandler+0xc60>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a2c      	ldr	r2, [pc, #176]	; (8006468 <HAL_DMA_IRQHandler+0xcc8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d022      	beq.n	8006400 <HAL_DMA_IRQHandler+0xc60>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a2b      	ldr	r2, [pc, #172]	; (800646c <HAL_DMA_IRQHandler+0xccc>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d01d      	beq.n	8006400 <HAL_DMA_IRQHandler+0xc60>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a29      	ldr	r2, [pc, #164]	; (8006470 <HAL_DMA_IRQHandler+0xcd0>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d018      	beq.n	8006400 <HAL_DMA_IRQHandler+0xc60>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a28      	ldr	r2, [pc, #160]	; (8006474 <HAL_DMA_IRQHandler+0xcd4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d013      	beq.n	8006400 <HAL_DMA_IRQHandler+0xc60>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a26      	ldr	r2, [pc, #152]	; (8006478 <HAL_DMA_IRQHandler+0xcd8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00e      	beq.n	8006400 <HAL_DMA_IRQHandler+0xc60>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a25      	ldr	r2, [pc, #148]	; (800647c <HAL_DMA_IRQHandler+0xcdc>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d009      	beq.n	8006400 <HAL_DMA_IRQHandler+0xc60>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a23      	ldr	r2, [pc, #140]	; (8006480 <HAL_DMA_IRQHandler+0xce0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d004      	beq.n	8006400 <HAL_DMA_IRQHandler+0xc60>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a22      	ldr	r2, [pc, #136]	; (8006484 <HAL_DMA_IRQHandler+0xce4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d108      	bne.n	8006412 <HAL_DMA_IRQHandler+0xc72>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 0214 	bic.w	r2, r2, #20
 800640e:	601a      	str	r2, [r3, #0]
 8006410:	e007      	b.n	8006422 <HAL_DMA_IRQHandler+0xc82>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 020a 	bic.w	r2, r2, #10
 8006420:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 80b8 	beq.w	80065ac <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006444:	e0b2      	b.n	80065ac <HAL_DMA_IRQHandler+0xe0c>
 8006446:	bf00      	nop
 8006448:	40020010 	.word	0x40020010
 800644c:	40020028 	.word	0x40020028
 8006450:	40020040 	.word	0x40020040
 8006454:	40020058 	.word	0x40020058
 8006458:	40020070 	.word	0x40020070
 800645c:	40020088 	.word	0x40020088
 8006460:	400200a0 	.word	0x400200a0
 8006464:	400200b8 	.word	0x400200b8
 8006468:	40020410 	.word	0x40020410
 800646c:	40020428 	.word	0x40020428
 8006470:	40020440 	.word	0x40020440
 8006474:	40020458 	.word	0x40020458
 8006478:	40020470 	.word	0x40020470
 800647c:	40020488 	.word	0x40020488
 8006480:	400204a0 	.word	0x400204a0
 8006484:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800648c:	f003 031f 	and.w	r3, r3, #31
 8006490:	2208      	movs	r2, #8
 8006492:	409a      	lsls	r2, r3
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	4013      	ands	r3, r2
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 8088 	beq.w	80065ae <HAL_DMA_IRQHandler+0xe0e>
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	f000 8082 	beq.w	80065ae <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a41      	ldr	r2, [pc, #260]	; (80065b4 <HAL_DMA_IRQHandler+0xe14>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d04a      	beq.n	800654a <HAL_DMA_IRQHandler+0xdaa>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a3f      	ldr	r2, [pc, #252]	; (80065b8 <HAL_DMA_IRQHandler+0xe18>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d045      	beq.n	800654a <HAL_DMA_IRQHandler+0xdaa>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a3e      	ldr	r2, [pc, #248]	; (80065bc <HAL_DMA_IRQHandler+0xe1c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d040      	beq.n	800654a <HAL_DMA_IRQHandler+0xdaa>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a3c      	ldr	r2, [pc, #240]	; (80065c0 <HAL_DMA_IRQHandler+0xe20>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d03b      	beq.n	800654a <HAL_DMA_IRQHandler+0xdaa>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a3b      	ldr	r2, [pc, #236]	; (80065c4 <HAL_DMA_IRQHandler+0xe24>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d036      	beq.n	800654a <HAL_DMA_IRQHandler+0xdaa>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a39      	ldr	r2, [pc, #228]	; (80065c8 <HAL_DMA_IRQHandler+0xe28>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d031      	beq.n	800654a <HAL_DMA_IRQHandler+0xdaa>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a38      	ldr	r2, [pc, #224]	; (80065cc <HAL_DMA_IRQHandler+0xe2c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d02c      	beq.n	800654a <HAL_DMA_IRQHandler+0xdaa>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a36      	ldr	r2, [pc, #216]	; (80065d0 <HAL_DMA_IRQHandler+0xe30>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d027      	beq.n	800654a <HAL_DMA_IRQHandler+0xdaa>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a35      	ldr	r2, [pc, #212]	; (80065d4 <HAL_DMA_IRQHandler+0xe34>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d022      	beq.n	800654a <HAL_DMA_IRQHandler+0xdaa>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a33      	ldr	r2, [pc, #204]	; (80065d8 <HAL_DMA_IRQHandler+0xe38>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d01d      	beq.n	800654a <HAL_DMA_IRQHandler+0xdaa>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a32      	ldr	r2, [pc, #200]	; (80065dc <HAL_DMA_IRQHandler+0xe3c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d018      	beq.n	800654a <HAL_DMA_IRQHandler+0xdaa>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a30      	ldr	r2, [pc, #192]	; (80065e0 <HAL_DMA_IRQHandler+0xe40>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d013      	beq.n	800654a <HAL_DMA_IRQHandler+0xdaa>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a2f      	ldr	r2, [pc, #188]	; (80065e4 <HAL_DMA_IRQHandler+0xe44>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00e      	beq.n	800654a <HAL_DMA_IRQHandler+0xdaa>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a2d      	ldr	r2, [pc, #180]	; (80065e8 <HAL_DMA_IRQHandler+0xe48>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d009      	beq.n	800654a <HAL_DMA_IRQHandler+0xdaa>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a2c      	ldr	r2, [pc, #176]	; (80065ec <HAL_DMA_IRQHandler+0xe4c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <HAL_DMA_IRQHandler+0xdaa>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a2a      	ldr	r2, [pc, #168]	; (80065f0 <HAL_DMA_IRQHandler+0xe50>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d108      	bne.n	800655c <HAL_DMA_IRQHandler+0xdbc>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f022 021c 	bic.w	r2, r2, #28
 8006558:	601a      	str	r2, [r3, #0]
 800655a:	e007      	b.n	800656c <HAL_DMA_IRQHandler+0xdcc>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 020e 	bic.w	r2, r2, #14
 800656a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006570:	f003 031f 	and.w	r3, r3, #31
 8006574:	2201      	movs	r2, #1
 8006576:	409a      	lsls	r2, r3
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2201      	movs	r2, #1
 8006580:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006596:	2b00      	cmp	r3, #0
 8006598:	d009      	beq.n	80065ae <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	4798      	blx	r3
 80065a2:	e004      	b.n	80065ae <HAL_DMA_IRQHandler+0xe0e>
          return;
 80065a4:	bf00      	nop
 80065a6:	e002      	b.n	80065ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065a8:	bf00      	nop
 80065aa:	e000      	b.n	80065ae <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065ac:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80065ae:	3728      	adds	r7, #40	; 0x28
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	40020010 	.word	0x40020010
 80065b8:	40020028 	.word	0x40020028
 80065bc:	40020040 	.word	0x40020040
 80065c0:	40020058 	.word	0x40020058
 80065c4:	40020070 	.word	0x40020070
 80065c8:	40020088 	.word	0x40020088
 80065cc:	400200a0 	.word	0x400200a0
 80065d0:	400200b8 	.word	0x400200b8
 80065d4:	40020410 	.word	0x40020410
 80065d8:	40020428 	.word	0x40020428
 80065dc:	40020440 	.word	0x40020440
 80065e0:	40020458 	.word	0x40020458
 80065e4:	40020470 	.word	0x40020470
 80065e8:	40020488 	.word	0x40020488
 80065ec:	400204a0 	.word	0x400204a0
 80065f0:	400204b8 	.word	0x400204b8

080065f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a42      	ldr	r2, [pc, #264]	; (800670c <DMA_CalcBaseAndBitshift+0x118>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d04a      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xa8>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a41      	ldr	r2, [pc, #260]	; (8006710 <DMA_CalcBaseAndBitshift+0x11c>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d045      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xa8>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a3f      	ldr	r2, [pc, #252]	; (8006714 <DMA_CalcBaseAndBitshift+0x120>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d040      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xa8>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a3e      	ldr	r2, [pc, #248]	; (8006718 <DMA_CalcBaseAndBitshift+0x124>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d03b      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xa8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a3c      	ldr	r2, [pc, #240]	; (800671c <DMA_CalcBaseAndBitshift+0x128>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d036      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xa8>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a3b      	ldr	r2, [pc, #236]	; (8006720 <DMA_CalcBaseAndBitshift+0x12c>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d031      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xa8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a39      	ldr	r2, [pc, #228]	; (8006724 <DMA_CalcBaseAndBitshift+0x130>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d02c      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xa8>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a38      	ldr	r2, [pc, #224]	; (8006728 <DMA_CalcBaseAndBitshift+0x134>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d027      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xa8>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a36      	ldr	r2, [pc, #216]	; (800672c <DMA_CalcBaseAndBitshift+0x138>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d022      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xa8>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a35      	ldr	r2, [pc, #212]	; (8006730 <DMA_CalcBaseAndBitshift+0x13c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d01d      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xa8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a33      	ldr	r2, [pc, #204]	; (8006734 <DMA_CalcBaseAndBitshift+0x140>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d018      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xa8>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a32      	ldr	r2, [pc, #200]	; (8006738 <DMA_CalcBaseAndBitshift+0x144>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d013      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xa8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a30      	ldr	r2, [pc, #192]	; (800673c <DMA_CalcBaseAndBitshift+0x148>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00e      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xa8>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a2f      	ldr	r2, [pc, #188]	; (8006740 <DMA_CalcBaseAndBitshift+0x14c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d009      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xa8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a2d      	ldr	r2, [pc, #180]	; (8006744 <DMA_CalcBaseAndBitshift+0x150>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d004      	beq.n	800669c <DMA_CalcBaseAndBitshift+0xa8>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a2c      	ldr	r2, [pc, #176]	; (8006748 <DMA_CalcBaseAndBitshift+0x154>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d101      	bne.n	80066a0 <DMA_CalcBaseAndBitshift+0xac>
 800669c:	2301      	movs	r3, #1
 800669e:	e000      	b.n	80066a2 <DMA_CalcBaseAndBitshift+0xae>
 80066a0:	2300      	movs	r3, #0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d024      	beq.n	80066f0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	3b10      	subs	r3, #16
 80066ae:	4a27      	ldr	r2, [pc, #156]	; (800674c <DMA_CalcBaseAndBitshift+0x158>)
 80066b0:	fba2 2303 	umull	r2, r3, r2, r3
 80066b4:	091b      	lsrs	r3, r3, #4
 80066b6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	4a24      	ldr	r2, [pc, #144]	; (8006750 <DMA_CalcBaseAndBitshift+0x15c>)
 80066c0:	5cd3      	ldrb	r3, [r2, r3]
 80066c2:	461a      	mov	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2b03      	cmp	r3, #3
 80066cc:	d908      	bls.n	80066e0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	461a      	mov	r2, r3
 80066d4:	4b1f      	ldr	r3, [pc, #124]	; (8006754 <DMA_CalcBaseAndBitshift+0x160>)
 80066d6:	4013      	ands	r3, r2
 80066d8:	1d1a      	adds	r2, r3, #4
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	659a      	str	r2, [r3, #88]	; 0x58
 80066de:	e00d      	b.n	80066fc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	461a      	mov	r2, r3
 80066e6:	4b1b      	ldr	r3, [pc, #108]	; (8006754 <DMA_CalcBaseAndBitshift+0x160>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	6593      	str	r3, [r2, #88]	; 0x58
 80066ee:	e005      	b.n	80066fc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006700:	4618      	mov	r0, r3
 8006702:	3714      	adds	r7, #20
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr
 800670c:	40020010 	.word	0x40020010
 8006710:	40020028 	.word	0x40020028
 8006714:	40020040 	.word	0x40020040
 8006718:	40020058 	.word	0x40020058
 800671c:	40020070 	.word	0x40020070
 8006720:	40020088 	.word	0x40020088
 8006724:	400200a0 	.word	0x400200a0
 8006728:	400200b8 	.word	0x400200b8
 800672c:	40020410 	.word	0x40020410
 8006730:	40020428 	.word	0x40020428
 8006734:	40020440 	.word	0x40020440
 8006738:	40020458 	.word	0x40020458
 800673c:	40020470 	.word	0x40020470
 8006740:	40020488 	.word	0x40020488
 8006744:	400204a0 	.word	0x400204a0
 8006748:	400204b8 	.word	0x400204b8
 800674c:	aaaaaaab 	.word	0xaaaaaaab
 8006750:	0800fa08 	.word	0x0800fa08
 8006754:	fffffc00 	.word	0xfffffc00

08006758 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006760:	2300      	movs	r3, #0
 8006762:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d120      	bne.n	80067ae <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006770:	2b03      	cmp	r3, #3
 8006772:	d858      	bhi.n	8006826 <DMA_CheckFifoParam+0xce>
 8006774:	a201      	add	r2, pc, #4	; (adr r2, 800677c <DMA_CheckFifoParam+0x24>)
 8006776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677a:	bf00      	nop
 800677c:	0800678d 	.word	0x0800678d
 8006780:	0800679f 	.word	0x0800679f
 8006784:	0800678d 	.word	0x0800678d
 8006788:	08006827 	.word	0x08006827
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006790:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d048      	beq.n	800682a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800679c:	e045      	b.n	800682a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067a6:	d142      	bne.n	800682e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067ac:	e03f      	b.n	800682e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067b6:	d123      	bne.n	8006800 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d838      	bhi.n	8006832 <DMA_CheckFifoParam+0xda>
 80067c0:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <DMA_CheckFifoParam+0x70>)
 80067c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c6:	bf00      	nop
 80067c8:	080067d9 	.word	0x080067d9
 80067cc:	080067df 	.word	0x080067df
 80067d0:	080067d9 	.word	0x080067d9
 80067d4:	080067f1 	.word	0x080067f1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	73fb      	strb	r3, [r7, #15]
        break;
 80067dc:	e030      	b.n	8006840 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d025      	beq.n	8006836 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067ee:	e022      	b.n	8006836 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067f8:	d11f      	bne.n	800683a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067fe:	e01c      	b.n	800683a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006804:	2b02      	cmp	r3, #2
 8006806:	d902      	bls.n	800680e <DMA_CheckFifoParam+0xb6>
 8006808:	2b03      	cmp	r3, #3
 800680a:	d003      	beq.n	8006814 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800680c:	e018      	b.n	8006840 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	73fb      	strb	r3, [r7, #15]
        break;
 8006812:	e015      	b.n	8006840 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00e      	beq.n	800683e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	73fb      	strb	r3, [r7, #15]
    break;
 8006824:	e00b      	b.n	800683e <DMA_CheckFifoParam+0xe6>
        break;
 8006826:	bf00      	nop
 8006828:	e00a      	b.n	8006840 <DMA_CheckFifoParam+0xe8>
        break;
 800682a:	bf00      	nop
 800682c:	e008      	b.n	8006840 <DMA_CheckFifoParam+0xe8>
        break;
 800682e:	bf00      	nop
 8006830:	e006      	b.n	8006840 <DMA_CheckFifoParam+0xe8>
        break;
 8006832:	bf00      	nop
 8006834:	e004      	b.n	8006840 <DMA_CheckFifoParam+0xe8>
        break;
 8006836:	bf00      	nop
 8006838:	e002      	b.n	8006840 <DMA_CheckFifoParam+0xe8>
        break;
 800683a:	bf00      	nop
 800683c:	e000      	b.n	8006840 <DMA_CheckFifoParam+0xe8>
    break;
 800683e:	bf00      	nop
    }
  }

  return status;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3714      	adds	r7, #20
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop

08006850 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a38      	ldr	r2, [pc, #224]	; (8006944 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d022      	beq.n	80068ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a36      	ldr	r2, [pc, #216]	; (8006948 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d01d      	beq.n	80068ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a35      	ldr	r2, [pc, #212]	; (800694c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d018      	beq.n	80068ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a33      	ldr	r2, [pc, #204]	; (8006950 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d013      	beq.n	80068ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a32      	ldr	r2, [pc, #200]	; (8006954 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d00e      	beq.n	80068ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a30      	ldr	r2, [pc, #192]	; (8006958 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d009      	beq.n	80068ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a2f      	ldr	r2, [pc, #188]	; (800695c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d004      	beq.n	80068ae <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a2d      	ldr	r2, [pc, #180]	; (8006960 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d101      	bne.n	80068b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80068b2:	2300      	movs	r3, #0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01a      	beq.n	80068ee <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	3b08      	subs	r3, #8
 80068c0:	4a28      	ldr	r2, [pc, #160]	; (8006964 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80068c2:	fba2 2303 	umull	r2, r3, r2, r3
 80068c6:	091b      	lsrs	r3, r3, #4
 80068c8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4b26      	ldr	r3, [pc, #152]	; (8006968 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80068ce:	4413      	add	r3, r2
 80068d0:	009b      	lsls	r3, r3, #2
 80068d2:	461a      	mov	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a24      	ldr	r2, [pc, #144]	; (800696c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80068dc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	2201      	movs	r2, #1
 80068e6:	409a      	lsls	r2, r3
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80068ec:	e024      	b.n	8006938 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	3b10      	subs	r3, #16
 80068f6:	4a1e      	ldr	r2, [pc, #120]	; (8006970 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80068f8:	fba2 2303 	umull	r2, r3, r2, r3
 80068fc:	091b      	lsrs	r3, r3, #4
 80068fe:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4a1c      	ldr	r2, [pc, #112]	; (8006974 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d806      	bhi.n	8006916 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4a1b      	ldr	r2, [pc, #108]	; (8006978 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d902      	bls.n	8006916 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	3308      	adds	r3, #8
 8006914:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	4b18      	ldr	r3, [pc, #96]	; (800697c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	461a      	mov	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a16      	ldr	r2, [pc, #88]	; (8006980 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006928:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f003 031f 	and.w	r3, r3, #31
 8006930:	2201      	movs	r2, #1
 8006932:	409a      	lsls	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006938:	bf00      	nop
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	58025408 	.word	0x58025408
 8006948:	5802541c 	.word	0x5802541c
 800694c:	58025430 	.word	0x58025430
 8006950:	58025444 	.word	0x58025444
 8006954:	58025458 	.word	0x58025458
 8006958:	5802546c 	.word	0x5802546c
 800695c:	58025480 	.word	0x58025480
 8006960:	58025494 	.word	0x58025494
 8006964:	cccccccd 	.word	0xcccccccd
 8006968:	16009600 	.word	0x16009600
 800696c:	58025880 	.word	0x58025880
 8006970:	aaaaaaab 	.word	0xaaaaaaab
 8006974:	400204b8 	.word	0x400204b8
 8006978:	4002040f 	.word	0x4002040f
 800697c:	10008200 	.word	0x10008200
 8006980:	40020880 	.word	0x40020880

08006984 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	b2db      	uxtb	r3, r3
 8006992:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d04a      	beq.n	8006a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2b08      	cmp	r3, #8
 800699e:	d847      	bhi.n	8006a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a25      	ldr	r2, [pc, #148]	; (8006a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d022      	beq.n	80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a24      	ldr	r2, [pc, #144]	; (8006a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d01d      	beq.n	80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a22      	ldr	r2, [pc, #136]	; (8006a44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d018      	beq.n	80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a21      	ldr	r2, [pc, #132]	; (8006a48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d013      	beq.n	80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1f      	ldr	r2, [pc, #124]	; (8006a4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00e      	beq.n	80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a1e      	ldr	r2, [pc, #120]	; (8006a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d009      	beq.n	80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a1c      	ldr	r2, [pc, #112]	; (8006a54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d004      	beq.n	80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a1b      	ldr	r2, [pc, #108]	; (8006a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d101      	bne.n	80069f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80069f0:	2301      	movs	r3, #1
 80069f2:	e000      	b.n	80069f6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80069f4:	2300      	movs	r3, #0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4b17      	ldr	r3, [pc, #92]	; (8006a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	461a      	mov	r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a15      	ldr	r2, [pc, #84]	; (8006a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006a0c:	671a      	str	r2, [r3, #112]	; 0x70
 8006a0e:	e009      	b.n	8006a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	4b14      	ldr	r3, [pc, #80]	; (8006a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006a14:	4413      	add	r3, r2
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	461a      	mov	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a11      	ldr	r2, [pc, #68]	; (8006a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006a22:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	2201      	movs	r2, #1
 8006a2a:	409a      	lsls	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006a30:	bf00      	nop
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr
 8006a3c:	58025408 	.word	0x58025408
 8006a40:	5802541c 	.word	0x5802541c
 8006a44:	58025430 	.word	0x58025430
 8006a48:	58025444 	.word	0x58025444
 8006a4c:	58025458 	.word	0x58025458
 8006a50:	5802546c 	.word	0x5802546c
 8006a54:	58025480 	.word	0x58025480
 8006a58:	58025494 	.word	0x58025494
 8006a5c:	1600963f 	.word	0x1600963f
 8006a60:	58025940 	.word	0x58025940
 8006a64:	1000823f 	.word	0x1000823f
 8006a68:	40020940 	.word	0x40020940

08006a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b089      	sub	sp, #36	; 0x24
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a76:	2300      	movs	r3, #0
 8006a78:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a7a:	4b89      	ldr	r3, [pc, #548]	; (8006ca0 <HAL_GPIO_Init+0x234>)
 8006a7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a7e:	e194      	b.n	8006daa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	2101      	movs	r1, #1
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	fa01 f303 	lsl.w	r3, r1, r3
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 8186 	beq.w	8006da4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f003 0303 	and.w	r3, r3, #3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d005      	beq.n	8006ab0 <HAL_GPIO_Init+0x44>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d130      	bne.n	8006b12 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	005b      	lsls	r3, r3, #1
 8006aba:	2203      	movs	r2, #3
 8006abc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac0:	43db      	mvns	r3, r3
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad4:	69ba      	ldr	r2, [r7, #24]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	69ba      	ldr	r2, [r7, #24]
 8006ade:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	fa02 f303 	lsl.w	r3, r2, r3
 8006aee:	43db      	mvns	r3, r3
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	4013      	ands	r3, r2
 8006af4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	091b      	lsrs	r3, r3, #4
 8006afc:	f003 0201 	and.w	r2, r3, #1
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	fa02 f303 	lsl.w	r3, r2, r3
 8006b06:	69ba      	ldr	r2, [r7, #24]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d017      	beq.n	8006b4e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	005b      	lsls	r3, r3, #1
 8006b28:	2203      	movs	r2, #3
 8006b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2e:	43db      	mvns	r3, r3
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	4013      	ands	r3, r2
 8006b34:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b42:	69ba      	ldr	r2, [r7, #24]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	69ba      	ldr	r2, [r7, #24]
 8006b4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f003 0303 	and.w	r3, r3, #3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d123      	bne.n	8006ba2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	08da      	lsrs	r2, r3, #3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	3208      	adds	r2, #8
 8006b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	220f      	movs	r2, #15
 8006b72:	fa02 f303 	lsl.w	r3, r2, r3
 8006b76:	43db      	mvns	r3, r3
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	691a      	ldr	r2, [r3, #16]
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	69ba      	ldr	r2, [r7, #24]
 8006b90:	4313      	orrs	r3, r2
 8006b92:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	08da      	lsrs	r2, r3, #3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3208      	adds	r2, #8
 8006b9c:	69b9      	ldr	r1, [r7, #24]
 8006b9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	2203      	movs	r2, #3
 8006bae:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb2:	43db      	mvns	r3, r3
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	4013      	ands	r3, r2
 8006bb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	f003 0203 	and.w	r2, r3, #3
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bca:	69ba      	ldr	r2, [r7, #24]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f000 80e0 	beq.w	8006da4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006be4:	4b2f      	ldr	r3, [pc, #188]	; (8006ca4 <HAL_GPIO_Init+0x238>)
 8006be6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006bea:	4a2e      	ldr	r2, [pc, #184]	; (8006ca4 <HAL_GPIO_Init+0x238>)
 8006bec:	f043 0302 	orr.w	r3, r3, #2
 8006bf0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006bf4:	4b2b      	ldr	r3, [pc, #172]	; (8006ca4 <HAL_GPIO_Init+0x238>)
 8006bf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006bfa:	f003 0302 	and.w	r3, r3, #2
 8006bfe:	60fb      	str	r3, [r7, #12]
 8006c00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c02:	4a29      	ldr	r2, [pc, #164]	; (8006ca8 <HAL_GPIO_Init+0x23c>)
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	089b      	lsrs	r3, r3, #2
 8006c08:	3302      	adds	r3, #2
 8006c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f003 0303 	and.w	r3, r3, #3
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	220f      	movs	r2, #15
 8006c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1e:	43db      	mvns	r3, r3
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	4013      	ands	r3, r2
 8006c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a20      	ldr	r2, [pc, #128]	; (8006cac <HAL_GPIO_Init+0x240>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d052      	beq.n	8006cd4 <HAL_GPIO_Init+0x268>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a1f      	ldr	r2, [pc, #124]	; (8006cb0 <HAL_GPIO_Init+0x244>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d031      	beq.n	8006c9a <HAL_GPIO_Init+0x22e>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a1e      	ldr	r2, [pc, #120]	; (8006cb4 <HAL_GPIO_Init+0x248>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d02b      	beq.n	8006c96 <HAL_GPIO_Init+0x22a>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a1d      	ldr	r2, [pc, #116]	; (8006cb8 <HAL_GPIO_Init+0x24c>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d025      	beq.n	8006c92 <HAL_GPIO_Init+0x226>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a1c      	ldr	r2, [pc, #112]	; (8006cbc <HAL_GPIO_Init+0x250>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d01f      	beq.n	8006c8e <HAL_GPIO_Init+0x222>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a1b      	ldr	r2, [pc, #108]	; (8006cc0 <HAL_GPIO_Init+0x254>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d019      	beq.n	8006c8a <HAL_GPIO_Init+0x21e>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a1a      	ldr	r2, [pc, #104]	; (8006cc4 <HAL_GPIO_Init+0x258>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d013      	beq.n	8006c86 <HAL_GPIO_Init+0x21a>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a19      	ldr	r2, [pc, #100]	; (8006cc8 <HAL_GPIO_Init+0x25c>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d00d      	beq.n	8006c82 <HAL_GPIO_Init+0x216>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a18      	ldr	r2, [pc, #96]	; (8006ccc <HAL_GPIO_Init+0x260>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d007      	beq.n	8006c7e <HAL_GPIO_Init+0x212>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a17      	ldr	r2, [pc, #92]	; (8006cd0 <HAL_GPIO_Init+0x264>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d101      	bne.n	8006c7a <HAL_GPIO_Init+0x20e>
 8006c76:	2309      	movs	r3, #9
 8006c78:	e02d      	b.n	8006cd6 <HAL_GPIO_Init+0x26a>
 8006c7a:	230a      	movs	r3, #10
 8006c7c:	e02b      	b.n	8006cd6 <HAL_GPIO_Init+0x26a>
 8006c7e:	2308      	movs	r3, #8
 8006c80:	e029      	b.n	8006cd6 <HAL_GPIO_Init+0x26a>
 8006c82:	2307      	movs	r3, #7
 8006c84:	e027      	b.n	8006cd6 <HAL_GPIO_Init+0x26a>
 8006c86:	2306      	movs	r3, #6
 8006c88:	e025      	b.n	8006cd6 <HAL_GPIO_Init+0x26a>
 8006c8a:	2305      	movs	r3, #5
 8006c8c:	e023      	b.n	8006cd6 <HAL_GPIO_Init+0x26a>
 8006c8e:	2304      	movs	r3, #4
 8006c90:	e021      	b.n	8006cd6 <HAL_GPIO_Init+0x26a>
 8006c92:	2303      	movs	r3, #3
 8006c94:	e01f      	b.n	8006cd6 <HAL_GPIO_Init+0x26a>
 8006c96:	2302      	movs	r3, #2
 8006c98:	e01d      	b.n	8006cd6 <HAL_GPIO_Init+0x26a>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e01b      	b.n	8006cd6 <HAL_GPIO_Init+0x26a>
 8006c9e:	bf00      	nop
 8006ca0:	58000080 	.word	0x58000080
 8006ca4:	58024400 	.word	0x58024400
 8006ca8:	58000400 	.word	0x58000400
 8006cac:	58020000 	.word	0x58020000
 8006cb0:	58020400 	.word	0x58020400
 8006cb4:	58020800 	.word	0x58020800
 8006cb8:	58020c00 	.word	0x58020c00
 8006cbc:	58021000 	.word	0x58021000
 8006cc0:	58021400 	.word	0x58021400
 8006cc4:	58021800 	.word	0x58021800
 8006cc8:	58021c00 	.word	0x58021c00
 8006ccc:	58022000 	.word	0x58022000
 8006cd0:	58022400 	.word	0x58022400
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	f002 0203 	and.w	r2, r2, #3
 8006cdc:	0092      	lsls	r2, r2, #2
 8006cde:	4093      	lsls	r3, r2
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ce6:	4938      	ldr	r1, [pc, #224]	; (8006dc8 <HAL_GPIO_Init+0x35c>)
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	089b      	lsrs	r3, r3, #2
 8006cec:	3302      	adds	r3, #2
 8006cee:	69ba      	ldr	r2, [r7, #24]
 8006cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	43db      	mvns	r3, r3
 8006d00:	69ba      	ldr	r2, [r7, #24]
 8006d02:	4013      	ands	r3, r2
 8006d04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	43db      	mvns	r3, r3
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	4013      	ands	r3, r2
 8006d32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	69ba      	ldr	r2, [r7, #24]
 8006d78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	43db      	mvns	r3, r3
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	4013      	ands	r3, r2
 8006d88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d003      	beq.n	8006d9e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006d96:	69ba      	ldr	r2, [r7, #24]
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	69ba      	ldr	r2, [r7, #24]
 8006da2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	3301      	adds	r3, #1
 8006da8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	fa22 f303 	lsr.w	r3, r2, r3
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f47f ae63 	bne.w	8006a80 <HAL_GPIO_Init+0x14>
  }
}
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	3724      	adds	r7, #36	; 0x24
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	58000400 	.word	0x58000400

08006dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	807b      	strh	r3, [r7, #2]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ddc:	787b      	ldrb	r3, [r7, #1]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d003      	beq.n	8006dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006de2:	887a      	ldrh	r2, [r7, #2]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006de8:	e003      	b.n	8006df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006dea:	887b      	ldrh	r3, [r7, #2]
 8006dec:	041a      	lsls	r2, r3, #16
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	619a      	str	r2, [r3, #24]
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b082      	sub	sp, #8
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	4603      	mov	r3, r0
 8006e06:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e10:	88fb      	ldrh	r3, [r7, #6]
 8006e12:	4013      	ands	r3, r2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d008      	beq.n	8006e2a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e1c:	88fb      	ldrh	r3, [r7, #6]
 8006e1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7fc f8b3 	bl	8002f90 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b084      	sub	sp, #16
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006e3c:	4b19      	ldr	r3, [pc, #100]	; (8006ea4 <HAL_PWREx_ConfigSupply+0x70>)
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d00a      	beq.n	8006e5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e48:	4b16      	ldr	r3, [pc, #88]	; (8006ea4 <HAL_PWREx_ConfigSupply+0x70>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f003 0307 	and.w	r3, r3, #7
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d001      	beq.n	8006e5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e01f      	b.n	8006e9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	e01d      	b.n	8006e9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e5e:	4b11      	ldr	r3, [pc, #68]	; (8006ea4 <HAL_PWREx_ConfigSupply+0x70>)
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	f023 0207 	bic.w	r2, r3, #7
 8006e66:	490f      	ldr	r1, [pc, #60]	; (8006ea4 <HAL_PWREx_ConfigSupply+0x70>)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e6e:	f7fd f9bb 	bl	80041e8 <HAL_GetTick>
 8006e72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e74:	e009      	b.n	8006e8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e76:	f7fd f9b7 	bl	80041e8 <HAL_GetTick>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e84:	d901      	bls.n	8006e8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	e007      	b.n	8006e9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e8a:	4b06      	ldr	r3, [pc, #24]	; (8006ea4 <HAL_PWREx_ConfigSupply+0x70>)
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e96:	d1ee      	bne.n	8006e76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	58024800 	.word	0x58024800

08006ea8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08c      	sub	sp, #48	; 0x30
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d102      	bne.n	8006ebc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	f000 bc1c 	b.w	80076f4 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 8087 	beq.w	8006fd8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006eca:	4b9e      	ldr	r3, [pc, #632]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ed4:	4b9b      	ldr	r3, [pc, #620]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006edc:	2b10      	cmp	r3, #16
 8006ede:	d007      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x48>
 8006ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee2:	2b18      	cmp	r3, #24
 8006ee4:	d110      	bne.n	8006f08 <HAL_RCC_OscConfig+0x60>
 8006ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee8:	f003 0303 	and.w	r3, r3, #3
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d10b      	bne.n	8006f08 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ef0:	4b94      	ldr	r3, [pc, #592]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d06c      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x12e>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d168      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e3f5      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f10:	d106      	bne.n	8006f20 <HAL_RCC_OscConfig+0x78>
 8006f12:	4b8c      	ldr	r3, [pc, #560]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a8b      	ldr	r2, [pc, #556]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	e02e      	b.n	8006f7e <HAL_RCC_OscConfig+0xd6>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10c      	bne.n	8006f42 <HAL_RCC_OscConfig+0x9a>
 8006f28:	4b86      	ldr	r3, [pc, #536]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a85      	ldr	r2, [pc, #532]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006f2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	4b83      	ldr	r3, [pc, #524]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a82      	ldr	r2, [pc, #520]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006f3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f3e:	6013      	str	r3, [r2, #0]
 8006f40:	e01d      	b.n	8006f7e <HAL_RCC_OscConfig+0xd6>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f4a:	d10c      	bne.n	8006f66 <HAL_RCC_OscConfig+0xbe>
 8006f4c:	4b7d      	ldr	r3, [pc, #500]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a7c      	ldr	r2, [pc, #496]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006f52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	4b7a      	ldr	r3, [pc, #488]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a79      	ldr	r2, [pc, #484]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f62:	6013      	str	r3, [r2, #0]
 8006f64:	e00b      	b.n	8006f7e <HAL_RCC_OscConfig+0xd6>
 8006f66:	4b77      	ldr	r3, [pc, #476]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a76      	ldr	r2, [pc, #472]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	4b74      	ldr	r3, [pc, #464]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a73      	ldr	r2, [pc, #460]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d013      	beq.n	8006fae <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f86:	f7fd f92f 	bl	80041e8 <HAL_GetTick>
 8006f8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006f8e:	f7fd f92b 	bl	80041e8 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b64      	cmp	r3, #100	; 0x64
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e3a9      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fa0:	4b68      	ldr	r3, [pc, #416]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d0f0      	beq.n	8006f8e <HAL_RCC_OscConfig+0xe6>
 8006fac:	e014      	b.n	8006fd8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fae:	f7fd f91b 	bl	80041e8 <HAL_GetTick>
 8006fb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fb6:	f7fd f917 	bl	80041e8 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b64      	cmp	r3, #100	; 0x64
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e395      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006fc8:	4b5e      	ldr	r3, [pc, #376]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1f0      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x10e>
 8006fd4:	e000      	b.n	8006fd8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fd6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 80ca 	beq.w	800717a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fe6:	4b57      	ldr	r3, [pc, #348]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ff0:	4b54      	ldr	r3, [pc, #336]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8006ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d007      	beq.n	800700c <HAL_RCC_OscConfig+0x164>
 8006ffc:	6a3b      	ldr	r3, [r7, #32]
 8006ffe:	2b18      	cmp	r3, #24
 8007000:	d156      	bne.n	80070b0 <HAL_RCC_OscConfig+0x208>
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	f003 0303 	and.w	r3, r3, #3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d151      	bne.n	80070b0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800700c:	4b4d      	ldr	r3, [pc, #308]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f003 0304 	and.w	r3, r3, #4
 8007014:	2b00      	cmp	r3, #0
 8007016:	d005      	beq.n	8007024 <HAL_RCC_OscConfig+0x17c>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e367      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007024:	4b47      	ldr	r3, [pc, #284]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f023 0219 	bic.w	r2, r3, #25
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	68db      	ldr	r3, [r3, #12]
 8007030:	4944      	ldr	r1, [pc, #272]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8007032:	4313      	orrs	r3, r2
 8007034:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007036:	f7fd f8d7 	bl	80041e8 <HAL_GetTick>
 800703a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800703c:	e008      	b.n	8007050 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800703e:	f7fd f8d3 	bl	80041e8 <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d901      	bls.n	8007050 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e351      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007050:	4b3c      	ldr	r3, [pc, #240]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b00      	cmp	r3, #0
 800705a:	d0f0      	beq.n	800703e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800705c:	f7fd f8d0 	bl	8004200 <HAL_GetREVID>
 8007060:	4603      	mov	r3, r0
 8007062:	f241 0203 	movw	r2, #4099	; 0x1003
 8007066:	4293      	cmp	r3, r2
 8007068:	d817      	bhi.n	800709a <HAL_RCC_OscConfig+0x1f2>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b40      	cmp	r3, #64	; 0x40
 8007070:	d108      	bne.n	8007084 <HAL_RCC_OscConfig+0x1dc>
 8007072:	4b34      	ldr	r3, [pc, #208]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800707a:	4a32      	ldr	r2, [pc, #200]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 800707c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007080:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007082:	e07a      	b.n	800717a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007084:	4b2f      	ldr	r3, [pc, #188]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	031b      	lsls	r3, r3, #12
 8007092:	492c      	ldr	r1, [pc, #176]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8007094:	4313      	orrs	r3, r2
 8007096:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007098:	e06f      	b.n	800717a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800709a:	4b2a      	ldr	r3, [pc, #168]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	061b      	lsls	r3, r3, #24
 80070a8:	4926      	ldr	r1, [pc, #152]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070ae:	e064      	b.n	800717a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d047      	beq.n	8007148 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070b8:	4b22      	ldr	r3, [pc, #136]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f023 0219 	bic.w	r2, r3, #25
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	491f      	ldr	r1, [pc, #124]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ca:	f7fd f88d 	bl	80041e8 <HAL_GetTick>
 80070ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070d0:	e008      	b.n	80070e4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070d2:	f7fd f889 	bl	80041e8 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d901      	bls.n	80070e4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e307      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070e4:	4b17      	ldr	r3, [pc, #92]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0f0      	beq.n	80070d2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070f0:	f7fd f886 	bl	8004200 <HAL_GetREVID>
 80070f4:	4603      	mov	r3, r0
 80070f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d817      	bhi.n	800712e <HAL_RCC_OscConfig+0x286>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	691b      	ldr	r3, [r3, #16]
 8007102:	2b40      	cmp	r3, #64	; 0x40
 8007104:	d108      	bne.n	8007118 <HAL_RCC_OscConfig+0x270>
 8007106:	4b0f      	ldr	r3, [pc, #60]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800710e:	4a0d      	ldr	r2, [pc, #52]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8007110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007114:	6053      	str	r3, [r2, #4]
 8007116:	e030      	b.n	800717a <HAL_RCC_OscConfig+0x2d2>
 8007118:	4b0a      	ldr	r3, [pc, #40]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	691b      	ldr	r3, [r3, #16]
 8007124:	031b      	lsls	r3, r3, #12
 8007126:	4907      	ldr	r1, [pc, #28]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8007128:	4313      	orrs	r3, r2
 800712a:	604b      	str	r3, [r1, #4]
 800712c:	e025      	b.n	800717a <HAL_RCC_OscConfig+0x2d2>
 800712e:	4b05      	ldr	r3, [pc, #20]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	061b      	lsls	r3, r3, #24
 800713c:	4901      	ldr	r1, [pc, #4]	; (8007144 <HAL_RCC_OscConfig+0x29c>)
 800713e:	4313      	orrs	r3, r2
 8007140:	604b      	str	r3, [r1, #4]
 8007142:	e01a      	b.n	800717a <HAL_RCC_OscConfig+0x2d2>
 8007144:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007148:	4b9e      	ldr	r3, [pc, #632]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a9d      	ldr	r2, [pc, #628]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 800714e:	f023 0301 	bic.w	r3, r3, #1
 8007152:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007154:	f7fd f848 	bl	80041e8 <HAL_GetTick>
 8007158:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800715c:	f7fd f844 	bl	80041e8 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e2c2      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800716e:	4b95      	ldr	r3, [pc, #596]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 0304 	and.w	r3, r3, #4
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f0      	bne.n	800715c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f003 0310 	and.w	r3, r3, #16
 8007182:	2b00      	cmp	r3, #0
 8007184:	f000 80a9 	beq.w	80072da <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007188:	4b8e      	ldr	r3, [pc, #568]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007190:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007192:	4b8c      	ldr	r3, [pc, #560]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 8007194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007196:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	2b08      	cmp	r3, #8
 800719c:	d007      	beq.n	80071ae <HAL_RCC_OscConfig+0x306>
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	2b18      	cmp	r3, #24
 80071a2:	d13a      	bne.n	800721a <HAL_RCC_OscConfig+0x372>
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d135      	bne.n	800721a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071ae:	4b85      	ldr	r3, [pc, #532]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <HAL_RCC_OscConfig+0x31e>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	69db      	ldr	r3, [r3, #28]
 80071be:	2b80      	cmp	r3, #128	; 0x80
 80071c0:	d001      	beq.n	80071c6 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e296      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071c6:	f7fd f81b 	bl	8004200 <HAL_GetREVID>
 80071ca:	4603      	mov	r3, r0
 80071cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d817      	bhi.n	8007204 <HAL_RCC_OscConfig+0x35c>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	2b20      	cmp	r3, #32
 80071da:	d108      	bne.n	80071ee <HAL_RCC_OscConfig+0x346>
 80071dc:	4b79      	ldr	r3, [pc, #484]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80071e4:	4a77      	ldr	r2, [pc, #476]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 80071e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071ea:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071ec:	e075      	b.n	80072da <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071ee:	4b75      	ldr	r3, [pc, #468]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	069b      	lsls	r3, r3, #26
 80071fc:	4971      	ldr	r1, [pc, #452]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007202:	e06a      	b.n	80072da <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007204:	4b6f      	ldr	r3, [pc, #444]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	061b      	lsls	r3, r3, #24
 8007212:	496c      	ldr	r1, [pc, #432]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 8007214:	4313      	orrs	r3, r2
 8007216:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007218:	e05f      	b.n	80072da <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d042      	beq.n	80072a8 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007222:	4b68      	ldr	r3, [pc, #416]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a67      	ldr	r2, [pc, #412]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 8007228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800722c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800722e:	f7fc ffdb 	bl	80041e8 <HAL_GetTick>
 8007232:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007234:	e008      	b.n	8007248 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007236:	f7fc ffd7 	bl	80041e8 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	2b02      	cmp	r3, #2
 8007242:	d901      	bls.n	8007248 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8007244:	2303      	movs	r3, #3
 8007246:	e255      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007248:	4b5e      	ldr	r3, [pc, #376]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007250:	2b00      	cmp	r3, #0
 8007252:	d0f0      	beq.n	8007236 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007254:	f7fc ffd4 	bl	8004200 <HAL_GetREVID>
 8007258:	4603      	mov	r3, r0
 800725a:	f241 0203 	movw	r2, #4099	; 0x1003
 800725e:	4293      	cmp	r3, r2
 8007260:	d817      	bhi.n	8007292 <HAL_RCC_OscConfig+0x3ea>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	2b20      	cmp	r3, #32
 8007268:	d108      	bne.n	800727c <HAL_RCC_OscConfig+0x3d4>
 800726a:	4b56      	ldr	r3, [pc, #344]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007272:	4a54      	ldr	r2, [pc, #336]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 8007274:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007278:	6053      	str	r3, [r2, #4]
 800727a:	e02e      	b.n	80072da <HAL_RCC_OscConfig+0x432>
 800727c:	4b51      	ldr	r3, [pc, #324]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	069b      	lsls	r3, r3, #26
 800728a:	494e      	ldr	r1, [pc, #312]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 800728c:	4313      	orrs	r3, r2
 800728e:	604b      	str	r3, [r1, #4]
 8007290:	e023      	b.n	80072da <HAL_RCC_OscConfig+0x432>
 8007292:	4b4c      	ldr	r3, [pc, #304]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	061b      	lsls	r3, r3, #24
 80072a0:	4948      	ldr	r1, [pc, #288]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	60cb      	str	r3, [r1, #12]
 80072a6:	e018      	b.n	80072da <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80072a8:	4b46      	ldr	r3, [pc, #280]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a45      	ldr	r2, [pc, #276]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 80072ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072b4:	f7fc ff98 	bl	80041e8 <HAL_GetTick>
 80072b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072ba:	e008      	b.n	80072ce <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80072bc:	f7fc ff94 	bl	80041e8 <HAL_GetTick>
 80072c0:	4602      	mov	r2, r0
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	1ad3      	subs	r3, r2, r3
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d901      	bls.n	80072ce <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e212      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072ce:	4b3d      	ldr	r3, [pc, #244]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1f0      	bne.n	80072bc <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f003 0308 	and.w	r3, r3, #8
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d036      	beq.n	8007354 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d019      	beq.n	8007322 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072ee:	4b35      	ldr	r3, [pc, #212]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 80072f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f2:	4a34      	ldr	r2, [pc, #208]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 80072f4:	f043 0301 	orr.w	r3, r3, #1
 80072f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072fa:	f7fc ff75 	bl	80041e8 <HAL_GetTick>
 80072fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007300:	e008      	b.n	8007314 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007302:	f7fc ff71 	bl	80041e8 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d901      	bls.n	8007314 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e1ef      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007314:	4b2b      	ldr	r3, [pc, #172]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 8007316:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d0f0      	beq.n	8007302 <HAL_RCC_OscConfig+0x45a>
 8007320:	e018      	b.n	8007354 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007322:	4b28      	ldr	r3, [pc, #160]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 8007324:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007326:	4a27      	ldr	r2, [pc, #156]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 8007328:	f023 0301 	bic.w	r3, r3, #1
 800732c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800732e:	f7fc ff5b 	bl	80041e8 <HAL_GetTick>
 8007332:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007334:	e008      	b.n	8007348 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007336:	f7fc ff57 	bl	80041e8 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d901      	bls.n	8007348 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e1d5      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007348:	4b1e      	ldr	r3, [pc, #120]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 800734a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1f0      	bne.n	8007336 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0320 	and.w	r3, r3, #32
 800735c:	2b00      	cmp	r3, #0
 800735e:	d039      	beq.n	80073d4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d019      	beq.n	800739c <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007368:	4b16      	ldr	r3, [pc, #88]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a15      	ldr	r2, [pc, #84]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 800736e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007372:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007374:	f7fc ff38 	bl	80041e8 <HAL_GetTick>
 8007378:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800737a:	e008      	b.n	800738e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800737c:	f7fc ff34 	bl	80041e8 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b02      	cmp	r3, #2
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e1b2      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800738e:	4b0d      	ldr	r3, [pc, #52]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0f0      	beq.n	800737c <HAL_RCC_OscConfig+0x4d4>
 800739a:	e01b      	b.n	80073d4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800739c:	4b09      	ldr	r3, [pc, #36]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a08      	ldr	r2, [pc, #32]	; (80073c4 <HAL_RCC_OscConfig+0x51c>)
 80073a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073a6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80073a8:	f7fc ff1e 	bl	80041e8 <HAL_GetTick>
 80073ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80073ae:	e00b      	b.n	80073c8 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80073b0:	f7fc ff1a 	bl	80041e8 <HAL_GetTick>
 80073b4:	4602      	mov	r2, r0
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	1ad3      	subs	r3, r2, r3
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d904      	bls.n	80073c8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80073be:	2303      	movs	r3, #3
 80073c0:	e198      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
 80073c2:	bf00      	nop
 80073c4:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80073c8:	4ba3      	ldr	r3, [pc, #652]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1ed      	bne.n	80073b0 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f000 8081 	beq.w	80074e4 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073e2:	4b9e      	ldr	r3, [pc, #632]	; (800765c <HAL_RCC_OscConfig+0x7b4>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a9d      	ldr	r2, [pc, #628]	; (800765c <HAL_RCC_OscConfig+0x7b4>)
 80073e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073ee:	f7fc fefb 	bl	80041e8 <HAL_GetTick>
 80073f2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073f4:	e008      	b.n	8007408 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80073f6:	f7fc fef7 	bl	80041e8 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	2b64      	cmp	r3, #100	; 0x64
 8007402:	d901      	bls.n	8007408 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8007404:	2303      	movs	r3, #3
 8007406:	e175      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007408:	4b94      	ldr	r3, [pc, #592]	; (800765c <HAL_RCC_OscConfig+0x7b4>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007410:	2b00      	cmp	r3, #0
 8007412:	d0f0      	beq.n	80073f6 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d106      	bne.n	800742a <HAL_RCC_OscConfig+0x582>
 800741c:	4b8e      	ldr	r3, [pc, #568]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 800741e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007420:	4a8d      	ldr	r2, [pc, #564]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007422:	f043 0301 	orr.w	r3, r3, #1
 8007426:	6713      	str	r3, [r2, #112]	; 0x70
 8007428:	e02d      	b.n	8007486 <HAL_RCC_OscConfig+0x5de>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10c      	bne.n	800744c <HAL_RCC_OscConfig+0x5a4>
 8007432:	4b89      	ldr	r3, [pc, #548]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007436:	4a88      	ldr	r2, [pc, #544]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007438:	f023 0301 	bic.w	r3, r3, #1
 800743c:	6713      	str	r3, [r2, #112]	; 0x70
 800743e:	4b86      	ldr	r3, [pc, #536]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007442:	4a85      	ldr	r2, [pc, #532]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007444:	f023 0304 	bic.w	r3, r3, #4
 8007448:	6713      	str	r3, [r2, #112]	; 0x70
 800744a:	e01c      	b.n	8007486 <HAL_RCC_OscConfig+0x5de>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	2b05      	cmp	r3, #5
 8007452:	d10c      	bne.n	800746e <HAL_RCC_OscConfig+0x5c6>
 8007454:	4b80      	ldr	r3, [pc, #512]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007458:	4a7f      	ldr	r2, [pc, #508]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 800745a:	f043 0304 	orr.w	r3, r3, #4
 800745e:	6713      	str	r3, [r2, #112]	; 0x70
 8007460:	4b7d      	ldr	r3, [pc, #500]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007464:	4a7c      	ldr	r2, [pc, #496]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007466:	f043 0301 	orr.w	r3, r3, #1
 800746a:	6713      	str	r3, [r2, #112]	; 0x70
 800746c:	e00b      	b.n	8007486 <HAL_RCC_OscConfig+0x5de>
 800746e:	4b7a      	ldr	r3, [pc, #488]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007472:	4a79      	ldr	r2, [pc, #484]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007474:	f023 0301 	bic.w	r3, r3, #1
 8007478:	6713      	str	r3, [r2, #112]	; 0x70
 800747a:	4b77      	ldr	r3, [pc, #476]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 800747c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747e:	4a76      	ldr	r2, [pc, #472]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007480:	f023 0304 	bic.w	r3, r3, #4
 8007484:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d015      	beq.n	80074ba <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748e:	f7fc feab 	bl	80041e8 <HAL_GetTick>
 8007492:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007494:	e00a      	b.n	80074ac <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007496:	f7fc fea7 	bl	80041e8 <HAL_GetTick>
 800749a:	4602      	mov	r2, r0
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	1ad3      	subs	r3, r2, r3
 80074a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d901      	bls.n	80074ac <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e123      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80074ac:	4b6a      	ldr	r3, [pc, #424]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80074ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b0:	f003 0302 	and.w	r3, r3, #2
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d0ee      	beq.n	8007496 <HAL_RCC_OscConfig+0x5ee>
 80074b8:	e014      	b.n	80074e4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074ba:	f7fc fe95 	bl	80041e8 <HAL_GetTick>
 80074be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074c0:	e00a      	b.n	80074d8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074c2:	f7fc fe91 	bl	80041e8 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d901      	bls.n	80074d8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e10d      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074d8:	4b5f      	ldr	r3, [pc, #380]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80074da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1ee      	bne.n	80074c2 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 8102 	beq.w	80076f2 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80074ee:	4b5a      	ldr	r3, [pc, #360]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074f6:	2b18      	cmp	r3, #24
 80074f8:	f000 80bd 	beq.w	8007676 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	2b02      	cmp	r3, #2
 8007502:	f040 8095 	bne.w	8007630 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007506:	4b54      	ldr	r3, [pc, #336]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a53      	ldr	r2, [pc, #332]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 800750c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007510:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007512:	f7fc fe69 	bl	80041e8 <HAL_GetTick>
 8007516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007518:	e008      	b.n	800752c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800751a:	f7fc fe65 	bl	80041e8 <HAL_GetTick>
 800751e:	4602      	mov	r2, r0
 8007520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007522:	1ad3      	subs	r3, r2, r3
 8007524:	2b02      	cmp	r3, #2
 8007526:	d901      	bls.n	800752c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e0e3      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800752c:	4b4a      	ldr	r3, [pc, #296]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1f0      	bne.n	800751a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007538:	4b47      	ldr	r3, [pc, #284]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 800753a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800753c:	4b48      	ldr	r3, [pc, #288]	; (8007660 <HAL_RCC_OscConfig+0x7b8>)
 800753e:	4013      	ands	r3, r2
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007548:	0112      	lsls	r2, r2, #4
 800754a:	430a      	orrs	r2, r1
 800754c:	4942      	ldr	r1, [pc, #264]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 800754e:	4313      	orrs	r3, r2
 8007550:	628b      	str	r3, [r1, #40]	; 0x28
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	3b01      	subs	r3, #1
 8007558:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007560:	3b01      	subs	r3, #1
 8007562:	025b      	lsls	r3, r3, #9
 8007564:	b29b      	uxth	r3, r3
 8007566:	431a      	orrs	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800756c:	3b01      	subs	r3, #1
 800756e:	041b      	lsls	r3, r3, #16
 8007570:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007574:	431a      	orrs	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757a:	3b01      	subs	r3, #1
 800757c:	061b      	lsls	r3, r3, #24
 800757e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007582:	4935      	ldr	r1, [pc, #212]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007584:	4313      	orrs	r3, r2
 8007586:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007588:	4b33      	ldr	r3, [pc, #204]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	4a32      	ldr	r2, [pc, #200]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 800758e:	f023 0301 	bic.w	r3, r3, #1
 8007592:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007594:	4b30      	ldr	r3, [pc, #192]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007596:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007598:	4b32      	ldr	r3, [pc, #200]	; (8007664 <HAL_RCC_OscConfig+0x7bc>)
 800759a:	4013      	ands	r3, r2
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80075a0:	00d2      	lsls	r2, r2, #3
 80075a2:	492d      	ldr	r1, [pc, #180]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80075a4:	4313      	orrs	r3, r2
 80075a6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80075a8:	4b2b      	ldr	r3, [pc, #172]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80075aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ac:	f023 020c 	bic.w	r2, r3, #12
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b4:	4928      	ldr	r1, [pc, #160]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80075ba:	4b27      	ldr	r3, [pc, #156]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80075bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075be:	f023 0202 	bic.w	r2, r3, #2
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c6:	4924      	ldr	r1, [pc, #144]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075cc:	4b22      	ldr	r3, [pc, #136]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80075ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d0:	4a21      	ldr	r2, [pc, #132]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80075d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075d8:	4b1f      	ldr	r3, [pc, #124]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	4a1e      	ldr	r2, [pc, #120]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80075de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80075e4:	4b1c      	ldr	r3, [pc, #112]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	4a1b      	ldr	r2, [pc, #108]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80075ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80075f0:	4b19      	ldr	r3, [pc, #100]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	4a18      	ldr	r2, [pc, #96]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80075f6:	f043 0301 	orr.w	r3, r3, #1
 80075fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075fc:	4b16      	ldr	r3, [pc, #88]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a15      	ldr	r2, [pc, #84]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007608:	f7fc fdee 	bl	80041e8 <HAL_GetTick>
 800760c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800760e:	e008      	b.n	8007622 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007610:	f7fc fdea 	bl	80041e8 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	2b02      	cmp	r3, #2
 800761c:	d901      	bls.n	8007622 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800761e:	2303      	movs	r3, #3
 8007620:	e068      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007622:	4b0d      	ldr	r3, [pc, #52]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d0f0      	beq.n	8007610 <HAL_RCC_OscConfig+0x768>
 800762e:	e060      	b.n	80076f2 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007630:	4b09      	ldr	r3, [pc, #36]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a08      	ldr	r2, [pc, #32]	; (8007658 <HAL_RCC_OscConfig+0x7b0>)
 8007636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800763a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763c:	f7fc fdd4 	bl	80041e8 <HAL_GetTick>
 8007640:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007642:	e011      	b.n	8007668 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007644:	f7fc fdd0 	bl	80041e8 <HAL_GetTick>
 8007648:	4602      	mov	r2, r0
 800764a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764c:	1ad3      	subs	r3, r2, r3
 800764e:	2b02      	cmp	r3, #2
 8007650:	d90a      	bls.n	8007668 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e04e      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
 8007656:	bf00      	nop
 8007658:	58024400 	.word	0x58024400
 800765c:	58024800 	.word	0x58024800
 8007660:	fffffc0c 	.word	0xfffffc0c
 8007664:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007668:	4b24      	ldr	r3, [pc, #144]	; (80076fc <HAL_RCC_OscConfig+0x854>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e7      	bne.n	8007644 <HAL_RCC_OscConfig+0x79c>
 8007674:	e03d      	b.n	80076f2 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007676:	4b21      	ldr	r3, [pc, #132]	; (80076fc <HAL_RCC_OscConfig+0x854>)
 8007678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800767a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800767c:	4b1f      	ldr	r3, [pc, #124]	; (80076fc <HAL_RCC_OscConfig+0x854>)
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	2b01      	cmp	r3, #1
 8007688:	d031      	beq.n	80076ee <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f003 0203 	and.w	r2, r3, #3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007694:	429a      	cmp	r2, r3
 8007696:	d12a      	bne.n	80076ee <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	091b      	lsrs	r3, r3, #4
 800769c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d122      	bne.n	80076ee <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d11a      	bne.n	80076ee <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	0a5b      	lsrs	r3, r3, #9
 80076bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d111      	bne.n	80076ee <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	0c1b      	lsrs	r3, r3, #16
 80076ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076d8:	429a      	cmp	r2, r3
 80076da:	d108      	bne.n	80076ee <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	0e1b      	lsrs	r3, r3, #24
 80076e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d001      	beq.n	80076f2 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e000      	b.n	80076f4 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3730      	adds	r7, #48	; 0x30
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	58024400 	.word	0x58024400

08007700 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e19c      	b.n	8007a4e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007714:	4b8a      	ldr	r3, [pc, #552]	; (8007940 <HAL_RCC_ClockConfig+0x240>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 030f 	and.w	r3, r3, #15
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	429a      	cmp	r2, r3
 8007720:	d910      	bls.n	8007744 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007722:	4b87      	ldr	r3, [pc, #540]	; (8007940 <HAL_RCC_ClockConfig+0x240>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f023 020f 	bic.w	r2, r3, #15
 800772a:	4985      	ldr	r1, [pc, #532]	; (8007940 <HAL_RCC_ClockConfig+0x240>)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	4313      	orrs	r3, r2
 8007730:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007732:	4b83      	ldr	r3, [pc, #524]	; (8007940 <HAL_RCC_ClockConfig+0x240>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 030f 	and.w	r3, r3, #15
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	429a      	cmp	r2, r3
 800773e:	d001      	beq.n	8007744 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e184      	b.n	8007a4e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d010      	beq.n	8007772 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	691a      	ldr	r2, [r3, #16]
 8007754:	4b7b      	ldr	r3, [pc, #492]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800775c:	429a      	cmp	r2, r3
 800775e:	d908      	bls.n	8007772 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007760:	4b78      	ldr	r3, [pc, #480]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	4975      	ldr	r1, [pc, #468]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 800776e:	4313      	orrs	r3, r2
 8007770:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f003 0308 	and.w	r3, r3, #8
 800777a:	2b00      	cmp	r3, #0
 800777c:	d010      	beq.n	80077a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	695a      	ldr	r2, [r3, #20]
 8007782:	4b70      	ldr	r3, [pc, #448]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 8007784:	69db      	ldr	r3, [r3, #28]
 8007786:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800778a:	429a      	cmp	r2, r3
 800778c:	d908      	bls.n	80077a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800778e:	4b6d      	ldr	r3, [pc, #436]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 8007790:	69db      	ldr	r3, [r3, #28]
 8007792:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	496a      	ldr	r1, [pc, #424]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 800779c:	4313      	orrs	r3, r2
 800779e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0310 	and.w	r3, r3, #16
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d010      	beq.n	80077ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	699a      	ldr	r2, [r3, #24]
 80077b0:	4b64      	ldr	r3, [pc, #400]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 80077b2:	69db      	ldr	r3, [r3, #28]
 80077b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d908      	bls.n	80077ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80077bc:	4b61      	ldr	r3, [pc, #388]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 80077be:	69db      	ldr	r3, [r3, #28]
 80077c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	495e      	ldr	r1, [pc, #376]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d010      	beq.n	80077fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	69da      	ldr	r2, [r3, #28]
 80077de:	4b59      	ldr	r3, [pc, #356]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d908      	bls.n	80077fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80077ea:	4b56      	ldr	r3, [pc, #344]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	4953      	ldr	r1, [pc, #332]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 80077f8:	4313      	orrs	r3, r2
 80077fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 0302 	and.w	r3, r3, #2
 8007804:	2b00      	cmp	r3, #0
 8007806:	d010      	beq.n	800782a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	4b4d      	ldr	r3, [pc, #308]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 800780e:	699b      	ldr	r3, [r3, #24]
 8007810:	f003 030f 	and.w	r3, r3, #15
 8007814:	429a      	cmp	r2, r3
 8007816:	d908      	bls.n	800782a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007818:	4b4a      	ldr	r3, [pc, #296]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 800781a:	699b      	ldr	r3, [r3, #24]
 800781c:	f023 020f 	bic.w	r2, r3, #15
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	4947      	ldr	r1, [pc, #284]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 8007826:	4313      	orrs	r3, r2
 8007828:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f003 0301 	and.w	r3, r3, #1
 8007832:	2b00      	cmp	r3, #0
 8007834:	d055      	beq.n	80078e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007836:	4b43      	ldr	r3, [pc, #268]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	4940      	ldr	r1, [pc, #256]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 8007844:	4313      	orrs	r3, r2
 8007846:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	2b02      	cmp	r3, #2
 800784e:	d107      	bne.n	8007860 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007850:	4b3c      	ldr	r3, [pc, #240]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d121      	bne.n	80078a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e0f6      	b.n	8007a4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	2b03      	cmp	r3, #3
 8007866:	d107      	bne.n	8007878 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007868:	4b36      	ldr	r3, [pc, #216]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d115      	bne.n	80078a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e0ea      	b.n	8007a4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2b01      	cmp	r3, #1
 800787e:	d107      	bne.n	8007890 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007880:	4b30      	ldr	r3, [pc, #192]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007888:	2b00      	cmp	r3, #0
 800788a:	d109      	bne.n	80078a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e0de      	b.n	8007a4e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007890:	4b2c      	ldr	r3, [pc, #176]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	e0d6      	b.n	8007a4e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078a0:	4b28      	ldr	r3, [pc, #160]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	f023 0207 	bic.w	r2, r3, #7
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	4925      	ldr	r1, [pc, #148]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078b2:	f7fc fc99 	bl	80041e8 <HAL_GetTick>
 80078b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078b8:	e00a      	b.n	80078d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078ba:	f7fc fc95 	bl	80041e8 <HAL_GetTick>
 80078be:	4602      	mov	r2, r0
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d901      	bls.n	80078d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80078cc:	2303      	movs	r3, #3
 80078ce:	e0be      	b.n	8007a4e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078d0:	4b1c      	ldr	r3, [pc, #112]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	00db      	lsls	r3, r3, #3
 80078de:	429a      	cmp	r2, r3
 80078e0:	d1eb      	bne.n	80078ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d010      	beq.n	8007910 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	4b14      	ldr	r3, [pc, #80]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 80078f4:	699b      	ldr	r3, [r3, #24]
 80078f6:	f003 030f 	and.w	r3, r3, #15
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d208      	bcs.n	8007910 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078fe:	4b11      	ldr	r3, [pc, #68]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	f023 020f 	bic.w	r2, r3, #15
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	490e      	ldr	r1, [pc, #56]	; (8007944 <HAL_RCC_ClockConfig+0x244>)
 800790c:	4313      	orrs	r3, r2
 800790e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007910:	4b0b      	ldr	r3, [pc, #44]	; (8007940 <HAL_RCC_ClockConfig+0x240>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 030f 	and.w	r3, r3, #15
 8007918:	683a      	ldr	r2, [r7, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d214      	bcs.n	8007948 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800791e:	4b08      	ldr	r3, [pc, #32]	; (8007940 <HAL_RCC_ClockConfig+0x240>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f023 020f 	bic.w	r2, r3, #15
 8007926:	4906      	ldr	r1, [pc, #24]	; (8007940 <HAL_RCC_ClockConfig+0x240>)
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	4313      	orrs	r3, r2
 800792c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800792e:	4b04      	ldr	r3, [pc, #16]	; (8007940 <HAL_RCC_ClockConfig+0x240>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 030f 	and.w	r3, r3, #15
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	429a      	cmp	r2, r3
 800793a:	d005      	beq.n	8007948 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e086      	b.n	8007a4e <HAL_RCC_ClockConfig+0x34e>
 8007940:	52002000 	.word	0x52002000
 8007944:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0304 	and.w	r3, r3, #4
 8007950:	2b00      	cmp	r3, #0
 8007952:	d010      	beq.n	8007976 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	691a      	ldr	r2, [r3, #16]
 8007958:	4b3f      	ldr	r3, [pc, #252]	; (8007a58 <HAL_RCC_ClockConfig+0x358>)
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007960:	429a      	cmp	r2, r3
 8007962:	d208      	bcs.n	8007976 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007964:	4b3c      	ldr	r3, [pc, #240]	; (8007a58 <HAL_RCC_ClockConfig+0x358>)
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	691b      	ldr	r3, [r3, #16]
 8007970:	4939      	ldr	r1, [pc, #228]	; (8007a58 <HAL_RCC_ClockConfig+0x358>)
 8007972:	4313      	orrs	r3, r2
 8007974:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0308 	and.w	r3, r3, #8
 800797e:	2b00      	cmp	r3, #0
 8007980:	d010      	beq.n	80079a4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	695a      	ldr	r2, [r3, #20]
 8007986:	4b34      	ldr	r3, [pc, #208]	; (8007a58 <HAL_RCC_ClockConfig+0x358>)
 8007988:	69db      	ldr	r3, [r3, #28]
 800798a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800798e:	429a      	cmp	r2, r3
 8007990:	d208      	bcs.n	80079a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007992:	4b31      	ldr	r3, [pc, #196]	; (8007a58 <HAL_RCC_ClockConfig+0x358>)
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	492e      	ldr	r1, [pc, #184]	; (8007a58 <HAL_RCC_ClockConfig+0x358>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f003 0310 	and.w	r3, r3, #16
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d010      	beq.n	80079d2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	699a      	ldr	r2, [r3, #24]
 80079b4:	4b28      	ldr	r3, [pc, #160]	; (8007a58 <HAL_RCC_ClockConfig+0x358>)
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079bc:	429a      	cmp	r2, r3
 80079be:	d208      	bcs.n	80079d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80079c0:	4b25      	ldr	r3, [pc, #148]	; (8007a58 <HAL_RCC_ClockConfig+0x358>)
 80079c2:	69db      	ldr	r3, [r3, #28]
 80079c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	4922      	ldr	r1, [pc, #136]	; (8007a58 <HAL_RCC_ClockConfig+0x358>)
 80079ce:	4313      	orrs	r3, r2
 80079d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f003 0320 	and.w	r3, r3, #32
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d010      	beq.n	8007a00 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	69da      	ldr	r2, [r3, #28]
 80079e2:	4b1d      	ldr	r3, [pc, #116]	; (8007a58 <HAL_RCC_ClockConfig+0x358>)
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d208      	bcs.n	8007a00 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80079ee:	4b1a      	ldr	r3, [pc, #104]	; (8007a58 <HAL_RCC_ClockConfig+0x358>)
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	69db      	ldr	r3, [r3, #28]
 80079fa:	4917      	ldr	r1, [pc, #92]	; (8007a58 <HAL_RCC_ClockConfig+0x358>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007a00:	f000 f834 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 8007a04:	4602      	mov	r2, r0
 8007a06:	4b14      	ldr	r3, [pc, #80]	; (8007a58 <HAL_RCC_ClockConfig+0x358>)
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	0a1b      	lsrs	r3, r3, #8
 8007a0c:	f003 030f 	and.w	r3, r3, #15
 8007a10:	4912      	ldr	r1, [pc, #72]	; (8007a5c <HAL_RCC_ClockConfig+0x35c>)
 8007a12:	5ccb      	ldrb	r3, [r1, r3]
 8007a14:	f003 031f 	and.w	r3, r3, #31
 8007a18:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a1e:	4b0e      	ldr	r3, [pc, #56]	; (8007a58 <HAL_RCC_ClockConfig+0x358>)
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	4a0d      	ldr	r2, [pc, #52]	; (8007a5c <HAL_RCC_ClockConfig+0x35c>)
 8007a28:	5cd3      	ldrb	r3, [r2, r3]
 8007a2a:	f003 031f 	and.w	r3, r3, #31
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	fa22 f303 	lsr.w	r3, r2, r3
 8007a34:	4a0a      	ldr	r2, [pc, #40]	; (8007a60 <HAL_RCC_ClockConfig+0x360>)
 8007a36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a38:	4a0a      	ldr	r2, [pc, #40]	; (8007a64 <HAL_RCC_ClockConfig+0x364>)
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007a3e:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <HAL_RCC_ClockConfig+0x368>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fc fb86 	bl	8004154 <HAL_InitTick>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	58024400 	.word	0x58024400
 8007a5c:	0800f9f8 	.word	0x0800f9f8
 8007a60:	24000018 	.word	0x24000018
 8007a64:	24000014 	.word	0x24000014
 8007a68:	2400001c 	.word	0x2400001c

08007a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b089      	sub	sp, #36	; 0x24
 8007a70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a72:	4bb3      	ldr	r3, [pc, #716]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a7a:	2b18      	cmp	r3, #24
 8007a7c:	f200 8155 	bhi.w	8007d2a <HAL_RCC_GetSysClockFreq+0x2be>
 8007a80:	a201      	add	r2, pc, #4	; (adr r2, 8007a88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a86:	bf00      	nop
 8007a88:	08007aed 	.word	0x08007aed
 8007a8c:	08007d2b 	.word	0x08007d2b
 8007a90:	08007d2b 	.word	0x08007d2b
 8007a94:	08007d2b 	.word	0x08007d2b
 8007a98:	08007d2b 	.word	0x08007d2b
 8007a9c:	08007d2b 	.word	0x08007d2b
 8007aa0:	08007d2b 	.word	0x08007d2b
 8007aa4:	08007d2b 	.word	0x08007d2b
 8007aa8:	08007b13 	.word	0x08007b13
 8007aac:	08007d2b 	.word	0x08007d2b
 8007ab0:	08007d2b 	.word	0x08007d2b
 8007ab4:	08007d2b 	.word	0x08007d2b
 8007ab8:	08007d2b 	.word	0x08007d2b
 8007abc:	08007d2b 	.word	0x08007d2b
 8007ac0:	08007d2b 	.word	0x08007d2b
 8007ac4:	08007d2b 	.word	0x08007d2b
 8007ac8:	08007b19 	.word	0x08007b19
 8007acc:	08007d2b 	.word	0x08007d2b
 8007ad0:	08007d2b 	.word	0x08007d2b
 8007ad4:	08007d2b 	.word	0x08007d2b
 8007ad8:	08007d2b 	.word	0x08007d2b
 8007adc:	08007d2b 	.word	0x08007d2b
 8007ae0:	08007d2b 	.word	0x08007d2b
 8007ae4:	08007d2b 	.word	0x08007d2b
 8007ae8:	08007b1f 	.word	0x08007b1f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007aec:	4b94      	ldr	r3, [pc, #592]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0320 	and.w	r3, r3, #32
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d009      	beq.n	8007b0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007af8:	4b91      	ldr	r3, [pc, #580]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	08db      	lsrs	r3, r3, #3
 8007afe:	f003 0303 	and.w	r3, r3, #3
 8007b02:	4a90      	ldr	r2, [pc, #576]	; (8007d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b04:	fa22 f303 	lsr.w	r3, r2, r3
 8007b08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007b0a:	e111      	b.n	8007d30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007b0c:	4b8d      	ldr	r3, [pc, #564]	; (8007d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b0e:	61bb      	str	r3, [r7, #24]
    break;
 8007b10:	e10e      	b.n	8007d30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007b12:	4b8d      	ldr	r3, [pc, #564]	; (8007d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b14:	61bb      	str	r3, [r7, #24]
    break;
 8007b16:	e10b      	b.n	8007d30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007b18:	4b8c      	ldr	r3, [pc, #560]	; (8007d4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007b1a:	61bb      	str	r3, [r7, #24]
    break;
 8007b1c:	e108      	b.n	8007d30 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b1e:	4b88      	ldr	r3, [pc, #544]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b22:	f003 0303 	and.w	r3, r3, #3
 8007b26:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007b28:	4b85      	ldr	r3, [pc, #532]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b2c:	091b      	lsrs	r3, r3, #4
 8007b2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b32:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007b34:	4b82      	ldr	r3, [pc, #520]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007b3e:	4b80      	ldr	r3, [pc, #512]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b42:	08db      	lsrs	r3, r3, #3
 8007b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	fb02 f303 	mul.w	r3, r2, r3
 8007b4e:	ee07 3a90 	vmov	s15, r3
 8007b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b56:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 80e1 	beq.w	8007d24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	f000 8083 	beq.w	8007c70 <HAL_RCC_GetSysClockFreq+0x204>
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	f200 80a1 	bhi.w	8007cb4 <HAL_RCC_GetSysClockFreq+0x248>
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d003      	beq.n	8007b80 <HAL_RCC_GetSysClockFreq+0x114>
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d056      	beq.n	8007c2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007b7e:	e099      	b.n	8007cb4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b80:	4b6f      	ldr	r3, [pc, #444]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0320 	and.w	r3, r3, #32
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d02d      	beq.n	8007be8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b8c:	4b6c      	ldr	r3, [pc, #432]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	08db      	lsrs	r3, r3, #3
 8007b92:	f003 0303 	and.w	r3, r3, #3
 8007b96:	4a6b      	ldr	r2, [pc, #428]	; (8007d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b98:	fa22 f303 	lsr.w	r3, r2, r3
 8007b9c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	ee07 3a90 	vmov	s15, r3
 8007ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	ee07 3a90 	vmov	s15, r3
 8007bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb6:	4b62      	ldr	r3, [pc, #392]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bbe:	ee07 3a90 	vmov	s15, r3
 8007bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007be2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007be6:	e087      	b.n	8007cf8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	ee07 3a90 	vmov	s15, r3
 8007bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bf2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007d54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bfa:	4b51      	ldr	r3, [pc, #324]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c02:	ee07 3a90 	vmov	s15, r3
 8007c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c2a:	e065      	b.n	8007cf8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c36:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c3e:	4b40      	ldr	r3, [pc, #256]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c46:	ee07 3a90 	vmov	s15, r3
 8007c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c6e:	e043      	b.n	8007cf8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007d5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c82:	4b2f      	ldr	r3, [pc, #188]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c8a:	ee07 3a90 	vmov	s15, r3
 8007c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cb2:	e021      	b.n	8007cf8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	ee07 3a90 	vmov	s15, r3
 8007cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cbe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cc6:	4b1e      	ldr	r3, [pc, #120]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cce:	ee07 3a90 	vmov	s15, r3
 8007cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cda:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cf6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007cf8:	4b11      	ldr	r3, [pc, #68]	; (8007d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cfc:	0a5b      	lsrs	r3, r3, #9
 8007cfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d02:	3301      	adds	r3, #1
 8007d04:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	ee07 3a90 	vmov	s15, r3
 8007d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d1c:	ee17 3a90 	vmov	r3, s15
 8007d20:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007d22:	e005      	b.n	8007d30 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007d24:	2300      	movs	r3, #0
 8007d26:	61bb      	str	r3, [r7, #24]
    break;
 8007d28:	e002      	b.n	8007d30 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007d2a:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d2c:	61bb      	str	r3, [r7, #24]
    break;
 8007d2e:	bf00      	nop
  }

  return sysclockfreq;
 8007d30:	69bb      	ldr	r3, [r7, #24]
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3724      	adds	r7, #36	; 0x24
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr
 8007d3e:	bf00      	nop
 8007d40:	58024400 	.word	0x58024400
 8007d44:	03d09000 	.word	0x03d09000
 8007d48:	003d0900 	.word	0x003d0900
 8007d4c:	02dc6c00 	.word	0x02dc6c00
 8007d50:	46000000 	.word	0x46000000
 8007d54:	4c742400 	.word	0x4c742400
 8007d58:	4a742400 	.word	0x4a742400
 8007d5c:	4c371b00 	.word	0x4c371b00

08007d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007d66:	f7ff fe81 	bl	8007a6c <HAL_RCC_GetSysClockFreq>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	4b10      	ldr	r3, [pc, #64]	; (8007db0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	0a1b      	lsrs	r3, r3, #8
 8007d72:	f003 030f 	and.w	r3, r3, #15
 8007d76:	490f      	ldr	r1, [pc, #60]	; (8007db4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d78:	5ccb      	ldrb	r3, [r1, r3]
 8007d7a:	f003 031f 	and.w	r3, r3, #31
 8007d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007d82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007d84:	4b0a      	ldr	r3, [pc, #40]	; (8007db0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	f003 030f 	and.w	r3, r3, #15
 8007d8c:	4a09      	ldr	r2, [pc, #36]	; (8007db4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007d8e:	5cd3      	ldrb	r3, [r2, r3]
 8007d90:	f003 031f 	and.w	r3, r3, #31
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	fa22 f303 	lsr.w	r3, r2, r3
 8007d9a:	4a07      	ldr	r2, [pc, #28]	; (8007db8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007d9c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007d9e:	4a07      	ldr	r2, [pc, #28]	; (8007dbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007da4:	4b04      	ldr	r3, [pc, #16]	; (8007db8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007da6:	681b      	ldr	r3, [r3, #0]
}
 8007da8:	4618      	mov	r0, r3
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}
 8007db0:	58024400 	.word	0x58024400
 8007db4:	0800f9f8 	.word	0x0800f9f8
 8007db8:	24000018 	.word	0x24000018
 8007dbc:	24000014 	.word	0x24000014

08007dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007dc4:	f7ff ffcc 	bl	8007d60 <HAL_RCC_GetHCLKFreq>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	4b06      	ldr	r3, [pc, #24]	; (8007de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	091b      	lsrs	r3, r3, #4
 8007dd0:	f003 0307 	and.w	r3, r3, #7
 8007dd4:	4904      	ldr	r1, [pc, #16]	; (8007de8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007dd6:	5ccb      	ldrb	r3, [r1, r3]
 8007dd8:	f003 031f 	and.w	r3, r3, #31
 8007ddc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	58024400 	.word	0x58024400
 8007de8:	0800f9f8 	.word	0x0800f9f8

08007dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007df0:	f7ff ffb6 	bl	8007d60 <HAL_RCC_GetHCLKFreq>
 8007df4:	4602      	mov	r2, r0
 8007df6:	4b06      	ldr	r3, [pc, #24]	; (8007e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	0a1b      	lsrs	r3, r3, #8
 8007dfc:	f003 0307 	and.w	r3, r3, #7
 8007e00:	4904      	ldr	r1, [pc, #16]	; (8007e14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e02:	5ccb      	ldrb	r3, [r1, r3]
 8007e04:	f003 031f 	and.w	r3, r3, #31
 8007e08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	58024400 	.word	0x58024400
 8007e14:	0800f9f8 	.word	0x0800f9f8

08007e18 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e20:	2300      	movs	r3, #0
 8007e22:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e24:	2300      	movs	r3, #0
 8007e26:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d03f      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e3c:	d02a      	beq.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007e3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e42:	d824      	bhi.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007e44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e48:	d018      	beq.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007e4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e4e:	d81e      	bhi.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d003      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e58:	d007      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007e5a:	e018      	b.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e5c:	4bab      	ldr	r3, [pc, #684]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	4aaa      	ldr	r2, [pc, #680]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007e68:	e015      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3304      	adds	r3, #4
 8007e6e:	2102      	movs	r1, #2
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 f9cf 	bl	8009214 <RCCEx_PLL2_Config>
 8007e76:	4603      	mov	r3, r0
 8007e78:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007e7a:	e00c      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	3324      	adds	r3, #36	; 0x24
 8007e80:	2102      	movs	r1, #2
 8007e82:	4618      	mov	r0, r3
 8007e84:	f001 fa78 	bl	8009378 <RCCEx_PLL3_Config>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007e8c:	e003      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	75fb      	strb	r3, [r7, #23]
      break;
 8007e92:	e000      	b.n	8007e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e96:	7dfb      	ldrb	r3, [r7, #23]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d109      	bne.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007e9c:	4b9b      	ldr	r3, [pc, #620]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea8:	4998      	ldr	r1, [pc, #608]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	650b      	str	r3, [r1, #80]	; 0x50
 8007eae:	e001      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
 8007eb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d03d      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ec4:	2b04      	cmp	r3, #4
 8007ec6:	d826      	bhi.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007ec8:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007ee5 	.word	0x08007ee5
 8007ed4:	08007ef3 	.word	0x08007ef3
 8007ed8:	08007f05 	.word	0x08007f05
 8007edc:	08007f1d 	.word	0x08007f1d
 8007ee0:	08007f1d 	.word	0x08007f1d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ee4:	4b89      	ldr	r3, [pc, #548]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee8:	4a88      	ldr	r2, [pc, #544]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ef0:	e015      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f001 f98b 	bl	8009214 <RCCEx_PLL2_Config>
 8007efe:	4603      	mov	r3, r0
 8007f00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f02:	e00c      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3324      	adds	r3, #36	; 0x24
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f001 fa34 	bl	8009378 <RCCEx_PLL3_Config>
 8007f10:	4603      	mov	r3, r0
 8007f12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f14:	e003      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	75fb      	strb	r3, [r7, #23]
      break;
 8007f1a:	e000      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f1e:	7dfb      	ldrb	r3, [r7, #23]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d109      	bne.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f24:	4b79      	ldr	r3, [pc, #484]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f28:	f023 0207 	bic.w	r2, r3, #7
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f30:	4976      	ldr	r1, [pc, #472]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	650b      	str	r3, [r1, #80]	; 0x50
 8007f36:	e001      	b.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
 8007f3a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d042      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f50:	d02b      	beq.n	8007faa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f56:	d825      	bhi.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007f58:	2bc0      	cmp	r3, #192	; 0xc0
 8007f5a:	d028      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007f5c:	2bc0      	cmp	r3, #192	; 0xc0
 8007f5e:	d821      	bhi.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007f60:	2b80      	cmp	r3, #128	; 0x80
 8007f62:	d016      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007f64:	2b80      	cmp	r3, #128	; 0x80
 8007f66:	d81d      	bhi.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d002      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007f6c:	2b40      	cmp	r3, #64	; 0x40
 8007f6e:	d007      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007f70:	e018      	b.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f72:	4b66      	ldr	r3, [pc, #408]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f76:	4a65      	ldr	r2, [pc, #404]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007f7e:	e017      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3304      	adds	r3, #4
 8007f84:	2100      	movs	r1, #0
 8007f86:	4618      	mov	r0, r3
 8007f88:	f001 f944 	bl	8009214 <RCCEx_PLL2_Config>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007f90:	e00e      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	3324      	adds	r3, #36	; 0x24
 8007f96:	2100      	movs	r1, #0
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f001 f9ed 	bl	8009378 <RCCEx_PLL3_Config>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007fa2:	e005      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8007fa8:	e002      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007faa:	bf00      	nop
 8007fac:	e000      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007fae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d109      	bne.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007fb6:	4b55      	ldr	r3, [pc, #340]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fc2:	4952      	ldr	r1, [pc, #328]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	650b      	str	r3, [r1, #80]	; 0x50
 8007fc8:	e001      	b.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d049      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fe0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fe4:	d030      	beq.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007fe6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fea:	d82a      	bhi.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007fec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ff0:	d02c      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007ff2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007ff6:	d824      	bhi.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ffc:	d018      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007ffe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008002:	d81e      	bhi.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008004:	2b00      	cmp	r3, #0
 8008006:	d003      	beq.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008008:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800800c:	d007      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800800e:	e018      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008010:	4b3e      	ldr	r3, [pc, #248]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008014:	4a3d      	ldr	r2, [pc, #244]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800801a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800801c:	e017      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3304      	adds	r3, #4
 8008022:	2100      	movs	r1, #0
 8008024:	4618      	mov	r0, r3
 8008026:	f001 f8f5 	bl	8009214 <RCCEx_PLL2_Config>
 800802a:	4603      	mov	r3, r0
 800802c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800802e:	e00e      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3324      	adds	r3, #36	; 0x24
 8008034:	2100      	movs	r1, #0
 8008036:	4618      	mov	r0, r3
 8008038:	f001 f99e 	bl	8009378 <RCCEx_PLL3_Config>
 800803c:	4603      	mov	r3, r0
 800803e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008040:	e005      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	75fb      	strb	r3, [r7, #23]
      break;
 8008046:	e002      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008048:	bf00      	nop
 800804a:	e000      	b.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800804c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008054:	4b2d      	ldr	r3, [pc, #180]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008058:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008062:	492a      	ldr	r1, [pc, #168]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008064:	4313      	orrs	r3, r2
 8008066:	658b      	str	r3, [r1, #88]	; 0x58
 8008068:	e001      	b.n	800806e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800806a:	7dfb      	ldrb	r3, [r7, #23]
 800806c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008076:	2b00      	cmp	r3, #0
 8008078:	d04c      	beq.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008080:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008084:	d030      	beq.n	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008086:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800808a:	d82a      	bhi.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800808c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008090:	d02c      	beq.n	80080ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008092:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008096:	d824      	bhi.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800809c:	d018      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800809e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80080a2:	d81e      	bhi.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d003      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80080a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080ac:	d007      	beq.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80080ae:	e018      	b.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b0:	4b16      	ldr	r3, [pc, #88]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b4:	4a15      	ldr	r2, [pc, #84]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080bc:	e017      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	3304      	adds	r3, #4
 80080c2:	2100      	movs	r1, #0
 80080c4:	4618      	mov	r0, r3
 80080c6:	f001 f8a5 	bl	8009214 <RCCEx_PLL2_Config>
 80080ca:	4603      	mov	r3, r0
 80080cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80080ce:	e00e      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3324      	adds	r3, #36	; 0x24
 80080d4:	2100      	movs	r1, #0
 80080d6:	4618      	mov	r0, r3
 80080d8:	f001 f94e 	bl	8009378 <RCCEx_PLL3_Config>
 80080dc:	4603      	mov	r3, r0
 80080de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080e0:	e005      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	75fb      	strb	r3, [r7, #23]
      break;
 80080e6:	e002      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80080e8:	bf00      	nop
 80080ea:	e000      	b.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80080ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d10d      	bne.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80080f4:	4b05      	ldr	r3, [pc, #20]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080f8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008102:	4902      	ldr	r1, [pc, #8]	; (800810c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008104:	4313      	orrs	r3, r2
 8008106:	658b      	str	r3, [r1, #88]	; 0x58
 8008108:	e004      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800810a:	bf00      	nop
 800810c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008110:	7dfb      	ldrb	r3, [r7, #23]
 8008112:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800811c:	2b00      	cmp	r3, #0
 800811e:	d032      	beq.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008124:	2b30      	cmp	r3, #48	; 0x30
 8008126:	d01c      	beq.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008128:	2b30      	cmp	r3, #48	; 0x30
 800812a:	d817      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800812c:	2b20      	cmp	r3, #32
 800812e:	d00c      	beq.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8008130:	2b20      	cmp	r3, #32
 8008132:	d813      	bhi.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d016      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8008138:	2b10      	cmp	r3, #16
 800813a:	d10f      	bne.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800813c:	4baf      	ldr	r3, [pc, #700]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800813e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008140:	4aae      	ldr	r2, [pc, #696]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008146:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008148:	e00e      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	3304      	adds	r3, #4
 800814e:	2102      	movs	r1, #2
 8008150:	4618      	mov	r0, r3
 8008152:	f001 f85f 	bl	8009214 <RCCEx_PLL2_Config>
 8008156:	4603      	mov	r3, r0
 8008158:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800815a:	e005      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	75fb      	strb	r3, [r7, #23]
      break;
 8008160:	e002      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008162:	bf00      	nop
 8008164:	e000      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8008166:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d109      	bne.n	8008182 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800816e:	4ba3      	ldr	r3, [pc, #652]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008172:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800817a:	49a0      	ldr	r1, [pc, #640]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800817c:	4313      	orrs	r3, r2
 800817e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008180:	e001      	b.n	8008186 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008182:	7dfb      	ldrb	r3, [r7, #23]
 8008184:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d047      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800819a:	d030      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800819c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80081a0:	d82a      	bhi.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80081a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081a6:	d02c      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80081a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081ac:	d824      	bhi.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80081ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081b2:	d018      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80081b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081b8:	d81e      	bhi.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80081be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c2:	d007      	beq.n	80081d4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80081c4:	e018      	b.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081c6:	4b8d      	ldr	r3, [pc, #564]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ca:	4a8c      	ldr	r2, [pc, #560]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80081cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80081d2:	e017      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	3304      	adds	r3, #4
 80081d8:	2100      	movs	r1, #0
 80081da:	4618      	mov	r0, r3
 80081dc:	f001 f81a 	bl	8009214 <RCCEx_PLL2_Config>
 80081e0:	4603      	mov	r3, r0
 80081e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80081e4:	e00e      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	3324      	adds	r3, #36	; 0x24
 80081ea:	2100      	movs	r1, #0
 80081ec:	4618      	mov	r0, r3
 80081ee:	f001 f8c3 	bl	8009378 <RCCEx_PLL3_Config>
 80081f2:	4603      	mov	r3, r0
 80081f4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80081f6:	e005      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	75fb      	strb	r3, [r7, #23]
      break;
 80081fc:	e002      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80081fe:	bf00      	nop
 8008200:	e000      	b.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8008202:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008204:	7dfb      	ldrb	r3, [r7, #23]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d109      	bne.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800820a:	4b7c      	ldr	r3, [pc, #496]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800820c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800820e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008216:	4979      	ldr	r1, [pc, #484]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008218:	4313      	orrs	r3, r2
 800821a:	650b      	str	r3, [r1, #80]	; 0x50
 800821c:	e001      	b.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800821e:	7dfb      	ldrb	r3, [r7, #23]
 8008220:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d049      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008232:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008236:	d02e      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8008238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800823c:	d828      	bhi.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800823e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008242:	d02a      	beq.n	800829a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8008244:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008248:	d822      	bhi.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800824a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800824e:	d026      	beq.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8008250:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008254:	d81c      	bhi.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800825a:	d010      	beq.n	800827e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800825c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008260:	d816      	bhi.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8008262:	2b00      	cmp	r3, #0
 8008264:	d01d      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8008266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800826a:	d111      	bne.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3304      	adds	r3, #4
 8008270:	2101      	movs	r1, #1
 8008272:	4618      	mov	r0, r3
 8008274:	f000 ffce 	bl	8009214 <RCCEx_PLL2_Config>
 8008278:	4603      	mov	r3, r0
 800827a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800827c:	e012      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	3324      	adds	r3, #36	; 0x24
 8008282:	2101      	movs	r1, #1
 8008284:	4618      	mov	r0, r3
 8008286:	f001 f877 	bl	8009378 <RCCEx_PLL3_Config>
 800828a:	4603      	mov	r3, r0
 800828c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800828e:	e009      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	75fb      	strb	r3, [r7, #23]
      break;
 8008294:	e006      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8008296:	bf00      	nop
 8008298:	e004      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800829a:	bf00      	nop
 800829c:	e002      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800829e:	bf00      	nop
 80082a0:	e000      	b.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80082a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082a4:	7dfb      	ldrb	r3, [r7, #23]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d109      	bne.n	80082be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80082aa:	4b54      	ldr	r3, [pc, #336]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b6:	4951      	ldr	r1, [pc, #324]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	650b      	str	r3, [r1, #80]	; 0x50
 80082bc:	e001      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082be:	7dfb      	ldrb	r3, [r7, #23]
 80082c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d04b      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80082d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082d8:	d02e      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80082da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082de:	d828      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80082e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082e4:	d02a      	beq.n	800833c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80082e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ea:	d822      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80082ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082f0:	d026      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80082f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80082f6:	d81c      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80082f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082fc:	d010      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80082fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008302:	d816      	bhi.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008304:	2b00      	cmp	r3, #0
 8008306:	d01d      	beq.n	8008344 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8008308:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800830c:	d111      	bne.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	3304      	adds	r3, #4
 8008312:	2101      	movs	r1, #1
 8008314:	4618      	mov	r0, r3
 8008316:	f000 ff7d 	bl	8009214 <RCCEx_PLL2_Config>
 800831a:	4603      	mov	r3, r0
 800831c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800831e:	e012      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	3324      	adds	r3, #36	; 0x24
 8008324:	2101      	movs	r1, #1
 8008326:	4618      	mov	r0, r3
 8008328:	f001 f826 	bl	8009378 <RCCEx_PLL3_Config>
 800832c:	4603      	mov	r3, r0
 800832e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008330:	e009      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	75fb      	strb	r3, [r7, #23]
      break;
 8008336:	e006      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008338:	bf00      	nop
 800833a:	e004      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800833c:	bf00      	nop
 800833e:	e002      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008340:	bf00      	nop
 8008342:	e000      	b.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8008344:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008346:	7dfb      	ldrb	r3, [r7, #23]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10a      	bne.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800834c:	4b2b      	ldr	r3, [pc, #172]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800834e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008350:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800835a:	4928      	ldr	r1, [pc, #160]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800835c:	4313      	orrs	r3, r2
 800835e:	658b      	str	r3, [r1, #88]	; 0x58
 8008360:	e001      	b.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008362:	7dfb      	ldrb	r3, [r7, #23]
 8008364:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d02f      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008376:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800837a:	d00e      	beq.n	800839a <HAL_RCCEx_PeriphCLKConfig+0x582>
 800837c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008380:	d814      	bhi.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008382:	2b00      	cmp	r3, #0
 8008384:	d015      	beq.n	80083b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800838a:	d10f      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800838c:	4b1b      	ldr	r3, [pc, #108]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008390:	4a1a      	ldr	r2, [pc, #104]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8008392:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008396:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008398:	e00c      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	3304      	adds	r3, #4
 800839e:	2101      	movs	r1, #1
 80083a0:	4618      	mov	r0, r3
 80083a2:	f000 ff37 	bl	8009214 <RCCEx_PLL2_Config>
 80083a6:	4603      	mov	r3, r0
 80083a8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80083aa:	e003      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	75fb      	strb	r3, [r7, #23]
      break;
 80083b0:	e000      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80083b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d109      	bne.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80083ba:	4b10      	ldr	r3, [pc, #64]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80083bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c6:	490d      	ldr	r1, [pc, #52]	; (80083fc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80083c8:	4313      	orrs	r3, r2
 80083ca:	650b      	str	r3, [r1, #80]	; 0x50
 80083cc:	e001      	b.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d033      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e2:	2b03      	cmp	r3, #3
 80083e4:	d81c      	bhi.n	8008420 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80083e6:	a201      	add	r2, pc, #4	; (adr r2, 80083ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80083e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ec:	08008427 	.word	0x08008427
 80083f0:	08008401 	.word	0x08008401
 80083f4:	0800840f 	.word	0x0800840f
 80083f8:	08008427 	.word	0x08008427
 80083fc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008400:	4bb8      	ldr	r3, [pc, #736]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008404:	4ab7      	ldr	r2, [pc, #732]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800840a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800840c:	e00c      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3304      	adds	r3, #4
 8008412:	2102      	movs	r1, #2
 8008414:	4618      	mov	r0, r3
 8008416:	f000 fefd 	bl	8009214 <RCCEx_PLL2_Config>
 800841a:	4603      	mov	r3, r0
 800841c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800841e:	e003      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	75fb      	strb	r3, [r7, #23]
      break;
 8008424:	e000      	b.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008426:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008428:	7dfb      	ldrb	r3, [r7, #23]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d109      	bne.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800842e:	4bad      	ldr	r3, [pc, #692]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008432:	f023 0203 	bic.w	r2, r3, #3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800843a:	49aa      	ldr	r1, [pc, #680]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800843c:	4313      	orrs	r3, r2
 800843e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008440:	e001      	b.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008442:	7dfb      	ldrb	r3, [r7, #23]
 8008444:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800844e:	2b00      	cmp	r3, #0
 8008450:	f000 8086 	beq.w	8008560 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008454:	4ba4      	ldr	r3, [pc, #656]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4aa3      	ldr	r2, [pc, #652]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800845a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800845e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008460:	f7fb fec2 	bl	80041e8 <HAL_GetTick>
 8008464:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008466:	e009      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008468:	f7fb febe 	bl	80041e8 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	2b64      	cmp	r3, #100	; 0x64
 8008474:	d902      	bls.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	75fb      	strb	r3, [r7, #23]
        break;
 800847a:	e005      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800847c:	4b9a      	ldr	r3, [pc, #616]	; (80086e8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0ef      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008488:	7dfb      	ldrb	r3, [r7, #23]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d166      	bne.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800848e:	4b95      	ldr	r3, [pc, #596]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008490:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008498:	4053      	eors	r3, r2
 800849a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d013      	beq.n	80084ca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084a2:	4b90      	ldr	r3, [pc, #576]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084aa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80084ac:	4b8d      	ldr	r3, [pc, #564]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b0:	4a8c      	ldr	r2, [pc, #560]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084b6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80084b8:	4b8a      	ldr	r3, [pc, #552]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084bc:	4a89      	ldr	r2, [pc, #548]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084c2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80084c4:	4a87      	ldr	r2, [pc, #540]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80084d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084d4:	d115      	bne.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084d6:	f7fb fe87 	bl	80041e8 <HAL_GetTick>
 80084da:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084dc:	e00b      	b.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084de:	f7fb fe83 	bl	80041e8 <HAL_GetTick>
 80084e2:	4602      	mov	r2, r0
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	1ad3      	subs	r3, r2, r3
 80084e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d902      	bls.n	80084f6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80084f0:	2303      	movs	r3, #3
 80084f2:	75fb      	strb	r3, [r7, #23]
            break;
 80084f4:	e005      	b.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80084f6:	4b7b      	ldr	r3, [pc, #492]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80084f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d0ed      	beq.n	80084de <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d126      	bne.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800850e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008516:	d10d      	bne.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008518:	4b72      	ldr	r3, [pc, #456]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008526:	0919      	lsrs	r1, r3, #4
 8008528:	4b70      	ldr	r3, [pc, #448]	; (80086ec <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800852a:	400b      	ands	r3, r1
 800852c:	496d      	ldr	r1, [pc, #436]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800852e:	4313      	orrs	r3, r2
 8008530:	610b      	str	r3, [r1, #16]
 8008532:	e005      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008534:	4b6b      	ldr	r3, [pc, #428]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	4a6a      	ldr	r2, [pc, #424]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800853a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800853e:	6113      	str	r3, [r2, #16]
 8008540:	4b68      	ldr	r3, [pc, #416]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008542:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800854a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800854e:	4965      	ldr	r1, [pc, #404]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008550:	4313      	orrs	r3, r2
 8008552:	670b      	str	r3, [r1, #112]	; 0x70
 8008554:	e004      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008556:	7dfb      	ldrb	r3, [r7, #23]
 8008558:	75bb      	strb	r3, [r7, #22]
 800855a:	e001      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855c:	7dfb      	ldrb	r3, [r7, #23]
 800855e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b00      	cmp	r3, #0
 800856a:	d07e      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008570:	2b28      	cmp	r3, #40	; 0x28
 8008572:	d867      	bhi.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008574:	a201      	add	r2, pc, #4	; (adr r2, 800857c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857a:	bf00      	nop
 800857c:	0800864b 	.word	0x0800864b
 8008580:	08008645 	.word	0x08008645
 8008584:	08008645 	.word	0x08008645
 8008588:	08008645 	.word	0x08008645
 800858c:	08008645 	.word	0x08008645
 8008590:	08008645 	.word	0x08008645
 8008594:	08008645 	.word	0x08008645
 8008598:	08008645 	.word	0x08008645
 800859c:	08008621 	.word	0x08008621
 80085a0:	08008645 	.word	0x08008645
 80085a4:	08008645 	.word	0x08008645
 80085a8:	08008645 	.word	0x08008645
 80085ac:	08008645 	.word	0x08008645
 80085b0:	08008645 	.word	0x08008645
 80085b4:	08008645 	.word	0x08008645
 80085b8:	08008645 	.word	0x08008645
 80085bc:	08008633 	.word	0x08008633
 80085c0:	08008645 	.word	0x08008645
 80085c4:	08008645 	.word	0x08008645
 80085c8:	08008645 	.word	0x08008645
 80085cc:	08008645 	.word	0x08008645
 80085d0:	08008645 	.word	0x08008645
 80085d4:	08008645 	.word	0x08008645
 80085d8:	08008645 	.word	0x08008645
 80085dc:	0800864b 	.word	0x0800864b
 80085e0:	08008645 	.word	0x08008645
 80085e4:	08008645 	.word	0x08008645
 80085e8:	08008645 	.word	0x08008645
 80085ec:	08008645 	.word	0x08008645
 80085f0:	08008645 	.word	0x08008645
 80085f4:	08008645 	.word	0x08008645
 80085f8:	08008645 	.word	0x08008645
 80085fc:	0800864b 	.word	0x0800864b
 8008600:	08008645 	.word	0x08008645
 8008604:	08008645 	.word	0x08008645
 8008608:	08008645 	.word	0x08008645
 800860c:	08008645 	.word	0x08008645
 8008610:	08008645 	.word	0x08008645
 8008614:	08008645 	.word	0x08008645
 8008618:	08008645 	.word	0x08008645
 800861c:	0800864b 	.word	0x0800864b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3304      	adds	r3, #4
 8008624:	2101      	movs	r1, #1
 8008626:	4618      	mov	r0, r3
 8008628:	f000 fdf4 	bl	8009214 <RCCEx_PLL2_Config>
 800862c:	4603      	mov	r3, r0
 800862e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008630:	e00c      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	3324      	adds	r3, #36	; 0x24
 8008636:	2101      	movs	r1, #1
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fe9d 	bl	8009378 <RCCEx_PLL3_Config>
 800863e:	4603      	mov	r3, r0
 8008640:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008642:	e003      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	75fb      	strb	r3, [r7, #23]
      break;
 8008648:	e000      	b.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800864a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d109      	bne.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008652:	4b24      	ldr	r3, [pc, #144]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008656:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800865e:	4921      	ldr	r1, [pc, #132]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8008660:	4313      	orrs	r3, r2
 8008662:	654b      	str	r3, [r1, #84]	; 0x54
 8008664:	e001      	b.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008666:	7dfb      	ldrb	r3, [r7, #23]
 8008668:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d03e      	beq.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800867a:	2b05      	cmp	r3, #5
 800867c:	d820      	bhi.n	80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800867e:	a201      	add	r2, pc, #4	; (adr r2, 8008684 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8008680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008684:	080086c7 	.word	0x080086c7
 8008688:	0800869d 	.word	0x0800869d
 800868c:	080086af 	.word	0x080086af
 8008690:	080086c7 	.word	0x080086c7
 8008694:	080086c7 	.word	0x080086c7
 8008698:	080086c7 	.word	0x080086c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	3304      	adds	r3, #4
 80086a0:	2101      	movs	r1, #1
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 fdb6 	bl	8009214 <RCCEx_PLL2_Config>
 80086a8:	4603      	mov	r3, r0
 80086aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80086ac:	e00c      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	3324      	adds	r3, #36	; 0x24
 80086b2:	2101      	movs	r1, #1
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 fe5f 	bl	8009378 <RCCEx_PLL3_Config>
 80086ba:	4603      	mov	r3, r0
 80086bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80086be:	e003      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	75fb      	strb	r3, [r7, #23]
      break;
 80086c4:	e000      	b.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80086c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086c8:	7dfb      	ldrb	r3, [r7, #23]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d110      	bne.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80086ce:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d2:	f023 0207 	bic.w	r2, r3, #7
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086da:	4902      	ldr	r1, [pc, #8]	; (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80086dc:	4313      	orrs	r3, r2
 80086de:	654b      	str	r3, [r1, #84]	; 0x54
 80086e0:	e008      	b.n	80086f4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80086e2:	bf00      	nop
 80086e4:	58024400 	.word	0x58024400
 80086e8:	58024800 	.word	0x58024800
 80086ec:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086f0:	7dfb      	ldrb	r3, [r7, #23]
 80086f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 0304 	and.w	r3, r3, #4
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d039      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008706:	2b05      	cmp	r3, #5
 8008708:	d820      	bhi.n	800874c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800870a:	a201      	add	r2, pc, #4	; (adr r2, 8008710 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800870c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008710:	08008753 	.word	0x08008753
 8008714:	08008729 	.word	0x08008729
 8008718:	0800873b 	.word	0x0800873b
 800871c:	08008753 	.word	0x08008753
 8008720:	08008753 	.word	0x08008753
 8008724:	08008753 	.word	0x08008753
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	3304      	adds	r3, #4
 800872c:	2101      	movs	r1, #1
 800872e:	4618      	mov	r0, r3
 8008730:	f000 fd70 	bl	8009214 <RCCEx_PLL2_Config>
 8008734:	4603      	mov	r3, r0
 8008736:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008738:	e00c      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	3324      	adds	r3, #36	; 0x24
 800873e:	2101      	movs	r1, #1
 8008740:	4618      	mov	r0, r3
 8008742:	f000 fe19 	bl	8009378 <RCCEx_PLL3_Config>
 8008746:	4603      	mov	r3, r0
 8008748:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800874a:	e003      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	75fb      	strb	r3, [r7, #23]
      break;
 8008750:	e000      	b.n	8008754 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8008752:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008754:	7dfb      	ldrb	r3, [r7, #23]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d10a      	bne.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800875a:	4bb7      	ldr	r3, [pc, #732]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800875c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800875e:	f023 0207 	bic.w	r2, r3, #7
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008768:	49b3      	ldr	r1, [pc, #716]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800876a:	4313      	orrs	r3, r2
 800876c:	658b      	str	r3, [r1, #88]	; 0x58
 800876e:	e001      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008770:	7dfb      	ldrb	r3, [r7, #23]
 8008772:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f003 0320 	and.w	r3, r3, #32
 800877c:	2b00      	cmp	r3, #0
 800877e:	d04b      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800878a:	d02e      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800878c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008790:	d828      	bhi.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8008792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008796:	d02a      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800879c:	d822      	bhi.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800879e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087a2:	d026      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80087a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80087a8:	d81c      	bhi.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80087aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087ae:	d010      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80087b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087b4:	d816      	bhi.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d01d      	beq.n	80087f6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80087ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087be:	d111      	bne.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	3304      	adds	r3, #4
 80087c4:	2100      	movs	r1, #0
 80087c6:	4618      	mov	r0, r3
 80087c8:	f000 fd24 	bl	8009214 <RCCEx_PLL2_Config>
 80087cc:	4603      	mov	r3, r0
 80087ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80087d0:	e012      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	3324      	adds	r3, #36	; 0x24
 80087d6:	2102      	movs	r1, #2
 80087d8:	4618      	mov	r0, r3
 80087da:	f000 fdcd 	bl	8009378 <RCCEx_PLL3_Config>
 80087de:	4603      	mov	r3, r0
 80087e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80087e2:	e009      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087e4:	2301      	movs	r3, #1
 80087e6:	75fb      	strb	r3, [r7, #23]
      break;
 80087e8:	e006      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80087ea:	bf00      	nop
 80087ec:	e004      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80087ee:	bf00      	nop
 80087f0:	e002      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80087f2:	bf00      	nop
 80087f4:	e000      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80087f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087f8:	7dfb      	ldrb	r3, [r7, #23]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10a      	bne.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087fe:	4b8e      	ldr	r3, [pc, #568]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008802:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800880c:	498a      	ldr	r1, [pc, #552]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800880e:	4313      	orrs	r3, r2
 8008810:	654b      	str	r3, [r1, #84]	; 0x54
 8008812:	e001      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008814:	7dfb      	ldrb	r3, [r7, #23]
 8008816:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008820:	2b00      	cmp	r3, #0
 8008822:	d04b      	beq.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800882a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800882e:	d02e      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8008830:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008834:	d828      	bhi.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008836:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800883a:	d02a      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800883c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008840:	d822      	bhi.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8008842:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008846:	d026      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008848:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800884c:	d81c      	bhi.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800884e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008852:	d010      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8008854:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008858:	d816      	bhi.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800885a:	2b00      	cmp	r3, #0
 800885c:	d01d      	beq.n	800889a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800885e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008862:	d111      	bne.n	8008888 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	3304      	adds	r3, #4
 8008868:	2100      	movs	r1, #0
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fcd2 	bl	8009214 <RCCEx_PLL2_Config>
 8008870:	4603      	mov	r3, r0
 8008872:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008874:	e012      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	3324      	adds	r3, #36	; 0x24
 800887a:	2102      	movs	r1, #2
 800887c:	4618      	mov	r0, r3
 800887e:	f000 fd7b 	bl	8009378 <RCCEx_PLL3_Config>
 8008882:	4603      	mov	r3, r0
 8008884:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008886:	e009      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	75fb      	strb	r3, [r7, #23]
      break;
 800888c:	e006      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800888e:	bf00      	nop
 8008890:	e004      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008892:	bf00      	nop
 8008894:	e002      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8008896:	bf00      	nop
 8008898:	e000      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800889a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800889c:	7dfb      	ldrb	r3, [r7, #23]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10a      	bne.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80088a2:	4b65      	ldr	r3, [pc, #404]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088b0:	4961      	ldr	r1, [pc, #388]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80088b2:	4313      	orrs	r3, r2
 80088b4:	658b      	str	r3, [r1, #88]	; 0x58
 80088b6:	e001      	b.n	80088bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b8:	7dfb      	ldrb	r3, [r7, #23]
 80088ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d04b      	beq.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80088ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80088d2:	d02e      	beq.n	8008932 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80088d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80088d8:	d828      	bhi.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80088da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088de:	d02a      	beq.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80088e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088e4:	d822      	bhi.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80088e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80088ea:	d026      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80088ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80088f0:	d81c      	bhi.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80088f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088f6:	d010      	beq.n	800891a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80088f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088fc:	d816      	bhi.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d01d      	beq.n	800893e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008906:	d111      	bne.n	800892c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	3304      	adds	r3, #4
 800890c:	2100      	movs	r1, #0
 800890e:	4618      	mov	r0, r3
 8008910:	f000 fc80 	bl	8009214 <RCCEx_PLL2_Config>
 8008914:	4603      	mov	r3, r0
 8008916:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008918:	e012      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3324      	adds	r3, #36	; 0x24
 800891e:	2102      	movs	r1, #2
 8008920:	4618      	mov	r0, r3
 8008922:	f000 fd29 	bl	8009378 <RCCEx_PLL3_Config>
 8008926:	4603      	mov	r3, r0
 8008928:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800892a:	e009      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800892c:	2301      	movs	r3, #1
 800892e:	75fb      	strb	r3, [r7, #23]
      break;
 8008930:	e006      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008932:	bf00      	nop
 8008934:	e004      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8008936:	bf00      	nop
 8008938:	e002      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800893a:	bf00      	nop
 800893c:	e000      	b.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800893e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008940:	7dfb      	ldrb	r3, [r7, #23]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10a      	bne.n	800895c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008946:	4b3c      	ldr	r3, [pc, #240]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800894a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008954:	4938      	ldr	r1, [pc, #224]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008956:	4313      	orrs	r3, r2
 8008958:	658b      	str	r3, [r1, #88]	; 0x58
 800895a:	e001      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800895c:	7dfb      	ldrb	r3, [r7, #23]
 800895e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	f003 0308 	and.w	r3, r3, #8
 8008968:	2b00      	cmp	r3, #0
 800896a:	d01a      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008976:	d10a      	bne.n	800898e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3324      	adds	r3, #36	; 0x24
 800897c:	2102      	movs	r1, #2
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fcfa 	bl	8009378 <RCCEx_PLL3_Config>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d001      	beq.n	800898e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800898e:	4b2a      	ldr	r3, [pc, #168]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8008990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008992:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800899c:	4926      	ldr	r1, [pc, #152]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800899e:	4313      	orrs	r3, r2
 80089a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0310 	and.w	r3, r3, #16
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d01a      	beq.n	80089e4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089b8:	d10a      	bne.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	3324      	adds	r3, #36	; 0x24
 80089be:	2102      	movs	r1, #2
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 fcd9 	bl	8009378 <RCCEx_PLL3_Config>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d001      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80089d0:	4b19      	ldr	r3, [pc, #100]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80089d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089de:	4916      	ldr	r1, [pc, #88]	; (8008a38 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d036      	beq.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80089f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80089fa:	d01f      	beq.n	8008a3c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80089fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a00:	d817      	bhi.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8008a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a0a:	d009      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8008a0c:	e011      	b.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	3304      	adds	r3, #4
 8008a12:	2100      	movs	r1, #0
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fbfd 	bl	8009214 <RCCEx_PLL2_Config>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008a1e:	e00e      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	3324      	adds	r3, #36	; 0x24
 8008a24:	2102      	movs	r1, #2
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 fca6 	bl	8009378 <RCCEx_PLL3_Config>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008a30:	e005      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	75fb      	strb	r3, [r7, #23]
      break;
 8008a36:	e002      	b.n	8008a3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8008a38:	58024400 	.word	0x58024400
      break;
 8008a3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a3e:	7dfb      	ldrb	r3, [r7, #23]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d10a      	bne.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008a44:	4b93      	ldr	r3, [pc, #588]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008a52:	4990      	ldr	r1, [pc, #576]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	658b      	str	r3, [r1, #88]	; 0x58
 8008a58:	e001      	b.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a5a:	7dfb      	ldrb	r3, [r7, #23]
 8008a5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d033      	beq.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a74:	d01c      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8008a76:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008a7a:	d816      	bhi.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8008a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a80:	d003      	beq.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8008a82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a86:	d007      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8008a88:	e00f      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a8a:	4b82      	ldr	r3, [pc, #520]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8e:	4a81      	ldr	r2, [pc, #516]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008a96:	e00c      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3324      	adds	r3, #36	; 0x24
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f000 fc6a 	bl	8009378 <RCCEx_PLL3_Config>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008aa8:	e003      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	75fb      	strb	r3, [r7, #23]
      break;
 8008aae:	e000      	b.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8008ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10a      	bne.n	8008ace <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ab8:	4b76      	ldr	r3, [pc, #472]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008abc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ac6:	4973      	ldr	r1, [pc, #460]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	654b      	str	r3, [r1, #84]	; 0x54
 8008acc:	e001      	b.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ace:	7dfb      	ldrb	r3, [r7, #23]
 8008ad0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d029      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8008ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aea:	d007      	beq.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8008aec:	e00f      	b.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008aee:	4b69      	ldr	r3, [pc, #420]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af2:	4a68      	ldr	r2, [pc, #416]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008af8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008afa:	e00b      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	3304      	adds	r3, #4
 8008b00:	2102      	movs	r1, #2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 fb86 	bl	8009214 <RCCEx_PLL2_Config>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008b0c:	e002      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8008b0e:	2301      	movs	r3, #1
 8008b10:	75fb      	strb	r3, [r7, #23]
      break;
 8008b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d109      	bne.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008b1a:	4b5e      	ldr	r3, [pc, #376]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b26:	495b      	ldr	r1, [pc, #364]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008b2c:	e001      	b.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00a      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3324      	adds	r3, #36	; 0x24
 8008b42:	2102      	movs	r1, #2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f000 fc17 	bl	8009378 <RCCEx_PLL3_Config>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d001      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d030      	beq.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008b64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b68:	d017      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8008b6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b6e:	d811      	bhi.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b74:	d013      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008b76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b7a:	d80b      	bhi.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d010      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008b80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b84:	d106      	bne.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b86:	4b43      	ldr	r3, [pc, #268]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b8a:	4a42      	ldr	r2, [pc, #264]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008b8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008b92:	e007      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b94:	2301      	movs	r3, #1
 8008b96:	75fb      	strb	r3, [r7, #23]
      break;
 8008b98:	e004      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008b9a:	bf00      	nop
 8008b9c:	e002      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008b9e:	bf00      	nop
 8008ba0:	e000      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8008ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d109      	bne.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008baa:	4b3a      	ldr	r3, [pc, #232]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bb6:	4937      	ldr	r1, [pc, #220]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	654b      	str	r3, [r1, #84]	; 0x54
 8008bbc:	e001      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d008      	beq.n	8008be0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008bce:	4b31      	ldr	r3, [pc, #196]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bda:	492e      	ldr	r1, [pc, #184]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d009      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008bec:	4b29      	ldr	r3, [pc, #164]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008bfa:	4926      	ldr	r1, [pc, #152]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d008      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008c0c:	4b21      	ldr	r3, [pc, #132]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c10:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c18:	491e      	ldr	r1, [pc, #120]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00d      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008c2a:	4b1a      	ldr	r3, [pc, #104]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	4a19      	ldr	r2, [pc, #100]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c30:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c34:	6113      	str	r3, [r2, #16]
 8008c36:	4b17      	ldr	r3, [pc, #92]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c38:	691a      	ldr	r2, [r3, #16]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008c40:	4914      	ldr	r1, [pc, #80]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	da08      	bge.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008c4e:	4b11      	ldr	r3, [pc, #68]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c52:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c5a:	490e      	ldr	r1, [pc, #56]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d009      	beq.n	8008c80 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008c6c:	4b09      	ldr	r3, [pc, #36]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c7a:	4906      	ldr	r1, [pc, #24]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008c80:	7dbb      	ldrb	r3, [r7, #22]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d101      	bne.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8008c86:	2300      	movs	r3, #0
 8008c88:	e000      	b.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3718      	adds	r7, #24
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	58024400 	.word	0x58024400

08008c98 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008c9c:	f7ff f860 	bl	8007d60 <HAL_RCC_GetHCLKFreq>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	4b06      	ldr	r3, [pc, #24]	; (8008cbc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	091b      	lsrs	r3, r3, #4
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	4904      	ldr	r1, [pc, #16]	; (8008cc0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008cae:	5ccb      	ldrb	r3, [r1, r3]
 8008cb0:	f003 031f 	and.w	r3, r3, #31
 8008cb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	58024400 	.word	0x58024400
 8008cc0:	0800f9f8 	.word	0x0800f9f8

08008cc4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b089      	sub	sp, #36	; 0x24
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ccc:	4ba1      	ldr	r3, [pc, #644]	; (8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cd0:	f003 0303 	and.w	r3, r3, #3
 8008cd4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008cd6:	4b9f      	ldr	r3, [pc, #636]	; (8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cda:	0b1b      	lsrs	r3, r3, #12
 8008cdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ce0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008ce2:	4b9c      	ldr	r3, [pc, #624]	; (8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	091b      	lsrs	r3, r3, #4
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008cee:	4b99      	ldr	r3, [pc, #612]	; (8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf2:	08db      	lsrs	r3, r3, #3
 8008cf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	fb02 f303 	mul.w	r3, r2, r3
 8008cfe:	ee07 3a90 	vmov	s15, r3
 8008d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 8111 	beq.w	8008f34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	2b02      	cmp	r3, #2
 8008d16:	f000 8083 	beq.w	8008e20 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	2b02      	cmp	r3, #2
 8008d1e:	f200 80a1 	bhi.w	8008e64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d003      	beq.n	8008d30 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d056      	beq.n	8008ddc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008d2e:	e099      	b.n	8008e64 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d30:	4b88      	ldr	r3, [pc, #544]	; (8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0320 	and.w	r3, r3, #32
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d02d      	beq.n	8008d98 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008d3c:	4b85      	ldr	r3, [pc, #532]	; (8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	08db      	lsrs	r3, r3, #3
 8008d42:	f003 0303 	and.w	r3, r3, #3
 8008d46:	4a84      	ldr	r2, [pc, #528]	; (8008f58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008d48:	fa22 f303 	lsr.w	r3, r2, r3
 8008d4c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	ee07 3a90 	vmov	s15, r3
 8008d54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d66:	4b7b      	ldr	r3, [pc, #492]	; (8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d76:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008f5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d92:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008d96:	e087      	b.n	8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	ee07 3a90 	vmov	s15, r3
 8008d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008f60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008daa:	4b6a      	ldr	r3, [pc, #424]	; (8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db2:	ee07 3a90 	vmov	s15, r3
 8008db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dbe:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008f5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dd6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008dda:	e065      	b.n	8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	ee07 3a90 	vmov	s15, r3
 8008de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008de6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dee:	4b59      	ldr	r3, [pc, #356]	; (8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df6:	ee07 3a90 	vmov	s15, r3
 8008dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e02:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008f5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e1a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e1e:	e043      	b.n	8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	ee07 3a90 	vmov	s15, r3
 8008e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008f68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e32:	4b48      	ldr	r3, [pc, #288]	; (8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e3a:	ee07 3a90 	vmov	s15, r3
 8008e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e46:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008f5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e5e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008e62:	e021      	b.n	8008ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	ee07 3a90 	vmov	s15, r3
 8008e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008f64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e76:	4b37      	ldr	r3, [pc, #220]	; (8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e7e:	ee07 3a90 	vmov	s15, r3
 8008e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8008e8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008f5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ea2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ea6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008ea8:	4b2a      	ldr	r3, [pc, #168]	; (8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eac:	0a5b      	lsrs	r3, r3, #9
 8008eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eb2:	ee07 3a90 	vmov	s15, r3
 8008eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ec2:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008eca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ece:	ee17 2a90 	vmov	r2, s15
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008ed6:	4b1f      	ldr	r3, [pc, #124]	; (8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eda:	0c1b      	lsrs	r3, r3, #16
 8008edc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ee0:	ee07 3a90 	vmov	s15, r3
 8008ee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008eec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008ef0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008efc:	ee17 2a90 	vmov	r2, s15
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008f04:	4b13      	ldr	r3, [pc, #76]	; (8008f54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f08:	0e1b      	lsrs	r3, r3, #24
 8008f0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f0e:	ee07 3a90 	vmov	s15, r3
 8008f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008f1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f2a:	ee17 2a90 	vmov	r2, s15
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008f32:	e008      	b.n	8008f46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	609a      	str	r2, [r3, #8]
}
 8008f46:	bf00      	nop
 8008f48:	3724      	adds	r7, #36	; 0x24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	58024400 	.word	0x58024400
 8008f58:	03d09000 	.word	0x03d09000
 8008f5c:	46000000 	.word	0x46000000
 8008f60:	4c742400 	.word	0x4c742400
 8008f64:	4a742400 	.word	0x4a742400
 8008f68:	4c371b00 	.word	0x4c371b00

08008f6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b089      	sub	sp, #36	; 0x24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008f74:	4ba1      	ldr	r3, [pc, #644]	; (80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f78:	f003 0303 	and.w	r3, r3, #3
 8008f7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008f7e:	4b9f      	ldr	r3, [pc, #636]	; (80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f82:	0d1b      	lsrs	r3, r3, #20
 8008f84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008f8a:	4b9c      	ldr	r3, [pc, #624]	; (80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8e:	0a1b      	lsrs	r3, r3, #8
 8008f90:	f003 0301 	and.w	r3, r3, #1
 8008f94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008f96:	4b99      	ldr	r3, [pc, #612]	; (80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f9a:	08db      	lsrs	r3, r3, #3
 8008f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	fb02 f303 	mul.w	r3, r2, r3
 8008fa6:	ee07 3a90 	vmov	s15, r3
 8008faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 8111 	beq.w	80091dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	2b02      	cmp	r3, #2
 8008fbe:	f000 8083 	beq.w	80090c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	f200 80a1 	bhi.w	800910c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	2b01      	cmp	r3, #1
 8008fd4:	d056      	beq.n	8009084 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008fd6:	e099      	b.n	800910c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fd8:	4b88      	ldr	r3, [pc, #544]	; (80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0320 	and.w	r3, r3, #32
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d02d      	beq.n	8009040 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fe4:	4b85      	ldr	r3, [pc, #532]	; (80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	08db      	lsrs	r3, r3, #3
 8008fea:	f003 0303 	and.w	r3, r3, #3
 8008fee:	4a84      	ldr	r2, [pc, #528]	; (8009200 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8008ff4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	ee07 3a90 	vmov	s15, r3
 8008ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	ee07 3a90 	vmov	s15, r3
 8009006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800900e:	4b7b      	ldr	r3, [pc, #492]	; (80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009016:	ee07 3a90 	vmov	s15, r3
 800901a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800901e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009022:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009204 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800902a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800902e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800903a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800903e:	e087      	b.n	8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	ee07 3a90 	vmov	s15, r3
 8009046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009208 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800904e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009052:	4b6a      	ldr	r3, [pc, #424]	; (80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800905a:	ee07 3a90 	vmov	s15, r3
 800905e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009062:	ed97 6a03 	vldr	s12, [r7, #12]
 8009066:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009204 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800906a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800906e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800907a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800907e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009082:	e065      	b.n	8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	ee07 3a90 	vmov	s15, r3
 800908a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800908e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800920c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009096:	4b59      	ldr	r3, [pc, #356]	; (80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800909e:	ee07 3a90 	vmov	s15, r3
 80090a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80090aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009204 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80090be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80090c6:	e043      	b.n	8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	ee07 3a90 	vmov	s15, r3
 80090ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009210 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80090d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80090da:	4b48      	ldr	r3, [pc, #288]	; (80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090e2:	ee07 3a90 	vmov	s15, r3
 80090e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80090ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80090ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009204 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80090f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80090f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80090fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009106:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800910a:	e021      	b.n	8009150 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009116:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800920c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800911a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800911e:	4b37      	ldr	r3, [pc, #220]	; (80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009126:	ee07 3a90 	vmov	s15, r3
 800912a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009132:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009204 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800913a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800913e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800914a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800914e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009150:	4b2a      	ldr	r3, [pc, #168]	; (80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009154:	0a5b      	lsrs	r3, r3, #9
 8009156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800915a:	ee07 3a90 	vmov	s15, r3
 800915e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009162:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009166:	ee37 7a87 	vadd.f32	s14, s15, s14
 800916a:	edd7 6a07 	vldr	s13, [r7, #28]
 800916e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009176:	ee17 2a90 	vmov	r2, s15
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800917e:	4b1f      	ldr	r3, [pc, #124]	; (80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009182:	0c1b      	lsrs	r3, r3, #16
 8009184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009188:	ee07 3a90 	vmov	s15, r3
 800918c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009190:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009194:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009198:	edd7 6a07 	vldr	s13, [r7, #28]
 800919c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091a4:	ee17 2a90 	vmov	r2, s15
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80091ac:	4b13      	ldr	r3, [pc, #76]	; (80091fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80091ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b0:	0e1b      	lsrs	r3, r3, #24
 80091b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091b6:	ee07 3a90 	vmov	s15, r3
 80091ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80091c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80091ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80091ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80091d2:	ee17 2a90 	vmov	r2, s15
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80091da:	e008      	b.n	80091ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2200      	movs	r2, #0
 80091e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2200      	movs	r2, #0
 80091e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	609a      	str	r2, [r3, #8]
}
 80091ee:	bf00      	nop
 80091f0:	3724      	adds	r7, #36	; 0x24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f8:	4770      	bx	lr
 80091fa:	bf00      	nop
 80091fc:	58024400 	.word	0x58024400
 8009200:	03d09000 	.word	0x03d09000
 8009204:	46000000 	.word	0x46000000
 8009208:	4c742400 	.word	0x4c742400
 800920c:	4a742400 	.word	0x4a742400
 8009210:	4c371b00 	.word	0x4c371b00

08009214 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800921e:	2300      	movs	r3, #0
 8009220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009222:	4b53      	ldr	r3, [pc, #332]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 8009224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009226:	f003 0303 	and.w	r3, r3, #3
 800922a:	2b03      	cmp	r3, #3
 800922c:	d101      	bne.n	8009232 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e099      	b.n	8009366 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009232:	4b4f      	ldr	r3, [pc, #316]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4a4e      	ldr	r2, [pc, #312]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 8009238:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800923c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800923e:	f7fa ffd3 	bl	80041e8 <HAL_GetTick>
 8009242:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009244:	e008      	b.n	8009258 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009246:	f7fa ffcf 	bl	80041e8 <HAL_GetTick>
 800924a:	4602      	mov	r2, r0
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	1ad3      	subs	r3, r2, r3
 8009250:	2b02      	cmp	r3, #2
 8009252:	d901      	bls.n	8009258 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e086      	b.n	8009366 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009258:	4b45      	ldr	r3, [pc, #276]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1f0      	bne.n	8009246 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009264:	4b42      	ldr	r3, [pc, #264]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 8009266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009268:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	031b      	lsls	r3, r3, #12
 8009272:	493f      	ldr	r1, [pc, #252]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 8009274:	4313      	orrs	r3, r2
 8009276:	628b      	str	r3, [r1, #40]	; 0x28
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	3b01      	subs	r3, #1
 800927e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	689b      	ldr	r3, [r3, #8]
 8009286:	3b01      	subs	r3, #1
 8009288:	025b      	lsls	r3, r3, #9
 800928a:	b29b      	uxth	r3, r3
 800928c:	431a      	orrs	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	68db      	ldr	r3, [r3, #12]
 8009292:	3b01      	subs	r3, #1
 8009294:	041b      	lsls	r3, r3, #16
 8009296:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800929a:	431a      	orrs	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	3b01      	subs	r3, #1
 80092a2:	061b      	lsls	r3, r3, #24
 80092a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80092a8:	4931      	ldr	r1, [pc, #196]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 80092aa:	4313      	orrs	r3, r2
 80092ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80092ae:	4b30      	ldr	r3, [pc, #192]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 80092b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	492d      	ldr	r1, [pc, #180]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 80092bc:	4313      	orrs	r3, r2
 80092be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80092c0:	4b2b      	ldr	r3, [pc, #172]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 80092c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c4:	f023 0220 	bic.w	r2, r3, #32
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	699b      	ldr	r3, [r3, #24]
 80092cc:	4928      	ldr	r1, [pc, #160]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 80092ce:	4313      	orrs	r3, r2
 80092d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80092d2:	4b27      	ldr	r3, [pc, #156]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 80092d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d6:	4a26      	ldr	r2, [pc, #152]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 80092d8:	f023 0310 	bic.w	r3, r3, #16
 80092dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80092de:	4b24      	ldr	r3, [pc, #144]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 80092e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092e2:	4b24      	ldr	r3, [pc, #144]	; (8009374 <RCCEx_PLL2_Config+0x160>)
 80092e4:	4013      	ands	r3, r2
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	69d2      	ldr	r2, [r2, #28]
 80092ea:	00d2      	lsls	r2, r2, #3
 80092ec:	4920      	ldr	r1, [pc, #128]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 80092ee:	4313      	orrs	r3, r2
 80092f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80092f2:	4b1f      	ldr	r3, [pc, #124]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 80092f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092f6:	4a1e      	ldr	r2, [pc, #120]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 80092f8:	f043 0310 	orr.w	r3, r3, #16
 80092fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d106      	bne.n	8009312 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009304:	4b1a      	ldr	r3, [pc, #104]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	4a19      	ldr	r2, [pc, #100]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 800930a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800930e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009310:	e00f      	b.n	8009332 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d106      	bne.n	8009326 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009318:	4b15      	ldr	r3, [pc, #84]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 800931a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931c:	4a14      	ldr	r2, [pc, #80]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 800931e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009322:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009324:	e005      	b.n	8009332 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009326:	4b12      	ldr	r3, [pc, #72]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 8009328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932a:	4a11      	ldr	r2, [pc, #68]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 800932c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009330:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009332:	4b0f      	ldr	r3, [pc, #60]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a0e      	ldr	r2, [pc, #56]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 8009338:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800933c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800933e:	f7fa ff53 	bl	80041e8 <HAL_GetTick>
 8009342:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009344:	e008      	b.n	8009358 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009346:	f7fa ff4f 	bl	80041e8 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	2b02      	cmp	r3, #2
 8009352:	d901      	bls.n	8009358 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009354:	2303      	movs	r3, #3
 8009356:	e006      	b.n	8009366 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009358:	4b05      	ldr	r3, [pc, #20]	; (8009370 <RCCEx_PLL2_Config+0x15c>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009360:	2b00      	cmp	r3, #0
 8009362:	d0f0      	beq.n	8009346 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009364:	7bfb      	ldrb	r3, [r7, #15]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	58024400 	.word	0x58024400
 8009374:	ffff0007 	.word	0xffff0007

08009378 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009382:	2300      	movs	r3, #0
 8009384:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009386:	4b53      	ldr	r3, [pc, #332]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 8009388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	2b03      	cmp	r3, #3
 8009390:	d101      	bne.n	8009396 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	e099      	b.n	80094ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009396:	4b4f      	ldr	r3, [pc, #316]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a4e      	ldr	r2, [pc, #312]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 800939c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093a2:	f7fa ff21 	bl	80041e8 <HAL_GetTick>
 80093a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093a8:	e008      	b.n	80093bc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80093aa:	f7fa ff1d 	bl	80041e8 <HAL_GetTick>
 80093ae:	4602      	mov	r2, r0
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	1ad3      	subs	r3, r2, r3
 80093b4:	2b02      	cmp	r3, #2
 80093b6:	d901      	bls.n	80093bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e086      	b.n	80094ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80093bc:	4b45      	ldr	r3, [pc, #276]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1f0      	bne.n	80093aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80093c8:	4b42      	ldr	r3, [pc, #264]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 80093ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	051b      	lsls	r3, r3, #20
 80093d6:	493f      	ldr	r1, [pc, #252]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 80093d8:	4313      	orrs	r3, r2
 80093da:	628b      	str	r3, [r1, #40]	; 0x28
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	3b01      	subs	r3, #1
 80093e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	3b01      	subs	r3, #1
 80093ec:	025b      	lsls	r3, r3, #9
 80093ee:	b29b      	uxth	r3, r3
 80093f0:	431a      	orrs	r2, r3
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	3b01      	subs	r3, #1
 80093f8:	041b      	lsls	r3, r3, #16
 80093fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80093fe:	431a      	orrs	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	3b01      	subs	r3, #1
 8009406:	061b      	lsls	r3, r3, #24
 8009408:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800940c:	4931      	ldr	r1, [pc, #196]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 800940e:	4313      	orrs	r3, r2
 8009410:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009412:	4b30      	ldr	r3, [pc, #192]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 8009414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009416:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	695b      	ldr	r3, [r3, #20]
 800941e:	492d      	ldr	r1, [pc, #180]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 8009420:	4313      	orrs	r3, r2
 8009422:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009424:	4b2b      	ldr	r3, [pc, #172]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 8009426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009428:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	4928      	ldr	r1, [pc, #160]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 8009432:	4313      	orrs	r3, r2
 8009434:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009436:	4b27      	ldr	r3, [pc, #156]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 8009438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943a:	4a26      	ldr	r2, [pc, #152]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 800943c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009440:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009442:	4b24      	ldr	r3, [pc, #144]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 8009444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009446:	4b24      	ldr	r3, [pc, #144]	; (80094d8 <RCCEx_PLL3_Config+0x160>)
 8009448:	4013      	ands	r3, r2
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	69d2      	ldr	r2, [r2, #28]
 800944e:	00d2      	lsls	r2, r2, #3
 8009450:	4920      	ldr	r1, [pc, #128]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 8009452:	4313      	orrs	r3, r2
 8009454:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009456:	4b1f      	ldr	r3, [pc, #124]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 8009458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800945a:	4a1e      	ldr	r2, [pc, #120]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 800945c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009460:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d106      	bne.n	8009476 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009468:	4b1a      	ldr	r3, [pc, #104]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 800946a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946c:	4a19      	ldr	r2, [pc, #100]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 800946e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009472:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009474:	e00f      	b.n	8009496 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d106      	bne.n	800948a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800947c:	4b15      	ldr	r3, [pc, #84]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 800947e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009480:	4a14      	ldr	r2, [pc, #80]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 8009482:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009486:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009488:	e005      	b.n	8009496 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800948a:	4b12      	ldr	r3, [pc, #72]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 800948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948e:	4a11      	ldr	r2, [pc, #68]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 8009490:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009494:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009496:	4b0f      	ldr	r3, [pc, #60]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a0e      	ldr	r2, [pc, #56]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 800949c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094a2:	f7fa fea1 	bl	80041e8 <HAL_GetTick>
 80094a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094a8:	e008      	b.n	80094bc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80094aa:	f7fa fe9d 	bl	80041e8 <HAL_GetTick>
 80094ae:	4602      	mov	r2, r0
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	1ad3      	subs	r3, r2, r3
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d901      	bls.n	80094bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80094b8:	2303      	movs	r3, #3
 80094ba:	e006      	b.n	80094ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80094bc:	4b05      	ldr	r3, [pc, #20]	; (80094d4 <RCCEx_PLL3_Config+0x15c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d0f0      	beq.n	80094aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80094c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	58024400 	.word	0x58024400
 80094d8:	ffff0007 	.word	0xffff0007

080094dc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e0f1      	b.n	80096d2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	2200      	movs	r2, #0
 80094f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a78      	ldr	r2, [pc, #480]	; (80096dc <HAL_SPI_Init+0x200>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d00f      	beq.n	800951e <HAL_SPI_Init+0x42>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a77      	ldr	r2, [pc, #476]	; (80096e0 <HAL_SPI_Init+0x204>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d00a      	beq.n	800951e <HAL_SPI_Init+0x42>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a75      	ldr	r2, [pc, #468]	; (80096e4 <HAL_SPI_Init+0x208>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d005      	beq.n	800951e <HAL_SPI_Init+0x42>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	2b0f      	cmp	r3, #15
 8009518:	d901      	bls.n	800951e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e0d9      	b.n	80096d2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f8e2 	bl	80096e8 <SPI_GetPacketSize>
 8009524:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a6c      	ldr	r2, [pc, #432]	; (80096dc <HAL_SPI_Init+0x200>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d00c      	beq.n	800954a <HAL_SPI_Init+0x6e>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a6a      	ldr	r2, [pc, #424]	; (80096e0 <HAL_SPI_Init+0x204>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d007      	beq.n	800954a <HAL_SPI_Init+0x6e>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a69      	ldr	r2, [pc, #420]	; (80096e4 <HAL_SPI_Init+0x208>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d002      	beq.n	800954a <HAL_SPI_Init+0x6e>
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b08      	cmp	r3, #8
 8009548:	d811      	bhi.n	800956e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800954e:	4a63      	ldr	r2, [pc, #396]	; (80096dc <HAL_SPI_Init+0x200>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d009      	beq.n	8009568 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a61      	ldr	r2, [pc, #388]	; (80096e0 <HAL_SPI_Init+0x204>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d004      	beq.n	8009568 <HAL_SPI_Init+0x8c>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a60      	ldr	r2, [pc, #384]	; (80096e4 <HAL_SPI_Init+0x208>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d104      	bne.n	8009572 <HAL_SPI_Init+0x96>
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2b10      	cmp	r3, #16
 800956c:	d901      	bls.n	8009572 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e0af      	b.n	80096d2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009578:	b2db      	uxtb	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	d106      	bne.n	800958c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f7f9 fea8 	bl	80032dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2202      	movs	r2, #2
 8009590:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f022 0201 	bic.w	r2, r2, #1
 80095a2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	689b      	ldr	r3, [r3, #8]
 80095aa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80095ae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	699b      	ldr	r3, [r3, #24]
 80095b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095b8:	d119      	bne.n	80095ee <HAL_SPI_Init+0x112>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095c2:	d103      	bne.n	80095cc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d008      	beq.n	80095de <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10c      	bne.n	80095ee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80095d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095dc:	d107      	bne.n	80095ee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80095ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	69da      	ldr	r2, [r3, #28]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095f6:	431a      	orrs	r2, r3
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	431a      	orrs	r2, r3
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009600:	ea42 0103 	orr.w	r1, r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	430a      	orrs	r2, r1
 800960e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	431a      	orrs	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961e:	431a      	orrs	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	431a      	orrs	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	691b      	ldr	r3, [r3, #16]
 800962a:	431a      	orrs	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	695b      	ldr	r3, [r3, #20]
 8009630:	431a      	orrs	r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a1b      	ldr	r3, [r3, #32]
 8009636:	431a      	orrs	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	431a      	orrs	r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009642:	431a      	orrs	r2, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	431a      	orrs	r2, r3
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800964e:	ea42 0103 	orr.w	r1, r2, r3
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d113      	bne.n	800968e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009678:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800968c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 0201 	bic.w	r2, r2, #1
 800969c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00a      	beq.n	80096c0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	430a      	orrs	r2, r1
 80096be:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2201      	movs	r2, #1
 80096cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	40013000 	.word	0x40013000
 80096e0:	40003800 	.word	0x40003800
 80096e4:	40003c00 	.word	0x40003c00

080096e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096f4:	095b      	lsrs	r3, r3, #5
 80096f6:	3301      	adds	r3, #1
 80096f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	3301      	adds	r3, #1
 8009700:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	3307      	adds	r3, #7
 8009706:	08db      	lsrs	r3, r3, #3
 8009708:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009712:	4618      	mov	r0, r3
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr

0800971e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b082      	sub	sp, #8
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d101      	bne.n	8009730 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800972c:	2301      	movs	r3, #1
 800972e:	e049      	b.n	80097c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009736:	b2db      	uxtb	r3, r3
 8009738:	2b00      	cmp	r3, #0
 800973a:	d106      	bne.n	800974a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7f9 fe2f 	bl	80033a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2202      	movs	r2, #2
 800974e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	3304      	adds	r3, #4
 800975a:	4619      	mov	r1, r3
 800975c:	4610      	mov	r0, r2
 800975e:	f000 fd71 	bl	800a244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2201      	movs	r2, #1
 800976e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2201      	movs	r2, #1
 800977e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097c2:	2300      	movs	r3, #0
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b085      	sub	sp, #20
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097da:	b2db      	uxtb	r3, r3
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d001      	beq.n	80097e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80097e0:	2301      	movs	r3, #1
 80097e2:	e054      	b.n	800988e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2202      	movs	r2, #2
 80097e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68da      	ldr	r2, [r3, #12]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f042 0201 	orr.w	r2, r2, #1
 80097fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a26      	ldr	r2, [pc, #152]	; (800989c <HAL_TIM_Base_Start_IT+0xd0>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d022      	beq.n	800984c <HAL_TIM_Base_Start_IT+0x80>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800980e:	d01d      	beq.n	800984c <HAL_TIM_Base_Start_IT+0x80>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a22      	ldr	r2, [pc, #136]	; (80098a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d018      	beq.n	800984c <HAL_TIM_Base_Start_IT+0x80>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a21      	ldr	r2, [pc, #132]	; (80098a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d013      	beq.n	800984c <HAL_TIM_Base_Start_IT+0x80>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a1f      	ldr	r2, [pc, #124]	; (80098a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d00e      	beq.n	800984c <HAL_TIM_Base_Start_IT+0x80>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a1e      	ldr	r2, [pc, #120]	; (80098ac <HAL_TIM_Base_Start_IT+0xe0>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d009      	beq.n	800984c <HAL_TIM_Base_Start_IT+0x80>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a1c      	ldr	r2, [pc, #112]	; (80098b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d004      	beq.n	800984c <HAL_TIM_Base_Start_IT+0x80>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a1b      	ldr	r2, [pc, #108]	; (80098b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d115      	bne.n	8009878 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689a      	ldr	r2, [r3, #8]
 8009852:	4b19      	ldr	r3, [pc, #100]	; (80098b8 <HAL_TIM_Base_Start_IT+0xec>)
 8009854:	4013      	ands	r3, r2
 8009856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2b06      	cmp	r3, #6
 800985c:	d015      	beq.n	800988a <HAL_TIM_Base_Start_IT+0xbe>
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009864:	d011      	beq.n	800988a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f042 0201 	orr.w	r2, r2, #1
 8009874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009876:	e008      	b.n	800988a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f042 0201 	orr.w	r2, r2, #1
 8009886:	601a      	str	r2, [r3, #0]
 8009888:	e000      	b.n	800988c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800988a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3714      	adds	r7, #20
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	40010000 	.word	0x40010000
 80098a0:	40000400 	.word	0x40000400
 80098a4:	40000800 	.word	0x40000800
 80098a8:	40000c00 	.word	0x40000c00
 80098ac:	40010400 	.word	0x40010400
 80098b0:	40001800 	.word	0x40001800
 80098b4:	40014000 	.word	0x40014000
 80098b8:	00010007 	.word	0x00010007

080098bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d101      	bne.n	80098ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098ca:	2301      	movs	r3, #1
 80098cc:	e049      	b.n	8009962 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d106      	bne.n	80098e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 f841 	bl	800996a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2202      	movs	r2, #2
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	3304      	adds	r3, #4
 80098f8:	4619      	mov	r1, r3
 80098fa:	4610      	mov	r0, r2
 80098fc:	f000 fca2 	bl	800a244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2201      	movs	r2, #1
 8009904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2201      	movs	r2, #1
 8009924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2201      	movs	r2, #1
 800993c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800996a:	b480      	push	{r7}
 800996c:	b083      	sub	sp, #12
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009972:	bf00      	nop
 8009974:	370c      	adds	r7, #12
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr
	...

08009980 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b084      	sub	sp, #16
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d109      	bne.n	80099a4 <HAL_TIM_PWM_Start+0x24>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009996:	b2db      	uxtb	r3, r3
 8009998:	2b01      	cmp	r3, #1
 800999a:	bf14      	ite	ne
 800999c:	2301      	movne	r3, #1
 800999e:	2300      	moveq	r3, #0
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	e03c      	b.n	8009a1e <HAL_TIM_PWM_Start+0x9e>
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	2b04      	cmp	r3, #4
 80099a8:	d109      	bne.n	80099be <HAL_TIM_PWM_Start+0x3e>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	bf14      	ite	ne
 80099b6:	2301      	movne	r3, #1
 80099b8:	2300      	moveq	r3, #0
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	e02f      	b.n	8009a1e <HAL_TIM_PWM_Start+0x9e>
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	2b08      	cmp	r3, #8
 80099c2:	d109      	bne.n	80099d8 <HAL_TIM_PWM_Start+0x58>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	bf14      	ite	ne
 80099d0:	2301      	movne	r3, #1
 80099d2:	2300      	moveq	r3, #0
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	e022      	b.n	8009a1e <HAL_TIM_PWM_Start+0x9e>
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	2b0c      	cmp	r3, #12
 80099dc:	d109      	bne.n	80099f2 <HAL_TIM_PWM_Start+0x72>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	bf14      	ite	ne
 80099ea:	2301      	movne	r3, #1
 80099ec:	2300      	moveq	r3, #0
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	e015      	b.n	8009a1e <HAL_TIM_PWM_Start+0x9e>
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b10      	cmp	r3, #16
 80099f6:	d109      	bne.n	8009a0c <HAL_TIM_PWM_Start+0x8c>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	bf14      	ite	ne
 8009a04:	2301      	movne	r3, #1
 8009a06:	2300      	moveq	r3, #0
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	e008      	b.n	8009a1e <HAL_TIM_PWM_Start+0x9e>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009a12:	b2db      	uxtb	r3, r3
 8009a14:	2b01      	cmp	r3, #1
 8009a16:	bf14      	ite	ne
 8009a18:	2301      	movne	r3, #1
 8009a1a:	2300      	moveq	r3, #0
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d001      	beq.n	8009a26 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e0a1      	b.n	8009b6a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d104      	bne.n	8009a36 <HAL_TIM_PWM_Start+0xb6>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2202      	movs	r2, #2
 8009a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009a34:	e023      	b.n	8009a7e <HAL_TIM_PWM_Start+0xfe>
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	2b04      	cmp	r3, #4
 8009a3a:	d104      	bne.n	8009a46 <HAL_TIM_PWM_Start+0xc6>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2202      	movs	r2, #2
 8009a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009a44:	e01b      	b.n	8009a7e <HAL_TIM_PWM_Start+0xfe>
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	2b08      	cmp	r3, #8
 8009a4a:	d104      	bne.n	8009a56 <HAL_TIM_PWM_Start+0xd6>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2202      	movs	r2, #2
 8009a50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009a54:	e013      	b.n	8009a7e <HAL_TIM_PWM_Start+0xfe>
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	2b0c      	cmp	r3, #12
 8009a5a:	d104      	bne.n	8009a66 <HAL_TIM_PWM_Start+0xe6>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2202      	movs	r2, #2
 8009a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009a64:	e00b      	b.n	8009a7e <HAL_TIM_PWM_Start+0xfe>
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2b10      	cmp	r3, #16
 8009a6a:	d104      	bne.n	8009a76 <HAL_TIM_PWM_Start+0xf6>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2202      	movs	r2, #2
 8009a70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009a74:	e003      	b.n	8009a7e <HAL_TIM_PWM_Start+0xfe>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2202      	movs	r2, #2
 8009a7a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2201      	movs	r2, #1
 8009a84:	6839      	ldr	r1, [r7, #0]
 8009a86:	4618      	mov	r0, r3
 8009a88:	f000 ffea 	bl	800aa60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a38      	ldr	r2, [pc, #224]	; (8009b74 <HAL_TIM_PWM_Start+0x1f4>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d013      	beq.n	8009abe <HAL_TIM_PWM_Start+0x13e>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a37      	ldr	r2, [pc, #220]	; (8009b78 <HAL_TIM_PWM_Start+0x1f8>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d00e      	beq.n	8009abe <HAL_TIM_PWM_Start+0x13e>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a35      	ldr	r2, [pc, #212]	; (8009b7c <HAL_TIM_PWM_Start+0x1fc>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d009      	beq.n	8009abe <HAL_TIM_PWM_Start+0x13e>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a34      	ldr	r2, [pc, #208]	; (8009b80 <HAL_TIM_PWM_Start+0x200>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d004      	beq.n	8009abe <HAL_TIM_PWM_Start+0x13e>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a32      	ldr	r2, [pc, #200]	; (8009b84 <HAL_TIM_PWM_Start+0x204>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d101      	bne.n	8009ac2 <HAL_TIM_PWM_Start+0x142>
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e000      	b.n	8009ac4 <HAL_TIM_PWM_Start+0x144>
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d007      	beq.n	8009ad8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ad6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a25      	ldr	r2, [pc, #148]	; (8009b74 <HAL_TIM_PWM_Start+0x1f4>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d022      	beq.n	8009b28 <HAL_TIM_PWM_Start+0x1a8>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aea:	d01d      	beq.n	8009b28 <HAL_TIM_PWM_Start+0x1a8>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a25      	ldr	r2, [pc, #148]	; (8009b88 <HAL_TIM_PWM_Start+0x208>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d018      	beq.n	8009b28 <HAL_TIM_PWM_Start+0x1a8>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a24      	ldr	r2, [pc, #144]	; (8009b8c <HAL_TIM_PWM_Start+0x20c>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d013      	beq.n	8009b28 <HAL_TIM_PWM_Start+0x1a8>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a22      	ldr	r2, [pc, #136]	; (8009b90 <HAL_TIM_PWM_Start+0x210>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d00e      	beq.n	8009b28 <HAL_TIM_PWM_Start+0x1a8>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a1a      	ldr	r2, [pc, #104]	; (8009b78 <HAL_TIM_PWM_Start+0x1f8>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d009      	beq.n	8009b28 <HAL_TIM_PWM_Start+0x1a8>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a1e      	ldr	r2, [pc, #120]	; (8009b94 <HAL_TIM_PWM_Start+0x214>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d004      	beq.n	8009b28 <HAL_TIM_PWM_Start+0x1a8>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a16      	ldr	r2, [pc, #88]	; (8009b7c <HAL_TIM_PWM_Start+0x1fc>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d115      	bne.n	8009b54 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689a      	ldr	r2, [r3, #8]
 8009b2e:	4b1a      	ldr	r3, [pc, #104]	; (8009b98 <HAL_TIM_PWM_Start+0x218>)
 8009b30:	4013      	ands	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2b06      	cmp	r3, #6
 8009b38:	d015      	beq.n	8009b66 <HAL_TIM_PWM_Start+0x1e6>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b40:	d011      	beq.n	8009b66 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f042 0201 	orr.w	r2, r2, #1
 8009b50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b52:	e008      	b.n	8009b66 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681a      	ldr	r2, [r3, #0]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f042 0201 	orr.w	r2, r2, #1
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	e000      	b.n	8009b68 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009b66:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	40010000 	.word	0x40010000
 8009b78:	40010400 	.word	0x40010400
 8009b7c:	40014000 	.word	0x40014000
 8009b80:	40014400 	.word	0x40014400
 8009b84:	40014800 	.word	0x40014800
 8009b88:	40000400 	.word	0x40000400
 8009b8c:	40000800 	.word	0x40000800
 8009b90:	40000c00 	.word	0x40000c00
 8009b94:	40001800 	.word	0x40001800
 8009b98:	00010007 	.word	0x00010007

08009b9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b082      	sub	sp, #8
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	691b      	ldr	r3, [r3, #16]
 8009baa:	f003 0302 	and.w	r3, r3, #2
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d122      	bne.n	8009bf8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	f003 0302 	and.w	r3, r3, #2
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d11b      	bne.n	8009bf8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f06f 0202 	mvn.w	r2, #2
 8009bc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	f003 0303 	and.w	r3, r3, #3
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 fb12 	bl	800a208 <HAL_TIM_IC_CaptureCallback>
 8009be4:	e005      	b.n	8009bf2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fb04 	bl	800a1f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 fb15 	bl	800a21c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	f003 0304 	and.w	r3, r3, #4
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d122      	bne.n	8009c4c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	68db      	ldr	r3, [r3, #12]
 8009c0c:	f003 0304 	and.w	r3, r3, #4
 8009c10:	2b04      	cmp	r3, #4
 8009c12:	d11b      	bne.n	8009c4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f06f 0204 	mvn.w	r2, #4
 8009c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2202      	movs	r2, #2
 8009c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d003      	beq.n	8009c3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fae8 	bl	800a208 <HAL_TIM_IC_CaptureCallback>
 8009c38:	e005      	b.n	8009c46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fada 	bl	800a1f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 faeb 	bl	800a21c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	f003 0308 	and.w	r3, r3, #8
 8009c56:	2b08      	cmp	r3, #8
 8009c58:	d122      	bne.n	8009ca0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68db      	ldr	r3, [r3, #12]
 8009c60:	f003 0308 	and.w	r3, r3, #8
 8009c64:	2b08      	cmp	r3, #8
 8009c66:	d11b      	bne.n	8009ca0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f06f 0208 	mvn.w	r2, #8
 8009c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2204      	movs	r2, #4
 8009c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	69db      	ldr	r3, [r3, #28]
 8009c7e:	f003 0303 	and.w	r3, r3, #3
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d003      	beq.n	8009c8e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 fabe 	bl	800a208 <HAL_TIM_IC_CaptureCallback>
 8009c8c:	e005      	b.n	8009c9a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fab0 	bl	800a1f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 fac1 	bl	800a21c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	f003 0310 	and.w	r3, r3, #16
 8009caa:	2b10      	cmp	r3, #16
 8009cac:	d122      	bne.n	8009cf4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	f003 0310 	and.w	r3, r3, #16
 8009cb8:	2b10      	cmp	r3, #16
 8009cba:	d11b      	bne.n	8009cf4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f06f 0210 	mvn.w	r2, #16
 8009cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2208      	movs	r2, #8
 8009cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	69db      	ldr	r3, [r3, #28]
 8009cd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d003      	beq.n	8009ce2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fa94 	bl	800a208 <HAL_TIM_IC_CaptureCallback>
 8009ce0:	e005      	b.n	8009cee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fa86 	bl	800a1f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fa97 	bl	800a21c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	f003 0301 	and.w	r3, r3, #1
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d10e      	bne.n	8009d20 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	f003 0301 	and.w	r3, r3, #1
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d107      	bne.n	8009d20 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f06f 0201 	mvn.w	r2, #1
 8009d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7f7 fd4c 	bl	80017b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	691b      	ldr	r3, [r3, #16]
 8009d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d2a:	2b80      	cmp	r3, #128	; 0x80
 8009d2c:	d10e      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d38:	2b80      	cmp	r3, #128	; 0x80
 8009d3a:	d107      	bne.n	8009d4c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	f000 ffc6 	bl	800acd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d5a:	d10e      	bne.n	8009d7a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d66:	2b80      	cmp	r3, #128	; 0x80
 8009d68:	d107      	bne.n	8009d7a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 ffb9 	bl	800acec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	691b      	ldr	r3, [r3, #16]
 8009d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d84:	2b40      	cmp	r3, #64	; 0x40
 8009d86:	d10e      	bne.n	8009da6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d92:	2b40      	cmp	r3, #64	; 0x40
 8009d94:	d107      	bne.n	8009da6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 fa45 	bl	800a230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	691b      	ldr	r3, [r3, #16]
 8009dac:	f003 0320 	and.w	r3, r3, #32
 8009db0:	2b20      	cmp	r3, #32
 8009db2:	d10e      	bne.n	8009dd2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	68db      	ldr	r3, [r3, #12]
 8009dba:	f003 0320 	and.w	r3, r3, #32
 8009dbe:	2b20      	cmp	r3, #32
 8009dc0:	d107      	bne.n	8009dd2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f06f 0220 	mvn.w	r2, #32
 8009dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 ff79 	bl	800acc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009dd2:	bf00      	nop
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}
	...

08009ddc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009df2:	2b01      	cmp	r3, #1
 8009df4:	d101      	bne.n	8009dfa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009df6:	2302      	movs	r3, #2
 8009df8:	e0ff      	b.n	8009ffa <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2b14      	cmp	r3, #20
 8009e06:	f200 80f0 	bhi.w	8009fea <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009e0a:	a201      	add	r2, pc, #4	; (adr r2, 8009e10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e10:	08009e65 	.word	0x08009e65
 8009e14:	08009feb 	.word	0x08009feb
 8009e18:	08009feb 	.word	0x08009feb
 8009e1c:	08009feb 	.word	0x08009feb
 8009e20:	08009ea5 	.word	0x08009ea5
 8009e24:	08009feb 	.word	0x08009feb
 8009e28:	08009feb 	.word	0x08009feb
 8009e2c:	08009feb 	.word	0x08009feb
 8009e30:	08009ee7 	.word	0x08009ee7
 8009e34:	08009feb 	.word	0x08009feb
 8009e38:	08009feb 	.word	0x08009feb
 8009e3c:	08009feb 	.word	0x08009feb
 8009e40:	08009f27 	.word	0x08009f27
 8009e44:	08009feb 	.word	0x08009feb
 8009e48:	08009feb 	.word	0x08009feb
 8009e4c:	08009feb 	.word	0x08009feb
 8009e50:	08009f69 	.word	0x08009f69
 8009e54:	08009feb 	.word	0x08009feb
 8009e58:	08009feb 	.word	0x08009feb
 8009e5c:	08009feb 	.word	0x08009feb
 8009e60:	08009fa9 	.word	0x08009fa9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68b9      	ldr	r1, [r7, #8]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 fa84 	bl	800a378 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	699a      	ldr	r2, [r3, #24]
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f042 0208 	orr.w	r2, r2, #8
 8009e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	699a      	ldr	r2, [r3, #24]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f022 0204 	bic.w	r2, r2, #4
 8009e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	6999      	ldr	r1, [r3, #24]
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	691a      	ldr	r2, [r3, #16]
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	619a      	str	r2, [r3, #24]
      break;
 8009ea2:	e0a5      	b.n	8009ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	68b9      	ldr	r1, [r7, #8]
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f000 faf4 	bl	800a498 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	699a      	ldr	r2, [r3, #24]
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	699a      	ldr	r2, [r3, #24]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	6999      	ldr	r1, [r3, #24]
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	021a      	lsls	r2, r3, #8
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	430a      	orrs	r2, r1
 8009ee2:	619a      	str	r2, [r3, #24]
      break;
 8009ee4:	e084      	b.n	8009ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68b9      	ldr	r1, [r7, #8]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f000 fb5d 	bl	800a5ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	69da      	ldr	r2, [r3, #28]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f042 0208 	orr.w	r2, r2, #8
 8009f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	69da      	ldr	r2, [r3, #28]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f022 0204 	bic.w	r2, r2, #4
 8009f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	69d9      	ldr	r1, [r3, #28]
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	691a      	ldr	r2, [r3, #16]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	430a      	orrs	r2, r1
 8009f22:	61da      	str	r2, [r3, #28]
      break;
 8009f24:	e064      	b.n	8009ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	68b9      	ldr	r1, [r7, #8]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 fbc5 	bl	800a6bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	69da      	ldr	r2, [r3, #28]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	69da      	ldr	r2, [r3, #28]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	69d9      	ldr	r1, [r3, #28]
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	021a      	lsls	r2, r3, #8
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	61da      	str	r2, [r3, #28]
      break;
 8009f66:	e043      	b.n	8009ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	68b9      	ldr	r1, [r7, #8]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 fc0e 	bl	800a790 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f042 0208 	orr.w	r2, r2, #8
 8009f82:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f022 0204 	bic.w	r2, r2, #4
 8009f92:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	691a      	ldr	r2, [r3, #16]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009fa6:	e023      	b.n	8009ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68b9      	ldr	r1, [r7, #8]
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f000 fc52 	bl	800a858 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009fc2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009fd2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	021a      	lsls	r2, r3, #8
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009fe8:	e002      	b.n	8009ff0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	75fb      	strb	r3, [r7, #23]
      break;
 8009fee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop

0800a004 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b084      	sub	sp, #16
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a00e:	2300      	movs	r3, #0
 800a010:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a018:	2b01      	cmp	r3, #1
 800a01a:	d101      	bne.n	800a020 <HAL_TIM_ConfigClockSource+0x1c>
 800a01c:	2302      	movs	r3, #2
 800a01e:	e0dc      	b.n	800a1da <HAL_TIM_ConfigClockSource+0x1d6>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2202      	movs	r2, #2
 800a02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	4b6a      	ldr	r3, [pc, #424]	; (800a1e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a03c:	4013      	ands	r3, r2
 800a03e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a046:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68ba      	ldr	r2, [r7, #8]
 800a04e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a64      	ldr	r2, [pc, #400]	; (800a1e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a056:	4293      	cmp	r3, r2
 800a058:	f000 80a9 	beq.w	800a1ae <HAL_TIM_ConfigClockSource+0x1aa>
 800a05c:	4a62      	ldr	r2, [pc, #392]	; (800a1e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a05e:	4293      	cmp	r3, r2
 800a060:	f200 80ae 	bhi.w	800a1c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a064:	4a61      	ldr	r2, [pc, #388]	; (800a1ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800a066:	4293      	cmp	r3, r2
 800a068:	f000 80a1 	beq.w	800a1ae <HAL_TIM_ConfigClockSource+0x1aa>
 800a06c:	4a5f      	ldr	r2, [pc, #380]	; (800a1ec <HAL_TIM_ConfigClockSource+0x1e8>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	f200 80a6 	bhi.w	800a1c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a074:	4a5e      	ldr	r2, [pc, #376]	; (800a1f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a076:	4293      	cmp	r3, r2
 800a078:	f000 8099 	beq.w	800a1ae <HAL_TIM_ConfigClockSource+0x1aa>
 800a07c:	4a5c      	ldr	r2, [pc, #368]	; (800a1f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a07e:	4293      	cmp	r3, r2
 800a080:	f200 809e 	bhi.w	800a1c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a084:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a088:	f000 8091 	beq.w	800a1ae <HAL_TIM_ConfigClockSource+0x1aa>
 800a08c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a090:	f200 8096 	bhi.w	800a1c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a094:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a098:	f000 8089 	beq.w	800a1ae <HAL_TIM_ConfigClockSource+0x1aa>
 800a09c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0a0:	f200 808e 	bhi.w	800a1c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0a8:	d03e      	beq.n	800a128 <HAL_TIM_ConfigClockSource+0x124>
 800a0aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0ae:	f200 8087 	bhi.w	800a1c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0b6:	f000 8086 	beq.w	800a1c6 <HAL_TIM_ConfigClockSource+0x1c2>
 800a0ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0be:	d87f      	bhi.n	800a1c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0c0:	2b70      	cmp	r3, #112	; 0x70
 800a0c2:	d01a      	beq.n	800a0fa <HAL_TIM_ConfigClockSource+0xf6>
 800a0c4:	2b70      	cmp	r3, #112	; 0x70
 800a0c6:	d87b      	bhi.n	800a1c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0c8:	2b60      	cmp	r3, #96	; 0x60
 800a0ca:	d050      	beq.n	800a16e <HAL_TIM_ConfigClockSource+0x16a>
 800a0cc:	2b60      	cmp	r3, #96	; 0x60
 800a0ce:	d877      	bhi.n	800a1c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0d0:	2b50      	cmp	r3, #80	; 0x50
 800a0d2:	d03c      	beq.n	800a14e <HAL_TIM_ConfigClockSource+0x14a>
 800a0d4:	2b50      	cmp	r3, #80	; 0x50
 800a0d6:	d873      	bhi.n	800a1c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0d8:	2b40      	cmp	r3, #64	; 0x40
 800a0da:	d058      	beq.n	800a18e <HAL_TIM_ConfigClockSource+0x18a>
 800a0dc:	2b40      	cmp	r3, #64	; 0x40
 800a0de:	d86f      	bhi.n	800a1c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0e0:	2b30      	cmp	r3, #48	; 0x30
 800a0e2:	d064      	beq.n	800a1ae <HAL_TIM_ConfigClockSource+0x1aa>
 800a0e4:	2b30      	cmp	r3, #48	; 0x30
 800a0e6:	d86b      	bhi.n	800a1c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0e8:	2b20      	cmp	r3, #32
 800a0ea:	d060      	beq.n	800a1ae <HAL_TIM_ConfigClockSource+0x1aa>
 800a0ec:	2b20      	cmp	r3, #32
 800a0ee:	d867      	bhi.n	800a1c0 <HAL_TIM_ConfigClockSource+0x1bc>
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d05c      	beq.n	800a1ae <HAL_TIM_ConfigClockSource+0x1aa>
 800a0f4:	2b10      	cmp	r3, #16
 800a0f6:	d05a      	beq.n	800a1ae <HAL_TIM_ConfigClockSource+0x1aa>
 800a0f8:	e062      	b.n	800a1c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6818      	ldr	r0, [r3, #0]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	6899      	ldr	r1, [r3, #8]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	685a      	ldr	r2, [r3, #4]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	f000 fc89 	bl	800aa20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a11c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	609a      	str	r2, [r3, #8]
      break;
 800a126:	e04f      	b.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6818      	ldr	r0, [r3, #0]
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	6899      	ldr	r1, [r3, #8]
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	f000 fc72 	bl	800aa20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	689a      	ldr	r2, [r3, #8]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a14a:	609a      	str	r2, [r3, #8]
      break;
 800a14c:	e03c      	b.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6818      	ldr	r0, [r3, #0]
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	6859      	ldr	r1, [r3, #4]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	461a      	mov	r2, r3
 800a15c:	f000 fbe2 	bl	800a924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	2150      	movs	r1, #80	; 0x50
 800a166:	4618      	mov	r0, r3
 800a168:	f000 fc3c 	bl	800a9e4 <TIM_ITRx_SetConfig>
      break;
 800a16c:	e02c      	b.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6818      	ldr	r0, [r3, #0]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	6859      	ldr	r1, [r3, #4]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	461a      	mov	r2, r3
 800a17c:	f000 fc01 	bl	800a982 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2160      	movs	r1, #96	; 0x60
 800a186:	4618      	mov	r0, r3
 800a188:	f000 fc2c 	bl	800a9e4 <TIM_ITRx_SetConfig>
      break;
 800a18c:	e01c      	b.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6818      	ldr	r0, [r3, #0]
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	6859      	ldr	r1, [r3, #4]
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	461a      	mov	r2, r3
 800a19c:	f000 fbc2 	bl	800a924 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2140      	movs	r1, #64	; 0x40
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f000 fc1c 	bl	800a9e4 <TIM_ITRx_SetConfig>
      break;
 800a1ac:	e00c      	b.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	4610      	mov	r0, r2
 800a1ba:	f000 fc13 	bl	800a9e4 <TIM_ITRx_SetConfig>
      break;
 800a1be:	e003      	b.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1c4:	e000      	b.n	800a1c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a1c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	2201      	movs	r2, #1
 800a1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	ffceff88 	.word	0xffceff88
 800a1e8:	00100040 	.word	0x00100040
 800a1ec:	00100030 	.word	0x00100030
 800a1f0:	00100020 	.word	0x00100020

0800a1f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a210:	bf00      	nop
 800a212:	370c      	adds	r7, #12
 800a214:	46bd      	mov	sp, r7
 800a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21a:	4770      	bx	lr

0800a21c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a224:	bf00      	nop
 800a226:	370c      	adds	r7, #12
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr

0800a230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a238:	bf00      	nop
 800a23a:	370c      	adds	r7, #12
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a40      	ldr	r2, [pc, #256]	; (800a358 <TIM_Base_SetConfig+0x114>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d013      	beq.n	800a284 <TIM_Base_SetConfig+0x40>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a262:	d00f      	beq.n	800a284 <TIM_Base_SetConfig+0x40>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	4a3d      	ldr	r2, [pc, #244]	; (800a35c <TIM_Base_SetConfig+0x118>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d00b      	beq.n	800a284 <TIM_Base_SetConfig+0x40>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	4a3c      	ldr	r2, [pc, #240]	; (800a360 <TIM_Base_SetConfig+0x11c>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d007      	beq.n	800a284 <TIM_Base_SetConfig+0x40>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	4a3b      	ldr	r2, [pc, #236]	; (800a364 <TIM_Base_SetConfig+0x120>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d003      	beq.n	800a284 <TIM_Base_SetConfig+0x40>
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	4a3a      	ldr	r2, [pc, #232]	; (800a368 <TIM_Base_SetConfig+0x124>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d108      	bne.n	800a296 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a28a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	4313      	orrs	r3, r2
 800a294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a2f      	ldr	r2, [pc, #188]	; (800a358 <TIM_Base_SetConfig+0x114>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d01f      	beq.n	800a2de <TIM_Base_SetConfig+0x9a>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2a4:	d01b      	beq.n	800a2de <TIM_Base_SetConfig+0x9a>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a2c      	ldr	r2, [pc, #176]	; (800a35c <TIM_Base_SetConfig+0x118>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d017      	beq.n	800a2de <TIM_Base_SetConfig+0x9a>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a2b      	ldr	r2, [pc, #172]	; (800a360 <TIM_Base_SetConfig+0x11c>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d013      	beq.n	800a2de <TIM_Base_SetConfig+0x9a>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a2a      	ldr	r2, [pc, #168]	; (800a364 <TIM_Base_SetConfig+0x120>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d00f      	beq.n	800a2de <TIM_Base_SetConfig+0x9a>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a29      	ldr	r2, [pc, #164]	; (800a368 <TIM_Base_SetConfig+0x124>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d00b      	beq.n	800a2de <TIM_Base_SetConfig+0x9a>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a28      	ldr	r2, [pc, #160]	; (800a36c <TIM_Base_SetConfig+0x128>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d007      	beq.n	800a2de <TIM_Base_SetConfig+0x9a>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a27      	ldr	r2, [pc, #156]	; (800a370 <TIM_Base_SetConfig+0x12c>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d003      	beq.n	800a2de <TIM_Base_SetConfig+0x9a>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a26      	ldr	r2, [pc, #152]	; (800a374 <TIM_Base_SetConfig+0x130>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d108      	bne.n	800a2f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	68fa      	ldr	r2, [r7, #12]
 800a2ec:	4313      	orrs	r3, r2
 800a2ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	695b      	ldr	r3, [r3, #20]
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	68fa      	ldr	r2, [r7, #12]
 800a302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	689a      	ldr	r2, [r3, #8]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a10      	ldr	r2, [pc, #64]	; (800a358 <TIM_Base_SetConfig+0x114>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d00f      	beq.n	800a33c <TIM_Base_SetConfig+0xf8>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a12      	ldr	r2, [pc, #72]	; (800a368 <TIM_Base_SetConfig+0x124>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d00b      	beq.n	800a33c <TIM_Base_SetConfig+0xf8>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	4a11      	ldr	r2, [pc, #68]	; (800a36c <TIM_Base_SetConfig+0x128>)
 800a328:	4293      	cmp	r3, r2
 800a32a:	d007      	beq.n	800a33c <TIM_Base_SetConfig+0xf8>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	4a10      	ldr	r2, [pc, #64]	; (800a370 <TIM_Base_SetConfig+0x12c>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d003      	beq.n	800a33c <TIM_Base_SetConfig+0xf8>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	4a0f      	ldr	r2, [pc, #60]	; (800a374 <TIM_Base_SetConfig+0x130>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d103      	bne.n	800a344 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	691a      	ldr	r2, [r3, #16]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2201      	movs	r2, #1
 800a348:	615a      	str	r2, [r3, #20]
}
 800a34a:	bf00      	nop
 800a34c:	3714      	adds	r7, #20
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr
 800a356:	bf00      	nop
 800a358:	40010000 	.word	0x40010000
 800a35c:	40000400 	.word	0x40000400
 800a360:	40000800 	.word	0x40000800
 800a364:	40000c00 	.word	0x40000c00
 800a368:	40010400 	.word	0x40010400
 800a36c:	40014000 	.word	0x40014000
 800a370:	40014400 	.word	0x40014400
 800a374:	40014800 	.word	0x40014800

0800a378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a378:	b480      	push	{r7}
 800a37a:	b087      	sub	sp, #28
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a1b      	ldr	r3, [r3, #32]
 800a386:	f023 0201 	bic.w	r2, r3, #1
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a1b      	ldr	r3, [r3, #32]
 800a392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	4b37      	ldr	r3, [pc, #220]	; (800a480 <TIM_OC1_SetConfig+0x108>)
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f023 0303 	bic.w	r3, r3, #3
 800a3ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68fa      	ldr	r2, [r7, #12]
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a3ba:	697b      	ldr	r3, [r7, #20]
 800a3bc:	f023 0302 	bic.w	r3, r3, #2
 800a3c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	697a      	ldr	r2, [r7, #20]
 800a3c8:	4313      	orrs	r3, r2
 800a3ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a2d      	ldr	r2, [pc, #180]	; (800a484 <TIM_OC1_SetConfig+0x10c>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d00f      	beq.n	800a3f4 <TIM_OC1_SetConfig+0x7c>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	4a2c      	ldr	r2, [pc, #176]	; (800a488 <TIM_OC1_SetConfig+0x110>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d00b      	beq.n	800a3f4 <TIM_OC1_SetConfig+0x7c>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	4a2b      	ldr	r2, [pc, #172]	; (800a48c <TIM_OC1_SetConfig+0x114>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d007      	beq.n	800a3f4 <TIM_OC1_SetConfig+0x7c>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	4a2a      	ldr	r2, [pc, #168]	; (800a490 <TIM_OC1_SetConfig+0x118>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d003      	beq.n	800a3f4 <TIM_OC1_SetConfig+0x7c>
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4a29      	ldr	r2, [pc, #164]	; (800a494 <TIM_OC1_SetConfig+0x11c>)
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d10c      	bne.n	800a40e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	f023 0308 	bic.w	r3, r3, #8
 800a3fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	68db      	ldr	r3, [r3, #12]
 800a400:	697a      	ldr	r2, [r7, #20]
 800a402:	4313      	orrs	r3, r2
 800a404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a406:	697b      	ldr	r3, [r7, #20]
 800a408:	f023 0304 	bic.w	r3, r3, #4
 800a40c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a1c      	ldr	r2, [pc, #112]	; (800a484 <TIM_OC1_SetConfig+0x10c>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d00f      	beq.n	800a436 <TIM_OC1_SetConfig+0xbe>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a1b      	ldr	r2, [pc, #108]	; (800a488 <TIM_OC1_SetConfig+0x110>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d00b      	beq.n	800a436 <TIM_OC1_SetConfig+0xbe>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a1a      	ldr	r2, [pc, #104]	; (800a48c <TIM_OC1_SetConfig+0x114>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d007      	beq.n	800a436 <TIM_OC1_SetConfig+0xbe>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a19      	ldr	r2, [pc, #100]	; (800a490 <TIM_OC1_SetConfig+0x118>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d003      	beq.n	800a436 <TIM_OC1_SetConfig+0xbe>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a18      	ldr	r2, [pc, #96]	; (800a494 <TIM_OC1_SetConfig+0x11c>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d111      	bne.n	800a45a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a43c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	695b      	ldr	r3, [r3, #20]
 800a44a:	693a      	ldr	r2, [r7, #16]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	4313      	orrs	r3, r2
 800a458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	693a      	ldr	r2, [r7, #16]
 800a45e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	697a      	ldr	r2, [r7, #20]
 800a472:	621a      	str	r2, [r3, #32]
}
 800a474:	bf00      	nop
 800a476:	371c      	adds	r7, #28
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr
 800a480:	fffeff8f 	.word	0xfffeff8f
 800a484:	40010000 	.word	0x40010000
 800a488:	40010400 	.word	0x40010400
 800a48c:	40014000 	.word	0x40014000
 800a490:	40014400 	.word	0x40014400
 800a494:	40014800 	.word	0x40014800

0800a498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a498:	b480      	push	{r7}
 800a49a:	b087      	sub	sp, #28
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a1b      	ldr	r3, [r3, #32]
 800a4a6:	f023 0210 	bic.w	r2, r3, #16
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a1b      	ldr	r3, [r3, #32]
 800a4b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	699b      	ldr	r3, [r3, #24]
 800a4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a4c0:	68fa      	ldr	r2, [r7, #12]
 800a4c2:	4b34      	ldr	r3, [pc, #208]	; (800a594 <TIM_OC2_SetConfig+0xfc>)
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	021b      	lsls	r3, r3, #8
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	f023 0320 	bic.w	r3, r3, #32
 800a4e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	011b      	lsls	r3, r3, #4
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4a29      	ldr	r2, [pc, #164]	; (800a598 <TIM_OC2_SetConfig+0x100>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d003      	beq.n	800a500 <TIM_OC2_SetConfig+0x68>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	4a28      	ldr	r2, [pc, #160]	; (800a59c <TIM_OC2_SetConfig+0x104>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d10d      	bne.n	800a51c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	011b      	lsls	r3, r3, #4
 800a50e:	697a      	ldr	r2, [r7, #20]
 800a510:	4313      	orrs	r3, r2
 800a512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a51a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a1e      	ldr	r2, [pc, #120]	; (800a598 <TIM_OC2_SetConfig+0x100>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d00f      	beq.n	800a544 <TIM_OC2_SetConfig+0xac>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a1d      	ldr	r2, [pc, #116]	; (800a59c <TIM_OC2_SetConfig+0x104>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d00b      	beq.n	800a544 <TIM_OC2_SetConfig+0xac>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	4a1c      	ldr	r2, [pc, #112]	; (800a5a0 <TIM_OC2_SetConfig+0x108>)
 800a530:	4293      	cmp	r3, r2
 800a532:	d007      	beq.n	800a544 <TIM_OC2_SetConfig+0xac>
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a1b      	ldr	r2, [pc, #108]	; (800a5a4 <TIM_OC2_SetConfig+0x10c>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d003      	beq.n	800a544 <TIM_OC2_SetConfig+0xac>
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	4a1a      	ldr	r2, [pc, #104]	; (800a5a8 <TIM_OC2_SetConfig+0x110>)
 800a540:	4293      	cmp	r3, r2
 800a542:	d113      	bne.n	800a56c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a54a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	695b      	ldr	r3, [r3, #20]
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	693a      	ldr	r2, [r7, #16]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	699b      	ldr	r3, [r3, #24]
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	693a      	ldr	r2, [r7, #16]
 800a568:	4313      	orrs	r3, r2
 800a56a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	693a      	ldr	r2, [r7, #16]
 800a570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	685a      	ldr	r2, [r3, #4]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	621a      	str	r2, [r3, #32]
}
 800a586:	bf00      	nop
 800a588:	371c      	adds	r7, #28
 800a58a:	46bd      	mov	sp, r7
 800a58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	feff8fff 	.word	0xfeff8fff
 800a598:	40010000 	.word	0x40010000
 800a59c:	40010400 	.word	0x40010400
 800a5a0:	40014000 	.word	0x40014000
 800a5a4:	40014400 	.word	0x40014400
 800a5a8:	40014800 	.word	0x40014800

0800a5ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b087      	sub	sp, #28
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6a1b      	ldr	r3, [r3, #32]
 800a5ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6a1b      	ldr	r3, [r3, #32]
 800a5c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	685b      	ldr	r3, [r3, #4]
 800a5cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	69db      	ldr	r3, [r3, #28]
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	4b33      	ldr	r3, [pc, #204]	; (800a6a4 <TIM_OC3_SetConfig+0xf8>)
 800a5d8:	4013      	ands	r3, r2
 800a5da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f023 0303 	bic.w	r3, r3, #3
 800a5e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	4313      	orrs	r3, r2
 800a5ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a5f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	021b      	lsls	r3, r3, #8
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a28      	ldr	r2, [pc, #160]	; (800a6a8 <TIM_OC3_SetConfig+0xfc>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d003      	beq.n	800a612 <TIM_OC3_SetConfig+0x66>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4a27      	ldr	r2, [pc, #156]	; (800a6ac <TIM_OC3_SetConfig+0x100>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d10d      	bne.n	800a62e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	021b      	lsls	r3, r3, #8
 800a620:	697a      	ldr	r2, [r7, #20]
 800a622:	4313      	orrs	r3, r2
 800a624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a62c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4a1d      	ldr	r2, [pc, #116]	; (800a6a8 <TIM_OC3_SetConfig+0xfc>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d00f      	beq.n	800a656 <TIM_OC3_SetConfig+0xaa>
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	4a1c      	ldr	r2, [pc, #112]	; (800a6ac <TIM_OC3_SetConfig+0x100>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d00b      	beq.n	800a656 <TIM_OC3_SetConfig+0xaa>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4a1b      	ldr	r2, [pc, #108]	; (800a6b0 <TIM_OC3_SetConfig+0x104>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d007      	beq.n	800a656 <TIM_OC3_SetConfig+0xaa>
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	4a1a      	ldr	r2, [pc, #104]	; (800a6b4 <TIM_OC3_SetConfig+0x108>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d003      	beq.n	800a656 <TIM_OC3_SetConfig+0xaa>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	4a19      	ldr	r2, [pc, #100]	; (800a6b8 <TIM_OC3_SetConfig+0x10c>)
 800a652:	4293      	cmp	r3, r2
 800a654:	d113      	bne.n	800a67e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a65c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	695b      	ldr	r3, [r3, #20]
 800a66a:	011b      	lsls	r3, r3, #4
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	4313      	orrs	r3, r2
 800a670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	011b      	lsls	r3, r3, #4
 800a678:	693a      	ldr	r2, [r7, #16]
 800a67a:	4313      	orrs	r3, r2
 800a67c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	685a      	ldr	r2, [r3, #4]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	621a      	str	r2, [r3, #32]
}
 800a698:	bf00      	nop
 800a69a:	371c      	adds	r7, #28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr
 800a6a4:	fffeff8f 	.word	0xfffeff8f
 800a6a8:	40010000 	.word	0x40010000
 800a6ac:	40010400 	.word	0x40010400
 800a6b0:	40014000 	.word	0x40014000
 800a6b4:	40014400 	.word	0x40014400
 800a6b8:	40014800 	.word	0x40014800

0800a6bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6a1b      	ldr	r3, [r3, #32]
 800a6ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a1b      	ldr	r3, [r3, #32]
 800a6d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	69db      	ldr	r3, [r3, #28]
 800a6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a6e4:	68fa      	ldr	r2, [r7, #12]
 800a6e6:	4b24      	ldr	r3, [pc, #144]	; (800a778 <TIM_OC4_SetConfig+0xbc>)
 800a6e8:	4013      	ands	r3, r2
 800a6ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	021b      	lsls	r3, r3, #8
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	689b      	ldr	r3, [r3, #8]
 800a70c:	031b      	lsls	r3, r3, #12
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	4313      	orrs	r3, r2
 800a712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	4a19      	ldr	r2, [pc, #100]	; (800a77c <TIM_OC4_SetConfig+0xc0>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d00f      	beq.n	800a73c <TIM_OC4_SetConfig+0x80>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	4a18      	ldr	r2, [pc, #96]	; (800a780 <TIM_OC4_SetConfig+0xc4>)
 800a720:	4293      	cmp	r3, r2
 800a722:	d00b      	beq.n	800a73c <TIM_OC4_SetConfig+0x80>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4a17      	ldr	r2, [pc, #92]	; (800a784 <TIM_OC4_SetConfig+0xc8>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d007      	beq.n	800a73c <TIM_OC4_SetConfig+0x80>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	4a16      	ldr	r2, [pc, #88]	; (800a788 <TIM_OC4_SetConfig+0xcc>)
 800a730:	4293      	cmp	r3, r2
 800a732:	d003      	beq.n	800a73c <TIM_OC4_SetConfig+0x80>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4a15      	ldr	r2, [pc, #84]	; (800a78c <TIM_OC4_SetConfig+0xd0>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d109      	bne.n	800a750 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	695b      	ldr	r3, [r3, #20]
 800a748:	019b      	lsls	r3, r3, #6
 800a74a:	697a      	ldr	r2, [r7, #20]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	68fa      	ldr	r2, [r7, #12]
 800a75a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	685a      	ldr	r2, [r3, #4]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	693a      	ldr	r2, [r7, #16]
 800a768:	621a      	str	r2, [r3, #32]
}
 800a76a:	bf00      	nop
 800a76c:	371c      	adds	r7, #28
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	feff8fff 	.word	0xfeff8fff
 800a77c:	40010000 	.word	0x40010000
 800a780:	40010400 	.word	0x40010400
 800a784:	40014000 	.word	0x40014000
 800a788:	40014400 	.word	0x40014400
 800a78c:	40014800 	.word	0x40014800

0800a790 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a790:	b480      	push	{r7}
 800a792:	b087      	sub	sp, #28
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6a1b      	ldr	r3, [r3, #32]
 800a79e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a1b      	ldr	r3, [r3, #32]
 800a7aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	4b21      	ldr	r3, [pc, #132]	; (800a840 <TIM_OC5_SetConfig+0xb0>)
 800a7bc:	4013      	ands	r3, r2
 800a7be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a7ca:	693b      	ldr	r3, [r7, #16]
 800a7cc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a7d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	041b      	lsls	r3, r3, #16
 800a7d8:	693a      	ldr	r2, [r7, #16]
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a18      	ldr	r2, [pc, #96]	; (800a844 <TIM_OC5_SetConfig+0xb4>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d00f      	beq.n	800a806 <TIM_OC5_SetConfig+0x76>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a17      	ldr	r2, [pc, #92]	; (800a848 <TIM_OC5_SetConfig+0xb8>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d00b      	beq.n	800a806 <TIM_OC5_SetConfig+0x76>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a16      	ldr	r2, [pc, #88]	; (800a84c <TIM_OC5_SetConfig+0xbc>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d007      	beq.n	800a806 <TIM_OC5_SetConfig+0x76>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a15      	ldr	r2, [pc, #84]	; (800a850 <TIM_OC5_SetConfig+0xc0>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d003      	beq.n	800a806 <TIM_OC5_SetConfig+0x76>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a14      	ldr	r2, [pc, #80]	; (800a854 <TIM_OC5_SetConfig+0xc4>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d109      	bne.n	800a81a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a80c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	695b      	ldr	r3, [r3, #20]
 800a812:	021b      	lsls	r3, r3, #8
 800a814:	697a      	ldr	r2, [r7, #20]
 800a816:	4313      	orrs	r3, r2
 800a818:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	697a      	ldr	r2, [r7, #20]
 800a81e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	685a      	ldr	r2, [r3, #4]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	621a      	str	r2, [r3, #32]
}
 800a834:	bf00      	nop
 800a836:	371c      	adds	r7, #28
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	fffeff8f 	.word	0xfffeff8f
 800a844:	40010000 	.word	0x40010000
 800a848:	40010400 	.word	0x40010400
 800a84c:	40014000 	.word	0x40014000
 800a850:	40014400 	.word	0x40014400
 800a854:	40014800 	.word	0x40014800

0800a858 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a858:	b480      	push	{r7}
 800a85a:	b087      	sub	sp, #28
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6a1b      	ldr	r3, [r3, #32]
 800a866:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6a1b      	ldr	r3, [r3, #32]
 800a872:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	4b22      	ldr	r3, [pc, #136]	; (800a90c <TIM_OC6_SetConfig+0xb4>)
 800a884:	4013      	ands	r3, r2
 800a886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	021b      	lsls	r3, r3, #8
 800a88e:	68fa      	ldr	r2, [r7, #12]
 800a890:	4313      	orrs	r3, r2
 800a892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a89a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	051b      	lsls	r3, r3, #20
 800a8a2:	693a      	ldr	r2, [r7, #16]
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a19      	ldr	r2, [pc, #100]	; (800a910 <TIM_OC6_SetConfig+0xb8>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d00f      	beq.n	800a8d0 <TIM_OC6_SetConfig+0x78>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4a18      	ldr	r2, [pc, #96]	; (800a914 <TIM_OC6_SetConfig+0xbc>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d00b      	beq.n	800a8d0 <TIM_OC6_SetConfig+0x78>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	4a17      	ldr	r2, [pc, #92]	; (800a918 <TIM_OC6_SetConfig+0xc0>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d007      	beq.n	800a8d0 <TIM_OC6_SetConfig+0x78>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a16      	ldr	r2, [pc, #88]	; (800a91c <TIM_OC6_SetConfig+0xc4>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d003      	beq.n	800a8d0 <TIM_OC6_SetConfig+0x78>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a15      	ldr	r2, [pc, #84]	; (800a920 <TIM_OC6_SetConfig+0xc8>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d109      	bne.n	800a8e4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a8d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	695b      	ldr	r3, [r3, #20]
 800a8dc:	029b      	lsls	r3, r3, #10
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	685a      	ldr	r2, [r3, #4]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	693a      	ldr	r2, [r7, #16]
 800a8fc:	621a      	str	r2, [r3, #32]
}
 800a8fe:	bf00      	nop
 800a900:	371c      	adds	r7, #28
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr
 800a90a:	bf00      	nop
 800a90c:	feff8fff 	.word	0xfeff8fff
 800a910:	40010000 	.word	0x40010000
 800a914:	40010400 	.word	0x40010400
 800a918:	40014000 	.word	0x40014000
 800a91c:	40014400 	.word	0x40014400
 800a920:	40014800 	.word	0x40014800

0800a924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a924:	b480      	push	{r7}
 800a926:	b087      	sub	sp, #28
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6a1b      	ldr	r3, [r3, #32]
 800a934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	f023 0201 	bic.w	r2, r3, #1
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	699b      	ldr	r3, [r3, #24]
 800a946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a94e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	011b      	lsls	r3, r3, #4
 800a954:	693a      	ldr	r2, [r7, #16]
 800a956:	4313      	orrs	r3, r2
 800a958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	f023 030a 	bic.w	r3, r3, #10
 800a960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a962:	697a      	ldr	r2, [r7, #20]
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	4313      	orrs	r3, r2
 800a968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	697a      	ldr	r2, [r7, #20]
 800a974:	621a      	str	r2, [r3, #32]
}
 800a976:	bf00      	nop
 800a978:	371c      	adds	r7, #28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr

0800a982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a982:	b480      	push	{r7}
 800a984:	b087      	sub	sp, #28
 800a986:	af00      	add	r7, sp, #0
 800a988:	60f8      	str	r0, [r7, #12]
 800a98a:	60b9      	str	r1, [r7, #8]
 800a98c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6a1b      	ldr	r3, [r3, #32]
 800a992:	f023 0210 	bic.w	r2, r3, #16
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	699b      	ldr	r3, [r3, #24]
 800a99e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6a1b      	ldr	r3, [r3, #32]
 800a9a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a9ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	031b      	lsls	r3, r3, #12
 800a9b2:	697a      	ldr	r2, [r7, #20]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a9be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	011b      	lsls	r3, r3, #4
 800a9c4:	693a      	ldr	r2, [r7, #16]
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	697a      	ldr	r2, [r7, #20]
 800a9ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	693a      	ldr	r2, [r7, #16]
 800a9d4:	621a      	str	r2, [r3, #32]
}
 800a9d6:	bf00      	nop
 800a9d8:	371c      	adds	r7, #28
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr
	...

0800a9e4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b085      	sub	sp, #20
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	4b09      	ldr	r3, [pc, #36]	; (800aa1c <TIM_ITRx_SetConfig+0x38>)
 800a9f8:	4013      	ands	r3, r2
 800a9fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a9fc:	683a      	ldr	r2, [r7, #0]
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	4313      	orrs	r3, r2
 800aa02:	f043 0307 	orr.w	r3, r3, #7
 800aa06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	609a      	str	r2, [r3, #8]
}
 800aa0e:	bf00      	nop
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	ffcfff8f 	.word	0xffcfff8f

0800aa20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b087      	sub	sp, #28
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	021a      	lsls	r2, r3, #8
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	431a      	orrs	r2, r3
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	697a      	ldr	r2, [r7, #20]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	609a      	str	r2, [r3, #8]
}
 800aa54:	bf00      	nop
 800aa56:	371c      	adds	r7, #28
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5e:	4770      	bx	lr

0800aa60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b087      	sub	sp, #28
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	f003 031f 	and.w	r3, r3, #31
 800aa72:	2201      	movs	r2, #1
 800aa74:	fa02 f303 	lsl.w	r3, r2, r3
 800aa78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	6a1a      	ldr	r2, [r3, #32]
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	43db      	mvns	r3, r3
 800aa82:	401a      	ands	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	6a1a      	ldr	r2, [r3, #32]
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	f003 031f 	and.w	r3, r3, #31
 800aa92:	6879      	ldr	r1, [r7, #4]
 800aa94:	fa01 f303 	lsl.w	r3, r1, r3
 800aa98:	431a      	orrs	r2, r3
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	621a      	str	r2, [r3, #32]
}
 800aa9e:	bf00      	nop
 800aaa0:	371c      	adds	r7, #28
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr
	...

0800aaac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b085      	sub	sp, #20
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d101      	bne.n	800aac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aac0:	2302      	movs	r3, #2
 800aac2:	e06d      	b.n	800aba0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2202      	movs	r2, #2
 800aad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	685b      	ldr	r3, [r3, #4]
 800aada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a30      	ldr	r2, [pc, #192]	; (800abac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d004      	beq.n	800aaf8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a2f      	ldr	r2, [pc, #188]	; (800abb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d108      	bne.n	800ab0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aafe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a20      	ldr	r2, [pc, #128]	; (800abac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d022      	beq.n	800ab74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab36:	d01d      	beq.n	800ab74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a1d      	ldr	r2, [pc, #116]	; (800abb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d018      	beq.n	800ab74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a1c      	ldr	r2, [pc, #112]	; (800abb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d013      	beq.n	800ab74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a1a      	ldr	r2, [pc, #104]	; (800abbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d00e      	beq.n	800ab74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a15      	ldr	r2, [pc, #84]	; (800abb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d009      	beq.n	800ab74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a16      	ldr	r2, [pc, #88]	; (800abc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d004      	beq.n	800ab74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a15      	ldr	r2, [pc, #84]	; (800abc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d10c      	bne.n	800ab8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	68ba      	ldr	r2, [r7, #8]
 800ab82:	4313      	orrs	r3, r2
 800ab84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2201      	movs	r2, #1
 800ab92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	3714      	adds	r7, #20
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr
 800abac:	40010000 	.word	0x40010000
 800abb0:	40010400 	.word	0x40010400
 800abb4:	40000400 	.word	0x40000400
 800abb8:	40000800 	.word	0x40000800
 800abbc:	40000c00 	.word	0x40000c00
 800abc0:	40001800 	.word	0x40001800
 800abc4:	40014000 	.word	0x40014000

0800abc8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800abc8:	b480      	push	{r7}
 800abca:	b085      	sub	sp, #20
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800abd2:	2300      	movs	r3, #0
 800abd4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d101      	bne.n	800abe4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800abe0:	2302      	movs	r3, #2
 800abe2:	e065      	b.n	800acb0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4313      	orrs	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	691b      	ldr	r3, [r3, #16]
 800ac2e:	4313      	orrs	r3, r2
 800ac30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	695b      	ldr	r3, [r3, #20]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	699b      	ldr	r3, [r3, #24]
 800ac58:	041b      	lsls	r3, r3, #16
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	4a16      	ldr	r2, [pc, #88]	; (800acbc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d004      	beq.n	800ac72 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a14      	ldr	r2, [pc, #80]	; (800acc0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d115      	bne.n	800ac9e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7c:	051b      	lsls	r3, r3, #20
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	69db      	ldr	r3, [r3, #28]
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	6a1b      	ldr	r3, [r3, #32]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2200      	movs	r2, #0
 800acaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	40010000 	.word	0x40010000
 800acc0:	40010400 	.word	0x40010400

0800acc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ace0:	bf00      	nop
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d101      	bne.n	800ad12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	e042      	b.n	800ad98 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d106      	bne.n	800ad2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7f8 fd4f 	bl	80037c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2224      	movs	r2, #36	; 0x24
 800ad2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	681a      	ldr	r2, [r3, #0]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f022 0201 	bic.w	r2, r2, #1
 800ad40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fd54 	bl	800b7f0 <UART_SetConfig>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d101      	bne.n	800ad52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e022      	b.n	800ad98 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d002      	beq.n	800ad60 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f001 faa8 	bl	800c2b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685a      	ldr	r2, [r3, #4]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	689a      	ldr	r2, [r3, #8]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f042 0201 	orr.w	r2, r2, #1
 800ad8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f001 fb2f 	bl	800c3f4 <UART_CheckIdleState>
 800ad96:	4603      	mov	r3, r0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3708      	adds	r7, #8
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b08a      	sub	sp, #40	; 0x28
 800ada4:	af02      	add	r7, sp, #8
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	603b      	str	r3, [r7, #0]
 800adac:	4613      	mov	r3, r2
 800adae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adb6:	2b20      	cmp	r3, #32
 800adb8:	f040 8083 	bne.w	800aec2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d002      	beq.n	800adc8 <HAL_UART_Transmit+0x28>
 800adc2:	88fb      	ldrh	r3, [r7, #6]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d101      	bne.n	800adcc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	e07b      	b.n	800aec4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800add2:	2b01      	cmp	r3, #1
 800add4:	d101      	bne.n	800adda <HAL_UART_Transmit+0x3a>
 800add6:	2302      	movs	r3, #2
 800add8:	e074      	b.n	800aec4 <HAL_UART_Transmit+0x124>
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2201      	movs	r2, #1
 800adde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2200      	movs	r2, #0
 800ade6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2221      	movs	r2, #33	; 0x21
 800adee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800adf2:	f7f9 f9f9 	bl	80041e8 <HAL_GetTick>
 800adf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	88fa      	ldrh	r2, [r7, #6]
 800adfc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	88fa      	ldrh	r2, [r7, #6]
 800ae04:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae10:	d108      	bne.n	800ae24 <HAL_UART_Transmit+0x84>
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d104      	bne.n	800ae24 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	61bb      	str	r3, [r7, #24]
 800ae22:	e003      	b.n	800ae2c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2200      	movs	r2, #0
 800ae30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ae34:	e02c      	b.n	800ae90 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	9300      	str	r3, [sp, #0]
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	2180      	movs	r1, #128	; 0x80
 800ae40:	68f8      	ldr	r0, [r7, #12]
 800ae42:	f001 fb22 	bl	800c48a <UART_WaitOnFlagUntilTimeout>
 800ae46:	4603      	mov	r3, r0
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d001      	beq.n	800ae50 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e039      	b.n	800aec4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d10b      	bne.n	800ae6e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ae56:	69bb      	ldr	r3, [r7, #24]
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ae64:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	3302      	adds	r3, #2
 800ae6a:	61bb      	str	r3, [r7, #24]
 800ae6c:	e007      	b.n	800ae7e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	781a      	ldrb	r2, [r3, #0]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ae84:	b29b      	uxth	r3, r3
 800ae86:	3b01      	subs	r3, #1
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1cc      	bne.n	800ae36 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	2200      	movs	r2, #0
 800aea4:	2140      	movs	r1, #64	; 0x40
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f001 faef 	bl	800c48a <UART_WaitOnFlagUntilTimeout>
 800aeac:	4603      	mov	r3, r0
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d001      	beq.n	800aeb6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	e006      	b.n	800aec4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2220      	movs	r2, #32
 800aeba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	e000      	b.n	800aec4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800aec2:	2302      	movs	r3, #2
  }
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3720      	adds	r7, #32
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b08a      	sub	sp, #40	; 0x28
 800aed0:	af02      	add	r7, sp, #8
 800aed2:	60f8      	str	r0, [r7, #12]
 800aed4:	60b9      	str	r1, [r7, #8]
 800aed6:	603b      	str	r3, [r7, #0]
 800aed8:	4613      	mov	r3, r2
 800aeda:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aee2:	2b20      	cmp	r3, #32
 800aee4:	f040 80c0 	bne.w	800b068 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d002      	beq.n	800aef4 <HAL_UART_Receive+0x28>
 800aeee:	88fb      	ldrh	r3, [r7, #6]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d101      	bne.n	800aef8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	e0b8      	b.n	800b06a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d101      	bne.n	800af06 <HAL_UART_Receive+0x3a>
 800af02:	2302      	movs	r3, #2
 800af04:	e0b1      	b.n	800b06a <HAL_UART_Receive+0x19e>
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2201      	movs	r2, #1
 800af0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	2200      	movs	r2, #0
 800af12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2222      	movs	r2, #34	; 0x22
 800af1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2200      	movs	r2, #0
 800af22:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800af24:	f7f9 f960 	bl	80041e8 <HAL_GetTick>
 800af28:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	88fa      	ldrh	r2, [r7, #6]
 800af2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	88fa      	ldrh	r2, [r7, #6]
 800af36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af42:	d10e      	bne.n	800af62 <HAL_UART_Receive+0x96>
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d105      	bne.n	800af58 <HAL_UART_Receive+0x8c>
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800af52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800af56:	e02d      	b.n	800afb4 <HAL_UART_Receive+0xe8>
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	22ff      	movs	r2, #255	; 0xff
 800af5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800af60:	e028      	b.n	800afb4 <HAL_UART_Receive+0xe8>
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	689b      	ldr	r3, [r3, #8]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10d      	bne.n	800af86 <HAL_UART_Receive+0xba>
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	691b      	ldr	r3, [r3, #16]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d104      	bne.n	800af7c <HAL_UART_Receive+0xb0>
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	22ff      	movs	r2, #255	; 0xff
 800af76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800af7a:	e01b      	b.n	800afb4 <HAL_UART_Receive+0xe8>
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	227f      	movs	r2, #127	; 0x7f
 800af80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800af84:	e016      	b.n	800afb4 <HAL_UART_Receive+0xe8>
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	689b      	ldr	r3, [r3, #8]
 800af8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af8e:	d10d      	bne.n	800afac <HAL_UART_Receive+0xe0>
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d104      	bne.n	800afa2 <HAL_UART_Receive+0xd6>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	227f      	movs	r2, #127	; 0x7f
 800af9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800afa0:	e008      	b.n	800afb4 <HAL_UART_Receive+0xe8>
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	223f      	movs	r2, #63	; 0x3f
 800afa6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800afaa:	e003      	b.n	800afb4 <HAL_UART_Receive+0xe8>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800afba:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afc4:	d108      	bne.n	800afd8 <HAL_UART_Receive+0x10c>
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d104      	bne.n	800afd8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800afce:	2300      	movs	r3, #0
 800afd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	61bb      	str	r3, [r7, #24]
 800afd6:	e003      	b.n	800afe0 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800afdc:	2300      	movs	r3, #0
 800afde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2200      	movs	r2, #0
 800afe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800afe8:	e032      	b.n	800b050 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	9300      	str	r3, [sp, #0]
 800afee:	697b      	ldr	r3, [r7, #20]
 800aff0:	2200      	movs	r2, #0
 800aff2:	2120      	movs	r1, #32
 800aff4:	68f8      	ldr	r0, [r7, #12]
 800aff6:	f001 fa48 	bl	800c48a <UART_WaitOnFlagUntilTimeout>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d001      	beq.n	800b004 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800b000:	2303      	movs	r3, #3
 800b002:	e032      	b.n	800b06a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d10c      	bne.n	800b024 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b010:	b29a      	uxth	r2, r3
 800b012:	8a7b      	ldrh	r3, [r7, #18]
 800b014:	4013      	ands	r3, r2
 800b016:	b29a      	uxth	r2, r3
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800b01c:	69bb      	ldr	r3, [r7, #24]
 800b01e:	3302      	adds	r3, #2
 800b020:	61bb      	str	r3, [r7, #24]
 800b022:	e00c      	b.n	800b03e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b02a:	b2da      	uxtb	r2, r3
 800b02c:	8a7b      	ldrh	r3, [r7, #18]
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	4013      	ands	r3, r2
 800b032:	b2da      	uxtb	r2, r3
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	3301      	adds	r3, #1
 800b03c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b044:	b29b      	uxth	r3, r3
 800b046:	3b01      	subs	r3, #1
 800b048:	b29a      	uxth	r2, r3
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b056:	b29b      	uxth	r3, r3
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d1c6      	bne.n	800afea <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2220      	movs	r2, #32
 800b060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	e000      	b.n	800b06a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800b068:	2302      	movs	r3, #2
  }
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	3720      	adds	r7, #32
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
	...

0800b074 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b0ba      	sub	sp, #232	; 0xe8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	69db      	ldr	r3, [r3, #28]
 800b082:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b09a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b09e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b0a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d11b      	bne.n	800b0e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b0b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0b4:	f003 0320 	and.w	r3, r3, #32
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d015      	beq.n	800b0e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b0bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0c0:	f003 0320 	and.w	r3, r3, #32
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d105      	bne.n	800b0d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b0c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d009      	beq.n	800b0e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	f000 835a 	beq.w	800b792 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e2:	6878      	ldr	r0, [r7, #4]
 800b0e4:	4798      	blx	r3
      }
      return;
 800b0e6:	e354      	b.n	800b792 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b0e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f000 811f 	beq.w	800b330 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b0f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b0f6:	4b8b      	ldr	r3, [pc, #556]	; (800b324 <HAL_UART_IRQHandler+0x2b0>)
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d106      	bne.n	800b10c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b0fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b102:	4b89      	ldr	r3, [pc, #548]	; (800b328 <HAL_UART_IRQHandler+0x2b4>)
 800b104:	4013      	ands	r3, r2
 800b106:	2b00      	cmp	r3, #0
 800b108:	f000 8112 	beq.w	800b330 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b10c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	d011      	beq.n	800b13c <HAL_UART_IRQHandler+0xc8>
 800b118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b11c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00b      	beq.n	800b13c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	2201      	movs	r2, #1
 800b12a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b132:	f043 0201 	orr.w	r2, r3, #1
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b13c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b140:	f003 0302 	and.w	r3, r3, #2
 800b144:	2b00      	cmp	r3, #0
 800b146:	d011      	beq.n	800b16c <HAL_UART_IRQHandler+0xf8>
 800b148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b14c:	f003 0301 	and.w	r3, r3, #1
 800b150:	2b00      	cmp	r3, #0
 800b152:	d00b      	beq.n	800b16c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2202      	movs	r2, #2
 800b15a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b162:	f043 0204 	orr.w	r2, r3, #4
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b16c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b170:	f003 0304 	and.w	r3, r3, #4
 800b174:	2b00      	cmp	r3, #0
 800b176:	d011      	beq.n	800b19c <HAL_UART_IRQHandler+0x128>
 800b178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b17c:	f003 0301 	and.w	r3, r3, #1
 800b180:	2b00      	cmp	r3, #0
 800b182:	d00b      	beq.n	800b19c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	2204      	movs	r2, #4
 800b18a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b192:	f043 0202 	orr.w	r2, r3, #2
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b19c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1a0:	f003 0308 	and.w	r3, r3, #8
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d017      	beq.n	800b1d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b1a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1ac:	f003 0320 	and.w	r3, r3, #32
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d105      	bne.n	800b1c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b1b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b1b8:	4b5a      	ldr	r3, [pc, #360]	; (800b324 <HAL_UART_IRQHandler+0x2b0>)
 800b1ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d00b      	beq.n	800b1d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	2208      	movs	r2, #8
 800b1c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1ce:	f043 0208 	orr.w	r2, r3, #8
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b1d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d012      	beq.n	800b20a <HAL_UART_IRQHandler+0x196>
 800b1e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d00c      	beq.n	800b20a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b1f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b200:	f043 0220 	orr.w	r2, r3, #32
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b210:	2b00      	cmp	r3, #0
 800b212:	f000 82c0 	beq.w	800b796 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b21a:	f003 0320 	and.w	r3, r3, #32
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d013      	beq.n	800b24a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b222:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b226:	f003 0320 	and.w	r3, r3, #32
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d105      	bne.n	800b23a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b22e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b236:	2b00      	cmp	r3, #0
 800b238:	d007      	beq.n	800b24a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d003      	beq.n	800b24a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b250:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b25e:	2b40      	cmp	r3, #64	; 0x40
 800b260:	d005      	beq.n	800b26e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b266:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d04f      	beq.n	800b30e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f001 f9d4 	bl	800c61c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b27e:	2b40      	cmp	r3, #64	; 0x40
 800b280:	d141      	bne.n	800b306 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	3308      	adds	r3, #8
 800b288:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b290:	e853 3f00 	ldrex	r3, [r3]
 800b294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b29c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	3308      	adds	r3, #8
 800b2aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b2ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b2b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b2ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b2be:	e841 2300 	strex	r3, r2, [r1]
 800b2c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b2c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1d9      	bne.n	800b282 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d013      	beq.n	800b2fe <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2da:	4a14      	ldr	r2, [pc, #80]	; (800b32c <HAL_UART_IRQHandler+0x2b8>)
 800b2dc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fa f818 	bl	8005318 <HAL_DMA_Abort_IT>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d017      	beq.n	800b31e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2f4:	687a      	ldr	r2, [r7, #4]
 800b2f6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b2f8:	4610      	mov	r0, r2
 800b2fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b2fc:	e00f      	b.n	800b31e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f000 fa60 	bl	800b7c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b304:	e00b      	b.n	800b31e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fa5c 	bl	800b7c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b30c:	e007      	b.n	800b31e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f000 fa58 	bl	800b7c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2200      	movs	r2, #0
 800b318:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b31c:	e23b      	b.n	800b796 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b31e:	bf00      	nop
    return;
 800b320:	e239      	b.n	800b796 <HAL_UART_IRQHandler+0x722>
 800b322:	bf00      	nop
 800b324:	10000001 	.word	0x10000001
 800b328:	04000120 	.word	0x04000120
 800b32c:	0800c6e9 	.word	0x0800c6e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b334:	2b01      	cmp	r3, #1
 800b336:	f040 81ce 	bne.w	800b6d6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b33a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b33e:	f003 0310 	and.w	r3, r3, #16
 800b342:	2b00      	cmp	r3, #0
 800b344:	f000 81c7 	beq.w	800b6d6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b34c:	f003 0310 	and.w	r3, r3, #16
 800b350:	2b00      	cmp	r3, #0
 800b352:	f000 81c0 	beq.w	800b6d6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2210      	movs	r2, #16
 800b35c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b368:	2b40      	cmp	r3, #64	; 0x40
 800b36a:	f040 813b 	bne.w	800b5e4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a8b      	ldr	r2, [pc, #556]	; (800b5a4 <HAL_UART_IRQHandler+0x530>)
 800b376:	4293      	cmp	r3, r2
 800b378:	d059      	beq.n	800b42e <HAL_UART_IRQHandler+0x3ba>
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a89      	ldr	r2, [pc, #548]	; (800b5a8 <HAL_UART_IRQHandler+0x534>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d053      	beq.n	800b42e <HAL_UART_IRQHandler+0x3ba>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a87      	ldr	r2, [pc, #540]	; (800b5ac <HAL_UART_IRQHandler+0x538>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d04d      	beq.n	800b42e <HAL_UART_IRQHandler+0x3ba>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a85      	ldr	r2, [pc, #532]	; (800b5b0 <HAL_UART_IRQHandler+0x53c>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d047      	beq.n	800b42e <HAL_UART_IRQHandler+0x3ba>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a83      	ldr	r2, [pc, #524]	; (800b5b4 <HAL_UART_IRQHandler+0x540>)
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	d041      	beq.n	800b42e <HAL_UART_IRQHandler+0x3ba>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	4a81      	ldr	r2, [pc, #516]	; (800b5b8 <HAL_UART_IRQHandler+0x544>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d03b      	beq.n	800b42e <HAL_UART_IRQHandler+0x3ba>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a7f      	ldr	r2, [pc, #508]	; (800b5bc <HAL_UART_IRQHandler+0x548>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d035      	beq.n	800b42e <HAL_UART_IRQHandler+0x3ba>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a7d      	ldr	r2, [pc, #500]	; (800b5c0 <HAL_UART_IRQHandler+0x54c>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d02f      	beq.n	800b42e <HAL_UART_IRQHandler+0x3ba>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	4a7b      	ldr	r2, [pc, #492]	; (800b5c4 <HAL_UART_IRQHandler+0x550>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d029      	beq.n	800b42e <HAL_UART_IRQHandler+0x3ba>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a79      	ldr	r2, [pc, #484]	; (800b5c8 <HAL_UART_IRQHandler+0x554>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d023      	beq.n	800b42e <HAL_UART_IRQHandler+0x3ba>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	4a77      	ldr	r2, [pc, #476]	; (800b5cc <HAL_UART_IRQHandler+0x558>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d01d      	beq.n	800b42e <HAL_UART_IRQHandler+0x3ba>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a75      	ldr	r2, [pc, #468]	; (800b5d0 <HAL_UART_IRQHandler+0x55c>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d017      	beq.n	800b42e <HAL_UART_IRQHandler+0x3ba>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4a73      	ldr	r2, [pc, #460]	; (800b5d4 <HAL_UART_IRQHandler+0x560>)
 800b406:	4293      	cmp	r3, r2
 800b408:	d011      	beq.n	800b42e <HAL_UART_IRQHandler+0x3ba>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a71      	ldr	r2, [pc, #452]	; (800b5d8 <HAL_UART_IRQHandler+0x564>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d00b      	beq.n	800b42e <HAL_UART_IRQHandler+0x3ba>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a6f      	ldr	r2, [pc, #444]	; (800b5dc <HAL_UART_IRQHandler+0x568>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d005      	beq.n	800b42e <HAL_UART_IRQHandler+0x3ba>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	4a6d      	ldr	r2, [pc, #436]	; (800b5e0 <HAL_UART_IRQHandler+0x56c>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d105      	bne.n	800b43a <HAL_UART_IRQHandler+0x3c6>
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	685b      	ldr	r3, [r3, #4]
 800b436:	b29b      	uxth	r3, r3
 800b438:	e004      	b.n	800b444 <HAL_UART_IRQHandler+0x3d0>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	b29b      	uxth	r3, r3
 800b444:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b448:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f000 81a4 	beq.w	800b79a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b458:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b45c:	429a      	cmp	r2, r3
 800b45e:	f080 819c 	bcs.w	800b79a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b468:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b470:	69db      	ldr	r3, [r3, #28]
 800b472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b476:	f000 8086 	beq.w	800b586 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b482:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b486:	e853 3f00 	ldrex	r3, [r3]
 800b48a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b48e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b492:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b496:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	461a      	mov	r2, r3
 800b4a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b4a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b4a8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b4b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b4b4:	e841 2300 	strex	r3, r2, [r1]
 800b4b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b4bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d1da      	bne.n	800b47a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	3308      	adds	r3, #8
 800b4ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b4ce:	e853 3f00 	ldrex	r3, [r3]
 800b4d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b4d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4d6:	f023 0301 	bic.w	r3, r3, #1
 800b4da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	3308      	adds	r3, #8
 800b4e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b4e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b4ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b4f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b4f4:	e841 2300 	strex	r3, r2, [r1]
 800b4f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b4fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d1e1      	bne.n	800b4c4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	3308      	adds	r3, #8
 800b506:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b508:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b50a:	e853 3f00 	ldrex	r3, [r3]
 800b50e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b516:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	3308      	adds	r3, #8
 800b520:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b524:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b526:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b528:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b52a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b52c:	e841 2300 	strex	r3, r2, [r1]
 800b530:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b534:	2b00      	cmp	r3, #0
 800b536:	d1e3      	bne.n	800b500 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2220      	movs	r2, #32
 800b53c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b54c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b54e:	e853 3f00 	ldrex	r3, [r3]
 800b552:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b556:	f023 0310 	bic.w	r3, r3, #16
 800b55a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	461a      	mov	r2, r3
 800b564:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b568:	65bb      	str	r3, [r7, #88]	; 0x58
 800b56a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b56e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b570:	e841 2300 	strex	r3, r2, [r1]
 800b574:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1e4      	bne.n	800b546 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b580:	4618      	mov	r0, r3
 800b582:	f7f9 fbab 	bl	8004cdc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b592:	b29b      	uxth	r3, r3
 800b594:	1ad3      	subs	r3, r2, r3
 800b596:	b29b      	uxth	r3, r3
 800b598:	4619      	mov	r1, r3
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f91c 	bl	800b7d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b5a0:	e0fb      	b.n	800b79a <HAL_UART_IRQHandler+0x726>
 800b5a2:	bf00      	nop
 800b5a4:	40020010 	.word	0x40020010
 800b5a8:	40020028 	.word	0x40020028
 800b5ac:	40020040 	.word	0x40020040
 800b5b0:	40020058 	.word	0x40020058
 800b5b4:	40020070 	.word	0x40020070
 800b5b8:	40020088 	.word	0x40020088
 800b5bc:	400200a0 	.word	0x400200a0
 800b5c0:	400200b8 	.word	0x400200b8
 800b5c4:	40020410 	.word	0x40020410
 800b5c8:	40020428 	.word	0x40020428
 800b5cc:	40020440 	.word	0x40020440
 800b5d0:	40020458 	.word	0x40020458
 800b5d4:	40020470 	.word	0x40020470
 800b5d8:	40020488 	.word	0x40020488
 800b5dc:	400204a0 	.word	0x400204a0
 800b5e0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5f0:	b29b      	uxth	r3, r3
 800b5f2:	1ad3      	subs	r3, r2, r3
 800b5f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	2b00      	cmp	r3, #0
 800b602:	f000 80cc 	beq.w	800b79e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800b606:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f000 80c7 	beq.w	800b79e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b618:	e853 3f00 	ldrex	r3, [r3]
 800b61c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b620:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b624:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	461a      	mov	r2, r3
 800b62e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b632:	647b      	str	r3, [r7, #68]	; 0x44
 800b634:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b636:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b638:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b63a:	e841 2300 	strex	r3, r2, [r1]
 800b63e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b642:	2b00      	cmp	r3, #0
 800b644:	d1e4      	bne.n	800b610 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	3308      	adds	r3, #8
 800b64c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b650:	e853 3f00 	ldrex	r3, [r3]
 800b654:	623b      	str	r3, [r7, #32]
   return(result);
 800b656:	6a3a      	ldr	r2, [r7, #32]
 800b658:	4b54      	ldr	r3, [pc, #336]	; (800b7ac <HAL_UART_IRQHandler+0x738>)
 800b65a:	4013      	ands	r3, r2
 800b65c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3308      	adds	r3, #8
 800b666:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b66a:	633a      	str	r2, [r7, #48]	; 0x30
 800b66c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b66e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b672:	e841 2300 	strex	r3, r2, [r1]
 800b676:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d1e3      	bne.n	800b646 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2220      	movs	r2, #32
 800b682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2200      	movs	r2, #0
 800b68a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2200      	movs	r2, #0
 800b690:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	e853 3f00 	ldrex	r3, [r3]
 800b69e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f023 0310 	bic.w	r3, r3, #16
 800b6a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b6b4:	61fb      	str	r3, [r7, #28]
 800b6b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b8:	69b9      	ldr	r1, [r7, #24]
 800b6ba:	69fa      	ldr	r2, [r7, #28]
 800b6bc:	e841 2300 	strex	r3, r2, [r1]
 800b6c0:	617b      	str	r3, [r7, #20]
   return(result);
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1e4      	bne.n	800b692 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b6c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 f882 	bl	800b7d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b6d4:	e063      	b.n	800b79e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d00e      	beq.n	800b700 <HAL_UART_IRQHandler+0x68c>
 800b6e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b6e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d008      	beq.n	800b700 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b6f6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b6f8:	6878      	ldr	r0, [r7, #4]
 800b6fa:	f001 f836 	bl	800c76a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b6fe:	e051      	b.n	800b7a4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d014      	beq.n	800b736 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b70c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b714:	2b00      	cmp	r3, #0
 800b716:	d105      	bne.n	800b724 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b71c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b720:	2b00      	cmp	r3, #0
 800b722:	d008      	beq.n	800b736 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d03a      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	4798      	blx	r3
    }
    return;
 800b734:	e035      	b.n	800b7a2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b73a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d009      	beq.n	800b756 <HAL_UART_IRQHandler+0x6e2>
 800b742:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d003      	beq.n	800b756 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 ffe0 	bl	800c714 <UART_EndTransmit_IT>
    return;
 800b754:	e026      	b.n	800b7a4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b75a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d009      	beq.n	800b776 <HAL_UART_IRQHandler+0x702>
 800b762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b766:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d003      	beq.n	800b776 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f001 f80f 	bl	800c792 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b774:	e016      	b.n	800b7a4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b77a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d010      	beq.n	800b7a4 <HAL_UART_IRQHandler+0x730>
 800b782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b786:	2b00      	cmp	r3, #0
 800b788:	da0c      	bge.n	800b7a4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f000 fff7 	bl	800c77e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b790:	e008      	b.n	800b7a4 <HAL_UART_IRQHandler+0x730>
      return;
 800b792:	bf00      	nop
 800b794:	e006      	b.n	800b7a4 <HAL_UART_IRQHandler+0x730>
    return;
 800b796:	bf00      	nop
 800b798:	e004      	b.n	800b7a4 <HAL_UART_IRQHandler+0x730>
      return;
 800b79a:	bf00      	nop
 800b79c:	e002      	b.n	800b7a4 <HAL_UART_IRQHandler+0x730>
      return;
 800b79e:	bf00      	nop
 800b7a0:	e000      	b.n	800b7a4 <HAL_UART_IRQHandler+0x730>
    return;
 800b7a2:	bf00      	nop
  }
}
 800b7a4:	37e8      	adds	r7, #232	; 0xe8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	effffffe 	.word	0xeffffffe

0800b7b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b083      	sub	sp, #12
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b7b8:	bf00      	nop
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b083      	sub	sp, #12
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b7cc:	bf00      	nop
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr

0800b7d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr

0800b7f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7f0:	b5b0      	push	{r4, r5, r7, lr}
 800b7f2:	b08e      	sub	sp, #56	; 0x38
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	689a      	ldr	r2, [r3, #8]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	691b      	ldr	r3, [r3, #16]
 800b806:	431a      	orrs	r2, r3
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	695b      	ldr	r3, [r3, #20]
 800b80c:	431a      	orrs	r2, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	69db      	ldr	r3, [r3, #28]
 800b812:	4313      	orrs	r3, r2
 800b814:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681a      	ldr	r2, [r3, #0]
 800b81c:	4bbf      	ldr	r3, [pc, #764]	; (800bb1c <UART_SetConfig+0x32c>)
 800b81e:	4013      	ands	r3, r2
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	6812      	ldr	r2, [r2, #0]
 800b824:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b826:	430b      	orrs	r3, r1
 800b828:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	68da      	ldr	r2, [r3, #12]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	430a      	orrs	r2, r1
 800b83e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	699b      	ldr	r3, [r3, #24]
 800b844:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4ab5      	ldr	r2, [pc, #724]	; (800bb20 <UART_SetConfig+0x330>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d004      	beq.n	800b85a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a1b      	ldr	r3, [r3, #32]
 800b854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b856:	4313      	orrs	r3, r2
 800b858:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	689a      	ldr	r2, [r3, #8]
 800b860:	4bb0      	ldr	r3, [pc, #704]	; (800bb24 <UART_SetConfig+0x334>)
 800b862:	4013      	ands	r3, r2
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	6812      	ldr	r2, [r2, #0]
 800b868:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b86a:	430b      	orrs	r3, r1
 800b86c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b874:	f023 010f 	bic.w	r1, r3, #15
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	430a      	orrs	r2, r1
 800b882:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4aa7      	ldr	r2, [pc, #668]	; (800bb28 <UART_SetConfig+0x338>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d176      	bne.n	800b97c <UART_SetConfig+0x18c>
 800b88e:	4ba7      	ldr	r3, [pc, #668]	; (800bb2c <UART_SetConfig+0x33c>)
 800b890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b892:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b896:	2b28      	cmp	r3, #40	; 0x28
 800b898:	d86c      	bhi.n	800b974 <UART_SetConfig+0x184>
 800b89a:	a201      	add	r2, pc, #4	; (adr r2, 800b8a0 <UART_SetConfig+0xb0>)
 800b89c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a0:	0800b945 	.word	0x0800b945
 800b8a4:	0800b975 	.word	0x0800b975
 800b8a8:	0800b975 	.word	0x0800b975
 800b8ac:	0800b975 	.word	0x0800b975
 800b8b0:	0800b975 	.word	0x0800b975
 800b8b4:	0800b975 	.word	0x0800b975
 800b8b8:	0800b975 	.word	0x0800b975
 800b8bc:	0800b975 	.word	0x0800b975
 800b8c0:	0800b94d 	.word	0x0800b94d
 800b8c4:	0800b975 	.word	0x0800b975
 800b8c8:	0800b975 	.word	0x0800b975
 800b8cc:	0800b975 	.word	0x0800b975
 800b8d0:	0800b975 	.word	0x0800b975
 800b8d4:	0800b975 	.word	0x0800b975
 800b8d8:	0800b975 	.word	0x0800b975
 800b8dc:	0800b975 	.word	0x0800b975
 800b8e0:	0800b955 	.word	0x0800b955
 800b8e4:	0800b975 	.word	0x0800b975
 800b8e8:	0800b975 	.word	0x0800b975
 800b8ec:	0800b975 	.word	0x0800b975
 800b8f0:	0800b975 	.word	0x0800b975
 800b8f4:	0800b975 	.word	0x0800b975
 800b8f8:	0800b975 	.word	0x0800b975
 800b8fc:	0800b975 	.word	0x0800b975
 800b900:	0800b95d 	.word	0x0800b95d
 800b904:	0800b975 	.word	0x0800b975
 800b908:	0800b975 	.word	0x0800b975
 800b90c:	0800b975 	.word	0x0800b975
 800b910:	0800b975 	.word	0x0800b975
 800b914:	0800b975 	.word	0x0800b975
 800b918:	0800b975 	.word	0x0800b975
 800b91c:	0800b975 	.word	0x0800b975
 800b920:	0800b965 	.word	0x0800b965
 800b924:	0800b975 	.word	0x0800b975
 800b928:	0800b975 	.word	0x0800b975
 800b92c:	0800b975 	.word	0x0800b975
 800b930:	0800b975 	.word	0x0800b975
 800b934:	0800b975 	.word	0x0800b975
 800b938:	0800b975 	.word	0x0800b975
 800b93c:	0800b975 	.word	0x0800b975
 800b940:	0800b96d 	.word	0x0800b96d
 800b944:	2301      	movs	r3, #1
 800b946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b94a:	e222      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800b94c:	2304      	movs	r3, #4
 800b94e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b952:	e21e      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800b954:	2308      	movs	r3, #8
 800b956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b95a:	e21a      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800b95c:	2310      	movs	r3, #16
 800b95e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b962:	e216      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800b964:	2320      	movs	r3, #32
 800b966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b96a:	e212      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800b96c:	2340      	movs	r3, #64	; 0x40
 800b96e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b972:	e20e      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800b974:	2380      	movs	r3, #128	; 0x80
 800b976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b97a:	e20a      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a6b      	ldr	r2, [pc, #428]	; (800bb30 <UART_SetConfig+0x340>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d130      	bne.n	800b9e8 <UART_SetConfig+0x1f8>
 800b986:	4b69      	ldr	r3, [pc, #420]	; (800bb2c <UART_SetConfig+0x33c>)
 800b988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b98a:	f003 0307 	and.w	r3, r3, #7
 800b98e:	2b05      	cmp	r3, #5
 800b990:	d826      	bhi.n	800b9e0 <UART_SetConfig+0x1f0>
 800b992:	a201      	add	r2, pc, #4	; (adr r2, 800b998 <UART_SetConfig+0x1a8>)
 800b994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b998:	0800b9b1 	.word	0x0800b9b1
 800b99c:	0800b9b9 	.word	0x0800b9b9
 800b9a0:	0800b9c1 	.word	0x0800b9c1
 800b9a4:	0800b9c9 	.word	0x0800b9c9
 800b9a8:	0800b9d1 	.word	0x0800b9d1
 800b9ac:	0800b9d9 	.word	0x0800b9d9
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9b6:	e1ec      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800b9b8:	2304      	movs	r3, #4
 800b9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9be:	e1e8      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800b9c0:	2308      	movs	r3, #8
 800b9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9c6:	e1e4      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800b9c8:	2310      	movs	r3, #16
 800b9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9ce:	e1e0      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800b9d0:	2320      	movs	r3, #32
 800b9d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9d6:	e1dc      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800b9d8:	2340      	movs	r3, #64	; 0x40
 800b9da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9de:	e1d8      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800b9e0:	2380      	movs	r3, #128	; 0x80
 800b9e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b9e6:	e1d4      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a51      	ldr	r2, [pc, #324]	; (800bb34 <UART_SetConfig+0x344>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	d130      	bne.n	800ba54 <UART_SetConfig+0x264>
 800b9f2:	4b4e      	ldr	r3, [pc, #312]	; (800bb2c <UART_SetConfig+0x33c>)
 800b9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9f6:	f003 0307 	and.w	r3, r3, #7
 800b9fa:	2b05      	cmp	r3, #5
 800b9fc:	d826      	bhi.n	800ba4c <UART_SetConfig+0x25c>
 800b9fe:	a201      	add	r2, pc, #4	; (adr r2, 800ba04 <UART_SetConfig+0x214>)
 800ba00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba04:	0800ba1d 	.word	0x0800ba1d
 800ba08:	0800ba25 	.word	0x0800ba25
 800ba0c:	0800ba2d 	.word	0x0800ba2d
 800ba10:	0800ba35 	.word	0x0800ba35
 800ba14:	0800ba3d 	.word	0x0800ba3d
 800ba18:	0800ba45 	.word	0x0800ba45
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba22:	e1b6      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800ba24:	2304      	movs	r3, #4
 800ba26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba2a:	e1b2      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800ba2c:	2308      	movs	r3, #8
 800ba2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba32:	e1ae      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800ba34:	2310      	movs	r3, #16
 800ba36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba3a:	e1aa      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800ba3c:	2320      	movs	r3, #32
 800ba3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba42:	e1a6      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800ba44:	2340      	movs	r3, #64	; 0x40
 800ba46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba4a:	e1a2      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800ba4c:	2380      	movs	r3, #128	; 0x80
 800ba4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba52:	e19e      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a37      	ldr	r2, [pc, #220]	; (800bb38 <UART_SetConfig+0x348>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d130      	bne.n	800bac0 <UART_SetConfig+0x2d0>
 800ba5e:	4b33      	ldr	r3, [pc, #204]	; (800bb2c <UART_SetConfig+0x33c>)
 800ba60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba62:	f003 0307 	and.w	r3, r3, #7
 800ba66:	2b05      	cmp	r3, #5
 800ba68:	d826      	bhi.n	800bab8 <UART_SetConfig+0x2c8>
 800ba6a:	a201      	add	r2, pc, #4	; (adr r2, 800ba70 <UART_SetConfig+0x280>)
 800ba6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba70:	0800ba89 	.word	0x0800ba89
 800ba74:	0800ba91 	.word	0x0800ba91
 800ba78:	0800ba99 	.word	0x0800ba99
 800ba7c:	0800baa1 	.word	0x0800baa1
 800ba80:	0800baa9 	.word	0x0800baa9
 800ba84:	0800bab1 	.word	0x0800bab1
 800ba88:	2300      	movs	r3, #0
 800ba8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba8e:	e180      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800ba90:	2304      	movs	r3, #4
 800ba92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba96:	e17c      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800ba98:	2308      	movs	r3, #8
 800ba9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ba9e:	e178      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800baa0:	2310      	movs	r3, #16
 800baa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baa6:	e174      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800baa8:	2320      	movs	r3, #32
 800baaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800baae:	e170      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bab0:	2340      	movs	r3, #64	; 0x40
 800bab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bab6:	e16c      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bab8:	2380      	movs	r3, #128	; 0x80
 800baba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800babe:	e168      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4a1d      	ldr	r2, [pc, #116]	; (800bb3c <UART_SetConfig+0x34c>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d142      	bne.n	800bb50 <UART_SetConfig+0x360>
 800baca:	4b18      	ldr	r3, [pc, #96]	; (800bb2c <UART_SetConfig+0x33c>)
 800bacc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bace:	f003 0307 	and.w	r3, r3, #7
 800bad2:	2b05      	cmp	r3, #5
 800bad4:	d838      	bhi.n	800bb48 <UART_SetConfig+0x358>
 800bad6:	a201      	add	r2, pc, #4	; (adr r2, 800badc <UART_SetConfig+0x2ec>)
 800bad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800badc:	0800baf5 	.word	0x0800baf5
 800bae0:	0800bafd 	.word	0x0800bafd
 800bae4:	0800bb05 	.word	0x0800bb05
 800bae8:	0800bb0d 	.word	0x0800bb0d
 800baec:	0800bb15 	.word	0x0800bb15
 800baf0:	0800bb41 	.word	0x0800bb41
 800baf4:	2300      	movs	r3, #0
 800baf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bafa:	e14a      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bafc:	2304      	movs	r3, #4
 800bafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb02:	e146      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bb04:	2308      	movs	r3, #8
 800bb06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb0a:	e142      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bb0c:	2310      	movs	r3, #16
 800bb0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb12:	e13e      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bb14:	2320      	movs	r3, #32
 800bb16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb1a:	e13a      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bb1c:	cfff69f3 	.word	0xcfff69f3
 800bb20:	58000c00 	.word	0x58000c00
 800bb24:	11fff4ff 	.word	0x11fff4ff
 800bb28:	40011000 	.word	0x40011000
 800bb2c:	58024400 	.word	0x58024400
 800bb30:	40004400 	.word	0x40004400
 800bb34:	40004800 	.word	0x40004800
 800bb38:	40004c00 	.word	0x40004c00
 800bb3c:	40005000 	.word	0x40005000
 800bb40:	2340      	movs	r3, #64	; 0x40
 800bb42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb46:	e124      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bb48:	2380      	movs	r3, #128	; 0x80
 800bb4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bb4e:	e120      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4acc      	ldr	r2, [pc, #816]	; (800be88 <UART_SetConfig+0x698>)
 800bb56:	4293      	cmp	r3, r2
 800bb58:	d176      	bne.n	800bc48 <UART_SetConfig+0x458>
 800bb5a:	4bcc      	ldr	r3, [pc, #816]	; (800be8c <UART_SetConfig+0x69c>)
 800bb5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bb62:	2b28      	cmp	r3, #40	; 0x28
 800bb64:	d86c      	bhi.n	800bc40 <UART_SetConfig+0x450>
 800bb66:	a201      	add	r2, pc, #4	; (adr r2, 800bb6c <UART_SetConfig+0x37c>)
 800bb68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6c:	0800bc11 	.word	0x0800bc11
 800bb70:	0800bc41 	.word	0x0800bc41
 800bb74:	0800bc41 	.word	0x0800bc41
 800bb78:	0800bc41 	.word	0x0800bc41
 800bb7c:	0800bc41 	.word	0x0800bc41
 800bb80:	0800bc41 	.word	0x0800bc41
 800bb84:	0800bc41 	.word	0x0800bc41
 800bb88:	0800bc41 	.word	0x0800bc41
 800bb8c:	0800bc19 	.word	0x0800bc19
 800bb90:	0800bc41 	.word	0x0800bc41
 800bb94:	0800bc41 	.word	0x0800bc41
 800bb98:	0800bc41 	.word	0x0800bc41
 800bb9c:	0800bc41 	.word	0x0800bc41
 800bba0:	0800bc41 	.word	0x0800bc41
 800bba4:	0800bc41 	.word	0x0800bc41
 800bba8:	0800bc41 	.word	0x0800bc41
 800bbac:	0800bc21 	.word	0x0800bc21
 800bbb0:	0800bc41 	.word	0x0800bc41
 800bbb4:	0800bc41 	.word	0x0800bc41
 800bbb8:	0800bc41 	.word	0x0800bc41
 800bbbc:	0800bc41 	.word	0x0800bc41
 800bbc0:	0800bc41 	.word	0x0800bc41
 800bbc4:	0800bc41 	.word	0x0800bc41
 800bbc8:	0800bc41 	.word	0x0800bc41
 800bbcc:	0800bc29 	.word	0x0800bc29
 800bbd0:	0800bc41 	.word	0x0800bc41
 800bbd4:	0800bc41 	.word	0x0800bc41
 800bbd8:	0800bc41 	.word	0x0800bc41
 800bbdc:	0800bc41 	.word	0x0800bc41
 800bbe0:	0800bc41 	.word	0x0800bc41
 800bbe4:	0800bc41 	.word	0x0800bc41
 800bbe8:	0800bc41 	.word	0x0800bc41
 800bbec:	0800bc31 	.word	0x0800bc31
 800bbf0:	0800bc41 	.word	0x0800bc41
 800bbf4:	0800bc41 	.word	0x0800bc41
 800bbf8:	0800bc41 	.word	0x0800bc41
 800bbfc:	0800bc41 	.word	0x0800bc41
 800bc00:	0800bc41 	.word	0x0800bc41
 800bc04:	0800bc41 	.word	0x0800bc41
 800bc08:	0800bc41 	.word	0x0800bc41
 800bc0c:	0800bc39 	.word	0x0800bc39
 800bc10:	2301      	movs	r3, #1
 800bc12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc16:	e0bc      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bc18:	2304      	movs	r3, #4
 800bc1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc1e:	e0b8      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bc20:	2308      	movs	r3, #8
 800bc22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc26:	e0b4      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bc28:	2310      	movs	r3, #16
 800bc2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc2e:	e0b0      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bc30:	2320      	movs	r3, #32
 800bc32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc36:	e0ac      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bc38:	2340      	movs	r3, #64	; 0x40
 800bc3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc3e:	e0a8      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bc40:	2380      	movs	r3, #128	; 0x80
 800bc42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc46:	e0a4      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4a90      	ldr	r2, [pc, #576]	; (800be90 <UART_SetConfig+0x6a0>)
 800bc4e:	4293      	cmp	r3, r2
 800bc50:	d130      	bne.n	800bcb4 <UART_SetConfig+0x4c4>
 800bc52:	4b8e      	ldr	r3, [pc, #568]	; (800be8c <UART_SetConfig+0x69c>)
 800bc54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc56:	f003 0307 	and.w	r3, r3, #7
 800bc5a:	2b05      	cmp	r3, #5
 800bc5c:	d826      	bhi.n	800bcac <UART_SetConfig+0x4bc>
 800bc5e:	a201      	add	r2, pc, #4	; (adr r2, 800bc64 <UART_SetConfig+0x474>)
 800bc60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc64:	0800bc7d 	.word	0x0800bc7d
 800bc68:	0800bc85 	.word	0x0800bc85
 800bc6c:	0800bc8d 	.word	0x0800bc8d
 800bc70:	0800bc95 	.word	0x0800bc95
 800bc74:	0800bc9d 	.word	0x0800bc9d
 800bc78:	0800bca5 	.word	0x0800bca5
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc82:	e086      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bc84:	2304      	movs	r3, #4
 800bc86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc8a:	e082      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bc8c:	2308      	movs	r3, #8
 800bc8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc92:	e07e      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bc94:	2310      	movs	r3, #16
 800bc96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bc9a:	e07a      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bc9c:	2320      	movs	r3, #32
 800bc9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bca2:	e076      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bca4:	2340      	movs	r3, #64	; 0x40
 800bca6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcaa:	e072      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bcac:	2380      	movs	r3, #128	; 0x80
 800bcae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcb2:	e06e      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a76      	ldr	r2, [pc, #472]	; (800be94 <UART_SetConfig+0x6a4>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d130      	bne.n	800bd20 <UART_SetConfig+0x530>
 800bcbe:	4b73      	ldr	r3, [pc, #460]	; (800be8c <UART_SetConfig+0x69c>)
 800bcc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcc2:	f003 0307 	and.w	r3, r3, #7
 800bcc6:	2b05      	cmp	r3, #5
 800bcc8:	d826      	bhi.n	800bd18 <UART_SetConfig+0x528>
 800bcca:	a201      	add	r2, pc, #4	; (adr r2, 800bcd0 <UART_SetConfig+0x4e0>)
 800bccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd0:	0800bce9 	.word	0x0800bce9
 800bcd4:	0800bcf1 	.word	0x0800bcf1
 800bcd8:	0800bcf9 	.word	0x0800bcf9
 800bcdc:	0800bd01 	.word	0x0800bd01
 800bce0:	0800bd09 	.word	0x0800bd09
 800bce4:	0800bd11 	.word	0x0800bd11
 800bce8:	2300      	movs	r3, #0
 800bcea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcee:	e050      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bcf0:	2304      	movs	r3, #4
 800bcf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcf6:	e04c      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bcf8:	2308      	movs	r3, #8
 800bcfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bcfe:	e048      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bd00:	2310      	movs	r3, #16
 800bd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd06:	e044      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bd08:	2320      	movs	r3, #32
 800bd0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd0e:	e040      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bd10:	2340      	movs	r3, #64	; 0x40
 800bd12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd16:	e03c      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bd18:	2380      	movs	r3, #128	; 0x80
 800bd1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd1e:	e038      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a5c      	ldr	r2, [pc, #368]	; (800be98 <UART_SetConfig+0x6a8>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d130      	bne.n	800bd8c <UART_SetConfig+0x59c>
 800bd2a:	4b58      	ldr	r3, [pc, #352]	; (800be8c <UART_SetConfig+0x69c>)
 800bd2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd2e:	f003 0307 	and.w	r3, r3, #7
 800bd32:	2b05      	cmp	r3, #5
 800bd34:	d826      	bhi.n	800bd84 <UART_SetConfig+0x594>
 800bd36:	a201      	add	r2, pc, #4	; (adr r2, 800bd3c <UART_SetConfig+0x54c>)
 800bd38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd3c:	0800bd55 	.word	0x0800bd55
 800bd40:	0800bd5d 	.word	0x0800bd5d
 800bd44:	0800bd65 	.word	0x0800bd65
 800bd48:	0800bd6d 	.word	0x0800bd6d
 800bd4c:	0800bd75 	.word	0x0800bd75
 800bd50:	0800bd7d 	.word	0x0800bd7d
 800bd54:	2302      	movs	r3, #2
 800bd56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd5a:	e01a      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bd5c:	2304      	movs	r3, #4
 800bd5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd62:	e016      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bd64:	2308      	movs	r3, #8
 800bd66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd6a:	e012      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bd6c:	2310      	movs	r3, #16
 800bd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd72:	e00e      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bd74:	2320      	movs	r3, #32
 800bd76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd7a:	e00a      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bd7c:	2340      	movs	r3, #64	; 0x40
 800bd7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd82:	e006      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bd84:	2380      	movs	r3, #128	; 0x80
 800bd86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800bd8a:	e002      	b.n	800bd92 <UART_SetConfig+0x5a2>
 800bd8c:	2380      	movs	r3, #128	; 0x80
 800bd8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4a40      	ldr	r2, [pc, #256]	; (800be98 <UART_SetConfig+0x6a8>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	f040 80ef 	bne.w	800bf7c <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bd9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bda2:	2b20      	cmp	r3, #32
 800bda4:	dc46      	bgt.n	800be34 <UART_SetConfig+0x644>
 800bda6:	2b02      	cmp	r3, #2
 800bda8:	f2c0 8081 	blt.w	800beae <UART_SetConfig+0x6be>
 800bdac:	3b02      	subs	r3, #2
 800bdae:	2b1e      	cmp	r3, #30
 800bdb0:	d87d      	bhi.n	800beae <UART_SetConfig+0x6be>
 800bdb2:	a201      	add	r2, pc, #4	; (adr r2, 800bdb8 <UART_SetConfig+0x5c8>)
 800bdb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb8:	0800be3b 	.word	0x0800be3b
 800bdbc:	0800beaf 	.word	0x0800beaf
 800bdc0:	0800be43 	.word	0x0800be43
 800bdc4:	0800beaf 	.word	0x0800beaf
 800bdc8:	0800beaf 	.word	0x0800beaf
 800bdcc:	0800beaf 	.word	0x0800beaf
 800bdd0:	0800be53 	.word	0x0800be53
 800bdd4:	0800beaf 	.word	0x0800beaf
 800bdd8:	0800beaf 	.word	0x0800beaf
 800bddc:	0800beaf 	.word	0x0800beaf
 800bde0:	0800beaf 	.word	0x0800beaf
 800bde4:	0800beaf 	.word	0x0800beaf
 800bde8:	0800beaf 	.word	0x0800beaf
 800bdec:	0800beaf 	.word	0x0800beaf
 800bdf0:	0800be63 	.word	0x0800be63
 800bdf4:	0800beaf 	.word	0x0800beaf
 800bdf8:	0800beaf 	.word	0x0800beaf
 800bdfc:	0800beaf 	.word	0x0800beaf
 800be00:	0800beaf 	.word	0x0800beaf
 800be04:	0800beaf 	.word	0x0800beaf
 800be08:	0800beaf 	.word	0x0800beaf
 800be0c:	0800beaf 	.word	0x0800beaf
 800be10:	0800beaf 	.word	0x0800beaf
 800be14:	0800beaf 	.word	0x0800beaf
 800be18:	0800beaf 	.word	0x0800beaf
 800be1c:	0800beaf 	.word	0x0800beaf
 800be20:	0800beaf 	.word	0x0800beaf
 800be24:	0800beaf 	.word	0x0800beaf
 800be28:	0800beaf 	.word	0x0800beaf
 800be2c:	0800beaf 	.word	0x0800beaf
 800be30:	0800bea1 	.word	0x0800bea1
 800be34:	2b40      	cmp	r3, #64	; 0x40
 800be36:	d036      	beq.n	800bea6 <UART_SetConfig+0x6b6>
 800be38:	e039      	b.n	800beae <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800be3a:	f7fc ff2d 	bl	8008c98 <HAL_RCCEx_GetD3PCLK1Freq>
 800be3e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800be40:	e03b      	b.n	800beba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be42:	f107 0314 	add.w	r3, r7, #20
 800be46:	4618      	mov	r0, r3
 800be48:	f7fc ff3c 	bl	8008cc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800be4c:	69bb      	ldr	r3, [r7, #24]
 800be4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be50:	e033      	b.n	800beba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be52:	f107 0308 	add.w	r3, r7, #8
 800be56:	4618      	mov	r0, r3
 800be58:	f7fd f888 	bl	8008f6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be60:	e02b      	b.n	800beba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be62:	4b0a      	ldr	r3, [pc, #40]	; (800be8c <UART_SetConfig+0x69c>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f003 0320 	and.w	r3, r3, #32
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d009      	beq.n	800be82 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be6e:	4b07      	ldr	r3, [pc, #28]	; (800be8c <UART_SetConfig+0x69c>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	08db      	lsrs	r3, r3, #3
 800be74:	f003 0303 	and.w	r3, r3, #3
 800be78:	4a08      	ldr	r2, [pc, #32]	; (800be9c <UART_SetConfig+0x6ac>)
 800be7a:	fa22 f303 	lsr.w	r3, r2, r3
 800be7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800be80:	e01b      	b.n	800beba <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800be82:	4b06      	ldr	r3, [pc, #24]	; (800be9c <UART_SetConfig+0x6ac>)
 800be84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800be86:	e018      	b.n	800beba <UART_SetConfig+0x6ca>
 800be88:	40011400 	.word	0x40011400
 800be8c:	58024400 	.word	0x58024400
 800be90:	40007800 	.word	0x40007800
 800be94:	40007c00 	.word	0x40007c00
 800be98:	58000c00 	.word	0x58000c00
 800be9c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bea0:	4bc4      	ldr	r3, [pc, #784]	; (800c1b4 <UART_SetConfig+0x9c4>)
 800bea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800bea4:	e009      	b.n	800beba <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800beaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800beac:	e005      	b.n	800beba <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800beae:	2300      	movs	r3, #0
 800beb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800beb2:	2301      	movs	r3, #1
 800beb4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800beb8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800beba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f000 81da 	beq.w	800c276 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bec6:	4abc      	ldr	r2, [pc, #752]	; (800c1b8 <UART_SetConfig+0x9c8>)
 800bec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800becc:	461a      	mov	r2, r3
 800bece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bed0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bed4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	685a      	ldr	r2, [r3, #4]
 800beda:	4613      	mov	r3, r2
 800bedc:	005b      	lsls	r3, r3, #1
 800bede:	4413      	add	r3, r2
 800bee0:	6a3a      	ldr	r2, [r7, #32]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d305      	bcc.n	800bef2 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800beec:	6a3a      	ldr	r2, [r7, #32]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d903      	bls.n	800befa <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bef8:	e1bd      	b.n	800c276 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800befc:	4618      	mov	r0, r3
 800befe:	f04f 0100 	mov.w	r1, #0
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf06:	4aac      	ldr	r2, [pc, #688]	; (800c1b8 <UART_SetConfig+0x9c8>)
 800bf08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	f04f 0300 	mov.w	r3, #0
 800bf12:	f7f4 fa3d 	bl	8000390 <__aeabi_uldivmod>
 800bf16:	4602      	mov	r2, r0
 800bf18:	460b      	mov	r3, r1
 800bf1a:	4610      	mov	r0, r2
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	f04f 0200 	mov.w	r2, #0
 800bf22:	f04f 0300 	mov.w	r3, #0
 800bf26:	020b      	lsls	r3, r1, #8
 800bf28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bf2c:	0202      	lsls	r2, r0, #8
 800bf2e:	6879      	ldr	r1, [r7, #4]
 800bf30:	6849      	ldr	r1, [r1, #4]
 800bf32:	0849      	lsrs	r1, r1, #1
 800bf34:	4608      	mov	r0, r1
 800bf36:	f04f 0100 	mov.w	r1, #0
 800bf3a:	1814      	adds	r4, r2, r0
 800bf3c:	eb43 0501 	adc.w	r5, r3, r1
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	461a      	mov	r2, r3
 800bf46:	f04f 0300 	mov.w	r3, #0
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	4629      	mov	r1, r5
 800bf4e:	f7f4 fa1f 	bl	8000390 <__aeabi_uldivmod>
 800bf52:	4602      	mov	r2, r0
 800bf54:	460b      	mov	r3, r1
 800bf56:	4613      	mov	r3, r2
 800bf58:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bf5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bf60:	d308      	bcc.n	800bf74 <UART_SetConfig+0x784>
 800bf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf68:	d204      	bcs.n	800bf74 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf70:	60da      	str	r2, [r3, #12]
 800bf72:	e180      	b.n	800c276 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800bf74:	2301      	movs	r3, #1
 800bf76:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800bf7a:	e17c      	b.n	800c276 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	69db      	ldr	r3, [r3, #28]
 800bf80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf84:	f040 80be 	bne.w	800c104 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800bf88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800bf8c:	2b20      	cmp	r3, #32
 800bf8e:	dc49      	bgt.n	800c024 <UART_SetConfig+0x834>
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	db7c      	blt.n	800c08e <UART_SetConfig+0x89e>
 800bf94:	2b20      	cmp	r3, #32
 800bf96:	d87a      	bhi.n	800c08e <UART_SetConfig+0x89e>
 800bf98:	a201      	add	r2, pc, #4	; (adr r2, 800bfa0 <UART_SetConfig+0x7b0>)
 800bf9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf9e:	bf00      	nop
 800bfa0:	0800c02b 	.word	0x0800c02b
 800bfa4:	0800c033 	.word	0x0800c033
 800bfa8:	0800c08f 	.word	0x0800c08f
 800bfac:	0800c08f 	.word	0x0800c08f
 800bfb0:	0800c03b 	.word	0x0800c03b
 800bfb4:	0800c08f 	.word	0x0800c08f
 800bfb8:	0800c08f 	.word	0x0800c08f
 800bfbc:	0800c08f 	.word	0x0800c08f
 800bfc0:	0800c04b 	.word	0x0800c04b
 800bfc4:	0800c08f 	.word	0x0800c08f
 800bfc8:	0800c08f 	.word	0x0800c08f
 800bfcc:	0800c08f 	.word	0x0800c08f
 800bfd0:	0800c08f 	.word	0x0800c08f
 800bfd4:	0800c08f 	.word	0x0800c08f
 800bfd8:	0800c08f 	.word	0x0800c08f
 800bfdc:	0800c08f 	.word	0x0800c08f
 800bfe0:	0800c05b 	.word	0x0800c05b
 800bfe4:	0800c08f 	.word	0x0800c08f
 800bfe8:	0800c08f 	.word	0x0800c08f
 800bfec:	0800c08f 	.word	0x0800c08f
 800bff0:	0800c08f 	.word	0x0800c08f
 800bff4:	0800c08f 	.word	0x0800c08f
 800bff8:	0800c08f 	.word	0x0800c08f
 800bffc:	0800c08f 	.word	0x0800c08f
 800c000:	0800c08f 	.word	0x0800c08f
 800c004:	0800c08f 	.word	0x0800c08f
 800c008:	0800c08f 	.word	0x0800c08f
 800c00c:	0800c08f 	.word	0x0800c08f
 800c010:	0800c08f 	.word	0x0800c08f
 800c014:	0800c08f 	.word	0x0800c08f
 800c018:	0800c08f 	.word	0x0800c08f
 800c01c:	0800c08f 	.word	0x0800c08f
 800c020:	0800c081 	.word	0x0800c081
 800c024:	2b40      	cmp	r3, #64	; 0x40
 800c026:	d02e      	beq.n	800c086 <UART_SetConfig+0x896>
 800c028:	e031      	b.n	800c08e <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c02a:	f7fb fec9 	bl	8007dc0 <HAL_RCC_GetPCLK1Freq>
 800c02e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c030:	e033      	b.n	800c09a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c032:	f7fb fedb 	bl	8007dec <HAL_RCC_GetPCLK2Freq>
 800c036:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c038:	e02f      	b.n	800c09a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c03a:	f107 0314 	add.w	r3, r7, #20
 800c03e:	4618      	mov	r0, r3
 800c040:	f7fc fe40 	bl	8008cc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c044:	69bb      	ldr	r3, [r7, #24]
 800c046:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c048:	e027      	b.n	800c09a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c04a:	f107 0308 	add.w	r3, r7, #8
 800c04e:	4618      	mov	r0, r3
 800c050:	f7fc ff8c 	bl	8008f6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c058:	e01f      	b.n	800c09a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c05a:	4b58      	ldr	r3, [pc, #352]	; (800c1bc <UART_SetConfig+0x9cc>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f003 0320 	and.w	r3, r3, #32
 800c062:	2b00      	cmp	r3, #0
 800c064:	d009      	beq.n	800c07a <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c066:	4b55      	ldr	r3, [pc, #340]	; (800c1bc <UART_SetConfig+0x9cc>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	08db      	lsrs	r3, r3, #3
 800c06c:	f003 0303 	and.w	r3, r3, #3
 800c070:	4a53      	ldr	r2, [pc, #332]	; (800c1c0 <UART_SetConfig+0x9d0>)
 800c072:	fa22 f303 	lsr.w	r3, r2, r3
 800c076:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c078:	e00f      	b.n	800c09a <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800c07a:	4b51      	ldr	r3, [pc, #324]	; (800c1c0 <UART_SetConfig+0x9d0>)
 800c07c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c07e:	e00c      	b.n	800c09a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c080:	4b4c      	ldr	r3, [pc, #304]	; (800c1b4 <UART_SetConfig+0x9c4>)
 800c082:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c084:	e009      	b.n	800c09a <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c086:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c08a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c08c:	e005      	b.n	800c09a <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800c08e:	2300      	movs	r3, #0
 800c090:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c092:	2301      	movs	r3, #1
 800c094:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c098:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	f000 80ea 	beq.w	800c276 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a6:	4a44      	ldr	r2, [pc, #272]	; (800c1b8 <UART_SetConfig+0x9c8>)
 800c0a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c0ac:	461a      	mov	r2, r3
 800c0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c0b4:	005a      	lsls	r2, r3, #1
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	085b      	lsrs	r3, r3, #1
 800c0bc:	441a      	add	r2, r3
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ca:	2b0f      	cmp	r3, #15
 800c0cc:	d916      	bls.n	800c0fc <UART_SetConfig+0x90c>
 800c0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0d4:	d212      	bcs.n	800c0fc <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	f023 030f 	bic.w	r3, r3, #15
 800c0de:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0e2:	085b      	lsrs	r3, r3, #1
 800c0e4:	b29b      	uxth	r3, r3
 800c0e6:	f003 0307 	and.w	r3, r3, #7
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c0f8:	60da      	str	r2, [r3, #12]
 800c0fa:	e0bc      	b.n	800c276 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800c102:	e0b8      	b.n	800c276 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c104:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c108:	2b20      	cmp	r3, #32
 800c10a:	dc4b      	bgt.n	800c1a4 <UART_SetConfig+0x9b4>
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f2c0 8087 	blt.w	800c220 <UART_SetConfig+0xa30>
 800c112:	2b20      	cmp	r3, #32
 800c114:	f200 8084 	bhi.w	800c220 <UART_SetConfig+0xa30>
 800c118:	a201      	add	r2, pc, #4	; (adr r2, 800c120 <UART_SetConfig+0x930>)
 800c11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11e:	bf00      	nop
 800c120:	0800c1ab 	.word	0x0800c1ab
 800c124:	0800c1c5 	.word	0x0800c1c5
 800c128:	0800c221 	.word	0x0800c221
 800c12c:	0800c221 	.word	0x0800c221
 800c130:	0800c1cd 	.word	0x0800c1cd
 800c134:	0800c221 	.word	0x0800c221
 800c138:	0800c221 	.word	0x0800c221
 800c13c:	0800c221 	.word	0x0800c221
 800c140:	0800c1dd 	.word	0x0800c1dd
 800c144:	0800c221 	.word	0x0800c221
 800c148:	0800c221 	.word	0x0800c221
 800c14c:	0800c221 	.word	0x0800c221
 800c150:	0800c221 	.word	0x0800c221
 800c154:	0800c221 	.word	0x0800c221
 800c158:	0800c221 	.word	0x0800c221
 800c15c:	0800c221 	.word	0x0800c221
 800c160:	0800c1ed 	.word	0x0800c1ed
 800c164:	0800c221 	.word	0x0800c221
 800c168:	0800c221 	.word	0x0800c221
 800c16c:	0800c221 	.word	0x0800c221
 800c170:	0800c221 	.word	0x0800c221
 800c174:	0800c221 	.word	0x0800c221
 800c178:	0800c221 	.word	0x0800c221
 800c17c:	0800c221 	.word	0x0800c221
 800c180:	0800c221 	.word	0x0800c221
 800c184:	0800c221 	.word	0x0800c221
 800c188:	0800c221 	.word	0x0800c221
 800c18c:	0800c221 	.word	0x0800c221
 800c190:	0800c221 	.word	0x0800c221
 800c194:	0800c221 	.word	0x0800c221
 800c198:	0800c221 	.word	0x0800c221
 800c19c:	0800c221 	.word	0x0800c221
 800c1a0:	0800c213 	.word	0x0800c213
 800c1a4:	2b40      	cmp	r3, #64	; 0x40
 800c1a6:	d037      	beq.n	800c218 <UART_SetConfig+0xa28>
 800c1a8:	e03a      	b.n	800c220 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1aa:	f7fb fe09 	bl	8007dc0 <HAL_RCC_GetPCLK1Freq>
 800c1ae:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1b0:	e03c      	b.n	800c22c <UART_SetConfig+0xa3c>
 800c1b2:	bf00      	nop
 800c1b4:	003d0900 	.word	0x003d0900
 800c1b8:	0800fa10 	.word	0x0800fa10
 800c1bc:	58024400 	.word	0x58024400
 800c1c0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1c4:	f7fb fe12 	bl	8007dec <HAL_RCC_GetPCLK2Freq>
 800c1c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800c1ca:	e02f      	b.n	800c22c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c1cc:	f107 0314 	add.w	r3, r7, #20
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fc fd77 	bl	8008cc4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c1d6:	69bb      	ldr	r3, [r7, #24]
 800c1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1da:	e027      	b.n	800c22c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1dc:	f107 0308 	add.w	r3, r7, #8
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	f7fc fec3 	bl	8008f6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c1ea:	e01f      	b.n	800c22c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1ec:	4b2c      	ldr	r3, [pc, #176]	; (800c2a0 <UART_SetConfig+0xab0>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 0320 	and.w	r3, r3, #32
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d009      	beq.n	800c20c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c1f8:	4b29      	ldr	r3, [pc, #164]	; (800c2a0 <UART_SetConfig+0xab0>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	08db      	lsrs	r3, r3, #3
 800c1fe:	f003 0303 	and.w	r3, r3, #3
 800c202:	4a28      	ldr	r2, [pc, #160]	; (800c2a4 <UART_SetConfig+0xab4>)
 800c204:	fa22 f303 	lsr.w	r3, r2, r3
 800c208:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c20a:	e00f      	b.n	800c22c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800c20c:	4b25      	ldr	r3, [pc, #148]	; (800c2a4 <UART_SetConfig+0xab4>)
 800c20e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c210:	e00c      	b.n	800c22c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c212:	4b25      	ldr	r3, [pc, #148]	; (800c2a8 <UART_SetConfig+0xab8>)
 800c214:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c216:	e009      	b.n	800c22c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c218:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c21c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800c21e:	e005      	b.n	800c22c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800c220:	2300      	movs	r3, #0
 800c222:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800c224:	2301      	movs	r3, #1
 800c226:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800c22a:	bf00      	nop
    }

    if (pclk != 0U)
 800c22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d021      	beq.n	800c276 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c236:	4a1d      	ldr	r2, [pc, #116]	; (800c2ac <UART_SetConfig+0xabc>)
 800c238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c23c:	461a      	mov	r2, r3
 800c23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c240:	fbb3 f2f2 	udiv	r2, r3, r2
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	085b      	lsrs	r3, r3, #1
 800c24a:	441a      	add	r2, r3
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	fbb2 f3f3 	udiv	r3, r2, r3
 800c254:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c258:	2b0f      	cmp	r3, #15
 800c25a:	d909      	bls.n	800c270 <UART_SetConfig+0xa80>
 800c25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c262:	d205      	bcs.n	800c270 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c266:	b29a      	uxth	r2, r3
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	60da      	str	r2, [r3, #12]
 800c26e:	e002      	b.n	800c276 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800c270:	2301      	movs	r3, #1
 800c272:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2201      	movs	r2, #1
 800c27a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2201      	movs	r2, #1
 800c282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2200      	movs	r2, #0
 800c290:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c292:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800c296:	4618      	mov	r0, r3
 800c298:	3738      	adds	r7, #56	; 0x38
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bdb0      	pop	{r4, r5, r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	58024400 	.word	0x58024400
 800c2a4:	03d09000 	.word	0x03d09000
 800c2a8:	003d0900 	.word	0x003d0900
 800c2ac:	0800fa10 	.word	0x0800fa10

0800c2b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2bc:	f003 0301 	and.w	r3, r3, #1
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d00a      	beq.n	800c2da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	430a      	orrs	r2, r1
 800c2d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2de:	f003 0302 	and.w	r3, r3, #2
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00a      	beq.n	800c2fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	430a      	orrs	r2, r1
 800c2fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c300:	f003 0304 	and.w	r3, r3, #4
 800c304:	2b00      	cmp	r3, #0
 800c306:	d00a      	beq.n	800c31e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	430a      	orrs	r2, r1
 800c31c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c322:	f003 0308 	and.w	r3, r3, #8
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00a      	beq.n	800c340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	685b      	ldr	r3, [r3, #4]
 800c330:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	430a      	orrs	r2, r1
 800c33e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c344:	f003 0310 	and.w	r3, r3, #16
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d00a      	beq.n	800c362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	430a      	orrs	r2, r1
 800c360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c366:	f003 0320 	and.w	r3, r3, #32
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d00a      	beq.n	800c384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	430a      	orrs	r2, r1
 800c382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d01a      	beq.n	800c3c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	430a      	orrs	r2, r1
 800c3a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3ae:	d10a      	bne.n	800c3c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	430a      	orrs	r2, r1
 800c3c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d00a      	beq.n	800c3e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	430a      	orrs	r2, r1
 800c3e6:	605a      	str	r2, [r3, #4]
  }
}
 800c3e8:	bf00      	nop
 800c3ea:	370c      	adds	r7, #12
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr

0800c3f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b086      	sub	sp, #24
 800c3f8:	af02      	add	r7, sp, #8
 800c3fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c404:	f7f7 fef0 	bl	80041e8 <HAL_GetTick>
 800c408:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f003 0308 	and.w	r3, r3, #8
 800c414:	2b08      	cmp	r3, #8
 800c416:	d10e      	bne.n	800c436 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c418:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c41c:	9300      	str	r3, [sp, #0]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2200      	movs	r2, #0
 800c422:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 f82f 	bl	800c48a <UART_WaitOnFlagUntilTimeout>
 800c42c:	4603      	mov	r3, r0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d001      	beq.n	800c436 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c432:	2303      	movs	r3, #3
 800c434:	e025      	b.n	800c482 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f003 0304 	and.w	r3, r3, #4
 800c440:	2b04      	cmp	r3, #4
 800c442:	d10e      	bne.n	800c462 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c448:	9300      	str	r3, [sp, #0]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	2200      	movs	r2, #0
 800c44e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f000 f819 	bl	800c48a <UART_WaitOnFlagUntilTimeout>
 800c458:	4603      	mov	r3, r0
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d001      	beq.n	800c462 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c45e:	2303      	movs	r3, #3
 800c460:	e00f      	b.n	800c482 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2220      	movs	r2, #32
 800c466:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2220      	movs	r2, #32
 800c46e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2200      	movs	r2, #0
 800c476:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3710      	adds	r7, #16
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b09c      	sub	sp, #112	; 0x70
 800c48e:	af00      	add	r7, sp, #0
 800c490:	60f8      	str	r0, [r7, #12]
 800c492:	60b9      	str	r1, [r7, #8]
 800c494:	603b      	str	r3, [r7, #0]
 800c496:	4613      	mov	r3, r2
 800c498:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c49a:	e0a9      	b.n	800c5f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c49c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a2:	f000 80a5 	beq.w	800c5f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4a6:	f7f7 fe9f 	bl	80041e8 <HAL_GetTick>
 800c4aa:	4602      	mov	r2, r0
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	1ad3      	subs	r3, r2, r3
 800c4b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d302      	bcc.n	800c4bc <UART_WaitOnFlagUntilTimeout+0x32>
 800c4b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d140      	bne.n	800c53e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4c4:	e853 3f00 	ldrex	r3, [r3]
 800c4c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c4ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c4d0:	667b      	str	r3, [r7, #100]	; 0x64
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c4da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c4dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c4e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c4e2:	e841 2300 	strex	r3, r2, [r1]
 800c4e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c4e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d1e6      	bne.n	800c4bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	3308      	adds	r3, #8
 800c4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4f8:	e853 3f00 	ldrex	r3, [r3]
 800c4fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c500:	f023 0301 	bic.w	r3, r3, #1
 800c504:	663b      	str	r3, [r7, #96]	; 0x60
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	3308      	adds	r3, #8
 800c50c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c50e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c510:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c512:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c514:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c516:	e841 2300 	strex	r3, r2, [r1]
 800c51a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c51c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d1e5      	bne.n	800c4ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2220      	movs	r2, #32
 800c526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	2220      	movs	r2, #32
 800c52e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2200      	movs	r2, #0
 800c536:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c53a:	2303      	movs	r3, #3
 800c53c:	e069      	b.n	800c612 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f003 0304 	and.w	r3, r3, #4
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d051      	beq.n	800c5f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	69db      	ldr	r3, [r3, #28]
 800c552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c55a:	d149      	bne.n	800c5f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c564:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c56e:	e853 3f00 	ldrex	r3, [r3]
 800c572:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c57a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	461a      	mov	r2, r3
 800c582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c584:	637b      	str	r3, [r7, #52]	; 0x34
 800c586:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c588:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c58a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c58c:	e841 2300 	strex	r3, r2, [r1]
 800c590:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c594:	2b00      	cmp	r3, #0
 800c596:	d1e6      	bne.n	800c566 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	3308      	adds	r3, #8
 800c59e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	e853 3f00 	ldrex	r3, [r3]
 800c5a6:	613b      	str	r3, [r7, #16]
   return(result);
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	f023 0301 	bic.w	r3, r3, #1
 800c5ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	3308      	adds	r3, #8
 800c5b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c5b8:	623a      	str	r2, [r7, #32]
 800c5ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5bc:	69f9      	ldr	r1, [r7, #28]
 800c5be:	6a3a      	ldr	r2, [r7, #32]
 800c5c0:	e841 2300 	strex	r3, r2, [r1]
 800c5c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5c6:	69bb      	ldr	r3, [r7, #24]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1e5      	bne.n	800c598 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	2220      	movs	r2, #32
 800c5d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	2220      	movs	r2, #32
 800c5d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2220      	movs	r2, #32
 800c5e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c5ec:	2303      	movs	r3, #3
 800c5ee:	e010      	b.n	800c612 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	69da      	ldr	r2, [r3, #28]
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	4013      	ands	r3, r2
 800c5fa:	68ba      	ldr	r2, [r7, #8]
 800c5fc:	429a      	cmp	r2, r3
 800c5fe:	bf0c      	ite	eq
 800c600:	2301      	moveq	r3, #1
 800c602:	2300      	movne	r3, #0
 800c604:	b2db      	uxtb	r3, r3
 800c606:	461a      	mov	r2, r3
 800c608:	79fb      	ldrb	r3, [r7, #7]
 800c60a:	429a      	cmp	r2, r3
 800c60c:	f43f af46 	beq.w	800c49c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c610:	2300      	movs	r3, #0
}
 800c612:	4618      	mov	r0, r3
 800c614:	3770      	adds	r7, #112	; 0x70
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
	...

0800c61c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c61c:	b480      	push	{r7}
 800c61e:	b095      	sub	sp, #84	; 0x54
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c62c:	e853 3f00 	ldrex	r3, [r3]
 800c630:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c638:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	461a      	mov	r2, r3
 800c640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c642:	643b      	str	r3, [r7, #64]	; 0x40
 800c644:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c646:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c64a:	e841 2300 	strex	r3, r2, [r1]
 800c64e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1e6      	bne.n	800c624 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	3308      	adds	r3, #8
 800c65c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c65e:	6a3b      	ldr	r3, [r7, #32]
 800c660:	e853 3f00 	ldrex	r3, [r3]
 800c664:	61fb      	str	r3, [r7, #28]
   return(result);
 800c666:	69fa      	ldr	r2, [r7, #28]
 800c668:	4b1e      	ldr	r3, [pc, #120]	; (800c6e4 <UART_EndRxTransfer+0xc8>)
 800c66a:	4013      	ands	r3, r2
 800c66c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	3308      	adds	r3, #8
 800c674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c676:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c678:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c67a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c67c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c67e:	e841 2300 	strex	r3, r2, [r1]
 800c682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c686:	2b00      	cmp	r3, #0
 800c688:	d1e5      	bne.n	800c656 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d118      	bne.n	800c6c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	e853 3f00 	ldrex	r3, [r3]
 800c69e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	f023 0310 	bic.w	r3, r3, #16
 800c6a6:	647b      	str	r3, [r7, #68]	; 0x44
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	461a      	mov	r2, r3
 800c6ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6b0:	61bb      	str	r3, [r7, #24]
 800c6b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b4:	6979      	ldr	r1, [r7, #20]
 800c6b6:	69ba      	ldr	r2, [r7, #24]
 800c6b8:	e841 2300 	strex	r3, r2, [r1]
 800c6bc:	613b      	str	r3, [r7, #16]
   return(result);
 800c6be:	693b      	ldr	r3, [r7, #16]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d1e6      	bne.n	800c692 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2220      	movs	r2, #32
 800c6c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c6d8:	bf00      	nop
 800c6da:	3754      	adds	r7, #84	; 0x54
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr
 800c6e4:	effffffe 	.word	0xeffffffe

0800c6e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2200      	movs	r2, #0
 800c702:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f7ff f85c 	bl	800b7c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c70c:	bf00      	nop
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b088      	sub	sp, #32
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	e853 3f00 	ldrex	r3, [r3]
 800c728:	60bb      	str	r3, [r7, #8]
   return(result);
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c730:	61fb      	str	r3, [r7, #28]
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	461a      	mov	r2, r3
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	61bb      	str	r3, [r7, #24]
 800c73c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c73e:	6979      	ldr	r1, [r7, #20]
 800c740:	69ba      	ldr	r2, [r7, #24]
 800c742:	e841 2300 	strex	r3, r2, [r1]
 800c746:	613b      	str	r3, [r7, #16]
   return(result);
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d1e6      	bne.n	800c71c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2220      	movs	r2, #32
 800c752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f7ff f827 	bl	800b7b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c762:	bf00      	nop
 800c764:	3720      	adds	r7, #32
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}

0800c76a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c76a:	b480      	push	{r7}
 800c76c:	b083      	sub	sp, #12
 800c76e:	af00      	add	r7, sp, #0
 800c770:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c772:	bf00      	nop
 800c774:	370c      	adds	r7, #12
 800c776:	46bd      	mov	sp, r7
 800c778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77c:	4770      	bx	lr

0800c77e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c77e:	b480      	push	{r7}
 800c780:	b083      	sub	sp, #12
 800c782:	af00      	add	r7, sp, #0
 800c784:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c786:	bf00      	nop
 800c788:	370c      	adds	r7, #12
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr

0800c792 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c792:	b480      	push	{r7}
 800c794:	b083      	sub	sp, #12
 800c796:	af00      	add	r7, sp, #0
 800c798:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c79a:	bf00      	nop
 800c79c:	370c      	adds	r7, #12
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800c7a6:	b580      	push	{r7, lr}
 800c7a8:	b084      	sub	sp, #16
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d101      	bne.n	800c7bc <HAL_UARTEx_EnableFifoMode+0x16>
 800c7b8:	2302      	movs	r3, #2
 800c7ba:	e02b      	b.n	800c814 <HAL_UARTEx_EnableFifoMode+0x6e>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2224      	movs	r2, #36	; 0x24
 800c7c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f022 0201 	bic.w	r2, r2, #1
 800c7e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c7f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	68fa      	ldr	r2, [r7, #12]
 800c7fa:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f8c3 	bl	800c988 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2220      	movs	r2, #32
 800c806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2200      	movs	r2, #0
 800c80e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c812:	2300      	movs	r3, #0
}
 800c814:	4618      	mov	r0, r3
 800c816:	3710      	adds	r7, #16
 800c818:	46bd      	mov	sp, r7
 800c81a:	bd80      	pop	{r7, pc}

0800c81c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b085      	sub	sp, #20
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d101      	bne.n	800c832 <HAL_UARTEx_DisableFifoMode+0x16>
 800c82e:	2302      	movs	r3, #2
 800c830:	e027      	b.n	800c882 <HAL_UARTEx_DisableFifoMode+0x66>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2201      	movs	r2, #1
 800c836:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2224      	movs	r2, #36	; 0x24
 800c83e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	681a      	ldr	r2, [r3, #0]
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f022 0201 	bic.w	r2, r2, #1
 800c858:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c860:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	68fa      	ldr	r2, [r7, #12]
 800c86e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2220      	movs	r2, #32
 800c874:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2200      	movs	r2, #0
 800c87c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr

0800c88e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b084      	sub	sp, #16
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
 800c896:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c89e:	2b01      	cmp	r3, #1
 800c8a0:	d101      	bne.n	800c8a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c8a2:	2302      	movs	r3, #2
 800c8a4:	e02d      	b.n	800c902 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	2224      	movs	r2, #36	; 0x24
 800c8b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f022 0201 	bic.w	r2, r2, #1
 800c8cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	683a      	ldr	r2, [r7, #0]
 800c8de:	430a      	orrs	r2, r1
 800c8e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 f850 	bl	800c988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2220      	movs	r2, #32
 800c8f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b084      	sub	sp, #16
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d101      	bne.n	800c922 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c91e:	2302      	movs	r3, #2
 800c920:	e02d      	b.n	800c97e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2201      	movs	r2, #1
 800c926:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2224      	movs	r2, #36	; 0x24
 800c92e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	681a      	ldr	r2, [r3, #0]
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f022 0201 	bic.w	r2, r2, #1
 800c948:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	689b      	ldr	r3, [r3, #8]
 800c950:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	430a      	orrs	r2, r1
 800c95c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f812 	bl	800c988 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	68fa      	ldr	r2, [r7, #12]
 800c96a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2220      	movs	r2, #32
 800c970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
	...

0800c988 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c988:	b480      	push	{r7}
 800c98a:	b085      	sub	sp, #20
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c994:	2b00      	cmp	r3, #0
 800c996:	d108      	bne.n	800c9aa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2201      	movs	r2, #1
 800c99c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c9a8:	e031      	b.n	800ca0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c9aa:	2310      	movs	r3, #16
 800c9ac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c9ae:	2310      	movs	r3, #16
 800c9b0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	0e5b      	lsrs	r3, r3, #25
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	f003 0307 	and.w	r3, r3, #7
 800c9c0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	0f5b      	lsrs	r3, r3, #29
 800c9ca:	b2db      	uxtb	r3, r3
 800c9cc:	f003 0307 	and.w	r3, r3, #7
 800c9d0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9d2:	7bbb      	ldrb	r3, [r7, #14]
 800c9d4:	7b3a      	ldrb	r2, [r7, #12]
 800c9d6:	4911      	ldr	r1, [pc, #68]	; (800ca1c <UARTEx_SetNbDataToProcess+0x94>)
 800c9d8:	5c8a      	ldrb	r2, [r1, r2]
 800c9da:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c9de:	7b3a      	ldrb	r2, [r7, #12]
 800c9e0:	490f      	ldr	r1, [pc, #60]	; (800ca20 <UARTEx_SetNbDataToProcess+0x98>)
 800c9e2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c9e4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c9e8:	b29a      	uxth	r2, r3
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c9f0:	7bfb      	ldrb	r3, [r7, #15]
 800c9f2:	7b7a      	ldrb	r2, [r7, #13]
 800c9f4:	4909      	ldr	r1, [pc, #36]	; (800ca1c <UARTEx_SetNbDataToProcess+0x94>)
 800c9f6:	5c8a      	ldrb	r2, [r1, r2]
 800c9f8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c9fc:	7b7a      	ldrb	r2, [r7, #13]
 800c9fe:	4908      	ldr	r1, [pc, #32]	; (800ca20 <UARTEx_SetNbDataToProcess+0x98>)
 800ca00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ca02:	fb93 f3f2 	sdiv	r3, r3, r2
 800ca06:	b29a      	uxth	r2, r3
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ca0e:	bf00      	nop
 800ca10:	3714      	adds	r7, #20
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	0800fa28 	.word	0x0800fa28
 800ca20:	0800fa30 	.word	0x0800fa30

0800ca24 <checkint>:
 800ca24:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ca28:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca30:	dd2b      	ble.n	800ca8a <checkint+0x66>
 800ca32:	f240 4333 	movw	r3, #1075	; 0x433
 800ca36:	429a      	cmp	r2, r3
 800ca38:	dc25      	bgt.n	800ca86 <checkint+0x62>
 800ca3a:	1a9b      	subs	r3, r3, r2
 800ca3c:	f1a3 0620 	sub.w	r6, r3, #32
 800ca40:	f04f 32ff 	mov.w	r2, #4294967295
 800ca44:	fa02 f606 	lsl.w	r6, r2, r6
 800ca48:	fa02 f403 	lsl.w	r4, r2, r3
 800ca4c:	f1c3 0520 	rsb	r5, r3, #32
 800ca50:	4334      	orrs	r4, r6
 800ca52:	fa22 f505 	lsr.w	r5, r2, r5
 800ca56:	432c      	orrs	r4, r5
 800ca58:	409a      	lsls	r2, r3
 800ca5a:	ea20 0602 	bic.w	r6, r0, r2
 800ca5e:	ea21 0704 	bic.w	r7, r1, r4
 800ca62:	ea56 0207 	orrs.w	r2, r6, r7
 800ca66:	f1a3 0420 	sub.w	r4, r3, #32
 800ca6a:	f1c3 0220 	rsb	r2, r3, #32
 800ca6e:	d10c      	bne.n	800ca8a <checkint+0x66>
 800ca70:	40d8      	lsrs	r0, r3
 800ca72:	fa01 f302 	lsl.w	r3, r1, r2
 800ca76:	4318      	orrs	r0, r3
 800ca78:	40e1      	lsrs	r1, r4
 800ca7a:	4308      	orrs	r0, r1
 800ca7c:	f000 0301 	and.w	r3, r0, #1
 800ca80:	f1c3 0002 	rsb	r0, r3, #2
 800ca84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca86:	2002      	movs	r0, #2
 800ca88:	e7fc      	b.n	800ca84 <checkint+0x60>
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	e7fa      	b.n	800ca84 <checkint+0x60>
	...

0800ca90 <pow>:
 800ca90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca94:	ed2d 8b0a 	vpush	{d8-d12}
 800ca98:	b09b      	sub	sp, #108	; 0x6c
 800ca9a:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ca9e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800caa2:	ed8d 1b00 	vstr	d1, [sp]
 800caa6:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800caaa:	e9dd 6700 	ldrd	r6, r7, [sp]
 800caae:	f109 30ff 	add.w	r0, r9, #4294967295
 800cab2:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800cab6:	4288      	cmp	r0, r1
 800cab8:	46cc      	mov	ip, r9
 800caba:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800cabe:	d806      	bhi.n	800cace <pow+0x3e>
 800cac0:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800cac4:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800cac8:	297f      	cmp	r1, #127	; 0x7f
 800caca:	f240 81ab 	bls.w	800ce24 <pow+0x394>
 800cace:	19b1      	adds	r1, r6, r6
 800cad0:	9104      	str	r1, [sp, #16]
 800cad2:	eb47 0107 	adc.w	r1, r7, r7
 800cad6:	9105      	str	r1, [sp, #20]
 800cad8:	9904      	ldr	r1, [sp, #16]
 800cada:	f111 31ff 	adds.w	r1, r1, #4294967295
 800cade:	460a      	mov	r2, r1
 800cae0:	9905      	ldr	r1, [sp, #20]
 800cae2:	f141 31ff 	adc.w	r1, r1, #4294967295
 800cae6:	460b      	mov	r3, r1
 800cae8:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800caec:	f06f 0001 	mvn.w	r0, #1
 800caf0:	4299      	cmp	r1, r3
 800caf2:	bf08      	it	eq
 800caf4:	4290      	cmpeq	r0, r2
 800caf6:	d260      	bcs.n	800cbba <pow+0x12a>
 800caf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cafc:	4313      	orrs	r3, r2
 800cafe:	d11a      	bne.n	800cb36 <pow+0xa6>
 800cb00:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800cb04:	1923      	adds	r3, r4, r4
 800cb06:	930c      	str	r3, [sp, #48]	; 0x30
 800cb08:	eb42 0302 	adc.w	r3, r2, r2
 800cb0c:	930d      	str	r3, [sp, #52]	; 0x34
 800cb0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800cb12:	4bcf      	ldr	r3, [pc, #828]	; (800ce50 <pow+0x3c0>)
 800cb14:	2200      	movs	r2, #0
 800cb16:	428b      	cmp	r3, r1
 800cb18:	bf08      	it	eq
 800cb1a:	4282      	cmpeq	r2, r0
 800cb1c:	f080 8265 	bcs.w	800cfea <pow+0x55a>
 800cb20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb24:	ed9d 6b00 	vldr	d6, [sp]
 800cb28:	ee37 0b06 	vadd.f64	d0, d7, d6
 800cb2c:	b01b      	add	sp, #108	; 0x6c
 800cb2e:	ecbd 8b0a 	vpop	{d8-d12}
 800cb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb36:	49c7      	ldr	r1, [pc, #796]	; (800ce54 <pow+0x3c4>)
 800cb38:	2000      	movs	r0, #0
 800cb3a:	428d      	cmp	r5, r1
 800cb3c:	bf08      	it	eq
 800cb3e:	4284      	cmpeq	r4, r0
 800cb40:	d10b      	bne.n	800cb5a <pow+0xca>
 800cb42:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800cb46:	19b3      	adds	r3, r6, r6
 800cb48:	930e      	str	r3, [sp, #56]	; 0x38
 800cb4a:	eb42 0302 	adc.w	r3, r2, r2
 800cb4e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb50:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800cb54:	4bbe      	ldr	r3, [pc, #760]	; (800ce50 <pow+0x3c0>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	e7dd      	b.n	800cb16 <pow+0x86>
 800cb5a:	1921      	adds	r1, r4, r4
 800cb5c:	9106      	str	r1, [sp, #24]
 800cb5e:	eb45 0105 	adc.w	r1, r5, r5
 800cb62:	9107      	str	r1, [sp, #28]
 800cb64:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800cb68:	49bb      	ldr	r1, [pc, #748]	; (800ce58 <pow+0x3c8>)
 800cb6a:	2000      	movs	r0, #0
 800cb6c:	42a1      	cmp	r1, r4
 800cb6e:	bf08      	it	eq
 800cb70:	4298      	cmpeq	r0, r3
 800cb72:	d3d5      	bcc.n	800cb20 <pow+0x90>
 800cb74:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800cb78:	428c      	cmp	r4, r1
 800cb7a:	bf08      	it	eq
 800cb7c:	4283      	cmpeq	r3, r0
 800cb7e:	d1cf      	bne.n	800cb20 <pow+0x90>
 800cb80:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800cb84:	49b5      	ldr	r1, [pc, #724]	; (800ce5c <pow+0x3cc>)
 800cb86:	2000      	movs	r0, #0
 800cb88:	428c      	cmp	r4, r1
 800cb8a:	bf08      	it	eq
 800cb8c:	4283      	cmpeq	r3, r0
 800cb8e:	f000 822c 	beq.w	800cfea <pow+0x55a>
 800cb92:	49b3      	ldr	r1, [pc, #716]	; (800ce60 <pow+0x3d0>)
 800cb94:	f04f 30ff 	mov.w	r0, #4294967295
 800cb98:	42a1      	cmp	r1, r4
 800cb9a:	bf08      	it	eq
 800cb9c:	4298      	cmpeq	r0, r3
 800cb9e:	ea6f 0307 	mvn.w	r3, r7
 800cba2:	bf34      	ite	cc
 800cba4:	2201      	movcc	r2, #1
 800cba6:	2200      	movcs	r2, #0
 800cba8:	0fdb      	lsrs	r3, r3, #31
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	f040 821a 	bne.w	800cfe4 <pow+0x554>
 800cbb0:	ed9d 7b00 	vldr	d7, [sp]
 800cbb4:	ee27 0b07 	vmul.f64	d0, d7, d7
 800cbb8:	e7b8      	b.n	800cb2c <pow+0x9c>
 800cbba:	1923      	adds	r3, r4, r4
 800cbbc:	9308      	str	r3, [sp, #32]
 800cbbe:	eb45 0305 	adc.w	r3, r5, r5
 800cbc2:	9309      	str	r3, [sp, #36]	; 0x24
 800cbc4:	9b08      	ldr	r3, [sp, #32]
 800cbc6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800cbca:	9310      	str	r3, [sp, #64]	; 0x40
 800cbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbce:	f143 33ff 	adc.w	r3, r3, #4294967295
 800cbd2:	9311      	str	r3, [sp, #68]	; 0x44
 800cbd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cbd8:	4299      	cmp	r1, r3
 800cbda:	bf08      	it	eq
 800cbdc:	4290      	cmpeq	r0, r2
 800cbde:	d22d      	bcs.n	800cc3c <pow+0x1ac>
 800cbe0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cbe4:	2c00      	cmp	r4, #0
 800cbe6:	f175 0300 	sbcs.w	r3, r5, #0
 800cbea:	ee27 0b07 	vmul.f64	d0, d7, d7
 800cbee:	da16      	bge.n	800cc1e <pow+0x18e>
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	4639      	mov	r1, r7
 800cbf4:	f7ff ff16 	bl	800ca24 <checkint>
 800cbf8:	2801      	cmp	r0, #1
 800cbfa:	d110      	bne.n	800cc1e <pow+0x18e>
 800cbfc:	eeb1 0b40 	vneg.f64	d0, d0
 800cc00:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800cc04:	4323      	orrs	r3, r4
 800cc06:	d10c      	bne.n	800cc22 <pow+0x192>
 800cc08:	2e00      	cmp	r6, #0
 800cc0a:	f177 0300 	sbcs.w	r3, r7, #0
 800cc0e:	da8d      	bge.n	800cb2c <pow+0x9c>
 800cc10:	b01b      	add	sp, #108	; 0x6c
 800cc12:	ecbd 8b0a 	vpop	{d8-d12}
 800cc16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc1a:	f000 ba29 	b.w	800d070 <__math_divzero>
 800cc1e:	2000      	movs	r0, #0
 800cc20:	e7ee      	b.n	800cc00 <pow+0x170>
 800cc22:	2e00      	cmp	r6, #0
 800cc24:	f177 0300 	sbcs.w	r3, r7, #0
 800cc28:	da80      	bge.n	800cb2c <pow+0x9c>
 800cc2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cc2e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800cc32:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800cc36:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800cc3a:	e777      	b.n	800cb2c <pow+0x9c>
 800cc3c:	2c00      	cmp	r4, #0
 800cc3e:	f175 0300 	sbcs.w	r3, r5, #0
 800cc42:	da35      	bge.n	800ccb0 <pow+0x220>
 800cc44:	4630      	mov	r0, r6
 800cc46:	4639      	mov	r1, r7
 800cc48:	f7ff feec 	bl	800ca24 <checkint>
 800cc4c:	b940      	cbnz	r0, 800cc60 <pow+0x1d0>
 800cc4e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800cc52:	b01b      	add	sp, #108	; 0x6c
 800cc54:	ecbd 8b0a 	vpop	{d8-d12}
 800cc58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5c:	f000 ba20 	b.w	800d0a0 <__math_invalid>
 800cc60:	2801      	cmp	r0, #1
 800cc62:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cc66:	bf14      	ite	ne
 800cc68:	2000      	movne	r0, #0
 800cc6a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800cc6e:	461d      	mov	r5, r3
 800cc70:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800cc74:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800cc78:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800cc7c:	2a7f      	cmp	r2, #127	; 0x7f
 800cc7e:	d933      	bls.n	800cce8 <pow+0x258>
 800cc80:	4974      	ldr	r1, [pc, #464]	; (800ce54 <pow+0x3c4>)
 800cc82:	2000      	movs	r0, #0
 800cc84:	428d      	cmp	r5, r1
 800cc86:	bf08      	it	eq
 800cc88:	4284      	cmpeq	r4, r0
 800cc8a:	f000 81ae 	beq.w	800cfea <pow+0x55a>
 800cc8e:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d80e      	bhi.n	800ccb4 <pow+0x224>
 800cc96:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cc9a:	ed9d 7b00 	vldr	d7, [sp]
 800cc9e:	42a9      	cmp	r1, r5
 800cca0:	bf08      	it	eq
 800cca2:	42a0      	cmpeq	r0, r4
 800cca4:	bf34      	ite	cc
 800cca6:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800ccaa:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800ccae:	e73d      	b.n	800cb2c <pow+0x9c>
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	e7df      	b.n	800cc74 <pow+0x1e4>
 800ccb4:	42a9      	cmp	r1, r5
 800ccb6:	bf08      	it	eq
 800ccb8:	42a0      	cmpeq	r0, r4
 800ccba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ccbe:	bf2c      	ite	cs
 800ccc0:	2301      	movcs	r3, #1
 800ccc2:	2300      	movcc	r3, #0
 800ccc4:	4590      	cmp	r8, r2
 800ccc6:	bf8c      	ite	hi
 800ccc8:	f04f 0800 	movhi.w	r8, #0
 800cccc:	f04f 0801 	movls.w	r8, #1
 800ccd0:	4543      	cmp	r3, r8
 800ccd2:	f04f 0000 	mov.w	r0, #0
 800ccd6:	f000 80af 	beq.w	800ce38 <pow+0x3a8>
 800ccda:	b01b      	add	sp, #108	; 0x6c
 800ccdc:	ecbd 8b0a 	vpop	{d8-d12}
 800cce0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cce4:	f000 b9bc 	b.w	800d060 <__math_oflow>
 800cce8:	f1bc 0f00 	cmp.w	ip, #0
 800ccec:	d10e      	bne.n	800cd0c <pow+0x27c>
 800ccee:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800ce48 <pow+0x3b8>
 800ccf2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ccf6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ccfa:	ec57 6b17 	vmov	r6, r7, d7
 800ccfe:	4b59      	ldr	r3, [pc, #356]	; (800ce64 <pow+0x3d4>)
 800cd00:	2100      	movs	r1, #0
 800cd02:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800cd06:	1874      	adds	r4, r6, r1
 800cd08:	eb42 0503 	adc.w	r5, r2, r3
 800cd0c:	2300      	movs	r3, #0
 800cd0e:	18e3      	adds	r3, r4, r3
 800cd10:	4b55      	ldr	r3, [pc, #340]	; (800ce68 <pow+0x3d8>)
 800cd12:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800cd16:	eb45 0303 	adc.w	r3, r5, r3
 800cd1a:	1519      	asrs	r1, r3, #20
 800cd1c:	ee03 1a10 	vmov	s6, r1
 800cd20:	0d1e      	lsrs	r6, r3, #20
 800cd22:	2100      	movs	r1, #0
 800cd24:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800cd28:	0536      	lsls	r6, r6, #20
 800cd2a:	1a63      	subs	r3, r4, r1
 800cd2c:	9312      	str	r3, [sp, #72]	; 0x48
 800cd2e:	eb65 0306 	sbc.w	r3, r5, r6
 800cd32:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd34:	4b4d      	ldr	r3, [pc, #308]	; (800ce6c <pow+0x3dc>)
 800cd36:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800cd3a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cd3e:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800cd42:	eea5 6b07 	vfma.f64	d6, d5, d7
 800cd46:	ed93 7b00 	vldr	d7, [r3]
 800cd4a:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800cd4e:	ed93 4b02 	vldr	d4, [r3, #8]
 800cd52:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800cd56:	eea3 5b07 	vfma.f64	d5, d3, d7
 800cd5a:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800cd5e:	ee36 9b05 	vadd.f64	d9, d6, d5
 800cd62:	ee35 5b49 	vsub.f64	d5, d5, d9
 800cd66:	eea3 7b04 	vfma.f64	d7, d3, d4
 800cd6a:	ed93 4b04 	vldr	d4, [r3, #16]
 800cd6e:	ee35 5b06 	vadd.f64	d5, d5, d6
 800cd72:	ee37 7b05 	vadd.f64	d7, d7, d5
 800cd76:	ee26 4b04 	vmul.f64	d4, d6, d4
 800cd7a:	ed93 3b08 	vldr	d3, [r3, #32]
 800cd7e:	ee26 0b04 	vmul.f64	d0, d6, d4
 800cd82:	eeb0 8b40 	vmov.f64	d8, d0
 800cd86:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800cd8a:	ed93 4b06 	vldr	d4, [r3, #24]
 800cd8e:	ee26 ab00 	vmul.f64	d10, d6, d0
 800cd92:	ee39 1b00 	vadd.f64	d1, d9, d0
 800cd96:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800cd9a:	eea6 4b03 	vfma.f64	d4, d6, d3
 800cd9e:	ee39 9b41 	vsub.f64	d9, d9, d1
 800cda2:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800cda6:	ee37 8b08 	vadd.f64	d8, d7, d8
 800cdaa:	ee39 9b00 	vadd.f64	d9, d9, d0
 800cdae:	eea6 3b02 	vfma.f64	d3, d6, d2
 800cdb2:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800cdb6:	ee38 9b09 	vadd.f64	d9, d8, d9
 800cdba:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800cdbe:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800cdc2:	ed9d 6b00 	vldr	d6, [sp]
 800cdc6:	eea0 3b02 	vfma.f64	d3, d0, d2
 800cdca:	eea0 4b03 	vfma.f64	d4, d0, d3
 800cdce:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800cdd2:	ee31 7b09 	vadd.f64	d7, d1, d9
 800cdd6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cdda:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cdde:	eeb0 3b46 	vmov.f64	d3, d6
 800cde2:	ee31 1b47 	vsub.f64	d1, d1, d7
 800cde6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cdea:	ee31 9b09 	vadd.f64	d9, d1, d9
 800cdee:	ed9d 6b00 	vldr	d6, [sp]
 800cdf2:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800cdf6:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800cdfa:	193c      	adds	r4, r7, r4
 800cdfc:	2c3e      	cmp	r4, #62	; 0x3e
 800cdfe:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800ce02:	eea6 3b09 	vfma.f64	d3, d6, d9
 800ce06:	d934      	bls.n	800ce72 <pow+0x3e2>
 800ce08:	428c      	cmp	r4, r1
 800ce0a:	da0d      	bge.n	800ce28 <pow+0x398>
 800ce0c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800ce10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce14:	ee37 0b00 	vadd.f64	d0, d7, d0
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	f43f ae87 	beq.w	800cb2c <pow+0x9c>
 800ce1e:	eeb1 0b40 	vneg.f64	d0, d0
 800ce22:	e683      	b.n	800cb2c <pow+0x9c>
 800ce24:	2000      	movs	r0, #0
 800ce26:	e771      	b.n	800cd0c <pow+0x27c>
 800ce28:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800ce2c:	d920      	bls.n	800ce70 <pow+0x3e0>
 800ce2e:	2a00      	cmp	r2, #0
 800ce30:	f173 0300 	sbcs.w	r3, r3, #0
 800ce34:	f6bf af51 	bge.w	800ccda <pow+0x24a>
 800ce38:	b01b      	add	sp, #108	; 0x6c
 800ce3a:	ecbd 8b0a 	vpop	{d8-d12}
 800ce3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce42:	f000 b905 	b.w	800d050 <__math_uflow>
 800ce46:	bf00      	nop
 800ce48:	00000000 	.word	0x00000000
 800ce4c:	43300000 	.word	0x43300000
 800ce50:	fff00000 	.word	0xfff00000
 800ce54:	3ff00000 	.word	0x3ff00000
 800ce58:	ffe00000 	.word	0xffe00000
 800ce5c:	7fe00000 	.word	0x7fe00000
 800ce60:	7fdfffff 	.word	0x7fdfffff
 800ce64:	fcc00000 	.word	0xfcc00000
 800ce68:	c0196aab 	.word	0xc0196aab
 800ce6c:	0800fa38 	.word	0x0800fa38
 800ce70:	460f      	mov	r7, r1
 800ce72:	4e65      	ldr	r6, [pc, #404]	; (800d008 <pow+0x578>)
 800ce74:	ed9d 4b02 	vldr	d4, [sp, #8]
 800ce78:	ed96 6b02 	vldr	d6, [r6, #8]
 800ce7c:	ed96 7b00 	vldr	d7, [r6]
 800ce80:	eeb0 5b46 	vmov.f64	d5, d6
 800ce84:	eea4 5b07 	vfma.f64	d5, d4, d7
 800ce88:	ed8d 5b00 	vstr	d5, [sp]
 800ce8c:	ee35 6b46 	vsub.f64	d6, d5, d6
 800ce90:	eeb0 5b44 	vmov.f64	d5, d4
 800ce94:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce98:	ed96 7b04 	vldr	d7, [r6, #16]
 800ce9c:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800cea0:	eea6 5b07 	vfma.f64	d5, d6, d7
 800cea4:	eeb0 7b45 	vmov.f64	d7, d5
 800cea8:	ed96 5b06 	vldr	d5, [r6, #24]
 800ceac:	1849      	adds	r1, r1, r1
 800ceae:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800ceb2:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800ceb6:	eea6 7b05 	vfma.f64	d7, d6, d5
 800ceba:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800cebe:	ee33 3b07 	vadd.f64	d3, d3, d7
 800cec2:	ee23 6b03 	vmul.f64	d6, d3, d3
 800cec6:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800ceca:	ed96 5b08 	vldr	d5, [r6, #32]
 800cece:	ee33 7b07 	vadd.f64	d7, d3, d7
 800ced2:	1814      	adds	r4, r2, r0
 800ced4:	0365      	lsls	r5, r4, #13
 800ced6:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800ceda:	eea3 5b04 	vfma.f64	d5, d3, d4
 800cede:	eea6 7b05 	vfma.f64	d7, d6, d5
 800cee2:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800cee6:	ee26 6b06 	vmul.f64	d6, d6, d6
 800ceea:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800ceee:	2000      	movs	r0, #0
 800cef0:	eb10 0a04 	adds.w	sl, r0, r4
 800cef4:	eea3 5b04 	vfma.f64	d5, d3, d4
 800cef8:	eb45 0b0c 	adc.w	fp, r5, ip
 800cefc:	eea6 7b05 	vfma.f64	d7, d6, d5
 800cf00:	2f00      	cmp	r7, #0
 800cf02:	d16a      	bne.n	800cfda <pow+0x54a>
 800cf04:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800cf08:	4639      	mov	r1, r7
 800cf0a:	ea50 0301 	orrs.w	r3, r0, r1
 800cf0e:	f04f 0300 	mov.w	r3, #0
 800cf12:	d115      	bne.n	800cf40 <pow+0x4b0>
 800cf14:	eb1a 0303 	adds.w	r3, sl, r3
 800cf18:	ee0b 3a10 	vmov	s22, r3
 800cf1c:	4b3b      	ldr	r3, [pc, #236]	; (800d00c <pow+0x57c>)
 800cf1e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800cff0 <pow+0x560>
 800cf22:	eb4b 0303 	adc.w	r3, fp, r3
 800cf26:	ee0b 3a90 	vmov	s23, r3
 800cf2a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800cf2e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800cf32:	b01b      	add	sp, #108	; 0x6c
 800cf34:	ecbd 8b0a 	vpop	{d8-d12}
 800cf38:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf3c:	f000 b8c8 	b.w	800d0d0 <__math_check_oflow>
 800cf40:	eb1a 0303 	adds.w	r3, sl, r3
 800cf44:	930a      	str	r3, [sp, #40]	; 0x28
 800cf46:	4b32      	ldr	r3, [pc, #200]	; (800d010 <pow+0x580>)
 800cf48:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800cf4c:	eb4b 0303 	adc.w	r3, fp, r3
 800cf50:	930b      	str	r3, [sp, #44]	; 0x2c
 800cf52:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800cf56:	ee27 6b05 	vmul.f64	d6, d7, d5
 800cf5a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800cf5e:	eeb0 3bc7 	vabs.f64	d3, d7
 800cf62:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800cf66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf6a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800cff8 <pow+0x568>
 800cf6e:	d52b      	bpl.n	800cfc8 <pow+0x538>
 800cf70:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800cf74:	ee35 5b47 	vsub.f64	d5, d5, d7
 800cf78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf7c:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800cf80:	ee35 6b06 	vadd.f64	d6, d5, d6
 800cf84:	bf48      	it	mi
 800cf86:	eeb0 4b43 	vmovmi.f64	d4, d3
 800cf8a:	ee37 3b04 	vadd.f64	d3, d7, d4
 800cf8e:	ee34 5b43 	vsub.f64	d5, d4, d3
 800cf92:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cf96:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cf9a:	ee37 7b03 	vadd.f64	d7, d7, d3
 800cf9e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800cfa2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cfa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfaa:	d105      	bne.n	800cfb8 <pow+0x528>
 800cfac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfae:	463a      	mov	r2, r7
 800cfb0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800cfb4:	ec43 2b17 	vmov	d7, r2, r3
 800cfb8:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800cfbc:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800cfc0:	ee26 6b00 	vmul.f64	d6, d6, d0
 800cfc4:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800cfc8:	ee27 0b00 	vmul.f64	d0, d7, d0
 800cfcc:	b01b      	add	sp, #108	; 0x6c
 800cfce:	ecbd 8b0a 	vpop	{d8-d12}
 800cfd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfd6:	f000 b872 	b.w	800d0be <__math_check_uflow>
 800cfda:	ec4b ab10 	vmov	d0, sl, fp
 800cfde:	eea7 0b00 	vfma.f64	d0, d7, d0
 800cfe2:	e5a3      	b.n	800cb2c <pow+0x9c>
 800cfe4:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800d000 <pow+0x570>
 800cfe8:	e5a0      	b.n	800cb2c <pow+0x9c>
 800cfea:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800cfee:	e59d      	b.n	800cb2c <pow+0x9c>
 800cff0:	00000000 	.word	0x00000000
 800cff4:	7f000000 	.word	0x7f000000
 800cff8:	00000000 	.word	0x00000000
 800cffc:	00100000 	.word	0x00100000
	...
 800d008:	08010a80 	.word	0x08010a80
 800d00c:	c0f00000 	.word	0xc0f00000
 800d010:	3fe00000 	.word	0x3fe00000

0800d014 <with_errno>:
 800d014:	b513      	push	{r0, r1, r4, lr}
 800d016:	4604      	mov	r4, r0
 800d018:	ed8d 0b00 	vstr	d0, [sp]
 800d01c:	f000 f86c 	bl	800d0f8 <__errno>
 800d020:	ed9d 0b00 	vldr	d0, [sp]
 800d024:	6004      	str	r4, [r0, #0]
 800d026:	b002      	add	sp, #8
 800d028:	bd10      	pop	{r4, pc}

0800d02a <xflow>:
 800d02a:	b082      	sub	sp, #8
 800d02c:	b158      	cbz	r0, 800d046 <xflow+0x1c>
 800d02e:	eeb1 7b40 	vneg.f64	d7, d0
 800d032:	ed8d 7b00 	vstr	d7, [sp]
 800d036:	ed9d 7b00 	vldr	d7, [sp]
 800d03a:	2022      	movs	r0, #34	; 0x22
 800d03c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d040:	b002      	add	sp, #8
 800d042:	f7ff bfe7 	b.w	800d014 <with_errno>
 800d046:	eeb0 7b40 	vmov.f64	d7, d0
 800d04a:	e7f2      	b.n	800d032 <xflow+0x8>
 800d04c:	0000      	movs	r0, r0
	...

0800d050 <__math_uflow>:
 800d050:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d058 <__math_uflow+0x8>
 800d054:	f7ff bfe9 	b.w	800d02a <xflow>
 800d058:	00000000 	.word	0x00000000
 800d05c:	10000000 	.word	0x10000000

0800d060 <__math_oflow>:
 800d060:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d068 <__math_oflow+0x8>
 800d064:	f7ff bfe1 	b.w	800d02a <xflow>
 800d068:	00000000 	.word	0x00000000
 800d06c:	70000000 	.word	0x70000000

0800d070 <__math_divzero>:
 800d070:	b082      	sub	sp, #8
 800d072:	2800      	cmp	r0, #0
 800d074:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d078:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800d07c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800d080:	ed8d 7b00 	vstr	d7, [sp]
 800d084:	ed9d 0b00 	vldr	d0, [sp]
 800d088:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800d098 <__math_divzero+0x28>
 800d08c:	2022      	movs	r0, #34	; 0x22
 800d08e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800d092:	b002      	add	sp, #8
 800d094:	f7ff bfbe 	b.w	800d014 <with_errno>
	...

0800d0a0 <__math_invalid>:
 800d0a0:	eeb0 7b40 	vmov.f64	d7, d0
 800d0a4:	eeb4 7b47 	vcmp.f64	d7, d7
 800d0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ac:	ee30 6b40 	vsub.f64	d6, d0, d0
 800d0b0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800d0b4:	d602      	bvs.n	800d0bc <__math_invalid+0x1c>
 800d0b6:	2021      	movs	r0, #33	; 0x21
 800d0b8:	f7ff bfac 	b.w	800d014 <with_errno>
 800d0bc:	4770      	bx	lr

0800d0be <__math_check_uflow>:
 800d0be:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800d0c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c6:	d102      	bne.n	800d0ce <__math_check_uflow+0x10>
 800d0c8:	2022      	movs	r0, #34	; 0x22
 800d0ca:	f7ff bfa3 	b.w	800d014 <with_errno>
 800d0ce:	4770      	bx	lr

0800d0d0 <__math_check_oflow>:
 800d0d0:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800d0f0 <__math_check_oflow+0x20>
 800d0d4:	eeb0 7bc0 	vabs.f64	d7, d0
 800d0d8:	eeb4 7b46 	vcmp.f64	d7, d6
 800d0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e0:	dd02      	ble.n	800d0e8 <__math_check_oflow+0x18>
 800d0e2:	2022      	movs	r0, #34	; 0x22
 800d0e4:	f7ff bf96 	b.w	800d014 <with_errno>
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	f3af 8000 	nop.w
 800d0f0:	ffffffff 	.word	0xffffffff
 800d0f4:	7fefffff 	.word	0x7fefffff

0800d0f8 <__errno>:
 800d0f8:	4b01      	ldr	r3, [pc, #4]	; (800d100 <__errno+0x8>)
 800d0fa:	6818      	ldr	r0, [r3, #0]
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	24000024 	.word	0x24000024

0800d104 <__libc_init_array>:
 800d104:	b570      	push	{r4, r5, r6, lr}
 800d106:	4d0d      	ldr	r5, [pc, #52]	; (800d13c <__libc_init_array+0x38>)
 800d108:	4c0d      	ldr	r4, [pc, #52]	; (800d140 <__libc_init_array+0x3c>)
 800d10a:	1b64      	subs	r4, r4, r5
 800d10c:	10a4      	asrs	r4, r4, #2
 800d10e:	2600      	movs	r6, #0
 800d110:	42a6      	cmp	r6, r4
 800d112:	d109      	bne.n	800d128 <__libc_init_array+0x24>
 800d114:	4d0b      	ldr	r5, [pc, #44]	; (800d144 <__libc_init_array+0x40>)
 800d116:	4c0c      	ldr	r4, [pc, #48]	; (800d148 <__libc_init_array+0x44>)
 800d118:	f002 fc60 	bl	800f9dc <_init>
 800d11c:	1b64      	subs	r4, r4, r5
 800d11e:	10a4      	asrs	r4, r4, #2
 800d120:	2600      	movs	r6, #0
 800d122:	42a6      	cmp	r6, r4
 800d124:	d105      	bne.n	800d132 <__libc_init_array+0x2e>
 800d126:	bd70      	pop	{r4, r5, r6, pc}
 800d128:	f855 3b04 	ldr.w	r3, [r5], #4
 800d12c:	4798      	blx	r3
 800d12e:	3601      	adds	r6, #1
 800d130:	e7ee      	b.n	800d110 <__libc_init_array+0xc>
 800d132:	f855 3b04 	ldr.w	r3, [r5], #4
 800d136:	4798      	blx	r3
 800d138:	3601      	adds	r6, #1
 800d13a:	e7f2      	b.n	800d122 <__libc_init_array+0x1e>
 800d13c:	080116dc 	.word	0x080116dc
 800d140:	080116dc 	.word	0x080116dc
 800d144:	080116dc 	.word	0x080116dc
 800d148:	080116e4 	.word	0x080116e4

0800d14c <memcpy>:
 800d14c:	440a      	add	r2, r1
 800d14e:	4291      	cmp	r1, r2
 800d150:	f100 33ff 	add.w	r3, r0, #4294967295
 800d154:	d100      	bne.n	800d158 <memcpy+0xc>
 800d156:	4770      	bx	lr
 800d158:	b510      	push	{r4, lr}
 800d15a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d15e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d162:	4291      	cmp	r1, r2
 800d164:	d1f9      	bne.n	800d15a <memcpy+0xe>
 800d166:	bd10      	pop	{r4, pc}

0800d168 <memset>:
 800d168:	4402      	add	r2, r0
 800d16a:	4603      	mov	r3, r0
 800d16c:	4293      	cmp	r3, r2
 800d16e:	d100      	bne.n	800d172 <memset+0xa>
 800d170:	4770      	bx	lr
 800d172:	f803 1b01 	strb.w	r1, [r3], #1
 800d176:	e7f9      	b.n	800d16c <memset+0x4>

0800d178 <__cvt>:
 800d178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d17a:	ed2d 8b02 	vpush	{d8}
 800d17e:	eeb0 8b40 	vmov.f64	d8, d0
 800d182:	b085      	sub	sp, #20
 800d184:	4617      	mov	r7, r2
 800d186:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d188:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d18a:	ee18 2a90 	vmov	r2, s17
 800d18e:	f025 0520 	bic.w	r5, r5, #32
 800d192:	2a00      	cmp	r2, #0
 800d194:	bfb6      	itet	lt
 800d196:	222d      	movlt	r2, #45	; 0x2d
 800d198:	2200      	movge	r2, #0
 800d19a:	eeb1 8b40 	vneglt.f64	d8, d0
 800d19e:	2d46      	cmp	r5, #70	; 0x46
 800d1a0:	460c      	mov	r4, r1
 800d1a2:	701a      	strb	r2, [r3, #0]
 800d1a4:	d004      	beq.n	800d1b0 <__cvt+0x38>
 800d1a6:	2d45      	cmp	r5, #69	; 0x45
 800d1a8:	d100      	bne.n	800d1ac <__cvt+0x34>
 800d1aa:	3401      	adds	r4, #1
 800d1ac:	2102      	movs	r1, #2
 800d1ae:	e000      	b.n	800d1b2 <__cvt+0x3a>
 800d1b0:	2103      	movs	r1, #3
 800d1b2:	ab03      	add	r3, sp, #12
 800d1b4:	9301      	str	r3, [sp, #4]
 800d1b6:	ab02      	add	r3, sp, #8
 800d1b8:	9300      	str	r3, [sp, #0]
 800d1ba:	4622      	mov	r2, r4
 800d1bc:	4633      	mov	r3, r6
 800d1be:	eeb0 0b48 	vmov.f64	d0, d8
 800d1c2:	f000 fca9 	bl	800db18 <_dtoa_r>
 800d1c6:	2d47      	cmp	r5, #71	; 0x47
 800d1c8:	d109      	bne.n	800d1de <__cvt+0x66>
 800d1ca:	07fb      	lsls	r3, r7, #31
 800d1cc:	d407      	bmi.n	800d1de <__cvt+0x66>
 800d1ce:	9b03      	ldr	r3, [sp, #12]
 800d1d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d1d2:	1a1b      	subs	r3, r3, r0
 800d1d4:	6013      	str	r3, [r2, #0]
 800d1d6:	b005      	add	sp, #20
 800d1d8:	ecbd 8b02 	vpop	{d8}
 800d1dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1de:	2d46      	cmp	r5, #70	; 0x46
 800d1e0:	eb00 0204 	add.w	r2, r0, r4
 800d1e4:	d10c      	bne.n	800d200 <__cvt+0x88>
 800d1e6:	7803      	ldrb	r3, [r0, #0]
 800d1e8:	2b30      	cmp	r3, #48	; 0x30
 800d1ea:	d107      	bne.n	800d1fc <__cvt+0x84>
 800d1ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1f4:	bf1c      	itt	ne
 800d1f6:	f1c4 0401 	rsbne	r4, r4, #1
 800d1fa:	6034      	strne	r4, [r6, #0]
 800d1fc:	6833      	ldr	r3, [r6, #0]
 800d1fe:	441a      	add	r2, r3
 800d200:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d208:	bf08      	it	eq
 800d20a:	9203      	streq	r2, [sp, #12]
 800d20c:	2130      	movs	r1, #48	; 0x30
 800d20e:	9b03      	ldr	r3, [sp, #12]
 800d210:	4293      	cmp	r3, r2
 800d212:	d2dc      	bcs.n	800d1ce <__cvt+0x56>
 800d214:	1c5c      	adds	r4, r3, #1
 800d216:	9403      	str	r4, [sp, #12]
 800d218:	7019      	strb	r1, [r3, #0]
 800d21a:	e7f8      	b.n	800d20e <__cvt+0x96>

0800d21c <__exponent>:
 800d21c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d21e:	4603      	mov	r3, r0
 800d220:	2900      	cmp	r1, #0
 800d222:	bfb8      	it	lt
 800d224:	4249      	neglt	r1, r1
 800d226:	f803 2b02 	strb.w	r2, [r3], #2
 800d22a:	bfb4      	ite	lt
 800d22c:	222d      	movlt	r2, #45	; 0x2d
 800d22e:	222b      	movge	r2, #43	; 0x2b
 800d230:	2909      	cmp	r1, #9
 800d232:	7042      	strb	r2, [r0, #1]
 800d234:	dd2a      	ble.n	800d28c <__exponent+0x70>
 800d236:	f10d 0407 	add.w	r4, sp, #7
 800d23a:	46a4      	mov	ip, r4
 800d23c:	270a      	movs	r7, #10
 800d23e:	46a6      	mov	lr, r4
 800d240:	460a      	mov	r2, r1
 800d242:	fb91 f6f7 	sdiv	r6, r1, r7
 800d246:	fb07 1516 	mls	r5, r7, r6, r1
 800d24a:	3530      	adds	r5, #48	; 0x30
 800d24c:	2a63      	cmp	r2, #99	; 0x63
 800d24e:	f104 34ff 	add.w	r4, r4, #4294967295
 800d252:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d256:	4631      	mov	r1, r6
 800d258:	dcf1      	bgt.n	800d23e <__exponent+0x22>
 800d25a:	3130      	adds	r1, #48	; 0x30
 800d25c:	f1ae 0502 	sub.w	r5, lr, #2
 800d260:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d264:	1c44      	adds	r4, r0, #1
 800d266:	4629      	mov	r1, r5
 800d268:	4561      	cmp	r1, ip
 800d26a:	d30a      	bcc.n	800d282 <__exponent+0x66>
 800d26c:	f10d 0209 	add.w	r2, sp, #9
 800d270:	eba2 020e 	sub.w	r2, r2, lr
 800d274:	4565      	cmp	r5, ip
 800d276:	bf88      	it	hi
 800d278:	2200      	movhi	r2, #0
 800d27a:	4413      	add	r3, r2
 800d27c:	1a18      	subs	r0, r3, r0
 800d27e:	b003      	add	sp, #12
 800d280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d282:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d286:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d28a:	e7ed      	b.n	800d268 <__exponent+0x4c>
 800d28c:	2330      	movs	r3, #48	; 0x30
 800d28e:	3130      	adds	r1, #48	; 0x30
 800d290:	7083      	strb	r3, [r0, #2]
 800d292:	70c1      	strb	r1, [r0, #3]
 800d294:	1d03      	adds	r3, r0, #4
 800d296:	e7f1      	b.n	800d27c <__exponent+0x60>

0800d298 <_printf_float>:
 800d298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d29c:	b08b      	sub	sp, #44	; 0x2c
 800d29e:	460c      	mov	r4, r1
 800d2a0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d2a4:	4616      	mov	r6, r2
 800d2a6:	461f      	mov	r7, r3
 800d2a8:	4605      	mov	r5, r0
 800d2aa:	f001 f9b7 	bl	800e61c <_localeconv_r>
 800d2ae:	f8d0 b000 	ldr.w	fp, [r0]
 800d2b2:	4658      	mov	r0, fp
 800d2b4:	f7f3 f814 	bl	80002e0 <strlen>
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	9308      	str	r3, [sp, #32]
 800d2bc:	f8d8 3000 	ldr.w	r3, [r8]
 800d2c0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d2c4:	6822      	ldr	r2, [r4, #0]
 800d2c6:	3307      	adds	r3, #7
 800d2c8:	f023 0307 	bic.w	r3, r3, #7
 800d2cc:	f103 0108 	add.w	r1, r3, #8
 800d2d0:	f8c8 1000 	str.w	r1, [r8]
 800d2d4:	4682      	mov	sl, r0
 800d2d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d2da:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d2de:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d540 <_printf_float+0x2a8>
 800d2e2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d2e6:	eeb0 6bc0 	vabs.f64	d6, d0
 800d2ea:	eeb4 6b47 	vcmp.f64	d6, d7
 800d2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2f2:	dd24      	ble.n	800d33e <_printf_float+0xa6>
 800d2f4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2fc:	d502      	bpl.n	800d304 <_printf_float+0x6c>
 800d2fe:	232d      	movs	r3, #45	; 0x2d
 800d300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d304:	4b90      	ldr	r3, [pc, #576]	; (800d548 <_printf_float+0x2b0>)
 800d306:	4891      	ldr	r0, [pc, #580]	; (800d54c <_printf_float+0x2b4>)
 800d308:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d30c:	bf94      	ite	ls
 800d30e:	4698      	movls	r8, r3
 800d310:	4680      	movhi	r8, r0
 800d312:	2303      	movs	r3, #3
 800d314:	6123      	str	r3, [r4, #16]
 800d316:	f022 0204 	bic.w	r2, r2, #4
 800d31a:	2300      	movs	r3, #0
 800d31c:	6022      	str	r2, [r4, #0]
 800d31e:	9304      	str	r3, [sp, #16]
 800d320:	9700      	str	r7, [sp, #0]
 800d322:	4633      	mov	r3, r6
 800d324:	aa09      	add	r2, sp, #36	; 0x24
 800d326:	4621      	mov	r1, r4
 800d328:	4628      	mov	r0, r5
 800d32a:	f000 f9d3 	bl	800d6d4 <_printf_common>
 800d32e:	3001      	adds	r0, #1
 800d330:	f040 808a 	bne.w	800d448 <_printf_float+0x1b0>
 800d334:	f04f 30ff 	mov.w	r0, #4294967295
 800d338:	b00b      	add	sp, #44	; 0x2c
 800d33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d33e:	eeb4 0b40 	vcmp.f64	d0, d0
 800d342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d346:	d709      	bvc.n	800d35c <_printf_float+0xc4>
 800d348:	ee10 3a90 	vmov	r3, s1
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	bfbc      	itt	lt
 800d350:	232d      	movlt	r3, #45	; 0x2d
 800d352:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d356:	487e      	ldr	r0, [pc, #504]	; (800d550 <_printf_float+0x2b8>)
 800d358:	4b7e      	ldr	r3, [pc, #504]	; (800d554 <_printf_float+0x2bc>)
 800d35a:	e7d5      	b.n	800d308 <_printf_float+0x70>
 800d35c:	6863      	ldr	r3, [r4, #4]
 800d35e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d362:	9104      	str	r1, [sp, #16]
 800d364:	1c59      	adds	r1, r3, #1
 800d366:	d13c      	bne.n	800d3e2 <_printf_float+0x14a>
 800d368:	2306      	movs	r3, #6
 800d36a:	6063      	str	r3, [r4, #4]
 800d36c:	2300      	movs	r3, #0
 800d36e:	9303      	str	r3, [sp, #12]
 800d370:	ab08      	add	r3, sp, #32
 800d372:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d376:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d37a:	ab07      	add	r3, sp, #28
 800d37c:	6861      	ldr	r1, [r4, #4]
 800d37e:	9300      	str	r3, [sp, #0]
 800d380:	6022      	str	r2, [r4, #0]
 800d382:	f10d 031b 	add.w	r3, sp, #27
 800d386:	4628      	mov	r0, r5
 800d388:	f7ff fef6 	bl	800d178 <__cvt>
 800d38c:	9b04      	ldr	r3, [sp, #16]
 800d38e:	9907      	ldr	r1, [sp, #28]
 800d390:	2b47      	cmp	r3, #71	; 0x47
 800d392:	4680      	mov	r8, r0
 800d394:	d108      	bne.n	800d3a8 <_printf_float+0x110>
 800d396:	1cc8      	adds	r0, r1, #3
 800d398:	db02      	blt.n	800d3a0 <_printf_float+0x108>
 800d39a:	6863      	ldr	r3, [r4, #4]
 800d39c:	4299      	cmp	r1, r3
 800d39e:	dd41      	ble.n	800d424 <_printf_float+0x18c>
 800d3a0:	f1a9 0902 	sub.w	r9, r9, #2
 800d3a4:	fa5f f989 	uxtb.w	r9, r9
 800d3a8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d3ac:	d820      	bhi.n	800d3f0 <_printf_float+0x158>
 800d3ae:	3901      	subs	r1, #1
 800d3b0:	464a      	mov	r2, r9
 800d3b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d3b6:	9107      	str	r1, [sp, #28]
 800d3b8:	f7ff ff30 	bl	800d21c <__exponent>
 800d3bc:	9a08      	ldr	r2, [sp, #32]
 800d3be:	9004      	str	r0, [sp, #16]
 800d3c0:	1813      	adds	r3, r2, r0
 800d3c2:	2a01      	cmp	r2, #1
 800d3c4:	6123      	str	r3, [r4, #16]
 800d3c6:	dc02      	bgt.n	800d3ce <_printf_float+0x136>
 800d3c8:	6822      	ldr	r2, [r4, #0]
 800d3ca:	07d2      	lsls	r2, r2, #31
 800d3cc:	d501      	bpl.n	800d3d2 <_printf_float+0x13a>
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	6123      	str	r3, [r4, #16]
 800d3d2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d0a2      	beq.n	800d320 <_printf_float+0x88>
 800d3da:	232d      	movs	r3, #45	; 0x2d
 800d3dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3e0:	e79e      	b.n	800d320 <_printf_float+0x88>
 800d3e2:	9904      	ldr	r1, [sp, #16]
 800d3e4:	2947      	cmp	r1, #71	; 0x47
 800d3e6:	d1c1      	bne.n	800d36c <_printf_float+0xd4>
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d1bf      	bne.n	800d36c <_printf_float+0xd4>
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	e7bc      	b.n	800d36a <_printf_float+0xd2>
 800d3f0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d3f4:	d118      	bne.n	800d428 <_printf_float+0x190>
 800d3f6:	2900      	cmp	r1, #0
 800d3f8:	6863      	ldr	r3, [r4, #4]
 800d3fa:	dd0b      	ble.n	800d414 <_printf_float+0x17c>
 800d3fc:	6121      	str	r1, [r4, #16]
 800d3fe:	b913      	cbnz	r3, 800d406 <_printf_float+0x16e>
 800d400:	6822      	ldr	r2, [r4, #0]
 800d402:	07d0      	lsls	r0, r2, #31
 800d404:	d502      	bpl.n	800d40c <_printf_float+0x174>
 800d406:	3301      	adds	r3, #1
 800d408:	440b      	add	r3, r1
 800d40a:	6123      	str	r3, [r4, #16]
 800d40c:	2300      	movs	r3, #0
 800d40e:	65a1      	str	r1, [r4, #88]	; 0x58
 800d410:	9304      	str	r3, [sp, #16]
 800d412:	e7de      	b.n	800d3d2 <_printf_float+0x13a>
 800d414:	b913      	cbnz	r3, 800d41c <_printf_float+0x184>
 800d416:	6822      	ldr	r2, [r4, #0]
 800d418:	07d2      	lsls	r2, r2, #31
 800d41a:	d501      	bpl.n	800d420 <_printf_float+0x188>
 800d41c:	3302      	adds	r3, #2
 800d41e:	e7f4      	b.n	800d40a <_printf_float+0x172>
 800d420:	2301      	movs	r3, #1
 800d422:	e7f2      	b.n	800d40a <_printf_float+0x172>
 800d424:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d428:	9b08      	ldr	r3, [sp, #32]
 800d42a:	4299      	cmp	r1, r3
 800d42c:	db05      	blt.n	800d43a <_printf_float+0x1a2>
 800d42e:	6823      	ldr	r3, [r4, #0]
 800d430:	6121      	str	r1, [r4, #16]
 800d432:	07d8      	lsls	r0, r3, #31
 800d434:	d5ea      	bpl.n	800d40c <_printf_float+0x174>
 800d436:	1c4b      	adds	r3, r1, #1
 800d438:	e7e7      	b.n	800d40a <_printf_float+0x172>
 800d43a:	2900      	cmp	r1, #0
 800d43c:	bfd4      	ite	le
 800d43e:	f1c1 0202 	rsble	r2, r1, #2
 800d442:	2201      	movgt	r2, #1
 800d444:	4413      	add	r3, r2
 800d446:	e7e0      	b.n	800d40a <_printf_float+0x172>
 800d448:	6823      	ldr	r3, [r4, #0]
 800d44a:	055a      	lsls	r2, r3, #21
 800d44c:	d407      	bmi.n	800d45e <_printf_float+0x1c6>
 800d44e:	6923      	ldr	r3, [r4, #16]
 800d450:	4642      	mov	r2, r8
 800d452:	4631      	mov	r1, r6
 800d454:	4628      	mov	r0, r5
 800d456:	47b8      	blx	r7
 800d458:	3001      	adds	r0, #1
 800d45a:	d12a      	bne.n	800d4b2 <_printf_float+0x21a>
 800d45c:	e76a      	b.n	800d334 <_printf_float+0x9c>
 800d45e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d462:	f240 80e2 	bls.w	800d62a <_printf_float+0x392>
 800d466:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d46a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d472:	d133      	bne.n	800d4dc <_printf_float+0x244>
 800d474:	4a38      	ldr	r2, [pc, #224]	; (800d558 <_printf_float+0x2c0>)
 800d476:	2301      	movs	r3, #1
 800d478:	4631      	mov	r1, r6
 800d47a:	4628      	mov	r0, r5
 800d47c:	47b8      	blx	r7
 800d47e:	3001      	adds	r0, #1
 800d480:	f43f af58 	beq.w	800d334 <_printf_float+0x9c>
 800d484:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d488:	429a      	cmp	r2, r3
 800d48a:	db02      	blt.n	800d492 <_printf_float+0x1fa>
 800d48c:	6823      	ldr	r3, [r4, #0]
 800d48e:	07d8      	lsls	r0, r3, #31
 800d490:	d50f      	bpl.n	800d4b2 <_printf_float+0x21a>
 800d492:	4653      	mov	r3, sl
 800d494:	465a      	mov	r2, fp
 800d496:	4631      	mov	r1, r6
 800d498:	4628      	mov	r0, r5
 800d49a:	47b8      	blx	r7
 800d49c:	3001      	adds	r0, #1
 800d49e:	f43f af49 	beq.w	800d334 <_printf_float+0x9c>
 800d4a2:	f04f 0800 	mov.w	r8, #0
 800d4a6:	f104 091a 	add.w	r9, r4, #26
 800d4aa:	9b08      	ldr	r3, [sp, #32]
 800d4ac:	3b01      	subs	r3, #1
 800d4ae:	4543      	cmp	r3, r8
 800d4b0:	dc09      	bgt.n	800d4c6 <_printf_float+0x22e>
 800d4b2:	6823      	ldr	r3, [r4, #0]
 800d4b4:	079b      	lsls	r3, r3, #30
 800d4b6:	f100 8108 	bmi.w	800d6ca <_printf_float+0x432>
 800d4ba:	68e0      	ldr	r0, [r4, #12]
 800d4bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4be:	4298      	cmp	r0, r3
 800d4c0:	bfb8      	it	lt
 800d4c2:	4618      	movlt	r0, r3
 800d4c4:	e738      	b.n	800d338 <_printf_float+0xa0>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	464a      	mov	r2, r9
 800d4ca:	4631      	mov	r1, r6
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	47b8      	blx	r7
 800d4d0:	3001      	adds	r0, #1
 800d4d2:	f43f af2f 	beq.w	800d334 <_printf_float+0x9c>
 800d4d6:	f108 0801 	add.w	r8, r8, #1
 800d4da:	e7e6      	b.n	800d4aa <_printf_float+0x212>
 800d4dc:	9b07      	ldr	r3, [sp, #28]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	dc3c      	bgt.n	800d55c <_printf_float+0x2c4>
 800d4e2:	4a1d      	ldr	r2, [pc, #116]	; (800d558 <_printf_float+0x2c0>)
 800d4e4:	2301      	movs	r3, #1
 800d4e6:	4631      	mov	r1, r6
 800d4e8:	4628      	mov	r0, r5
 800d4ea:	47b8      	blx	r7
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	f43f af21 	beq.w	800d334 <_printf_float+0x9c>
 800d4f2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	d102      	bne.n	800d500 <_printf_float+0x268>
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	07d9      	lsls	r1, r3, #31
 800d4fe:	d5d8      	bpl.n	800d4b2 <_printf_float+0x21a>
 800d500:	4653      	mov	r3, sl
 800d502:	465a      	mov	r2, fp
 800d504:	4631      	mov	r1, r6
 800d506:	4628      	mov	r0, r5
 800d508:	47b8      	blx	r7
 800d50a:	3001      	adds	r0, #1
 800d50c:	f43f af12 	beq.w	800d334 <_printf_float+0x9c>
 800d510:	f04f 0900 	mov.w	r9, #0
 800d514:	f104 0a1a 	add.w	sl, r4, #26
 800d518:	9b07      	ldr	r3, [sp, #28]
 800d51a:	425b      	negs	r3, r3
 800d51c:	454b      	cmp	r3, r9
 800d51e:	dc01      	bgt.n	800d524 <_printf_float+0x28c>
 800d520:	9b08      	ldr	r3, [sp, #32]
 800d522:	e795      	b.n	800d450 <_printf_float+0x1b8>
 800d524:	2301      	movs	r3, #1
 800d526:	4652      	mov	r2, sl
 800d528:	4631      	mov	r1, r6
 800d52a:	4628      	mov	r0, r5
 800d52c:	47b8      	blx	r7
 800d52e:	3001      	adds	r0, #1
 800d530:	f43f af00 	beq.w	800d334 <_printf_float+0x9c>
 800d534:	f109 0901 	add.w	r9, r9, #1
 800d538:	e7ee      	b.n	800d518 <_printf_float+0x280>
 800d53a:	bf00      	nop
 800d53c:	f3af 8000 	nop.w
 800d540:	ffffffff 	.word	0xffffffff
 800d544:	7fefffff 	.word	0x7fefffff
 800d548:	080112f4 	.word	0x080112f4
 800d54c:	080112f8 	.word	0x080112f8
 800d550:	08011300 	.word	0x08011300
 800d554:	080112fc 	.word	0x080112fc
 800d558:	08011304 	.word	0x08011304
 800d55c:	9a08      	ldr	r2, [sp, #32]
 800d55e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d560:	429a      	cmp	r2, r3
 800d562:	bfa8      	it	ge
 800d564:	461a      	movge	r2, r3
 800d566:	2a00      	cmp	r2, #0
 800d568:	4691      	mov	r9, r2
 800d56a:	dc38      	bgt.n	800d5de <_printf_float+0x346>
 800d56c:	2300      	movs	r3, #0
 800d56e:	9305      	str	r3, [sp, #20]
 800d570:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d574:	f104 021a 	add.w	r2, r4, #26
 800d578:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d57a:	9905      	ldr	r1, [sp, #20]
 800d57c:	9304      	str	r3, [sp, #16]
 800d57e:	eba3 0309 	sub.w	r3, r3, r9
 800d582:	428b      	cmp	r3, r1
 800d584:	dc33      	bgt.n	800d5ee <_printf_float+0x356>
 800d586:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d58a:	429a      	cmp	r2, r3
 800d58c:	db3c      	blt.n	800d608 <_printf_float+0x370>
 800d58e:	6823      	ldr	r3, [r4, #0]
 800d590:	07da      	lsls	r2, r3, #31
 800d592:	d439      	bmi.n	800d608 <_printf_float+0x370>
 800d594:	9a08      	ldr	r2, [sp, #32]
 800d596:	9b04      	ldr	r3, [sp, #16]
 800d598:	9907      	ldr	r1, [sp, #28]
 800d59a:	1ad3      	subs	r3, r2, r3
 800d59c:	eba2 0901 	sub.w	r9, r2, r1
 800d5a0:	4599      	cmp	r9, r3
 800d5a2:	bfa8      	it	ge
 800d5a4:	4699      	movge	r9, r3
 800d5a6:	f1b9 0f00 	cmp.w	r9, #0
 800d5aa:	dc35      	bgt.n	800d618 <_printf_float+0x380>
 800d5ac:	f04f 0800 	mov.w	r8, #0
 800d5b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d5b4:	f104 0a1a 	add.w	sl, r4, #26
 800d5b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d5bc:	1a9b      	subs	r3, r3, r2
 800d5be:	eba3 0309 	sub.w	r3, r3, r9
 800d5c2:	4543      	cmp	r3, r8
 800d5c4:	f77f af75 	ble.w	800d4b2 <_printf_float+0x21a>
 800d5c8:	2301      	movs	r3, #1
 800d5ca:	4652      	mov	r2, sl
 800d5cc:	4631      	mov	r1, r6
 800d5ce:	4628      	mov	r0, r5
 800d5d0:	47b8      	blx	r7
 800d5d2:	3001      	adds	r0, #1
 800d5d4:	f43f aeae 	beq.w	800d334 <_printf_float+0x9c>
 800d5d8:	f108 0801 	add.w	r8, r8, #1
 800d5dc:	e7ec      	b.n	800d5b8 <_printf_float+0x320>
 800d5de:	4613      	mov	r3, r2
 800d5e0:	4631      	mov	r1, r6
 800d5e2:	4642      	mov	r2, r8
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	47b8      	blx	r7
 800d5e8:	3001      	adds	r0, #1
 800d5ea:	d1bf      	bne.n	800d56c <_printf_float+0x2d4>
 800d5ec:	e6a2      	b.n	800d334 <_printf_float+0x9c>
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	4631      	mov	r1, r6
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	9204      	str	r2, [sp, #16]
 800d5f6:	47b8      	blx	r7
 800d5f8:	3001      	adds	r0, #1
 800d5fa:	f43f ae9b 	beq.w	800d334 <_printf_float+0x9c>
 800d5fe:	9b05      	ldr	r3, [sp, #20]
 800d600:	9a04      	ldr	r2, [sp, #16]
 800d602:	3301      	adds	r3, #1
 800d604:	9305      	str	r3, [sp, #20]
 800d606:	e7b7      	b.n	800d578 <_printf_float+0x2e0>
 800d608:	4653      	mov	r3, sl
 800d60a:	465a      	mov	r2, fp
 800d60c:	4631      	mov	r1, r6
 800d60e:	4628      	mov	r0, r5
 800d610:	47b8      	blx	r7
 800d612:	3001      	adds	r0, #1
 800d614:	d1be      	bne.n	800d594 <_printf_float+0x2fc>
 800d616:	e68d      	b.n	800d334 <_printf_float+0x9c>
 800d618:	9a04      	ldr	r2, [sp, #16]
 800d61a:	464b      	mov	r3, r9
 800d61c:	4442      	add	r2, r8
 800d61e:	4631      	mov	r1, r6
 800d620:	4628      	mov	r0, r5
 800d622:	47b8      	blx	r7
 800d624:	3001      	adds	r0, #1
 800d626:	d1c1      	bne.n	800d5ac <_printf_float+0x314>
 800d628:	e684      	b.n	800d334 <_printf_float+0x9c>
 800d62a:	9a08      	ldr	r2, [sp, #32]
 800d62c:	2a01      	cmp	r2, #1
 800d62e:	dc01      	bgt.n	800d634 <_printf_float+0x39c>
 800d630:	07db      	lsls	r3, r3, #31
 800d632:	d537      	bpl.n	800d6a4 <_printf_float+0x40c>
 800d634:	2301      	movs	r3, #1
 800d636:	4642      	mov	r2, r8
 800d638:	4631      	mov	r1, r6
 800d63a:	4628      	mov	r0, r5
 800d63c:	47b8      	blx	r7
 800d63e:	3001      	adds	r0, #1
 800d640:	f43f ae78 	beq.w	800d334 <_printf_float+0x9c>
 800d644:	4653      	mov	r3, sl
 800d646:	465a      	mov	r2, fp
 800d648:	4631      	mov	r1, r6
 800d64a:	4628      	mov	r0, r5
 800d64c:	47b8      	blx	r7
 800d64e:	3001      	adds	r0, #1
 800d650:	f43f ae70 	beq.w	800d334 <_printf_float+0x9c>
 800d654:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d658:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d65c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d660:	d01b      	beq.n	800d69a <_printf_float+0x402>
 800d662:	9b08      	ldr	r3, [sp, #32]
 800d664:	f108 0201 	add.w	r2, r8, #1
 800d668:	3b01      	subs	r3, #1
 800d66a:	4631      	mov	r1, r6
 800d66c:	4628      	mov	r0, r5
 800d66e:	47b8      	blx	r7
 800d670:	3001      	adds	r0, #1
 800d672:	d10e      	bne.n	800d692 <_printf_float+0x3fa>
 800d674:	e65e      	b.n	800d334 <_printf_float+0x9c>
 800d676:	2301      	movs	r3, #1
 800d678:	464a      	mov	r2, r9
 800d67a:	4631      	mov	r1, r6
 800d67c:	4628      	mov	r0, r5
 800d67e:	47b8      	blx	r7
 800d680:	3001      	adds	r0, #1
 800d682:	f43f ae57 	beq.w	800d334 <_printf_float+0x9c>
 800d686:	f108 0801 	add.w	r8, r8, #1
 800d68a:	9b08      	ldr	r3, [sp, #32]
 800d68c:	3b01      	subs	r3, #1
 800d68e:	4543      	cmp	r3, r8
 800d690:	dcf1      	bgt.n	800d676 <_printf_float+0x3de>
 800d692:	9b04      	ldr	r3, [sp, #16]
 800d694:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d698:	e6db      	b.n	800d452 <_printf_float+0x1ba>
 800d69a:	f04f 0800 	mov.w	r8, #0
 800d69e:	f104 091a 	add.w	r9, r4, #26
 800d6a2:	e7f2      	b.n	800d68a <_printf_float+0x3f2>
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	4642      	mov	r2, r8
 800d6a8:	e7df      	b.n	800d66a <_printf_float+0x3d2>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	464a      	mov	r2, r9
 800d6ae:	4631      	mov	r1, r6
 800d6b0:	4628      	mov	r0, r5
 800d6b2:	47b8      	blx	r7
 800d6b4:	3001      	adds	r0, #1
 800d6b6:	f43f ae3d 	beq.w	800d334 <_printf_float+0x9c>
 800d6ba:	f108 0801 	add.w	r8, r8, #1
 800d6be:	68e3      	ldr	r3, [r4, #12]
 800d6c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d6c2:	1a5b      	subs	r3, r3, r1
 800d6c4:	4543      	cmp	r3, r8
 800d6c6:	dcf0      	bgt.n	800d6aa <_printf_float+0x412>
 800d6c8:	e6f7      	b.n	800d4ba <_printf_float+0x222>
 800d6ca:	f04f 0800 	mov.w	r8, #0
 800d6ce:	f104 0919 	add.w	r9, r4, #25
 800d6d2:	e7f4      	b.n	800d6be <_printf_float+0x426>

0800d6d4 <_printf_common>:
 800d6d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6d8:	4616      	mov	r6, r2
 800d6da:	4699      	mov	r9, r3
 800d6dc:	688a      	ldr	r2, [r1, #8]
 800d6de:	690b      	ldr	r3, [r1, #16]
 800d6e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	bfb8      	it	lt
 800d6e8:	4613      	movlt	r3, r2
 800d6ea:	6033      	str	r3, [r6, #0]
 800d6ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d6f0:	4607      	mov	r7, r0
 800d6f2:	460c      	mov	r4, r1
 800d6f4:	b10a      	cbz	r2, 800d6fa <_printf_common+0x26>
 800d6f6:	3301      	adds	r3, #1
 800d6f8:	6033      	str	r3, [r6, #0]
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	0699      	lsls	r1, r3, #26
 800d6fe:	bf42      	ittt	mi
 800d700:	6833      	ldrmi	r3, [r6, #0]
 800d702:	3302      	addmi	r3, #2
 800d704:	6033      	strmi	r3, [r6, #0]
 800d706:	6825      	ldr	r5, [r4, #0]
 800d708:	f015 0506 	ands.w	r5, r5, #6
 800d70c:	d106      	bne.n	800d71c <_printf_common+0x48>
 800d70e:	f104 0a19 	add.w	sl, r4, #25
 800d712:	68e3      	ldr	r3, [r4, #12]
 800d714:	6832      	ldr	r2, [r6, #0]
 800d716:	1a9b      	subs	r3, r3, r2
 800d718:	42ab      	cmp	r3, r5
 800d71a:	dc26      	bgt.n	800d76a <_printf_common+0x96>
 800d71c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d720:	1e13      	subs	r3, r2, #0
 800d722:	6822      	ldr	r2, [r4, #0]
 800d724:	bf18      	it	ne
 800d726:	2301      	movne	r3, #1
 800d728:	0692      	lsls	r2, r2, #26
 800d72a:	d42b      	bmi.n	800d784 <_printf_common+0xb0>
 800d72c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d730:	4649      	mov	r1, r9
 800d732:	4638      	mov	r0, r7
 800d734:	47c0      	blx	r8
 800d736:	3001      	adds	r0, #1
 800d738:	d01e      	beq.n	800d778 <_printf_common+0xa4>
 800d73a:	6823      	ldr	r3, [r4, #0]
 800d73c:	68e5      	ldr	r5, [r4, #12]
 800d73e:	6832      	ldr	r2, [r6, #0]
 800d740:	f003 0306 	and.w	r3, r3, #6
 800d744:	2b04      	cmp	r3, #4
 800d746:	bf08      	it	eq
 800d748:	1aad      	subeq	r5, r5, r2
 800d74a:	68a3      	ldr	r3, [r4, #8]
 800d74c:	6922      	ldr	r2, [r4, #16]
 800d74e:	bf0c      	ite	eq
 800d750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d754:	2500      	movne	r5, #0
 800d756:	4293      	cmp	r3, r2
 800d758:	bfc4      	itt	gt
 800d75a:	1a9b      	subgt	r3, r3, r2
 800d75c:	18ed      	addgt	r5, r5, r3
 800d75e:	2600      	movs	r6, #0
 800d760:	341a      	adds	r4, #26
 800d762:	42b5      	cmp	r5, r6
 800d764:	d11a      	bne.n	800d79c <_printf_common+0xc8>
 800d766:	2000      	movs	r0, #0
 800d768:	e008      	b.n	800d77c <_printf_common+0xa8>
 800d76a:	2301      	movs	r3, #1
 800d76c:	4652      	mov	r2, sl
 800d76e:	4649      	mov	r1, r9
 800d770:	4638      	mov	r0, r7
 800d772:	47c0      	blx	r8
 800d774:	3001      	adds	r0, #1
 800d776:	d103      	bne.n	800d780 <_printf_common+0xac>
 800d778:	f04f 30ff 	mov.w	r0, #4294967295
 800d77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d780:	3501      	adds	r5, #1
 800d782:	e7c6      	b.n	800d712 <_printf_common+0x3e>
 800d784:	18e1      	adds	r1, r4, r3
 800d786:	1c5a      	adds	r2, r3, #1
 800d788:	2030      	movs	r0, #48	; 0x30
 800d78a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d78e:	4422      	add	r2, r4
 800d790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d798:	3302      	adds	r3, #2
 800d79a:	e7c7      	b.n	800d72c <_printf_common+0x58>
 800d79c:	2301      	movs	r3, #1
 800d79e:	4622      	mov	r2, r4
 800d7a0:	4649      	mov	r1, r9
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	47c0      	blx	r8
 800d7a6:	3001      	adds	r0, #1
 800d7a8:	d0e6      	beq.n	800d778 <_printf_common+0xa4>
 800d7aa:	3601      	adds	r6, #1
 800d7ac:	e7d9      	b.n	800d762 <_printf_common+0x8e>
	...

0800d7b0 <_printf_i>:
 800d7b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	4691      	mov	r9, r2
 800d7b8:	7e27      	ldrb	r7, [r4, #24]
 800d7ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d7bc:	2f78      	cmp	r7, #120	; 0x78
 800d7be:	4680      	mov	r8, r0
 800d7c0:	469a      	mov	sl, r3
 800d7c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d7c6:	d807      	bhi.n	800d7d8 <_printf_i+0x28>
 800d7c8:	2f62      	cmp	r7, #98	; 0x62
 800d7ca:	d80a      	bhi.n	800d7e2 <_printf_i+0x32>
 800d7cc:	2f00      	cmp	r7, #0
 800d7ce:	f000 80d8 	beq.w	800d982 <_printf_i+0x1d2>
 800d7d2:	2f58      	cmp	r7, #88	; 0x58
 800d7d4:	f000 80a3 	beq.w	800d91e <_printf_i+0x16e>
 800d7d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d7dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d7e0:	e03a      	b.n	800d858 <_printf_i+0xa8>
 800d7e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d7e6:	2b15      	cmp	r3, #21
 800d7e8:	d8f6      	bhi.n	800d7d8 <_printf_i+0x28>
 800d7ea:	a001      	add	r0, pc, #4	; (adr r0, 800d7f0 <_printf_i+0x40>)
 800d7ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d7f0:	0800d849 	.word	0x0800d849
 800d7f4:	0800d85d 	.word	0x0800d85d
 800d7f8:	0800d7d9 	.word	0x0800d7d9
 800d7fc:	0800d7d9 	.word	0x0800d7d9
 800d800:	0800d7d9 	.word	0x0800d7d9
 800d804:	0800d7d9 	.word	0x0800d7d9
 800d808:	0800d85d 	.word	0x0800d85d
 800d80c:	0800d7d9 	.word	0x0800d7d9
 800d810:	0800d7d9 	.word	0x0800d7d9
 800d814:	0800d7d9 	.word	0x0800d7d9
 800d818:	0800d7d9 	.word	0x0800d7d9
 800d81c:	0800d969 	.word	0x0800d969
 800d820:	0800d88d 	.word	0x0800d88d
 800d824:	0800d94b 	.word	0x0800d94b
 800d828:	0800d7d9 	.word	0x0800d7d9
 800d82c:	0800d7d9 	.word	0x0800d7d9
 800d830:	0800d98b 	.word	0x0800d98b
 800d834:	0800d7d9 	.word	0x0800d7d9
 800d838:	0800d88d 	.word	0x0800d88d
 800d83c:	0800d7d9 	.word	0x0800d7d9
 800d840:	0800d7d9 	.word	0x0800d7d9
 800d844:	0800d953 	.word	0x0800d953
 800d848:	680b      	ldr	r3, [r1, #0]
 800d84a:	1d1a      	adds	r2, r3, #4
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	600a      	str	r2, [r1, #0]
 800d850:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d858:	2301      	movs	r3, #1
 800d85a:	e0a3      	b.n	800d9a4 <_printf_i+0x1f4>
 800d85c:	6825      	ldr	r5, [r4, #0]
 800d85e:	6808      	ldr	r0, [r1, #0]
 800d860:	062e      	lsls	r6, r5, #24
 800d862:	f100 0304 	add.w	r3, r0, #4
 800d866:	d50a      	bpl.n	800d87e <_printf_i+0xce>
 800d868:	6805      	ldr	r5, [r0, #0]
 800d86a:	600b      	str	r3, [r1, #0]
 800d86c:	2d00      	cmp	r5, #0
 800d86e:	da03      	bge.n	800d878 <_printf_i+0xc8>
 800d870:	232d      	movs	r3, #45	; 0x2d
 800d872:	426d      	negs	r5, r5
 800d874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d878:	485e      	ldr	r0, [pc, #376]	; (800d9f4 <_printf_i+0x244>)
 800d87a:	230a      	movs	r3, #10
 800d87c:	e019      	b.n	800d8b2 <_printf_i+0x102>
 800d87e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d882:	6805      	ldr	r5, [r0, #0]
 800d884:	600b      	str	r3, [r1, #0]
 800d886:	bf18      	it	ne
 800d888:	b22d      	sxthne	r5, r5
 800d88a:	e7ef      	b.n	800d86c <_printf_i+0xbc>
 800d88c:	680b      	ldr	r3, [r1, #0]
 800d88e:	6825      	ldr	r5, [r4, #0]
 800d890:	1d18      	adds	r0, r3, #4
 800d892:	6008      	str	r0, [r1, #0]
 800d894:	0628      	lsls	r0, r5, #24
 800d896:	d501      	bpl.n	800d89c <_printf_i+0xec>
 800d898:	681d      	ldr	r5, [r3, #0]
 800d89a:	e002      	b.n	800d8a2 <_printf_i+0xf2>
 800d89c:	0669      	lsls	r1, r5, #25
 800d89e:	d5fb      	bpl.n	800d898 <_printf_i+0xe8>
 800d8a0:	881d      	ldrh	r5, [r3, #0]
 800d8a2:	4854      	ldr	r0, [pc, #336]	; (800d9f4 <_printf_i+0x244>)
 800d8a4:	2f6f      	cmp	r7, #111	; 0x6f
 800d8a6:	bf0c      	ite	eq
 800d8a8:	2308      	moveq	r3, #8
 800d8aa:	230a      	movne	r3, #10
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d8b2:	6866      	ldr	r6, [r4, #4]
 800d8b4:	60a6      	str	r6, [r4, #8]
 800d8b6:	2e00      	cmp	r6, #0
 800d8b8:	bfa2      	ittt	ge
 800d8ba:	6821      	ldrge	r1, [r4, #0]
 800d8bc:	f021 0104 	bicge.w	r1, r1, #4
 800d8c0:	6021      	strge	r1, [r4, #0]
 800d8c2:	b90d      	cbnz	r5, 800d8c8 <_printf_i+0x118>
 800d8c4:	2e00      	cmp	r6, #0
 800d8c6:	d04d      	beq.n	800d964 <_printf_i+0x1b4>
 800d8c8:	4616      	mov	r6, r2
 800d8ca:	fbb5 f1f3 	udiv	r1, r5, r3
 800d8ce:	fb03 5711 	mls	r7, r3, r1, r5
 800d8d2:	5dc7      	ldrb	r7, [r0, r7]
 800d8d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d8d8:	462f      	mov	r7, r5
 800d8da:	42bb      	cmp	r3, r7
 800d8dc:	460d      	mov	r5, r1
 800d8de:	d9f4      	bls.n	800d8ca <_printf_i+0x11a>
 800d8e0:	2b08      	cmp	r3, #8
 800d8e2:	d10b      	bne.n	800d8fc <_printf_i+0x14c>
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	07df      	lsls	r7, r3, #31
 800d8e8:	d508      	bpl.n	800d8fc <_printf_i+0x14c>
 800d8ea:	6923      	ldr	r3, [r4, #16]
 800d8ec:	6861      	ldr	r1, [r4, #4]
 800d8ee:	4299      	cmp	r1, r3
 800d8f0:	bfde      	ittt	le
 800d8f2:	2330      	movle	r3, #48	; 0x30
 800d8f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d8f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d8fc:	1b92      	subs	r2, r2, r6
 800d8fe:	6122      	str	r2, [r4, #16]
 800d900:	f8cd a000 	str.w	sl, [sp]
 800d904:	464b      	mov	r3, r9
 800d906:	aa03      	add	r2, sp, #12
 800d908:	4621      	mov	r1, r4
 800d90a:	4640      	mov	r0, r8
 800d90c:	f7ff fee2 	bl	800d6d4 <_printf_common>
 800d910:	3001      	adds	r0, #1
 800d912:	d14c      	bne.n	800d9ae <_printf_i+0x1fe>
 800d914:	f04f 30ff 	mov.w	r0, #4294967295
 800d918:	b004      	add	sp, #16
 800d91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d91e:	4835      	ldr	r0, [pc, #212]	; (800d9f4 <_printf_i+0x244>)
 800d920:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d924:	6823      	ldr	r3, [r4, #0]
 800d926:	680e      	ldr	r6, [r1, #0]
 800d928:	061f      	lsls	r7, r3, #24
 800d92a:	f856 5b04 	ldr.w	r5, [r6], #4
 800d92e:	600e      	str	r6, [r1, #0]
 800d930:	d514      	bpl.n	800d95c <_printf_i+0x1ac>
 800d932:	07d9      	lsls	r1, r3, #31
 800d934:	bf44      	itt	mi
 800d936:	f043 0320 	orrmi.w	r3, r3, #32
 800d93a:	6023      	strmi	r3, [r4, #0]
 800d93c:	b91d      	cbnz	r5, 800d946 <_printf_i+0x196>
 800d93e:	6823      	ldr	r3, [r4, #0]
 800d940:	f023 0320 	bic.w	r3, r3, #32
 800d944:	6023      	str	r3, [r4, #0]
 800d946:	2310      	movs	r3, #16
 800d948:	e7b0      	b.n	800d8ac <_printf_i+0xfc>
 800d94a:	6823      	ldr	r3, [r4, #0]
 800d94c:	f043 0320 	orr.w	r3, r3, #32
 800d950:	6023      	str	r3, [r4, #0]
 800d952:	2378      	movs	r3, #120	; 0x78
 800d954:	4828      	ldr	r0, [pc, #160]	; (800d9f8 <_printf_i+0x248>)
 800d956:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d95a:	e7e3      	b.n	800d924 <_printf_i+0x174>
 800d95c:	065e      	lsls	r6, r3, #25
 800d95e:	bf48      	it	mi
 800d960:	b2ad      	uxthmi	r5, r5
 800d962:	e7e6      	b.n	800d932 <_printf_i+0x182>
 800d964:	4616      	mov	r6, r2
 800d966:	e7bb      	b.n	800d8e0 <_printf_i+0x130>
 800d968:	680b      	ldr	r3, [r1, #0]
 800d96a:	6826      	ldr	r6, [r4, #0]
 800d96c:	6960      	ldr	r0, [r4, #20]
 800d96e:	1d1d      	adds	r5, r3, #4
 800d970:	600d      	str	r5, [r1, #0]
 800d972:	0635      	lsls	r5, r6, #24
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	d501      	bpl.n	800d97c <_printf_i+0x1cc>
 800d978:	6018      	str	r0, [r3, #0]
 800d97a:	e002      	b.n	800d982 <_printf_i+0x1d2>
 800d97c:	0671      	lsls	r1, r6, #25
 800d97e:	d5fb      	bpl.n	800d978 <_printf_i+0x1c8>
 800d980:	8018      	strh	r0, [r3, #0]
 800d982:	2300      	movs	r3, #0
 800d984:	6123      	str	r3, [r4, #16]
 800d986:	4616      	mov	r6, r2
 800d988:	e7ba      	b.n	800d900 <_printf_i+0x150>
 800d98a:	680b      	ldr	r3, [r1, #0]
 800d98c:	1d1a      	adds	r2, r3, #4
 800d98e:	600a      	str	r2, [r1, #0]
 800d990:	681e      	ldr	r6, [r3, #0]
 800d992:	6862      	ldr	r2, [r4, #4]
 800d994:	2100      	movs	r1, #0
 800d996:	4630      	mov	r0, r6
 800d998:	f7f2 fcaa 	bl	80002f0 <memchr>
 800d99c:	b108      	cbz	r0, 800d9a2 <_printf_i+0x1f2>
 800d99e:	1b80      	subs	r0, r0, r6
 800d9a0:	6060      	str	r0, [r4, #4]
 800d9a2:	6863      	ldr	r3, [r4, #4]
 800d9a4:	6123      	str	r3, [r4, #16]
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9ac:	e7a8      	b.n	800d900 <_printf_i+0x150>
 800d9ae:	6923      	ldr	r3, [r4, #16]
 800d9b0:	4632      	mov	r2, r6
 800d9b2:	4649      	mov	r1, r9
 800d9b4:	4640      	mov	r0, r8
 800d9b6:	47d0      	blx	sl
 800d9b8:	3001      	adds	r0, #1
 800d9ba:	d0ab      	beq.n	800d914 <_printf_i+0x164>
 800d9bc:	6823      	ldr	r3, [r4, #0]
 800d9be:	079b      	lsls	r3, r3, #30
 800d9c0:	d413      	bmi.n	800d9ea <_printf_i+0x23a>
 800d9c2:	68e0      	ldr	r0, [r4, #12]
 800d9c4:	9b03      	ldr	r3, [sp, #12]
 800d9c6:	4298      	cmp	r0, r3
 800d9c8:	bfb8      	it	lt
 800d9ca:	4618      	movlt	r0, r3
 800d9cc:	e7a4      	b.n	800d918 <_printf_i+0x168>
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	4632      	mov	r2, r6
 800d9d2:	4649      	mov	r1, r9
 800d9d4:	4640      	mov	r0, r8
 800d9d6:	47d0      	blx	sl
 800d9d8:	3001      	adds	r0, #1
 800d9da:	d09b      	beq.n	800d914 <_printf_i+0x164>
 800d9dc:	3501      	adds	r5, #1
 800d9de:	68e3      	ldr	r3, [r4, #12]
 800d9e0:	9903      	ldr	r1, [sp, #12]
 800d9e2:	1a5b      	subs	r3, r3, r1
 800d9e4:	42ab      	cmp	r3, r5
 800d9e6:	dcf2      	bgt.n	800d9ce <_printf_i+0x21e>
 800d9e8:	e7eb      	b.n	800d9c2 <_printf_i+0x212>
 800d9ea:	2500      	movs	r5, #0
 800d9ec:	f104 0619 	add.w	r6, r4, #25
 800d9f0:	e7f5      	b.n	800d9de <_printf_i+0x22e>
 800d9f2:	bf00      	nop
 800d9f4:	08011306 	.word	0x08011306
 800d9f8:	08011317 	.word	0x08011317

0800d9fc <quorem>:
 800d9fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da00:	6903      	ldr	r3, [r0, #16]
 800da02:	690c      	ldr	r4, [r1, #16]
 800da04:	42a3      	cmp	r3, r4
 800da06:	4607      	mov	r7, r0
 800da08:	f2c0 8081 	blt.w	800db0e <quorem+0x112>
 800da0c:	3c01      	subs	r4, #1
 800da0e:	f101 0814 	add.w	r8, r1, #20
 800da12:	f100 0514 	add.w	r5, r0, #20
 800da16:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800da1a:	9301      	str	r3, [sp, #4]
 800da1c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800da20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800da24:	3301      	adds	r3, #1
 800da26:	429a      	cmp	r2, r3
 800da28:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800da2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800da30:	fbb2 f6f3 	udiv	r6, r2, r3
 800da34:	d331      	bcc.n	800da9a <quorem+0x9e>
 800da36:	f04f 0e00 	mov.w	lr, #0
 800da3a:	4640      	mov	r0, r8
 800da3c:	46ac      	mov	ip, r5
 800da3e:	46f2      	mov	sl, lr
 800da40:	f850 2b04 	ldr.w	r2, [r0], #4
 800da44:	b293      	uxth	r3, r2
 800da46:	fb06 e303 	mla	r3, r6, r3, lr
 800da4a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800da4e:	b29b      	uxth	r3, r3
 800da50:	ebaa 0303 	sub.w	r3, sl, r3
 800da54:	0c12      	lsrs	r2, r2, #16
 800da56:	f8dc a000 	ldr.w	sl, [ip]
 800da5a:	fb06 e202 	mla	r2, r6, r2, lr
 800da5e:	fa13 f38a 	uxtah	r3, r3, sl
 800da62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800da66:	fa1f fa82 	uxth.w	sl, r2
 800da6a:	f8dc 2000 	ldr.w	r2, [ip]
 800da6e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800da72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800da76:	b29b      	uxth	r3, r3
 800da78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da7c:	4581      	cmp	r9, r0
 800da7e:	f84c 3b04 	str.w	r3, [ip], #4
 800da82:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800da86:	d2db      	bcs.n	800da40 <quorem+0x44>
 800da88:	f855 300b 	ldr.w	r3, [r5, fp]
 800da8c:	b92b      	cbnz	r3, 800da9a <quorem+0x9e>
 800da8e:	9b01      	ldr	r3, [sp, #4]
 800da90:	3b04      	subs	r3, #4
 800da92:	429d      	cmp	r5, r3
 800da94:	461a      	mov	r2, r3
 800da96:	d32e      	bcc.n	800daf6 <quorem+0xfa>
 800da98:	613c      	str	r4, [r7, #16]
 800da9a:	4638      	mov	r0, r7
 800da9c:	f001 f848 	bl	800eb30 <__mcmp>
 800daa0:	2800      	cmp	r0, #0
 800daa2:	db24      	blt.n	800daee <quorem+0xf2>
 800daa4:	3601      	adds	r6, #1
 800daa6:	4628      	mov	r0, r5
 800daa8:	f04f 0c00 	mov.w	ip, #0
 800daac:	f858 2b04 	ldr.w	r2, [r8], #4
 800dab0:	f8d0 e000 	ldr.w	lr, [r0]
 800dab4:	b293      	uxth	r3, r2
 800dab6:	ebac 0303 	sub.w	r3, ip, r3
 800daba:	0c12      	lsrs	r2, r2, #16
 800dabc:	fa13 f38e 	uxtah	r3, r3, lr
 800dac0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dac4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dac8:	b29b      	uxth	r3, r3
 800daca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dace:	45c1      	cmp	r9, r8
 800dad0:	f840 3b04 	str.w	r3, [r0], #4
 800dad4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dad8:	d2e8      	bcs.n	800daac <quorem+0xb0>
 800dada:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dade:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dae2:	b922      	cbnz	r2, 800daee <quorem+0xf2>
 800dae4:	3b04      	subs	r3, #4
 800dae6:	429d      	cmp	r5, r3
 800dae8:	461a      	mov	r2, r3
 800daea:	d30a      	bcc.n	800db02 <quorem+0x106>
 800daec:	613c      	str	r4, [r7, #16]
 800daee:	4630      	mov	r0, r6
 800daf0:	b003      	add	sp, #12
 800daf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf6:	6812      	ldr	r2, [r2, #0]
 800daf8:	3b04      	subs	r3, #4
 800dafa:	2a00      	cmp	r2, #0
 800dafc:	d1cc      	bne.n	800da98 <quorem+0x9c>
 800dafe:	3c01      	subs	r4, #1
 800db00:	e7c7      	b.n	800da92 <quorem+0x96>
 800db02:	6812      	ldr	r2, [r2, #0]
 800db04:	3b04      	subs	r3, #4
 800db06:	2a00      	cmp	r2, #0
 800db08:	d1f0      	bne.n	800daec <quorem+0xf0>
 800db0a:	3c01      	subs	r4, #1
 800db0c:	e7eb      	b.n	800dae6 <quorem+0xea>
 800db0e:	2000      	movs	r0, #0
 800db10:	e7ee      	b.n	800daf0 <quorem+0xf4>
 800db12:	0000      	movs	r0, r0
 800db14:	0000      	movs	r0, r0
	...

0800db18 <_dtoa_r>:
 800db18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db1c:	ec59 8b10 	vmov	r8, r9, d0
 800db20:	b095      	sub	sp, #84	; 0x54
 800db22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800db24:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800db26:	9107      	str	r1, [sp, #28]
 800db28:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800db2c:	4606      	mov	r6, r0
 800db2e:	9209      	str	r2, [sp, #36]	; 0x24
 800db30:	9310      	str	r3, [sp, #64]	; 0x40
 800db32:	b975      	cbnz	r5, 800db52 <_dtoa_r+0x3a>
 800db34:	2010      	movs	r0, #16
 800db36:	f000 fd75 	bl	800e624 <malloc>
 800db3a:	4602      	mov	r2, r0
 800db3c:	6270      	str	r0, [r6, #36]	; 0x24
 800db3e:	b920      	cbnz	r0, 800db4a <_dtoa_r+0x32>
 800db40:	4bab      	ldr	r3, [pc, #684]	; (800ddf0 <_dtoa_r+0x2d8>)
 800db42:	21ea      	movs	r1, #234	; 0xea
 800db44:	48ab      	ldr	r0, [pc, #684]	; (800ddf4 <_dtoa_r+0x2dc>)
 800db46:	f001 f9bd 	bl	800eec4 <__assert_func>
 800db4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800db4e:	6005      	str	r5, [r0, #0]
 800db50:	60c5      	str	r5, [r0, #12]
 800db52:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800db54:	6819      	ldr	r1, [r3, #0]
 800db56:	b151      	cbz	r1, 800db6e <_dtoa_r+0x56>
 800db58:	685a      	ldr	r2, [r3, #4]
 800db5a:	604a      	str	r2, [r1, #4]
 800db5c:	2301      	movs	r3, #1
 800db5e:	4093      	lsls	r3, r2
 800db60:	608b      	str	r3, [r1, #8]
 800db62:	4630      	mov	r0, r6
 800db64:	f000 fda6 	bl	800e6b4 <_Bfree>
 800db68:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800db6a:	2200      	movs	r2, #0
 800db6c:	601a      	str	r2, [r3, #0]
 800db6e:	f1b9 0300 	subs.w	r3, r9, #0
 800db72:	bfbb      	ittet	lt
 800db74:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800db78:	9303      	strlt	r3, [sp, #12]
 800db7a:	2300      	movge	r3, #0
 800db7c:	2201      	movlt	r2, #1
 800db7e:	bfac      	ite	ge
 800db80:	6023      	strge	r3, [r4, #0]
 800db82:	6022      	strlt	r2, [r4, #0]
 800db84:	4b9c      	ldr	r3, [pc, #624]	; (800ddf8 <_dtoa_r+0x2e0>)
 800db86:	9c03      	ldr	r4, [sp, #12]
 800db88:	43a3      	bics	r3, r4
 800db8a:	d11a      	bne.n	800dbc2 <_dtoa_r+0xaa>
 800db8c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800db8e:	f242 730f 	movw	r3, #9999	; 0x270f
 800db92:	6013      	str	r3, [r2, #0]
 800db94:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800db98:	ea53 0308 	orrs.w	r3, r3, r8
 800db9c:	f000 8512 	beq.w	800e5c4 <_dtoa_r+0xaac>
 800dba0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dba2:	b953      	cbnz	r3, 800dbba <_dtoa_r+0xa2>
 800dba4:	4b95      	ldr	r3, [pc, #596]	; (800ddfc <_dtoa_r+0x2e4>)
 800dba6:	e01f      	b.n	800dbe8 <_dtoa_r+0xd0>
 800dba8:	4b95      	ldr	r3, [pc, #596]	; (800de00 <_dtoa_r+0x2e8>)
 800dbaa:	9300      	str	r3, [sp, #0]
 800dbac:	3308      	adds	r3, #8
 800dbae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800dbb0:	6013      	str	r3, [r2, #0]
 800dbb2:	9800      	ldr	r0, [sp, #0]
 800dbb4:	b015      	add	sp, #84	; 0x54
 800dbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbba:	4b90      	ldr	r3, [pc, #576]	; (800ddfc <_dtoa_r+0x2e4>)
 800dbbc:	9300      	str	r3, [sp, #0]
 800dbbe:	3303      	adds	r3, #3
 800dbc0:	e7f5      	b.n	800dbae <_dtoa_r+0x96>
 800dbc2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dbc6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dbca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800dbd2:	d10b      	bne.n	800dbec <_dtoa_r+0xd4>
 800dbd4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	6013      	str	r3, [r2, #0]
 800dbda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	f000 84ee 	beq.w	800e5be <_dtoa_r+0xaa6>
 800dbe2:	4888      	ldr	r0, [pc, #544]	; (800de04 <_dtoa_r+0x2ec>)
 800dbe4:	6018      	str	r0, [r3, #0]
 800dbe6:	1e43      	subs	r3, r0, #1
 800dbe8:	9300      	str	r3, [sp, #0]
 800dbea:	e7e2      	b.n	800dbb2 <_dtoa_r+0x9a>
 800dbec:	a913      	add	r1, sp, #76	; 0x4c
 800dbee:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800dbf2:	aa12      	add	r2, sp, #72	; 0x48
 800dbf4:	4630      	mov	r0, r6
 800dbf6:	f001 f83f 	bl	800ec78 <__d2b>
 800dbfa:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800dbfe:	4605      	mov	r5, r0
 800dc00:	9812      	ldr	r0, [sp, #72]	; 0x48
 800dc02:	2900      	cmp	r1, #0
 800dc04:	d047      	beq.n	800dc96 <_dtoa_r+0x17e>
 800dc06:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800dc08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800dc0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dc10:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800dc14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dc18:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800dc1c:	2400      	movs	r4, #0
 800dc1e:	ec43 2b16 	vmov	d6, r2, r3
 800dc22:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800dc26:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800ddd8 <_dtoa_r+0x2c0>
 800dc2a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dc2e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800dde0 <_dtoa_r+0x2c8>
 800dc32:	eea7 6b05 	vfma.f64	d6, d7, d5
 800dc36:	eeb0 7b46 	vmov.f64	d7, d6
 800dc3a:	ee06 1a90 	vmov	s13, r1
 800dc3e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800dc42:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800dde8 <_dtoa_r+0x2d0>
 800dc46:	eea5 7b06 	vfma.f64	d7, d5, d6
 800dc4a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800dc4e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800dc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc56:	ee16 ba90 	vmov	fp, s13
 800dc5a:	9411      	str	r4, [sp, #68]	; 0x44
 800dc5c:	d508      	bpl.n	800dc70 <_dtoa_r+0x158>
 800dc5e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800dc62:	eeb4 6b47 	vcmp.f64	d6, d7
 800dc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc6a:	bf18      	it	ne
 800dc6c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800dc70:	f1bb 0f16 	cmp.w	fp, #22
 800dc74:	d832      	bhi.n	800dcdc <_dtoa_r+0x1c4>
 800dc76:	4b64      	ldr	r3, [pc, #400]	; (800de08 <_dtoa_r+0x2f0>)
 800dc78:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800dc7c:	ed93 7b00 	vldr	d7, [r3]
 800dc80:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800dc84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dc88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc8c:	d501      	bpl.n	800dc92 <_dtoa_r+0x17a>
 800dc8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800dc92:	2300      	movs	r3, #0
 800dc94:	e023      	b.n	800dcde <_dtoa_r+0x1c6>
 800dc96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800dc98:	4401      	add	r1, r0
 800dc9a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800dc9e:	2b20      	cmp	r3, #32
 800dca0:	bfc3      	ittte	gt
 800dca2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dca6:	fa04 f303 	lslgt.w	r3, r4, r3
 800dcaa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800dcae:	f1c3 0320 	rsble	r3, r3, #32
 800dcb2:	bfc6      	itte	gt
 800dcb4:	fa28 f804 	lsrgt.w	r8, r8, r4
 800dcb8:	ea43 0308 	orrgt.w	r3, r3, r8
 800dcbc:	fa08 f303 	lslle.w	r3, r8, r3
 800dcc0:	ee07 3a90 	vmov	s15, r3
 800dcc4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800dcc8:	3901      	subs	r1, #1
 800dcca:	ed8d 7b00 	vstr	d7, [sp]
 800dcce:	9c01      	ldr	r4, [sp, #4]
 800dcd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcd4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800dcd8:	2401      	movs	r4, #1
 800dcda:	e7a0      	b.n	800dc1e <_dtoa_r+0x106>
 800dcdc:	2301      	movs	r3, #1
 800dcde:	930f      	str	r3, [sp, #60]	; 0x3c
 800dce0:	1a43      	subs	r3, r0, r1
 800dce2:	1e5a      	subs	r2, r3, #1
 800dce4:	bf45      	ittet	mi
 800dce6:	f1c3 0301 	rsbmi	r3, r3, #1
 800dcea:	9305      	strmi	r3, [sp, #20]
 800dcec:	2300      	movpl	r3, #0
 800dcee:	2300      	movmi	r3, #0
 800dcf0:	9206      	str	r2, [sp, #24]
 800dcf2:	bf54      	ite	pl
 800dcf4:	9305      	strpl	r3, [sp, #20]
 800dcf6:	9306      	strmi	r3, [sp, #24]
 800dcf8:	f1bb 0f00 	cmp.w	fp, #0
 800dcfc:	db18      	blt.n	800dd30 <_dtoa_r+0x218>
 800dcfe:	9b06      	ldr	r3, [sp, #24]
 800dd00:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800dd04:	445b      	add	r3, fp
 800dd06:	9306      	str	r3, [sp, #24]
 800dd08:	2300      	movs	r3, #0
 800dd0a:	9a07      	ldr	r2, [sp, #28]
 800dd0c:	2a09      	cmp	r2, #9
 800dd0e:	d849      	bhi.n	800dda4 <_dtoa_r+0x28c>
 800dd10:	2a05      	cmp	r2, #5
 800dd12:	bfc4      	itt	gt
 800dd14:	3a04      	subgt	r2, #4
 800dd16:	9207      	strgt	r2, [sp, #28]
 800dd18:	9a07      	ldr	r2, [sp, #28]
 800dd1a:	f1a2 0202 	sub.w	r2, r2, #2
 800dd1e:	bfcc      	ite	gt
 800dd20:	2400      	movgt	r4, #0
 800dd22:	2401      	movle	r4, #1
 800dd24:	2a03      	cmp	r2, #3
 800dd26:	d848      	bhi.n	800ddba <_dtoa_r+0x2a2>
 800dd28:	e8df f002 	tbb	[pc, r2]
 800dd2c:	3a2c2e0b 	.word	0x3a2c2e0b
 800dd30:	9b05      	ldr	r3, [sp, #20]
 800dd32:	2200      	movs	r2, #0
 800dd34:	eba3 030b 	sub.w	r3, r3, fp
 800dd38:	9305      	str	r3, [sp, #20]
 800dd3a:	920e      	str	r2, [sp, #56]	; 0x38
 800dd3c:	f1cb 0300 	rsb	r3, fp, #0
 800dd40:	e7e3      	b.n	800dd0a <_dtoa_r+0x1f2>
 800dd42:	2200      	movs	r2, #0
 800dd44:	9208      	str	r2, [sp, #32]
 800dd46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd48:	2a00      	cmp	r2, #0
 800dd4a:	dc39      	bgt.n	800ddc0 <_dtoa_r+0x2a8>
 800dd4c:	f04f 0a01 	mov.w	sl, #1
 800dd50:	46d1      	mov	r9, sl
 800dd52:	4652      	mov	r2, sl
 800dd54:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800dd58:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800dd5a:	2100      	movs	r1, #0
 800dd5c:	6079      	str	r1, [r7, #4]
 800dd5e:	2004      	movs	r0, #4
 800dd60:	f100 0c14 	add.w	ip, r0, #20
 800dd64:	4594      	cmp	ip, r2
 800dd66:	6879      	ldr	r1, [r7, #4]
 800dd68:	d92f      	bls.n	800ddca <_dtoa_r+0x2b2>
 800dd6a:	4630      	mov	r0, r6
 800dd6c:	930c      	str	r3, [sp, #48]	; 0x30
 800dd6e:	f000 fc61 	bl	800e634 <_Balloc>
 800dd72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd74:	9000      	str	r0, [sp, #0]
 800dd76:	4602      	mov	r2, r0
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d149      	bne.n	800de10 <_dtoa_r+0x2f8>
 800dd7c:	4b23      	ldr	r3, [pc, #140]	; (800de0c <_dtoa_r+0x2f4>)
 800dd7e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800dd82:	e6df      	b.n	800db44 <_dtoa_r+0x2c>
 800dd84:	2201      	movs	r2, #1
 800dd86:	e7dd      	b.n	800dd44 <_dtoa_r+0x22c>
 800dd88:	2200      	movs	r2, #0
 800dd8a:	9208      	str	r2, [sp, #32]
 800dd8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd8e:	eb0b 0a02 	add.w	sl, fp, r2
 800dd92:	f10a 0901 	add.w	r9, sl, #1
 800dd96:	464a      	mov	r2, r9
 800dd98:	2a01      	cmp	r2, #1
 800dd9a:	bfb8      	it	lt
 800dd9c:	2201      	movlt	r2, #1
 800dd9e:	e7db      	b.n	800dd58 <_dtoa_r+0x240>
 800dda0:	2201      	movs	r2, #1
 800dda2:	e7f2      	b.n	800dd8a <_dtoa_r+0x272>
 800dda4:	2401      	movs	r4, #1
 800dda6:	2200      	movs	r2, #0
 800dda8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800ddac:	f04f 3aff 	mov.w	sl, #4294967295
 800ddb0:	2100      	movs	r1, #0
 800ddb2:	46d1      	mov	r9, sl
 800ddb4:	2212      	movs	r2, #18
 800ddb6:	9109      	str	r1, [sp, #36]	; 0x24
 800ddb8:	e7ce      	b.n	800dd58 <_dtoa_r+0x240>
 800ddba:	2201      	movs	r2, #1
 800ddbc:	9208      	str	r2, [sp, #32]
 800ddbe:	e7f5      	b.n	800ddac <_dtoa_r+0x294>
 800ddc0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800ddc4:	46d1      	mov	r9, sl
 800ddc6:	4652      	mov	r2, sl
 800ddc8:	e7c6      	b.n	800dd58 <_dtoa_r+0x240>
 800ddca:	3101      	adds	r1, #1
 800ddcc:	6079      	str	r1, [r7, #4]
 800ddce:	0040      	lsls	r0, r0, #1
 800ddd0:	e7c6      	b.n	800dd60 <_dtoa_r+0x248>
 800ddd2:	bf00      	nop
 800ddd4:	f3af 8000 	nop.w
 800ddd8:	636f4361 	.word	0x636f4361
 800dddc:	3fd287a7 	.word	0x3fd287a7
 800dde0:	8b60c8b3 	.word	0x8b60c8b3
 800dde4:	3fc68a28 	.word	0x3fc68a28
 800dde8:	509f79fb 	.word	0x509f79fb
 800ddec:	3fd34413 	.word	0x3fd34413
 800ddf0:	08011335 	.word	0x08011335
 800ddf4:	0801134c 	.word	0x0801134c
 800ddf8:	7ff00000 	.word	0x7ff00000
 800ddfc:	08011331 	.word	0x08011331
 800de00:	08011328 	.word	0x08011328
 800de04:	08011305 	.word	0x08011305
 800de08:	08011448 	.word	0x08011448
 800de0c:	080113ab 	.word	0x080113ab
 800de10:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800de12:	9900      	ldr	r1, [sp, #0]
 800de14:	6011      	str	r1, [r2, #0]
 800de16:	f1b9 0f0e 	cmp.w	r9, #14
 800de1a:	d872      	bhi.n	800df02 <_dtoa_r+0x3ea>
 800de1c:	2c00      	cmp	r4, #0
 800de1e:	d070      	beq.n	800df02 <_dtoa_r+0x3ea>
 800de20:	f1bb 0f00 	cmp.w	fp, #0
 800de24:	f340 80a6 	ble.w	800df74 <_dtoa_r+0x45c>
 800de28:	49ca      	ldr	r1, [pc, #808]	; (800e154 <_dtoa_r+0x63c>)
 800de2a:	f00b 020f 	and.w	r2, fp, #15
 800de2e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800de32:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800de36:	ed92 7b00 	vldr	d7, [r2]
 800de3a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800de3e:	f000 808d 	beq.w	800df5c <_dtoa_r+0x444>
 800de42:	4ac5      	ldr	r2, [pc, #788]	; (800e158 <_dtoa_r+0x640>)
 800de44:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800de48:	ed92 6b08 	vldr	d6, [r2, #32]
 800de4c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800de50:	ed8d 6b02 	vstr	d6, [sp, #8]
 800de54:	f001 010f 	and.w	r1, r1, #15
 800de58:	2203      	movs	r2, #3
 800de5a:	48bf      	ldr	r0, [pc, #764]	; (800e158 <_dtoa_r+0x640>)
 800de5c:	2900      	cmp	r1, #0
 800de5e:	d17f      	bne.n	800df60 <_dtoa_r+0x448>
 800de60:	ed9d 6b02 	vldr	d6, [sp, #8]
 800de64:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800de68:	ed8d 7b02 	vstr	d7, [sp, #8]
 800de6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800de6e:	2900      	cmp	r1, #0
 800de70:	f000 80b2 	beq.w	800dfd8 <_dtoa_r+0x4c0>
 800de74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800de78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800de80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de84:	f140 80a8 	bpl.w	800dfd8 <_dtoa_r+0x4c0>
 800de88:	f1b9 0f00 	cmp.w	r9, #0
 800de8c:	f000 80a4 	beq.w	800dfd8 <_dtoa_r+0x4c0>
 800de90:	f1ba 0f00 	cmp.w	sl, #0
 800de94:	dd31      	ble.n	800defa <_dtoa_r+0x3e2>
 800de96:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800de9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dea2:	f10b 37ff 	add.w	r7, fp, #4294967295
 800dea6:	3201      	adds	r2, #1
 800dea8:	4650      	mov	r0, sl
 800deaa:	ed9d 6b02 	vldr	d6, [sp, #8]
 800deae:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800deb2:	ee07 2a90 	vmov	s15, r2
 800deb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800deba:	eea7 5b06 	vfma.f64	d5, d7, d6
 800debe:	ed8d 5b02 	vstr	d5, [sp, #8]
 800dec2:	9c03      	ldr	r4, [sp, #12]
 800dec4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800dec8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800decc:	2800      	cmp	r0, #0
 800dece:	f040 8086 	bne.w	800dfde <_dtoa_r+0x4c6>
 800ded2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ded6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800deda:	ec42 1b17 	vmov	d7, r1, r2
 800dede:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800dee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dee6:	f300 8272 	bgt.w	800e3ce <_dtoa_r+0x8b6>
 800deea:	eeb1 7b47 	vneg.f64	d7, d7
 800deee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800def2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800def6:	f100 8267 	bmi.w	800e3c8 <_dtoa_r+0x8b0>
 800defa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800defe:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800df02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800df04:	2a00      	cmp	r2, #0
 800df06:	f2c0 8129 	blt.w	800e15c <_dtoa_r+0x644>
 800df0a:	f1bb 0f0e 	cmp.w	fp, #14
 800df0e:	f300 8125 	bgt.w	800e15c <_dtoa_r+0x644>
 800df12:	4b90      	ldr	r3, [pc, #576]	; (800e154 <_dtoa_r+0x63c>)
 800df14:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800df18:	ed93 6b00 	vldr	d6, [r3]
 800df1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df1e:	2b00      	cmp	r3, #0
 800df20:	f280 80c3 	bge.w	800e0aa <_dtoa_r+0x592>
 800df24:	f1b9 0f00 	cmp.w	r9, #0
 800df28:	f300 80bf 	bgt.w	800e0aa <_dtoa_r+0x592>
 800df2c:	f040 824c 	bne.w	800e3c8 <_dtoa_r+0x8b0>
 800df30:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800df34:	ee26 6b07 	vmul.f64	d6, d6, d7
 800df38:	ed9d 7b02 	vldr	d7, [sp, #8]
 800df3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800df40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df44:	464c      	mov	r4, r9
 800df46:	464f      	mov	r7, r9
 800df48:	f280 8222 	bge.w	800e390 <_dtoa_r+0x878>
 800df4c:	f8dd 8000 	ldr.w	r8, [sp]
 800df50:	2331      	movs	r3, #49	; 0x31
 800df52:	f808 3b01 	strb.w	r3, [r8], #1
 800df56:	f10b 0b01 	add.w	fp, fp, #1
 800df5a:	e21e      	b.n	800e39a <_dtoa_r+0x882>
 800df5c:	2202      	movs	r2, #2
 800df5e:	e77c      	b.n	800de5a <_dtoa_r+0x342>
 800df60:	07cc      	lsls	r4, r1, #31
 800df62:	d504      	bpl.n	800df6e <_dtoa_r+0x456>
 800df64:	ed90 6b00 	vldr	d6, [r0]
 800df68:	3201      	adds	r2, #1
 800df6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800df6e:	1049      	asrs	r1, r1, #1
 800df70:	3008      	adds	r0, #8
 800df72:	e773      	b.n	800de5c <_dtoa_r+0x344>
 800df74:	d02e      	beq.n	800dfd4 <_dtoa_r+0x4bc>
 800df76:	f1cb 0100 	rsb	r1, fp, #0
 800df7a:	4a76      	ldr	r2, [pc, #472]	; (800e154 <_dtoa_r+0x63c>)
 800df7c:	f001 000f 	and.w	r0, r1, #15
 800df80:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800df84:	ed92 7b00 	vldr	d7, [r2]
 800df88:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800df8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800df90:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800df94:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800df98:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800df9c:	486e      	ldr	r0, [pc, #440]	; (800e158 <_dtoa_r+0x640>)
 800df9e:	1109      	asrs	r1, r1, #4
 800dfa0:	2400      	movs	r4, #0
 800dfa2:	2202      	movs	r2, #2
 800dfa4:	b939      	cbnz	r1, 800dfb6 <_dtoa_r+0x49e>
 800dfa6:	2c00      	cmp	r4, #0
 800dfa8:	f43f af60 	beq.w	800de6c <_dtoa_r+0x354>
 800dfac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dfb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfb4:	e75a      	b.n	800de6c <_dtoa_r+0x354>
 800dfb6:	07cf      	lsls	r7, r1, #31
 800dfb8:	d509      	bpl.n	800dfce <_dtoa_r+0x4b6>
 800dfba:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800dfbe:	ed90 7b00 	vldr	d7, [r0]
 800dfc2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dfc6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800dfca:	3201      	adds	r2, #1
 800dfcc:	2401      	movs	r4, #1
 800dfce:	1049      	asrs	r1, r1, #1
 800dfd0:	3008      	adds	r0, #8
 800dfd2:	e7e7      	b.n	800dfa4 <_dtoa_r+0x48c>
 800dfd4:	2202      	movs	r2, #2
 800dfd6:	e749      	b.n	800de6c <_dtoa_r+0x354>
 800dfd8:	465f      	mov	r7, fp
 800dfda:	4648      	mov	r0, r9
 800dfdc:	e765      	b.n	800deaa <_dtoa_r+0x392>
 800dfde:	ec42 1b17 	vmov	d7, r1, r2
 800dfe2:	4a5c      	ldr	r2, [pc, #368]	; (800e154 <_dtoa_r+0x63c>)
 800dfe4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800dfe8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800dfec:	9a00      	ldr	r2, [sp, #0]
 800dfee:	1814      	adds	r4, r2, r0
 800dff0:	9a08      	ldr	r2, [sp, #32]
 800dff2:	b352      	cbz	r2, 800e04a <_dtoa_r+0x532>
 800dff4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800dff8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800dffc:	f8dd 8000 	ldr.w	r8, [sp]
 800e000:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800e004:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e008:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e00c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e010:	ee14 2a90 	vmov	r2, s9
 800e014:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e018:	3230      	adds	r2, #48	; 0x30
 800e01a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e01e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e026:	f808 2b01 	strb.w	r2, [r8], #1
 800e02a:	d439      	bmi.n	800e0a0 <_dtoa_r+0x588>
 800e02c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800e030:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800e034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e038:	d472      	bmi.n	800e120 <_dtoa_r+0x608>
 800e03a:	45a0      	cmp	r8, r4
 800e03c:	f43f af5d 	beq.w	800defa <_dtoa_r+0x3e2>
 800e040:	ee27 7b03 	vmul.f64	d7, d7, d3
 800e044:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e048:	e7e0      	b.n	800e00c <_dtoa_r+0x4f4>
 800e04a:	f8dd 8000 	ldr.w	r8, [sp]
 800e04e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e052:	4621      	mov	r1, r4
 800e054:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800e058:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800e05c:	ee14 2a90 	vmov	r2, s9
 800e060:	3230      	adds	r2, #48	; 0x30
 800e062:	f808 2b01 	strb.w	r2, [r8], #1
 800e066:	45a0      	cmp	r8, r4
 800e068:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800e06c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800e070:	d118      	bne.n	800e0a4 <_dtoa_r+0x58c>
 800e072:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e076:	ee37 4b05 	vadd.f64	d4, d7, d5
 800e07a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800e07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e082:	dc4d      	bgt.n	800e120 <_dtoa_r+0x608>
 800e084:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e088:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800e08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e090:	f57f af33 	bpl.w	800defa <_dtoa_r+0x3e2>
 800e094:	4688      	mov	r8, r1
 800e096:	3901      	subs	r1, #1
 800e098:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800e09c:	2b30      	cmp	r3, #48	; 0x30
 800e09e:	d0f9      	beq.n	800e094 <_dtoa_r+0x57c>
 800e0a0:	46bb      	mov	fp, r7
 800e0a2:	e02a      	b.n	800e0fa <_dtoa_r+0x5e2>
 800e0a4:	ee26 6b03 	vmul.f64	d6, d6, d3
 800e0a8:	e7d6      	b.n	800e058 <_dtoa_r+0x540>
 800e0aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e0ae:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800e0b2:	f8dd 8000 	ldr.w	r8, [sp]
 800e0b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800e0ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800e0be:	ee15 3a10 	vmov	r3, s10
 800e0c2:	3330      	adds	r3, #48	; 0x30
 800e0c4:	f808 3b01 	strb.w	r3, [r8], #1
 800e0c8:	9b00      	ldr	r3, [sp, #0]
 800e0ca:	eba8 0303 	sub.w	r3, r8, r3
 800e0ce:	4599      	cmp	r9, r3
 800e0d0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800e0d4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800e0d8:	d133      	bne.n	800e142 <_dtoa_r+0x62a>
 800e0da:	ee37 7b07 	vadd.f64	d7, d7, d7
 800e0de:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800e0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0e6:	dc1a      	bgt.n	800e11e <_dtoa_r+0x606>
 800e0e8:	eeb4 7b46 	vcmp.f64	d7, d6
 800e0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0f0:	d103      	bne.n	800e0fa <_dtoa_r+0x5e2>
 800e0f2:	ee15 3a10 	vmov	r3, s10
 800e0f6:	07d9      	lsls	r1, r3, #31
 800e0f8:	d411      	bmi.n	800e11e <_dtoa_r+0x606>
 800e0fa:	4629      	mov	r1, r5
 800e0fc:	4630      	mov	r0, r6
 800e0fe:	f000 fad9 	bl	800e6b4 <_Bfree>
 800e102:	2300      	movs	r3, #0
 800e104:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e106:	f888 3000 	strb.w	r3, [r8]
 800e10a:	f10b 0301 	add.w	r3, fp, #1
 800e10e:	6013      	str	r3, [r2, #0]
 800e110:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e112:	2b00      	cmp	r3, #0
 800e114:	f43f ad4d 	beq.w	800dbb2 <_dtoa_r+0x9a>
 800e118:	f8c3 8000 	str.w	r8, [r3]
 800e11c:	e549      	b.n	800dbb2 <_dtoa_r+0x9a>
 800e11e:	465f      	mov	r7, fp
 800e120:	4643      	mov	r3, r8
 800e122:	4698      	mov	r8, r3
 800e124:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e128:	2a39      	cmp	r2, #57	; 0x39
 800e12a:	d106      	bne.n	800e13a <_dtoa_r+0x622>
 800e12c:	9a00      	ldr	r2, [sp, #0]
 800e12e:	429a      	cmp	r2, r3
 800e130:	d1f7      	bne.n	800e122 <_dtoa_r+0x60a>
 800e132:	9900      	ldr	r1, [sp, #0]
 800e134:	2230      	movs	r2, #48	; 0x30
 800e136:	3701      	adds	r7, #1
 800e138:	700a      	strb	r2, [r1, #0]
 800e13a:	781a      	ldrb	r2, [r3, #0]
 800e13c:	3201      	adds	r2, #1
 800e13e:	701a      	strb	r2, [r3, #0]
 800e140:	e7ae      	b.n	800e0a0 <_dtoa_r+0x588>
 800e142:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e146:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e14a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e14e:	d1b2      	bne.n	800e0b6 <_dtoa_r+0x59e>
 800e150:	e7d3      	b.n	800e0fa <_dtoa_r+0x5e2>
 800e152:	bf00      	nop
 800e154:	08011448 	.word	0x08011448
 800e158:	08011420 	.word	0x08011420
 800e15c:	9908      	ldr	r1, [sp, #32]
 800e15e:	2900      	cmp	r1, #0
 800e160:	f000 80d1 	beq.w	800e306 <_dtoa_r+0x7ee>
 800e164:	9907      	ldr	r1, [sp, #28]
 800e166:	2901      	cmp	r1, #1
 800e168:	f300 80b4 	bgt.w	800e2d4 <_dtoa_r+0x7bc>
 800e16c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e16e:	2900      	cmp	r1, #0
 800e170:	f000 80ac 	beq.w	800e2cc <_dtoa_r+0x7b4>
 800e174:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e178:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e17c:	461c      	mov	r4, r3
 800e17e:	930a      	str	r3, [sp, #40]	; 0x28
 800e180:	9b05      	ldr	r3, [sp, #20]
 800e182:	4413      	add	r3, r2
 800e184:	9305      	str	r3, [sp, #20]
 800e186:	9b06      	ldr	r3, [sp, #24]
 800e188:	2101      	movs	r1, #1
 800e18a:	4413      	add	r3, r2
 800e18c:	4630      	mov	r0, r6
 800e18e:	9306      	str	r3, [sp, #24]
 800e190:	f000 fb4c 	bl	800e82c <__i2b>
 800e194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e196:	4607      	mov	r7, r0
 800e198:	f1b8 0f00 	cmp.w	r8, #0
 800e19c:	dd0d      	ble.n	800e1ba <_dtoa_r+0x6a2>
 800e19e:	9a06      	ldr	r2, [sp, #24]
 800e1a0:	2a00      	cmp	r2, #0
 800e1a2:	dd0a      	ble.n	800e1ba <_dtoa_r+0x6a2>
 800e1a4:	4542      	cmp	r2, r8
 800e1a6:	9905      	ldr	r1, [sp, #20]
 800e1a8:	bfa8      	it	ge
 800e1aa:	4642      	movge	r2, r8
 800e1ac:	1a89      	subs	r1, r1, r2
 800e1ae:	9105      	str	r1, [sp, #20]
 800e1b0:	9906      	ldr	r1, [sp, #24]
 800e1b2:	eba8 0802 	sub.w	r8, r8, r2
 800e1b6:	1a8a      	subs	r2, r1, r2
 800e1b8:	9206      	str	r2, [sp, #24]
 800e1ba:	b303      	cbz	r3, 800e1fe <_dtoa_r+0x6e6>
 800e1bc:	9a08      	ldr	r2, [sp, #32]
 800e1be:	2a00      	cmp	r2, #0
 800e1c0:	f000 80a6 	beq.w	800e310 <_dtoa_r+0x7f8>
 800e1c4:	2c00      	cmp	r4, #0
 800e1c6:	dd13      	ble.n	800e1f0 <_dtoa_r+0x6d8>
 800e1c8:	4639      	mov	r1, r7
 800e1ca:	4622      	mov	r2, r4
 800e1cc:	4630      	mov	r0, r6
 800e1ce:	930c      	str	r3, [sp, #48]	; 0x30
 800e1d0:	f000 fbe8 	bl	800e9a4 <__pow5mult>
 800e1d4:	462a      	mov	r2, r5
 800e1d6:	4601      	mov	r1, r0
 800e1d8:	4607      	mov	r7, r0
 800e1da:	4630      	mov	r0, r6
 800e1dc:	f000 fb3c 	bl	800e858 <__multiply>
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	900a      	str	r0, [sp, #40]	; 0x28
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	f000 fa65 	bl	800e6b4 <_Bfree>
 800e1ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e1ee:	4615      	mov	r5, r2
 800e1f0:	1b1a      	subs	r2, r3, r4
 800e1f2:	d004      	beq.n	800e1fe <_dtoa_r+0x6e6>
 800e1f4:	4629      	mov	r1, r5
 800e1f6:	4630      	mov	r0, r6
 800e1f8:	f000 fbd4 	bl	800e9a4 <__pow5mult>
 800e1fc:	4605      	mov	r5, r0
 800e1fe:	2101      	movs	r1, #1
 800e200:	4630      	mov	r0, r6
 800e202:	f000 fb13 	bl	800e82c <__i2b>
 800e206:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e208:	2b00      	cmp	r3, #0
 800e20a:	4604      	mov	r4, r0
 800e20c:	f340 8082 	ble.w	800e314 <_dtoa_r+0x7fc>
 800e210:	461a      	mov	r2, r3
 800e212:	4601      	mov	r1, r0
 800e214:	4630      	mov	r0, r6
 800e216:	f000 fbc5 	bl	800e9a4 <__pow5mult>
 800e21a:	9b07      	ldr	r3, [sp, #28]
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	4604      	mov	r4, r0
 800e220:	dd7b      	ble.n	800e31a <_dtoa_r+0x802>
 800e222:	2300      	movs	r3, #0
 800e224:	930a      	str	r3, [sp, #40]	; 0x28
 800e226:	6922      	ldr	r2, [r4, #16]
 800e228:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800e22c:	6910      	ldr	r0, [r2, #16]
 800e22e:	f000 faad 	bl	800e78c <__hi0bits>
 800e232:	f1c0 0020 	rsb	r0, r0, #32
 800e236:	9b06      	ldr	r3, [sp, #24]
 800e238:	4418      	add	r0, r3
 800e23a:	f010 001f 	ands.w	r0, r0, #31
 800e23e:	f000 808d 	beq.w	800e35c <_dtoa_r+0x844>
 800e242:	f1c0 0220 	rsb	r2, r0, #32
 800e246:	2a04      	cmp	r2, #4
 800e248:	f340 8086 	ble.w	800e358 <_dtoa_r+0x840>
 800e24c:	f1c0 001c 	rsb	r0, r0, #28
 800e250:	9b05      	ldr	r3, [sp, #20]
 800e252:	4403      	add	r3, r0
 800e254:	9305      	str	r3, [sp, #20]
 800e256:	9b06      	ldr	r3, [sp, #24]
 800e258:	4403      	add	r3, r0
 800e25a:	4480      	add	r8, r0
 800e25c:	9306      	str	r3, [sp, #24]
 800e25e:	9b05      	ldr	r3, [sp, #20]
 800e260:	2b00      	cmp	r3, #0
 800e262:	dd05      	ble.n	800e270 <_dtoa_r+0x758>
 800e264:	4629      	mov	r1, r5
 800e266:	461a      	mov	r2, r3
 800e268:	4630      	mov	r0, r6
 800e26a:	f000 fbf5 	bl	800ea58 <__lshift>
 800e26e:	4605      	mov	r5, r0
 800e270:	9b06      	ldr	r3, [sp, #24]
 800e272:	2b00      	cmp	r3, #0
 800e274:	dd05      	ble.n	800e282 <_dtoa_r+0x76a>
 800e276:	4621      	mov	r1, r4
 800e278:	461a      	mov	r2, r3
 800e27a:	4630      	mov	r0, r6
 800e27c:	f000 fbec 	bl	800ea58 <__lshift>
 800e280:	4604      	mov	r4, r0
 800e282:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e284:	2b00      	cmp	r3, #0
 800e286:	d06b      	beq.n	800e360 <_dtoa_r+0x848>
 800e288:	4621      	mov	r1, r4
 800e28a:	4628      	mov	r0, r5
 800e28c:	f000 fc50 	bl	800eb30 <__mcmp>
 800e290:	2800      	cmp	r0, #0
 800e292:	da65      	bge.n	800e360 <_dtoa_r+0x848>
 800e294:	2300      	movs	r3, #0
 800e296:	4629      	mov	r1, r5
 800e298:	220a      	movs	r2, #10
 800e29a:	4630      	mov	r0, r6
 800e29c:	f000 fa2c 	bl	800e6f8 <__multadd>
 800e2a0:	9b08      	ldr	r3, [sp, #32]
 800e2a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e2a6:	4605      	mov	r5, r0
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	f000 8192 	beq.w	800e5d2 <_dtoa_r+0xaba>
 800e2ae:	4639      	mov	r1, r7
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	220a      	movs	r2, #10
 800e2b4:	4630      	mov	r0, r6
 800e2b6:	f000 fa1f 	bl	800e6f8 <__multadd>
 800e2ba:	f1ba 0f00 	cmp.w	sl, #0
 800e2be:	4607      	mov	r7, r0
 800e2c0:	f300 808e 	bgt.w	800e3e0 <_dtoa_r+0x8c8>
 800e2c4:	9b07      	ldr	r3, [sp, #28]
 800e2c6:	2b02      	cmp	r3, #2
 800e2c8:	dc51      	bgt.n	800e36e <_dtoa_r+0x856>
 800e2ca:	e089      	b.n	800e3e0 <_dtoa_r+0x8c8>
 800e2cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e2ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e2d2:	e751      	b.n	800e178 <_dtoa_r+0x660>
 800e2d4:	f109 34ff 	add.w	r4, r9, #4294967295
 800e2d8:	42a3      	cmp	r3, r4
 800e2da:	bfbf      	itttt	lt
 800e2dc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800e2de:	1ae3      	sublt	r3, r4, r3
 800e2e0:	18d2      	addlt	r2, r2, r3
 800e2e2:	4613      	movlt	r3, r2
 800e2e4:	bfb7      	itett	lt
 800e2e6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800e2e8:	1b1c      	subge	r4, r3, r4
 800e2ea:	4623      	movlt	r3, r4
 800e2ec:	2400      	movlt	r4, #0
 800e2ee:	f1b9 0f00 	cmp.w	r9, #0
 800e2f2:	bfb5      	itete	lt
 800e2f4:	9a05      	ldrlt	r2, [sp, #20]
 800e2f6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800e2fa:	eba2 0809 	sublt.w	r8, r2, r9
 800e2fe:	464a      	movge	r2, r9
 800e300:	bfb8      	it	lt
 800e302:	2200      	movlt	r2, #0
 800e304:	e73b      	b.n	800e17e <_dtoa_r+0x666>
 800e306:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e30a:	9f08      	ldr	r7, [sp, #32]
 800e30c:	461c      	mov	r4, r3
 800e30e:	e743      	b.n	800e198 <_dtoa_r+0x680>
 800e310:	461a      	mov	r2, r3
 800e312:	e76f      	b.n	800e1f4 <_dtoa_r+0x6dc>
 800e314:	9b07      	ldr	r3, [sp, #28]
 800e316:	2b01      	cmp	r3, #1
 800e318:	dc18      	bgt.n	800e34c <_dtoa_r+0x834>
 800e31a:	9b02      	ldr	r3, [sp, #8]
 800e31c:	b9b3      	cbnz	r3, 800e34c <_dtoa_r+0x834>
 800e31e:	9b03      	ldr	r3, [sp, #12]
 800e320:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e324:	b9a2      	cbnz	r2, 800e350 <_dtoa_r+0x838>
 800e326:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800e32a:	0d12      	lsrs	r2, r2, #20
 800e32c:	0512      	lsls	r2, r2, #20
 800e32e:	b18a      	cbz	r2, 800e354 <_dtoa_r+0x83c>
 800e330:	9b05      	ldr	r3, [sp, #20]
 800e332:	3301      	adds	r3, #1
 800e334:	9305      	str	r3, [sp, #20]
 800e336:	9b06      	ldr	r3, [sp, #24]
 800e338:	3301      	adds	r3, #1
 800e33a:	9306      	str	r3, [sp, #24]
 800e33c:	2301      	movs	r3, #1
 800e33e:	930a      	str	r3, [sp, #40]	; 0x28
 800e340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e342:	2b00      	cmp	r3, #0
 800e344:	f47f af6f 	bne.w	800e226 <_dtoa_r+0x70e>
 800e348:	2001      	movs	r0, #1
 800e34a:	e774      	b.n	800e236 <_dtoa_r+0x71e>
 800e34c:	2300      	movs	r3, #0
 800e34e:	e7f6      	b.n	800e33e <_dtoa_r+0x826>
 800e350:	9b02      	ldr	r3, [sp, #8]
 800e352:	e7f4      	b.n	800e33e <_dtoa_r+0x826>
 800e354:	920a      	str	r2, [sp, #40]	; 0x28
 800e356:	e7f3      	b.n	800e340 <_dtoa_r+0x828>
 800e358:	d081      	beq.n	800e25e <_dtoa_r+0x746>
 800e35a:	4610      	mov	r0, r2
 800e35c:	301c      	adds	r0, #28
 800e35e:	e777      	b.n	800e250 <_dtoa_r+0x738>
 800e360:	f1b9 0f00 	cmp.w	r9, #0
 800e364:	dc37      	bgt.n	800e3d6 <_dtoa_r+0x8be>
 800e366:	9b07      	ldr	r3, [sp, #28]
 800e368:	2b02      	cmp	r3, #2
 800e36a:	dd34      	ble.n	800e3d6 <_dtoa_r+0x8be>
 800e36c:	46ca      	mov	sl, r9
 800e36e:	f1ba 0f00 	cmp.w	sl, #0
 800e372:	d10d      	bne.n	800e390 <_dtoa_r+0x878>
 800e374:	4621      	mov	r1, r4
 800e376:	4653      	mov	r3, sl
 800e378:	2205      	movs	r2, #5
 800e37a:	4630      	mov	r0, r6
 800e37c:	f000 f9bc 	bl	800e6f8 <__multadd>
 800e380:	4601      	mov	r1, r0
 800e382:	4604      	mov	r4, r0
 800e384:	4628      	mov	r0, r5
 800e386:	f000 fbd3 	bl	800eb30 <__mcmp>
 800e38a:	2800      	cmp	r0, #0
 800e38c:	f73f adde 	bgt.w	800df4c <_dtoa_r+0x434>
 800e390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e392:	f8dd 8000 	ldr.w	r8, [sp]
 800e396:	ea6f 0b03 	mvn.w	fp, r3
 800e39a:	f04f 0900 	mov.w	r9, #0
 800e39e:	4621      	mov	r1, r4
 800e3a0:	4630      	mov	r0, r6
 800e3a2:	f000 f987 	bl	800e6b4 <_Bfree>
 800e3a6:	2f00      	cmp	r7, #0
 800e3a8:	f43f aea7 	beq.w	800e0fa <_dtoa_r+0x5e2>
 800e3ac:	f1b9 0f00 	cmp.w	r9, #0
 800e3b0:	d005      	beq.n	800e3be <_dtoa_r+0x8a6>
 800e3b2:	45b9      	cmp	r9, r7
 800e3b4:	d003      	beq.n	800e3be <_dtoa_r+0x8a6>
 800e3b6:	4649      	mov	r1, r9
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	f000 f97b 	bl	800e6b4 <_Bfree>
 800e3be:	4639      	mov	r1, r7
 800e3c0:	4630      	mov	r0, r6
 800e3c2:	f000 f977 	bl	800e6b4 <_Bfree>
 800e3c6:	e698      	b.n	800e0fa <_dtoa_r+0x5e2>
 800e3c8:	2400      	movs	r4, #0
 800e3ca:	4627      	mov	r7, r4
 800e3cc:	e7e0      	b.n	800e390 <_dtoa_r+0x878>
 800e3ce:	46bb      	mov	fp, r7
 800e3d0:	4604      	mov	r4, r0
 800e3d2:	4607      	mov	r7, r0
 800e3d4:	e5ba      	b.n	800df4c <_dtoa_r+0x434>
 800e3d6:	9b08      	ldr	r3, [sp, #32]
 800e3d8:	46ca      	mov	sl, r9
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	f000 8100 	beq.w	800e5e0 <_dtoa_r+0xac8>
 800e3e0:	f1b8 0f00 	cmp.w	r8, #0
 800e3e4:	dd05      	ble.n	800e3f2 <_dtoa_r+0x8da>
 800e3e6:	4639      	mov	r1, r7
 800e3e8:	4642      	mov	r2, r8
 800e3ea:	4630      	mov	r0, r6
 800e3ec:	f000 fb34 	bl	800ea58 <__lshift>
 800e3f0:	4607      	mov	r7, r0
 800e3f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d05d      	beq.n	800e4b4 <_dtoa_r+0x99c>
 800e3f8:	6879      	ldr	r1, [r7, #4]
 800e3fa:	4630      	mov	r0, r6
 800e3fc:	f000 f91a 	bl	800e634 <_Balloc>
 800e400:	4680      	mov	r8, r0
 800e402:	b928      	cbnz	r0, 800e410 <_dtoa_r+0x8f8>
 800e404:	4b82      	ldr	r3, [pc, #520]	; (800e610 <_dtoa_r+0xaf8>)
 800e406:	4602      	mov	r2, r0
 800e408:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e40c:	f7ff bb9a 	b.w	800db44 <_dtoa_r+0x2c>
 800e410:	693a      	ldr	r2, [r7, #16]
 800e412:	3202      	adds	r2, #2
 800e414:	0092      	lsls	r2, r2, #2
 800e416:	f107 010c 	add.w	r1, r7, #12
 800e41a:	300c      	adds	r0, #12
 800e41c:	f7fe fe96 	bl	800d14c <memcpy>
 800e420:	2201      	movs	r2, #1
 800e422:	4641      	mov	r1, r8
 800e424:	4630      	mov	r0, r6
 800e426:	f000 fb17 	bl	800ea58 <__lshift>
 800e42a:	9b00      	ldr	r3, [sp, #0]
 800e42c:	3301      	adds	r3, #1
 800e42e:	9305      	str	r3, [sp, #20]
 800e430:	9b00      	ldr	r3, [sp, #0]
 800e432:	4453      	add	r3, sl
 800e434:	9309      	str	r3, [sp, #36]	; 0x24
 800e436:	9b02      	ldr	r3, [sp, #8]
 800e438:	f003 0301 	and.w	r3, r3, #1
 800e43c:	46b9      	mov	r9, r7
 800e43e:	9308      	str	r3, [sp, #32]
 800e440:	4607      	mov	r7, r0
 800e442:	9b05      	ldr	r3, [sp, #20]
 800e444:	4621      	mov	r1, r4
 800e446:	3b01      	subs	r3, #1
 800e448:	4628      	mov	r0, r5
 800e44a:	9302      	str	r3, [sp, #8]
 800e44c:	f7ff fad6 	bl	800d9fc <quorem>
 800e450:	4603      	mov	r3, r0
 800e452:	3330      	adds	r3, #48	; 0x30
 800e454:	9006      	str	r0, [sp, #24]
 800e456:	4649      	mov	r1, r9
 800e458:	4628      	mov	r0, r5
 800e45a:	930a      	str	r3, [sp, #40]	; 0x28
 800e45c:	f000 fb68 	bl	800eb30 <__mcmp>
 800e460:	463a      	mov	r2, r7
 800e462:	4682      	mov	sl, r0
 800e464:	4621      	mov	r1, r4
 800e466:	4630      	mov	r0, r6
 800e468:	f000 fb7e 	bl	800eb68 <__mdiff>
 800e46c:	68c2      	ldr	r2, [r0, #12]
 800e46e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e470:	4680      	mov	r8, r0
 800e472:	bb0a      	cbnz	r2, 800e4b8 <_dtoa_r+0x9a0>
 800e474:	4601      	mov	r1, r0
 800e476:	4628      	mov	r0, r5
 800e478:	f000 fb5a 	bl	800eb30 <__mcmp>
 800e47c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e47e:	4602      	mov	r2, r0
 800e480:	4641      	mov	r1, r8
 800e482:	4630      	mov	r0, r6
 800e484:	920e      	str	r2, [sp, #56]	; 0x38
 800e486:	930a      	str	r3, [sp, #40]	; 0x28
 800e488:	f000 f914 	bl	800e6b4 <_Bfree>
 800e48c:	9b07      	ldr	r3, [sp, #28]
 800e48e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e490:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800e494:	ea43 0102 	orr.w	r1, r3, r2
 800e498:	9b08      	ldr	r3, [sp, #32]
 800e49a:	430b      	orrs	r3, r1
 800e49c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e49e:	d10d      	bne.n	800e4bc <_dtoa_r+0x9a4>
 800e4a0:	2b39      	cmp	r3, #57	; 0x39
 800e4a2:	d029      	beq.n	800e4f8 <_dtoa_r+0x9e0>
 800e4a4:	f1ba 0f00 	cmp.w	sl, #0
 800e4a8:	dd01      	ble.n	800e4ae <_dtoa_r+0x996>
 800e4aa:	9b06      	ldr	r3, [sp, #24]
 800e4ac:	3331      	adds	r3, #49	; 0x31
 800e4ae:	9a02      	ldr	r2, [sp, #8]
 800e4b0:	7013      	strb	r3, [r2, #0]
 800e4b2:	e774      	b.n	800e39e <_dtoa_r+0x886>
 800e4b4:	4638      	mov	r0, r7
 800e4b6:	e7b8      	b.n	800e42a <_dtoa_r+0x912>
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	e7e1      	b.n	800e480 <_dtoa_r+0x968>
 800e4bc:	f1ba 0f00 	cmp.w	sl, #0
 800e4c0:	db06      	blt.n	800e4d0 <_dtoa_r+0x9b8>
 800e4c2:	9907      	ldr	r1, [sp, #28]
 800e4c4:	ea41 0a0a 	orr.w	sl, r1, sl
 800e4c8:	9908      	ldr	r1, [sp, #32]
 800e4ca:	ea5a 0101 	orrs.w	r1, sl, r1
 800e4ce:	d120      	bne.n	800e512 <_dtoa_r+0x9fa>
 800e4d0:	2a00      	cmp	r2, #0
 800e4d2:	ddec      	ble.n	800e4ae <_dtoa_r+0x996>
 800e4d4:	4629      	mov	r1, r5
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	4630      	mov	r0, r6
 800e4da:	9305      	str	r3, [sp, #20]
 800e4dc:	f000 fabc 	bl	800ea58 <__lshift>
 800e4e0:	4621      	mov	r1, r4
 800e4e2:	4605      	mov	r5, r0
 800e4e4:	f000 fb24 	bl	800eb30 <__mcmp>
 800e4e8:	2800      	cmp	r0, #0
 800e4ea:	9b05      	ldr	r3, [sp, #20]
 800e4ec:	dc02      	bgt.n	800e4f4 <_dtoa_r+0x9dc>
 800e4ee:	d1de      	bne.n	800e4ae <_dtoa_r+0x996>
 800e4f0:	07da      	lsls	r2, r3, #31
 800e4f2:	d5dc      	bpl.n	800e4ae <_dtoa_r+0x996>
 800e4f4:	2b39      	cmp	r3, #57	; 0x39
 800e4f6:	d1d8      	bne.n	800e4aa <_dtoa_r+0x992>
 800e4f8:	9a02      	ldr	r2, [sp, #8]
 800e4fa:	2339      	movs	r3, #57	; 0x39
 800e4fc:	7013      	strb	r3, [r2, #0]
 800e4fe:	4643      	mov	r3, r8
 800e500:	4698      	mov	r8, r3
 800e502:	3b01      	subs	r3, #1
 800e504:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800e508:	2a39      	cmp	r2, #57	; 0x39
 800e50a:	d051      	beq.n	800e5b0 <_dtoa_r+0xa98>
 800e50c:	3201      	adds	r2, #1
 800e50e:	701a      	strb	r2, [r3, #0]
 800e510:	e745      	b.n	800e39e <_dtoa_r+0x886>
 800e512:	2a00      	cmp	r2, #0
 800e514:	dd03      	ble.n	800e51e <_dtoa_r+0xa06>
 800e516:	2b39      	cmp	r3, #57	; 0x39
 800e518:	d0ee      	beq.n	800e4f8 <_dtoa_r+0x9e0>
 800e51a:	3301      	adds	r3, #1
 800e51c:	e7c7      	b.n	800e4ae <_dtoa_r+0x996>
 800e51e:	9a05      	ldr	r2, [sp, #20]
 800e520:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e522:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e526:	428a      	cmp	r2, r1
 800e528:	d02b      	beq.n	800e582 <_dtoa_r+0xa6a>
 800e52a:	4629      	mov	r1, r5
 800e52c:	2300      	movs	r3, #0
 800e52e:	220a      	movs	r2, #10
 800e530:	4630      	mov	r0, r6
 800e532:	f000 f8e1 	bl	800e6f8 <__multadd>
 800e536:	45b9      	cmp	r9, r7
 800e538:	4605      	mov	r5, r0
 800e53a:	f04f 0300 	mov.w	r3, #0
 800e53e:	f04f 020a 	mov.w	r2, #10
 800e542:	4649      	mov	r1, r9
 800e544:	4630      	mov	r0, r6
 800e546:	d107      	bne.n	800e558 <_dtoa_r+0xa40>
 800e548:	f000 f8d6 	bl	800e6f8 <__multadd>
 800e54c:	4681      	mov	r9, r0
 800e54e:	4607      	mov	r7, r0
 800e550:	9b05      	ldr	r3, [sp, #20]
 800e552:	3301      	adds	r3, #1
 800e554:	9305      	str	r3, [sp, #20]
 800e556:	e774      	b.n	800e442 <_dtoa_r+0x92a>
 800e558:	f000 f8ce 	bl	800e6f8 <__multadd>
 800e55c:	4639      	mov	r1, r7
 800e55e:	4681      	mov	r9, r0
 800e560:	2300      	movs	r3, #0
 800e562:	220a      	movs	r2, #10
 800e564:	4630      	mov	r0, r6
 800e566:	f000 f8c7 	bl	800e6f8 <__multadd>
 800e56a:	4607      	mov	r7, r0
 800e56c:	e7f0      	b.n	800e550 <_dtoa_r+0xa38>
 800e56e:	f1ba 0f00 	cmp.w	sl, #0
 800e572:	9a00      	ldr	r2, [sp, #0]
 800e574:	bfcc      	ite	gt
 800e576:	46d0      	movgt	r8, sl
 800e578:	f04f 0801 	movle.w	r8, #1
 800e57c:	4490      	add	r8, r2
 800e57e:	f04f 0900 	mov.w	r9, #0
 800e582:	4629      	mov	r1, r5
 800e584:	2201      	movs	r2, #1
 800e586:	4630      	mov	r0, r6
 800e588:	9302      	str	r3, [sp, #8]
 800e58a:	f000 fa65 	bl	800ea58 <__lshift>
 800e58e:	4621      	mov	r1, r4
 800e590:	4605      	mov	r5, r0
 800e592:	f000 facd 	bl	800eb30 <__mcmp>
 800e596:	2800      	cmp	r0, #0
 800e598:	dcb1      	bgt.n	800e4fe <_dtoa_r+0x9e6>
 800e59a:	d102      	bne.n	800e5a2 <_dtoa_r+0xa8a>
 800e59c:	9b02      	ldr	r3, [sp, #8]
 800e59e:	07db      	lsls	r3, r3, #31
 800e5a0:	d4ad      	bmi.n	800e4fe <_dtoa_r+0x9e6>
 800e5a2:	4643      	mov	r3, r8
 800e5a4:	4698      	mov	r8, r3
 800e5a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e5aa:	2a30      	cmp	r2, #48	; 0x30
 800e5ac:	d0fa      	beq.n	800e5a4 <_dtoa_r+0xa8c>
 800e5ae:	e6f6      	b.n	800e39e <_dtoa_r+0x886>
 800e5b0:	9a00      	ldr	r2, [sp, #0]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d1a4      	bne.n	800e500 <_dtoa_r+0x9e8>
 800e5b6:	f10b 0b01 	add.w	fp, fp, #1
 800e5ba:	2331      	movs	r3, #49	; 0x31
 800e5bc:	e778      	b.n	800e4b0 <_dtoa_r+0x998>
 800e5be:	4b15      	ldr	r3, [pc, #84]	; (800e614 <_dtoa_r+0xafc>)
 800e5c0:	f7ff bb12 	b.w	800dbe8 <_dtoa_r+0xd0>
 800e5c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	f47f aaee 	bne.w	800dba8 <_dtoa_r+0x90>
 800e5cc:	4b12      	ldr	r3, [pc, #72]	; (800e618 <_dtoa_r+0xb00>)
 800e5ce:	f7ff bb0b 	b.w	800dbe8 <_dtoa_r+0xd0>
 800e5d2:	f1ba 0f00 	cmp.w	sl, #0
 800e5d6:	dc03      	bgt.n	800e5e0 <_dtoa_r+0xac8>
 800e5d8:	9b07      	ldr	r3, [sp, #28]
 800e5da:	2b02      	cmp	r3, #2
 800e5dc:	f73f aec7 	bgt.w	800e36e <_dtoa_r+0x856>
 800e5e0:	f8dd 8000 	ldr.w	r8, [sp]
 800e5e4:	4621      	mov	r1, r4
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	f7ff fa08 	bl	800d9fc <quorem>
 800e5ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e5f0:	f808 3b01 	strb.w	r3, [r8], #1
 800e5f4:	9a00      	ldr	r2, [sp, #0]
 800e5f6:	eba8 0202 	sub.w	r2, r8, r2
 800e5fa:	4592      	cmp	sl, r2
 800e5fc:	ddb7      	ble.n	800e56e <_dtoa_r+0xa56>
 800e5fe:	4629      	mov	r1, r5
 800e600:	2300      	movs	r3, #0
 800e602:	220a      	movs	r2, #10
 800e604:	4630      	mov	r0, r6
 800e606:	f000 f877 	bl	800e6f8 <__multadd>
 800e60a:	4605      	mov	r5, r0
 800e60c:	e7ea      	b.n	800e5e4 <_dtoa_r+0xacc>
 800e60e:	bf00      	nop
 800e610:	080113ab 	.word	0x080113ab
 800e614:	08011304 	.word	0x08011304
 800e618:	08011328 	.word	0x08011328

0800e61c <_localeconv_r>:
 800e61c:	4800      	ldr	r0, [pc, #0]	; (800e620 <_localeconv_r+0x4>)
 800e61e:	4770      	bx	lr
 800e620:	24000178 	.word	0x24000178

0800e624 <malloc>:
 800e624:	4b02      	ldr	r3, [pc, #8]	; (800e630 <malloc+0xc>)
 800e626:	4601      	mov	r1, r0
 800e628:	6818      	ldr	r0, [r3, #0]
 800e62a:	f000 bbe1 	b.w	800edf0 <_malloc_r>
 800e62e:	bf00      	nop
 800e630:	24000024 	.word	0x24000024

0800e634 <_Balloc>:
 800e634:	b570      	push	{r4, r5, r6, lr}
 800e636:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e638:	4604      	mov	r4, r0
 800e63a:	460d      	mov	r5, r1
 800e63c:	b976      	cbnz	r6, 800e65c <_Balloc+0x28>
 800e63e:	2010      	movs	r0, #16
 800e640:	f7ff fff0 	bl	800e624 <malloc>
 800e644:	4602      	mov	r2, r0
 800e646:	6260      	str	r0, [r4, #36]	; 0x24
 800e648:	b920      	cbnz	r0, 800e654 <_Balloc+0x20>
 800e64a:	4b18      	ldr	r3, [pc, #96]	; (800e6ac <_Balloc+0x78>)
 800e64c:	4818      	ldr	r0, [pc, #96]	; (800e6b0 <_Balloc+0x7c>)
 800e64e:	2166      	movs	r1, #102	; 0x66
 800e650:	f000 fc38 	bl	800eec4 <__assert_func>
 800e654:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e658:	6006      	str	r6, [r0, #0]
 800e65a:	60c6      	str	r6, [r0, #12]
 800e65c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e65e:	68f3      	ldr	r3, [r6, #12]
 800e660:	b183      	cbz	r3, 800e684 <_Balloc+0x50>
 800e662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e664:	68db      	ldr	r3, [r3, #12]
 800e666:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e66a:	b9b8      	cbnz	r0, 800e69c <_Balloc+0x68>
 800e66c:	2101      	movs	r1, #1
 800e66e:	fa01 f605 	lsl.w	r6, r1, r5
 800e672:	1d72      	adds	r2, r6, #5
 800e674:	0092      	lsls	r2, r2, #2
 800e676:	4620      	mov	r0, r4
 800e678:	f000 fb5a 	bl	800ed30 <_calloc_r>
 800e67c:	b160      	cbz	r0, 800e698 <_Balloc+0x64>
 800e67e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e682:	e00e      	b.n	800e6a2 <_Balloc+0x6e>
 800e684:	2221      	movs	r2, #33	; 0x21
 800e686:	2104      	movs	r1, #4
 800e688:	4620      	mov	r0, r4
 800e68a:	f000 fb51 	bl	800ed30 <_calloc_r>
 800e68e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e690:	60f0      	str	r0, [r6, #12]
 800e692:	68db      	ldr	r3, [r3, #12]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d1e4      	bne.n	800e662 <_Balloc+0x2e>
 800e698:	2000      	movs	r0, #0
 800e69a:	bd70      	pop	{r4, r5, r6, pc}
 800e69c:	6802      	ldr	r2, [r0, #0]
 800e69e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e6a8:	e7f7      	b.n	800e69a <_Balloc+0x66>
 800e6aa:	bf00      	nop
 800e6ac:	08011335 	.word	0x08011335
 800e6b0:	080113bc 	.word	0x080113bc

0800e6b4 <_Bfree>:
 800e6b4:	b570      	push	{r4, r5, r6, lr}
 800e6b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e6b8:	4605      	mov	r5, r0
 800e6ba:	460c      	mov	r4, r1
 800e6bc:	b976      	cbnz	r6, 800e6dc <_Bfree+0x28>
 800e6be:	2010      	movs	r0, #16
 800e6c0:	f7ff ffb0 	bl	800e624 <malloc>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	6268      	str	r0, [r5, #36]	; 0x24
 800e6c8:	b920      	cbnz	r0, 800e6d4 <_Bfree+0x20>
 800e6ca:	4b09      	ldr	r3, [pc, #36]	; (800e6f0 <_Bfree+0x3c>)
 800e6cc:	4809      	ldr	r0, [pc, #36]	; (800e6f4 <_Bfree+0x40>)
 800e6ce:	218a      	movs	r1, #138	; 0x8a
 800e6d0:	f000 fbf8 	bl	800eec4 <__assert_func>
 800e6d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e6d8:	6006      	str	r6, [r0, #0]
 800e6da:	60c6      	str	r6, [r0, #12]
 800e6dc:	b13c      	cbz	r4, 800e6ee <_Bfree+0x3a>
 800e6de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e6e0:	6862      	ldr	r2, [r4, #4]
 800e6e2:	68db      	ldr	r3, [r3, #12]
 800e6e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e6e8:	6021      	str	r1, [r4, #0]
 800e6ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e6ee:	bd70      	pop	{r4, r5, r6, pc}
 800e6f0:	08011335 	.word	0x08011335
 800e6f4:	080113bc 	.word	0x080113bc

0800e6f8 <__multadd>:
 800e6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fc:	690e      	ldr	r6, [r1, #16]
 800e6fe:	4607      	mov	r7, r0
 800e700:	4698      	mov	r8, r3
 800e702:	460c      	mov	r4, r1
 800e704:	f101 0014 	add.w	r0, r1, #20
 800e708:	2300      	movs	r3, #0
 800e70a:	6805      	ldr	r5, [r0, #0]
 800e70c:	b2a9      	uxth	r1, r5
 800e70e:	fb02 8101 	mla	r1, r2, r1, r8
 800e712:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e716:	0c2d      	lsrs	r5, r5, #16
 800e718:	fb02 c505 	mla	r5, r2, r5, ip
 800e71c:	b289      	uxth	r1, r1
 800e71e:	3301      	adds	r3, #1
 800e720:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e724:	429e      	cmp	r6, r3
 800e726:	f840 1b04 	str.w	r1, [r0], #4
 800e72a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e72e:	dcec      	bgt.n	800e70a <__multadd+0x12>
 800e730:	f1b8 0f00 	cmp.w	r8, #0
 800e734:	d022      	beq.n	800e77c <__multadd+0x84>
 800e736:	68a3      	ldr	r3, [r4, #8]
 800e738:	42b3      	cmp	r3, r6
 800e73a:	dc19      	bgt.n	800e770 <__multadd+0x78>
 800e73c:	6861      	ldr	r1, [r4, #4]
 800e73e:	4638      	mov	r0, r7
 800e740:	3101      	adds	r1, #1
 800e742:	f7ff ff77 	bl	800e634 <_Balloc>
 800e746:	4605      	mov	r5, r0
 800e748:	b928      	cbnz	r0, 800e756 <__multadd+0x5e>
 800e74a:	4602      	mov	r2, r0
 800e74c:	4b0d      	ldr	r3, [pc, #52]	; (800e784 <__multadd+0x8c>)
 800e74e:	480e      	ldr	r0, [pc, #56]	; (800e788 <__multadd+0x90>)
 800e750:	21b5      	movs	r1, #181	; 0xb5
 800e752:	f000 fbb7 	bl	800eec4 <__assert_func>
 800e756:	6922      	ldr	r2, [r4, #16]
 800e758:	3202      	adds	r2, #2
 800e75a:	f104 010c 	add.w	r1, r4, #12
 800e75e:	0092      	lsls	r2, r2, #2
 800e760:	300c      	adds	r0, #12
 800e762:	f7fe fcf3 	bl	800d14c <memcpy>
 800e766:	4621      	mov	r1, r4
 800e768:	4638      	mov	r0, r7
 800e76a:	f7ff ffa3 	bl	800e6b4 <_Bfree>
 800e76e:	462c      	mov	r4, r5
 800e770:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e774:	3601      	adds	r6, #1
 800e776:	f8c3 8014 	str.w	r8, [r3, #20]
 800e77a:	6126      	str	r6, [r4, #16]
 800e77c:	4620      	mov	r0, r4
 800e77e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e782:	bf00      	nop
 800e784:	080113ab 	.word	0x080113ab
 800e788:	080113bc 	.word	0x080113bc

0800e78c <__hi0bits>:
 800e78c:	0c03      	lsrs	r3, r0, #16
 800e78e:	041b      	lsls	r3, r3, #16
 800e790:	b9d3      	cbnz	r3, 800e7c8 <__hi0bits+0x3c>
 800e792:	0400      	lsls	r0, r0, #16
 800e794:	2310      	movs	r3, #16
 800e796:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e79a:	bf04      	itt	eq
 800e79c:	0200      	lsleq	r0, r0, #8
 800e79e:	3308      	addeq	r3, #8
 800e7a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e7a4:	bf04      	itt	eq
 800e7a6:	0100      	lsleq	r0, r0, #4
 800e7a8:	3304      	addeq	r3, #4
 800e7aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e7ae:	bf04      	itt	eq
 800e7b0:	0080      	lsleq	r0, r0, #2
 800e7b2:	3302      	addeq	r3, #2
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	db05      	blt.n	800e7c4 <__hi0bits+0x38>
 800e7b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e7bc:	f103 0301 	add.w	r3, r3, #1
 800e7c0:	bf08      	it	eq
 800e7c2:	2320      	moveq	r3, #32
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	4770      	bx	lr
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	e7e4      	b.n	800e796 <__hi0bits+0xa>

0800e7cc <__lo0bits>:
 800e7cc:	6803      	ldr	r3, [r0, #0]
 800e7ce:	f013 0207 	ands.w	r2, r3, #7
 800e7d2:	4601      	mov	r1, r0
 800e7d4:	d00b      	beq.n	800e7ee <__lo0bits+0x22>
 800e7d6:	07da      	lsls	r2, r3, #31
 800e7d8:	d424      	bmi.n	800e824 <__lo0bits+0x58>
 800e7da:	0798      	lsls	r0, r3, #30
 800e7dc:	bf49      	itett	mi
 800e7de:	085b      	lsrmi	r3, r3, #1
 800e7e0:	089b      	lsrpl	r3, r3, #2
 800e7e2:	2001      	movmi	r0, #1
 800e7e4:	600b      	strmi	r3, [r1, #0]
 800e7e6:	bf5c      	itt	pl
 800e7e8:	600b      	strpl	r3, [r1, #0]
 800e7ea:	2002      	movpl	r0, #2
 800e7ec:	4770      	bx	lr
 800e7ee:	b298      	uxth	r0, r3
 800e7f0:	b9b0      	cbnz	r0, 800e820 <__lo0bits+0x54>
 800e7f2:	0c1b      	lsrs	r3, r3, #16
 800e7f4:	2010      	movs	r0, #16
 800e7f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e7fa:	bf04      	itt	eq
 800e7fc:	0a1b      	lsreq	r3, r3, #8
 800e7fe:	3008      	addeq	r0, #8
 800e800:	071a      	lsls	r2, r3, #28
 800e802:	bf04      	itt	eq
 800e804:	091b      	lsreq	r3, r3, #4
 800e806:	3004      	addeq	r0, #4
 800e808:	079a      	lsls	r2, r3, #30
 800e80a:	bf04      	itt	eq
 800e80c:	089b      	lsreq	r3, r3, #2
 800e80e:	3002      	addeq	r0, #2
 800e810:	07da      	lsls	r2, r3, #31
 800e812:	d403      	bmi.n	800e81c <__lo0bits+0x50>
 800e814:	085b      	lsrs	r3, r3, #1
 800e816:	f100 0001 	add.w	r0, r0, #1
 800e81a:	d005      	beq.n	800e828 <__lo0bits+0x5c>
 800e81c:	600b      	str	r3, [r1, #0]
 800e81e:	4770      	bx	lr
 800e820:	4610      	mov	r0, r2
 800e822:	e7e8      	b.n	800e7f6 <__lo0bits+0x2a>
 800e824:	2000      	movs	r0, #0
 800e826:	4770      	bx	lr
 800e828:	2020      	movs	r0, #32
 800e82a:	4770      	bx	lr

0800e82c <__i2b>:
 800e82c:	b510      	push	{r4, lr}
 800e82e:	460c      	mov	r4, r1
 800e830:	2101      	movs	r1, #1
 800e832:	f7ff feff 	bl	800e634 <_Balloc>
 800e836:	4602      	mov	r2, r0
 800e838:	b928      	cbnz	r0, 800e846 <__i2b+0x1a>
 800e83a:	4b05      	ldr	r3, [pc, #20]	; (800e850 <__i2b+0x24>)
 800e83c:	4805      	ldr	r0, [pc, #20]	; (800e854 <__i2b+0x28>)
 800e83e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e842:	f000 fb3f 	bl	800eec4 <__assert_func>
 800e846:	2301      	movs	r3, #1
 800e848:	6144      	str	r4, [r0, #20]
 800e84a:	6103      	str	r3, [r0, #16]
 800e84c:	bd10      	pop	{r4, pc}
 800e84e:	bf00      	nop
 800e850:	080113ab 	.word	0x080113ab
 800e854:	080113bc 	.word	0x080113bc

0800e858 <__multiply>:
 800e858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85c:	4614      	mov	r4, r2
 800e85e:	690a      	ldr	r2, [r1, #16]
 800e860:	6923      	ldr	r3, [r4, #16]
 800e862:	429a      	cmp	r2, r3
 800e864:	bfb8      	it	lt
 800e866:	460b      	movlt	r3, r1
 800e868:	460d      	mov	r5, r1
 800e86a:	bfbc      	itt	lt
 800e86c:	4625      	movlt	r5, r4
 800e86e:	461c      	movlt	r4, r3
 800e870:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e874:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e878:	68ab      	ldr	r3, [r5, #8]
 800e87a:	6869      	ldr	r1, [r5, #4]
 800e87c:	eb0a 0709 	add.w	r7, sl, r9
 800e880:	42bb      	cmp	r3, r7
 800e882:	b085      	sub	sp, #20
 800e884:	bfb8      	it	lt
 800e886:	3101      	addlt	r1, #1
 800e888:	f7ff fed4 	bl	800e634 <_Balloc>
 800e88c:	b930      	cbnz	r0, 800e89c <__multiply+0x44>
 800e88e:	4602      	mov	r2, r0
 800e890:	4b42      	ldr	r3, [pc, #264]	; (800e99c <__multiply+0x144>)
 800e892:	4843      	ldr	r0, [pc, #268]	; (800e9a0 <__multiply+0x148>)
 800e894:	f240 115d 	movw	r1, #349	; 0x15d
 800e898:	f000 fb14 	bl	800eec4 <__assert_func>
 800e89c:	f100 0614 	add.w	r6, r0, #20
 800e8a0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e8a4:	4633      	mov	r3, r6
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	4543      	cmp	r3, r8
 800e8aa:	d31e      	bcc.n	800e8ea <__multiply+0x92>
 800e8ac:	f105 0c14 	add.w	ip, r5, #20
 800e8b0:	f104 0314 	add.w	r3, r4, #20
 800e8b4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e8b8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e8bc:	9202      	str	r2, [sp, #8]
 800e8be:	ebac 0205 	sub.w	r2, ip, r5
 800e8c2:	3a15      	subs	r2, #21
 800e8c4:	f022 0203 	bic.w	r2, r2, #3
 800e8c8:	3204      	adds	r2, #4
 800e8ca:	f105 0115 	add.w	r1, r5, #21
 800e8ce:	458c      	cmp	ip, r1
 800e8d0:	bf38      	it	cc
 800e8d2:	2204      	movcc	r2, #4
 800e8d4:	9201      	str	r2, [sp, #4]
 800e8d6:	9a02      	ldr	r2, [sp, #8]
 800e8d8:	9303      	str	r3, [sp, #12]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d808      	bhi.n	800e8f0 <__multiply+0x98>
 800e8de:	2f00      	cmp	r7, #0
 800e8e0:	dc55      	bgt.n	800e98e <__multiply+0x136>
 800e8e2:	6107      	str	r7, [r0, #16]
 800e8e4:	b005      	add	sp, #20
 800e8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8ea:	f843 2b04 	str.w	r2, [r3], #4
 800e8ee:	e7db      	b.n	800e8a8 <__multiply+0x50>
 800e8f0:	f8b3 a000 	ldrh.w	sl, [r3]
 800e8f4:	f1ba 0f00 	cmp.w	sl, #0
 800e8f8:	d020      	beq.n	800e93c <__multiply+0xe4>
 800e8fa:	f105 0e14 	add.w	lr, r5, #20
 800e8fe:	46b1      	mov	r9, r6
 800e900:	2200      	movs	r2, #0
 800e902:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e906:	f8d9 b000 	ldr.w	fp, [r9]
 800e90a:	b2a1      	uxth	r1, r4
 800e90c:	fa1f fb8b 	uxth.w	fp, fp
 800e910:	fb0a b101 	mla	r1, sl, r1, fp
 800e914:	4411      	add	r1, r2
 800e916:	f8d9 2000 	ldr.w	r2, [r9]
 800e91a:	0c24      	lsrs	r4, r4, #16
 800e91c:	0c12      	lsrs	r2, r2, #16
 800e91e:	fb0a 2404 	mla	r4, sl, r4, r2
 800e922:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e926:	b289      	uxth	r1, r1
 800e928:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e92c:	45f4      	cmp	ip, lr
 800e92e:	f849 1b04 	str.w	r1, [r9], #4
 800e932:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e936:	d8e4      	bhi.n	800e902 <__multiply+0xaa>
 800e938:	9901      	ldr	r1, [sp, #4]
 800e93a:	5072      	str	r2, [r6, r1]
 800e93c:	9a03      	ldr	r2, [sp, #12]
 800e93e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e942:	3304      	adds	r3, #4
 800e944:	f1b9 0f00 	cmp.w	r9, #0
 800e948:	d01f      	beq.n	800e98a <__multiply+0x132>
 800e94a:	6834      	ldr	r4, [r6, #0]
 800e94c:	f105 0114 	add.w	r1, r5, #20
 800e950:	46b6      	mov	lr, r6
 800e952:	f04f 0a00 	mov.w	sl, #0
 800e956:	880a      	ldrh	r2, [r1, #0]
 800e958:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e95c:	fb09 b202 	mla	r2, r9, r2, fp
 800e960:	4492      	add	sl, r2
 800e962:	b2a4      	uxth	r4, r4
 800e964:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e968:	f84e 4b04 	str.w	r4, [lr], #4
 800e96c:	f851 4b04 	ldr.w	r4, [r1], #4
 800e970:	f8be 2000 	ldrh.w	r2, [lr]
 800e974:	0c24      	lsrs	r4, r4, #16
 800e976:	fb09 2404 	mla	r4, r9, r4, r2
 800e97a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e97e:	458c      	cmp	ip, r1
 800e980:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e984:	d8e7      	bhi.n	800e956 <__multiply+0xfe>
 800e986:	9a01      	ldr	r2, [sp, #4]
 800e988:	50b4      	str	r4, [r6, r2]
 800e98a:	3604      	adds	r6, #4
 800e98c:	e7a3      	b.n	800e8d6 <__multiply+0x7e>
 800e98e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e992:	2b00      	cmp	r3, #0
 800e994:	d1a5      	bne.n	800e8e2 <__multiply+0x8a>
 800e996:	3f01      	subs	r7, #1
 800e998:	e7a1      	b.n	800e8de <__multiply+0x86>
 800e99a:	bf00      	nop
 800e99c:	080113ab 	.word	0x080113ab
 800e9a0:	080113bc 	.word	0x080113bc

0800e9a4 <__pow5mult>:
 800e9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9a8:	4615      	mov	r5, r2
 800e9aa:	f012 0203 	ands.w	r2, r2, #3
 800e9ae:	4606      	mov	r6, r0
 800e9b0:	460f      	mov	r7, r1
 800e9b2:	d007      	beq.n	800e9c4 <__pow5mult+0x20>
 800e9b4:	4c25      	ldr	r4, [pc, #148]	; (800ea4c <__pow5mult+0xa8>)
 800e9b6:	3a01      	subs	r2, #1
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e9be:	f7ff fe9b 	bl	800e6f8 <__multadd>
 800e9c2:	4607      	mov	r7, r0
 800e9c4:	10ad      	asrs	r5, r5, #2
 800e9c6:	d03d      	beq.n	800ea44 <__pow5mult+0xa0>
 800e9c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e9ca:	b97c      	cbnz	r4, 800e9ec <__pow5mult+0x48>
 800e9cc:	2010      	movs	r0, #16
 800e9ce:	f7ff fe29 	bl	800e624 <malloc>
 800e9d2:	4602      	mov	r2, r0
 800e9d4:	6270      	str	r0, [r6, #36]	; 0x24
 800e9d6:	b928      	cbnz	r0, 800e9e4 <__pow5mult+0x40>
 800e9d8:	4b1d      	ldr	r3, [pc, #116]	; (800ea50 <__pow5mult+0xac>)
 800e9da:	481e      	ldr	r0, [pc, #120]	; (800ea54 <__pow5mult+0xb0>)
 800e9dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e9e0:	f000 fa70 	bl	800eec4 <__assert_func>
 800e9e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e9e8:	6004      	str	r4, [r0, #0]
 800e9ea:	60c4      	str	r4, [r0, #12]
 800e9ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e9f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e9f4:	b94c      	cbnz	r4, 800ea0a <__pow5mult+0x66>
 800e9f6:	f240 2171 	movw	r1, #625	; 0x271
 800e9fa:	4630      	mov	r0, r6
 800e9fc:	f7ff ff16 	bl	800e82c <__i2b>
 800ea00:	2300      	movs	r3, #0
 800ea02:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea06:	4604      	mov	r4, r0
 800ea08:	6003      	str	r3, [r0, #0]
 800ea0a:	f04f 0900 	mov.w	r9, #0
 800ea0e:	07eb      	lsls	r3, r5, #31
 800ea10:	d50a      	bpl.n	800ea28 <__pow5mult+0x84>
 800ea12:	4639      	mov	r1, r7
 800ea14:	4622      	mov	r2, r4
 800ea16:	4630      	mov	r0, r6
 800ea18:	f7ff ff1e 	bl	800e858 <__multiply>
 800ea1c:	4639      	mov	r1, r7
 800ea1e:	4680      	mov	r8, r0
 800ea20:	4630      	mov	r0, r6
 800ea22:	f7ff fe47 	bl	800e6b4 <_Bfree>
 800ea26:	4647      	mov	r7, r8
 800ea28:	106d      	asrs	r5, r5, #1
 800ea2a:	d00b      	beq.n	800ea44 <__pow5mult+0xa0>
 800ea2c:	6820      	ldr	r0, [r4, #0]
 800ea2e:	b938      	cbnz	r0, 800ea40 <__pow5mult+0x9c>
 800ea30:	4622      	mov	r2, r4
 800ea32:	4621      	mov	r1, r4
 800ea34:	4630      	mov	r0, r6
 800ea36:	f7ff ff0f 	bl	800e858 <__multiply>
 800ea3a:	6020      	str	r0, [r4, #0]
 800ea3c:	f8c0 9000 	str.w	r9, [r0]
 800ea40:	4604      	mov	r4, r0
 800ea42:	e7e4      	b.n	800ea0e <__pow5mult+0x6a>
 800ea44:	4638      	mov	r0, r7
 800ea46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea4a:	bf00      	nop
 800ea4c:	08011510 	.word	0x08011510
 800ea50:	08011335 	.word	0x08011335
 800ea54:	080113bc 	.word	0x080113bc

0800ea58 <__lshift>:
 800ea58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea5c:	460c      	mov	r4, r1
 800ea5e:	6849      	ldr	r1, [r1, #4]
 800ea60:	6923      	ldr	r3, [r4, #16]
 800ea62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ea66:	68a3      	ldr	r3, [r4, #8]
 800ea68:	4607      	mov	r7, r0
 800ea6a:	4691      	mov	r9, r2
 800ea6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea70:	f108 0601 	add.w	r6, r8, #1
 800ea74:	42b3      	cmp	r3, r6
 800ea76:	db0b      	blt.n	800ea90 <__lshift+0x38>
 800ea78:	4638      	mov	r0, r7
 800ea7a:	f7ff fddb 	bl	800e634 <_Balloc>
 800ea7e:	4605      	mov	r5, r0
 800ea80:	b948      	cbnz	r0, 800ea96 <__lshift+0x3e>
 800ea82:	4602      	mov	r2, r0
 800ea84:	4b28      	ldr	r3, [pc, #160]	; (800eb28 <__lshift+0xd0>)
 800ea86:	4829      	ldr	r0, [pc, #164]	; (800eb2c <__lshift+0xd4>)
 800ea88:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ea8c:	f000 fa1a 	bl	800eec4 <__assert_func>
 800ea90:	3101      	adds	r1, #1
 800ea92:	005b      	lsls	r3, r3, #1
 800ea94:	e7ee      	b.n	800ea74 <__lshift+0x1c>
 800ea96:	2300      	movs	r3, #0
 800ea98:	f100 0114 	add.w	r1, r0, #20
 800ea9c:	f100 0210 	add.w	r2, r0, #16
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	4553      	cmp	r3, sl
 800eaa4:	db33      	blt.n	800eb0e <__lshift+0xb6>
 800eaa6:	6920      	ldr	r0, [r4, #16]
 800eaa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eaac:	f104 0314 	add.w	r3, r4, #20
 800eab0:	f019 091f 	ands.w	r9, r9, #31
 800eab4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eab8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eabc:	d02b      	beq.n	800eb16 <__lshift+0xbe>
 800eabe:	f1c9 0e20 	rsb	lr, r9, #32
 800eac2:	468a      	mov	sl, r1
 800eac4:	2200      	movs	r2, #0
 800eac6:	6818      	ldr	r0, [r3, #0]
 800eac8:	fa00 f009 	lsl.w	r0, r0, r9
 800eacc:	4302      	orrs	r2, r0
 800eace:	f84a 2b04 	str.w	r2, [sl], #4
 800ead2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ead6:	459c      	cmp	ip, r3
 800ead8:	fa22 f20e 	lsr.w	r2, r2, lr
 800eadc:	d8f3      	bhi.n	800eac6 <__lshift+0x6e>
 800eade:	ebac 0304 	sub.w	r3, ip, r4
 800eae2:	3b15      	subs	r3, #21
 800eae4:	f023 0303 	bic.w	r3, r3, #3
 800eae8:	3304      	adds	r3, #4
 800eaea:	f104 0015 	add.w	r0, r4, #21
 800eaee:	4584      	cmp	ip, r0
 800eaf0:	bf38      	it	cc
 800eaf2:	2304      	movcc	r3, #4
 800eaf4:	50ca      	str	r2, [r1, r3]
 800eaf6:	b10a      	cbz	r2, 800eafc <__lshift+0xa4>
 800eaf8:	f108 0602 	add.w	r6, r8, #2
 800eafc:	3e01      	subs	r6, #1
 800eafe:	4638      	mov	r0, r7
 800eb00:	612e      	str	r6, [r5, #16]
 800eb02:	4621      	mov	r1, r4
 800eb04:	f7ff fdd6 	bl	800e6b4 <_Bfree>
 800eb08:	4628      	mov	r0, r5
 800eb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb0e:	f842 0f04 	str.w	r0, [r2, #4]!
 800eb12:	3301      	adds	r3, #1
 800eb14:	e7c5      	b.n	800eaa2 <__lshift+0x4a>
 800eb16:	3904      	subs	r1, #4
 800eb18:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb1c:	f841 2f04 	str.w	r2, [r1, #4]!
 800eb20:	459c      	cmp	ip, r3
 800eb22:	d8f9      	bhi.n	800eb18 <__lshift+0xc0>
 800eb24:	e7ea      	b.n	800eafc <__lshift+0xa4>
 800eb26:	bf00      	nop
 800eb28:	080113ab 	.word	0x080113ab
 800eb2c:	080113bc 	.word	0x080113bc

0800eb30 <__mcmp>:
 800eb30:	b530      	push	{r4, r5, lr}
 800eb32:	6902      	ldr	r2, [r0, #16]
 800eb34:	690c      	ldr	r4, [r1, #16]
 800eb36:	1b12      	subs	r2, r2, r4
 800eb38:	d10e      	bne.n	800eb58 <__mcmp+0x28>
 800eb3a:	f100 0314 	add.w	r3, r0, #20
 800eb3e:	3114      	adds	r1, #20
 800eb40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800eb44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800eb48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eb4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eb50:	42a5      	cmp	r5, r4
 800eb52:	d003      	beq.n	800eb5c <__mcmp+0x2c>
 800eb54:	d305      	bcc.n	800eb62 <__mcmp+0x32>
 800eb56:	2201      	movs	r2, #1
 800eb58:	4610      	mov	r0, r2
 800eb5a:	bd30      	pop	{r4, r5, pc}
 800eb5c:	4283      	cmp	r3, r0
 800eb5e:	d3f3      	bcc.n	800eb48 <__mcmp+0x18>
 800eb60:	e7fa      	b.n	800eb58 <__mcmp+0x28>
 800eb62:	f04f 32ff 	mov.w	r2, #4294967295
 800eb66:	e7f7      	b.n	800eb58 <__mcmp+0x28>

0800eb68 <__mdiff>:
 800eb68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb6c:	460c      	mov	r4, r1
 800eb6e:	4606      	mov	r6, r0
 800eb70:	4611      	mov	r1, r2
 800eb72:	4620      	mov	r0, r4
 800eb74:	4617      	mov	r7, r2
 800eb76:	f7ff ffdb 	bl	800eb30 <__mcmp>
 800eb7a:	1e05      	subs	r5, r0, #0
 800eb7c:	d110      	bne.n	800eba0 <__mdiff+0x38>
 800eb7e:	4629      	mov	r1, r5
 800eb80:	4630      	mov	r0, r6
 800eb82:	f7ff fd57 	bl	800e634 <_Balloc>
 800eb86:	b930      	cbnz	r0, 800eb96 <__mdiff+0x2e>
 800eb88:	4b39      	ldr	r3, [pc, #228]	; (800ec70 <__mdiff+0x108>)
 800eb8a:	4602      	mov	r2, r0
 800eb8c:	f240 2132 	movw	r1, #562	; 0x232
 800eb90:	4838      	ldr	r0, [pc, #224]	; (800ec74 <__mdiff+0x10c>)
 800eb92:	f000 f997 	bl	800eec4 <__assert_func>
 800eb96:	2301      	movs	r3, #1
 800eb98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eb9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eba0:	bfa4      	itt	ge
 800eba2:	463b      	movge	r3, r7
 800eba4:	4627      	movge	r7, r4
 800eba6:	4630      	mov	r0, r6
 800eba8:	6879      	ldr	r1, [r7, #4]
 800ebaa:	bfa6      	itte	ge
 800ebac:	461c      	movge	r4, r3
 800ebae:	2500      	movge	r5, #0
 800ebb0:	2501      	movlt	r5, #1
 800ebb2:	f7ff fd3f 	bl	800e634 <_Balloc>
 800ebb6:	b920      	cbnz	r0, 800ebc2 <__mdiff+0x5a>
 800ebb8:	4b2d      	ldr	r3, [pc, #180]	; (800ec70 <__mdiff+0x108>)
 800ebba:	4602      	mov	r2, r0
 800ebbc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ebc0:	e7e6      	b.n	800eb90 <__mdiff+0x28>
 800ebc2:	693e      	ldr	r6, [r7, #16]
 800ebc4:	60c5      	str	r5, [r0, #12]
 800ebc6:	6925      	ldr	r5, [r4, #16]
 800ebc8:	f107 0114 	add.w	r1, r7, #20
 800ebcc:	f104 0914 	add.w	r9, r4, #20
 800ebd0:	f100 0e14 	add.w	lr, r0, #20
 800ebd4:	f107 0210 	add.w	r2, r7, #16
 800ebd8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ebdc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ebe0:	46f2      	mov	sl, lr
 800ebe2:	2700      	movs	r7, #0
 800ebe4:	f859 3b04 	ldr.w	r3, [r9], #4
 800ebe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ebec:	fa1f f883 	uxth.w	r8, r3
 800ebf0:	fa17 f78b 	uxtah	r7, r7, fp
 800ebf4:	0c1b      	lsrs	r3, r3, #16
 800ebf6:	eba7 0808 	sub.w	r8, r7, r8
 800ebfa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ebfe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ec02:	fa1f f888 	uxth.w	r8, r8
 800ec06:	141f      	asrs	r7, r3, #16
 800ec08:	454d      	cmp	r5, r9
 800ec0a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ec0e:	f84a 3b04 	str.w	r3, [sl], #4
 800ec12:	d8e7      	bhi.n	800ebe4 <__mdiff+0x7c>
 800ec14:	1b2b      	subs	r3, r5, r4
 800ec16:	3b15      	subs	r3, #21
 800ec18:	f023 0303 	bic.w	r3, r3, #3
 800ec1c:	3304      	adds	r3, #4
 800ec1e:	3415      	adds	r4, #21
 800ec20:	42a5      	cmp	r5, r4
 800ec22:	bf38      	it	cc
 800ec24:	2304      	movcc	r3, #4
 800ec26:	4419      	add	r1, r3
 800ec28:	4473      	add	r3, lr
 800ec2a:	469e      	mov	lr, r3
 800ec2c:	460d      	mov	r5, r1
 800ec2e:	4565      	cmp	r5, ip
 800ec30:	d30e      	bcc.n	800ec50 <__mdiff+0xe8>
 800ec32:	f10c 0203 	add.w	r2, ip, #3
 800ec36:	1a52      	subs	r2, r2, r1
 800ec38:	f022 0203 	bic.w	r2, r2, #3
 800ec3c:	3903      	subs	r1, #3
 800ec3e:	458c      	cmp	ip, r1
 800ec40:	bf38      	it	cc
 800ec42:	2200      	movcc	r2, #0
 800ec44:	441a      	add	r2, r3
 800ec46:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ec4a:	b17b      	cbz	r3, 800ec6c <__mdiff+0x104>
 800ec4c:	6106      	str	r6, [r0, #16]
 800ec4e:	e7a5      	b.n	800eb9c <__mdiff+0x34>
 800ec50:	f855 8b04 	ldr.w	r8, [r5], #4
 800ec54:	fa17 f488 	uxtah	r4, r7, r8
 800ec58:	1422      	asrs	r2, r4, #16
 800ec5a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ec5e:	b2a4      	uxth	r4, r4
 800ec60:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ec64:	f84e 4b04 	str.w	r4, [lr], #4
 800ec68:	1417      	asrs	r7, r2, #16
 800ec6a:	e7e0      	b.n	800ec2e <__mdiff+0xc6>
 800ec6c:	3e01      	subs	r6, #1
 800ec6e:	e7ea      	b.n	800ec46 <__mdiff+0xde>
 800ec70:	080113ab 	.word	0x080113ab
 800ec74:	080113bc 	.word	0x080113bc

0800ec78 <__d2b>:
 800ec78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ec7c:	4689      	mov	r9, r1
 800ec7e:	2101      	movs	r1, #1
 800ec80:	ec57 6b10 	vmov	r6, r7, d0
 800ec84:	4690      	mov	r8, r2
 800ec86:	f7ff fcd5 	bl	800e634 <_Balloc>
 800ec8a:	4604      	mov	r4, r0
 800ec8c:	b930      	cbnz	r0, 800ec9c <__d2b+0x24>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	4b25      	ldr	r3, [pc, #148]	; (800ed28 <__d2b+0xb0>)
 800ec92:	4826      	ldr	r0, [pc, #152]	; (800ed2c <__d2b+0xb4>)
 800ec94:	f240 310a 	movw	r1, #778	; 0x30a
 800ec98:	f000 f914 	bl	800eec4 <__assert_func>
 800ec9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eca0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eca4:	bb35      	cbnz	r5, 800ecf4 <__d2b+0x7c>
 800eca6:	2e00      	cmp	r6, #0
 800eca8:	9301      	str	r3, [sp, #4]
 800ecaa:	d028      	beq.n	800ecfe <__d2b+0x86>
 800ecac:	4668      	mov	r0, sp
 800ecae:	9600      	str	r6, [sp, #0]
 800ecb0:	f7ff fd8c 	bl	800e7cc <__lo0bits>
 800ecb4:	9900      	ldr	r1, [sp, #0]
 800ecb6:	b300      	cbz	r0, 800ecfa <__d2b+0x82>
 800ecb8:	9a01      	ldr	r2, [sp, #4]
 800ecba:	f1c0 0320 	rsb	r3, r0, #32
 800ecbe:	fa02 f303 	lsl.w	r3, r2, r3
 800ecc2:	430b      	orrs	r3, r1
 800ecc4:	40c2      	lsrs	r2, r0
 800ecc6:	6163      	str	r3, [r4, #20]
 800ecc8:	9201      	str	r2, [sp, #4]
 800ecca:	9b01      	ldr	r3, [sp, #4]
 800eccc:	61a3      	str	r3, [r4, #24]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	bf14      	ite	ne
 800ecd2:	2202      	movne	r2, #2
 800ecd4:	2201      	moveq	r2, #1
 800ecd6:	6122      	str	r2, [r4, #16]
 800ecd8:	b1d5      	cbz	r5, 800ed10 <__d2b+0x98>
 800ecda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ecde:	4405      	add	r5, r0
 800ece0:	f8c9 5000 	str.w	r5, [r9]
 800ece4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ece8:	f8c8 0000 	str.w	r0, [r8]
 800ecec:	4620      	mov	r0, r4
 800ecee:	b003      	add	sp, #12
 800ecf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ecf8:	e7d5      	b.n	800eca6 <__d2b+0x2e>
 800ecfa:	6161      	str	r1, [r4, #20]
 800ecfc:	e7e5      	b.n	800ecca <__d2b+0x52>
 800ecfe:	a801      	add	r0, sp, #4
 800ed00:	f7ff fd64 	bl	800e7cc <__lo0bits>
 800ed04:	9b01      	ldr	r3, [sp, #4]
 800ed06:	6163      	str	r3, [r4, #20]
 800ed08:	2201      	movs	r2, #1
 800ed0a:	6122      	str	r2, [r4, #16]
 800ed0c:	3020      	adds	r0, #32
 800ed0e:	e7e3      	b.n	800ecd8 <__d2b+0x60>
 800ed10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ed14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ed18:	f8c9 0000 	str.w	r0, [r9]
 800ed1c:	6918      	ldr	r0, [r3, #16]
 800ed1e:	f7ff fd35 	bl	800e78c <__hi0bits>
 800ed22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ed26:	e7df      	b.n	800ece8 <__d2b+0x70>
 800ed28:	080113ab 	.word	0x080113ab
 800ed2c:	080113bc 	.word	0x080113bc

0800ed30 <_calloc_r>:
 800ed30:	b513      	push	{r0, r1, r4, lr}
 800ed32:	434a      	muls	r2, r1
 800ed34:	4611      	mov	r1, r2
 800ed36:	9201      	str	r2, [sp, #4]
 800ed38:	f000 f85a 	bl	800edf0 <_malloc_r>
 800ed3c:	4604      	mov	r4, r0
 800ed3e:	b118      	cbz	r0, 800ed48 <_calloc_r+0x18>
 800ed40:	9a01      	ldr	r2, [sp, #4]
 800ed42:	2100      	movs	r1, #0
 800ed44:	f7fe fa10 	bl	800d168 <memset>
 800ed48:	4620      	mov	r0, r4
 800ed4a:	b002      	add	sp, #8
 800ed4c:	bd10      	pop	{r4, pc}
	...

0800ed50 <_free_r>:
 800ed50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed52:	2900      	cmp	r1, #0
 800ed54:	d048      	beq.n	800ede8 <_free_r+0x98>
 800ed56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed5a:	9001      	str	r0, [sp, #4]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f1a1 0404 	sub.w	r4, r1, #4
 800ed62:	bfb8      	it	lt
 800ed64:	18e4      	addlt	r4, r4, r3
 800ed66:	f000 f8ef 	bl	800ef48 <__malloc_lock>
 800ed6a:	4a20      	ldr	r2, [pc, #128]	; (800edec <_free_r+0x9c>)
 800ed6c:	9801      	ldr	r0, [sp, #4]
 800ed6e:	6813      	ldr	r3, [r2, #0]
 800ed70:	4615      	mov	r5, r2
 800ed72:	b933      	cbnz	r3, 800ed82 <_free_r+0x32>
 800ed74:	6063      	str	r3, [r4, #4]
 800ed76:	6014      	str	r4, [r2, #0]
 800ed78:	b003      	add	sp, #12
 800ed7a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed7e:	f000 b8e9 	b.w	800ef54 <__malloc_unlock>
 800ed82:	42a3      	cmp	r3, r4
 800ed84:	d90b      	bls.n	800ed9e <_free_r+0x4e>
 800ed86:	6821      	ldr	r1, [r4, #0]
 800ed88:	1862      	adds	r2, r4, r1
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	bf04      	itt	eq
 800ed8e:	681a      	ldreq	r2, [r3, #0]
 800ed90:	685b      	ldreq	r3, [r3, #4]
 800ed92:	6063      	str	r3, [r4, #4]
 800ed94:	bf04      	itt	eq
 800ed96:	1852      	addeq	r2, r2, r1
 800ed98:	6022      	streq	r2, [r4, #0]
 800ed9a:	602c      	str	r4, [r5, #0]
 800ed9c:	e7ec      	b.n	800ed78 <_free_r+0x28>
 800ed9e:	461a      	mov	r2, r3
 800eda0:	685b      	ldr	r3, [r3, #4]
 800eda2:	b10b      	cbz	r3, 800eda8 <_free_r+0x58>
 800eda4:	42a3      	cmp	r3, r4
 800eda6:	d9fa      	bls.n	800ed9e <_free_r+0x4e>
 800eda8:	6811      	ldr	r1, [r2, #0]
 800edaa:	1855      	adds	r5, r2, r1
 800edac:	42a5      	cmp	r5, r4
 800edae:	d10b      	bne.n	800edc8 <_free_r+0x78>
 800edb0:	6824      	ldr	r4, [r4, #0]
 800edb2:	4421      	add	r1, r4
 800edb4:	1854      	adds	r4, r2, r1
 800edb6:	42a3      	cmp	r3, r4
 800edb8:	6011      	str	r1, [r2, #0]
 800edba:	d1dd      	bne.n	800ed78 <_free_r+0x28>
 800edbc:	681c      	ldr	r4, [r3, #0]
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	6053      	str	r3, [r2, #4]
 800edc2:	4421      	add	r1, r4
 800edc4:	6011      	str	r1, [r2, #0]
 800edc6:	e7d7      	b.n	800ed78 <_free_r+0x28>
 800edc8:	d902      	bls.n	800edd0 <_free_r+0x80>
 800edca:	230c      	movs	r3, #12
 800edcc:	6003      	str	r3, [r0, #0]
 800edce:	e7d3      	b.n	800ed78 <_free_r+0x28>
 800edd0:	6825      	ldr	r5, [r4, #0]
 800edd2:	1961      	adds	r1, r4, r5
 800edd4:	428b      	cmp	r3, r1
 800edd6:	bf04      	itt	eq
 800edd8:	6819      	ldreq	r1, [r3, #0]
 800edda:	685b      	ldreq	r3, [r3, #4]
 800eddc:	6063      	str	r3, [r4, #4]
 800edde:	bf04      	itt	eq
 800ede0:	1949      	addeq	r1, r1, r5
 800ede2:	6021      	streq	r1, [r4, #0]
 800ede4:	6054      	str	r4, [r2, #4]
 800ede6:	e7c7      	b.n	800ed78 <_free_r+0x28>
 800ede8:	b003      	add	sp, #12
 800edea:	bd30      	pop	{r4, r5, pc}
 800edec:	24000cbc 	.word	0x24000cbc

0800edf0 <_malloc_r>:
 800edf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edf2:	1ccd      	adds	r5, r1, #3
 800edf4:	f025 0503 	bic.w	r5, r5, #3
 800edf8:	3508      	adds	r5, #8
 800edfa:	2d0c      	cmp	r5, #12
 800edfc:	bf38      	it	cc
 800edfe:	250c      	movcc	r5, #12
 800ee00:	2d00      	cmp	r5, #0
 800ee02:	4606      	mov	r6, r0
 800ee04:	db01      	blt.n	800ee0a <_malloc_r+0x1a>
 800ee06:	42a9      	cmp	r1, r5
 800ee08:	d903      	bls.n	800ee12 <_malloc_r+0x22>
 800ee0a:	230c      	movs	r3, #12
 800ee0c:	6033      	str	r3, [r6, #0]
 800ee0e:	2000      	movs	r0, #0
 800ee10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee12:	f000 f899 	bl	800ef48 <__malloc_lock>
 800ee16:	4921      	ldr	r1, [pc, #132]	; (800ee9c <_malloc_r+0xac>)
 800ee18:	680a      	ldr	r2, [r1, #0]
 800ee1a:	4614      	mov	r4, r2
 800ee1c:	b99c      	cbnz	r4, 800ee46 <_malloc_r+0x56>
 800ee1e:	4f20      	ldr	r7, [pc, #128]	; (800eea0 <_malloc_r+0xb0>)
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	b923      	cbnz	r3, 800ee2e <_malloc_r+0x3e>
 800ee24:	4621      	mov	r1, r4
 800ee26:	4630      	mov	r0, r6
 800ee28:	f000 f83c 	bl	800eea4 <_sbrk_r>
 800ee2c:	6038      	str	r0, [r7, #0]
 800ee2e:	4629      	mov	r1, r5
 800ee30:	4630      	mov	r0, r6
 800ee32:	f000 f837 	bl	800eea4 <_sbrk_r>
 800ee36:	1c43      	adds	r3, r0, #1
 800ee38:	d123      	bne.n	800ee82 <_malloc_r+0x92>
 800ee3a:	230c      	movs	r3, #12
 800ee3c:	6033      	str	r3, [r6, #0]
 800ee3e:	4630      	mov	r0, r6
 800ee40:	f000 f888 	bl	800ef54 <__malloc_unlock>
 800ee44:	e7e3      	b.n	800ee0e <_malloc_r+0x1e>
 800ee46:	6823      	ldr	r3, [r4, #0]
 800ee48:	1b5b      	subs	r3, r3, r5
 800ee4a:	d417      	bmi.n	800ee7c <_malloc_r+0x8c>
 800ee4c:	2b0b      	cmp	r3, #11
 800ee4e:	d903      	bls.n	800ee58 <_malloc_r+0x68>
 800ee50:	6023      	str	r3, [r4, #0]
 800ee52:	441c      	add	r4, r3
 800ee54:	6025      	str	r5, [r4, #0]
 800ee56:	e004      	b.n	800ee62 <_malloc_r+0x72>
 800ee58:	6863      	ldr	r3, [r4, #4]
 800ee5a:	42a2      	cmp	r2, r4
 800ee5c:	bf0c      	ite	eq
 800ee5e:	600b      	streq	r3, [r1, #0]
 800ee60:	6053      	strne	r3, [r2, #4]
 800ee62:	4630      	mov	r0, r6
 800ee64:	f000 f876 	bl	800ef54 <__malloc_unlock>
 800ee68:	f104 000b 	add.w	r0, r4, #11
 800ee6c:	1d23      	adds	r3, r4, #4
 800ee6e:	f020 0007 	bic.w	r0, r0, #7
 800ee72:	1ac2      	subs	r2, r0, r3
 800ee74:	d0cc      	beq.n	800ee10 <_malloc_r+0x20>
 800ee76:	1a1b      	subs	r3, r3, r0
 800ee78:	50a3      	str	r3, [r4, r2]
 800ee7a:	e7c9      	b.n	800ee10 <_malloc_r+0x20>
 800ee7c:	4622      	mov	r2, r4
 800ee7e:	6864      	ldr	r4, [r4, #4]
 800ee80:	e7cc      	b.n	800ee1c <_malloc_r+0x2c>
 800ee82:	1cc4      	adds	r4, r0, #3
 800ee84:	f024 0403 	bic.w	r4, r4, #3
 800ee88:	42a0      	cmp	r0, r4
 800ee8a:	d0e3      	beq.n	800ee54 <_malloc_r+0x64>
 800ee8c:	1a21      	subs	r1, r4, r0
 800ee8e:	4630      	mov	r0, r6
 800ee90:	f000 f808 	bl	800eea4 <_sbrk_r>
 800ee94:	3001      	adds	r0, #1
 800ee96:	d1dd      	bne.n	800ee54 <_malloc_r+0x64>
 800ee98:	e7cf      	b.n	800ee3a <_malloc_r+0x4a>
 800ee9a:	bf00      	nop
 800ee9c:	24000cbc 	.word	0x24000cbc
 800eea0:	24000cc0 	.word	0x24000cc0

0800eea4 <_sbrk_r>:
 800eea4:	b538      	push	{r3, r4, r5, lr}
 800eea6:	4d06      	ldr	r5, [pc, #24]	; (800eec0 <_sbrk_r+0x1c>)
 800eea8:	2300      	movs	r3, #0
 800eeaa:	4604      	mov	r4, r0
 800eeac:	4608      	mov	r0, r1
 800eeae:	602b      	str	r3, [r5, #0]
 800eeb0:	f7f5 f828 	bl	8003f04 <_sbrk>
 800eeb4:	1c43      	adds	r3, r0, #1
 800eeb6:	d102      	bne.n	800eebe <_sbrk_r+0x1a>
 800eeb8:	682b      	ldr	r3, [r5, #0]
 800eeba:	b103      	cbz	r3, 800eebe <_sbrk_r+0x1a>
 800eebc:	6023      	str	r3, [r4, #0]
 800eebe:	bd38      	pop	{r3, r4, r5, pc}
 800eec0:	24000cc8 	.word	0x24000cc8

0800eec4 <__assert_func>:
 800eec4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eec6:	4614      	mov	r4, r2
 800eec8:	461a      	mov	r2, r3
 800eeca:	4b09      	ldr	r3, [pc, #36]	; (800eef0 <__assert_func+0x2c>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4605      	mov	r5, r0
 800eed0:	68d8      	ldr	r0, [r3, #12]
 800eed2:	b14c      	cbz	r4, 800eee8 <__assert_func+0x24>
 800eed4:	4b07      	ldr	r3, [pc, #28]	; (800eef4 <__assert_func+0x30>)
 800eed6:	9100      	str	r1, [sp, #0]
 800eed8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eedc:	4906      	ldr	r1, [pc, #24]	; (800eef8 <__assert_func+0x34>)
 800eede:	462b      	mov	r3, r5
 800eee0:	f000 f80e 	bl	800ef00 <fiprintf>
 800eee4:	f000 fa64 	bl	800f3b0 <abort>
 800eee8:	4b04      	ldr	r3, [pc, #16]	; (800eefc <__assert_func+0x38>)
 800eeea:	461c      	mov	r4, r3
 800eeec:	e7f3      	b.n	800eed6 <__assert_func+0x12>
 800eeee:	bf00      	nop
 800eef0:	24000024 	.word	0x24000024
 800eef4:	0801151c 	.word	0x0801151c
 800eef8:	08011529 	.word	0x08011529
 800eefc:	08011557 	.word	0x08011557

0800ef00 <fiprintf>:
 800ef00:	b40e      	push	{r1, r2, r3}
 800ef02:	b503      	push	{r0, r1, lr}
 800ef04:	4601      	mov	r1, r0
 800ef06:	ab03      	add	r3, sp, #12
 800ef08:	4805      	ldr	r0, [pc, #20]	; (800ef20 <fiprintf+0x20>)
 800ef0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef0e:	6800      	ldr	r0, [r0, #0]
 800ef10:	9301      	str	r3, [sp, #4]
 800ef12:	f000 f84f 	bl	800efb4 <_vfiprintf_r>
 800ef16:	b002      	add	sp, #8
 800ef18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef1c:	b003      	add	sp, #12
 800ef1e:	4770      	bx	lr
 800ef20:	24000024 	.word	0x24000024

0800ef24 <__ascii_mbtowc>:
 800ef24:	b082      	sub	sp, #8
 800ef26:	b901      	cbnz	r1, 800ef2a <__ascii_mbtowc+0x6>
 800ef28:	a901      	add	r1, sp, #4
 800ef2a:	b142      	cbz	r2, 800ef3e <__ascii_mbtowc+0x1a>
 800ef2c:	b14b      	cbz	r3, 800ef42 <__ascii_mbtowc+0x1e>
 800ef2e:	7813      	ldrb	r3, [r2, #0]
 800ef30:	600b      	str	r3, [r1, #0]
 800ef32:	7812      	ldrb	r2, [r2, #0]
 800ef34:	1e10      	subs	r0, r2, #0
 800ef36:	bf18      	it	ne
 800ef38:	2001      	movne	r0, #1
 800ef3a:	b002      	add	sp, #8
 800ef3c:	4770      	bx	lr
 800ef3e:	4610      	mov	r0, r2
 800ef40:	e7fb      	b.n	800ef3a <__ascii_mbtowc+0x16>
 800ef42:	f06f 0001 	mvn.w	r0, #1
 800ef46:	e7f8      	b.n	800ef3a <__ascii_mbtowc+0x16>

0800ef48 <__malloc_lock>:
 800ef48:	4801      	ldr	r0, [pc, #4]	; (800ef50 <__malloc_lock+0x8>)
 800ef4a:	f000 bbf1 	b.w	800f730 <__retarget_lock_acquire_recursive>
 800ef4e:	bf00      	nop
 800ef50:	24000cd0 	.word	0x24000cd0

0800ef54 <__malloc_unlock>:
 800ef54:	4801      	ldr	r0, [pc, #4]	; (800ef5c <__malloc_unlock+0x8>)
 800ef56:	f000 bbec 	b.w	800f732 <__retarget_lock_release_recursive>
 800ef5a:	bf00      	nop
 800ef5c:	24000cd0 	.word	0x24000cd0

0800ef60 <__sfputc_r>:
 800ef60:	6893      	ldr	r3, [r2, #8]
 800ef62:	3b01      	subs	r3, #1
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	b410      	push	{r4}
 800ef68:	6093      	str	r3, [r2, #8]
 800ef6a:	da08      	bge.n	800ef7e <__sfputc_r+0x1e>
 800ef6c:	6994      	ldr	r4, [r2, #24]
 800ef6e:	42a3      	cmp	r3, r4
 800ef70:	db01      	blt.n	800ef76 <__sfputc_r+0x16>
 800ef72:	290a      	cmp	r1, #10
 800ef74:	d103      	bne.n	800ef7e <__sfputc_r+0x1e>
 800ef76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef7a:	f000 b94b 	b.w	800f214 <__swbuf_r>
 800ef7e:	6813      	ldr	r3, [r2, #0]
 800ef80:	1c58      	adds	r0, r3, #1
 800ef82:	6010      	str	r0, [r2, #0]
 800ef84:	7019      	strb	r1, [r3, #0]
 800ef86:	4608      	mov	r0, r1
 800ef88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef8c:	4770      	bx	lr

0800ef8e <__sfputs_r>:
 800ef8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef90:	4606      	mov	r6, r0
 800ef92:	460f      	mov	r7, r1
 800ef94:	4614      	mov	r4, r2
 800ef96:	18d5      	adds	r5, r2, r3
 800ef98:	42ac      	cmp	r4, r5
 800ef9a:	d101      	bne.n	800efa0 <__sfputs_r+0x12>
 800ef9c:	2000      	movs	r0, #0
 800ef9e:	e007      	b.n	800efb0 <__sfputs_r+0x22>
 800efa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efa4:	463a      	mov	r2, r7
 800efa6:	4630      	mov	r0, r6
 800efa8:	f7ff ffda 	bl	800ef60 <__sfputc_r>
 800efac:	1c43      	adds	r3, r0, #1
 800efae:	d1f3      	bne.n	800ef98 <__sfputs_r+0xa>
 800efb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800efb4 <_vfiprintf_r>:
 800efb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb8:	460d      	mov	r5, r1
 800efba:	b09d      	sub	sp, #116	; 0x74
 800efbc:	4614      	mov	r4, r2
 800efbe:	4698      	mov	r8, r3
 800efc0:	4606      	mov	r6, r0
 800efc2:	b118      	cbz	r0, 800efcc <_vfiprintf_r+0x18>
 800efc4:	6983      	ldr	r3, [r0, #24]
 800efc6:	b90b      	cbnz	r3, 800efcc <_vfiprintf_r+0x18>
 800efc8:	f000 fb14 	bl	800f5f4 <__sinit>
 800efcc:	4b89      	ldr	r3, [pc, #548]	; (800f1f4 <_vfiprintf_r+0x240>)
 800efce:	429d      	cmp	r5, r3
 800efd0:	d11b      	bne.n	800f00a <_vfiprintf_r+0x56>
 800efd2:	6875      	ldr	r5, [r6, #4]
 800efd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efd6:	07d9      	lsls	r1, r3, #31
 800efd8:	d405      	bmi.n	800efe6 <_vfiprintf_r+0x32>
 800efda:	89ab      	ldrh	r3, [r5, #12]
 800efdc:	059a      	lsls	r2, r3, #22
 800efde:	d402      	bmi.n	800efe6 <_vfiprintf_r+0x32>
 800efe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efe2:	f000 fba5 	bl	800f730 <__retarget_lock_acquire_recursive>
 800efe6:	89ab      	ldrh	r3, [r5, #12]
 800efe8:	071b      	lsls	r3, r3, #28
 800efea:	d501      	bpl.n	800eff0 <_vfiprintf_r+0x3c>
 800efec:	692b      	ldr	r3, [r5, #16]
 800efee:	b9eb      	cbnz	r3, 800f02c <_vfiprintf_r+0x78>
 800eff0:	4629      	mov	r1, r5
 800eff2:	4630      	mov	r0, r6
 800eff4:	f000 f96e 	bl	800f2d4 <__swsetup_r>
 800eff8:	b1c0      	cbz	r0, 800f02c <_vfiprintf_r+0x78>
 800effa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800effc:	07dc      	lsls	r4, r3, #31
 800effe:	d50e      	bpl.n	800f01e <_vfiprintf_r+0x6a>
 800f000:	f04f 30ff 	mov.w	r0, #4294967295
 800f004:	b01d      	add	sp, #116	; 0x74
 800f006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f00a:	4b7b      	ldr	r3, [pc, #492]	; (800f1f8 <_vfiprintf_r+0x244>)
 800f00c:	429d      	cmp	r5, r3
 800f00e:	d101      	bne.n	800f014 <_vfiprintf_r+0x60>
 800f010:	68b5      	ldr	r5, [r6, #8]
 800f012:	e7df      	b.n	800efd4 <_vfiprintf_r+0x20>
 800f014:	4b79      	ldr	r3, [pc, #484]	; (800f1fc <_vfiprintf_r+0x248>)
 800f016:	429d      	cmp	r5, r3
 800f018:	bf08      	it	eq
 800f01a:	68f5      	ldreq	r5, [r6, #12]
 800f01c:	e7da      	b.n	800efd4 <_vfiprintf_r+0x20>
 800f01e:	89ab      	ldrh	r3, [r5, #12]
 800f020:	0598      	lsls	r0, r3, #22
 800f022:	d4ed      	bmi.n	800f000 <_vfiprintf_r+0x4c>
 800f024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f026:	f000 fb84 	bl	800f732 <__retarget_lock_release_recursive>
 800f02a:	e7e9      	b.n	800f000 <_vfiprintf_r+0x4c>
 800f02c:	2300      	movs	r3, #0
 800f02e:	9309      	str	r3, [sp, #36]	; 0x24
 800f030:	2320      	movs	r3, #32
 800f032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f036:	f8cd 800c 	str.w	r8, [sp, #12]
 800f03a:	2330      	movs	r3, #48	; 0x30
 800f03c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800f200 <_vfiprintf_r+0x24c>
 800f040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f044:	f04f 0901 	mov.w	r9, #1
 800f048:	4623      	mov	r3, r4
 800f04a:	469a      	mov	sl, r3
 800f04c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f050:	b10a      	cbz	r2, 800f056 <_vfiprintf_r+0xa2>
 800f052:	2a25      	cmp	r2, #37	; 0x25
 800f054:	d1f9      	bne.n	800f04a <_vfiprintf_r+0x96>
 800f056:	ebba 0b04 	subs.w	fp, sl, r4
 800f05a:	d00b      	beq.n	800f074 <_vfiprintf_r+0xc0>
 800f05c:	465b      	mov	r3, fp
 800f05e:	4622      	mov	r2, r4
 800f060:	4629      	mov	r1, r5
 800f062:	4630      	mov	r0, r6
 800f064:	f7ff ff93 	bl	800ef8e <__sfputs_r>
 800f068:	3001      	adds	r0, #1
 800f06a:	f000 80aa 	beq.w	800f1c2 <_vfiprintf_r+0x20e>
 800f06e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f070:	445a      	add	r2, fp
 800f072:	9209      	str	r2, [sp, #36]	; 0x24
 800f074:	f89a 3000 	ldrb.w	r3, [sl]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	f000 80a2 	beq.w	800f1c2 <_vfiprintf_r+0x20e>
 800f07e:	2300      	movs	r3, #0
 800f080:	f04f 32ff 	mov.w	r2, #4294967295
 800f084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f088:	f10a 0a01 	add.w	sl, sl, #1
 800f08c:	9304      	str	r3, [sp, #16]
 800f08e:	9307      	str	r3, [sp, #28]
 800f090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f094:	931a      	str	r3, [sp, #104]	; 0x68
 800f096:	4654      	mov	r4, sl
 800f098:	2205      	movs	r2, #5
 800f09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f09e:	4858      	ldr	r0, [pc, #352]	; (800f200 <_vfiprintf_r+0x24c>)
 800f0a0:	f7f1 f926 	bl	80002f0 <memchr>
 800f0a4:	9a04      	ldr	r2, [sp, #16]
 800f0a6:	b9d8      	cbnz	r0, 800f0e0 <_vfiprintf_r+0x12c>
 800f0a8:	06d1      	lsls	r1, r2, #27
 800f0aa:	bf44      	itt	mi
 800f0ac:	2320      	movmi	r3, #32
 800f0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0b2:	0713      	lsls	r3, r2, #28
 800f0b4:	bf44      	itt	mi
 800f0b6:	232b      	movmi	r3, #43	; 0x2b
 800f0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0bc:	f89a 3000 	ldrb.w	r3, [sl]
 800f0c0:	2b2a      	cmp	r3, #42	; 0x2a
 800f0c2:	d015      	beq.n	800f0f0 <_vfiprintf_r+0x13c>
 800f0c4:	9a07      	ldr	r2, [sp, #28]
 800f0c6:	4654      	mov	r4, sl
 800f0c8:	2000      	movs	r0, #0
 800f0ca:	f04f 0c0a 	mov.w	ip, #10
 800f0ce:	4621      	mov	r1, r4
 800f0d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0d4:	3b30      	subs	r3, #48	; 0x30
 800f0d6:	2b09      	cmp	r3, #9
 800f0d8:	d94e      	bls.n	800f178 <_vfiprintf_r+0x1c4>
 800f0da:	b1b0      	cbz	r0, 800f10a <_vfiprintf_r+0x156>
 800f0dc:	9207      	str	r2, [sp, #28]
 800f0de:	e014      	b.n	800f10a <_vfiprintf_r+0x156>
 800f0e0:	eba0 0308 	sub.w	r3, r0, r8
 800f0e4:	fa09 f303 	lsl.w	r3, r9, r3
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	9304      	str	r3, [sp, #16]
 800f0ec:	46a2      	mov	sl, r4
 800f0ee:	e7d2      	b.n	800f096 <_vfiprintf_r+0xe2>
 800f0f0:	9b03      	ldr	r3, [sp, #12]
 800f0f2:	1d19      	adds	r1, r3, #4
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	9103      	str	r1, [sp, #12]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	bfbb      	ittet	lt
 800f0fc:	425b      	neglt	r3, r3
 800f0fe:	f042 0202 	orrlt.w	r2, r2, #2
 800f102:	9307      	strge	r3, [sp, #28]
 800f104:	9307      	strlt	r3, [sp, #28]
 800f106:	bfb8      	it	lt
 800f108:	9204      	strlt	r2, [sp, #16]
 800f10a:	7823      	ldrb	r3, [r4, #0]
 800f10c:	2b2e      	cmp	r3, #46	; 0x2e
 800f10e:	d10c      	bne.n	800f12a <_vfiprintf_r+0x176>
 800f110:	7863      	ldrb	r3, [r4, #1]
 800f112:	2b2a      	cmp	r3, #42	; 0x2a
 800f114:	d135      	bne.n	800f182 <_vfiprintf_r+0x1ce>
 800f116:	9b03      	ldr	r3, [sp, #12]
 800f118:	1d1a      	adds	r2, r3, #4
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	9203      	str	r2, [sp, #12]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	bfb8      	it	lt
 800f122:	f04f 33ff 	movlt.w	r3, #4294967295
 800f126:	3402      	adds	r4, #2
 800f128:	9305      	str	r3, [sp, #20]
 800f12a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800f210 <_vfiprintf_r+0x25c>
 800f12e:	7821      	ldrb	r1, [r4, #0]
 800f130:	2203      	movs	r2, #3
 800f132:	4650      	mov	r0, sl
 800f134:	f7f1 f8dc 	bl	80002f0 <memchr>
 800f138:	b140      	cbz	r0, 800f14c <_vfiprintf_r+0x198>
 800f13a:	2340      	movs	r3, #64	; 0x40
 800f13c:	eba0 000a 	sub.w	r0, r0, sl
 800f140:	fa03 f000 	lsl.w	r0, r3, r0
 800f144:	9b04      	ldr	r3, [sp, #16]
 800f146:	4303      	orrs	r3, r0
 800f148:	3401      	adds	r4, #1
 800f14a:	9304      	str	r3, [sp, #16]
 800f14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f150:	482c      	ldr	r0, [pc, #176]	; (800f204 <_vfiprintf_r+0x250>)
 800f152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f156:	2206      	movs	r2, #6
 800f158:	f7f1 f8ca 	bl	80002f0 <memchr>
 800f15c:	2800      	cmp	r0, #0
 800f15e:	d03f      	beq.n	800f1e0 <_vfiprintf_r+0x22c>
 800f160:	4b29      	ldr	r3, [pc, #164]	; (800f208 <_vfiprintf_r+0x254>)
 800f162:	bb1b      	cbnz	r3, 800f1ac <_vfiprintf_r+0x1f8>
 800f164:	9b03      	ldr	r3, [sp, #12]
 800f166:	3307      	adds	r3, #7
 800f168:	f023 0307 	bic.w	r3, r3, #7
 800f16c:	3308      	adds	r3, #8
 800f16e:	9303      	str	r3, [sp, #12]
 800f170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f172:	443b      	add	r3, r7
 800f174:	9309      	str	r3, [sp, #36]	; 0x24
 800f176:	e767      	b.n	800f048 <_vfiprintf_r+0x94>
 800f178:	fb0c 3202 	mla	r2, ip, r2, r3
 800f17c:	460c      	mov	r4, r1
 800f17e:	2001      	movs	r0, #1
 800f180:	e7a5      	b.n	800f0ce <_vfiprintf_r+0x11a>
 800f182:	2300      	movs	r3, #0
 800f184:	3401      	adds	r4, #1
 800f186:	9305      	str	r3, [sp, #20]
 800f188:	4619      	mov	r1, r3
 800f18a:	f04f 0c0a 	mov.w	ip, #10
 800f18e:	4620      	mov	r0, r4
 800f190:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f194:	3a30      	subs	r2, #48	; 0x30
 800f196:	2a09      	cmp	r2, #9
 800f198:	d903      	bls.n	800f1a2 <_vfiprintf_r+0x1ee>
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d0c5      	beq.n	800f12a <_vfiprintf_r+0x176>
 800f19e:	9105      	str	r1, [sp, #20]
 800f1a0:	e7c3      	b.n	800f12a <_vfiprintf_r+0x176>
 800f1a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	e7f0      	b.n	800f18e <_vfiprintf_r+0x1da>
 800f1ac:	ab03      	add	r3, sp, #12
 800f1ae:	9300      	str	r3, [sp, #0]
 800f1b0:	462a      	mov	r2, r5
 800f1b2:	4b16      	ldr	r3, [pc, #88]	; (800f20c <_vfiprintf_r+0x258>)
 800f1b4:	a904      	add	r1, sp, #16
 800f1b6:	4630      	mov	r0, r6
 800f1b8:	f7fe f86e 	bl	800d298 <_printf_float>
 800f1bc:	4607      	mov	r7, r0
 800f1be:	1c78      	adds	r0, r7, #1
 800f1c0:	d1d6      	bne.n	800f170 <_vfiprintf_r+0x1bc>
 800f1c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f1c4:	07d9      	lsls	r1, r3, #31
 800f1c6:	d405      	bmi.n	800f1d4 <_vfiprintf_r+0x220>
 800f1c8:	89ab      	ldrh	r3, [r5, #12]
 800f1ca:	059a      	lsls	r2, r3, #22
 800f1cc:	d402      	bmi.n	800f1d4 <_vfiprintf_r+0x220>
 800f1ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f1d0:	f000 faaf 	bl	800f732 <__retarget_lock_release_recursive>
 800f1d4:	89ab      	ldrh	r3, [r5, #12]
 800f1d6:	065b      	lsls	r3, r3, #25
 800f1d8:	f53f af12 	bmi.w	800f000 <_vfiprintf_r+0x4c>
 800f1dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1de:	e711      	b.n	800f004 <_vfiprintf_r+0x50>
 800f1e0:	ab03      	add	r3, sp, #12
 800f1e2:	9300      	str	r3, [sp, #0]
 800f1e4:	462a      	mov	r2, r5
 800f1e6:	4b09      	ldr	r3, [pc, #36]	; (800f20c <_vfiprintf_r+0x258>)
 800f1e8:	a904      	add	r1, sp, #16
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	f7fe fae0 	bl	800d7b0 <_printf_i>
 800f1f0:	e7e4      	b.n	800f1bc <_vfiprintf_r+0x208>
 800f1f2:	bf00      	nop
 800f1f4:	08011694 	.word	0x08011694
 800f1f8:	080116b4 	.word	0x080116b4
 800f1fc:	08011674 	.word	0x08011674
 800f200:	08011562 	.word	0x08011562
 800f204:	0801156c 	.word	0x0801156c
 800f208:	0800d299 	.word	0x0800d299
 800f20c:	0800ef8f 	.word	0x0800ef8f
 800f210:	08011568 	.word	0x08011568

0800f214 <__swbuf_r>:
 800f214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f216:	460e      	mov	r6, r1
 800f218:	4614      	mov	r4, r2
 800f21a:	4605      	mov	r5, r0
 800f21c:	b118      	cbz	r0, 800f226 <__swbuf_r+0x12>
 800f21e:	6983      	ldr	r3, [r0, #24]
 800f220:	b90b      	cbnz	r3, 800f226 <__swbuf_r+0x12>
 800f222:	f000 f9e7 	bl	800f5f4 <__sinit>
 800f226:	4b21      	ldr	r3, [pc, #132]	; (800f2ac <__swbuf_r+0x98>)
 800f228:	429c      	cmp	r4, r3
 800f22a:	d12b      	bne.n	800f284 <__swbuf_r+0x70>
 800f22c:	686c      	ldr	r4, [r5, #4]
 800f22e:	69a3      	ldr	r3, [r4, #24]
 800f230:	60a3      	str	r3, [r4, #8]
 800f232:	89a3      	ldrh	r3, [r4, #12]
 800f234:	071a      	lsls	r2, r3, #28
 800f236:	d52f      	bpl.n	800f298 <__swbuf_r+0x84>
 800f238:	6923      	ldr	r3, [r4, #16]
 800f23a:	b36b      	cbz	r3, 800f298 <__swbuf_r+0x84>
 800f23c:	6923      	ldr	r3, [r4, #16]
 800f23e:	6820      	ldr	r0, [r4, #0]
 800f240:	1ac0      	subs	r0, r0, r3
 800f242:	6963      	ldr	r3, [r4, #20]
 800f244:	b2f6      	uxtb	r6, r6
 800f246:	4283      	cmp	r3, r0
 800f248:	4637      	mov	r7, r6
 800f24a:	dc04      	bgt.n	800f256 <__swbuf_r+0x42>
 800f24c:	4621      	mov	r1, r4
 800f24e:	4628      	mov	r0, r5
 800f250:	f000 f93c 	bl	800f4cc <_fflush_r>
 800f254:	bb30      	cbnz	r0, 800f2a4 <__swbuf_r+0x90>
 800f256:	68a3      	ldr	r3, [r4, #8]
 800f258:	3b01      	subs	r3, #1
 800f25a:	60a3      	str	r3, [r4, #8]
 800f25c:	6823      	ldr	r3, [r4, #0]
 800f25e:	1c5a      	adds	r2, r3, #1
 800f260:	6022      	str	r2, [r4, #0]
 800f262:	701e      	strb	r6, [r3, #0]
 800f264:	6963      	ldr	r3, [r4, #20]
 800f266:	3001      	adds	r0, #1
 800f268:	4283      	cmp	r3, r0
 800f26a:	d004      	beq.n	800f276 <__swbuf_r+0x62>
 800f26c:	89a3      	ldrh	r3, [r4, #12]
 800f26e:	07db      	lsls	r3, r3, #31
 800f270:	d506      	bpl.n	800f280 <__swbuf_r+0x6c>
 800f272:	2e0a      	cmp	r6, #10
 800f274:	d104      	bne.n	800f280 <__swbuf_r+0x6c>
 800f276:	4621      	mov	r1, r4
 800f278:	4628      	mov	r0, r5
 800f27a:	f000 f927 	bl	800f4cc <_fflush_r>
 800f27e:	b988      	cbnz	r0, 800f2a4 <__swbuf_r+0x90>
 800f280:	4638      	mov	r0, r7
 800f282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f284:	4b0a      	ldr	r3, [pc, #40]	; (800f2b0 <__swbuf_r+0x9c>)
 800f286:	429c      	cmp	r4, r3
 800f288:	d101      	bne.n	800f28e <__swbuf_r+0x7a>
 800f28a:	68ac      	ldr	r4, [r5, #8]
 800f28c:	e7cf      	b.n	800f22e <__swbuf_r+0x1a>
 800f28e:	4b09      	ldr	r3, [pc, #36]	; (800f2b4 <__swbuf_r+0xa0>)
 800f290:	429c      	cmp	r4, r3
 800f292:	bf08      	it	eq
 800f294:	68ec      	ldreq	r4, [r5, #12]
 800f296:	e7ca      	b.n	800f22e <__swbuf_r+0x1a>
 800f298:	4621      	mov	r1, r4
 800f29a:	4628      	mov	r0, r5
 800f29c:	f000 f81a 	bl	800f2d4 <__swsetup_r>
 800f2a0:	2800      	cmp	r0, #0
 800f2a2:	d0cb      	beq.n	800f23c <__swbuf_r+0x28>
 800f2a4:	f04f 37ff 	mov.w	r7, #4294967295
 800f2a8:	e7ea      	b.n	800f280 <__swbuf_r+0x6c>
 800f2aa:	bf00      	nop
 800f2ac:	08011694 	.word	0x08011694
 800f2b0:	080116b4 	.word	0x080116b4
 800f2b4:	08011674 	.word	0x08011674

0800f2b8 <__ascii_wctomb>:
 800f2b8:	b149      	cbz	r1, 800f2ce <__ascii_wctomb+0x16>
 800f2ba:	2aff      	cmp	r2, #255	; 0xff
 800f2bc:	bf85      	ittet	hi
 800f2be:	238a      	movhi	r3, #138	; 0x8a
 800f2c0:	6003      	strhi	r3, [r0, #0]
 800f2c2:	700a      	strbls	r2, [r1, #0]
 800f2c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800f2c8:	bf98      	it	ls
 800f2ca:	2001      	movls	r0, #1
 800f2cc:	4770      	bx	lr
 800f2ce:	4608      	mov	r0, r1
 800f2d0:	4770      	bx	lr
	...

0800f2d4 <__swsetup_r>:
 800f2d4:	4b32      	ldr	r3, [pc, #200]	; (800f3a0 <__swsetup_r+0xcc>)
 800f2d6:	b570      	push	{r4, r5, r6, lr}
 800f2d8:	681d      	ldr	r5, [r3, #0]
 800f2da:	4606      	mov	r6, r0
 800f2dc:	460c      	mov	r4, r1
 800f2de:	b125      	cbz	r5, 800f2ea <__swsetup_r+0x16>
 800f2e0:	69ab      	ldr	r3, [r5, #24]
 800f2e2:	b913      	cbnz	r3, 800f2ea <__swsetup_r+0x16>
 800f2e4:	4628      	mov	r0, r5
 800f2e6:	f000 f985 	bl	800f5f4 <__sinit>
 800f2ea:	4b2e      	ldr	r3, [pc, #184]	; (800f3a4 <__swsetup_r+0xd0>)
 800f2ec:	429c      	cmp	r4, r3
 800f2ee:	d10f      	bne.n	800f310 <__swsetup_r+0x3c>
 800f2f0:	686c      	ldr	r4, [r5, #4]
 800f2f2:	89a3      	ldrh	r3, [r4, #12]
 800f2f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f2f8:	0719      	lsls	r1, r3, #28
 800f2fa:	d42c      	bmi.n	800f356 <__swsetup_r+0x82>
 800f2fc:	06dd      	lsls	r5, r3, #27
 800f2fe:	d411      	bmi.n	800f324 <__swsetup_r+0x50>
 800f300:	2309      	movs	r3, #9
 800f302:	6033      	str	r3, [r6, #0]
 800f304:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f308:	81a3      	strh	r3, [r4, #12]
 800f30a:	f04f 30ff 	mov.w	r0, #4294967295
 800f30e:	e03e      	b.n	800f38e <__swsetup_r+0xba>
 800f310:	4b25      	ldr	r3, [pc, #148]	; (800f3a8 <__swsetup_r+0xd4>)
 800f312:	429c      	cmp	r4, r3
 800f314:	d101      	bne.n	800f31a <__swsetup_r+0x46>
 800f316:	68ac      	ldr	r4, [r5, #8]
 800f318:	e7eb      	b.n	800f2f2 <__swsetup_r+0x1e>
 800f31a:	4b24      	ldr	r3, [pc, #144]	; (800f3ac <__swsetup_r+0xd8>)
 800f31c:	429c      	cmp	r4, r3
 800f31e:	bf08      	it	eq
 800f320:	68ec      	ldreq	r4, [r5, #12]
 800f322:	e7e6      	b.n	800f2f2 <__swsetup_r+0x1e>
 800f324:	0758      	lsls	r0, r3, #29
 800f326:	d512      	bpl.n	800f34e <__swsetup_r+0x7a>
 800f328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f32a:	b141      	cbz	r1, 800f33e <__swsetup_r+0x6a>
 800f32c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f330:	4299      	cmp	r1, r3
 800f332:	d002      	beq.n	800f33a <__swsetup_r+0x66>
 800f334:	4630      	mov	r0, r6
 800f336:	f7ff fd0b 	bl	800ed50 <_free_r>
 800f33a:	2300      	movs	r3, #0
 800f33c:	6363      	str	r3, [r4, #52]	; 0x34
 800f33e:	89a3      	ldrh	r3, [r4, #12]
 800f340:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f344:	81a3      	strh	r3, [r4, #12]
 800f346:	2300      	movs	r3, #0
 800f348:	6063      	str	r3, [r4, #4]
 800f34a:	6923      	ldr	r3, [r4, #16]
 800f34c:	6023      	str	r3, [r4, #0]
 800f34e:	89a3      	ldrh	r3, [r4, #12]
 800f350:	f043 0308 	orr.w	r3, r3, #8
 800f354:	81a3      	strh	r3, [r4, #12]
 800f356:	6923      	ldr	r3, [r4, #16]
 800f358:	b94b      	cbnz	r3, 800f36e <__swsetup_r+0x9a>
 800f35a:	89a3      	ldrh	r3, [r4, #12]
 800f35c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f364:	d003      	beq.n	800f36e <__swsetup_r+0x9a>
 800f366:	4621      	mov	r1, r4
 800f368:	4630      	mov	r0, r6
 800f36a:	f000 fa07 	bl	800f77c <__smakebuf_r>
 800f36e:	89a0      	ldrh	r0, [r4, #12]
 800f370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f374:	f010 0301 	ands.w	r3, r0, #1
 800f378:	d00a      	beq.n	800f390 <__swsetup_r+0xbc>
 800f37a:	2300      	movs	r3, #0
 800f37c:	60a3      	str	r3, [r4, #8]
 800f37e:	6963      	ldr	r3, [r4, #20]
 800f380:	425b      	negs	r3, r3
 800f382:	61a3      	str	r3, [r4, #24]
 800f384:	6923      	ldr	r3, [r4, #16]
 800f386:	b943      	cbnz	r3, 800f39a <__swsetup_r+0xc6>
 800f388:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f38c:	d1ba      	bne.n	800f304 <__swsetup_r+0x30>
 800f38e:	bd70      	pop	{r4, r5, r6, pc}
 800f390:	0781      	lsls	r1, r0, #30
 800f392:	bf58      	it	pl
 800f394:	6963      	ldrpl	r3, [r4, #20]
 800f396:	60a3      	str	r3, [r4, #8]
 800f398:	e7f4      	b.n	800f384 <__swsetup_r+0xb0>
 800f39a:	2000      	movs	r0, #0
 800f39c:	e7f7      	b.n	800f38e <__swsetup_r+0xba>
 800f39e:	bf00      	nop
 800f3a0:	24000024 	.word	0x24000024
 800f3a4:	08011694 	.word	0x08011694
 800f3a8:	080116b4 	.word	0x080116b4
 800f3ac:	08011674 	.word	0x08011674

0800f3b0 <abort>:
 800f3b0:	b508      	push	{r3, lr}
 800f3b2:	2006      	movs	r0, #6
 800f3b4:	f000 fa4a 	bl	800f84c <raise>
 800f3b8:	2001      	movs	r0, #1
 800f3ba:	f7f4 fd2b 	bl	8003e14 <_exit>
	...

0800f3c0 <__sflush_r>:
 800f3c0:	898a      	ldrh	r2, [r1, #12]
 800f3c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3c6:	4605      	mov	r5, r0
 800f3c8:	0710      	lsls	r0, r2, #28
 800f3ca:	460c      	mov	r4, r1
 800f3cc:	d458      	bmi.n	800f480 <__sflush_r+0xc0>
 800f3ce:	684b      	ldr	r3, [r1, #4]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	dc05      	bgt.n	800f3e0 <__sflush_r+0x20>
 800f3d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	dc02      	bgt.n	800f3e0 <__sflush_r+0x20>
 800f3da:	2000      	movs	r0, #0
 800f3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f3e2:	2e00      	cmp	r6, #0
 800f3e4:	d0f9      	beq.n	800f3da <__sflush_r+0x1a>
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f3ec:	682f      	ldr	r7, [r5, #0]
 800f3ee:	602b      	str	r3, [r5, #0]
 800f3f0:	d032      	beq.n	800f458 <__sflush_r+0x98>
 800f3f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f3f4:	89a3      	ldrh	r3, [r4, #12]
 800f3f6:	075a      	lsls	r2, r3, #29
 800f3f8:	d505      	bpl.n	800f406 <__sflush_r+0x46>
 800f3fa:	6863      	ldr	r3, [r4, #4]
 800f3fc:	1ac0      	subs	r0, r0, r3
 800f3fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f400:	b10b      	cbz	r3, 800f406 <__sflush_r+0x46>
 800f402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f404:	1ac0      	subs	r0, r0, r3
 800f406:	2300      	movs	r3, #0
 800f408:	4602      	mov	r2, r0
 800f40a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f40c:	6a21      	ldr	r1, [r4, #32]
 800f40e:	4628      	mov	r0, r5
 800f410:	47b0      	blx	r6
 800f412:	1c43      	adds	r3, r0, #1
 800f414:	89a3      	ldrh	r3, [r4, #12]
 800f416:	d106      	bne.n	800f426 <__sflush_r+0x66>
 800f418:	6829      	ldr	r1, [r5, #0]
 800f41a:	291d      	cmp	r1, #29
 800f41c:	d82c      	bhi.n	800f478 <__sflush_r+0xb8>
 800f41e:	4a2a      	ldr	r2, [pc, #168]	; (800f4c8 <__sflush_r+0x108>)
 800f420:	40ca      	lsrs	r2, r1
 800f422:	07d6      	lsls	r6, r2, #31
 800f424:	d528      	bpl.n	800f478 <__sflush_r+0xb8>
 800f426:	2200      	movs	r2, #0
 800f428:	6062      	str	r2, [r4, #4]
 800f42a:	04d9      	lsls	r1, r3, #19
 800f42c:	6922      	ldr	r2, [r4, #16]
 800f42e:	6022      	str	r2, [r4, #0]
 800f430:	d504      	bpl.n	800f43c <__sflush_r+0x7c>
 800f432:	1c42      	adds	r2, r0, #1
 800f434:	d101      	bne.n	800f43a <__sflush_r+0x7a>
 800f436:	682b      	ldr	r3, [r5, #0]
 800f438:	b903      	cbnz	r3, 800f43c <__sflush_r+0x7c>
 800f43a:	6560      	str	r0, [r4, #84]	; 0x54
 800f43c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f43e:	602f      	str	r7, [r5, #0]
 800f440:	2900      	cmp	r1, #0
 800f442:	d0ca      	beq.n	800f3da <__sflush_r+0x1a>
 800f444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f448:	4299      	cmp	r1, r3
 800f44a:	d002      	beq.n	800f452 <__sflush_r+0x92>
 800f44c:	4628      	mov	r0, r5
 800f44e:	f7ff fc7f 	bl	800ed50 <_free_r>
 800f452:	2000      	movs	r0, #0
 800f454:	6360      	str	r0, [r4, #52]	; 0x34
 800f456:	e7c1      	b.n	800f3dc <__sflush_r+0x1c>
 800f458:	6a21      	ldr	r1, [r4, #32]
 800f45a:	2301      	movs	r3, #1
 800f45c:	4628      	mov	r0, r5
 800f45e:	47b0      	blx	r6
 800f460:	1c41      	adds	r1, r0, #1
 800f462:	d1c7      	bne.n	800f3f4 <__sflush_r+0x34>
 800f464:	682b      	ldr	r3, [r5, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d0c4      	beq.n	800f3f4 <__sflush_r+0x34>
 800f46a:	2b1d      	cmp	r3, #29
 800f46c:	d001      	beq.n	800f472 <__sflush_r+0xb2>
 800f46e:	2b16      	cmp	r3, #22
 800f470:	d101      	bne.n	800f476 <__sflush_r+0xb6>
 800f472:	602f      	str	r7, [r5, #0]
 800f474:	e7b1      	b.n	800f3da <__sflush_r+0x1a>
 800f476:	89a3      	ldrh	r3, [r4, #12]
 800f478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f47c:	81a3      	strh	r3, [r4, #12]
 800f47e:	e7ad      	b.n	800f3dc <__sflush_r+0x1c>
 800f480:	690f      	ldr	r7, [r1, #16]
 800f482:	2f00      	cmp	r7, #0
 800f484:	d0a9      	beq.n	800f3da <__sflush_r+0x1a>
 800f486:	0793      	lsls	r3, r2, #30
 800f488:	680e      	ldr	r6, [r1, #0]
 800f48a:	bf08      	it	eq
 800f48c:	694b      	ldreq	r3, [r1, #20]
 800f48e:	600f      	str	r7, [r1, #0]
 800f490:	bf18      	it	ne
 800f492:	2300      	movne	r3, #0
 800f494:	eba6 0807 	sub.w	r8, r6, r7
 800f498:	608b      	str	r3, [r1, #8]
 800f49a:	f1b8 0f00 	cmp.w	r8, #0
 800f49e:	dd9c      	ble.n	800f3da <__sflush_r+0x1a>
 800f4a0:	6a21      	ldr	r1, [r4, #32]
 800f4a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f4a4:	4643      	mov	r3, r8
 800f4a6:	463a      	mov	r2, r7
 800f4a8:	4628      	mov	r0, r5
 800f4aa:	47b0      	blx	r6
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	dc06      	bgt.n	800f4be <__sflush_r+0xfe>
 800f4b0:	89a3      	ldrh	r3, [r4, #12]
 800f4b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4b6:	81a3      	strh	r3, [r4, #12]
 800f4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f4bc:	e78e      	b.n	800f3dc <__sflush_r+0x1c>
 800f4be:	4407      	add	r7, r0
 800f4c0:	eba8 0800 	sub.w	r8, r8, r0
 800f4c4:	e7e9      	b.n	800f49a <__sflush_r+0xda>
 800f4c6:	bf00      	nop
 800f4c8:	20400001 	.word	0x20400001

0800f4cc <_fflush_r>:
 800f4cc:	b538      	push	{r3, r4, r5, lr}
 800f4ce:	690b      	ldr	r3, [r1, #16]
 800f4d0:	4605      	mov	r5, r0
 800f4d2:	460c      	mov	r4, r1
 800f4d4:	b913      	cbnz	r3, 800f4dc <_fflush_r+0x10>
 800f4d6:	2500      	movs	r5, #0
 800f4d8:	4628      	mov	r0, r5
 800f4da:	bd38      	pop	{r3, r4, r5, pc}
 800f4dc:	b118      	cbz	r0, 800f4e6 <_fflush_r+0x1a>
 800f4de:	6983      	ldr	r3, [r0, #24]
 800f4e0:	b90b      	cbnz	r3, 800f4e6 <_fflush_r+0x1a>
 800f4e2:	f000 f887 	bl	800f5f4 <__sinit>
 800f4e6:	4b14      	ldr	r3, [pc, #80]	; (800f538 <_fflush_r+0x6c>)
 800f4e8:	429c      	cmp	r4, r3
 800f4ea:	d11b      	bne.n	800f524 <_fflush_r+0x58>
 800f4ec:	686c      	ldr	r4, [r5, #4]
 800f4ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d0ef      	beq.n	800f4d6 <_fflush_r+0xa>
 800f4f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f4f8:	07d0      	lsls	r0, r2, #31
 800f4fa:	d404      	bmi.n	800f506 <_fflush_r+0x3a>
 800f4fc:	0599      	lsls	r1, r3, #22
 800f4fe:	d402      	bmi.n	800f506 <_fflush_r+0x3a>
 800f500:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f502:	f000 f915 	bl	800f730 <__retarget_lock_acquire_recursive>
 800f506:	4628      	mov	r0, r5
 800f508:	4621      	mov	r1, r4
 800f50a:	f7ff ff59 	bl	800f3c0 <__sflush_r>
 800f50e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f510:	07da      	lsls	r2, r3, #31
 800f512:	4605      	mov	r5, r0
 800f514:	d4e0      	bmi.n	800f4d8 <_fflush_r+0xc>
 800f516:	89a3      	ldrh	r3, [r4, #12]
 800f518:	059b      	lsls	r3, r3, #22
 800f51a:	d4dd      	bmi.n	800f4d8 <_fflush_r+0xc>
 800f51c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f51e:	f000 f908 	bl	800f732 <__retarget_lock_release_recursive>
 800f522:	e7d9      	b.n	800f4d8 <_fflush_r+0xc>
 800f524:	4b05      	ldr	r3, [pc, #20]	; (800f53c <_fflush_r+0x70>)
 800f526:	429c      	cmp	r4, r3
 800f528:	d101      	bne.n	800f52e <_fflush_r+0x62>
 800f52a:	68ac      	ldr	r4, [r5, #8]
 800f52c:	e7df      	b.n	800f4ee <_fflush_r+0x22>
 800f52e:	4b04      	ldr	r3, [pc, #16]	; (800f540 <_fflush_r+0x74>)
 800f530:	429c      	cmp	r4, r3
 800f532:	bf08      	it	eq
 800f534:	68ec      	ldreq	r4, [r5, #12]
 800f536:	e7da      	b.n	800f4ee <_fflush_r+0x22>
 800f538:	08011694 	.word	0x08011694
 800f53c:	080116b4 	.word	0x080116b4
 800f540:	08011674 	.word	0x08011674

0800f544 <std>:
 800f544:	2300      	movs	r3, #0
 800f546:	b510      	push	{r4, lr}
 800f548:	4604      	mov	r4, r0
 800f54a:	e9c0 3300 	strd	r3, r3, [r0]
 800f54e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f552:	6083      	str	r3, [r0, #8]
 800f554:	8181      	strh	r1, [r0, #12]
 800f556:	6643      	str	r3, [r0, #100]	; 0x64
 800f558:	81c2      	strh	r2, [r0, #14]
 800f55a:	6183      	str	r3, [r0, #24]
 800f55c:	4619      	mov	r1, r3
 800f55e:	2208      	movs	r2, #8
 800f560:	305c      	adds	r0, #92	; 0x5c
 800f562:	f7fd fe01 	bl	800d168 <memset>
 800f566:	4b05      	ldr	r3, [pc, #20]	; (800f57c <std+0x38>)
 800f568:	6263      	str	r3, [r4, #36]	; 0x24
 800f56a:	4b05      	ldr	r3, [pc, #20]	; (800f580 <std+0x3c>)
 800f56c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f56e:	4b05      	ldr	r3, [pc, #20]	; (800f584 <std+0x40>)
 800f570:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f572:	4b05      	ldr	r3, [pc, #20]	; (800f588 <std+0x44>)
 800f574:	6224      	str	r4, [r4, #32]
 800f576:	6323      	str	r3, [r4, #48]	; 0x30
 800f578:	bd10      	pop	{r4, pc}
 800f57a:	bf00      	nop
 800f57c:	0800f885 	.word	0x0800f885
 800f580:	0800f8a7 	.word	0x0800f8a7
 800f584:	0800f8df 	.word	0x0800f8df
 800f588:	0800f903 	.word	0x0800f903

0800f58c <_cleanup_r>:
 800f58c:	4901      	ldr	r1, [pc, #4]	; (800f594 <_cleanup_r+0x8>)
 800f58e:	f000 b8af 	b.w	800f6f0 <_fwalk_reent>
 800f592:	bf00      	nop
 800f594:	0800f4cd 	.word	0x0800f4cd

0800f598 <__sfmoreglue>:
 800f598:	b570      	push	{r4, r5, r6, lr}
 800f59a:	1e4a      	subs	r2, r1, #1
 800f59c:	2568      	movs	r5, #104	; 0x68
 800f59e:	4355      	muls	r5, r2
 800f5a0:	460e      	mov	r6, r1
 800f5a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f5a6:	f7ff fc23 	bl	800edf0 <_malloc_r>
 800f5aa:	4604      	mov	r4, r0
 800f5ac:	b140      	cbz	r0, 800f5c0 <__sfmoreglue+0x28>
 800f5ae:	2100      	movs	r1, #0
 800f5b0:	e9c0 1600 	strd	r1, r6, [r0]
 800f5b4:	300c      	adds	r0, #12
 800f5b6:	60a0      	str	r0, [r4, #8]
 800f5b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f5bc:	f7fd fdd4 	bl	800d168 <memset>
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	bd70      	pop	{r4, r5, r6, pc}

0800f5c4 <__sfp_lock_acquire>:
 800f5c4:	4801      	ldr	r0, [pc, #4]	; (800f5cc <__sfp_lock_acquire+0x8>)
 800f5c6:	f000 b8b3 	b.w	800f730 <__retarget_lock_acquire_recursive>
 800f5ca:	bf00      	nop
 800f5cc:	24000cd4 	.word	0x24000cd4

0800f5d0 <__sfp_lock_release>:
 800f5d0:	4801      	ldr	r0, [pc, #4]	; (800f5d8 <__sfp_lock_release+0x8>)
 800f5d2:	f000 b8ae 	b.w	800f732 <__retarget_lock_release_recursive>
 800f5d6:	bf00      	nop
 800f5d8:	24000cd4 	.word	0x24000cd4

0800f5dc <__sinit_lock_acquire>:
 800f5dc:	4801      	ldr	r0, [pc, #4]	; (800f5e4 <__sinit_lock_acquire+0x8>)
 800f5de:	f000 b8a7 	b.w	800f730 <__retarget_lock_acquire_recursive>
 800f5e2:	bf00      	nop
 800f5e4:	24000ccf 	.word	0x24000ccf

0800f5e8 <__sinit_lock_release>:
 800f5e8:	4801      	ldr	r0, [pc, #4]	; (800f5f0 <__sinit_lock_release+0x8>)
 800f5ea:	f000 b8a2 	b.w	800f732 <__retarget_lock_release_recursive>
 800f5ee:	bf00      	nop
 800f5f0:	24000ccf 	.word	0x24000ccf

0800f5f4 <__sinit>:
 800f5f4:	b510      	push	{r4, lr}
 800f5f6:	4604      	mov	r4, r0
 800f5f8:	f7ff fff0 	bl	800f5dc <__sinit_lock_acquire>
 800f5fc:	69a3      	ldr	r3, [r4, #24]
 800f5fe:	b11b      	cbz	r3, 800f608 <__sinit+0x14>
 800f600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f604:	f7ff bff0 	b.w	800f5e8 <__sinit_lock_release>
 800f608:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f60c:	6523      	str	r3, [r4, #80]	; 0x50
 800f60e:	4b13      	ldr	r3, [pc, #76]	; (800f65c <__sinit+0x68>)
 800f610:	4a13      	ldr	r2, [pc, #76]	; (800f660 <__sinit+0x6c>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	62a2      	str	r2, [r4, #40]	; 0x28
 800f616:	42a3      	cmp	r3, r4
 800f618:	bf04      	itt	eq
 800f61a:	2301      	moveq	r3, #1
 800f61c:	61a3      	streq	r3, [r4, #24]
 800f61e:	4620      	mov	r0, r4
 800f620:	f000 f820 	bl	800f664 <__sfp>
 800f624:	6060      	str	r0, [r4, #4]
 800f626:	4620      	mov	r0, r4
 800f628:	f000 f81c 	bl	800f664 <__sfp>
 800f62c:	60a0      	str	r0, [r4, #8]
 800f62e:	4620      	mov	r0, r4
 800f630:	f000 f818 	bl	800f664 <__sfp>
 800f634:	2200      	movs	r2, #0
 800f636:	60e0      	str	r0, [r4, #12]
 800f638:	2104      	movs	r1, #4
 800f63a:	6860      	ldr	r0, [r4, #4]
 800f63c:	f7ff ff82 	bl	800f544 <std>
 800f640:	68a0      	ldr	r0, [r4, #8]
 800f642:	2201      	movs	r2, #1
 800f644:	2109      	movs	r1, #9
 800f646:	f7ff ff7d 	bl	800f544 <std>
 800f64a:	68e0      	ldr	r0, [r4, #12]
 800f64c:	2202      	movs	r2, #2
 800f64e:	2112      	movs	r1, #18
 800f650:	f7ff ff78 	bl	800f544 <std>
 800f654:	2301      	movs	r3, #1
 800f656:	61a3      	str	r3, [r4, #24]
 800f658:	e7d2      	b.n	800f600 <__sinit+0xc>
 800f65a:	bf00      	nop
 800f65c:	080112f0 	.word	0x080112f0
 800f660:	0800f58d 	.word	0x0800f58d

0800f664 <__sfp>:
 800f664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f666:	4607      	mov	r7, r0
 800f668:	f7ff ffac 	bl	800f5c4 <__sfp_lock_acquire>
 800f66c:	4b1e      	ldr	r3, [pc, #120]	; (800f6e8 <__sfp+0x84>)
 800f66e:	681e      	ldr	r6, [r3, #0]
 800f670:	69b3      	ldr	r3, [r6, #24]
 800f672:	b913      	cbnz	r3, 800f67a <__sfp+0x16>
 800f674:	4630      	mov	r0, r6
 800f676:	f7ff ffbd 	bl	800f5f4 <__sinit>
 800f67a:	3648      	adds	r6, #72	; 0x48
 800f67c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f680:	3b01      	subs	r3, #1
 800f682:	d503      	bpl.n	800f68c <__sfp+0x28>
 800f684:	6833      	ldr	r3, [r6, #0]
 800f686:	b30b      	cbz	r3, 800f6cc <__sfp+0x68>
 800f688:	6836      	ldr	r6, [r6, #0]
 800f68a:	e7f7      	b.n	800f67c <__sfp+0x18>
 800f68c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f690:	b9d5      	cbnz	r5, 800f6c8 <__sfp+0x64>
 800f692:	4b16      	ldr	r3, [pc, #88]	; (800f6ec <__sfp+0x88>)
 800f694:	60e3      	str	r3, [r4, #12]
 800f696:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f69a:	6665      	str	r5, [r4, #100]	; 0x64
 800f69c:	f000 f847 	bl	800f72e <__retarget_lock_init_recursive>
 800f6a0:	f7ff ff96 	bl	800f5d0 <__sfp_lock_release>
 800f6a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f6a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f6ac:	6025      	str	r5, [r4, #0]
 800f6ae:	61a5      	str	r5, [r4, #24]
 800f6b0:	2208      	movs	r2, #8
 800f6b2:	4629      	mov	r1, r5
 800f6b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f6b8:	f7fd fd56 	bl	800d168 <memset>
 800f6bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f6c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6c8:	3468      	adds	r4, #104	; 0x68
 800f6ca:	e7d9      	b.n	800f680 <__sfp+0x1c>
 800f6cc:	2104      	movs	r1, #4
 800f6ce:	4638      	mov	r0, r7
 800f6d0:	f7ff ff62 	bl	800f598 <__sfmoreglue>
 800f6d4:	4604      	mov	r4, r0
 800f6d6:	6030      	str	r0, [r6, #0]
 800f6d8:	2800      	cmp	r0, #0
 800f6da:	d1d5      	bne.n	800f688 <__sfp+0x24>
 800f6dc:	f7ff ff78 	bl	800f5d0 <__sfp_lock_release>
 800f6e0:	230c      	movs	r3, #12
 800f6e2:	603b      	str	r3, [r7, #0]
 800f6e4:	e7ee      	b.n	800f6c4 <__sfp+0x60>
 800f6e6:	bf00      	nop
 800f6e8:	080112f0 	.word	0x080112f0
 800f6ec:	ffff0001 	.word	0xffff0001

0800f6f0 <_fwalk_reent>:
 800f6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f6f4:	4606      	mov	r6, r0
 800f6f6:	4688      	mov	r8, r1
 800f6f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f6fc:	2700      	movs	r7, #0
 800f6fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f702:	f1b9 0901 	subs.w	r9, r9, #1
 800f706:	d505      	bpl.n	800f714 <_fwalk_reent+0x24>
 800f708:	6824      	ldr	r4, [r4, #0]
 800f70a:	2c00      	cmp	r4, #0
 800f70c:	d1f7      	bne.n	800f6fe <_fwalk_reent+0xe>
 800f70e:	4638      	mov	r0, r7
 800f710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f714:	89ab      	ldrh	r3, [r5, #12]
 800f716:	2b01      	cmp	r3, #1
 800f718:	d907      	bls.n	800f72a <_fwalk_reent+0x3a>
 800f71a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f71e:	3301      	adds	r3, #1
 800f720:	d003      	beq.n	800f72a <_fwalk_reent+0x3a>
 800f722:	4629      	mov	r1, r5
 800f724:	4630      	mov	r0, r6
 800f726:	47c0      	blx	r8
 800f728:	4307      	orrs	r7, r0
 800f72a:	3568      	adds	r5, #104	; 0x68
 800f72c:	e7e9      	b.n	800f702 <_fwalk_reent+0x12>

0800f72e <__retarget_lock_init_recursive>:
 800f72e:	4770      	bx	lr

0800f730 <__retarget_lock_acquire_recursive>:
 800f730:	4770      	bx	lr

0800f732 <__retarget_lock_release_recursive>:
 800f732:	4770      	bx	lr

0800f734 <__swhatbuf_r>:
 800f734:	b570      	push	{r4, r5, r6, lr}
 800f736:	460e      	mov	r6, r1
 800f738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f73c:	2900      	cmp	r1, #0
 800f73e:	b096      	sub	sp, #88	; 0x58
 800f740:	4614      	mov	r4, r2
 800f742:	461d      	mov	r5, r3
 800f744:	da07      	bge.n	800f756 <__swhatbuf_r+0x22>
 800f746:	2300      	movs	r3, #0
 800f748:	602b      	str	r3, [r5, #0]
 800f74a:	89b3      	ldrh	r3, [r6, #12]
 800f74c:	061a      	lsls	r2, r3, #24
 800f74e:	d410      	bmi.n	800f772 <__swhatbuf_r+0x3e>
 800f750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f754:	e00e      	b.n	800f774 <__swhatbuf_r+0x40>
 800f756:	466a      	mov	r2, sp
 800f758:	f000 f8fa 	bl	800f950 <_fstat_r>
 800f75c:	2800      	cmp	r0, #0
 800f75e:	dbf2      	blt.n	800f746 <__swhatbuf_r+0x12>
 800f760:	9a01      	ldr	r2, [sp, #4]
 800f762:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f766:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f76a:	425a      	negs	r2, r3
 800f76c:	415a      	adcs	r2, r3
 800f76e:	602a      	str	r2, [r5, #0]
 800f770:	e7ee      	b.n	800f750 <__swhatbuf_r+0x1c>
 800f772:	2340      	movs	r3, #64	; 0x40
 800f774:	2000      	movs	r0, #0
 800f776:	6023      	str	r3, [r4, #0]
 800f778:	b016      	add	sp, #88	; 0x58
 800f77a:	bd70      	pop	{r4, r5, r6, pc}

0800f77c <__smakebuf_r>:
 800f77c:	898b      	ldrh	r3, [r1, #12]
 800f77e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f780:	079d      	lsls	r5, r3, #30
 800f782:	4606      	mov	r6, r0
 800f784:	460c      	mov	r4, r1
 800f786:	d507      	bpl.n	800f798 <__smakebuf_r+0x1c>
 800f788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f78c:	6023      	str	r3, [r4, #0]
 800f78e:	6123      	str	r3, [r4, #16]
 800f790:	2301      	movs	r3, #1
 800f792:	6163      	str	r3, [r4, #20]
 800f794:	b002      	add	sp, #8
 800f796:	bd70      	pop	{r4, r5, r6, pc}
 800f798:	ab01      	add	r3, sp, #4
 800f79a:	466a      	mov	r2, sp
 800f79c:	f7ff ffca 	bl	800f734 <__swhatbuf_r>
 800f7a0:	9900      	ldr	r1, [sp, #0]
 800f7a2:	4605      	mov	r5, r0
 800f7a4:	4630      	mov	r0, r6
 800f7a6:	f7ff fb23 	bl	800edf0 <_malloc_r>
 800f7aa:	b948      	cbnz	r0, 800f7c0 <__smakebuf_r+0x44>
 800f7ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7b0:	059a      	lsls	r2, r3, #22
 800f7b2:	d4ef      	bmi.n	800f794 <__smakebuf_r+0x18>
 800f7b4:	f023 0303 	bic.w	r3, r3, #3
 800f7b8:	f043 0302 	orr.w	r3, r3, #2
 800f7bc:	81a3      	strh	r3, [r4, #12]
 800f7be:	e7e3      	b.n	800f788 <__smakebuf_r+0xc>
 800f7c0:	4b0d      	ldr	r3, [pc, #52]	; (800f7f8 <__smakebuf_r+0x7c>)
 800f7c2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f7c4:	89a3      	ldrh	r3, [r4, #12]
 800f7c6:	6020      	str	r0, [r4, #0]
 800f7c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f7cc:	81a3      	strh	r3, [r4, #12]
 800f7ce:	9b00      	ldr	r3, [sp, #0]
 800f7d0:	6163      	str	r3, [r4, #20]
 800f7d2:	9b01      	ldr	r3, [sp, #4]
 800f7d4:	6120      	str	r0, [r4, #16]
 800f7d6:	b15b      	cbz	r3, 800f7f0 <__smakebuf_r+0x74>
 800f7d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7dc:	4630      	mov	r0, r6
 800f7de:	f000 f8c9 	bl	800f974 <_isatty_r>
 800f7e2:	b128      	cbz	r0, 800f7f0 <__smakebuf_r+0x74>
 800f7e4:	89a3      	ldrh	r3, [r4, #12]
 800f7e6:	f023 0303 	bic.w	r3, r3, #3
 800f7ea:	f043 0301 	orr.w	r3, r3, #1
 800f7ee:	81a3      	strh	r3, [r4, #12]
 800f7f0:	89a0      	ldrh	r0, [r4, #12]
 800f7f2:	4305      	orrs	r5, r0
 800f7f4:	81a5      	strh	r5, [r4, #12]
 800f7f6:	e7cd      	b.n	800f794 <__smakebuf_r+0x18>
 800f7f8:	0800f58d 	.word	0x0800f58d

0800f7fc <_raise_r>:
 800f7fc:	291f      	cmp	r1, #31
 800f7fe:	b538      	push	{r3, r4, r5, lr}
 800f800:	4604      	mov	r4, r0
 800f802:	460d      	mov	r5, r1
 800f804:	d904      	bls.n	800f810 <_raise_r+0x14>
 800f806:	2316      	movs	r3, #22
 800f808:	6003      	str	r3, [r0, #0]
 800f80a:	f04f 30ff 	mov.w	r0, #4294967295
 800f80e:	bd38      	pop	{r3, r4, r5, pc}
 800f810:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f812:	b112      	cbz	r2, 800f81a <_raise_r+0x1e>
 800f814:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f818:	b94b      	cbnz	r3, 800f82e <_raise_r+0x32>
 800f81a:	4620      	mov	r0, r4
 800f81c:	f000 f830 	bl	800f880 <_getpid_r>
 800f820:	462a      	mov	r2, r5
 800f822:	4601      	mov	r1, r0
 800f824:	4620      	mov	r0, r4
 800f826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f82a:	f000 b817 	b.w	800f85c <_kill_r>
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d00a      	beq.n	800f848 <_raise_r+0x4c>
 800f832:	1c59      	adds	r1, r3, #1
 800f834:	d103      	bne.n	800f83e <_raise_r+0x42>
 800f836:	2316      	movs	r3, #22
 800f838:	6003      	str	r3, [r0, #0]
 800f83a:	2001      	movs	r0, #1
 800f83c:	e7e7      	b.n	800f80e <_raise_r+0x12>
 800f83e:	2400      	movs	r4, #0
 800f840:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f844:	4628      	mov	r0, r5
 800f846:	4798      	blx	r3
 800f848:	2000      	movs	r0, #0
 800f84a:	e7e0      	b.n	800f80e <_raise_r+0x12>

0800f84c <raise>:
 800f84c:	4b02      	ldr	r3, [pc, #8]	; (800f858 <raise+0xc>)
 800f84e:	4601      	mov	r1, r0
 800f850:	6818      	ldr	r0, [r3, #0]
 800f852:	f7ff bfd3 	b.w	800f7fc <_raise_r>
 800f856:	bf00      	nop
 800f858:	24000024 	.word	0x24000024

0800f85c <_kill_r>:
 800f85c:	b538      	push	{r3, r4, r5, lr}
 800f85e:	4d07      	ldr	r5, [pc, #28]	; (800f87c <_kill_r+0x20>)
 800f860:	2300      	movs	r3, #0
 800f862:	4604      	mov	r4, r0
 800f864:	4608      	mov	r0, r1
 800f866:	4611      	mov	r1, r2
 800f868:	602b      	str	r3, [r5, #0]
 800f86a:	f7f4 fac3 	bl	8003df4 <_kill>
 800f86e:	1c43      	adds	r3, r0, #1
 800f870:	d102      	bne.n	800f878 <_kill_r+0x1c>
 800f872:	682b      	ldr	r3, [r5, #0]
 800f874:	b103      	cbz	r3, 800f878 <_kill_r+0x1c>
 800f876:	6023      	str	r3, [r4, #0]
 800f878:	bd38      	pop	{r3, r4, r5, pc}
 800f87a:	bf00      	nop
 800f87c:	24000cc8 	.word	0x24000cc8

0800f880 <_getpid_r>:
 800f880:	f7f4 bab0 	b.w	8003de4 <_getpid>

0800f884 <__sread>:
 800f884:	b510      	push	{r4, lr}
 800f886:	460c      	mov	r4, r1
 800f888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f88c:	f000 f894 	bl	800f9b8 <_read_r>
 800f890:	2800      	cmp	r0, #0
 800f892:	bfab      	itete	ge
 800f894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f896:	89a3      	ldrhlt	r3, [r4, #12]
 800f898:	181b      	addge	r3, r3, r0
 800f89a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f89e:	bfac      	ite	ge
 800f8a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f8a2:	81a3      	strhlt	r3, [r4, #12]
 800f8a4:	bd10      	pop	{r4, pc}

0800f8a6 <__swrite>:
 800f8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8aa:	461f      	mov	r7, r3
 800f8ac:	898b      	ldrh	r3, [r1, #12]
 800f8ae:	05db      	lsls	r3, r3, #23
 800f8b0:	4605      	mov	r5, r0
 800f8b2:	460c      	mov	r4, r1
 800f8b4:	4616      	mov	r6, r2
 800f8b6:	d505      	bpl.n	800f8c4 <__swrite+0x1e>
 800f8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8bc:	2302      	movs	r3, #2
 800f8be:	2200      	movs	r2, #0
 800f8c0:	f000 f868 	bl	800f994 <_lseek_r>
 800f8c4:	89a3      	ldrh	r3, [r4, #12]
 800f8c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f8ce:	81a3      	strh	r3, [r4, #12]
 800f8d0:	4632      	mov	r2, r6
 800f8d2:	463b      	mov	r3, r7
 800f8d4:	4628      	mov	r0, r5
 800f8d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8da:	f000 b817 	b.w	800f90c <_write_r>

0800f8de <__sseek>:
 800f8de:	b510      	push	{r4, lr}
 800f8e0:	460c      	mov	r4, r1
 800f8e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8e6:	f000 f855 	bl	800f994 <_lseek_r>
 800f8ea:	1c43      	adds	r3, r0, #1
 800f8ec:	89a3      	ldrh	r3, [r4, #12]
 800f8ee:	bf15      	itete	ne
 800f8f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f8f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f8f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f8fa:	81a3      	strheq	r3, [r4, #12]
 800f8fc:	bf18      	it	ne
 800f8fe:	81a3      	strhne	r3, [r4, #12]
 800f900:	bd10      	pop	{r4, pc}

0800f902 <__sclose>:
 800f902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f906:	f000 b813 	b.w	800f930 <_close_r>
	...

0800f90c <_write_r>:
 800f90c:	b538      	push	{r3, r4, r5, lr}
 800f90e:	4d07      	ldr	r5, [pc, #28]	; (800f92c <_write_r+0x20>)
 800f910:	4604      	mov	r4, r0
 800f912:	4608      	mov	r0, r1
 800f914:	4611      	mov	r1, r2
 800f916:	2200      	movs	r2, #0
 800f918:	602a      	str	r2, [r5, #0]
 800f91a:	461a      	mov	r2, r3
 800f91c:	f7f4 faa1 	bl	8003e62 <_write>
 800f920:	1c43      	adds	r3, r0, #1
 800f922:	d102      	bne.n	800f92a <_write_r+0x1e>
 800f924:	682b      	ldr	r3, [r5, #0]
 800f926:	b103      	cbz	r3, 800f92a <_write_r+0x1e>
 800f928:	6023      	str	r3, [r4, #0]
 800f92a:	bd38      	pop	{r3, r4, r5, pc}
 800f92c:	24000cc8 	.word	0x24000cc8

0800f930 <_close_r>:
 800f930:	b538      	push	{r3, r4, r5, lr}
 800f932:	4d06      	ldr	r5, [pc, #24]	; (800f94c <_close_r+0x1c>)
 800f934:	2300      	movs	r3, #0
 800f936:	4604      	mov	r4, r0
 800f938:	4608      	mov	r0, r1
 800f93a:	602b      	str	r3, [r5, #0]
 800f93c:	f7f4 faad 	bl	8003e9a <_close>
 800f940:	1c43      	adds	r3, r0, #1
 800f942:	d102      	bne.n	800f94a <_close_r+0x1a>
 800f944:	682b      	ldr	r3, [r5, #0]
 800f946:	b103      	cbz	r3, 800f94a <_close_r+0x1a>
 800f948:	6023      	str	r3, [r4, #0]
 800f94a:	bd38      	pop	{r3, r4, r5, pc}
 800f94c:	24000cc8 	.word	0x24000cc8

0800f950 <_fstat_r>:
 800f950:	b538      	push	{r3, r4, r5, lr}
 800f952:	4d07      	ldr	r5, [pc, #28]	; (800f970 <_fstat_r+0x20>)
 800f954:	2300      	movs	r3, #0
 800f956:	4604      	mov	r4, r0
 800f958:	4608      	mov	r0, r1
 800f95a:	4611      	mov	r1, r2
 800f95c:	602b      	str	r3, [r5, #0]
 800f95e:	f7f4 faa8 	bl	8003eb2 <_fstat>
 800f962:	1c43      	adds	r3, r0, #1
 800f964:	d102      	bne.n	800f96c <_fstat_r+0x1c>
 800f966:	682b      	ldr	r3, [r5, #0]
 800f968:	b103      	cbz	r3, 800f96c <_fstat_r+0x1c>
 800f96a:	6023      	str	r3, [r4, #0]
 800f96c:	bd38      	pop	{r3, r4, r5, pc}
 800f96e:	bf00      	nop
 800f970:	24000cc8 	.word	0x24000cc8

0800f974 <_isatty_r>:
 800f974:	b538      	push	{r3, r4, r5, lr}
 800f976:	4d06      	ldr	r5, [pc, #24]	; (800f990 <_isatty_r+0x1c>)
 800f978:	2300      	movs	r3, #0
 800f97a:	4604      	mov	r4, r0
 800f97c:	4608      	mov	r0, r1
 800f97e:	602b      	str	r3, [r5, #0]
 800f980:	f7f4 faa7 	bl	8003ed2 <_isatty>
 800f984:	1c43      	adds	r3, r0, #1
 800f986:	d102      	bne.n	800f98e <_isatty_r+0x1a>
 800f988:	682b      	ldr	r3, [r5, #0]
 800f98a:	b103      	cbz	r3, 800f98e <_isatty_r+0x1a>
 800f98c:	6023      	str	r3, [r4, #0]
 800f98e:	bd38      	pop	{r3, r4, r5, pc}
 800f990:	24000cc8 	.word	0x24000cc8

0800f994 <_lseek_r>:
 800f994:	b538      	push	{r3, r4, r5, lr}
 800f996:	4d07      	ldr	r5, [pc, #28]	; (800f9b4 <_lseek_r+0x20>)
 800f998:	4604      	mov	r4, r0
 800f99a:	4608      	mov	r0, r1
 800f99c:	4611      	mov	r1, r2
 800f99e:	2200      	movs	r2, #0
 800f9a0:	602a      	str	r2, [r5, #0]
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	f7f4 faa0 	bl	8003ee8 <_lseek>
 800f9a8:	1c43      	adds	r3, r0, #1
 800f9aa:	d102      	bne.n	800f9b2 <_lseek_r+0x1e>
 800f9ac:	682b      	ldr	r3, [r5, #0]
 800f9ae:	b103      	cbz	r3, 800f9b2 <_lseek_r+0x1e>
 800f9b0:	6023      	str	r3, [r4, #0]
 800f9b2:	bd38      	pop	{r3, r4, r5, pc}
 800f9b4:	24000cc8 	.word	0x24000cc8

0800f9b8 <_read_r>:
 800f9b8:	b538      	push	{r3, r4, r5, lr}
 800f9ba:	4d07      	ldr	r5, [pc, #28]	; (800f9d8 <_read_r+0x20>)
 800f9bc:	4604      	mov	r4, r0
 800f9be:	4608      	mov	r0, r1
 800f9c0:	4611      	mov	r1, r2
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	602a      	str	r2, [r5, #0]
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	f7f4 fa2e 	bl	8003e28 <_read>
 800f9cc:	1c43      	adds	r3, r0, #1
 800f9ce:	d102      	bne.n	800f9d6 <_read_r+0x1e>
 800f9d0:	682b      	ldr	r3, [r5, #0]
 800f9d2:	b103      	cbz	r3, 800f9d6 <_read_r+0x1e>
 800f9d4:	6023      	str	r3, [r4, #0]
 800f9d6:	bd38      	pop	{r3, r4, r5, pc}
 800f9d8:	24000cc8 	.word	0x24000cc8

0800f9dc <_init>:
 800f9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9de:	bf00      	nop
 800f9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9e2:	bc08      	pop	{r3}
 800f9e4:	469e      	mov	lr, r3
 800f9e6:	4770      	bx	lr

0800f9e8 <_fini>:
 800f9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ea:	bf00      	nop
 800f9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9ee:	bc08      	pop	{r3}
 800f9f0:	469e      	mov	lr, r3
 800f9f2:	4770      	bx	lr
