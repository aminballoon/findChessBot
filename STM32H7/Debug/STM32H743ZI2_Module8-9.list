
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec88  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800ef28  0800ef28  0001ef28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f524  0800f524  0001f524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800f52c  0800f52c  0001f52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0800f534  0800f534  0001f534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f0  24000000  0800f53c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000082c  240001f0  0800f72c  000201f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000a1c  0800f72c  00020a1c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003007e  00000000  00000000  0002021e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000044ed  00000000  00000000  0005029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001528  00000000  00000000  00054790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000013f0  00000000  00000000  00055cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003cc59  00000000  00000000  000570a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001da05  00000000  00000000  00093d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d1b2  00000000  00000000  000b1706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0021e8b8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000068dc  00000000  00000000  0021e90c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f0 	.word	0x240001f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ef10 	.word	0x0800ef10

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f4 	.word	0x240001f4
 80002dc:	0800ef10 	.word	0x0800ef10

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address){
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21(){
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read(){
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f103 010a 	add.w	r1, r3, #10
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	f009 fb84 	bl	8009de8 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 010c 	add.w	r1, r3, #12
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2202      	movs	r2, #2
 80006ee:	f009 fc11 	bl	8009f14 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	749a      	strb	r2, [r3, #18]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	0bdb      	lsrs	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	74da      	strb	r2, [r3, #19]
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN5AMT2117AMT21_Check_ValueEv>:

HAL_StatusTypeDef AMT21::AMT21_Check_Value(){
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000734:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d820      	bhi.n	800079c <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	109b      	asrs	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4053      	eors	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b25a      	sxtb	r2, r3
 800078a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800078e:	4053      	eors	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	3301      	adds	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
 800079a:	e7db      	b.n	8000754 <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7c9b      	ldrb	r3, [r3, #18]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d10a      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7cdb      	ldrb	r3, [r3, #19]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d105      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 80007cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e003      	b.n	80007e0 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
	}
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZN5AMT2112getAngPos180Ev>:
{
	return this->raw_value;
}

int16_t AMT21::getAngPos180()
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
//	uint8_t iii =  (this->raw_value & 0x1FFF);
	return ((((this->raw_value & 0x2000) >> 13) * (-16383)) + (this->raw_value & 0x3FFF) ) * -1;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	135b      	asrs	r3, r3, #13
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	0392      	lsls	r2, r2, #14
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800081a:	b29b      	uxth	r3, r3
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
//	return this->raw_value;
//	this->value =
//	return iii;
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr

0800082e <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 800082e:	b480      	push	{r7}
 8000830:	b083      	sub	sp, #12
 8000832:	af00      	add	r7, sp, #0
 8000834:	ed87 0a01 	vstr	s0, [r7, #4]
 8000838:	edd7 7a01 	vldr	s15, [r7, #4]
 800083c:	eef0 7ae7 	vabs.f32	s15, s15
 8000840:	eeb0 0a67 	vmov.f32	s0, s15
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	ed87 0a01 	vstr	s0, [r7, #4]
 8000858:	edd7 7a01 	vldr	s15, [r7, #4]
 800085c:	fef8 7a67 	vrinta.f32	s15, s15
 8000860:	eeb0 0a67 	vmov.f32	s0, s15
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
 800087c:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8000882:	615a      	str	r2, [r3, #20]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4a18      	ldr	r2, [pc, #96]	; (80008e8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000888:	619a      	str	r2, [r3, #24]
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000890:	61da      	str	r2, [r3, #28]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	4a15      	ldr	r2, [pc, #84]	; (80008ec <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8000896:	621a      	str	r2, [r3, #32]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800089e:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	68ba      	ldr	r2, [r7, #8]
 80008a4:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	22c7      	movs	r2, #199	; 0xc7
 80008b4:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 50.0f;
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4a0d      	ldr	r2, [pc, #52]	; (80008f0 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 80008ba:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 80008c0:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 80008c2:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80008f4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 80008c6:	68f8      	ldr	r0, [r7, #12]
 80008c8:	f000 f832 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	60da      	str	r2, [r3, #12]
}
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4618      	mov	r0, r3
 80008dc:	3710      	adds	r7, #16
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	41a00000 	.word	0x41a00000
 80008e8:	469c4000 	.word	0x469c4000
 80008ec:	43480000 	.word	0x43480000
 80008f0:	42480000 	.word	0x42480000
 80008f4:	00000000 	.word	0x00000000

080008f8 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
}
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4618      	mov	r0, r3
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 800090e:	b580      	push	{r7, lr}
 8000910:	b082      	sub	sp, #8
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	4619      	mov	r1, r3
 8000920:	4610      	mov	r0, r2
 8000922:	f008 f851 	bl	80089c8 <HAL_TIM_PWM_Start>
}
 8000926:	bf00      	nop
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
	...

08000930 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8000930:	b580      	push	{r7, lr}
 8000932:	ed2d 8b02 	vpush	{d8}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	683a      	ldr	r2, [r7, #0]
 8000944:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	edd3 7a04 	vldr	s15, [r3, #16]
 800094c:	eeb0 0a67 	vmov.f32	s0, s15
 8000950:	f7ff ff6d 	bl	800082e <_ZSt4fabsf>
 8000954:	eeb0 7a40 	vmov.f32	s14, s0
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	edd3 7a05 	vldr	s15, [r3, #20]
 800095e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000966:	bf94      	ite	ls
 8000968:	2301      	movls	r3, #1
 800096a:	2300      	movhi	r3, #0
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d003      	beq.n	800097a <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	e01b      	b.n	80009b2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000980:	eeb0 0a67 	vmov.f32	s0, s15
 8000984:	f7ff ff53 	bl	800082e <_ZSt4fabsf>
 8000988:	eeb0 7a40 	vmov.f32	s14, s0
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	edd3 7a06 	vldr	s15, [r3, #24]
 8000992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800099a:	bfac      	ite	ge
 800099c:	2301      	movge	r3, #1
 800099e:	2300      	movlt	r3, #0
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e001      	b.n	80009b2 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	60fb      	str	r3, [r7, #12]

	if (this->frequency > 0.001f) {
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80009b8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8000c54 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 80009bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009c4:	f340 80db 	ble.w	8000b7e <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6898      	ldr	r0, [r3, #8]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	2201      	movs	r2, #1
 80009d4:	4619      	mov	r1, r3
 80009d6:	f005 fa1d 	bl	8005e14 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * f)) - 1U);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009e2:	3301      	adds	r3, #1
 80009e4:	ee07 3a90 	vmov	s15, r3
 80009e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80009f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80009f4:	eddf 6a98 	vldr	s13, [pc, #608]	; 8000c58 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 80009f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 80009fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a04:	eeb0 0a67 	vmov.f32	s0, s15
 8000a08:	f7ff ff21 	bl	800084e <_ZSt5roundf>
 8000a0c:	eef0 7a40 	vmov.f32	s15, s0
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a1a:	ee17 2a90 	vmov	r2, s15
 8000a1e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d113      	bne.n	8000a50 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a30:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000a32:	085b      	lsrs	r3, r3, #1
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 fa2a 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a3a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a48:	ee17 2a90 	vmov	r2, s15
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8000a4e:	e1de      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d113      	bne.n	8000a80 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a60:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000a62:	085b      	lsrs	r3, r3, #1
 8000a64:	4618      	mov	r0, r3
 8000a66:	f000 fa12 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a6a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a78:	ee17 2a90 	vmov	r2, s15
 8000a7c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a7e:	e1c6      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b08      	cmp	r3, #8
 8000a86:	d113      	bne.n	8000ab0 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a90:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000a92:	085b      	lsrs	r3, r3, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 f9fa 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a9a:	eeb0 7b40 	vmov.f64	d7, d0
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000aa8:	ee17 2a90 	vmov	r2, s15
 8000aac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000aae:	e1ae      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	2b0c      	cmp	r3, #12
 8000ab6:	d113      	bne.n	8000ae0 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000ac2:	085b      	lsrs	r3, r3, #1
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f9e2 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000aca:	eeb0 7b40 	vmov.f64	d7, d0
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ad8:	ee17 2a90 	vmov	r2, s15
 8000adc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ade:	e196      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b10      	cmp	r3, #16
 8000ae6:	d113      	bne.n	8000b10 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000af0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000af2:	085b      	lsrs	r3, r3, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f9ca 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000afa:	eeb0 7b40 	vmov.f64	d7, d0
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b08:	ee17 2a90 	vmov	r2, s15
 8000b0c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000b0e:	e17e      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b14      	cmp	r3, #20
 8000b16:	d113      	bne.n	8000b40 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b20:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000b22:	085b      	lsrs	r3, r3, #1
 8000b24:	4618      	mov	r0, r3
 8000b26:	f000 f9b2 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b2a:	eeb0 7b40 	vmov.f64	d7, d0
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b38:	ee17 2a90 	vmov	r2, s15
 8000b3c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b3e:	e166      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
			this->stepper_htim->Instance->CCR1 = 0;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2200      	movs	r2, #0
 8000b48:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2200      	movs	r2, #0
 8000b52:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	2200      	movs	r2, #0
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2200      	movs	r2, #0
 8000b70:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000b7c:	e147      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
	} else if (this->frequency < 0.001f) {
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	edd3 7a04 	vldr	s15, [r3, #16]
 8000b84:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000c54 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8000b88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b90:	f140 80e3 	bpl.w	8000d5a <_ZN7Stepper19StepperSetFrequencyEf+0x42a>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6898      	ldr	r0, [r3, #8]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f005 f937 	bl	8005e14 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bae:	3301      	adds	r3, #1
 8000bb0:	ee07 3a90 	vmov	s15, r3
 8000bb4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000bb8:	ed97 0a03 	vldr	s0, [r7, #12]
 8000bbc:	f7ff fe37 	bl	800082e <_ZSt4fabsf>
 8000bc0:	eef0 7a40 	vmov.f32	s15, s0
 8000bc4:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000bc8:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000c58 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8000bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000bd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000bd4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	f7ff fe37 	bl	800084e <_ZSt5roundf>
 8000be0:	eef0 7a40 	vmov.f32	s15, s0
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000bee:	ee17 2a90 	vmov	r2, s15
 8000bf2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d113      	bne.n	8000c24 <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c04:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000c06:	085b      	lsrs	r3, r3, #1
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f940 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c0e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c1c:	ee17 2a90 	vmov	r2, s15
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c22:	e0f4      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b04      	cmp	r3, #4
 8000c2a:	d117      	bne.n	8000c5c <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c34:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000c36:	085b      	lsrs	r3, r3, #1
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f000 f928 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c3e:	eeb0 7b40 	vmov.f64	d7, d0
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c4c:	ee17 2a90 	vmov	r2, s15
 8000c50:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000c52:	e0dc      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
 8000c54:	3a83126f 	.word	0x3a83126f
 8000c58:	4d64e1c0 	.word	0x4d64e1c0
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d113      	bne.n	8000c8c <_ZN7Stepper19StepperSetFrequencyEf+0x35c>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c6c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000c6e:	085b      	lsrs	r3, r3, #1
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f90c 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000c76:	eeb0 7b40 	vmov.f64	d7, d0
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000c84:	ee17 2a90 	vmov	r2, s15
 8000c88:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c8a:	e0c0      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b0c      	cmp	r3, #12
 8000c92:	d113      	bne.n	8000cbc <_ZN7Stepper19StepperSetFrequencyEf+0x38c>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000c9e:	085b      	lsrs	r3, r3, #1
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f000 f8f4 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000ca6:	eeb0 7b40 	vmov.f64	d7, d0
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cb4:	ee17 2a90 	vmov	r2, s15
 8000cb8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000cba:	e0a8      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	2b10      	cmp	r3, #16
 8000cc2:	d113      	bne.n	8000cec <_ZN7Stepper19StepperSetFrequencyEf+0x3bc>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ccc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000cce:	085b      	lsrs	r3, r3, #1
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 f8dc 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000cd6:	eeb0 7b40 	vmov.f64	d7, d0
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ce4:	ee17 2a90 	vmov	r2, s15
 8000ce8:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000cea:	e090      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b14      	cmp	r3, #20
 8000cf2:	d113      	bne.n	8000d1c <_ZN7Stepper19StepperSetFrequencyEf+0x3ec>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000cfe:	085b      	lsrs	r3, r3, #1
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 f8c4 	bl	8000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000d06:	eeb0 7b40 	vmov.f64	d7, d0
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d14:	ee17 2a90 	vmov	r2, s15
 8000d18:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000d1a:	e078      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
			this->stepper_htim->Instance->CCR1 = 0;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2200      	movs	r2, #0
 8000d24:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2200      	movs	r2, #0
 8000d38:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2200      	movs	r2, #0
 8000d42:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2200      	movs	r2, #0
 8000d56:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000d58:	e059      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d105      	bne.n	8000d6e <_ZN7Stepper19StepperSetFrequencyEf+0x43e>
			this->stepper_htim->Instance->CCR1 = 0;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d6c:	e04f      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	d105      	bne.n	8000d82 <_ZN7Stepper19StepperSetFrequencyEf+0x452>
			this->stepper_htim->Instance->CCR2 = 0;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d80:	e045      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b08      	cmp	r3, #8
 8000d88:	d105      	bne.n	8000d96 <_ZN7Stepper19StepperSetFrequencyEf+0x466>
			this->stepper_htim->Instance->CCR3 = 0;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2200      	movs	r2, #0
 8000d92:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d94:	e03b      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b0c      	cmp	r3, #12
 8000d9c:	d105      	bne.n	8000daa <_ZN7Stepper19StepperSetFrequencyEf+0x47a>
			this->stepper_htim->Instance->CCR4 = 0;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2200      	movs	r2, #0
 8000da6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000da8:	e031      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b10      	cmp	r3, #16
 8000db0:	d105      	bne.n	8000dbe <_ZN7Stepper19StepperSetFrequencyEf+0x48e>
			this->stepper_htim->Instance->CCR5 = 0;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2200      	movs	r2, #0
 8000dba:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000dbc:	e027      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b14      	cmp	r3, #20
 8000dc4:	d105      	bne.n	8000dd2 <_ZN7Stepper19StepperSetFrequencyEf+0x4a2>
			this->stepper_htim->Instance->CCR6 = 0;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000dd0:	e01d      	b.n	8000e0e <_ZN7Stepper19StepperSetFrequencyEf+0x4de>
			this->stepper_htim->Instance->CCR1 = 0;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2200      	movs	r2, #0
 8000de4:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2200      	movs	r2, #0
 8000dee:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2200      	movs	r2, #0
 8000df8:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2200      	movs	r2, #0
 8000e02:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000e0e:	bf00      	nop
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	ecbd 8b02 	vpop	{d8}
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop

08000e1c <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8000e28:	ed97 0a00 	vldr	s0, [r7]
 8000e2c:	f7ff fcff 	bl	800082e <_ZSt4fabsf>
 8000e30:	eef0 7a40 	vmov.f32	s15, s0
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8000e4c:	79fb      	ldrb	r3, [r7, #7]
 8000e4e:	ee07 3a90 	vmov	s15, r3
 8000e52:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000e56:	eeb0 0b47 	vmov.f64	d0, d7
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8000e70:	78fb      	ldrb	r3, [r7, #3]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ffe5 	bl	8000e42 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000e78:	eeb0 7b40 	vmov.f64	d7, d0
 8000e7c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8000e8e:	b480      	push	{r7}
 8000e90:	b083      	sub	sp, #12
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	ee07 3a90 	vmov	s15, r3
 8000e9c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000ea0:	eeb0 0b47 	vmov.f64	d0, d7
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <HAL_TIM_PeriodElapsedCallback>:
};
typedef struct joint_state joint_config;
#endif


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	 * HAL_TIM_Base_Stop_IT(&htim7);
	 *
	 */
	/* Timer7 Interrupt for PID Position Control.*/

	if (htim == &htim7) {
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4a53      	ldr	r2, [pc, #332]	; (8001008 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	f040 8095 	bne.w	8000fec <HAL_TIM_PeriodElapsedCallback+0x13c>
		encoderJ1.AMT21_Read();
 8000ec2:	4852      	ldr	r0, [pc, #328]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000ec4:	f7ff fbff 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8000ec8:	4850      	ldr	r0, [pc, #320]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000eca:	f7ff fc2b 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b4f      	ldr	r3, [pc, #316]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000ed4:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8000ed6:	4b4e      	ldr	r3, [pc, #312]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d106      	bne.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x3c>
			posJ1 = encoderJ1.getAngPos180();
 8000ede:	484b      	ldr	r0, [pc, #300]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8000ee0:	f7ff fc84 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b4a      	ldr	r3, [pc, #296]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000eea:	801a      	strh	r2, [r3, #0]
////	    float Goal_position_x = C0x + (C2x*t_2) - (C3x*t_3);
////	    float Goal_position_y = C0y + (C2y*t_2) - (C3y*t_3);
//	    Goal_velocity_q1 = (2.0*C2_q1*t) - (3.0 * C3_q1*t_2);
//	    Goal_velocity_q3 = (2.0*C2_q3*t) - (3.0 * C3_q3*t_2);
//
		t = t + sample_time;
 8000eec:	4b4a      	ldr	r3, [pc, #296]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000eee:	ed93 7a00 	vldr	s14, [r3]
 8000ef2:	4b4a      	ldr	r3, [pc, #296]	; (800101c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8000ef4:	edd3 7a00 	vldr	s15, [r3]
 8000ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efc:	4b46      	ldr	r3, [pc, #280]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000efe:	edc3 7a00 	vstr	s15, [r3]
		if (t>=8.0)
 8000f02:	4b45      	ldr	r3, [pc, #276]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f14:	bfac      	ite	ge
 8000f16:	2301      	movge	r3, #1
 8000f18:	2300      	movlt	r3, #0
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d003      	beq.n	8000f28 <HAL_TIM_PeriodElapsedCallback+0x78>
		{
			t = 0.0;
 8000f20:	4b3d      	ldr	r3, [pc, #244]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000f22:	f04f 0200 	mov.w	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
		}

		Goal_velocity_q1 = sin(0.785 * t) * 3000;
 8000f28:	4b3b      	ldr	r3, [pc, #236]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000f2a:	edd3 7a00 	vldr	s15, [r3]
 8000f2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f32:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8000ff8 <HAL_TIM_PeriodElapsedCallback+0x148>
 8000f36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f3a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f3e:	f00a fd97 	bl	800ba70 <sin>
 8000f42:	eeb0 7b40 	vmov.f64	d7, d0
 8000f46:	ed9f 6b2e 	vldr	d6, [pc, #184]	; 8001000 <HAL_TIM_PeriodElapsedCallback+0x150>
 8000f4a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f52:	4b33      	ldr	r3, [pc, #204]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000f54:	edc3 7a00 	vstr	s15, [r3]
		Goal_velocity_q3 = sin(0.785 * t) * 3000;
 8000f58:	4b2f      	ldr	r3, [pc, #188]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8000f5a:	edd3 7a00 	vldr	s15, [r3]
 8000f5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f62:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8000ff8 <HAL_TIM_PeriodElapsedCallback+0x148>
 8000f66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f6a:	eeb0 0b47 	vmov.f64	d0, d7
 8000f6e:	f00a fd7f 	bl	800ba70 <sin>
 8000f72:	eeb0 7b40 	vmov.f64	d7, d0
 8000f76:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8001000 <HAL_TIM_PeriodElapsedCallback+0x150>
 8000f7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000f7e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f82:	4b28      	ldr	r3, [pc, #160]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8000f84:	edc3 7a00 	vstr	s15, [r3]

		const float KP_J1 = 1.4;
 8000f88:	4b27      	ldr	r3, [pc, #156]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8000f8a:	60fb      	str	r3, [r7, #12]
		const float Kp_J3 = 1;
 8000f8c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f90:	60bb      	str	r3, [r7, #8]
//		setpointJ3 = findchessbot_joint_state.q3 * 2607;
//		b1 = findchessbot_joint_state.q1;
//		b2 = findchessbot_joint_state.q2;
//		b3 = findchessbot_joint_state.q3;
//		b4 = findchessbot_joint_state.q4;
		setpointJ1 = Goal_velocity_q1;
 8000f92:	4b23      	ldr	r3, [pc, #140]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8000f94:	edd3 7a00 	vldr	s15, [r3]
 8000f98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f9c:	ee17 2a90 	vmov	r2, s15
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000fa2:	601a      	str	r2, [r3, #0]
//		setpointJ3 = Goal_velocity_q3;
		errorJ1 = posJ1 - setpointJ1;
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8000fa6:	881b      	ldrh	r3, [r3, #0]
 8000fa8:	b21b      	sxth	r3, r3
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fba:	4b1d      	ldr	r3, [pc, #116]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000fbc:	edc3 7a00 	vstr	s15, [r3]
//		errorJ3 = posJ3 - setpointJ3 ;
//
		uJ1 = (KP_J1 * errorJ1);
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8000fc2:	edd3 7a00 	vldr	s15, [r3]
 8000fc6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001034 <HAL_TIM_PeriodElapsedCallback+0x184>
 8000fca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000fd0:	edc3 7a00 	vstr	s15, [r3]
//
		#ifdef __cplusplus
//		stepperJ1.StepperSetFrequency(300.0f);
//		if (uJ1 > 0.0)
//		{
		stepperJ1.StepperSetFrequency(uJ1 + 100.0);
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000fd6:	edd3 7a00 	vldr	s15, [r3]
 8000fda:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800103c <HAL_TIM_PeriodElapsedCallback+0x18c>
 8000fde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fe6:	4816      	ldr	r0, [pc, #88]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000fe8:	f7ff fca2 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
		#endif

	}


}
 8000fec:	bf00      	nop
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	51eb851f 	.word	0x51eb851f
 8000ffc:	3fe91eb8 	.word	0x3fe91eb8
 8001000:	00000000 	.word	0x00000000
 8001004:	40a77000 	.word	0x40a77000
 8001008:	24000480 	.word	0x24000480
 800100c:	2400096c 	.word	0x2400096c
 8001010:	240009d0 	.word	0x240009d0
 8001014:	240009d2 	.word	0x240009d2
 8001018:	240009e0 	.word	0x240009e0
 800101c:	2400000c 	.word	0x2400000c
 8001020:	240009f4 	.word	0x240009f4
 8001024:	240009f8 	.word	0x240009f8
 8001028:	3fb33333 	.word	0x3fb33333
 800102c:	240009d4 	.word	0x240009d4
 8001030:	240009d8 	.word	0x240009d8
 8001034:	3fb33333 	.word	0x3fb33333
 8001038:	240009dc 	.word	0x240009dc
 800103c:	42c80000 	.word	0x42c80000
 8001040:	24000980 	.word	0x24000980

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001048:	f002 f86c 	bl	8003124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104c:	f000 f86c 	bl	8001128 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001050:	f000 ff40 	bl	8001ed4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001054:	f000 fefe 	bl	8001e54 <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8001058:	f000 fe9c 	bl	8001d94 <_ZL19MX_USART3_UART_Initv>
  MX_TIM2_Init();
 800105c:	f000 fa3c 	bl	80014d8 <_ZL12MX_TIM2_Initv>
  MX_UART4_Init();
 8001060:	f000 fdd2 	bl	8001c08 <_ZL13MX_UART4_Initv>
  MX_TIM4_Init();
 8001064:	f000 fb5a 	bl	800171c <_ZL12MX_TIM4_Initv>
  MX_SPI3_Init();
 8001068:	f000 f910 	bl	800128c <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 800106c:	f000 f968 	bl	8001340 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8001070:	f000 fac2 	bl	80015f8 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8001074:	f000 fbe4 	bl	8001840 <_ZL12MX_TIM5_Initv>
  MX_TIM15_Init();
 8001078:	f000 fd04 	bl	8001a84 <_ZL13MX_TIM15_Initv>
  MX_TIM12_Init();
 800107c:	f000 fcbe 	bl	80019fc <_ZL13MX_TIM12_Initv>
  MX_CRC_Init();
 8001080:	f000 f8dc 	bl	800123c <_ZL11MX_CRC_Initv>
  MX_UART7_Init();
 8001084:	f000 fe24 	bl	8001cd0 <_ZL13MX_UART7_Initv>
  MX_TIM6_Init();
 8001088:	f000 fc38 	bl	80018fc <_ZL12MX_TIM6_Initv>
  MX_TIM7_Init();
 800108c:	f000 fc76 	bl	800197c <_ZL12MX_TIM7_Initv>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8001090:	2201      	movs	r2, #1
 8001092:	2101      	movs	r1, #1
 8001094:	481c      	ldr	r0, [pc, #112]	; (8001108 <main+0xc4>)
 8001096:	f004 febd 	bl	8005e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	2102      	movs	r1, #2
 800109e:	481b      	ldr	r0, [pc, #108]	; (800110c <main+0xc8>)
 80010a0:	f004 feb8 	bl	8005e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010aa:	4817      	ldr	r0, [pc, #92]	; (8001108 <main+0xc4>)
 80010ac:	f004 feb2 	bl	8005e14 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.);
 80010b0:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8001110 <main+0xcc>
 80010b4:	4817      	ldr	r0, [pc, #92]	; (8001114 <main+0xd0>)
 80010b6:	f7ff fc3b 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(16);
 80010ba:	2110      	movs	r1, #16
 80010bc:	4815      	ldr	r0, [pc, #84]	; (8001114 <main+0xd0>)
 80010be:	f7ff fed1 	bl	8000e64 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(1);
 80010c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010c6:	4813      	ldr	r0, [pc, #76]	; (8001114 <main+0xd0>)
 80010c8:	f7ff fea8 	bl	8000e1c <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 80010cc:	4811      	ldr	r0, [pc, #68]	; (8001114 <main+0xd0>)
 80010ce:	f7ff fc1e 	bl	800090e <_ZN7Stepper13StepperEnableEv>
//	stepperJ2.StepperSetMicrostep(1);
//	stepperJ2.StepperSetRatio(1);
//	stepperJ1.StepperSetFrequency(15842.0f);
	stepperJ3.StepperSetFrequency(0.);
 80010d2:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001110 <main+0xcc>
 80010d6:	4810      	ldr	r0, [pc, #64]	; (8001118 <main+0xd4>)
 80010d8:	f7ff fc2a 	bl	8000930 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(16);
 80010dc:	2110      	movs	r1, #16
 80010de:	480e      	ldr	r0, [pc, #56]	; (8001118 <main+0xd4>)
 80010e0:	f7ff fec0 	bl	8000e64 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(1);
 80010e4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <main+0xd4>)
 80010ea:	f7ff fe97 	bl	8000e1c <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 80010ee:	480a      	ldr	r0, [pc, #40]	; (8001118 <main+0xd4>)
 80010f0:	f7ff fc0d 	bl	800090e <_ZN7Stepper13StepperEnableEv>

//	stepperJ4.StepperSetMicrostep(1);
//	stepperJ4.StepperSetRatio(1);
#endif

	HAL_TIM_Base_Start_IT(&htim5);
 80010f4:	4809      	ldr	r0, [pc, #36]	; (800111c <main+0xd8>)
 80010f6:	f007 fb8d 	bl	8008814 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim6);
 80010fa:	4809      	ldr	r0, [pc, #36]	; (8001120 <main+0xdc>)
 80010fc:	f007 fb8a 	bl	8008814 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001100:	4808      	ldr	r0, [pc, #32]	; (8001124 <main+0xe0>)
 8001102:	f007 fb87 	bl	8008814 <HAL_TIM_Base_Start_IT>
//	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001106:	e7fe      	b.n	8001106 <main+0xc2>
 8001108:	58020400 	.word	0x58020400
 800110c:	58021000 	.word	0x58021000
 8001110:	00000000 	.word	0x00000000
 8001114:	24000980 	.word	0x24000980
 8001118:	240009a8 	.word	0x240009a8
 800111c:	240003e8 	.word	0x240003e8
 8001120:	24000434 	.word	0x24000434
 8001124:	24000480 	.word	0x24000480

08001128 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b09c      	sub	sp, #112	; 0x70
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001132:	224c      	movs	r2, #76	; 0x4c
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f00b faa2 	bl	800c680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2220      	movs	r2, #32
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f00b fa9c 	bl	800c680 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001148:	2002      	movs	r0, #2
 800114a:	f004 fe97 	bl	8005e7c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4b38      	ldr	r3, [pc, #224]	; (8001234 <_Z18SystemClock_Configv+0x10c>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	4a37      	ldr	r2, [pc, #220]	; (8001234 <_Z18SystemClock_Configv+0x10c>)
 8001158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800115c:	6193      	str	r3, [r2, #24]
 800115e:	4b35      	ldr	r3, [pc, #212]	; (8001234 <_Z18SystemClock_Configv+0x10c>)
 8001160:	699b      	ldr	r3, [r3, #24]
 8001162:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	4b33      	ldr	r3, [pc, #204]	; (8001238 <_Z18SystemClock_Configv+0x110>)
 800116a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116c:	4a32      	ldr	r2, [pc, #200]	; (8001238 <_Z18SystemClock_Configv+0x110>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001174:	4b30      	ldr	r3, [pc, #192]	; (8001238 <_Z18SystemClock_Configv+0x110>)
 8001176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001178:	f003 0301 	and.w	r3, r3, #1
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001180:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <_Z18SystemClock_Configv+0x10c>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800118c:	bf14      	ite	ne
 800118e:	2301      	movne	r3, #1
 8001190:	2300      	moveq	r3, #0
 8001192:	b2db      	uxtb	r3, r3
 8001194:	2b00      	cmp	r3, #0
 8001196:	d000      	beq.n	800119a <_Z18SystemClock_Configv+0x72>
 8001198:	e7f2      	b.n	8001180 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800119a:	2302      	movs	r3, #2
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800119e:	2301      	movs	r3, #1
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a2:	2340      	movs	r3, #64	; 0x40
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a6:	2302      	movs	r3, #2
 80011a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011aa:	2300      	movs	r3, #0
 80011ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011ae:	2304      	movs	r3, #4
 80011b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80011b2:	233c      	movs	r3, #60	; 0x3c
 80011b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011b6:	2302      	movs	r3, #2
 80011b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80011ba:	2306      	movs	r3, #6
 80011bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011be:	2302      	movs	r3, #2
 80011c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011c2:	230c      	movs	r3, #12
 80011c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011c6:	2300      	movs	r3, #0
 80011c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d2:	4618      	mov	r0, r3
 80011d4:	f004 fe8c 	bl	8005ef0 <HAL_RCC_OscConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	bf14      	ite	ne
 80011de:	2301      	movne	r3, #1
 80011e0:	2300      	moveq	r3, #0
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80011e8:	f000 ffb6 	bl	8002158 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ec:	233f      	movs	r3, #63	; 0x3f
 80011ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f0:	2303      	movs	r3, #3
 80011f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011f8:	2308      	movs	r3, #8
 80011fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011fc:	2340      	movs	r3, #64	; 0x40
 80011fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001200:	2340      	movs	r3, #64	; 0x40
 8001202:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001208:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800120a:	2340      	movs	r3, #64	; 0x40
 800120c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800120e:	1d3b      	adds	r3, r7, #4
 8001210:	2104      	movs	r1, #4
 8001212:	4618      	mov	r0, r3
 8001214:	f005 fa98 	bl	8006748 <HAL_RCC_ClockConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf14      	ite	ne
 800121e:	2301      	movne	r3, #1
 8001220:	2300      	moveq	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8001228:	f000 ff96 	bl	8002158 <Error_Handler>
  }
}
 800122c:	bf00      	nop
 800122e:	3770      	adds	r7, #112	; 0x70
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	58024800 	.word	0x58024800
 8001238:	58000400 	.word	0x58000400

0800123c <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001240:	4b10      	ldr	r3, [pc, #64]	; (8001284 <_ZL11MX_CRC_Initv+0x48>)
 8001242:	4a11      	ldr	r2, [pc, #68]	; (8001288 <_ZL11MX_CRC_Initv+0x4c>)
 8001244:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <_ZL11MX_CRC_Initv+0x48>)
 8001248:	2200      	movs	r2, #0
 800124a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800124c:	4b0d      	ldr	r3, [pc, #52]	; (8001284 <_ZL11MX_CRC_Initv+0x48>)
 800124e:	2200      	movs	r2, #0
 8001250:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <_ZL11MX_CRC_Initv+0x48>)
 8001254:	2200      	movs	r2, #0
 8001256:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001258:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <_ZL11MX_CRC_Initv+0x48>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <_ZL11MX_CRC_Initv+0x48>)
 8001260:	2201      	movs	r2, #1
 8001262:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001264:	4807      	ldr	r0, [pc, #28]	; (8001284 <_ZL11MX_CRC_Initv+0x48>)
 8001266:	f002 f917 	bl	8003498 <HAL_CRC_Init>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	bf14      	ite	ne
 8001270:	2301      	movne	r3, #1
 8001272:	2300      	moveq	r3, #0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 800127a:	f000 ff6d 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2400020c 	.word	0x2400020c
 8001288:	58024c00 	.word	0x58024c00

0800128c <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001290:	4b29      	ldr	r3, [pc, #164]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 8001292:	4a2a      	ldr	r2, [pc, #168]	; (800133c <_ZL12MX_SPI3_Initv+0xb0>)
 8001294:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001296:	4b28      	ldr	r3, [pc, #160]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 8001298:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800129c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012a6:	2203      	movs	r2, #3
 80012a8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012aa:	4b23      	ldr	r3, [pc, #140]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b0:	4b21      	ldr	r3, [pc, #132]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80012b6:	4b20      	ldr	r3, [pc, #128]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80012bc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012be:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c4:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d0:	4b19      	ldr	r3, [pc, #100]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80012d6:	4b18      	ldr	r3, [pc, #96]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012d8:	2200      	movs	r2, #0
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80012fc:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 80012fe:	2200      	movs	r2, #0
 8001300:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001302:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 8001304:	2200      	movs	r2, #0
 8001306:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 800130a:	2200      	movs	r2, #0
 800130c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800130e:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 8001310:	2200      	movs	r2, #0
 8001312:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 8001316:	2200      	movs	r2, #0
 8001318:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800131a:	4807      	ldr	r0, [pc, #28]	; (8001338 <_ZL12MX_SPI3_Initv+0xac>)
 800131c:	f007 f902 	bl	8008524 <HAL_SPI_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	bf14      	ite	ne
 8001326:	2301      	movne	r3, #1
 8001328:	2300      	moveq	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <_ZL12MX_SPI3_Initv+0xa8>
  {
    Error_Handler();
 8001330:	f000 ff12 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	24000230 	.word	0x24000230
 800133c:	40003c00 	.word	0x40003c00

08001340 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b09a      	sub	sp, #104	; 0x68
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001360:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	222c      	movs	r2, #44	; 0x2c
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f00b f980 	bl	800c680 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001380:	4b53      	ldr	r3, [pc, #332]	; (80014d0 <_ZL12MX_TIM1_Initv+0x190>)
 8001382:	4a54      	ldr	r2, [pc, #336]	; (80014d4 <_ZL12MX_TIM1_Initv+0x194>)
 8001384:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8001386:	4b52      	ldr	r3, [pc, #328]	; (80014d0 <_ZL12MX_TIM1_Initv+0x190>)
 8001388:	22c7      	movs	r2, #199	; 0xc7
 800138a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138c:	4b50      	ldr	r3, [pc, #320]	; (80014d0 <_ZL12MX_TIM1_Initv+0x190>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8001392:	4b4f      	ldr	r3, [pc, #316]	; (80014d0 <_ZL12MX_TIM1_Initv+0x190>)
 8001394:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001398:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139a:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <_ZL12MX_TIM1_Initv+0x190>)
 800139c:	2200      	movs	r2, #0
 800139e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a0:	4b4b      	ldr	r3, [pc, #300]	; (80014d0 <_ZL12MX_TIM1_Initv+0x190>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013a6:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <_ZL12MX_TIM1_Initv+0x190>)
 80013a8:	2280      	movs	r2, #128	; 0x80
 80013aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013ac:	4848      	ldr	r0, [pc, #288]	; (80014d0 <_ZL12MX_TIM1_Initv+0x190>)
 80013ae:	f007 f9da 	bl	8008766 <HAL_TIM_Base_Init>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bf14      	ite	ne
 80013b8:	2301      	movne	r3, #1
 80013ba:	2300      	moveq	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 80013c2:	f000 fec9 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ca:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013cc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013d0:	4619      	mov	r1, r3
 80013d2:	483f      	ldr	r0, [pc, #252]	; (80014d0 <_ZL12MX_TIM1_Initv+0x190>)
 80013d4:	f007 fe3a 	bl	800904c <HAL_TIM_ConfigClockSource>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	bf14      	ite	ne
 80013de:	2301      	movne	r3, #1
 80013e0:	2300      	moveq	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 80013e8:	f000 feb6 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013ec:	4838      	ldr	r0, [pc, #224]	; (80014d0 <_ZL12MX_TIM1_Initv+0x190>)
 80013ee:	f007 fa89 	bl	8008904 <HAL_TIM_PWM_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf14      	ite	ne
 80013f8:	2301      	movne	r3, #1
 80013fa:	2300      	moveq	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 8001402:	f000 fea9 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800140a:	2300      	movs	r3, #0
 800140c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140e:	2300      	movs	r3, #0
 8001410:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001412:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001416:	4619      	mov	r1, r3
 8001418:	482d      	ldr	r0, [pc, #180]	; (80014d0 <_ZL12MX_TIM1_Initv+0x190>)
 800141a:	f008 fb6b 	bl	8009af4 <HAL_TIMEx_MasterConfigSynchronization>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	bf14      	ite	ne
 8001424:	2301      	movne	r3, #1
 8001426:	2300      	moveq	r3, #0
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 800142e:	f000 fe93 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001432:	2360      	movs	r3, #96	; 0x60
 8001434:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8001436:	f240 1339 	movw	r3, #313	; 0x139
 800143a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143c:	2300      	movs	r3, #0
 800143e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001440:	2300      	movs	r3, #0
 8001442:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001448:	2300      	movs	r3, #0
 800144a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001450:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001454:	2204      	movs	r2, #4
 8001456:	4619      	mov	r1, r3
 8001458:	481d      	ldr	r0, [pc, #116]	; (80014d0 <_ZL12MX_TIM1_Initv+0x190>)
 800145a:	f007 fce3 	bl	8008e24 <HAL_TIM_PWM_ConfigChannel>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	bf14      	ite	ne
 8001464:	2301      	movne	r3, #1
 8001466:	2300      	moveq	r3, #0
 8001468:	b2db      	uxtb	r3, r3
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 800146e:	f000 fe73 	bl	8002158 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001494:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	4619      	mov	r1, r3
 80014a6:	480a      	ldr	r0, [pc, #40]	; (80014d0 <_ZL12MX_TIM1_Initv+0x190>)
 80014a8:	f008 fbb2 	bl	8009c10 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	bf14      	ite	ne
 80014b2:	2301      	movne	r3, #1
 80014b4:	2300      	moveq	r3, #0
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <_ZL12MX_TIM1_Initv+0x180>
  {
    Error_Handler();
 80014bc:	f000 fe4c 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014c0:	4803      	ldr	r0, [pc, #12]	; (80014d0 <_ZL12MX_TIM1_Initv+0x190>)
 80014c2:	f001 f8dd 	bl	8002680 <HAL_TIM_MspPostInit>

}
 80014c6:	bf00      	nop
 80014c8:	3768      	adds	r7, #104	; 0x68
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	240002b8 	.word	0x240002b8
 80014d4:	40010000 	.word	0x40010000

080014d8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08e      	sub	sp, #56	; 0x38
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f8:	463b      	mov	r3, r7
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	605a      	str	r2, [r3, #4]
 8001500:	609a      	str	r2, [r3, #8]
 8001502:	60da      	str	r2, [r3, #12]
 8001504:	611a      	str	r2, [r3, #16]
 8001506:	615a      	str	r2, [r3, #20]
 8001508:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800150a:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <_ZL12MX_TIM2_Initv+0x11c>)
 800150c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001510:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8001512:	4b38      	ldr	r3, [pc, #224]	; (80015f4 <_ZL12MX_TIM2_Initv+0x11c>)
 8001514:	22c7      	movs	r2, #199	; 0xc7
 8001516:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001518:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <_ZL12MX_TIM2_Initv+0x11c>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800151e:	4b35      	ldr	r3, [pc, #212]	; (80015f4 <_ZL12MX_TIM2_Initv+0x11c>)
 8001520:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001524:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001526:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <_ZL12MX_TIM2_Initv+0x11c>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800152c:	4b31      	ldr	r3, [pc, #196]	; (80015f4 <_ZL12MX_TIM2_Initv+0x11c>)
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001532:	4830      	ldr	r0, [pc, #192]	; (80015f4 <_ZL12MX_TIM2_Initv+0x11c>)
 8001534:	f007 f917 	bl	8008766 <HAL_TIM_Base_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	bf14      	ite	ne
 800153e:	2301      	movne	r3, #1
 8001540:	2300      	moveq	r3, #0
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8001548:	f000 fe06 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001550:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001556:	4619      	mov	r1, r3
 8001558:	4826      	ldr	r0, [pc, #152]	; (80015f4 <_ZL12MX_TIM2_Initv+0x11c>)
 800155a:	f007 fd77 	bl	800904c <HAL_TIM_ConfigClockSource>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	bf14      	ite	ne
 8001564:	2301      	movne	r3, #1
 8001566:	2300      	moveq	r3, #0
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 800156e:	f000 fdf3 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001572:	4820      	ldr	r0, [pc, #128]	; (80015f4 <_ZL12MX_TIM2_Initv+0x11c>)
 8001574:	f007 f9c6 	bl	8008904 <HAL_TIM_PWM_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	bf14      	ite	ne
 800157e:	2301      	movne	r3, #1
 8001580:	2300      	moveq	r3, #0
 8001582:	b2db      	uxtb	r3, r3
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8001588:	f000 fde6 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	4619      	mov	r1, r3
 800159a:	4816      	ldr	r0, [pc, #88]	; (80015f4 <_ZL12MX_TIM2_Initv+0x11c>)
 800159c:	f008 faaa 	bl	8009af4 <HAL_TIMEx_MasterConfigSynchronization>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	bf14      	ite	ne
 80015a6:	2301      	movne	r3, #1
 80015a8:	2300      	moveq	r3, #0
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 80015b0:	f000 fdd2 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b4:	2360      	movs	r3, #96	; 0x60
 80015b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80015b8:	f240 1339 	movw	r3, #313	; 0x139
 80015bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015be:	2300      	movs	r3, #0
 80015c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015c6:	463b      	mov	r3, r7
 80015c8:	2208      	movs	r2, #8
 80015ca:	4619      	mov	r1, r3
 80015cc:	4809      	ldr	r0, [pc, #36]	; (80015f4 <_ZL12MX_TIM2_Initv+0x11c>)
 80015ce:	f007 fc29 	bl	8008e24 <HAL_TIM_PWM_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf14      	ite	ne
 80015d8:	2301      	movne	r3, #1
 80015da:	2300      	moveq	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 80015e2:	f000 fdb9 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015e6:	4803      	ldr	r0, [pc, #12]	; (80015f4 <_ZL12MX_TIM2_Initv+0x11c>)
 80015e8:	f001 f84a 	bl	8002680 <HAL_TIM_MspPostInit>

}
 80015ec:	bf00      	nop
 80015ee:	3738      	adds	r7, #56	; 0x38
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	24000304 	.word	0x24000304

080015f8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08e      	sub	sp, #56	; 0x38
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001618:	463b      	mov	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]
 8001626:	615a      	str	r2, [r3, #20]
 8001628:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800162a:	4b3a      	ldr	r3, [pc, #232]	; (8001714 <_ZL12MX_TIM3_Initv+0x11c>)
 800162c:	4a3a      	ldr	r2, [pc, #232]	; (8001718 <_ZL12MX_TIM3_Initv+0x120>)
 800162e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8001630:	4b38      	ldr	r3, [pc, #224]	; (8001714 <_ZL12MX_TIM3_Initv+0x11c>)
 8001632:	22c7      	movs	r2, #199	; 0xc7
 8001634:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001636:	4b37      	ldr	r3, [pc, #220]	; (8001714 <_ZL12MX_TIM3_Initv+0x11c>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 800163c:	4b35      	ldr	r3, [pc, #212]	; (8001714 <_ZL12MX_TIM3_Initv+0x11c>)
 800163e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001642:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001644:	4b33      	ldr	r3, [pc, #204]	; (8001714 <_ZL12MX_TIM3_Initv+0x11c>)
 8001646:	2200      	movs	r2, #0
 8001648:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800164a:	4b32      	ldr	r3, [pc, #200]	; (8001714 <_ZL12MX_TIM3_Initv+0x11c>)
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001650:	4830      	ldr	r0, [pc, #192]	; (8001714 <_ZL12MX_TIM3_Initv+0x11c>)
 8001652:	f007 f888 	bl	8008766 <HAL_TIM_Base_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	bf14      	ite	ne
 800165c:	2301      	movne	r3, #1
 800165e:	2300      	moveq	r3, #0
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8001666:	f000 fd77 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001670:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001674:	4619      	mov	r1, r3
 8001676:	4827      	ldr	r0, [pc, #156]	; (8001714 <_ZL12MX_TIM3_Initv+0x11c>)
 8001678:	f007 fce8 	bl	800904c <HAL_TIM_ConfigClockSource>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	bf14      	ite	ne
 8001682:	2301      	movne	r3, #1
 8001684:	2300      	moveq	r3, #0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 800168c:	f000 fd64 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001690:	4820      	ldr	r0, [pc, #128]	; (8001714 <_ZL12MX_TIM3_Initv+0x11c>)
 8001692:	f007 f937 	bl	8008904 <HAL_TIM_PWM_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf14      	ite	ne
 800169c:	2301      	movne	r3, #1
 800169e:	2300      	moveq	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 80016a6:	f000 fd57 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016b2:	f107 031c 	add.w	r3, r7, #28
 80016b6:	4619      	mov	r1, r3
 80016b8:	4816      	ldr	r0, [pc, #88]	; (8001714 <_ZL12MX_TIM3_Initv+0x11c>)
 80016ba:	f008 fa1b 	bl	8009af4 <HAL_TIMEx_MasterConfigSynchronization>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	bf14      	ite	ne
 80016c4:	2301      	movne	r3, #1
 80016c6:	2300      	moveq	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 80016ce:	f000 fd43 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016d2:	2360      	movs	r3, #96	; 0x60
 80016d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80016d6:	f240 1339 	movw	r3, #313	; 0x139
 80016da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016dc:	2300      	movs	r3, #0
 80016de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016e4:	463b      	mov	r3, r7
 80016e6:	2200      	movs	r2, #0
 80016e8:	4619      	mov	r1, r3
 80016ea:	480a      	ldr	r0, [pc, #40]	; (8001714 <_ZL12MX_TIM3_Initv+0x11c>)
 80016ec:	f007 fb9a 	bl	8008e24 <HAL_TIM_PWM_ConfigChannel>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	bf14      	ite	ne
 80016f6:	2301      	movne	r3, #1
 80016f8:	2300      	moveq	r3, #0
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 8001700:	f000 fd2a 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001704:	4803      	ldr	r0, [pc, #12]	; (8001714 <_ZL12MX_TIM3_Initv+0x11c>)
 8001706:	f000 ffbb 	bl	8002680 <HAL_TIM_MspPostInit>

}
 800170a:	bf00      	nop
 800170c:	3738      	adds	r7, #56	; 0x38
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	24000350 	.word	0x24000350
 8001718:	40000400 	.word	0x40000400

0800171c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08e      	sub	sp, #56	; 0x38
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800173c:	463b      	mov	r3, r7
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
 8001748:	611a      	str	r2, [r3, #16]
 800174a:	615a      	str	r2, [r3, #20]
 800174c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800174e:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <_ZL12MX_TIM4_Initv+0x11c>)
 8001750:	4a3a      	ldr	r2, [pc, #232]	; (800183c <_ZL12MX_TIM4_Initv+0x120>)
 8001752:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8001754:	4b38      	ldr	r3, [pc, #224]	; (8001838 <_ZL12MX_TIM4_Initv+0x11c>)
 8001756:	22c7      	movs	r2, #199	; 0xc7
 8001758:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175a:	4b37      	ldr	r3, [pc, #220]	; (8001838 <_ZL12MX_TIM4_Initv+0x11c>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 8001760:	4b35      	ldr	r3, [pc, #212]	; (8001838 <_ZL12MX_TIM4_Initv+0x11c>)
 8001762:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001766:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001768:	4b33      	ldr	r3, [pc, #204]	; (8001838 <_ZL12MX_TIM4_Initv+0x11c>)
 800176a:	2200      	movs	r2, #0
 800176c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800176e:	4b32      	ldr	r3, [pc, #200]	; (8001838 <_ZL12MX_TIM4_Initv+0x11c>)
 8001770:	2280      	movs	r2, #128	; 0x80
 8001772:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001774:	4830      	ldr	r0, [pc, #192]	; (8001838 <_ZL12MX_TIM4_Initv+0x11c>)
 8001776:	f006 fff6 	bl	8008766 <HAL_TIM_Base_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	bf14      	ite	ne
 8001780:	2301      	movne	r3, #1
 8001782:	2300      	moveq	r3, #0
 8001784:	b2db      	uxtb	r3, r3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 800178a:	f000 fce5 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800178e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001794:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001798:	4619      	mov	r1, r3
 800179a:	4827      	ldr	r0, [pc, #156]	; (8001838 <_ZL12MX_TIM4_Initv+0x11c>)
 800179c:	f007 fc56 	bl	800904c <HAL_TIM_ConfigClockSource>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	bf14      	ite	ne
 80017a6:	2301      	movne	r3, #1
 80017a8:	2300      	moveq	r3, #0
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 80017b0:	f000 fcd2 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017b4:	4820      	ldr	r0, [pc, #128]	; (8001838 <_ZL12MX_TIM4_Initv+0x11c>)
 80017b6:	f007 f8a5 	bl	8008904 <HAL_TIM_PWM_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bf14      	ite	ne
 80017c0:	2301      	movne	r3, #1
 80017c2:	2300      	moveq	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 80017ca:	f000 fcc5 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4619      	mov	r1, r3
 80017dc:	4816      	ldr	r0, [pc, #88]	; (8001838 <_ZL12MX_TIM4_Initv+0x11c>)
 80017de:	f008 f989 	bl	8009af4 <HAL_TIMEx_MasterConfigSynchronization>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf14      	ite	ne
 80017e8:	2301      	movne	r3, #1
 80017ea:	2300      	moveq	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 80017f2:	f000 fcb1 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f6:	2360      	movs	r3, #96	; 0x60
 80017f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80017fa:	f240 1339 	movw	r3, #313	; 0x139
 80017fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001808:	463b      	mov	r3, r7
 800180a:	2208      	movs	r2, #8
 800180c:	4619      	mov	r1, r3
 800180e:	480a      	ldr	r0, [pc, #40]	; (8001838 <_ZL12MX_TIM4_Initv+0x11c>)
 8001810:	f007 fb08 	bl	8008e24 <HAL_TIM_PWM_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf14      	ite	ne
 800181a:	2301      	movne	r3, #1
 800181c:	2300      	moveq	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <_ZL12MX_TIM4_Initv+0x10c>
  {
    Error_Handler();
 8001824:	f000 fc98 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001828:	4803      	ldr	r0, [pc, #12]	; (8001838 <_ZL12MX_TIM4_Initv+0x11c>)
 800182a:	f000 ff29 	bl	8002680 <HAL_TIM_MspPostInit>

}
 800182e:	bf00      	nop
 8001830:	3738      	adds	r7, #56	; 0x38
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2400039c 	.word	0x2400039c
 800183c:	40000800 	.word	0x40000800

08001840 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800185e:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001860:	4a25      	ldr	r2, [pc, #148]	; (80018f8 <_ZL12MX_TIM5_Initv+0xb8>)
 8001862:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8001864:	4b23      	ldr	r3, [pc, #140]	; (80018f4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001866:	22c7      	movs	r2, #199	; 0xc7
 8001868:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <_ZL12MX_TIM5_Initv+0xb4>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8001870:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001872:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001876:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <_ZL12MX_TIM5_Initv+0xb4>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800187e:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001880:	2280      	movs	r2, #128	; 0x80
 8001882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001884:	481b      	ldr	r0, [pc, #108]	; (80018f4 <_ZL12MX_TIM5_Initv+0xb4>)
 8001886:	f006 ff6e 	bl	8008766 <HAL_TIM_Base_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	bf14      	ite	ne
 8001890:	2301      	movne	r3, #1
 8001892:	2300      	moveq	r3, #0
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <_ZL12MX_TIM5_Initv+0x5e>
  {
    Error_Handler();
 800189a:	f000 fc5d 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4619      	mov	r1, r3
 80018aa:	4812      	ldr	r0, [pc, #72]	; (80018f4 <_ZL12MX_TIM5_Initv+0xb4>)
 80018ac:	f007 fbce 	bl	800904c <HAL_TIM_ConfigClockSource>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf14      	ite	ne
 80018b6:	2301      	movne	r3, #1
 80018b8:	2300      	moveq	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <_ZL12MX_TIM5_Initv+0x84>
  {
    Error_Handler();
 80018c0:	f000 fc4a 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018cc:	1d3b      	adds	r3, r7, #4
 80018ce:	4619      	mov	r1, r3
 80018d0:	4808      	ldr	r0, [pc, #32]	; (80018f4 <_ZL12MX_TIM5_Initv+0xb4>)
 80018d2:	f008 f90f 	bl	8009af4 <HAL_TIMEx_MasterConfigSynchronization>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	bf14      	ite	ne
 80018dc:	2301      	movne	r3, #1
 80018de:	2300      	moveq	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <_ZL12MX_TIM5_Initv+0xaa>
  {
    Error_Handler();
 80018e6:	f000 fc37 	bl	8002158 <Error_Handler>
  /* USER CODE BEGIN TIM5_Init 2 */
//  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE END TIM5_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	3720      	adds	r7, #32
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	240003e8 	.word	0x240003e8
 80018f8:	40000c00 	.word	0x40000c00

080018fc <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001902:	1d3b      	adds	r3, r7, #4
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800190c:	4b19      	ldr	r3, [pc, #100]	; (8001974 <_ZL12MX_TIM6_Initv+0x78>)
 800190e:	4a1a      	ldr	r2, [pc, #104]	; (8001978 <_ZL12MX_TIM6_Initv+0x7c>)
 8001910:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 8001912:	4b18      	ldr	r3, [pc, #96]	; (8001974 <_ZL12MX_TIM6_Initv+0x78>)
 8001914:	22c7      	movs	r2, #199	; 0xc7
 8001916:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <_ZL12MX_TIM6_Initv+0x78>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1200-1;
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <_ZL12MX_TIM6_Initv+0x78>)
 8001920:	f240 42af 	movw	r2, #1199	; 0x4af
 8001924:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <_ZL12MX_TIM6_Initv+0x78>)
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800192c:	4811      	ldr	r0, [pc, #68]	; (8001974 <_ZL12MX_TIM6_Initv+0x78>)
 800192e:	f006 ff1a 	bl	8008766 <HAL_TIM_Base_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf14      	ite	ne
 8001938:	2301      	movne	r3, #1
 800193a:	2300      	moveq	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8001942:	f000 fc09 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4619      	mov	r1, r3
 8001952:	4808      	ldr	r0, [pc, #32]	; (8001974 <_ZL12MX_TIM6_Initv+0x78>)
 8001954:	f008 f8ce 	bl	8009af4 <HAL_TIMEx_MasterConfigSynchronization>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	bf14      	ite	ne
 800195e:	2301      	movne	r3, #1
 8001960:	2300      	moveq	r3, #0
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8001968:	f000 fbf6 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800196c:	bf00      	nop
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	24000434 	.word	0x24000434
 8001978:	40001000 	.word	0x40001000

0800197c <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <_ZL12MX_TIM7_Initv+0x78>)
 800198e:	4a1a      	ldr	r2, [pc, #104]	; (80019f8 <_ZL12MX_TIM7_Initv+0x7c>)
 8001990:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8001992:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <_ZL12MX_TIM7_Initv+0x78>)
 8001994:	22c7      	movs	r2, #199	; 0xc7
 8001996:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001998:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <_ZL12MX_TIM7_Initv+0x78>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 24000-1;
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <_ZL12MX_TIM7_Initv+0x78>)
 80019a0:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80019a4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <_ZL12MX_TIM7_Initv+0x78>)
 80019a8:	2280      	movs	r2, #128	; 0x80
 80019aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019ac:	4811      	ldr	r0, [pc, #68]	; (80019f4 <_ZL12MX_TIM7_Initv+0x78>)
 80019ae:	f006 feda 	bl	8008766 <HAL_TIM_Base_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	bf14      	ite	ne
 80019b8:	2301      	movne	r3, #1
 80019ba:	2300      	moveq	r3, #0
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 80019c2:	f000 fbc9 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	4619      	mov	r1, r3
 80019d2:	4808      	ldr	r0, [pc, #32]	; (80019f4 <_ZL12MX_TIM7_Initv+0x78>)
 80019d4:	f008 f88e 	bl	8009af4 <HAL_TIMEx_MasterConfigSynchronization>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bf14      	ite	ne
 80019de:	2301      	movne	r3, #1
 80019e0:	2300      	moveq	r3, #0
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 80019e8:	f000 fbb6 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	24000480 	.word	0x24000480
 80019f8:	40001400 	.word	0x40001400

080019fc <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a02:	463b      	mov	r3, r7
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <_ZL13MX_TIM12_Initv+0x80>)
 8001a10:	4a1b      	ldr	r2, [pc, #108]	; (8001a80 <_ZL13MX_TIM12_Initv+0x84>)
 8001a12:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8001a14:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <_ZL13MX_TIM12_Initv+0x80>)
 8001a16:	22c7      	movs	r2, #199	; 0xc7
 8001a18:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <_ZL13MX_TIM12_Initv+0x80>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 12000-1;
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <_ZL13MX_TIM12_Initv+0x80>)
 8001a22:	f642 62df 	movw	r2, #11999	; 0x2edf
 8001a26:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a28:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <_ZL13MX_TIM12_Initv+0x80>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <_ZL13MX_TIM12_Initv+0x80>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001a34:	4811      	ldr	r0, [pc, #68]	; (8001a7c <_ZL13MX_TIM12_Initv+0x80>)
 8001a36:	f006 fe96 	bl	8008766 <HAL_TIM_Base_Init>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	bf14      	ite	ne
 8001a40:	2301      	movne	r3, #1
 8001a42:	2300      	moveq	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <_ZL13MX_TIM12_Initv+0x52>
  {
    Error_Handler();
 8001a4a:	f000 fb85 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a52:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001a54:	463b      	mov	r3, r7
 8001a56:	4619      	mov	r1, r3
 8001a58:	4808      	ldr	r0, [pc, #32]	; (8001a7c <_ZL13MX_TIM12_Initv+0x80>)
 8001a5a:	f007 faf7 	bl	800904c <HAL_TIM_ConfigClockSource>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	bf14      	ite	ne
 8001a64:	2301      	movne	r3, #1
 8001a66:	2300      	moveq	r3, #0
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <_ZL13MX_TIM12_Initv+0x76>
  {
    Error_Handler();
 8001a6e:	f000 fb73 	bl	8002158 <Error_Handler>
  /* USER CODE BEGIN TIM12_Init 2 */
//  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE END TIM12_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	240004cc 	.word	0x240004cc
 8001a80:	40001800 	.word	0x40001800

08001a84 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b09a      	sub	sp, #104	; 0x68
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]
 8001a94:	609a      	str	r2, [r3, #8]
 8001a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001aa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
 8001ab4:	615a      	str	r2, [r3, #20]
 8001ab6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	222c      	movs	r2, #44	; 0x2c
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00a fdde 	bl	800c680 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001ac4:	4b4e      	ldr	r3, [pc, #312]	; (8001c00 <_ZL13MX_TIM15_Initv+0x17c>)
 8001ac6:	4a4f      	ldr	r2, [pc, #316]	; (8001c04 <_ZL13MX_TIM15_Initv+0x180>)
 8001ac8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 8001aca:	4b4d      	ldr	r3, [pc, #308]	; (8001c00 <_ZL13MX_TIM15_Initv+0x17c>)
 8001acc:	22ef      	movs	r2, #239	; 0xef
 8001ace:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad0:	4b4b      	ldr	r3, [pc, #300]	; (8001c00 <_ZL13MX_TIM15_Initv+0x17c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 8001ad6:	4b4a      	ldr	r3, [pc, #296]	; (8001c00 <_ZL13MX_TIM15_Initv+0x17c>)
 8001ad8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001adc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ade:	4b48      	ldr	r3, [pc, #288]	; (8001c00 <_ZL13MX_TIM15_Initv+0x17c>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001ae4:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <_ZL13MX_TIM15_Initv+0x17c>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aea:	4b45      	ldr	r3, [pc, #276]	; (8001c00 <_ZL13MX_TIM15_Initv+0x17c>)
 8001aec:	2280      	movs	r2, #128	; 0x80
 8001aee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001af0:	4843      	ldr	r0, [pc, #268]	; (8001c00 <_ZL13MX_TIM15_Initv+0x17c>)
 8001af2:	f006 fe38 	bl	8008766 <HAL_TIM_Base_Init>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	bf14      	ite	ne
 8001afc:	2301      	movne	r3, #1
 8001afe:	2300      	moveq	r3, #0
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <_ZL13MX_TIM15_Initv+0x86>
  {
    Error_Handler();
 8001b06:	f000 fb27 	bl	8002158 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001b10:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b14:	4619      	mov	r1, r3
 8001b16:	483a      	ldr	r0, [pc, #232]	; (8001c00 <_ZL13MX_TIM15_Initv+0x17c>)
 8001b18:	f007 fa98 	bl	800904c <HAL_TIM_ConfigClockSource>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <_ZL13MX_TIM15_Initv+0xac>
  {
    Error_Handler();
 8001b2c:	f000 fb14 	bl	8002158 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001b30:	4833      	ldr	r0, [pc, #204]	; (8001c00 <_ZL13MX_TIM15_Initv+0x17c>)
 8001b32:	f006 fee7 	bl	8008904 <HAL_TIM_PWM_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	bf14      	ite	ne
 8001b3c:	2301      	movne	r3, #1
 8001b3e:	2300      	moveq	r3, #0
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <_ZL13MX_TIM15_Initv+0xc6>
  {
    Error_Handler();
 8001b46:	f000 fb07 	bl	8002158 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001b52:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b56:	4619      	mov	r1, r3
 8001b58:	4829      	ldr	r0, [pc, #164]	; (8001c00 <_ZL13MX_TIM15_Initv+0x17c>)
 8001b5a:	f007 ffcb 	bl	8009af4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf14      	ite	ne
 8001b64:	2301      	movne	r3, #1
 8001b66:	2300      	moveq	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <_ZL13MX_TIM15_Initv+0xee>
  {
    Error_Handler();
 8001b6e:	f000 faf3 	bl	8002158 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b72:	2360      	movs	r3, #96	; 0x60
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8001b76:	f240 1339 	movw	r3, #313	; 0x139
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b80:	2300      	movs	r3, #0
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b94:	2204      	movs	r2, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	4819      	ldr	r0, [pc, #100]	; (8001c00 <_ZL13MX_TIM15_Initv+0x17c>)
 8001b9a:	f007 f943 	bl	8008e24 <HAL_TIM_PWM_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf14      	ite	ne
 8001ba4:	2301      	movne	r3, #1
 8001ba6:	2300      	moveq	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <_ZL13MX_TIM15_Initv+0x12e>
  {
    Error_Handler();
 8001bae:	f000 fad3 	bl	8002158 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4809      	ldr	r0, [pc, #36]	; (8001c00 <_ZL13MX_TIM15_Initv+0x17c>)
 8001bda:	f008 f819 	bl	8009c10 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf14      	ite	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2300      	moveq	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <_ZL13MX_TIM15_Initv+0x16e>
  {
    Error_Handler();
 8001bee:	f000 fab3 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001bf2:	4803      	ldr	r0, [pc, #12]	; (8001c00 <_ZL13MX_TIM15_Initv+0x17c>)
 8001bf4:	f000 fd44 	bl	8002680 <HAL_TIM_MspPostInit>

}
 8001bf8:	bf00      	nop
 8001bfa:	3768      	adds	r7, #104	; 0x68
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	24000518 	.word	0x24000518
 8001c04:	40014000 	.word	0x40014000

08001c08 <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001c0c:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <_ZL13MX_UART4_Initv+0xbc>)
 8001c0e:	4a2e      	ldr	r2, [pc, #184]	; (8001cc8 <_ZL13MX_UART4_Initv+0xc0>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8001c12:	4b2c      	ldr	r3, [pc, #176]	; (8001cc4 <_ZL13MX_UART4_Initv+0xbc>)
 8001c14:	4a2d      	ldr	r2, [pc, #180]	; (8001ccc <_ZL13MX_UART4_Initv+0xc4>)
 8001c16:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <_ZL13MX_UART4_Initv+0xbc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <_ZL13MX_UART4_Initv+0xbc>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001c24:	4b27      	ldr	r3, [pc, #156]	; (8001cc4 <_ZL13MX_UART4_Initv+0xbc>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001c2a:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <_ZL13MX_UART4_Initv+0xbc>)
 8001c2c:	220c      	movs	r2, #12
 8001c2e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c30:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <_ZL13MX_UART4_Initv+0xbc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c36:	4b23      	ldr	r3, [pc, #140]	; (8001cc4 <_ZL13MX_UART4_Initv+0xbc>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <_ZL13MX_UART4_Initv+0xbc>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c42:	4b20      	ldr	r3, [pc, #128]	; (8001cc4 <_ZL13MX_UART4_Initv+0xbc>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c48:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <_ZL13MX_UART4_Initv+0xbc>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001c4e:	481d      	ldr	r0, [pc, #116]	; (8001cc4 <_ZL13MX_UART4_Initv+0xbc>)
 8001c50:	f008 f87a 	bl	8009d48 <HAL_UART_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	bf14      	ite	ne
 8001c5a:	2301      	movne	r3, #1
 8001c5c:	2300      	moveq	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <_ZL13MX_UART4_Initv+0x60>
  {
    Error_Handler();
 8001c64:	f000 fa78 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001c68:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8001c6c:	4815      	ldr	r0, [pc, #84]	; (8001cc4 <_ZL13MX_UART4_Initv+0xbc>)
 8001c6e:	f009 fe32 	bl	800b8d6 <HAL_UARTEx_SetTxFifoThreshold>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bf14      	ite	ne
 8001c78:	2301      	movne	r3, #1
 8001c7a:	2300      	moveq	r3, #0
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 8001c82:	f000 fa69 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001c86:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001c8a:	480e      	ldr	r0, [pc, #56]	; (8001cc4 <_ZL13MX_UART4_Initv+0xbc>)
 8001c8c:	f009 fe61 	bl	800b952 <HAL_UARTEx_SetRxFifoThreshold>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	bf14      	ite	ne
 8001c96:	2301      	movne	r3, #1
 8001c98:	2300      	moveq	r3, #0
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <_ZL13MX_UART4_Initv+0x9c>
  {
    Error_Handler();
 8001ca0:	f000 fa5a 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8001ca4:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <_ZL13MX_UART4_Initv+0xbc>)
 8001ca6:	f009 fda2 	bl	800b7ee <HAL_UARTEx_EnableFifoMode>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	bf14      	ite	ne
 8001cb0:	2301      	movne	r3, #1
 8001cb2:	2300      	moveq	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <_ZL13MX_UART4_Initv+0xb6>
  {
    Error_Handler();
 8001cba:	f000 fa4d 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	24000564 	.word	0x24000564
 8001cc8:	40004c00 	.word	0x40004c00
 8001ccc:	001e8480 	.word	0x001e8480

08001cd0 <_ZL13MX_UART7_Initv>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <_ZL13MX_UART7_Initv+0xbc>)
 8001cd6:	4a2e      	ldr	r2, [pc, #184]	; (8001d90 <_ZL13MX_UART7_Initv+0xc0>)
 8001cd8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001cda:	4b2c      	ldr	r3, [pc, #176]	; (8001d8c <_ZL13MX_UART7_Initv+0xbc>)
 8001cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce2:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <_ZL13MX_UART7_Initv+0xbc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <_ZL13MX_UART7_Initv+0xbc>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001cee:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <_ZL13MX_UART7_Initv+0xbc>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001cf4:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <_ZL13MX_UART7_Initv+0xbc>)
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfa:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <_ZL13MX_UART7_Initv+0xbc>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d00:	4b22      	ldr	r3, [pc, #136]	; (8001d8c <_ZL13MX_UART7_Initv+0xbc>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d06:	4b21      	ldr	r3, [pc, #132]	; (8001d8c <_ZL13MX_UART7_Initv+0xbc>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d0c:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <_ZL13MX_UART7_Initv+0xbc>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d12:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <_ZL13MX_UART7_Initv+0xbc>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001d18:	481c      	ldr	r0, [pc, #112]	; (8001d8c <_ZL13MX_UART7_Initv+0xbc>)
 8001d1a:	f008 f815 	bl	8009d48 <HAL_UART_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	bf14      	ite	ne
 8001d24:	2301      	movne	r3, #1
 8001d26:	2300      	moveq	r3, #0
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <_ZL13MX_UART7_Initv+0x62>
  {
    Error_Handler();
 8001d2e:	f000 fa13 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001d32:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8001d36:	4815      	ldr	r0, [pc, #84]	; (8001d8c <_ZL13MX_UART7_Initv+0xbc>)
 8001d38:	f009 fdcd 	bl	800b8d6 <HAL_UARTEx_SetTxFifoThreshold>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	bf14      	ite	ne
 8001d42:	2301      	movne	r3, #1
 8001d44:	2300      	moveq	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <_ZL13MX_UART7_Initv+0x80>
  {
    Error_Handler();
 8001d4c:	f000 fa04 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001d50:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001d54:	480d      	ldr	r0, [pc, #52]	; (8001d8c <_ZL13MX_UART7_Initv+0xbc>)
 8001d56:	f009 fdfc 	bl	800b952 <HAL_UARTEx_SetRxFifoThreshold>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf14      	ite	ne
 8001d60:	2301      	movne	r3, #1
 8001d62:	2300      	moveq	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <_ZL13MX_UART7_Initv+0x9e>
  {
    Error_Handler();
 8001d6a:	f000 f9f5 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8001d6e:	4807      	ldr	r0, [pc, #28]	; (8001d8c <_ZL13MX_UART7_Initv+0xbc>)
 8001d70:	f009 fd3d 	bl	800b7ee <HAL_UARTEx_EnableFifoMode>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	bf14      	ite	ne
 8001d7a:	2301      	movne	r3, #1
 8001d7c:	2300      	moveq	r3, #0
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <_ZL13MX_UART7_Initv+0xb8>
  {
    Error_Handler();
 8001d84:	f000 f9e8 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	240005f4 	.word	0x240005f4
 8001d90:	40007800 	.word	0x40007800

08001d94 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d98:	4b2c      	ldr	r3, [pc, #176]	; (8001e4c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001d9a:	4a2d      	ldr	r2, [pc, #180]	; (8001e50 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001d9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d9e:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dca:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dd6:	4b1d      	ldr	r3, [pc, #116]	; (8001e4c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ddc:	481b      	ldr	r0, [pc, #108]	; (8001e4c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001dde:	f007 ffb3 	bl	8009d48 <HAL_UART_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 8001df2:	f000 f9b1 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001df6:	2100      	movs	r1, #0
 8001df8:	4814      	ldr	r0, [pc, #80]	; (8001e4c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001dfa:	f009 fd6c 	bl	800b8d6 <HAL_UARTEx_SetTxFifoThreshold>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	bf14      	ite	ne
 8001e04:	2301      	movne	r3, #1
 8001e06:	2300      	moveq	r3, #0
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <_ZL19MX_USART3_UART_Initv+0x7e>
  {
    Error_Handler();
 8001e0e:	f000 f9a3 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e12:	2100      	movs	r1, #0
 8001e14:	480d      	ldr	r0, [pc, #52]	; (8001e4c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e16:	f009 fd9c 	bl	800b952 <HAL_UARTEx_SetRxFifoThreshold>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf14      	ite	ne
 8001e20:	2301      	movne	r3, #1
 8001e22:	2300      	moveq	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <_ZL19MX_USART3_UART_Initv+0x9a>
  {
    Error_Handler();
 8001e2a:	f000 f995 	bl	8002158 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e2e:	4807      	ldr	r0, [pc, #28]	; (8001e4c <_ZL19MX_USART3_UART_Initv+0xb8>)
 8001e30:	f009 fd18 	bl	800b864 <HAL_UARTEx_DisableFifoMode>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	bf14      	ite	ne
 8001e3a:	2301      	movne	r3, #1
 8001e3c:	2300      	moveq	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <_ZL19MX_USART3_UART_Initv+0xb4>
  {
    Error_Handler();
 8001e44:	f000 f988 	bl	8002158 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	24000684 	.word	0x24000684
 8001e50:	40004800 	.word	0x40004800

08001e54 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <_ZL11MX_DMA_Initv+0x7c>)
 8001e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e60:	4a1b      	ldr	r2, [pc, #108]	; (8001ed0 <_ZL11MX_DMA_Initv+0x7c>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e6a:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <_ZL11MX_DMA_Initv+0x7c>)
 8001e6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	200b      	movs	r0, #11
 8001e7e:	f001 faca 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e82:	200b      	movs	r0, #11
 8001e84:	f001 fae1 	bl	800344a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	200c      	movs	r0, #12
 8001e8e:	f001 fac2 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e92:	200c      	movs	r0, #12
 8001e94:	f001 fad9 	bl	800344a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	200d      	movs	r0, #13
 8001e9e:	f001 faba 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001ea2:	200d      	movs	r0, #13
 8001ea4:	f001 fad1 	bl	800344a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2100      	movs	r1, #0
 8001eac:	200e      	movs	r0, #14
 8001eae:	f001 fab2 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001eb2:	200e      	movs	r0, #14
 8001eb4:	f001 fac9 	bl	800344a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2100      	movs	r1, #0
 8001ebc:	200f      	movs	r0, #15
 8001ebe:	f001 faaa 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001ec2:	200f      	movs	r0, #15
 8001ec4:	f001 fac1 	bl	800344a <HAL_NVIC_EnableIRQ>

}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	58024400 	.word	0x58024400

08001ed4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b08c      	sub	sp, #48	; 0x30
 8001ed8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eda:	f107 031c 	add.w	r3, r7, #28
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001eea:	4b8e      	ldr	r3, [pc, #568]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef0:	4a8c      	ldr	r2, [pc, #560]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001ef2:	f043 0310 	orr.w	r3, r3, #16
 8001ef6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001efa:	4b8a      	ldr	r3, [pc, #552]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001efc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	61bb      	str	r3, [r7, #24]
 8001f06:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f08:	4b86      	ldr	r3, [pc, #536]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f0e:	4a85      	ldr	r2, [pc, #532]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f18:	4b82      	ldr	r3, [pc, #520]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1e:	f003 0304 	and.w	r3, r3, #4
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f26:	4b7f      	ldr	r3, [pc, #508]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2c:	4a7d      	ldr	r2, [pc, #500]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f36:	4b7b      	ldr	r3, [pc, #492]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f44:	4b77      	ldr	r3, [pc, #476]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f4a:	4a76      	ldr	r2, [pc, #472]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f54:	4b73      	ldr	r3, [pc, #460]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	4b70      	ldr	r3, [pc, #448]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f68:	4a6e      	ldr	r2, [pc, #440]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001f6a:	f043 0302 	orr.w	r3, r3, #2
 8001f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f72:	4b6c      	ldr	r3, [pc, #432]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f80:	4b68      	ldr	r3, [pc, #416]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f86:	4a67      	ldr	r2, [pc, #412]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001f88:	f043 0308 	orr.w	r3, r3, #8
 8001f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f90:	4b64      	ldr	r3, [pc, #400]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f9e:	4b61      	ldr	r3, [pc, #388]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa4:	4a5f      	ldr	r2, [pc, #380]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001faa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fae:	4b5d      	ldr	r3, [pc, #372]	; (8002124 <_ZL12MX_GPIO_Initv+0x250>)
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb8:	603b      	str	r3, [r7, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f644 2121 	movw	r1, #18977	; 0x4a21
 8001fc2:	4859      	ldr	r0, [pc, #356]	; (8002128 <_ZL12MX_GPIO_Initv+0x254>)
 8001fc4:	f003 ff26 	bl	8005e14 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f24c 0102 	movw	r1, #49154	; 0xc002
 8001fce:	4857      	ldr	r0, [pc, #348]	; (800212c <_ZL12MX_GPIO_Initv+0x258>)
 8001fd0:	f003 ff20 	bl	8005e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fda:	4855      	ldr	r0, [pc, #340]	; (8002130 <_ZL12MX_GPIO_Initv+0x25c>)
 8001fdc:	f003 ff1a 	bl	8005e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe6:	4853      	ldr	r0, [pc, #332]	; (8002134 <_ZL12MX_GPIO_Initv+0x260>)
 8001fe8:	f003 ff14 	bl	8005e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8001fec:	2200      	movs	r2, #0
 8001fee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ff2:	4851      	ldr	r0, [pc, #324]	; (8002138 <_ZL12MX_GPIO_Initv+0x264>)
 8001ff4:	f003 ff0e 	bl	8005e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 8001ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ffe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002002:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 8002008:	f107 031c 	add.w	r3, r7, #28
 800200c:	4619      	mov	r1, r3
 800200e:	4849      	ldr	r0, [pc, #292]	; (8002134 <_ZL12MX_GPIO_Initv+0x260>)
 8002010:	f003 fd50 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8002014:	f644 2321 	movw	r3, #18977	; 0x4a21
 8002018:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201a:	2301      	movs	r3, #1
 800201c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002022:	2300      	movs	r3, #0
 8002024:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 031c 	add.w	r3, r7, #28
 800202a:	4619      	mov	r1, r3
 800202c:	483e      	ldr	r0, [pc, #248]	; (8002128 <_ZL12MX_GPIO_Initv+0x254>)
 800202e:	f003 fd41 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8002032:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002038:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800203c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002042:	f107 031c 	add.w	r3, r7, #28
 8002046:	4619      	mov	r1, r3
 8002048:	4838      	ldr	r0, [pc, #224]	; (800212c <_ZL12MX_GPIO_Initv+0x258>)
 800204a:	f003 fd33 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 800204e:	f24c 0302 	movw	r3, #49154	; 0xc002
 8002052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002054:	2301      	movs	r3, #1
 8002056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002060:	f107 031c 	add.w	r3, r7, #28
 8002064:	4619      	mov	r1, r3
 8002066:	4831      	ldr	r0, [pc, #196]	; (800212c <_ZL12MX_GPIO_Initv+0x258>)
 8002068:	f003 fd24 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800206c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	4619      	mov	r1, r3
 8002084:	482a      	ldr	r0, [pc, #168]	; (8002130 <_ZL12MX_GPIO_Initv+0x25c>)
 8002086:	f003 fd15 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800208a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800208e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002090:	2301      	movs	r3, #1
 8002092:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 800209c:	f107 031c 	add.w	r3, r7, #28
 80020a0:	4619      	mov	r1, r3
 80020a2:	4824      	ldr	r0, [pc, #144]	; (8002134 <_ZL12MX_GPIO_Initv+0x260>)
 80020a4:	f003 fd06 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_DE_Pin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 80020a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 80020ba:	f107 031c 	add.w	r3, r7, #28
 80020be:	4619      	mov	r1, r3
 80020c0:	481d      	ldr	r0, [pc, #116]	; (8002138 <_ZL12MX_GPIO_Initv+0x264>)
 80020c2:	f003 fcf7 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 80020c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80020ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 80020d6:	f107 031c 	add.w	r3, r7, #28
 80020da:	4619      	mov	r1, r3
 80020dc:	4817      	ldr	r0, [pc, #92]	; (800213c <_ZL12MX_GPIO_Initv+0x268>)
 80020de:	f003 fce9 	bl	8005ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 80020e2:	23c0      	movs	r3, #192	; 0xc0
 80020e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f0:	f107 031c 	add.w	r3, r7, #28
 80020f4:	4619      	mov	r1, r3
 80020f6:	480c      	ldr	r0, [pc, #48]	; (8002128 <_ZL12MX_GPIO_Initv+0x254>)
 80020f8:	f003 fcdc 	bl	8005ab4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2100      	movs	r1, #0
 8002100:	2017      	movs	r0, #23
 8002102:	f001 f988 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002106:	2017      	movs	r0, #23
 8002108:	f001 f99f 	bl	800344a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	2100      	movs	r1, #0
 8002110:	2028      	movs	r0, #40	; 0x28
 8002112:	f001 f980 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002116:	2028      	movs	r0, #40	; 0x28
 8002118:	f001 f997 	bl	800344a <HAL_NVIC_EnableIRQ>

}
 800211c:	bf00      	nop
 800211e:	3730      	adds	r7, #48	; 0x30
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	58024400 	.word	0x58024400
 8002128:	58020400 	.word	0x58020400
 800212c:	58021000 	.word	0x58021000
 8002130:	58020c00 	.word	0x58020c00
 8002134:	58020800 	.word	0x58020800
 8002138:	58020000 	.word	0x58020000
 800213c:	58021800 	.word	0x58021800

08002140 <HAL_GPIO_EXTI_Callback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//	if (huart == &huart3) {
//		HAL_UART_Transmit_DMA(&huart3, UART3_RXBUFFER, 9);
//	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	80fb      	strh	r3, [r7, #6]
//
//	}
//	if (GPIO_Pin == Blue_Button_Pin_Pin) {
//		HAL_GPIO_WritePin(LD1_GPIO_Port, GPIO_Pin, PinState)
//	}
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800215c:	2200      	movs	r2, #0
 800215e:	2101      	movs	r1, #1
 8002160:	4808      	ldr	r0, [pc, #32]	; (8002184 <Error_Handler+0x2c>)
 8002162:	f003 fe57 	bl	8005e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	2102      	movs	r1, #2
 800216a:	4807      	ldr	r0, [pc, #28]	; (8002188 <Error_Handler+0x30>)
 800216c:	f003 fe52 	bl	8005e14 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002170:	2201      	movs	r2, #1
 8002172:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002176:	4803      	ldr	r0, [pc, #12]	; (8002184 <Error_Handler+0x2c>)
 8002178:	f003 fe4c 	bl	8005e14 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800217c:	b672      	cpsid	i
}
 800217e:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002180:	e7fe      	b.n	8002180 <Error_Handler+0x28>
 8002182:	bf00      	nop
 8002184:	58020400 	.word	0x58020400
 8002188:	58021000 	.word	0x58021000

0800218c <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af02      	add	r7, sp, #8
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b01      	cmp	r3, #1
 800219a:	f040 8096 	bne.w	80022ca <_Z41__static_initialization_and_destruction_0ii+0x13e>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021a4:	4293      	cmp	r3, r2
 80021a6:	f040 8090 	bne.w	80022ca <_Z41__static_initialization_and_destruction_0ii+0x13e>
AMT21 encoderJ1(&huart4, 0xD4);
 80021aa:	22d4      	movs	r2, #212	; 0xd4
 80021ac:	4951      	ldr	r1, [pc, #324]	; (80022f4 <_Z41__static_initialization_and_destruction_0ii+0x168>)
 80021ae:	4852      	ldr	r0, [pc, #328]	; (80022f8 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80021b0:	f7fe fa6a 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 80021b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021b8:	9300      	str	r3, [sp, #0]
 80021ba:	4b50      	ldr	r3, [pc, #320]	; (80022fc <_Z41__static_initialization_and_destruction_0ii+0x170>)
 80021bc:	2204      	movs	r2, #4
 80021be:	4950      	ldr	r1, [pc, #320]	; (8002300 <_Z41__static_initialization_and_destruction_0ii+0x174>)
 80021c0:	4850      	ldr	r0, [pc, #320]	; (8002304 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80021c2:	f7fe fb55 	bl	8000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 80021c6:	2320      	movs	r3, #32
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	4b4f      	ldr	r3, [pc, #316]	; (8002308 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	494f      	ldr	r1, [pc, #316]	; (800230c <_Z41__static_initialization_and_destruction_0ii+0x180>)
 80021d0:	484f      	ldr	r0, [pc, #316]	; (8002310 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 80021d2:	f7fe fb4d 	bl	8000870 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
volatile const float C2_q1 = 3.0*C0_q1 / Time*Time;
 80021d6:	4b4f      	ldr	r3, [pc, #316]	; (8002314 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021e0:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 80021e4:	ee27 5b06 	vmul.f64	d5, d7, d6
 80021e8:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 80021ea:	edd3 7a00 	vldr	s15, [r3]
 80021ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80021f2:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80021f6:	4b48      	ldr	r3, [pc, #288]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002200:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002204:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002208:	4b44      	ldr	r3, [pc, #272]	; (800231c <_Z41__static_initialization_and_destruction_0ii+0x190>)
 800220a:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = 2.0*C0_q1 / Time*Time*Time;
 800220e:	4b41      	ldr	r3, [pc, #260]	; (8002314 <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8002210:	edd3 7a00 	vldr	s15, [r3]
 8002214:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002218:	ee37 5b07 	vadd.f64	d5, d7, d7
 800221c:	4b3e      	ldr	r3, [pc, #248]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 800221e:	edd3 7a00 	vldr	s15, [r3]
 8002222:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002226:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800222a:	4b3b      	ldr	r3, [pc, #236]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002234:	ee26 6b07 	vmul.f64	d6, d6, d7
 8002238:	4b37      	ldr	r3, [pc, #220]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 800223a:	edd3 7a00 	vldr	s15, [r3]
 800223e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002242:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002246:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800224a:	4b35      	ldr	r3, [pc, #212]	; (8002320 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 800224c:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = 3.0*C0_q3 / Time*Time;
 8002250:	4b34      	ldr	r3, [pc, #208]	; (8002324 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 8002252:	edd3 7a00 	vldr	s15, [r3]
 8002256:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800225a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 800225e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002262:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8002264:	edd3 7a00 	vldr	s15, [r3]
 8002268:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800226c:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8002270:	4b29      	ldr	r3, [pc, #164]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800227a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800227e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002282:	4b29      	ldr	r3, [pc, #164]	; (8002328 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 8002284:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = 2.0*C0_q3 / Time*Time*Time;
 8002288:	4b26      	ldr	r3, [pc, #152]	; (8002324 <_Z41__static_initialization_and_destruction_0ii+0x198>)
 800228a:	edd3 7a00 	vldr	s15, [r3]
 800228e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002292:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002296:	4b20      	ldr	r3, [pc, #128]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8002298:	edd3 7a00 	vldr	s15, [r3]
 800229c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022a0:	ee85 6b07 	vdiv.f64	d6, d5, d7
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 80022a6:	edd3 7a00 	vldr	s15, [r3]
 80022aa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022ae:	ee26 6b07 	vmul.f64	d6, d6, d7
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 80022b4:	edd3 7a00 	vldr	s15, [r3]
 80022b8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80022c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 80022c6:	edc3 7a00 	vstr	s15, [r3]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10d      	bne.n	80022ec <_Z41__static_initialization_and_destruction_0ii+0x160>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d108      	bne.n	80022ec <_Z41__static_initialization_and_destruction_0ii+0x160>
Stepper stepperJ3(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 80022da:	480d      	ldr	r0, [pc, #52]	; (8002310 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 80022dc:	f7fe fb0c 	bl	80008f8 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 80022e0:	4808      	ldr	r0, [pc, #32]	; (8002304 <_Z41__static_initialization_and_destruction_0ii+0x178>)
 80022e2:	f7fe fb09 	bl	80008f8 <_ZN7StepperD1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 80022e6:	4804      	ldr	r0, [pc, #16]	; (80022f8 <_Z41__static_initialization_and_destruction_0ii+0x16c>)
 80022e8:	f7fe f9e2 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	24000564 	.word	0x24000564
 80022f8:	2400096c 	.word	0x2400096c
 80022fc:	58021000 	.word	0x58021000
 8002300:	240002b8 	.word	0x240002b8
 8002304:	24000980 	.word	0x24000980
 8002308:	58020400 	.word	0x58020400
 800230c:	24000350 	.word	0x24000350
 8002310:	240009a8 	.word	0x240009a8
 8002314:	24000004 	.word	0x24000004
 8002318:	24000000 	.word	0x24000000
 800231c:	240009e4 	.word	0x240009e4
 8002320:	240009e8 	.word	0x240009e8
 8002324:	24000008 	.word	0x24000008
 8002328:	240009ec 	.word	0x240009ec
 800232c:	240009f0 	.word	0x240009f0

08002330 <_GLOBAL__sub_I_hcrc>:
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
 8002334:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002338:	2001      	movs	r0, #1
 800233a:	f7ff ff27 	bl	800218c <_Z41__static_initialization_and_destruction_0ii>
 800233e:	bd80      	pop	{r7, pc}

08002340 <_GLOBAL__sub_D_hcrc>:
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
 8002344:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002348:	2000      	movs	r0, #0
 800234a:	f7ff ff1f 	bl	800218c <_Z41__static_initialization_and_destruction_0ii>
 800234e:	bd80      	pop	{r7, pc}

08002350 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	4b0a      	ldr	r3, [pc, #40]	; (8002380 <HAL_MspInit+0x30>)
 8002358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800235c:	4a08      	ldr	r2, [pc, #32]	; (8002380 <HAL_MspInit+0x30>)
 800235e:	f043 0302 	orr.w	r3, r3, #2
 8002362:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_MspInit+0x30>)
 8002368:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	607b      	str	r3, [r7, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	58024400 	.word	0x58024400

08002384 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <HAL_CRC_MspInit+0x3c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d10e      	bne.n	80023b4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002396:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_CRC_MspInit+0x40>)
 8002398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800239c:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <HAL_CRC_MspInit+0x40>)
 800239e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80023a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <HAL_CRC_MspInit+0x40>)
 80023a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80023b4:	bf00      	nop
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	58024c00 	.word	0x58024c00
 80023c4:	58024400 	.word	0x58024400

080023c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b0b8      	sub	sp, #224	; 0xe0
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023e0:	f107 0310 	add.w	r3, r7, #16
 80023e4:	22bc      	movs	r2, #188	; 0xbc
 80023e6:	2100      	movs	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f00a f949 	bl	800c680 <memset>
  if(hspi->Instance==SPI3)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a25      	ldr	r2, [pc, #148]	; (8002488 <HAL_SPI_MspInit+0xc0>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d142      	bne.n	800247e <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80023f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023fc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80023fe:	2300      	movs	r3, #0
 8002400:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002402:	f107 0310 	add.w	r3, r7, #16
 8002406:	4618      	mov	r0, r3
 8002408:	f004 fd2a 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002412:	f7ff fea1 	bl	8002158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_SPI_MspInit+0xc4>)
 8002418:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800241c:	4a1b      	ldr	r2, [pc, #108]	; (800248c <HAL_SPI_MspInit+0xc4>)
 800241e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002422:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002426:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_SPI_MspInit+0xc4>)
 8002428:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800242c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002434:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_SPI_MspInit+0xc4>)
 8002436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800243a:	4a14      	ldr	r2, [pc, #80]	; (800248c <HAL_SPI_MspInit+0xc4>)
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_SPI_MspInit+0xc4>)
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002452:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002456:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245a:	2302      	movs	r3, #2
 800245c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2300      	movs	r3, #0
 8002468:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800246c:	2306      	movs	r3, #6
 800246e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002472:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002476:	4619      	mov	r1, r3
 8002478:	4805      	ldr	r0, [pc, #20]	; (8002490 <HAL_SPI_MspInit+0xc8>)
 800247a:	f003 fb1b 	bl	8005ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800247e:	bf00      	nop
 8002480:	37e0      	adds	r7, #224	; 0xe0
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40003c00 	.word	0x40003c00
 800248c:	58024400 	.word	0x58024400
 8002490:	58020800 	.word	0x58020800

08002494 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	; 0x30
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a6e      	ldr	r2, [pc, #440]	; (800265c <HAL_TIM_Base_MspInit+0x1c8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d10f      	bne.n	80024c6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024a6:	4b6e      	ldr	r3, [pc, #440]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 80024a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024ac:	4a6c      	ldr	r2, [pc, #432]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 80024ae:	f043 0301 	orr.w	r3, r3, #1
 80024b2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024b6:	4b6a      	ldr	r3, [pc, #424]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 80024b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80024c4:	e0c6      	b.n	8002654 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ce:	d10f      	bne.n	80024f0 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024d0:	4b63      	ldr	r3, [pc, #396]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 80024d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024d6:	4a62      	ldr	r2, [pc, #392]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024e0:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 80024e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80024ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80024ee:	e0b1      	b.n	8002654 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM3)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a5b      	ldr	r2, [pc, #364]	; (8002664 <HAL_TIM_Base_MspInit+0x1d0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d10f      	bne.n	800251a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024fa:	4b59      	ldr	r3, [pc, #356]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 80024fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002500:	4a57      	ldr	r2, [pc, #348]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 8002502:	f043 0302 	orr.w	r3, r3, #2
 8002506:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800250a:	4b55      	ldr	r3, [pc, #340]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 800250c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002518:	e09c      	b.n	8002654 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM4)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a52      	ldr	r2, [pc, #328]	; (8002668 <HAL_TIM_Base_MspInit+0x1d4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d10f      	bne.n	8002544 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002524:	4b4e      	ldr	r3, [pc, #312]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 8002526:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800252a:	4a4d      	ldr	r2, [pc, #308]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002534:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 8002536:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	623b      	str	r3, [r7, #32]
 8002540:	6a3b      	ldr	r3, [r7, #32]
}
 8002542:	e087      	b.n	8002654 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM5)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a48      	ldr	r2, [pc, #288]	; (800266c <HAL_TIM_Base_MspInit+0x1d8>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d117      	bne.n	800257e <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800254e:	4b44      	ldr	r3, [pc, #272]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 8002550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002554:	4a42      	ldr	r2, [pc, #264]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 8002556:	f043 0308 	orr.w	r3, r3, #8
 800255a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800255e:	4b40      	ldr	r3, [pc, #256]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 8002560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002564:	f003 0308 	and.w	r3, r3, #8
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800256c:	2200      	movs	r2, #0
 800256e:	2100      	movs	r1, #0
 8002570:	2032      	movs	r0, #50	; 0x32
 8002572:	f000 ff50 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002576:	2032      	movs	r0, #50	; 0x32
 8002578:	f000 ff67 	bl	800344a <HAL_NVIC_EnableIRQ>
}
 800257c:	e06a      	b.n	8002654 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM6)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a3b      	ldr	r2, [pc, #236]	; (8002670 <HAL_TIM_Base_MspInit+0x1dc>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d117      	bne.n	80025b8 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002588:	4b35      	ldr	r3, [pc, #212]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 800258a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800258e:	4a34      	ldr	r2, [pc, #208]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 8002590:	f043 0310 	orr.w	r3, r3, #16
 8002594:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002598:	4b31      	ldr	r3, [pc, #196]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 800259a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80025a6:	2200      	movs	r2, #0
 80025a8:	2100      	movs	r1, #0
 80025aa:	2036      	movs	r0, #54	; 0x36
 80025ac:	f000 ff33 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025b0:	2036      	movs	r0, #54	; 0x36
 80025b2:	f000 ff4a 	bl	800344a <HAL_NVIC_EnableIRQ>
}
 80025b6:	e04d      	b.n	8002654 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM7)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a2d      	ldr	r2, [pc, #180]	; (8002674 <HAL_TIM_Base_MspInit+0x1e0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d117      	bne.n	80025f2 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80025c2:	4b27      	ldr	r3, [pc, #156]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 80025c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025c8:	4a25      	ldr	r2, [pc, #148]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 80025ca:	f043 0320 	orr.w	r3, r3, #32
 80025ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025d2:	4b23      	ldr	r3, [pc, #140]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 80025d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	617b      	str	r3, [r7, #20]
 80025de:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80025e0:	2200      	movs	r2, #0
 80025e2:	2100      	movs	r1, #0
 80025e4:	2037      	movs	r0, #55	; 0x37
 80025e6:	f000 ff16 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80025ea:	2037      	movs	r0, #55	; 0x37
 80025ec:	f000 ff2d 	bl	800344a <HAL_NVIC_EnableIRQ>
}
 80025f0:	e030      	b.n	8002654 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM12)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a20      	ldr	r2, [pc, #128]	; (8002678 <HAL_TIM_Base_MspInit+0x1e4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d117      	bne.n	800262c <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80025fc:	4b18      	ldr	r3, [pc, #96]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 80025fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002602:	4a17      	ldr	r2, [pc, #92]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 8002604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002608:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 800260e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	613b      	str	r3, [r7, #16]
 8002618:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	202b      	movs	r0, #43	; 0x2b
 8002620:	f000 fef9 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002624:	202b      	movs	r0, #43	; 0x2b
 8002626:	f000 ff10 	bl	800344a <HAL_NVIC_EnableIRQ>
}
 800262a:	e013      	b.n	8002654 <HAL_TIM_Base_MspInit+0x1c0>
  else if(htim_base->Instance==TIM15)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a12      	ldr	r2, [pc, #72]	; (800267c <HAL_TIM_Base_MspInit+0x1e8>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d10e      	bne.n	8002654 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 8002638:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800263c:	4a08      	ldr	r2, [pc, #32]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 800263e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002642:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_TIM_Base_MspInit+0x1cc>)
 8002648:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800264c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
}
 8002654:	bf00      	nop
 8002656:	3730      	adds	r7, #48	; 0x30
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40010000 	.word	0x40010000
 8002660:	58024400 	.word	0x58024400
 8002664:	40000400 	.word	0x40000400
 8002668:	40000800 	.word	0x40000800
 800266c:	40000c00 	.word	0x40000c00
 8002670:	40001000 	.word	0x40001000
 8002674:	40001400 	.word	0x40001400
 8002678:	40001800 	.word	0x40001800
 800267c:	40014000 	.word	0x40014000

08002680 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08c      	sub	sp, #48	; 0x30
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002688:	f107 031c 	add.w	r3, r7, #28
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	605a      	str	r2, [r3, #4]
 8002692:	609a      	str	r2, [r3, #8]
 8002694:	60da      	str	r2, [r3, #12]
 8002696:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a5e      	ldr	r2, [pc, #376]	; (8002818 <HAL_TIM_MspPostInit+0x198>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d120      	bne.n	80026e4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026a2:	4b5e      	ldr	r3, [pc, #376]	; (800281c <HAL_TIM_MspPostInit+0x19c>)
 80026a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a8:	4a5c      	ldr	r2, [pc, #368]	; (800281c <HAL_TIM_MspPostInit+0x19c>)
 80026aa:	f043 0310 	orr.w	r3, r3, #16
 80026ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b2:	4b5a      	ldr	r3, [pc, #360]	; (800281c <HAL_TIM_MspPostInit+0x19c>)
 80026b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 80026c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 80026d6:	f107 031c 	add.w	r3, r7, #28
 80026da:	4619      	mov	r1, r3
 80026dc:	4850      	ldr	r0, [pc, #320]	; (8002820 <HAL_TIM_MspPostInit+0x1a0>)
 80026de:	f003 f9e9 	bl	8005ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80026e2:	e094      	b.n	800280e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ec:	d120      	bne.n	8002730 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ee:	4b4b      	ldr	r3, [pc, #300]	; (800281c <HAL_TIM_MspPostInit+0x19c>)
 80026f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026f4:	4a49      	ldr	r2, [pc, #292]	; (800281c <HAL_TIM_MspPostInit+0x19c>)
 80026f6:	f043 0302 	orr.w	r3, r3, #2
 80026fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026fe:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_TIM_MspPostInit+0x19c>)
 8002700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	617b      	str	r3, [r7, #20]
 800270a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 800270c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002712:	2302      	movs	r3, #2
 8002714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271a:	2300      	movs	r3, #0
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800271e:	2301      	movs	r3, #1
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8002722:	f107 031c 	add.w	r3, r7, #28
 8002726:	4619      	mov	r1, r3
 8002728:	483e      	ldr	r0, [pc, #248]	; (8002824 <HAL_TIM_MspPostInit+0x1a4>)
 800272a:	f003 f9c3 	bl	8005ab4 <HAL_GPIO_Init>
}
 800272e:	e06e      	b.n	800280e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a3c      	ldr	r2, [pc, #240]	; (8002828 <HAL_TIM_MspPostInit+0x1a8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d11f      	bne.n	800277a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800273a:	4b38      	ldr	r3, [pc, #224]	; (800281c <HAL_TIM_MspPostInit+0x19c>)
 800273c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002740:	4a36      	ldr	r2, [pc, #216]	; (800281c <HAL_TIM_MspPostInit+0x19c>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800274a:	4b34      	ldr	r3, [pc, #208]	; (800281c <HAL_TIM_MspPostInit+0x19c>)
 800274c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8002758:	2340      	movs	r3, #64	; 0x40
 800275a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002764:	2300      	movs	r3, #0
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002768:	2302      	movs	r3, #2
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 800276c:	f107 031c 	add.w	r3, r7, #28
 8002770:	4619      	mov	r1, r3
 8002772:	482e      	ldr	r0, [pc, #184]	; (800282c <HAL_TIM_MspPostInit+0x1ac>)
 8002774:	f003 f99e 	bl	8005ab4 <HAL_GPIO_Init>
}
 8002778:	e049      	b.n	800280e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2c      	ldr	r2, [pc, #176]	; (8002830 <HAL_TIM_MspPostInit+0x1b0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d120      	bne.n	80027c6 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002784:	4b25      	ldr	r3, [pc, #148]	; (800281c <HAL_TIM_MspPostInit+0x19c>)
 8002786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800278a:	4a24      	ldr	r2, [pc, #144]	; (800281c <HAL_TIM_MspPostInit+0x19c>)
 800278c:	f043 0302 	orr.w	r3, r3, #2
 8002790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002794:	4b21      	ldr	r3, [pc, #132]	; (800281c <HAL_TIM_MspPostInit+0x19c>)
 8002796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 80027a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b0:	2300      	movs	r3, #0
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027b4:	2302      	movs	r3, #2
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	4619      	mov	r1, r3
 80027be:	4819      	ldr	r0, [pc, #100]	; (8002824 <HAL_TIM_MspPostInit+0x1a4>)
 80027c0:	f003 f978 	bl	8005ab4 <HAL_GPIO_Init>
}
 80027c4:	e023      	b.n	800280e <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1a      	ldr	r2, [pc, #104]	; (8002834 <HAL_TIM_MspPostInit+0x1b4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d11e      	bne.n	800280e <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <HAL_TIM_MspPostInit+0x19c>)
 80027d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027d6:	4a11      	ldr	r2, [pc, #68]	; (800281c <HAL_TIM_MspPostInit+0x19c>)
 80027d8:	f043 0310 	orr.w	r3, r3, #16
 80027dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <HAL_TIM_MspPostInit+0x19c>)
 80027e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 80027ee:	2340      	movs	r3, #64	; 0x40
 80027f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	2300      	movs	r3, #0
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80027fe:	2304      	movs	r3, #4
 8002800:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8002802:	f107 031c 	add.w	r3, r7, #28
 8002806:	4619      	mov	r1, r3
 8002808:	4805      	ldr	r0, [pc, #20]	; (8002820 <HAL_TIM_MspPostInit+0x1a0>)
 800280a:	f003 f953 	bl	8005ab4 <HAL_GPIO_Init>
}
 800280e:	bf00      	nop
 8002810:	3730      	adds	r7, #48	; 0x30
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40010000 	.word	0x40010000
 800281c:	58024400 	.word	0x58024400
 8002820:	58021000 	.word	0x58021000
 8002824:	58020400 	.word	0x58020400
 8002828:	40000400 	.word	0x40000400
 800282c:	58020000 	.word	0x58020000
 8002830:	40000800 	.word	0x40000800
 8002834:	40014000 	.word	0x40014000

08002838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b0bc      	sub	sp, #240	; 0xf0
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002840:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002850:	f107 0320 	add.w	r3, r7, #32
 8002854:	22bc      	movs	r2, #188	; 0xbc
 8002856:	2100      	movs	r1, #0
 8002858:	4618      	mov	r0, r3
 800285a:	f009 ff11 	bl	800c680 <memset>
  if(huart->Instance==UART4)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4aa1      	ldr	r2, [pc, #644]	; (8002ae8 <HAL_UART_MspInit+0x2b0>)
 8002864:	4293      	cmp	r3, r2
 8002866:	f040 80b7 	bne.w	80029d8 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800286a:	2302      	movs	r3, #2
 800286c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002874:	f107 0320 	add.w	r3, r7, #32
 8002878:	4618      	mov	r0, r3
 800287a:	f004 faf1 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002884:	f7ff fc68 	bl	8002158 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002888:	4b98      	ldr	r3, [pc, #608]	; (8002aec <HAL_UART_MspInit+0x2b4>)
 800288a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800288e:	4a97      	ldr	r2, [pc, #604]	; (8002aec <HAL_UART_MspInit+0x2b4>)
 8002890:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002894:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002898:	4b94      	ldr	r3, [pc, #592]	; (8002aec <HAL_UART_MspInit+0x2b4>)
 800289a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800289e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a2:	61fb      	str	r3, [r7, #28]
 80028a4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028a6:	4b91      	ldr	r3, [pc, #580]	; (8002aec <HAL_UART_MspInit+0x2b4>)
 80028a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028ac:	4a8f      	ldr	r2, [pc, #572]	; (8002aec <HAL_UART_MspInit+0x2b4>)
 80028ae:	f043 0308 	orr.w	r3, r3, #8
 80028b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028b6:	4b8d      	ldr	r3, [pc, #564]	; (8002aec <HAL_UART_MspInit+0x2b4>)
 80028b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028c4:	2303      	movs	r3, #3
 80028c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80028dc:	2308      	movs	r3, #8
 80028de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028e2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80028e6:	4619      	mov	r1, r3
 80028e8:	4881      	ldr	r0, [pc, #516]	; (8002af0 <HAL_UART_MspInit+0x2b8>)
 80028ea:	f003 f8e3 	bl	8005ab4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80028ee:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 80028f0:	4a81      	ldr	r2, [pc, #516]	; (8002af8 <HAL_UART_MspInit+0x2c0>)
 80028f2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80028f4:	4b7f      	ldr	r3, [pc, #508]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 80028f6:	223f      	movs	r2, #63	; 0x3f
 80028f8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028fa:	4b7e      	ldr	r3, [pc, #504]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002900:	4b7c      	ldr	r3, [pc, #496]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 8002902:	2200      	movs	r2, #0
 8002904:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002906:	4b7b      	ldr	r3, [pc, #492]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 8002908:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800290c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800290e:	4b79      	ldr	r3, [pc, #484]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 8002910:	2200      	movs	r2, #0
 8002912:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002914:	4b77      	ldr	r3, [pc, #476]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 8002916:	2200      	movs	r2, #0
 8002918:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800291a:	4b76      	ldr	r3, [pc, #472]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 800291c:	2200      	movs	r2, #0
 800291e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002920:	4b74      	ldr	r3, [pc, #464]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 8002922:	2200      	movs	r2, #0
 8002924:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002926:	4b73      	ldr	r3, [pc, #460]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 8002928:	2204      	movs	r2, #4
 800292a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800292c:	4b71      	ldr	r3, [pc, #452]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 800292e:	2203      	movs	r2, #3
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002932:	4b70      	ldr	r3, [pc, #448]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 8002934:	2200      	movs	r2, #0
 8002936:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002938:	4b6e      	ldr	r3, [pc, #440]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 800293a:	2200      	movs	r2, #0
 800293c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800293e:	486d      	ldr	r0, [pc, #436]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 8002940:	f000 fe94 	bl	800366c <HAL_DMA_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 800294a:	f7ff fc05 	bl	8002158 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a68      	ldr	r2, [pc, #416]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 8002952:	67da      	str	r2, [r3, #124]	; 0x7c
 8002954:	4a67      	ldr	r2, [pc, #412]	; (8002af4 <HAL_UART_MspInit+0x2bc>)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800295a:	4b68      	ldr	r3, [pc, #416]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 800295c:	4a68      	ldr	r2, [pc, #416]	; (8002b00 <HAL_UART_MspInit+0x2c8>)
 800295e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002960:	4b66      	ldr	r3, [pc, #408]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 8002962:	2240      	movs	r2, #64	; 0x40
 8002964:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002966:	4b65      	ldr	r3, [pc, #404]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 8002968:	2240      	movs	r2, #64	; 0x40
 800296a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800296c:	4b63      	ldr	r3, [pc, #396]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 800296e:	2200      	movs	r2, #0
 8002970:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002972:	4b62      	ldr	r3, [pc, #392]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 8002974:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002978:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800297a:	4b60      	ldr	r3, [pc, #384]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 800297c:	2200      	movs	r2, #0
 800297e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002980:	4b5e      	ldr	r3, [pc, #376]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 8002982:	2200      	movs	r2, #0
 8002984:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002986:	4b5d      	ldr	r3, [pc, #372]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 8002988:	2200      	movs	r2, #0
 800298a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800298c:	4b5b      	ldr	r3, [pc, #364]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 800298e:	2200      	movs	r2, #0
 8002990:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002992:	4b5a      	ldr	r3, [pc, #360]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 8002994:	2204      	movs	r2, #4
 8002996:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002998:	4b58      	ldr	r3, [pc, #352]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 800299a:	2203      	movs	r2, #3
 800299c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800299e:	4b57      	ldr	r3, [pc, #348]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80029a4:	4b55      	ldr	r3, [pc, #340]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80029aa:	4854      	ldr	r0, [pc, #336]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 80029ac:	f000 fe5e 	bl	800366c <HAL_DMA_Init>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 80029b6:	f7ff fbcf 	bl	8002158 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a4f      	ldr	r2, [pc, #316]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 80029be:	679a      	str	r2, [r3, #120]	; 0x78
 80029c0:	4a4e      	ldr	r2, [pc, #312]	; (8002afc <HAL_UART_MspInit+0x2c4>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80029c6:	2200      	movs	r2, #0
 80029c8:	2100      	movs	r1, #0
 80029ca:	2034      	movs	r0, #52	; 0x34
 80029cc:	f000 fd23 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80029d0:	2034      	movs	r0, #52	; 0x34
 80029d2:	f000 fd3a 	bl	800344a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029d6:	e154      	b.n	8002c82 <HAL_UART_MspInit+0x44a>
  else if(huart->Instance==UART7)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a49      	ldr	r2, [pc, #292]	; (8002b04 <HAL_UART_MspInit+0x2cc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	f040 8098 	bne.w	8002b14 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80029e4:	2302      	movs	r3, #2
 80029e6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029ee:	f107 0320 	add.w	r3, r7, #32
 80029f2:	4618      	mov	r0, r3
 80029f4:	f004 fa34 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80029fe:	f7ff fbab 	bl	8002158 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002a02:	4b3a      	ldr	r3, [pc, #232]	; (8002aec <HAL_UART_MspInit+0x2b4>)
 8002a04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a08:	4a38      	ldr	r2, [pc, #224]	; (8002aec <HAL_UART_MspInit+0x2b4>)
 8002a0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a12:	4b36      	ldr	r3, [pc, #216]	; (8002aec <HAL_UART_MspInit+0x2b4>)
 8002a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a20:	4b32      	ldr	r3, [pc, #200]	; (8002aec <HAL_UART_MspInit+0x2b4>)
 8002a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a26:	4a31      	ldr	r2, [pc, #196]	; (8002aec <HAL_UART_MspInit+0x2b4>)
 8002a28:	f043 0310 	orr.w	r3, r3, #16
 8002a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a30:	4b2e      	ldr	r3, [pc, #184]	; (8002aec <HAL_UART_MspInit+0x2b4>)
 8002a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002a3e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002a58:	2307      	movs	r3, #7
 8002a5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a62:	4619      	mov	r1, r3
 8002a64:	4828      	ldr	r0, [pc, #160]	; (8002b08 <HAL_UART_MspInit+0x2d0>)
 8002a66:	f003 f825 	bl	8005ab4 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8002a6a:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002a6c:	4a28      	ldr	r2, [pc, #160]	; (8002b10 <HAL_UART_MspInit+0x2d8>)
 8002a6e:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8002a70:	4b26      	ldr	r3, [pc, #152]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002a72:	2250      	movs	r2, #80	; 0x50
 8002a74:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a76:	4b25      	ldr	r3, [pc, #148]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002a78:	2240      	movs	r2, #64	; 0x40
 8002a7a:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a82:	4b22      	ldr	r3, [pc, #136]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002a84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a88:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a8a:	4b20      	ldr	r3, [pc, #128]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a90:	4b1e      	ldr	r3, [pc, #120]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8002a96:	4b1d      	ldr	r3, [pc, #116]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002aa8:	4b18      	ldr	r3, [pc, #96]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002aaa:	2203      	movs	r2, #3
 8002aac:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002aae:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002ab4:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8002aba:	4814      	ldr	r0, [pc, #80]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002abc:	f000 fdd6 	bl	800366c <HAL_DMA_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_UART_MspInit+0x292>
      Error_Handler();
 8002ac6:	f7ff fb47 	bl	8002158 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a0f      	ldr	r2, [pc, #60]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002ace:	679a      	str	r2, [r3, #120]	; 0x78
 8002ad0:	4a0e      	ldr	r2, [pc, #56]	; (8002b0c <HAL_UART_MspInit+0x2d4>)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2052      	movs	r0, #82	; 0x52
 8002adc:	f000 fc9b 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002ae0:	2052      	movs	r0, #82	; 0x52
 8002ae2:	f000 fcb2 	bl	800344a <HAL_NVIC_EnableIRQ>
}
 8002ae6:	e0cc      	b.n	8002c82 <HAL_UART_MspInit+0x44a>
 8002ae8:	40004c00 	.word	0x40004c00
 8002aec:	58024400 	.word	0x58024400
 8002af0:	58020c00 	.word	0x58020c00
 8002af4:	24000714 	.word	0x24000714
 8002af8:	40020058 	.word	0x40020058
 8002afc:	2400078c 	.word	0x2400078c
 8002b00:	40020070 	.word	0x40020070
 8002b04:	40007800 	.word	0x40007800
 8002b08:	58021000 	.word	0x58021000
 8002b0c:	24000804 	.word	0x24000804
 8002b10:	40020010 	.word	0x40020010
  else if(huart->Instance==USART3)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a5c      	ldr	r2, [pc, #368]	; (8002c8c <HAL_UART_MspInit+0x454>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	f040 80b1 	bne.w	8002c82 <HAL_UART_MspInit+0x44a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b20:	2302      	movs	r3, #2
 8002b22:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b2a:	f107 0320 	add.w	r3, r7, #32
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f004 f996 	bl	8006e60 <HAL_RCCEx_PeriphCLKConfig>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_UART_MspInit+0x306>
      Error_Handler();
 8002b3a:	f7ff fb0d 	bl	8002158 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b3e:	4b54      	ldr	r3, [pc, #336]	; (8002c90 <HAL_UART_MspInit+0x458>)
 8002b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b44:	4a52      	ldr	r2, [pc, #328]	; (8002c90 <HAL_UART_MspInit+0x458>)
 8002b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b4e:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <HAL_UART_MspInit+0x458>)
 8002b50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b5c:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <HAL_UART_MspInit+0x458>)
 8002b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b62:	4a4b      	ldr	r2, [pc, #300]	; (8002c90 <HAL_UART_MspInit+0x458>)
 8002b64:	f043 0308 	orr.w	r3, r3, #8
 8002b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b6c:	4b48      	ldr	r3, [pc, #288]	; (8002c90 <HAL_UART_MspInit+0x458>)
 8002b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b82:	2302      	movs	r3, #2
 8002b84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b94:	2307      	movs	r3, #7
 8002b96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b9a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	483c      	ldr	r0, [pc, #240]	; (8002c94 <HAL_UART_MspInit+0x45c>)
 8002ba2:	f002 ff87 	bl	8005ab4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002ba6:	4b3c      	ldr	r3, [pc, #240]	; (8002c98 <HAL_UART_MspInit+0x460>)
 8002ba8:	4a3c      	ldr	r2, [pc, #240]	; (8002c9c <HAL_UART_MspInit+0x464>)
 8002baa:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002bac:	4b3a      	ldr	r3, [pc, #232]	; (8002c98 <HAL_UART_MspInit+0x460>)
 8002bae:	222d      	movs	r2, #45	; 0x2d
 8002bb0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bb2:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <HAL_UART_MspInit+0x460>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bb8:	4b37      	ldr	r3, [pc, #220]	; (8002c98 <HAL_UART_MspInit+0x460>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bbe:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <HAL_UART_MspInit+0x460>)
 8002bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bc4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bc6:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_UART_MspInit+0x460>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bcc:	4b32      	ldr	r3, [pc, #200]	; (8002c98 <HAL_UART_MspInit+0x460>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002bd2:	4b31      	ldr	r3, [pc, #196]	; (8002c98 <HAL_UART_MspInit+0x460>)
 8002bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bd8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002bda:	4b2f      	ldr	r3, [pc, #188]	; (8002c98 <HAL_UART_MspInit+0x460>)
 8002bdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002be0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002be2:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <HAL_UART_MspInit+0x460>)
 8002be4:	2200      	movs	r2, #0
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002be8:	482b      	ldr	r0, [pc, #172]	; (8002c98 <HAL_UART_MspInit+0x460>)
 8002bea:	f000 fd3f 	bl	800366c <HAL_DMA_Init>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 8002bf4:	f7ff fab0 	bl	8002158 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a27      	ldr	r2, [pc, #156]	; (8002c98 <HAL_UART_MspInit+0x460>)
 8002bfc:	67da      	str	r2, [r3, #124]	; 0x7c
 8002bfe:	4a26      	ldr	r2, [pc, #152]	; (8002c98 <HAL_UART_MspInit+0x460>)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 8002c04:	4b26      	ldr	r3, [pc, #152]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c06:	4a27      	ldr	r2, [pc, #156]	; (8002ca4 <HAL_UART_MspInit+0x46c>)
 8002c08:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002c0a:	4b25      	ldr	r3, [pc, #148]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c0c:	222e      	movs	r2, #46	; 0x2e
 8002c0e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c10:	4b23      	ldr	r3, [pc, #140]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c12:	2240      	movs	r2, #64	; 0x40
 8002c14:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c16:	4b22      	ldr	r3, [pc, #136]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c1c:	4b20      	ldr	r3, [pc, #128]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c22:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c24:	4b1e      	ldr	r3, [pc, #120]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002c30:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c36:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c3c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002c3e:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c40:	2204      	movs	r2, #4
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002c44:	4b16      	ldr	r3, [pc, #88]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c46:	2203      	movs	r2, #3
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002c50:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002c56:	4812      	ldr	r0, [pc, #72]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c58:	f000 fd08 	bl	800366c <HAL_DMA_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_UART_MspInit+0x42e>
      Error_Handler();
 8002c62:	f7ff fa79 	bl	8002158 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c6a:	679a      	str	r2, [r3, #120]	; 0x78
 8002c6c:	4a0c      	ldr	r2, [pc, #48]	; (8002ca0 <HAL_UART_MspInit+0x468>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c72:	2200      	movs	r2, #0
 8002c74:	2100      	movs	r1, #0
 8002c76:	2027      	movs	r0, #39	; 0x27
 8002c78:	f000 fbcd 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c7c:	2027      	movs	r0, #39	; 0x27
 8002c7e:	f000 fbe4 	bl	800344a <HAL_NVIC_EnableIRQ>
}
 8002c82:	bf00      	nop
 8002c84:	37f0      	adds	r7, #240	; 0xf0
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40004800 	.word	0x40004800
 8002c90:	58024400 	.word	0x58024400
 8002c94:	58020c00 	.word	0x58020c00
 8002c98:	2400087c 	.word	0x2400087c
 8002c9c:	40020028 	.word	0x40020028
 8002ca0:	240008f4 	.word	0x240008f4
 8002ca4:	40020040 	.word	0x40020040

08002ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cac:	e7fe      	b.n	8002cac <NMI_Handler+0x4>

08002cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cb2:	e7fe      	b.n	8002cb2 <HardFault_Handler+0x4>

08002cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cb8:	e7fe      	b.n	8002cb8 <MemManage_Handler+0x4>

08002cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cbe:	e7fe      	b.n	8002cbe <BusFault_Handler+0x4>

08002cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc4:	e7fe      	b.n	8002cc4 <UsageFault_Handler+0x4>

08002cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd2:	4770      	bx	lr

08002cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr

08002cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cf4:	f000 fa88 	bl	8003208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002cf8:	f000 fbc1 	bl	800347e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8002d04:	4802      	ldr	r0, [pc, #8]	; (8002d10 <DMA1_Stream0_IRQHandler+0x10>)
 8002d06:	f001 fd6f 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002d0a:	bf00      	nop
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	24000804 	.word	0x24000804

08002d14 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002d18:	4802      	ldr	r0, [pc, #8]	; (8002d24 <DMA1_Stream1_IRQHandler+0x10>)
 8002d1a:	f001 fd65 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	2400087c 	.word	0x2400087c

08002d28 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002d2c:	4802      	ldr	r0, [pc, #8]	; (8002d38 <DMA1_Stream2_IRQHandler+0x10>)
 8002d2e:	f001 fd5b 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	240008f4 	.word	0x240008f4

08002d3c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002d40:	4802      	ldr	r0, [pc, #8]	; (8002d4c <DMA1_Stream3_IRQHandler+0x10>)
 8002d42:	f001 fd51 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	24000714 	.word	0x24000714

08002d50 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002d54:	4802      	ldr	r0, [pc, #8]	; (8002d60 <DMA1_Stream4_IRQHandler+0x10>)
 8002d56:	f001 fd47 	bl	80047e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	2400078c 	.word	0x2400078c

08002d64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8002d68:	2040      	movs	r0, #64	; 0x40
 8002d6a:	f003 f86c 	bl	8005e46 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 8002d6e:	2080      	movs	r0, #128	; 0x80
 8002d70:	f003 f869 	bl	8005e46 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d7c:	4802      	ldr	r0, [pc, #8]	; (8002d88 <USART3_IRQHandler+0x10>)
 8002d7e:	f007 f99d 	bl	800a0bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	24000684 	.word	0x24000684

08002d8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8002d90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002d94:	f003 f857 	bl	8005e46 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8002d98:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002d9c:	f003 f853 	bl	8005e46 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8002da0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002da4:	f003 f84f 	bl	8005e46 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8002da8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002dac:	f003 f84b 	bl	8005e46 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002db0:	bf00      	nop
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002db8:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002dba:	f005 ff13 	bl	8008be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	240004cc 	.word	0x240004cc

08002dc8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <TIM5_IRQHandler+0x10>)
 8002dce:	f005 ff09 	bl	8008be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	240003e8 	.word	0x240003e8

08002ddc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002de0:	4802      	ldr	r0, [pc, #8]	; (8002dec <UART4_IRQHandler+0x10>)
 8002de2:	f007 f96b 	bl	800a0bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002de6:	bf00      	nop
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	24000564 	.word	0x24000564

08002df0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002df4:	4802      	ldr	r0, [pc, #8]	; (8002e00 <TIM6_DAC_IRQHandler+0x10>)
 8002df6:	f005 fef5 	bl	8008be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	24000434 	.word	0x24000434

08002e04 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002e08:	4802      	ldr	r0, [pc, #8]	; (8002e14 <TIM7_IRQHandler+0x10>)
 8002e0a:	f005 feeb 	bl	8008be4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	24000480 	.word	0x24000480

08002e18 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8002e1c:	4802      	ldr	r0, [pc, #8]	; (8002e28 <UART7_IRQHandler+0x10>)
 8002e1e:	f007 f94d 	bl	800a0bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002e22:	bf00      	nop
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	240005f4 	.word	0x240005f4

08002e2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0
	return 1;
 8002e30:	2301      	movs	r3, #1
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <_kill>:

int _kill(int pid, int sig)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e46:	f009 fbf1 	bl	800c62c <__errno>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2216      	movs	r2, #22
 8002e4e:	601a      	str	r2, [r3, #0]
	return -1;
 8002e50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <_exit>:

void _exit (int status)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e64:	f04f 31ff 	mov.w	r1, #4294967295
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f7ff ffe7 	bl	8002e3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e6e:	e7fe      	b.n	8002e6e <_exit+0x12>

08002e70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	e00a      	b.n	8002e98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e82:	f3af 8000 	nop.w
 8002e86:	4601      	mov	r1, r0
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	60ba      	str	r2, [r7, #8]
 8002e8e:	b2ca      	uxtb	r2, r1
 8002e90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3301      	adds	r3, #1
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	dbf0      	blt.n	8002e82 <_read+0x12>
	}

return len;
 8002ea0:	687b      	ldr	r3, [r7, #4]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b086      	sub	sp, #24
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
 8002eba:	e009      	b.n	8002ed0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	1c5a      	adds	r2, r3, #1
 8002ec0:	60ba      	str	r2, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	617b      	str	r3, [r7, #20]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	dbf1      	blt.n	8002ebc <_write+0x12>
	}
	return len;
 8002ed8:	687b      	ldr	r3, [r7, #4]
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3718      	adds	r7, #24
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <_close>:

int _close(int file)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
	return -1;
 8002eea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f0a:	605a      	str	r2, [r3, #4]
	return 0;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <_isatty>:

int _isatty(int file)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]
	return 1;
 8002f22:	2301      	movs	r3, #1
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f54:	4a14      	ldr	r2, [pc, #80]	; (8002fa8 <_sbrk+0x5c>)
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <_sbrk+0x60>)
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <_sbrk+0x64>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d102      	bne.n	8002f6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <_sbrk+0x64>)
 8002f6a:	4a12      	ldr	r2, [pc, #72]	; (8002fb4 <_sbrk+0x68>)
 8002f6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <_sbrk+0x64>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d207      	bcs.n	8002f8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f7c:	f009 fb56 	bl	800c62c <__errno>
 8002f80:	4603      	mov	r3, r0
 8002f82:	220c      	movs	r2, #12
 8002f84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f86:	f04f 33ff 	mov.w	r3, #4294967295
 8002f8a:	e009      	b.n	8002fa0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f8c:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <_sbrk+0x64>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f92:	4b07      	ldr	r3, [pc, #28]	; (8002fb0 <_sbrk+0x64>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <_sbrk+0x64>)
 8002f9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3718      	adds	r7, #24
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	24001020 	.word	0x24001020
 8002fac:	00000400 	.word	0x00000400
 8002fb0:	240009fc 	.word	0x240009fc
 8002fb4:	24000a20 	.word	0x24000a20

08002fb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002fbc:	4b39      	ldr	r3, [pc, #228]	; (80030a4 <SystemInit+0xec>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc2:	4a38      	ldr	r2, [pc, #224]	; (80030a4 <SystemInit+0xec>)
 8002fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002fcc:	4b36      	ldr	r3, [pc, #216]	; (80030a8 <SystemInit+0xf0>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	2b06      	cmp	r3, #6
 8002fd6:	d807      	bhi.n	8002fe8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002fd8:	4b33      	ldr	r3, [pc, #204]	; (80030a8 <SystemInit+0xf0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f023 030f 	bic.w	r3, r3, #15
 8002fe0:	4a31      	ldr	r2, [pc, #196]	; (80030a8 <SystemInit+0xf0>)
 8002fe2:	f043 0307 	orr.w	r3, r3, #7
 8002fe6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002fe8:	4b30      	ldr	r3, [pc, #192]	; (80030ac <SystemInit+0xf4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a2f      	ldr	r2, [pc, #188]	; (80030ac <SystemInit+0xf4>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ff4:	4b2d      	ldr	r3, [pc, #180]	; (80030ac <SystemInit+0xf4>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002ffa:	4b2c      	ldr	r3, [pc, #176]	; (80030ac <SystemInit+0xf4>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	492b      	ldr	r1, [pc, #172]	; (80030ac <SystemInit+0xf4>)
 8003000:	4b2b      	ldr	r3, [pc, #172]	; (80030b0 <SystemInit+0xf8>)
 8003002:	4013      	ands	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003006:	4b28      	ldr	r3, [pc, #160]	; (80030a8 <SystemInit+0xf0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d007      	beq.n	8003022 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003012:	4b25      	ldr	r3, [pc, #148]	; (80030a8 <SystemInit+0xf0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 030f 	bic.w	r3, r3, #15
 800301a:	4a23      	ldr	r2, [pc, #140]	; (80030a8 <SystemInit+0xf0>)
 800301c:	f043 0307 	orr.w	r3, r3, #7
 8003020:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003022:	4b22      	ldr	r3, [pc, #136]	; (80030ac <SystemInit+0xf4>)
 8003024:	2200      	movs	r2, #0
 8003026:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003028:	4b20      	ldr	r3, [pc, #128]	; (80030ac <SystemInit+0xf4>)
 800302a:	2200      	movs	r2, #0
 800302c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800302e:	4b1f      	ldr	r3, [pc, #124]	; (80030ac <SystemInit+0xf4>)
 8003030:	2200      	movs	r2, #0
 8003032:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003034:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <SystemInit+0xf4>)
 8003036:	4a1f      	ldr	r2, [pc, #124]	; (80030b4 <SystemInit+0xfc>)
 8003038:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800303a:	4b1c      	ldr	r3, [pc, #112]	; (80030ac <SystemInit+0xf4>)
 800303c:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <SystemInit+0x100>)
 800303e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003040:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <SystemInit+0xf4>)
 8003042:	4a1e      	ldr	r2, [pc, #120]	; (80030bc <SystemInit+0x104>)
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003046:	4b19      	ldr	r3, [pc, #100]	; (80030ac <SystemInit+0xf4>)
 8003048:	2200      	movs	r2, #0
 800304a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800304c:	4b17      	ldr	r3, [pc, #92]	; (80030ac <SystemInit+0xf4>)
 800304e:	4a1b      	ldr	r2, [pc, #108]	; (80030bc <SystemInit+0x104>)
 8003050:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003052:	4b16      	ldr	r3, [pc, #88]	; (80030ac <SystemInit+0xf4>)
 8003054:	2200      	movs	r2, #0
 8003056:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003058:	4b14      	ldr	r3, [pc, #80]	; (80030ac <SystemInit+0xf4>)
 800305a:	4a18      	ldr	r2, [pc, #96]	; (80030bc <SystemInit+0x104>)
 800305c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800305e:	4b13      	ldr	r3, [pc, #76]	; (80030ac <SystemInit+0xf4>)
 8003060:	2200      	movs	r2, #0
 8003062:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003064:	4b11      	ldr	r3, [pc, #68]	; (80030ac <SystemInit+0xf4>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a10      	ldr	r2, [pc, #64]	; (80030ac <SystemInit+0xf4>)
 800306a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <SystemInit+0xf4>)
 8003072:	2200      	movs	r2, #0
 8003074:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003076:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <SystemInit+0x108>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b12      	ldr	r3, [pc, #72]	; (80030c4 <SystemInit+0x10c>)
 800307c:	4013      	ands	r3, r2
 800307e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003082:	d202      	bcs.n	800308a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003084:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <SystemInit+0x110>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800308a:	4b10      	ldr	r3, [pc, #64]	; (80030cc <SystemInit+0x114>)
 800308c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003090:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003092:	4b04      	ldr	r3, [pc, #16]	; (80030a4 <SystemInit+0xec>)
 8003094:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003098:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	e000ed00 	.word	0xe000ed00
 80030a8:	52002000 	.word	0x52002000
 80030ac:	58024400 	.word	0x58024400
 80030b0:	eaf6ed7f 	.word	0xeaf6ed7f
 80030b4:	02020200 	.word	0x02020200
 80030b8:	01ff0000 	.word	0x01ff0000
 80030bc:	01010280 	.word	0x01010280
 80030c0:	5c001000 	.word	0x5c001000
 80030c4:	ffff0000 	.word	0xffff0000
 80030c8:	51008108 	.word	0x51008108
 80030cc:	52004000 	.word	0x52004000

080030d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
 ldr   sp, =_estack      /* set stack pointer */
 80030d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003108 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80030d4:	f7ff ff70 	bl	8002fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030d8:	480c      	ldr	r0, [pc, #48]	; (800310c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030da:	490d      	ldr	r1, [pc, #52]	; (8003110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030dc:	4a0d      	ldr	r2, [pc, #52]	; (8003114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030e0:	e002      	b.n	80030e8 <LoopCopyDataInit>

080030e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030e6:	3304      	adds	r3, #4

080030e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030ec:	d3f9      	bcc.n	80030e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ee:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030f0:	4c0a      	ldr	r4, [pc, #40]	; (800311c <LoopFillZerobss+0x22>)
  movs r3, #0
 80030f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030f4:	e001      	b.n	80030fa <LoopFillZerobss>

080030f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030f8:	3204      	adds	r2, #4

080030fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030fc:	d3fb      	bcc.n	80030f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030fe:	f009 fa9b 	bl	800c638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003102:	f7fd ff9f 	bl	8001044 <main>
  bx  lr
 8003106:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8003108:	24001020 	.word	0x24001020
  ldr r0, =_sdata
 800310c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003110:	240001f0 	.word	0x240001f0
  ldr r2, =_sidata
 8003114:	0800f53c 	.word	0x0800f53c
  ldr r2, =_sbss
 8003118:	240001f0 	.word	0x240001f0
  ldr r4, =_ebss
 800311c:	24000a1c 	.word	0x24000a1c

08003120 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003120:	e7fe      	b.n	8003120 <ADC3_IRQHandler>
	...

08003124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800312a:	2003      	movs	r0, #3
 800312c:	f000 f968 	bl	8003400 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003130:	f003 fcc0 	bl	8006ab4 <HAL_RCC_GetSysClockFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b15      	ldr	r3, [pc, #84]	; (800318c <HAL_Init+0x68>)
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	f003 030f 	and.w	r3, r3, #15
 8003140:	4913      	ldr	r1, [pc, #76]	; (8003190 <HAL_Init+0x6c>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <HAL_Init+0x68>)
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f003 030f 	and.w	r3, r3, #15
 8003156:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <HAL_Init+0x6c>)
 8003158:	5cd3      	ldrb	r3, [r2, r3]
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
 8003164:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <HAL_Init+0x70>)
 8003166:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003168:	4a0b      	ldr	r2, [pc, #44]	; (8003198 <HAL_Init+0x74>)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800316e:	2000      	movs	r0, #0
 8003170:	f000 f814 	bl	800319c <HAL_InitTick>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e002      	b.n	8003184 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800317e:	f7ff f8e7 	bl	8002350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	58024400 	.word	0x58024400
 8003190:	0800ef28 	.word	0x0800ef28
 8003194:	24000014 	.word	0x24000014
 8003198:	24000010 	.word	0x24000010

0800319c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80031a4:	4b15      	ldr	r3, [pc, #84]	; (80031fc <HAL_InitTick+0x60>)
 80031a6:	781b      	ldrb	r3, [r3, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d101      	bne.n	80031b0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e021      	b.n	80031f4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80031b0:	4b13      	ldr	r3, [pc, #76]	; (8003200 <HAL_InitTick+0x64>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <HAL_InitTick+0x60>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	4619      	mov	r1, r3
 80031ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031be:	fbb3 f3f1 	udiv	r3, r3, r1
 80031c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f94d 	bl	8003466 <HAL_SYSTICK_Config>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e00e      	b.n	80031f4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b0f      	cmp	r3, #15
 80031da:	d80a      	bhi.n	80031f2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031dc:	2200      	movs	r2, #0
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	f04f 30ff 	mov.w	r0, #4294967295
 80031e4:	f000 f917 	bl	8003416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031e8:	4a06      	ldr	r2, [pc, #24]	; (8003204 <HAL_InitTick+0x68>)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	e000      	b.n	80031f4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	2400001c 	.word	0x2400001c
 8003200:	24000010 	.word	0x24000010
 8003204:	24000018 	.word	0x24000018

08003208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800320c:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_IncTick+0x20>)
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	4b06      	ldr	r3, [pc, #24]	; (800322c <HAL_IncTick+0x24>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4413      	add	r3, r2
 8003218:	4a04      	ldr	r2, [pc, #16]	; (800322c <HAL_IncTick+0x24>)
 800321a:	6013      	str	r3, [r2, #0]
}
 800321c:	bf00      	nop
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	2400001c 	.word	0x2400001c
 800322c:	24000a08 	.word	0x24000a08

08003230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return uwTick;
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <HAL_GetTick+0x14>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	24000a08 	.word	0x24000a08

08003248 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <HAL_GetREVID+0x14>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	0c1b      	lsrs	r3, r3, #16
}
 8003252:	4618      	mov	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	5c001000 	.word	0x5c001000

08003260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800327c:	4013      	ands	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 800328a:	4313      	orrs	r3, r2
 800328c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800328e:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	60d3      	str	r3, [r2, #12]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	e000ed00 	.word	0xe000ed00
 80032a4:	05fa0000 	.word	0x05fa0000

080032a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	f003 0307 	and.w	r3, r3, #7
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	db0b      	blt.n	80032ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	4907      	ldr	r1, [pc, #28]	; (80032fc <__NVIC_EnableIRQ+0x38>)
 80032de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2001      	movs	r0, #1
 80032e6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000e100 	.word	0xe000e100

08003300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	6039      	str	r1, [r7, #0]
 800330a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800330c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003310:	2b00      	cmp	r3, #0
 8003312:	db0a      	blt.n	800332a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	490c      	ldr	r1, [pc, #48]	; (800334c <__NVIC_SetPriority+0x4c>)
 800331a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800331e:	0112      	lsls	r2, r2, #4
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	440b      	add	r3, r1
 8003324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003328:	e00a      	b.n	8003340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4908      	ldr	r1, [pc, #32]	; (8003350 <__NVIC_SetPriority+0x50>)
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	3b04      	subs	r3, #4
 8003338:	0112      	lsls	r2, r2, #4
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	440b      	add	r3, r1
 800333e:	761a      	strb	r2, [r3, #24]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000e100 	.word	0xe000e100
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003354:	b480      	push	{r7}
 8003356:	b089      	sub	sp, #36	; 0x24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f1c3 0307 	rsb	r3, r3, #7
 800336e:	2b04      	cmp	r3, #4
 8003370:	bf28      	it	cs
 8003372:	2304      	movcs	r3, #4
 8003374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3304      	adds	r3, #4
 800337a:	2b06      	cmp	r3, #6
 800337c:	d902      	bls.n	8003384 <NVIC_EncodePriority+0x30>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3b03      	subs	r3, #3
 8003382:	e000      	b.n	8003386 <NVIC_EncodePriority+0x32>
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003388:	f04f 32ff 	mov.w	r2, #4294967295
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	401a      	ands	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800339c:	f04f 31ff 	mov.w	r1, #4294967295
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	43d9      	mvns	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	4313      	orrs	r3, r2
         );
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3724      	adds	r7, #36	; 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033cc:	d301      	bcc.n	80033d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ce:	2301      	movs	r3, #1
 80033d0:	e00f      	b.n	80033f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <SysTick_Config+0x40>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033da:	210f      	movs	r1, #15
 80033dc:	f04f 30ff 	mov.w	r0, #4294967295
 80033e0:	f7ff ff8e 	bl	8003300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <SysTick_Config+0x40>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <SysTick_Config+0x40>)
 80033ec:	2207      	movs	r2, #7
 80033ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	e000e010 	.word	0xe000e010

08003400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff29 	bl	8003260 <__NVIC_SetPriorityGrouping>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003424:	f7ff ff40 	bl	80032a8 <__NVIC_GetPriorityGrouping>
 8003428:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	6978      	ldr	r0, [r7, #20]
 8003430:	f7ff ff90 	bl	8003354 <NVIC_EncodePriority>
 8003434:	4602      	mov	r2, r0
 8003436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800343a:	4611      	mov	r1, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff5f 	bl	8003300 <__NVIC_SetPriority>
}
 8003442:	bf00      	nop
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	4603      	mov	r3, r0
 8003452:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff33 	bl	80032c4 <__NVIC_EnableIRQ>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff ffa4 	bl	80033bc <SysTick_Config>
 8003474:	4603      	mov	r3, r0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8003482:	f000 f802 	bl	800348a <HAL_SYSTICK_Callback>
}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800348a:	b480      	push	{r7}
 800348c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e054      	b.n	8003554 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	7f5b      	ldrb	r3, [r3, #29]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d105      	bne.n	80034c0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fe ff62 	bl	8002384 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	791b      	ldrb	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10c      	bne.n	80034e8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a22      	ldr	r2, [pc, #136]	; (800355c <HAL_CRC_Init+0xc4>)
 80034d4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f022 0218 	bic.w	r2, r2, #24
 80034e4:	609a      	str	r2, [r3, #8]
 80034e6:	e00c      	b.n	8003502 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6899      	ldr	r1, [r3, #8]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	461a      	mov	r2, r3
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f834 	bl	8003560 <HAL_CRCEx_Polynomial_Set>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e028      	b.n	8003554 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	795b      	ldrb	r3, [r3, #5]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f04f 32ff 	mov.w	r2, #4294967295
 8003512:	611a      	str	r2, [r3, #16]
 8003514:	e004      	b.n	8003520 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	6912      	ldr	r2, [r2, #16]
 800351e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695a      	ldr	r2, [r3, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699a      	ldr	r2, [r3, #24]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	04c11db7 	.word	0x04c11db7

08003560 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800356c:	2300      	movs	r3, #0
 800356e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003570:	231f      	movs	r3, #31
 8003572:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003574:	bf00      	nop
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1e5a      	subs	r2, r3, #1
 800357a:	613a      	str	r2, [r7, #16]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d009      	beq.n	8003594 <HAL_CRCEx_Polynomial_Set+0x34>
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	f003 031f 	and.w	r3, r3, #31
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	fa22 f303 	lsr.w	r3, r2, r3
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_CRCEx_Polynomial_Set+0x16>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b18      	cmp	r3, #24
 8003598:	d846      	bhi.n	8003628 <HAL_CRCEx_Polynomial_Set+0xc8>
 800359a:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <HAL_CRCEx_Polynomial_Set+0x40>)
 800359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a0:	0800362f 	.word	0x0800362f
 80035a4:	08003629 	.word	0x08003629
 80035a8:	08003629 	.word	0x08003629
 80035ac:	08003629 	.word	0x08003629
 80035b0:	08003629 	.word	0x08003629
 80035b4:	08003629 	.word	0x08003629
 80035b8:	08003629 	.word	0x08003629
 80035bc:	08003629 	.word	0x08003629
 80035c0:	0800361d 	.word	0x0800361d
 80035c4:	08003629 	.word	0x08003629
 80035c8:	08003629 	.word	0x08003629
 80035cc:	08003629 	.word	0x08003629
 80035d0:	08003629 	.word	0x08003629
 80035d4:	08003629 	.word	0x08003629
 80035d8:	08003629 	.word	0x08003629
 80035dc:	08003629 	.word	0x08003629
 80035e0:	08003611 	.word	0x08003611
 80035e4:	08003629 	.word	0x08003629
 80035e8:	08003629 	.word	0x08003629
 80035ec:	08003629 	.word	0x08003629
 80035f0:	08003629 	.word	0x08003629
 80035f4:	08003629 	.word	0x08003629
 80035f8:	08003629 	.word	0x08003629
 80035fc:	08003629 	.word	0x08003629
 8003600:	08003605 	.word	0x08003605
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b06      	cmp	r3, #6
 8003608:	d913      	bls.n	8003632 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800360e:	e010      	b.n	8003632 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b07      	cmp	r3, #7
 8003614:	d90f      	bls.n	8003636 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800361a:	e00c      	b.n	8003636 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	2b0f      	cmp	r3, #15
 8003620:	d90b      	bls.n	800363a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003626:	e008      	b.n	800363a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	75fb      	strb	r3, [r7, #23]
      break;
 800362c:	e006      	b.n	800363c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800362e:	bf00      	nop
 8003630:	e004      	b.n	800363c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003632:	bf00      	nop
 8003634:	e002      	b.n	800363c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003636:	bf00      	nop
 8003638:	e000      	b.n	800363c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800363a:	bf00      	nop
  }
  if (status == HAL_OK)
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10d      	bne.n	800365e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68ba      	ldr	r2, [r7, #8]
 8003648:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f023 0118 	bic.w	r1, r3, #24
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	430a      	orrs	r2, r1
 800365c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800365e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003660:	4618      	mov	r0, r3
 8003662:	371c      	adds	r7, #28
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003674:	f7ff fddc 	bl	8003230 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e316      	b.n	8003cb2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a66      	ldr	r2, [pc, #408]	; (8003824 <HAL_DMA_Init+0x1b8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d04a      	beq.n	8003724 <HAL_DMA_Init+0xb8>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a65      	ldr	r2, [pc, #404]	; (8003828 <HAL_DMA_Init+0x1bc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d045      	beq.n	8003724 <HAL_DMA_Init+0xb8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a63      	ldr	r2, [pc, #396]	; (800382c <HAL_DMA_Init+0x1c0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d040      	beq.n	8003724 <HAL_DMA_Init+0xb8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a62      	ldr	r2, [pc, #392]	; (8003830 <HAL_DMA_Init+0x1c4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d03b      	beq.n	8003724 <HAL_DMA_Init+0xb8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a60      	ldr	r2, [pc, #384]	; (8003834 <HAL_DMA_Init+0x1c8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d036      	beq.n	8003724 <HAL_DMA_Init+0xb8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a5f      	ldr	r2, [pc, #380]	; (8003838 <HAL_DMA_Init+0x1cc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d031      	beq.n	8003724 <HAL_DMA_Init+0xb8>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a5d      	ldr	r2, [pc, #372]	; (800383c <HAL_DMA_Init+0x1d0>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d02c      	beq.n	8003724 <HAL_DMA_Init+0xb8>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a5c      	ldr	r2, [pc, #368]	; (8003840 <HAL_DMA_Init+0x1d4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d027      	beq.n	8003724 <HAL_DMA_Init+0xb8>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a5a      	ldr	r2, [pc, #360]	; (8003844 <HAL_DMA_Init+0x1d8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d022      	beq.n	8003724 <HAL_DMA_Init+0xb8>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a59      	ldr	r2, [pc, #356]	; (8003848 <HAL_DMA_Init+0x1dc>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d01d      	beq.n	8003724 <HAL_DMA_Init+0xb8>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a57      	ldr	r2, [pc, #348]	; (800384c <HAL_DMA_Init+0x1e0>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d018      	beq.n	8003724 <HAL_DMA_Init+0xb8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a56      	ldr	r2, [pc, #344]	; (8003850 <HAL_DMA_Init+0x1e4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d013      	beq.n	8003724 <HAL_DMA_Init+0xb8>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a54      	ldr	r2, [pc, #336]	; (8003854 <HAL_DMA_Init+0x1e8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00e      	beq.n	8003724 <HAL_DMA_Init+0xb8>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a53      	ldr	r2, [pc, #332]	; (8003858 <HAL_DMA_Init+0x1ec>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d009      	beq.n	8003724 <HAL_DMA_Init+0xb8>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a51      	ldr	r2, [pc, #324]	; (800385c <HAL_DMA_Init+0x1f0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <HAL_DMA_Init+0xb8>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a50      	ldr	r2, [pc, #320]	; (8003860 <HAL_DMA_Init+0x1f4>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d101      	bne.n	8003728 <HAL_DMA_Init+0xbc>
 8003724:	2301      	movs	r3, #1
 8003726:	e000      	b.n	800372a <HAL_DMA_Init+0xbe>
 8003728:	2300      	movs	r3, #0
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 813b 	beq.w	80039a6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a37      	ldr	r2, [pc, #220]	; (8003824 <HAL_DMA_Init+0x1b8>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d04a      	beq.n	80037e0 <HAL_DMA_Init+0x174>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a36      	ldr	r2, [pc, #216]	; (8003828 <HAL_DMA_Init+0x1bc>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d045      	beq.n	80037e0 <HAL_DMA_Init+0x174>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a34      	ldr	r2, [pc, #208]	; (800382c <HAL_DMA_Init+0x1c0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d040      	beq.n	80037e0 <HAL_DMA_Init+0x174>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a33      	ldr	r2, [pc, #204]	; (8003830 <HAL_DMA_Init+0x1c4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d03b      	beq.n	80037e0 <HAL_DMA_Init+0x174>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a31      	ldr	r2, [pc, #196]	; (8003834 <HAL_DMA_Init+0x1c8>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d036      	beq.n	80037e0 <HAL_DMA_Init+0x174>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a30      	ldr	r2, [pc, #192]	; (8003838 <HAL_DMA_Init+0x1cc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d031      	beq.n	80037e0 <HAL_DMA_Init+0x174>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a2e      	ldr	r2, [pc, #184]	; (800383c <HAL_DMA_Init+0x1d0>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d02c      	beq.n	80037e0 <HAL_DMA_Init+0x174>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a2d      	ldr	r2, [pc, #180]	; (8003840 <HAL_DMA_Init+0x1d4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d027      	beq.n	80037e0 <HAL_DMA_Init+0x174>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a2b      	ldr	r2, [pc, #172]	; (8003844 <HAL_DMA_Init+0x1d8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d022      	beq.n	80037e0 <HAL_DMA_Init+0x174>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a2a      	ldr	r2, [pc, #168]	; (8003848 <HAL_DMA_Init+0x1dc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d01d      	beq.n	80037e0 <HAL_DMA_Init+0x174>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a28      	ldr	r2, [pc, #160]	; (800384c <HAL_DMA_Init+0x1e0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d018      	beq.n	80037e0 <HAL_DMA_Init+0x174>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a27      	ldr	r2, [pc, #156]	; (8003850 <HAL_DMA_Init+0x1e4>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d013      	beq.n	80037e0 <HAL_DMA_Init+0x174>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a25      	ldr	r2, [pc, #148]	; (8003854 <HAL_DMA_Init+0x1e8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00e      	beq.n	80037e0 <HAL_DMA_Init+0x174>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a24      	ldr	r2, [pc, #144]	; (8003858 <HAL_DMA_Init+0x1ec>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d009      	beq.n	80037e0 <HAL_DMA_Init+0x174>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a22      	ldr	r2, [pc, #136]	; (800385c <HAL_DMA_Init+0x1f0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d004      	beq.n	80037e0 <HAL_DMA_Init+0x174>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a21      	ldr	r2, [pc, #132]	; (8003860 <HAL_DMA_Init+0x1f4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d108      	bne.n	80037f2 <HAL_DMA_Init+0x186>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	e007      	b.n	8003802 <HAL_DMA_Init+0x196>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003802:	e02f      	b.n	8003864 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003804:	f7ff fd14 	bl	8003230 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b05      	cmp	r3, #5
 8003810:	d928      	bls.n	8003864 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2203      	movs	r2, #3
 800381c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e246      	b.n	8003cb2 <HAL_DMA_Init+0x646>
 8003824:	40020010 	.word	0x40020010
 8003828:	40020028 	.word	0x40020028
 800382c:	40020040 	.word	0x40020040
 8003830:	40020058 	.word	0x40020058
 8003834:	40020070 	.word	0x40020070
 8003838:	40020088 	.word	0x40020088
 800383c:	400200a0 	.word	0x400200a0
 8003840:	400200b8 	.word	0x400200b8
 8003844:	40020410 	.word	0x40020410
 8003848:	40020428 	.word	0x40020428
 800384c:	40020440 	.word	0x40020440
 8003850:	40020458 	.word	0x40020458
 8003854:	40020470 	.word	0x40020470
 8003858:	40020488 	.word	0x40020488
 800385c:	400204a0 	.word	0x400204a0
 8003860:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1c8      	bne.n	8003804 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4b83      	ldr	r3, [pc, #524]	; (8003a8c <HAL_DMA_Init+0x420>)
 800387e:	4013      	ands	r3, r2
 8003880:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800388a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003896:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d107      	bne.n	80038c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	4313      	orrs	r3, r2
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80038c8:	4b71      	ldr	r3, [pc, #452]	; (8003a90 <HAL_DMA_Init+0x424>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	4b71      	ldr	r3, [pc, #452]	; (8003a94 <HAL_DMA_Init+0x428>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d4:	d328      	bcc.n	8003928 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b28      	cmp	r3, #40	; 0x28
 80038dc:	d903      	bls.n	80038e6 <HAL_DMA_Init+0x27a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b2e      	cmp	r3, #46	; 0x2e
 80038e4:	d917      	bls.n	8003916 <HAL_DMA_Init+0x2aa>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b3e      	cmp	r3, #62	; 0x3e
 80038ec:	d903      	bls.n	80038f6 <HAL_DMA_Init+0x28a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b42      	cmp	r3, #66	; 0x42
 80038f4:	d90f      	bls.n	8003916 <HAL_DMA_Init+0x2aa>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b46      	cmp	r3, #70	; 0x46
 80038fc:	d903      	bls.n	8003906 <HAL_DMA_Init+0x29a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b48      	cmp	r3, #72	; 0x48
 8003904:	d907      	bls.n	8003916 <HAL_DMA_Init+0x2aa>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b4e      	cmp	r3, #78	; 0x4e
 800390c:	d905      	bls.n	800391a <HAL_DMA_Init+0x2ae>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b52      	cmp	r3, #82	; 0x52
 8003914:	d801      	bhi.n	800391a <HAL_DMA_Init+0x2ae>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_DMA_Init+0x2b0>
 800391a:	2300      	movs	r3, #0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003926:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f023 0307 	bic.w	r3, r3, #7
 800393e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	2b04      	cmp	r3, #4
 8003950:	d117      	bne.n	8003982 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	4313      	orrs	r3, r2
 800395a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00e      	beq.n	8003982 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f001 ff1b 	bl	80057a0 <DMA_CheckFifoParam>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2240      	movs	r2, #64	; 0x40
 8003974:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e197      	b.n	8003cb2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f001 fe56 	bl	800563c <DMA_CalcBaseAndBitshift>
 8003990:	4603      	mov	r3, r0
 8003992:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	f003 031f 	and.w	r3, r3, #31
 800399c:	223f      	movs	r2, #63	; 0x3f
 800399e:	409a      	lsls	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	e0cd      	b.n	8003b42 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a3b      	ldr	r2, [pc, #236]	; (8003a98 <HAL_DMA_Init+0x42c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d022      	beq.n	80039f6 <HAL_DMA_Init+0x38a>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a39      	ldr	r2, [pc, #228]	; (8003a9c <HAL_DMA_Init+0x430>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d01d      	beq.n	80039f6 <HAL_DMA_Init+0x38a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a38      	ldr	r2, [pc, #224]	; (8003aa0 <HAL_DMA_Init+0x434>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d018      	beq.n	80039f6 <HAL_DMA_Init+0x38a>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a36      	ldr	r2, [pc, #216]	; (8003aa4 <HAL_DMA_Init+0x438>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d013      	beq.n	80039f6 <HAL_DMA_Init+0x38a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a35      	ldr	r2, [pc, #212]	; (8003aa8 <HAL_DMA_Init+0x43c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d00e      	beq.n	80039f6 <HAL_DMA_Init+0x38a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a33      	ldr	r2, [pc, #204]	; (8003aac <HAL_DMA_Init+0x440>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d009      	beq.n	80039f6 <HAL_DMA_Init+0x38a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a32      	ldr	r2, [pc, #200]	; (8003ab0 <HAL_DMA_Init+0x444>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d004      	beq.n	80039f6 <HAL_DMA_Init+0x38a>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a30      	ldr	r2, [pc, #192]	; (8003ab4 <HAL_DMA_Init+0x448>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d101      	bne.n	80039fa <HAL_DMA_Init+0x38e>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <HAL_DMA_Init+0x390>
 80039fa:	2300      	movs	r3, #0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 8097 	beq.w	8003b30 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a24      	ldr	r2, [pc, #144]	; (8003a98 <HAL_DMA_Init+0x42c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d021      	beq.n	8003a50 <HAL_DMA_Init+0x3e4>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a22      	ldr	r2, [pc, #136]	; (8003a9c <HAL_DMA_Init+0x430>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01c      	beq.n	8003a50 <HAL_DMA_Init+0x3e4>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a21      	ldr	r2, [pc, #132]	; (8003aa0 <HAL_DMA_Init+0x434>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d017      	beq.n	8003a50 <HAL_DMA_Init+0x3e4>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1f      	ldr	r2, [pc, #124]	; (8003aa4 <HAL_DMA_Init+0x438>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d012      	beq.n	8003a50 <HAL_DMA_Init+0x3e4>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1e      	ldr	r2, [pc, #120]	; (8003aa8 <HAL_DMA_Init+0x43c>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00d      	beq.n	8003a50 <HAL_DMA_Init+0x3e4>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a1c      	ldr	r2, [pc, #112]	; (8003aac <HAL_DMA_Init+0x440>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d008      	beq.n	8003a50 <HAL_DMA_Init+0x3e4>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <HAL_DMA_Init+0x444>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <HAL_DMA_Init+0x3e4>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a19      	ldr	r2, [pc, #100]	; (8003ab4 <HAL_DMA_Init+0x448>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2202      	movs	r2, #2
 8003a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4b12      	ldr	r3, [pc, #72]	; (8003ab8 <HAL_DMA_Init+0x44c>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d020      	beq.n	8003abc <HAL_DMA_Init+0x450>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b80      	cmp	r3, #128	; 0x80
 8003a80:	d102      	bne.n	8003a88 <HAL_DMA_Init+0x41c>
 8003a82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a86:	e01a      	b.n	8003abe <HAL_DMA_Init+0x452>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e018      	b.n	8003abe <HAL_DMA_Init+0x452>
 8003a8c:	fe10803f 	.word	0xfe10803f
 8003a90:	5c001000 	.word	0x5c001000
 8003a94:	ffff0000 	.word	0xffff0000
 8003a98:	58025408 	.word	0x58025408
 8003a9c:	5802541c 	.word	0x5802541c
 8003aa0:	58025430 	.word	0x58025430
 8003aa4:	58025444 	.word	0x58025444
 8003aa8:	58025458 	.word	0x58025458
 8003aac:	5802546c 	.word	0x5802546c
 8003ab0:	58025480 	.word	0x58025480
 8003ab4:	58025494 	.word	0x58025494
 8003ab8:	fffe000f 	.word	0xfffe000f
 8003abc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68d2      	ldr	r2, [r2, #12]
 8003ac2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003ac4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003acc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	695b      	ldr	r3, [r3, #20]
 8003ad2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003ad4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003adc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003ae4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003aec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	461a      	mov	r2, r3
 8003b02:	4b6e      	ldr	r3, [pc, #440]	; (8003cbc <HAL_DMA_Init+0x650>)
 8003b04:	4413      	add	r3, r2
 8003b06:	4a6e      	ldr	r2, [pc, #440]	; (8003cc0 <HAL_DMA_Init+0x654>)
 8003b08:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0c:	091b      	lsrs	r3, r3, #4
 8003b0e:	009a      	lsls	r2, r3, #2
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f001 fd91 	bl	800563c <DMA_CalcBaseAndBitshift>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b22:	f003 031f 	and.w	r3, r3, #31
 8003b26:	2201      	movs	r2, #1
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	e008      	b.n	8003b42 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2240      	movs	r2, #64	; 0x40
 8003b34:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2203      	movs	r2, #3
 8003b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e0b7      	b.n	8003cb2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a5f      	ldr	r2, [pc, #380]	; (8003cc4 <HAL_DMA_Init+0x658>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d072      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a5d      	ldr	r2, [pc, #372]	; (8003cc8 <HAL_DMA_Init+0x65c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d06d      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a5c      	ldr	r2, [pc, #368]	; (8003ccc <HAL_DMA_Init+0x660>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d068      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a5a      	ldr	r2, [pc, #360]	; (8003cd0 <HAL_DMA_Init+0x664>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d063      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a59      	ldr	r2, [pc, #356]	; (8003cd4 <HAL_DMA_Init+0x668>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d05e      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a57      	ldr	r2, [pc, #348]	; (8003cd8 <HAL_DMA_Init+0x66c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d059      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a56      	ldr	r2, [pc, #344]	; (8003cdc <HAL_DMA_Init+0x670>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d054      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a54      	ldr	r2, [pc, #336]	; (8003ce0 <HAL_DMA_Init+0x674>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d04f      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a53      	ldr	r2, [pc, #332]	; (8003ce4 <HAL_DMA_Init+0x678>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d04a      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a51      	ldr	r2, [pc, #324]	; (8003ce8 <HAL_DMA_Init+0x67c>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d045      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a50      	ldr	r2, [pc, #320]	; (8003cec <HAL_DMA_Init+0x680>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d040      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a4e      	ldr	r2, [pc, #312]	; (8003cf0 <HAL_DMA_Init+0x684>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d03b      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a4d      	ldr	r2, [pc, #308]	; (8003cf4 <HAL_DMA_Init+0x688>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d036      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a4b      	ldr	r2, [pc, #300]	; (8003cf8 <HAL_DMA_Init+0x68c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d031      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a4a      	ldr	r2, [pc, #296]	; (8003cfc <HAL_DMA_Init+0x690>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d02c      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a48      	ldr	r2, [pc, #288]	; (8003d00 <HAL_DMA_Init+0x694>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d027      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a47      	ldr	r2, [pc, #284]	; (8003d04 <HAL_DMA_Init+0x698>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d022      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a45      	ldr	r2, [pc, #276]	; (8003d08 <HAL_DMA_Init+0x69c>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d01d      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a44      	ldr	r2, [pc, #272]	; (8003d0c <HAL_DMA_Init+0x6a0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d018      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a42      	ldr	r2, [pc, #264]	; (8003d10 <HAL_DMA_Init+0x6a4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d013      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a41      	ldr	r2, [pc, #260]	; (8003d14 <HAL_DMA_Init+0x6a8>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d00e      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a3f      	ldr	r2, [pc, #252]	; (8003d18 <HAL_DMA_Init+0x6ac>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d009      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a3e      	ldr	r2, [pc, #248]	; (8003d1c <HAL_DMA_Init+0x6b0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d004      	beq.n	8003c32 <HAL_DMA_Init+0x5c6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a3c      	ldr	r2, [pc, #240]	; (8003d20 <HAL_DMA_Init+0x6b4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d101      	bne.n	8003c36 <HAL_DMA_Init+0x5ca>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <HAL_DMA_Init+0x5cc>
 8003c36:	2300      	movs	r3, #0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d032      	beq.n	8003ca2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f001 fe2b 	bl	8005898 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b80      	cmp	r3, #128	; 0x80
 8003c48:	d102      	bne.n	8003c50 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685a      	ldr	r2, [r3, #4]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c58:	b2d2      	uxtb	r2, r2
 8003c5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003c64:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d010      	beq.n	8003c90 <HAL_DMA_Init+0x624>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d80c      	bhi.n	8003c90 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f001 fea8 	bl	80059cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c80:	2200      	movs	r2, #0
 8003c82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	e008      	b.n	8003ca2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	a7fdabf8 	.word	0xa7fdabf8
 8003cc0:	cccccccd 	.word	0xcccccccd
 8003cc4:	40020010 	.word	0x40020010
 8003cc8:	40020028 	.word	0x40020028
 8003ccc:	40020040 	.word	0x40020040
 8003cd0:	40020058 	.word	0x40020058
 8003cd4:	40020070 	.word	0x40020070
 8003cd8:	40020088 	.word	0x40020088
 8003cdc:	400200a0 	.word	0x400200a0
 8003ce0:	400200b8 	.word	0x400200b8
 8003ce4:	40020410 	.word	0x40020410
 8003ce8:	40020428 	.word	0x40020428
 8003cec:	40020440 	.word	0x40020440
 8003cf0:	40020458 	.word	0x40020458
 8003cf4:	40020470 	.word	0x40020470
 8003cf8:	40020488 	.word	0x40020488
 8003cfc:	400204a0 	.word	0x400204a0
 8003d00:	400204b8 	.word	0x400204b8
 8003d04:	58025408 	.word	0x58025408
 8003d08:	5802541c 	.word	0x5802541c
 8003d0c:	58025430 	.word	0x58025430
 8003d10:	58025444 	.word	0x58025444
 8003d14:	58025458 	.word	0x58025458
 8003d18:	5802546c 	.word	0x5802546c
 8003d1c:	58025480 	.word	0x58025480
 8003d20:	58025494 	.word	0x58025494

08003d24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003d2c:	f7ff fa80 	bl	8003230 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e2dc      	b.n	80042f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d008      	beq.n	8003d5a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2280      	movs	r2, #128	; 0x80
 8003d4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e2cd      	b.n	80042f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a76      	ldr	r2, [pc, #472]	; (8003f38 <HAL_DMA_Abort+0x214>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d04a      	beq.n	8003dfa <HAL_DMA_Abort+0xd6>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a74      	ldr	r2, [pc, #464]	; (8003f3c <HAL_DMA_Abort+0x218>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d045      	beq.n	8003dfa <HAL_DMA_Abort+0xd6>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a73      	ldr	r2, [pc, #460]	; (8003f40 <HAL_DMA_Abort+0x21c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d040      	beq.n	8003dfa <HAL_DMA_Abort+0xd6>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a71      	ldr	r2, [pc, #452]	; (8003f44 <HAL_DMA_Abort+0x220>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d03b      	beq.n	8003dfa <HAL_DMA_Abort+0xd6>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a70      	ldr	r2, [pc, #448]	; (8003f48 <HAL_DMA_Abort+0x224>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d036      	beq.n	8003dfa <HAL_DMA_Abort+0xd6>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a6e      	ldr	r2, [pc, #440]	; (8003f4c <HAL_DMA_Abort+0x228>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d031      	beq.n	8003dfa <HAL_DMA_Abort+0xd6>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a6d      	ldr	r2, [pc, #436]	; (8003f50 <HAL_DMA_Abort+0x22c>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d02c      	beq.n	8003dfa <HAL_DMA_Abort+0xd6>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a6b      	ldr	r2, [pc, #428]	; (8003f54 <HAL_DMA_Abort+0x230>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d027      	beq.n	8003dfa <HAL_DMA_Abort+0xd6>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a6a      	ldr	r2, [pc, #424]	; (8003f58 <HAL_DMA_Abort+0x234>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d022      	beq.n	8003dfa <HAL_DMA_Abort+0xd6>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a68      	ldr	r2, [pc, #416]	; (8003f5c <HAL_DMA_Abort+0x238>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01d      	beq.n	8003dfa <HAL_DMA_Abort+0xd6>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a67      	ldr	r2, [pc, #412]	; (8003f60 <HAL_DMA_Abort+0x23c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d018      	beq.n	8003dfa <HAL_DMA_Abort+0xd6>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a65      	ldr	r2, [pc, #404]	; (8003f64 <HAL_DMA_Abort+0x240>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <HAL_DMA_Abort+0xd6>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a64      	ldr	r2, [pc, #400]	; (8003f68 <HAL_DMA_Abort+0x244>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00e      	beq.n	8003dfa <HAL_DMA_Abort+0xd6>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a62      	ldr	r2, [pc, #392]	; (8003f6c <HAL_DMA_Abort+0x248>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d009      	beq.n	8003dfa <HAL_DMA_Abort+0xd6>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a61      	ldr	r2, [pc, #388]	; (8003f70 <HAL_DMA_Abort+0x24c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d004      	beq.n	8003dfa <HAL_DMA_Abort+0xd6>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a5f      	ldr	r2, [pc, #380]	; (8003f74 <HAL_DMA_Abort+0x250>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d101      	bne.n	8003dfe <HAL_DMA_Abort+0xda>
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e000      	b.n	8003e00 <HAL_DMA_Abort+0xdc>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d013      	beq.n	8003e2c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 021e 	bic.w	r2, r2, #30
 8003e12:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e22:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	e00a      	b.n	8003e42 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 020e 	bic.w	r2, r2, #14
 8003e3a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a3c      	ldr	r2, [pc, #240]	; (8003f38 <HAL_DMA_Abort+0x214>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d072      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a3a      	ldr	r2, [pc, #232]	; (8003f3c <HAL_DMA_Abort+0x218>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d06d      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a39      	ldr	r2, [pc, #228]	; (8003f40 <HAL_DMA_Abort+0x21c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d068      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a37      	ldr	r2, [pc, #220]	; (8003f44 <HAL_DMA_Abort+0x220>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d063      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a36      	ldr	r2, [pc, #216]	; (8003f48 <HAL_DMA_Abort+0x224>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d05e      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a34      	ldr	r2, [pc, #208]	; (8003f4c <HAL_DMA_Abort+0x228>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d059      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a33      	ldr	r2, [pc, #204]	; (8003f50 <HAL_DMA_Abort+0x22c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d054      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a31      	ldr	r2, [pc, #196]	; (8003f54 <HAL_DMA_Abort+0x230>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d04f      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a30      	ldr	r2, [pc, #192]	; (8003f58 <HAL_DMA_Abort+0x234>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d04a      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a2e      	ldr	r2, [pc, #184]	; (8003f5c <HAL_DMA_Abort+0x238>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d045      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a2d      	ldr	r2, [pc, #180]	; (8003f60 <HAL_DMA_Abort+0x23c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d040      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a2b      	ldr	r2, [pc, #172]	; (8003f64 <HAL_DMA_Abort+0x240>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d03b      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2a      	ldr	r2, [pc, #168]	; (8003f68 <HAL_DMA_Abort+0x244>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d036      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <HAL_DMA_Abort+0x248>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d031      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a27      	ldr	r2, [pc, #156]	; (8003f70 <HAL_DMA_Abort+0x24c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d02c      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a25      	ldr	r2, [pc, #148]	; (8003f74 <HAL_DMA_Abort+0x250>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d027      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a24      	ldr	r2, [pc, #144]	; (8003f78 <HAL_DMA_Abort+0x254>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d022      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a22      	ldr	r2, [pc, #136]	; (8003f7c <HAL_DMA_Abort+0x258>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01d      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a21      	ldr	r2, [pc, #132]	; (8003f80 <HAL_DMA_Abort+0x25c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d018      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a1f      	ldr	r2, [pc, #124]	; (8003f84 <HAL_DMA_Abort+0x260>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a1e      	ldr	r2, [pc, #120]	; (8003f88 <HAL_DMA_Abort+0x264>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d00e      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1c      	ldr	r2, [pc, #112]	; (8003f8c <HAL_DMA_Abort+0x268>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d009      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <HAL_DMA_Abort+0x26c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d004      	beq.n	8003f32 <HAL_DMA_Abort+0x20e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a19      	ldr	r2, [pc, #100]	; (8003f94 <HAL_DMA_Abort+0x270>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d132      	bne.n	8003f98 <HAL_DMA_Abort+0x274>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e031      	b.n	8003f9a <HAL_DMA_Abort+0x276>
 8003f36:	bf00      	nop
 8003f38:	40020010 	.word	0x40020010
 8003f3c:	40020028 	.word	0x40020028
 8003f40:	40020040 	.word	0x40020040
 8003f44:	40020058 	.word	0x40020058
 8003f48:	40020070 	.word	0x40020070
 8003f4c:	40020088 	.word	0x40020088
 8003f50:	400200a0 	.word	0x400200a0
 8003f54:	400200b8 	.word	0x400200b8
 8003f58:	40020410 	.word	0x40020410
 8003f5c:	40020428 	.word	0x40020428
 8003f60:	40020440 	.word	0x40020440
 8003f64:	40020458 	.word	0x40020458
 8003f68:	40020470 	.word	0x40020470
 8003f6c:	40020488 	.word	0x40020488
 8003f70:	400204a0 	.word	0x400204a0
 8003f74:	400204b8 	.word	0x400204b8
 8003f78:	58025408 	.word	0x58025408
 8003f7c:	5802541c 	.word	0x5802541c
 8003f80:	58025430 	.word	0x58025430
 8003f84:	58025444 	.word	0x58025444
 8003f88:	58025458 	.word	0x58025458
 8003f8c:	5802546c 	.word	0x5802546c
 8003f90:	58025480 	.word	0x58025480
 8003f94:	58025494 	.word	0x58025494
 8003f98:	2300      	movs	r3, #0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d007      	beq.n	8003fae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a6d      	ldr	r2, [pc, #436]	; (8004168 <HAL_DMA_Abort+0x444>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d04a      	beq.n	800404e <HAL_DMA_Abort+0x32a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a6b      	ldr	r2, [pc, #428]	; (800416c <HAL_DMA_Abort+0x448>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d045      	beq.n	800404e <HAL_DMA_Abort+0x32a>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a6a      	ldr	r2, [pc, #424]	; (8004170 <HAL_DMA_Abort+0x44c>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d040      	beq.n	800404e <HAL_DMA_Abort+0x32a>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a68      	ldr	r2, [pc, #416]	; (8004174 <HAL_DMA_Abort+0x450>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d03b      	beq.n	800404e <HAL_DMA_Abort+0x32a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a67      	ldr	r2, [pc, #412]	; (8004178 <HAL_DMA_Abort+0x454>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d036      	beq.n	800404e <HAL_DMA_Abort+0x32a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a65      	ldr	r2, [pc, #404]	; (800417c <HAL_DMA_Abort+0x458>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d031      	beq.n	800404e <HAL_DMA_Abort+0x32a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a64      	ldr	r2, [pc, #400]	; (8004180 <HAL_DMA_Abort+0x45c>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d02c      	beq.n	800404e <HAL_DMA_Abort+0x32a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a62      	ldr	r2, [pc, #392]	; (8004184 <HAL_DMA_Abort+0x460>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d027      	beq.n	800404e <HAL_DMA_Abort+0x32a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a61      	ldr	r2, [pc, #388]	; (8004188 <HAL_DMA_Abort+0x464>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d022      	beq.n	800404e <HAL_DMA_Abort+0x32a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a5f      	ldr	r2, [pc, #380]	; (800418c <HAL_DMA_Abort+0x468>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d01d      	beq.n	800404e <HAL_DMA_Abort+0x32a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a5e      	ldr	r2, [pc, #376]	; (8004190 <HAL_DMA_Abort+0x46c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d018      	beq.n	800404e <HAL_DMA_Abort+0x32a>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a5c      	ldr	r2, [pc, #368]	; (8004194 <HAL_DMA_Abort+0x470>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d013      	beq.n	800404e <HAL_DMA_Abort+0x32a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a5b      	ldr	r2, [pc, #364]	; (8004198 <HAL_DMA_Abort+0x474>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00e      	beq.n	800404e <HAL_DMA_Abort+0x32a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a59      	ldr	r2, [pc, #356]	; (800419c <HAL_DMA_Abort+0x478>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d009      	beq.n	800404e <HAL_DMA_Abort+0x32a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a58      	ldr	r2, [pc, #352]	; (80041a0 <HAL_DMA_Abort+0x47c>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d004      	beq.n	800404e <HAL_DMA_Abort+0x32a>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a56      	ldr	r2, [pc, #344]	; (80041a4 <HAL_DMA_Abort+0x480>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d108      	bne.n	8004060 <HAL_DMA_Abort+0x33c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	e007      	b.n	8004070 <HAL_DMA_Abort+0x34c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0201 	bic.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004070:	e013      	b.n	800409a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004072:	f7ff f8dd 	bl	8003230 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	2b05      	cmp	r3, #5
 800407e:	d90c      	bls.n	800409a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2203      	movs	r2, #3
 800408a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e12d      	b.n	80042f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e5      	bne.n	8004072 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a2f      	ldr	r2, [pc, #188]	; (8004168 <HAL_DMA_Abort+0x444>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d04a      	beq.n	8004146 <HAL_DMA_Abort+0x422>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a2d      	ldr	r2, [pc, #180]	; (800416c <HAL_DMA_Abort+0x448>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d045      	beq.n	8004146 <HAL_DMA_Abort+0x422>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a2c      	ldr	r2, [pc, #176]	; (8004170 <HAL_DMA_Abort+0x44c>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d040      	beq.n	8004146 <HAL_DMA_Abort+0x422>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a2a      	ldr	r2, [pc, #168]	; (8004174 <HAL_DMA_Abort+0x450>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d03b      	beq.n	8004146 <HAL_DMA_Abort+0x422>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a29      	ldr	r2, [pc, #164]	; (8004178 <HAL_DMA_Abort+0x454>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d036      	beq.n	8004146 <HAL_DMA_Abort+0x422>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a27      	ldr	r2, [pc, #156]	; (800417c <HAL_DMA_Abort+0x458>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d031      	beq.n	8004146 <HAL_DMA_Abort+0x422>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a26      	ldr	r2, [pc, #152]	; (8004180 <HAL_DMA_Abort+0x45c>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d02c      	beq.n	8004146 <HAL_DMA_Abort+0x422>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a24      	ldr	r2, [pc, #144]	; (8004184 <HAL_DMA_Abort+0x460>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d027      	beq.n	8004146 <HAL_DMA_Abort+0x422>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a23      	ldr	r2, [pc, #140]	; (8004188 <HAL_DMA_Abort+0x464>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d022      	beq.n	8004146 <HAL_DMA_Abort+0x422>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a21      	ldr	r2, [pc, #132]	; (800418c <HAL_DMA_Abort+0x468>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d01d      	beq.n	8004146 <HAL_DMA_Abort+0x422>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a20      	ldr	r2, [pc, #128]	; (8004190 <HAL_DMA_Abort+0x46c>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d018      	beq.n	8004146 <HAL_DMA_Abort+0x422>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1e      	ldr	r2, [pc, #120]	; (8004194 <HAL_DMA_Abort+0x470>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_DMA_Abort+0x422>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <HAL_DMA_Abort+0x474>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00e      	beq.n	8004146 <HAL_DMA_Abort+0x422>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1b      	ldr	r2, [pc, #108]	; (800419c <HAL_DMA_Abort+0x478>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d009      	beq.n	8004146 <HAL_DMA_Abort+0x422>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1a      	ldr	r2, [pc, #104]	; (80041a0 <HAL_DMA_Abort+0x47c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d004      	beq.n	8004146 <HAL_DMA_Abort+0x422>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a18      	ldr	r2, [pc, #96]	; (80041a4 <HAL_DMA_Abort+0x480>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d101      	bne.n	800414a <HAL_DMA_Abort+0x426>
 8004146:	2301      	movs	r3, #1
 8004148:	e000      	b.n	800414c <HAL_DMA_Abort+0x428>
 800414a:	2300      	movs	r3, #0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d02b      	beq.n	80041a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004154:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	223f      	movs	r2, #63	; 0x3f
 8004160:	409a      	lsls	r2, r3
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	609a      	str	r2, [r3, #8]
 8004166:	e02a      	b.n	80041be <HAL_DMA_Abort+0x49a>
 8004168:	40020010 	.word	0x40020010
 800416c:	40020028 	.word	0x40020028
 8004170:	40020040 	.word	0x40020040
 8004174:	40020058 	.word	0x40020058
 8004178:	40020070 	.word	0x40020070
 800417c:	40020088 	.word	0x40020088
 8004180:	400200a0 	.word	0x400200a0
 8004184:	400200b8 	.word	0x400200b8
 8004188:	40020410 	.word	0x40020410
 800418c:	40020428 	.word	0x40020428
 8004190:	40020440 	.word	0x40020440
 8004194:	40020458 	.word	0x40020458
 8004198:	40020470 	.word	0x40020470
 800419c:	40020488 	.word	0x40020488
 80041a0:	400204a0 	.word	0x400204a0
 80041a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b2:	f003 031f 	and.w	r3, r3, #31
 80041b6:	2201      	movs	r2, #1
 80041b8:	409a      	lsls	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a4f      	ldr	r2, [pc, #316]	; (8004300 <HAL_DMA_Abort+0x5dc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d072      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a4d      	ldr	r2, [pc, #308]	; (8004304 <HAL_DMA_Abort+0x5e0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d06d      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a4c      	ldr	r2, [pc, #304]	; (8004308 <HAL_DMA_Abort+0x5e4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d068      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a4a      	ldr	r2, [pc, #296]	; (800430c <HAL_DMA_Abort+0x5e8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d063      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a49      	ldr	r2, [pc, #292]	; (8004310 <HAL_DMA_Abort+0x5ec>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d05e      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a47      	ldr	r2, [pc, #284]	; (8004314 <HAL_DMA_Abort+0x5f0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d059      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a46      	ldr	r2, [pc, #280]	; (8004318 <HAL_DMA_Abort+0x5f4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d054      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a44      	ldr	r2, [pc, #272]	; (800431c <HAL_DMA_Abort+0x5f8>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d04f      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a43      	ldr	r2, [pc, #268]	; (8004320 <HAL_DMA_Abort+0x5fc>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d04a      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a41      	ldr	r2, [pc, #260]	; (8004324 <HAL_DMA_Abort+0x600>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d045      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a40      	ldr	r2, [pc, #256]	; (8004328 <HAL_DMA_Abort+0x604>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d040      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a3e      	ldr	r2, [pc, #248]	; (800432c <HAL_DMA_Abort+0x608>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d03b      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a3d      	ldr	r2, [pc, #244]	; (8004330 <HAL_DMA_Abort+0x60c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d036      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a3b      	ldr	r2, [pc, #236]	; (8004334 <HAL_DMA_Abort+0x610>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d031      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a3a      	ldr	r2, [pc, #232]	; (8004338 <HAL_DMA_Abort+0x614>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d02c      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a38      	ldr	r2, [pc, #224]	; (800433c <HAL_DMA_Abort+0x618>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d027      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a37      	ldr	r2, [pc, #220]	; (8004340 <HAL_DMA_Abort+0x61c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d022      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a35      	ldr	r2, [pc, #212]	; (8004344 <HAL_DMA_Abort+0x620>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d01d      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a34      	ldr	r2, [pc, #208]	; (8004348 <HAL_DMA_Abort+0x624>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d018      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a32      	ldr	r2, [pc, #200]	; (800434c <HAL_DMA_Abort+0x628>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a31      	ldr	r2, [pc, #196]	; (8004350 <HAL_DMA_Abort+0x62c>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00e      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a2f      	ldr	r2, [pc, #188]	; (8004354 <HAL_DMA_Abort+0x630>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d009      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a2e      	ldr	r2, [pc, #184]	; (8004358 <HAL_DMA_Abort+0x634>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d004      	beq.n	80042ae <HAL_DMA_Abort+0x58a>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a2c      	ldr	r2, [pc, #176]	; (800435c <HAL_DMA_Abort+0x638>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d101      	bne.n	80042b2 <HAL_DMA_Abort+0x58e>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <HAL_DMA_Abort+0x590>
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d015      	beq.n	80042e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80042c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80042e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3718      	adds	r7, #24
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40020010 	.word	0x40020010
 8004304:	40020028 	.word	0x40020028
 8004308:	40020040 	.word	0x40020040
 800430c:	40020058 	.word	0x40020058
 8004310:	40020070 	.word	0x40020070
 8004314:	40020088 	.word	0x40020088
 8004318:	400200a0 	.word	0x400200a0
 800431c:	400200b8 	.word	0x400200b8
 8004320:	40020410 	.word	0x40020410
 8004324:	40020428 	.word	0x40020428
 8004328:	40020440 	.word	0x40020440
 800432c:	40020458 	.word	0x40020458
 8004330:	40020470 	.word	0x40020470
 8004334:	40020488 	.word	0x40020488
 8004338:	400204a0 	.word	0x400204a0
 800433c:	400204b8 	.word	0x400204b8
 8004340:	58025408 	.word	0x58025408
 8004344:	5802541c 	.word	0x5802541c
 8004348:	58025430 	.word	0x58025430
 800434c:	58025444 	.word	0x58025444
 8004350:	58025458 	.word	0x58025458
 8004354:	5802546c 	.word	0x5802546c
 8004358:	58025480 	.word	0x58025480
 800435c:	58025494 	.word	0x58025494

08004360 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e205      	b.n	800477e <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d004      	beq.n	8004388 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2280      	movs	r2, #128	; 0x80
 8004382:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e1fa      	b.n	800477e <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a8c      	ldr	r2, [pc, #560]	; (80045c0 <HAL_DMA_Abort_IT+0x260>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d04a      	beq.n	8004428 <HAL_DMA_Abort_IT+0xc8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a8b      	ldr	r2, [pc, #556]	; (80045c4 <HAL_DMA_Abort_IT+0x264>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d045      	beq.n	8004428 <HAL_DMA_Abort_IT+0xc8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a89      	ldr	r2, [pc, #548]	; (80045c8 <HAL_DMA_Abort_IT+0x268>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d040      	beq.n	8004428 <HAL_DMA_Abort_IT+0xc8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a88      	ldr	r2, [pc, #544]	; (80045cc <HAL_DMA_Abort_IT+0x26c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d03b      	beq.n	8004428 <HAL_DMA_Abort_IT+0xc8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a86      	ldr	r2, [pc, #536]	; (80045d0 <HAL_DMA_Abort_IT+0x270>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d036      	beq.n	8004428 <HAL_DMA_Abort_IT+0xc8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a85      	ldr	r2, [pc, #532]	; (80045d4 <HAL_DMA_Abort_IT+0x274>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d031      	beq.n	8004428 <HAL_DMA_Abort_IT+0xc8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a83      	ldr	r2, [pc, #524]	; (80045d8 <HAL_DMA_Abort_IT+0x278>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d02c      	beq.n	8004428 <HAL_DMA_Abort_IT+0xc8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a82      	ldr	r2, [pc, #520]	; (80045dc <HAL_DMA_Abort_IT+0x27c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d027      	beq.n	8004428 <HAL_DMA_Abort_IT+0xc8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a80      	ldr	r2, [pc, #512]	; (80045e0 <HAL_DMA_Abort_IT+0x280>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d022      	beq.n	8004428 <HAL_DMA_Abort_IT+0xc8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a7f      	ldr	r2, [pc, #508]	; (80045e4 <HAL_DMA_Abort_IT+0x284>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d01d      	beq.n	8004428 <HAL_DMA_Abort_IT+0xc8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a7d      	ldr	r2, [pc, #500]	; (80045e8 <HAL_DMA_Abort_IT+0x288>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d018      	beq.n	8004428 <HAL_DMA_Abort_IT+0xc8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a7c      	ldr	r2, [pc, #496]	; (80045ec <HAL_DMA_Abort_IT+0x28c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d013      	beq.n	8004428 <HAL_DMA_Abort_IT+0xc8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a7a      	ldr	r2, [pc, #488]	; (80045f0 <HAL_DMA_Abort_IT+0x290>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d00e      	beq.n	8004428 <HAL_DMA_Abort_IT+0xc8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a79      	ldr	r2, [pc, #484]	; (80045f4 <HAL_DMA_Abort_IT+0x294>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d009      	beq.n	8004428 <HAL_DMA_Abort_IT+0xc8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a77      	ldr	r2, [pc, #476]	; (80045f8 <HAL_DMA_Abort_IT+0x298>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d004      	beq.n	8004428 <HAL_DMA_Abort_IT+0xc8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a76      	ldr	r2, [pc, #472]	; (80045fc <HAL_DMA_Abort_IT+0x29c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d101      	bne.n	800442c <HAL_DMA_Abort_IT+0xcc>
 8004428:	2301      	movs	r3, #1
 800442a:	e000      	b.n	800442e <HAL_DMA_Abort_IT+0xce>
 800442c:	2300      	movs	r3, #0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d065      	beq.n	80044fe <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2204      	movs	r2, #4
 8004436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a60      	ldr	r2, [pc, #384]	; (80045c0 <HAL_DMA_Abort_IT+0x260>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d04a      	beq.n	80044da <HAL_DMA_Abort_IT+0x17a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a5e      	ldr	r2, [pc, #376]	; (80045c4 <HAL_DMA_Abort_IT+0x264>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d045      	beq.n	80044da <HAL_DMA_Abort_IT+0x17a>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a5d      	ldr	r2, [pc, #372]	; (80045c8 <HAL_DMA_Abort_IT+0x268>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d040      	beq.n	80044da <HAL_DMA_Abort_IT+0x17a>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a5b      	ldr	r2, [pc, #364]	; (80045cc <HAL_DMA_Abort_IT+0x26c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d03b      	beq.n	80044da <HAL_DMA_Abort_IT+0x17a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a5a      	ldr	r2, [pc, #360]	; (80045d0 <HAL_DMA_Abort_IT+0x270>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d036      	beq.n	80044da <HAL_DMA_Abort_IT+0x17a>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a58      	ldr	r2, [pc, #352]	; (80045d4 <HAL_DMA_Abort_IT+0x274>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d031      	beq.n	80044da <HAL_DMA_Abort_IT+0x17a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a57      	ldr	r2, [pc, #348]	; (80045d8 <HAL_DMA_Abort_IT+0x278>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d02c      	beq.n	80044da <HAL_DMA_Abort_IT+0x17a>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a55      	ldr	r2, [pc, #340]	; (80045dc <HAL_DMA_Abort_IT+0x27c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d027      	beq.n	80044da <HAL_DMA_Abort_IT+0x17a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a54      	ldr	r2, [pc, #336]	; (80045e0 <HAL_DMA_Abort_IT+0x280>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d022      	beq.n	80044da <HAL_DMA_Abort_IT+0x17a>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a52      	ldr	r2, [pc, #328]	; (80045e4 <HAL_DMA_Abort_IT+0x284>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01d      	beq.n	80044da <HAL_DMA_Abort_IT+0x17a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a51      	ldr	r2, [pc, #324]	; (80045e8 <HAL_DMA_Abort_IT+0x288>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d018      	beq.n	80044da <HAL_DMA_Abort_IT+0x17a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a4f      	ldr	r2, [pc, #316]	; (80045ec <HAL_DMA_Abort_IT+0x28c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d013      	beq.n	80044da <HAL_DMA_Abort_IT+0x17a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a4e      	ldr	r2, [pc, #312]	; (80045f0 <HAL_DMA_Abort_IT+0x290>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d00e      	beq.n	80044da <HAL_DMA_Abort_IT+0x17a>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a4c      	ldr	r2, [pc, #304]	; (80045f4 <HAL_DMA_Abort_IT+0x294>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d009      	beq.n	80044da <HAL_DMA_Abort_IT+0x17a>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a4b      	ldr	r2, [pc, #300]	; (80045f8 <HAL_DMA_Abort_IT+0x298>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d004      	beq.n	80044da <HAL_DMA_Abort_IT+0x17a>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a49      	ldr	r2, [pc, #292]	; (80045fc <HAL_DMA_Abort_IT+0x29c>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d108      	bne.n	80044ec <HAL_DMA_Abort_IT+0x18c>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0201 	bic.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	e147      	b.n	800477c <HAL_DMA_Abort_IT+0x41c>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	e13e      	b.n	800477c <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 020e 	bic.w	r2, r2, #14
 800450c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4a2b      	ldr	r2, [pc, #172]	; (80045c0 <HAL_DMA_Abort_IT+0x260>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d04a      	beq.n	80045ae <HAL_DMA_Abort_IT+0x24e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a29      	ldr	r2, [pc, #164]	; (80045c4 <HAL_DMA_Abort_IT+0x264>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d045      	beq.n	80045ae <HAL_DMA_Abort_IT+0x24e>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a28      	ldr	r2, [pc, #160]	; (80045c8 <HAL_DMA_Abort_IT+0x268>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d040      	beq.n	80045ae <HAL_DMA_Abort_IT+0x24e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a26      	ldr	r2, [pc, #152]	; (80045cc <HAL_DMA_Abort_IT+0x26c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d03b      	beq.n	80045ae <HAL_DMA_Abort_IT+0x24e>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a25      	ldr	r2, [pc, #148]	; (80045d0 <HAL_DMA_Abort_IT+0x270>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d036      	beq.n	80045ae <HAL_DMA_Abort_IT+0x24e>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a23      	ldr	r2, [pc, #140]	; (80045d4 <HAL_DMA_Abort_IT+0x274>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d031      	beq.n	80045ae <HAL_DMA_Abort_IT+0x24e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a22      	ldr	r2, [pc, #136]	; (80045d8 <HAL_DMA_Abort_IT+0x278>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d02c      	beq.n	80045ae <HAL_DMA_Abort_IT+0x24e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a20      	ldr	r2, [pc, #128]	; (80045dc <HAL_DMA_Abort_IT+0x27c>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d027      	beq.n	80045ae <HAL_DMA_Abort_IT+0x24e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1f      	ldr	r2, [pc, #124]	; (80045e0 <HAL_DMA_Abort_IT+0x280>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d022      	beq.n	80045ae <HAL_DMA_Abort_IT+0x24e>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1d      	ldr	r2, [pc, #116]	; (80045e4 <HAL_DMA_Abort_IT+0x284>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d01d      	beq.n	80045ae <HAL_DMA_Abort_IT+0x24e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1c      	ldr	r2, [pc, #112]	; (80045e8 <HAL_DMA_Abort_IT+0x288>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d018      	beq.n	80045ae <HAL_DMA_Abort_IT+0x24e>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1a      	ldr	r2, [pc, #104]	; (80045ec <HAL_DMA_Abort_IT+0x28c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d013      	beq.n	80045ae <HAL_DMA_Abort_IT+0x24e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a19      	ldr	r2, [pc, #100]	; (80045f0 <HAL_DMA_Abort_IT+0x290>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00e      	beq.n	80045ae <HAL_DMA_Abort_IT+0x24e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <HAL_DMA_Abort_IT+0x294>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d009      	beq.n	80045ae <HAL_DMA_Abort_IT+0x24e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a16      	ldr	r2, [pc, #88]	; (80045f8 <HAL_DMA_Abort_IT+0x298>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d004      	beq.n	80045ae <HAL_DMA_Abort_IT+0x24e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a14      	ldr	r2, [pc, #80]	; (80045fc <HAL_DMA_Abort_IT+0x29c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d128      	bne.n	8004600 <HAL_DMA_Abort_IT+0x2a0>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 0201 	bic.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e027      	b.n	8004610 <HAL_DMA_Abort_IT+0x2b0>
 80045c0:	40020010 	.word	0x40020010
 80045c4:	40020028 	.word	0x40020028
 80045c8:	40020040 	.word	0x40020040
 80045cc:	40020058 	.word	0x40020058
 80045d0:	40020070 	.word	0x40020070
 80045d4:	40020088 	.word	0x40020088
 80045d8:	400200a0 	.word	0x400200a0
 80045dc:	400200b8 	.word	0x400200b8
 80045e0:	40020410 	.word	0x40020410
 80045e4:	40020428 	.word	0x40020428
 80045e8:	40020440 	.word	0x40020440
 80045ec:	40020458 	.word	0x40020458
 80045f0:	40020470 	.word	0x40020470
 80045f4:	40020488 	.word	0x40020488
 80045f8:	400204a0 	.word	0x400204a0
 80045fc:	400204b8 	.word	0x400204b8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 0201 	bic.w	r2, r2, #1
 800460e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a5c      	ldr	r2, [pc, #368]	; (8004788 <HAL_DMA_Abort_IT+0x428>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d072      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a5b      	ldr	r2, [pc, #364]	; (800478c <HAL_DMA_Abort_IT+0x42c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d06d      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a59      	ldr	r2, [pc, #356]	; (8004790 <HAL_DMA_Abort_IT+0x430>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d068      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a58      	ldr	r2, [pc, #352]	; (8004794 <HAL_DMA_Abort_IT+0x434>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d063      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a56      	ldr	r2, [pc, #344]	; (8004798 <HAL_DMA_Abort_IT+0x438>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d05e      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a55      	ldr	r2, [pc, #340]	; (800479c <HAL_DMA_Abort_IT+0x43c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d059      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a53      	ldr	r2, [pc, #332]	; (80047a0 <HAL_DMA_Abort_IT+0x440>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d054      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a52      	ldr	r2, [pc, #328]	; (80047a4 <HAL_DMA_Abort_IT+0x444>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d04f      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a50      	ldr	r2, [pc, #320]	; (80047a8 <HAL_DMA_Abort_IT+0x448>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d04a      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a4f      	ldr	r2, [pc, #316]	; (80047ac <HAL_DMA_Abort_IT+0x44c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d045      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a4d      	ldr	r2, [pc, #308]	; (80047b0 <HAL_DMA_Abort_IT+0x450>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d040      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a4c      	ldr	r2, [pc, #304]	; (80047b4 <HAL_DMA_Abort_IT+0x454>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d03b      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a4a      	ldr	r2, [pc, #296]	; (80047b8 <HAL_DMA_Abort_IT+0x458>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d036      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a49      	ldr	r2, [pc, #292]	; (80047bc <HAL_DMA_Abort_IT+0x45c>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d031      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a47      	ldr	r2, [pc, #284]	; (80047c0 <HAL_DMA_Abort_IT+0x460>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d02c      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a46      	ldr	r2, [pc, #280]	; (80047c4 <HAL_DMA_Abort_IT+0x464>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d027      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a44      	ldr	r2, [pc, #272]	; (80047c8 <HAL_DMA_Abort_IT+0x468>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d022      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a43      	ldr	r2, [pc, #268]	; (80047cc <HAL_DMA_Abort_IT+0x46c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d01d      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a41      	ldr	r2, [pc, #260]	; (80047d0 <HAL_DMA_Abort_IT+0x470>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d018      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a40      	ldr	r2, [pc, #256]	; (80047d4 <HAL_DMA_Abort_IT+0x474>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d013      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a3e      	ldr	r2, [pc, #248]	; (80047d8 <HAL_DMA_Abort_IT+0x478>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00e      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a3d      	ldr	r2, [pc, #244]	; (80047dc <HAL_DMA_Abort_IT+0x47c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d009      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a3b      	ldr	r2, [pc, #236]	; (80047e0 <HAL_DMA_Abort_IT+0x480>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d004      	beq.n	8004700 <HAL_DMA_Abort_IT+0x3a0>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a3a      	ldr	r2, [pc, #232]	; (80047e4 <HAL_DMA_Abort_IT+0x484>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d101      	bne.n	8004704 <HAL_DMA_Abort_IT+0x3a4>
 8004700:	2301      	movs	r3, #1
 8004702:	e000      	b.n	8004706 <HAL_DMA_Abort_IT+0x3a6>
 8004704:	2300      	movs	r3, #0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d028      	beq.n	800475c <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004718:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	2201      	movs	r2, #1
 800472a:	409a      	lsls	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004738:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00c      	beq.n	800475c <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800474c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004750:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800475a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40020010 	.word	0x40020010
 800478c:	40020028 	.word	0x40020028
 8004790:	40020040 	.word	0x40020040
 8004794:	40020058 	.word	0x40020058
 8004798:	40020070 	.word	0x40020070
 800479c:	40020088 	.word	0x40020088
 80047a0:	400200a0 	.word	0x400200a0
 80047a4:	400200b8 	.word	0x400200b8
 80047a8:	40020410 	.word	0x40020410
 80047ac:	40020428 	.word	0x40020428
 80047b0:	40020440 	.word	0x40020440
 80047b4:	40020458 	.word	0x40020458
 80047b8:	40020470 	.word	0x40020470
 80047bc:	40020488 	.word	0x40020488
 80047c0:	400204a0 	.word	0x400204a0
 80047c4:	400204b8 	.word	0x400204b8
 80047c8:	58025408 	.word	0x58025408
 80047cc:	5802541c 	.word	0x5802541c
 80047d0:	58025430 	.word	0x58025430
 80047d4:	58025444 	.word	0x58025444
 80047d8:	58025458 	.word	0x58025458
 80047dc:	5802546c 	.word	0x5802546c
 80047e0:	58025480 	.word	0x58025480
 80047e4:	58025494 	.word	0x58025494

080047e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	; 0x28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80047f4:	4b67      	ldr	r3, [pc, #412]	; (8004994 <HAL_DMA_IRQHandler+0x1ac>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a67      	ldr	r2, [pc, #412]	; (8004998 <HAL_DMA_IRQHandler+0x1b0>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	0a9b      	lsrs	r3, r3, #10
 8004800:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004806:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800480e:	6a3b      	ldr	r3, [r7, #32]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a5f      	ldr	r2, [pc, #380]	; (800499c <HAL_DMA_IRQHandler+0x1b4>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d04a      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a5d      	ldr	r2, [pc, #372]	; (80049a0 <HAL_DMA_IRQHandler+0x1b8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d045      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a5c      	ldr	r2, [pc, #368]	; (80049a4 <HAL_DMA_IRQHandler+0x1bc>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d040      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a5a      	ldr	r2, [pc, #360]	; (80049a8 <HAL_DMA_IRQHandler+0x1c0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d03b      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a59      	ldr	r2, [pc, #356]	; (80049ac <HAL_DMA_IRQHandler+0x1c4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d036      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a57      	ldr	r2, [pc, #348]	; (80049b0 <HAL_DMA_IRQHandler+0x1c8>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d031      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a56      	ldr	r2, [pc, #344]	; (80049b4 <HAL_DMA_IRQHandler+0x1cc>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d02c      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a54      	ldr	r2, [pc, #336]	; (80049b8 <HAL_DMA_IRQHandler+0x1d0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d027      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a53      	ldr	r2, [pc, #332]	; (80049bc <HAL_DMA_IRQHandler+0x1d4>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d022      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a51      	ldr	r2, [pc, #324]	; (80049c0 <HAL_DMA_IRQHandler+0x1d8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d01d      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a50      	ldr	r2, [pc, #320]	; (80049c4 <HAL_DMA_IRQHandler+0x1dc>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d018      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a4e      	ldr	r2, [pc, #312]	; (80049c8 <HAL_DMA_IRQHandler+0x1e0>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a4d      	ldr	r2, [pc, #308]	; (80049cc <HAL_DMA_IRQHandler+0x1e4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00e      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a4b      	ldr	r2, [pc, #300]	; (80049d0 <HAL_DMA_IRQHandler+0x1e8>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d009      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a4a      	ldr	r2, [pc, #296]	; (80049d4 <HAL_DMA_IRQHandler+0x1ec>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_DMA_IRQHandler+0xd2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a48      	ldr	r2, [pc, #288]	; (80049d8 <HAL_DMA_IRQHandler+0x1f0>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d101      	bne.n	80048be <HAL_DMA_IRQHandler+0xd6>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <HAL_DMA_IRQHandler+0xd8>
 80048be:	2300      	movs	r3, #0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 842b 	beq.w	800511c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	2208      	movs	r2, #8
 80048d0:	409a      	lsls	r2, r3
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 80a2 	beq.w	8004a20 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2e      	ldr	r2, [pc, #184]	; (800499c <HAL_DMA_IRQHandler+0x1b4>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d04a      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2d      	ldr	r2, [pc, #180]	; (80049a0 <HAL_DMA_IRQHandler+0x1b8>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d045      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a2b      	ldr	r2, [pc, #172]	; (80049a4 <HAL_DMA_IRQHandler+0x1bc>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d040      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a2a      	ldr	r2, [pc, #168]	; (80049a8 <HAL_DMA_IRQHandler+0x1c0>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d03b      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a28      	ldr	r2, [pc, #160]	; (80049ac <HAL_DMA_IRQHandler+0x1c4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d036      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a27      	ldr	r2, [pc, #156]	; (80049b0 <HAL_DMA_IRQHandler+0x1c8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d031      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a25      	ldr	r2, [pc, #148]	; (80049b4 <HAL_DMA_IRQHandler+0x1cc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d02c      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a24      	ldr	r2, [pc, #144]	; (80049b8 <HAL_DMA_IRQHandler+0x1d0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d027      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a22      	ldr	r2, [pc, #136]	; (80049bc <HAL_DMA_IRQHandler+0x1d4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d022      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a21      	ldr	r2, [pc, #132]	; (80049c0 <HAL_DMA_IRQHandler+0x1d8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d01d      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a1f      	ldr	r2, [pc, #124]	; (80049c4 <HAL_DMA_IRQHandler+0x1dc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d018      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1e      	ldr	r2, [pc, #120]	; (80049c8 <HAL_DMA_IRQHandler+0x1e0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d013      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a1c      	ldr	r2, [pc, #112]	; (80049cc <HAL_DMA_IRQHandler+0x1e4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d00e      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a1b      	ldr	r2, [pc, #108]	; (80049d0 <HAL_DMA_IRQHandler+0x1e8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d009      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a19      	ldr	r2, [pc, #100]	; (80049d4 <HAL_DMA_IRQHandler+0x1ec>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d004      	beq.n	800497c <HAL_DMA_IRQHandler+0x194>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a18      	ldr	r2, [pc, #96]	; (80049d8 <HAL_DMA_IRQHandler+0x1f0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d12f      	bne.n	80049dc <HAL_DMA_IRQHandler+0x1f4>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	2b00      	cmp	r3, #0
 8004988:	bf14      	ite	ne
 800498a:	2301      	movne	r3, #1
 800498c:	2300      	moveq	r3, #0
 800498e:	b2db      	uxtb	r3, r3
 8004990:	e02e      	b.n	80049f0 <HAL_DMA_IRQHandler+0x208>
 8004992:	bf00      	nop
 8004994:	24000010 	.word	0x24000010
 8004998:	1b4e81b5 	.word	0x1b4e81b5
 800499c:	40020010 	.word	0x40020010
 80049a0:	40020028 	.word	0x40020028
 80049a4:	40020040 	.word	0x40020040
 80049a8:	40020058 	.word	0x40020058
 80049ac:	40020070 	.word	0x40020070
 80049b0:	40020088 	.word	0x40020088
 80049b4:	400200a0 	.word	0x400200a0
 80049b8:	400200b8 	.word	0x400200b8
 80049bc:	40020410 	.word	0x40020410
 80049c0:	40020428 	.word	0x40020428
 80049c4:	40020440 	.word	0x40020440
 80049c8:	40020458 	.word	0x40020458
 80049cc:	40020470 	.word	0x40020470
 80049d0:	40020488 	.word	0x40020488
 80049d4:	400204a0 	.word	0x400204a0
 80049d8:	400204b8 	.word	0x400204b8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bf14      	ite	ne
 80049ea:	2301      	movne	r3, #1
 80049ec:	2300      	moveq	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d015      	beq.n	8004a20 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f022 0204 	bic.w	r2, r2, #4
 8004a02:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a08:	f003 031f 	and.w	r3, r3, #31
 8004a0c:	2208      	movs	r2, #8
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a18:	f043 0201 	orr.w	r2, r3, #1
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a24:	f003 031f 	and.w	r3, r3, #31
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d06e      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a69      	ldr	r2, [pc, #420]	; (8004be0 <HAL_DMA_IRQHandler+0x3f8>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d04a      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a67      	ldr	r2, [pc, #412]	; (8004be4 <HAL_DMA_IRQHandler+0x3fc>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d045      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a66      	ldr	r2, [pc, #408]	; (8004be8 <HAL_DMA_IRQHandler+0x400>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d040      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a64      	ldr	r2, [pc, #400]	; (8004bec <HAL_DMA_IRQHandler+0x404>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d03b      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a63      	ldr	r2, [pc, #396]	; (8004bf0 <HAL_DMA_IRQHandler+0x408>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d036      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a61      	ldr	r2, [pc, #388]	; (8004bf4 <HAL_DMA_IRQHandler+0x40c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d031      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a60      	ldr	r2, [pc, #384]	; (8004bf8 <HAL_DMA_IRQHandler+0x410>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d02c      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a5e      	ldr	r2, [pc, #376]	; (8004bfc <HAL_DMA_IRQHandler+0x414>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d027      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a5d      	ldr	r2, [pc, #372]	; (8004c00 <HAL_DMA_IRQHandler+0x418>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d022      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a5b      	ldr	r2, [pc, #364]	; (8004c04 <HAL_DMA_IRQHandler+0x41c>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d01d      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a5a      	ldr	r2, [pc, #360]	; (8004c08 <HAL_DMA_IRQHandler+0x420>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d018      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a58      	ldr	r2, [pc, #352]	; (8004c0c <HAL_DMA_IRQHandler+0x424>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d013      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a57      	ldr	r2, [pc, #348]	; (8004c10 <HAL_DMA_IRQHandler+0x428>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d00e      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a55      	ldr	r2, [pc, #340]	; (8004c14 <HAL_DMA_IRQHandler+0x42c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d009      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a54      	ldr	r2, [pc, #336]	; (8004c18 <HAL_DMA_IRQHandler+0x430>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d004      	beq.n	8004ad6 <HAL_DMA_IRQHandler+0x2ee>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a52      	ldr	r2, [pc, #328]	; (8004c1c <HAL_DMA_IRQHandler+0x434>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d10a      	bne.n	8004aec <HAL_DMA_IRQHandler+0x304>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	bf14      	ite	ne
 8004ae4:	2301      	movne	r3, #1
 8004ae6:	2300      	moveq	r3, #0
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	e003      	b.n	8004af4 <HAL_DMA_IRQHandler+0x30c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2300      	movs	r3, #0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00d      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afc:	f003 031f 	and.w	r3, r3, #31
 8004b00:	2201      	movs	r2, #1
 8004b02:	409a      	lsls	r2, r3
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b0c:	f043 0202 	orr.w	r2, r3, #2
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f000 808f 	beq.w	8004c48 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a2c      	ldr	r2, [pc, #176]	; (8004be0 <HAL_DMA_IRQHandler+0x3f8>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d04a      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a2a      	ldr	r2, [pc, #168]	; (8004be4 <HAL_DMA_IRQHandler+0x3fc>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d045      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a29      	ldr	r2, [pc, #164]	; (8004be8 <HAL_DMA_IRQHandler+0x400>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d040      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a27      	ldr	r2, [pc, #156]	; (8004bec <HAL_DMA_IRQHandler+0x404>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d03b      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a26      	ldr	r2, [pc, #152]	; (8004bf0 <HAL_DMA_IRQHandler+0x408>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d036      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a24      	ldr	r2, [pc, #144]	; (8004bf4 <HAL_DMA_IRQHandler+0x40c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d031      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a23      	ldr	r2, [pc, #140]	; (8004bf8 <HAL_DMA_IRQHandler+0x410>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d02c      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a21      	ldr	r2, [pc, #132]	; (8004bfc <HAL_DMA_IRQHandler+0x414>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d027      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a20      	ldr	r2, [pc, #128]	; (8004c00 <HAL_DMA_IRQHandler+0x418>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d022      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1e      	ldr	r2, [pc, #120]	; (8004c04 <HAL_DMA_IRQHandler+0x41c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d01d      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1d      	ldr	r2, [pc, #116]	; (8004c08 <HAL_DMA_IRQHandler+0x420>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d018      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1b      	ldr	r2, [pc, #108]	; (8004c0c <HAL_DMA_IRQHandler+0x424>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d013      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a1a      	ldr	r2, [pc, #104]	; (8004c10 <HAL_DMA_IRQHandler+0x428>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00e      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a18      	ldr	r2, [pc, #96]	; (8004c14 <HAL_DMA_IRQHandler+0x42c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d009      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a17      	ldr	r2, [pc, #92]	; (8004c18 <HAL_DMA_IRQHandler+0x430>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d004      	beq.n	8004bca <HAL_DMA_IRQHandler+0x3e2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <HAL_DMA_IRQHandler+0x434>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d12a      	bne.n	8004c20 <HAL_DMA_IRQHandler+0x438>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	bf14      	ite	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	2300      	moveq	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	e023      	b.n	8004c28 <HAL_DMA_IRQHandler+0x440>
 8004be0:	40020010 	.word	0x40020010
 8004be4:	40020028 	.word	0x40020028
 8004be8:	40020040 	.word	0x40020040
 8004bec:	40020058 	.word	0x40020058
 8004bf0:	40020070 	.word	0x40020070
 8004bf4:	40020088 	.word	0x40020088
 8004bf8:	400200a0 	.word	0x400200a0
 8004bfc:	400200b8 	.word	0x400200b8
 8004c00:	40020410 	.word	0x40020410
 8004c04:	40020428 	.word	0x40020428
 8004c08:	40020440 	.word	0x40020440
 8004c0c:	40020458 	.word	0x40020458
 8004c10:	40020470 	.word	0x40020470
 8004c14:	40020488 	.word	0x40020488
 8004c18:	400204a0 	.word	0x400204a0
 8004c1c:	400204b8 	.word	0x400204b8
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2300      	movs	r3, #0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00d      	beq.n	8004c48 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	2204      	movs	r2, #4
 8004c36:	409a      	lsls	r2, r3
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c40:	f043 0204 	orr.w	r2, r3, #4
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4c:	f003 031f 	and.w	r3, r3, #31
 8004c50:	2210      	movs	r2, #16
 8004c52:	409a      	lsls	r2, r3
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	4013      	ands	r3, r2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80a6 	beq.w	8004daa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a85      	ldr	r2, [pc, #532]	; (8004e78 <HAL_DMA_IRQHandler+0x690>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d04a      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a83      	ldr	r2, [pc, #524]	; (8004e7c <HAL_DMA_IRQHandler+0x694>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d045      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a82      	ldr	r2, [pc, #520]	; (8004e80 <HAL_DMA_IRQHandler+0x698>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d040      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a80      	ldr	r2, [pc, #512]	; (8004e84 <HAL_DMA_IRQHandler+0x69c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d03b      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a7f      	ldr	r2, [pc, #508]	; (8004e88 <HAL_DMA_IRQHandler+0x6a0>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d036      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a7d      	ldr	r2, [pc, #500]	; (8004e8c <HAL_DMA_IRQHandler+0x6a4>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d031      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a7c      	ldr	r2, [pc, #496]	; (8004e90 <HAL_DMA_IRQHandler+0x6a8>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d02c      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a7a      	ldr	r2, [pc, #488]	; (8004e94 <HAL_DMA_IRQHandler+0x6ac>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d027      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a79      	ldr	r2, [pc, #484]	; (8004e98 <HAL_DMA_IRQHandler+0x6b0>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d022      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a77      	ldr	r2, [pc, #476]	; (8004e9c <HAL_DMA_IRQHandler+0x6b4>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d01d      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a76      	ldr	r2, [pc, #472]	; (8004ea0 <HAL_DMA_IRQHandler+0x6b8>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d018      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a74      	ldr	r2, [pc, #464]	; (8004ea4 <HAL_DMA_IRQHandler+0x6bc>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d013      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a73      	ldr	r2, [pc, #460]	; (8004ea8 <HAL_DMA_IRQHandler+0x6c0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00e      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a71      	ldr	r2, [pc, #452]	; (8004eac <HAL_DMA_IRQHandler+0x6c4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d009      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a70      	ldr	r2, [pc, #448]	; (8004eb0 <HAL_DMA_IRQHandler+0x6c8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d004      	beq.n	8004cfe <HAL_DMA_IRQHandler+0x516>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a6e      	ldr	r2, [pc, #440]	; (8004eb4 <HAL_DMA_IRQHandler+0x6cc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d10a      	bne.n	8004d14 <HAL_DMA_IRQHandler+0x52c>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf14      	ite	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	2300      	moveq	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e009      	b.n	8004d28 <HAL_DMA_IRQHandler+0x540>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0304 	and.w	r3, r3, #4
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	bf14      	ite	ne
 8004d22:	2301      	movne	r3, #1
 8004d24:	2300      	moveq	r3, #0
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d03e      	beq.n	8004daa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	2210      	movs	r2, #16
 8004d36:	409a      	lsls	r2, r3
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d018      	beq.n	8004d7c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d108      	bne.n	8004d6a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d024      	beq.n	8004daa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	4798      	blx	r3
 8004d68:	e01f      	b.n	8004daa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d01b      	beq.n	8004daa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	4798      	blx	r3
 8004d7a:	e016      	b.n	8004daa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d107      	bne.n	8004d9a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0208 	bic.w	r2, r2, #8
 8004d98:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	2220      	movs	r2, #32
 8004db4:	409a      	lsls	r2, r3
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	4013      	ands	r3, r2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 8110 	beq.w	8004fe0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a2c      	ldr	r2, [pc, #176]	; (8004e78 <HAL_DMA_IRQHandler+0x690>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d04a      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a2b      	ldr	r2, [pc, #172]	; (8004e7c <HAL_DMA_IRQHandler+0x694>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d045      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a29      	ldr	r2, [pc, #164]	; (8004e80 <HAL_DMA_IRQHandler+0x698>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d040      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a28      	ldr	r2, [pc, #160]	; (8004e84 <HAL_DMA_IRQHandler+0x69c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d03b      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a26      	ldr	r2, [pc, #152]	; (8004e88 <HAL_DMA_IRQHandler+0x6a0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d036      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a25      	ldr	r2, [pc, #148]	; (8004e8c <HAL_DMA_IRQHandler+0x6a4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d031      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a23      	ldr	r2, [pc, #140]	; (8004e90 <HAL_DMA_IRQHandler+0x6a8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d02c      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a22      	ldr	r2, [pc, #136]	; (8004e94 <HAL_DMA_IRQHandler+0x6ac>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d027      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a20      	ldr	r2, [pc, #128]	; (8004e98 <HAL_DMA_IRQHandler+0x6b0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d022      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1f      	ldr	r2, [pc, #124]	; (8004e9c <HAL_DMA_IRQHandler+0x6b4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d01d      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1d      	ldr	r2, [pc, #116]	; (8004ea0 <HAL_DMA_IRQHandler+0x6b8>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d018      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1c      	ldr	r2, [pc, #112]	; (8004ea4 <HAL_DMA_IRQHandler+0x6bc>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d013      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1a      	ldr	r2, [pc, #104]	; (8004ea8 <HAL_DMA_IRQHandler+0x6c0>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00e      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a19      	ldr	r2, [pc, #100]	; (8004eac <HAL_DMA_IRQHandler+0x6c4>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d009      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a17      	ldr	r2, [pc, #92]	; (8004eb0 <HAL_DMA_IRQHandler+0x6c8>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d004      	beq.n	8004e60 <HAL_DMA_IRQHandler+0x678>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a16      	ldr	r2, [pc, #88]	; (8004eb4 <HAL_DMA_IRQHandler+0x6cc>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d12b      	bne.n	8004eb8 <HAL_DMA_IRQHandler+0x6d0>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	bf14      	ite	ne
 8004e6e:	2301      	movne	r3, #1
 8004e70:	2300      	moveq	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	e02a      	b.n	8004ecc <HAL_DMA_IRQHandler+0x6e4>
 8004e76:	bf00      	nop
 8004e78:	40020010 	.word	0x40020010
 8004e7c:	40020028 	.word	0x40020028
 8004e80:	40020040 	.word	0x40020040
 8004e84:	40020058 	.word	0x40020058
 8004e88:	40020070 	.word	0x40020070
 8004e8c:	40020088 	.word	0x40020088
 8004e90:	400200a0 	.word	0x400200a0
 8004e94:	400200b8 	.word	0x400200b8
 8004e98:	40020410 	.word	0x40020410
 8004e9c:	40020428 	.word	0x40020428
 8004ea0:	40020440 	.word	0x40020440
 8004ea4:	40020458 	.word	0x40020458
 8004ea8:	40020470 	.word	0x40020470
 8004eac:	40020488 	.word	0x40020488
 8004eb0:	400204a0 	.word	0x400204a0
 8004eb4:	400204b8 	.word	0x400204b8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bf14      	ite	ne
 8004ec6:	2301      	movne	r3, #1
 8004ec8:	2300      	moveq	r3, #0
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 8087 	beq.w	8004fe0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ed6:	f003 031f 	and.w	r3, r3, #31
 8004eda:	2220      	movs	r2, #32
 8004edc:	409a      	lsls	r2, r3
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d139      	bne.n	8004f62 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0216 	bic.w	r2, r2, #22
 8004efc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f0c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d103      	bne.n	8004f1e <HAL_DMA_IRQHandler+0x736>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d007      	beq.n	8004f2e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0208 	bic.w	r2, r2, #8
 8004f2c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f32:	f003 031f 	and.w	r3, r3, #31
 8004f36:	223f      	movs	r2, #63	; 0x3f
 8004f38:	409a      	lsls	r2, r3
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 834a 	beq.w	80055ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	4798      	blx	r3
          }
          return;
 8004f60:	e344      	b.n	80055ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d018      	beq.n	8004fa2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d108      	bne.n	8004f90 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d02c      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	4798      	blx	r3
 8004f8e:	e027      	b.n	8004fe0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d023      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	4798      	blx	r3
 8004fa0:	e01e      	b.n	8004fe0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10f      	bne.n	8004fd0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0210 	bic.w	r2, r2, #16
 8004fbe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d003      	beq.n	8004fe0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 8306 	beq.w	80055f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fee:	f003 0301 	and.w	r3, r3, #1
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 8088 	beq.w	8005108 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2204      	movs	r2, #4
 8004ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a7a      	ldr	r2, [pc, #488]	; (80051f0 <HAL_DMA_IRQHandler+0xa08>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d04a      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a79      	ldr	r2, [pc, #484]	; (80051f4 <HAL_DMA_IRQHandler+0xa0c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d045      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a77      	ldr	r2, [pc, #476]	; (80051f8 <HAL_DMA_IRQHandler+0xa10>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d040      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a76      	ldr	r2, [pc, #472]	; (80051fc <HAL_DMA_IRQHandler+0xa14>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d03b      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a74      	ldr	r2, [pc, #464]	; (8005200 <HAL_DMA_IRQHandler+0xa18>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d036      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a73      	ldr	r2, [pc, #460]	; (8005204 <HAL_DMA_IRQHandler+0xa1c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d031      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a71      	ldr	r2, [pc, #452]	; (8005208 <HAL_DMA_IRQHandler+0xa20>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d02c      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a70      	ldr	r2, [pc, #448]	; (800520c <HAL_DMA_IRQHandler+0xa24>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d027      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a6e      	ldr	r2, [pc, #440]	; (8005210 <HAL_DMA_IRQHandler+0xa28>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d022      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a6d      	ldr	r2, [pc, #436]	; (8005214 <HAL_DMA_IRQHandler+0xa2c>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d01d      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a6b      	ldr	r2, [pc, #428]	; (8005218 <HAL_DMA_IRQHandler+0xa30>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d018      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a6a      	ldr	r2, [pc, #424]	; (800521c <HAL_DMA_IRQHandler+0xa34>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a68      	ldr	r2, [pc, #416]	; (8005220 <HAL_DMA_IRQHandler+0xa38>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00e      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a67      	ldr	r2, [pc, #412]	; (8005224 <HAL_DMA_IRQHandler+0xa3c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d009      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a65      	ldr	r2, [pc, #404]	; (8005228 <HAL_DMA_IRQHandler+0xa40>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <HAL_DMA_IRQHandler+0x8b8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a64      	ldr	r2, [pc, #400]	; (800522c <HAL_DMA_IRQHandler+0xa44>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d108      	bne.n	80050b2 <HAL_DMA_IRQHandler+0x8ca>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0201 	bic.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	e007      	b.n	80050c2 <HAL_DMA_IRQHandler+0x8da>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3301      	adds	r3, #1
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d307      	bcc.n	80050de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1f2      	bne.n	80050c2 <HAL_DMA_IRQHandler+0x8da>
 80050dc:	e000      	b.n	80050e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80050de:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d004      	beq.n	80050f8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2203      	movs	r2, #3
 80050f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80050f6:	e003      	b.n	8005100 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 8272 	beq.w	80055f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	4798      	blx	r3
 800511a:	e26c      	b.n	80055f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a43      	ldr	r2, [pc, #268]	; (8005230 <HAL_DMA_IRQHandler+0xa48>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d022      	beq.n	800516c <HAL_DMA_IRQHandler+0x984>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a42      	ldr	r2, [pc, #264]	; (8005234 <HAL_DMA_IRQHandler+0xa4c>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d01d      	beq.n	800516c <HAL_DMA_IRQHandler+0x984>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a40      	ldr	r2, [pc, #256]	; (8005238 <HAL_DMA_IRQHandler+0xa50>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d018      	beq.n	800516c <HAL_DMA_IRQHandler+0x984>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a3f      	ldr	r2, [pc, #252]	; (800523c <HAL_DMA_IRQHandler+0xa54>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d013      	beq.n	800516c <HAL_DMA_IRQHandler+0x984>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a3d      	ldr	r2, [pc, #244]	; (8005240 <HAL_DMA_IRQHandler+0xa58>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d00e      	beq.n	800516c <HAL_DMA_IRQHandler+0x984>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a3c      	ldr	r2, [pc, #240]	; (8005244 <HAL_DMA_IRQHandler+0xa5c>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d009      	beq.n	800516c <HAL_DMA_IRQHandler+0x984>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a3a      	ldr	r2, [pc, #232]	; (8005248 <HAL_DMA_IRQHandler+0xa60>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <HAL_DMA_IRQHandler+0x984>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a39      	ldr	r2, [pc, #228]	; (800524c <HAL_DMA_IRQHandler+0xa64>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d101      	bne.n	8005170 <HAL_DMA_IRQHandler+0x988>
 800516c:	2301      	movs	r3, #1
 800516e:	e000      	b.n	8005172 <HAL_DMA_IRQHandler+0x98a>
 8005170:	2300      	movs	r3, #0
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 823f 	beq.w	80055f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005184:	f003 031f 	and.w	r3, r3, #31
 8005188:	2204      	movs	r2, #4
 800518a:	409a      	lsls	r2, r3
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	4013      	ands	r3, r2
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 80cd 	beq.w	8005330 <HAL_DMA_IRQHandler+0xb48>
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f003 0304 	and.w	r3, r3, #4
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80c7 	beq.w	8005330 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a6:	f003 031f 	and.w	r3, r3, #31
 80051aa:	2204      	movs	r2, #4
 80051ac:	409a      	lsls	r2, r3
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d049      	beq.n	8005250 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8210 	beq.w	80055f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051d8:	e20a      	b.n	80055f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f000 8206 	beq.w	80055f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051ec:	e200      	b.n	80055f0 <HAL_DMA_IRQHandler+0xe08>
 80051ee:	bf00      	nop
 80051f0:	40020010 	.word	0x40020010
 80051f4:	40020028 	.word	0x40020028
 80051f8:	40020040 	.word	0x40020040
 80051fc:	40020058 	.word	0x40020058
 8005200:	40020070 	.word	0x40020070
 8005204:	40020088 	.word	0x40020088
 8005208:	400200a0 	.word	0x400200a0
 800520c:	400200b8 	.word	0x400200b8
 8005210:	40020410 	.word	0x40020410
 8005214:	40020428 	.word	0x40020428
 8005218:	40020440 	.word	0x40020440
 800521c:	40020458 	.word	0x40020458
 8005220:	40020470 	.word	0x40020470
 8005224:	40020488 	.word	0x40020488
 8005228:	400204a0 	.word	0x400204a0
 800522c:	400204b8 	.word	0x400204b8
 8005230:	58025408 	.word	0x58025408
 8005234:	5802541c 	.word	0x5802541c
 8005238:	58025430 	.word	0x58025430
 800523c:	58025444 	.word	0x58025444
 8005240:	58025458 	.word	0x58025458
 8005244:	5802546c 	.word	0x5802546c
 8005248:	58025480 	.word	0x58025480
 800524c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b00      	cmp	r3, #0
 8005258:	d160      	bne.n	800531c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a8c      	ldr	r2, [pc, #560]	; (8005490 <HAL_DMA_IRQHandler+0xca8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d04a      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a8a      	ldr	r2, [pc, #552]	; (8005494 <HAL_DMA_IRQHandler+0xcac>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d045      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a89      	ldr	r2, [pc, #548]	; (8005498 <HAL_DMA_IRQHandler+0xcb0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d040      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a87      	ldr	r2, [pc, #540]	; (800549c <HAL_DMA_IRQHandler+0xcb4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d03b      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a86      	ldr	r2, [pc, #536]	; (80054a0 <HAL_DMA_IRQHandler+0xcb8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d036      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a84      	ldr	r2, [pc, #528]	; (80054a4 <HAL_DMA_IRQHandler+0xcbc>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d031      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a83      	ldr	r2, [pc, #524]	; (80054a8 <HAL_DMA_IRQHandler+0xcc0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d02c      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a81      	ldr	r2, [pc, #516]	; (80054ac <HAL_DMA_IRQHandler+0xcc4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d027      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a80      	ldr	r2, [pc, #512]	; (80054b0 <HAL_DMA_IRQHandler+0xcc8>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d022      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a7e      	ldr	r2, [pc, #504]	; (80054b4 <HAL_DMA_IRQHandler+0xccc>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01d      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a7d      	ldr	r2, [pc, #500]	; (80054b8 <HAL_DMA_IRQHandler+0xcd0>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d018      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a7b      	ldr	r2, [pc, #492]	; (80054bc <HAL_DMA_IRQHandler+0xcd4>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a7a      	ldr	r2, [pc, #488]	; (80054c0 <HAL_DMA_IRQHandler+0xcd8>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00e      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a78      	ldr	r2, [pc, #480]	; (80054c4 <HAL_DMA_IRQHandler+0xcdc>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d009      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a77      	ldr	r2, [pc, #476]	; (80054c8 <HAL_DMA_IRQHandler+0xce0>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d004      	beq.n	80052fa <HAL_DMA_IRQHandler+0xb12>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a75      	ldr	r2, [pc, #468]	; (80054cc <HAL_DMA_IRQHandler+0xce4>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d108      	bne.n	800530c <HAL_DMA_IRQHandler+0xb24>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0208 	bic.w	r2, r2, #8
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e007      	b.n	800531c <HAL_DMA_IRQHandler+0xb34>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0204 	bic.w	r2, r2, #4
 800531a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8165 	beq.w	80055f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800532e:	e15f      	b.n	80055f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	2202      	movs	r2, #2
 800533a:	409a      	lsls	r2, r3
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	4013      	ands	r3, r2
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 80c5 	beq.w	80054d0 <HAL_DMA_IRQHandler+0xce8>
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	f003 0302 	and.w	r3, r3, #2
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 80bf 	beq.w	80054d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	2202      	movs	r2, #2
 800535c:	409a      	lsls	r2, r3
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d018      	beq.n	800539e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d109      	bne.n	800538a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 813a 	beq.w	80055f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005388:	e134      	b.n	80055f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 8130 	beq.w	80055f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800539c:	e12a      	b.n	80055f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	f003 0320 	and.w	r3, r3, #32
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d168      	bne.n	800547a <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a38      	ldr	r2, [pc, #224]	; (8005490 <HAL_DMA_IRQHandler+0xca8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d04a      	beq.n	8005448 <HAL_DMA_IRQHandler+0xc60>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a37      	ldr	r2, [pc, #220]	; (8005494 <HAL_DMA_IRQHandler+0xcac>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d045      	beq.n	8005448 <HAL_DMA_IRQHandler+0xc60>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a35      	ldr	r2, [pc, #212]	; (8005498 <HAL_DMA_IRQHandler+0xcb0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d040      	beq.n	8005448 <HAL_DMA_IRQHandler+0xc60>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a34      	ldr	r2, [pc, #208]	; (800549c <HAL_DMA_IRQHandler+0xcb4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d03b      	beq.n	8005448 <HAL_DMA_IRQHandler+0xc60>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a32      	ldr	r2, [pc, #200]	; (80054a0 <HAL_DMA_IRQHandler+0xcb8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d036      	beq.n	8005448 <HAL_DMA_IRQHandler+0xc60>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a31      	ldr	r2, [pc, #196]	; (80054a4 <HAL_DMA_IRQHandler+0xcbc>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d031      	beq.n	8005448 <HAL_DMA_IRQHandler+0xc60>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a2f      	ldr	r2, [pc, #188]	; (80054a8 <HAL_DMA_IRQHandler+0xcc0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d02c      	beq.n	8005448 <HAL_DMA_IRQHandler+0xc60>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a2e      	ldr	r2, [pc, #184]	; (80054ac <HAL_DMA_IRQHandler+0xcc4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d027      	beq.n	8005448 <HAL_DMA_IRQHandler+0xc60>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a2c      	ldr	r2, [pc, #176]	; (80054b0 <HAL_DMA_IRQHandler+0xcc8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d022      	beq.n	8005448 <HAL_DMA_IRQHandler+0xc60>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a2b      	ldr	r2, [pc, #172]	; (80054b4 <HAL_DMA_IRQHandler+0xccc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d01d      	beq.n	8005448 <HAL_DMA_IRQHandler+0xc60>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a29      	ldr	r2, [pc, #164]	; (80054b8 <HAL_DMA_IRQHandler+0xcd0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d018      	beq.n	8005448 <HAL_DMA_IRQHandler+0xc60>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a28      	ldr	r2, [pc, #160]	; (80054bc <HAL_DMA_IRQHandler+0xcd4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d013      	beq.n	8005448 <HAL_DMA_IRQHandler+0xc60>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a26      	ldr	r2, [pc, #152]	; (80054c0 <HAL_DMA_IRQHandler+0xcd8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00e      	beq.n	8005448 <HAL_DMA_IRQHandler+0xc60>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a25      	ldr	r2, [pc, #148]	; (80054c4 <HAL_DMA_IRQHandler+0xcdc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d009      	beq.n	8005448 <HAL_DMA_IRQHandler+0xc60>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a23      	ldr	r2, [pc, #140]	; (80054c8 <HAL_DMA_IRQHandler+0xce0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d004      	beq.n	8005448 <HAL_DMA_IRQHandler+0xc60>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a22      	ldr	r2, [pc, #136]	; (80054cc <HAL_DMA_IRQHandler+0xce4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d108      	bne.n	800545a <HAL_DMA_IRQHandler+0xc72>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0214 	bic.w	r2, r2, #20
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	e007      	b.n	800546a <HAL_DMA_IRQHandler+0xc82>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 020a 	bic.w	r2, r2, #10
 8005468:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 80b8 	beq.w	80055f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800548c:	e0b2      	b.n	80055f4 <HAL_DMA_IRQHandler+0xe0c>
 800548e:	bf00      	nop
 8005490:	40020010 	.word	0x40020010
 8005494:	40020028 	.word	0x40020028
 8005498:	40020040 	.word	0x40020040
 800549c:	40020058 	.word	0x40020058
 80054a0:	40020070 	.word	0x40020070
 80054a4:	40020088 	.word	0x40020088
 80054a8:	400200a0 	.word	0x400200a0
 80054ac:	400200b8 	.word	0x400200b8
 80054b0:	40020410 	.word	0x40020410
 80054b4:	40020428 	.word	0x40020428
 80054b8:	40020440 	.word	0x40020440
 80054bc:	40020458 	.word	0x40020458
 80054c0:	40020470 	.word	0x40020470
 80054c4:	40020488 	.word	0x40020488
 80054c8:	400204a0 	.word	0x400204a0
 80054cc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d4:	f003 031f 	and.w	r3, r3, #31
 80054d8:	2208      	movs	r2, #8
 80054da:	409a      	lsls	r2, r3
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	4013      	ands	r3, r2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 8088 	beq.w	80055f6 <HAL_DMA_IRQHandler+0xe0e>
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f003 0308 	and.w	r3, r3, #8
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8082 	beq.w	80055f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a41      	ldr	r2, [pc, #260]	; (80055fc <HAL_DMA_IRQHandler+0xe14>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d04a      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a3f      	ldr	r2, [pc, #252]	; (8005600 <HAL_DMA_IRQHandler+0xe18>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d045      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a3e      	ldr	r2, [pc, #248]	; (8005604 <HAL_DMA_IRQHandler+0xe1c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d040      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a3c      	ldr	r2, [pc, #240]	; (8005608 <HAL_DMA_IRQHandler+0xe20>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d03b      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a3b      	ldr	r2, [pc, #236]	; (800560c <HAL_DMA_IRQHandler+0xe24>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d036      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a39      	ldr	r2, [pc, #228]	; (8005610 <HAL_DMA_IRQHandler+0xe28>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d031      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a38      	ldr	r2, [pc, #224]	; (8005614 <HAL_DMA_IRQHandler+0xe2c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d02c      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a36      	ldr	r2, [pc, #216]	; (8005618 <HAL_DMA_IRQHandler+0xe30>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d027      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a35      	ldr	r2, [pc, #212]	; (800561c <HAL_DMA_IRQHandler+0xe34>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d022      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a33      	ldr	r2, [pc, #204]	; (8005620 <HAL_DMA_IRQHandler+0xe38>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d01d      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a32      	ldr	r2, [pc, #200]	; (8005624 <HAL_DMA_IRQHandler+0xe3c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d018      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a30      	ldr	r2, [pc, #192]	; (8005628 <HAL_DMA_IRQHandler+0xe40>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d013      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2f      	ldr	r2, [pc, #188]	; (800562c <HAL_DMA_IRQHandler+0xe44>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00e      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a2d      	ldr	r2, [pc, #180]	; (8005630 <HAL_DMA_IRQHandler+0xe48>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d009      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a2c      	ldr	r2, [pc, #176]	; (8005634 <HAL_DMA_IRQHandler+0xe4c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d004      	beq.n	8005592 <HAL_DMA_IRQHandler+0xdaa>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a2a      	ldr	r2, [pc, #168]	; (8005638 <HAL_DMA_IRQHandler+0xe50>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d108      	bne.n	80055a4 <HAL_DMA_IRQHandler+0xdbc>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 021c 	bic.w	r2, r2, #28
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	e007      	b.n	80055b4 <HAL_DMA_IRQHandler+0xdcc>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 020e 	bic.w	r2, r2, #14
 80055b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	2201      	movs	r2, #1
 80055be:	409a      	lsls	r2, r3
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	4798      	blx	r3
 80055ea:	e004      	b.n	80055f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80055ec:	bf00      	nop
 80055ee:	e002      	b.n	80055f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055f0:	bf00      	nop
 80055f2:	e000      	b.n	80055f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80055f6:	3728      	adds	r7, #40	; 0x28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	40020010 	.word	0x40020010
 8005600:	40020028 	.word	0x40020028
 8005604:	40020040 	.word	0x40020040
 8005608:	40020058 	.word	0x40020058
 800560c:	40020070 	.word	0x40020070
 8005610:	40020088 	.word	0x40020088
 8005614:	400200a0 	.word	0x400200a0
 8005618:	400200b8 	.word	0x400200b8
 800561c:	40020410 	.word	0x40020410
 8005620:	40020428 	.word	0x40020428
 8005624:	40020440 	.word	0x40020440
 8005628:	40020458 	.word	0x40020458
 800562c:	40020470 	.word	0x40020470
 8005630:	40020488 	.word	0x40020488
 8005634:	400204a0 	.word	0x400204a0
 8005638:	400204b8 	.word	0x400204b8

0800563c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a42      	ldr	r2, [pc, #264]	; (8005754 <DMA_CalcBaseAndBitshift+0x118>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d04a      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a41      	ldr	r2, [pc, #260]	; (8005758 <DMA_CalcBaseAndBitshift+0x11c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d045      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a3f      	ldr	r2, [pc, #252]	; (800575c <DMA_CalcBaseAndBitshift+0x120>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d040      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a3e      	ldr	r2, [pc, #248]	; (8005760 <DMA_CalcBaseAndBitshift+0x124>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d03b      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a3c      	ldr	r2, [pc, #240]	; (8005764 <DMA_CalcBaseAndBitshift+0x128>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d036      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a3b      	ldr	r2, [pc, #236]	; (8005768 <DMA_CalcBaseAndBitshift+0x12c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d031      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a39      	ldr	r2, [pc, #228]	; (800576c <DMA_CalcBaseAndBitshift+0x130>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d02c      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a38      	ldr	r2, [pc, #224]	; (8005770 <DMA_CalcBaseAndBitshift+0x134>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d027      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a36      	ldr	r2, [pc, #216]	; (8005774 <DMA_CalcBaseAndBitshift+0x138>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d022      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a35      	ldr	r2, [pc, #212]	; (8005778 <DMA_CalcBaseAndBitshift+0x13c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d01d      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a33      	ldr	r2, [pc, #204]	; (800577c <DMA_CalcBaseAndBitshift+0x140>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d018      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a32      	ldr	r2, [pc, #200]	; (8005780 <DMA_CalcBaseAndBitshift+0x144>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d013      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a30      	ldr	r2, [pc, #192]	; (8005784 <DMA_CalcBaseAndBitshift+0x148>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00e      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a2f      	ldr	r2, [pc, #188]	; (8005788 <DMA_CalcBaseAndBitshift+0x14c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d009      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a2d      	ldr	r2, [pc, #180]	; (800578c <DMA_CalcBaseAndBitshift+0x150>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d004      	beq.n	80056e4 <DMA_CalcBaseAndBitshift+0xa8>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a2c      	ldr	r2, [pc, #176]	; (8005790 <DMA_CalcBaseAndBitshift+0x154>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d101      	bne.n	80056e8 <DMA_CalcBaseAndBitshift+0xac>
 80056e4:	2301      	movs	r3, #1
 80056e6:	e000      	b.n	80056ea <DMA_CalcBaseAndBitshift+0xae>
 80056e8:	2300      	movs	r3, #0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d024      	beq.n	8005738 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	3b10      	subs	r3, #16
 80056f6:	4a27      	ldr	r2, [pc, #156]	; (8005794 <DMA_CalcBaseAndBitshift+0x158>)
 80056f8:	fba2 2303 	umull	r2, r3, r2, r3
 80056fc:	091b      	lsrs	r3, r3, #4
 80056fe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f003 0307 	and.w	r3, r3, #7
 8005706:	4a24      	ldr	r2, [pc, #144]	; (8005798 <DMA_CalcBaseAndBitshift+0x15c>)
 8005708:	5cd3      	ldrb	r3, [r2, r3]
 800570a:	461a      	mov	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2b03      	cmp	r3, #3
 8005714:	d908      	bls.n	8005728 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	4b1f      	ldr	r3, [pc, #124]	; (800579c <DMA_CalcBaseAndBitshift+0x160>)
 800571e:	4013      	ands	r3, r2
 8005720:	1d1a      	adds	r2, r3, #4
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	659a      	str	r2, [r3, #88]	; 0x58
 8005726:	e00d      	b.n	8005744 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	4b1b      	ldr	r3, [pc, #108]	; (800579c <DMA_CalcBaseAndBitshift+0x160>)
 8005730:	4013      	ands	r3, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6593      	str	r3, [r2, #88]	; 0x58
 8005736:	e005      	b.n	8005744 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	40020010 	.word	0x40020010
 8005758:	40020028 	.word	0x40020028
 800575c:	40020040 	.word	0x40020040
 8005760:	40020058 	.word	0x40020058
 8005764:	40020070 	.word	0x40020070
 8005768:	40020088 	.word	0x40020088
 800576c:	400200a0 	.word	0x400200a0
 8005770:	400200b8 	.word	0x400200b8
 8005774:	40020410 	.word	0x40020410
 8005778:	40020428 	.word	0x40020428
 800577c:	40020440 	.word	0x40020440
 8005780:	40020458 	.word	0x40020458
 8005784:	40020470 	.word	0x40020470
 8005788:	40020488 	.word	0x40020488
 800578c:	400204a0 	.word	0x400204a0
 8005790:	400204b8 	.word	0x400204b8
 8005794:	aaaaaaab 	.word	0xaaaaaaab
 8005798:	0800ef38 	.word	0x0800ef38
 800579c:	fffffc00 	.word	0xfffffc00

080057a0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d120      	bne.n	80057f6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d858      	bhi.n	800586e <DMA_CheckFifoParam+0xce>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <DMA_CheckFifoParam+0x24>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057d5 	.word	0x080057d5
 80057c8:	080057e7 	.word	0x080057e7
 80057cc:	080057d5 	.word	0x080057d5
 80057d0:	0800586f 	.word	0x0800586f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d048      	beq.n	8005872 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057e4:	e045      	b.n	8005872 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057ee:	d142      	bne.n	8005876 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80057f4:	e03f      	b.n	8005876 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fe:	d123      	bne.n	8005848 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	2b03      	cmp	r3, #3
 8005806:	d838      	bhi.n	800587a <DMA_CheckFifoParam+0xda>
 8005808:	a201      	add	r2, pc, #4	; (adr r2, 8005810 <DMA_CheckFifoParam+0x70>)
 800580a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800580e:	bf00      	nop
 8005810:	08005821 	.word	0x08005821
 8005814:	08005827 	.word	0x08005827
 8005818:	08005821 	.word	0x08005821
 800581c:	08005839 	.word	0x08005839
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	73fb      	strb	r3, [r7, #15]
        break;
 8005824:	e030      	b.n	8005888 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d025      	beq.n	800587e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005836:	e022      	b.n	800587e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005840:	d11f      	bne.n	8005882 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005846:	e01c      	b.n	8005882 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584c:	2b02      	cmp	r3, #2
 800584e:	d902      	bls.n	8005856 <DMA_CheckFifoParam+0xb6>
 8005850:	2b03      	cmp	r3, #3
 8005852:	d003      	beq.n	800585c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005854:	e018      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	73fb      	strb	r3, [r7, #15]
        break;
 800585a:	e015      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00e      	beq.n	8005886 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
    break;
 800586c:	e00b      	b.n	8005886 <DMA_CheckFifoParam+0xe6>
        break;
 800586e:	bf00      	nop
 8005870:	e00a      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
        break;
 8005872:	bf00      	nop
 8005874:	e008      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
        break;
 8005876:	bf00      	nop
 8005878:	e006      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
        break;
 800587a:	bf00      	nop
 800587c:	e004      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
        break;
 800587e:	bf00      	nop
 8005880:	e002      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
        break;
 8005882:	bf00      	nop
 8005884:	e000      	b.n	8005888 <DMA_CheckFifoParam+0xe8>
    break;
 8005886:	bf00      	nop
    }
  }

  return status;
 8005888:	7bfb      	ldrb	r3, [r7, #15]
}
 800588a:	4618      	mov	r0, r3
 800588c:	3714      	adds	r7, #20
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop

08005898 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a38      	ldr	r2, [pc, #224]	; (800598c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d022      	beq.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a36      	ldr	r2, [pc, #216]	; (8005990 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d01d      	beq.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a35      	ldr	r2, [pc, #212]	; (8005994 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d018      	beq.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a33      	ldr	r2, [pc, #204]	; (8005998 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a32      	ldr	r2, [pc, #200]	; (800599c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d00e      	beq.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a30      	ldr	r2, [pc, #192]	; (80059a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a2f      	ldr	r2, [pc, #188]	; (80059a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a2d      	ldr	r2, [pc, #180]	; (80059a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d101      	bne.n	80058fa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80058fa:	2300      	movs	r3, #0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01a      	beq.n	8005936 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	b2db      	uxtb	r3, r3
 8005906:	3b08      	subs	r3, #8
 8005908:	4a28      	ldr	r2, [pc, #160]	; (80059ac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800590a:	fba2 2303 	umull	r2, r3, r2, r3
 800590e:	091b      	lsrs	r3, r3, #4
 8005910:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4b26      	ldr	r3, [pc, #152]	; (80059b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	461a      	mov	r2, r3
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a24      	ldr	r2, [pc, #144]	; (80059b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005924:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f003 031f 	and.w	r3, r3, #31
 800592c:	2201      	movs	r2, #1
 800592e:	409a      	lsls	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005934:	e024      	b.n	8005980 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	b2db      	uxtb	r3, r3
 800593c:	3b10      	subs	r3, #16
 800593e:	4a1e      	ldr	r2, [pc, #120]	; (80059b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005940:	fba2 2303 	umull	r2, r3, r2, r3
 8005944:	091b      	lsrs	r3, r3, #4
 8005946:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d806      	bhi.n	800595e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d902      	bls.n	800595e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	3308      	adds	r3, #8
 800595c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800595e:	68fa      	ldr	r2, [r7, #12]
 8005960:	4b18      	ldr	r3, [pc, #96]	; (80059c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005962:	4413      	add	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	461a      	mov	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a16      	ldr	r2, [pc, #88]	; (80059c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005970:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f003 031f 	and.w	r3, r3, #31
 8005978:	2201      	movs	r2, #1
 800597a:	409a      	lsls	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005980:	bf00      	nop
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	58025408 	.word	0x58025408
 8005990:	5802541c 	.word	0x5802541c
 8005994:	58025430 	.word	0x58025430
 8005998:	58025444 	.word	0x58025444
 800599c:	58025458 	.word	0x58025458
 80059a0:	5802546c 	.word	0x5802546c
 80059a4:	58025480 	.word	0x58025480
 80059a8:	58025494 	.word	0x58025494
 80059ac:	cccccccd 	.word	0xcccccccd
 80059b0:	16009600 	.word	0x16009600
 80059b4:	58025880 	.word	0x58025880
 80059b8:	aaaaaaab 	.word	0xaaaaaaab
 80059bc:	400204b8 	.word	0x400204b8
 80059c0:	4002040f 	.word	0x4002040f
 80059c4:	10008200 	.word	0x10008200
 80059c8:	40020880 	.word	0x40020880

080059cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d04a      	beq.n	8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d847      	bhi.n	8005a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a25      	ldr	r2, [pc, #148]	; (8005a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d022      	beq.n	8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a24      	ldr	r2, [pc, #144]	; (8005a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d01d      	beq.n	8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a22      	ldr	r2, [pc, #136]	; (8005a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d018      	beq.n	8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a21      	ldr	r2, [pc, #132]	; (8005a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d013      	beq.n	8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1f      	ldr	r2, [pc, #124]	; (8005a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00e      	beq.n	8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1e      	ldr	r2, [pc, #120]	; (8005a98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d009      	beq.n	8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1c      	ldr	r2, [pc, #112]	; (8005a9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d004      	beq.n	8005a38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a1b      	ldr	r2, [pc, #108]	; (8005aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d101      	bne.n	8005a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e000      	b.n	8005a3e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4b17      	ldr	r3, [pc, #92]	; (8005aa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005a46:	4413      	add	r3, r2
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005a54:	671a      	str	r2, [r3, #112]	; 0x70
 8005a56:	e009      	b.n	8005a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	4b14      	ldr	r3, [pc, #80]	; (8005aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	461a      	mov	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a11      	ldr	r2, [pc, #68]	; (8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005a6a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	2201      	movs	r2, #1
 8005a72:	409a      	lsls	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005a78:	bf00      	nop
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	58025408 	.word	0x58025408
 8005a88:	5802541c 	.word	0x5802541c
 8005a8c:	58025430 	.word	0x58025430
 8005a90:	58025444 	.word	0x58025444
 8005a94:	58025458 	.word	0x58025458
 8005a98:	5802546c 	.word	0x5802546c
 8005a9c:	58025480 	.word	0x58025480
 8005aa0:	58025494 	.word	0x58025494
 8005aa4:	1600963f 	.word	0x1600963f
 8005aa8:	58025940 	.word	0x58025940
 8005aac:	1000823f 	.word	0x1000823f
 8005ab0:	40020940 	.word	0x40020940

08005ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b089      	sub	sp, #36	; 0x24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005ac2:	4b89      	ldr	r3, [pc, #548]	; (8005ce8 <HAL_GPIO_Init+0x234>)
 8005ac4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ac6:	e194      	b.n	8005df2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	2101      	movs	r1, #1
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ad4:	4013      	ands	r3, r2
 8005ad6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 8186 	beq.w	8005dec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f003 0303 	and.w	r3, r3, #3
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d005      	beq.n	8005af8 <HAL_GPIO_Init+0x44>
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 0303 	and.w	r3, r3, #3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d130      	bne.n	8005b5a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	2203      	movs	r2, #3
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	68da      	ldr	r2, [r3, #12]
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005b2e:	2201      	movs	r2, #1
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	fa02 f303 	lsl.w	r3, r2, r3
 8005b36:	43db      	mvns	r3, r3
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	091b      	lsrs	r3, r3, #4
 8005b44:	f003 0201 	and.w	r2, r3, #1
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	69ba      	ldr	r2, [r7, #24]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	2b03      	cmp	r3, #3
 8005b64:	d017      	beq.n	8005b96 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005b6c:	69fb      	ldr	r3, [r7, #28]
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	2203      	movs	r2, #3
 8005b72:	fa02 f303 	lsl.w	r3, r2, r3
 8005b76:	43db      	mvns	r3, r3
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8a:	69ba      	ldr	r2, [r7, #24]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d123      	bne.n	8005bea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	08da      	lsrs	r2, r3, #3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	3208      	adds	r2, #8
 8005baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	220f      	movs	r2, #15
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	43db      	mvns	r3, r3
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	69fb      	ldr	r3, [r7, #28]
 8005bcc:	f003 0307 	and.w	r3, r3, #7
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	69ba      	ldr	r2, [r7, #24]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	08da      	lsrs	r2, r3, #3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	3208      	adds	r2, #8
 8005be4:	69b9      	ldr	r1, [r7, #24]
 8005be6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	43db      	mvns	r3, r3
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f003 0203 	and.w	r2, r3, #3
 8005c0a:	69fb      	ldr	r3, [r7, #28]
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c12:	69ba      	ldr	r2, [r7, #24]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69ba      	ldr	r2, [r7, #24]
 8005c1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 80e0 	beq.w	8005dec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c2c:	4b2f      	ldr	r3, [pc, #188]	; (8005cec <HAL_GPIO_Init+0x238>)
 8005c2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c32:	4a2e      	ldr	r2, [pc, #184]	; (8005cec <HAL_GPIO_Init+0x238>)
 8005c34:	f043 0302 	orr.w	r3, r3, #2
 8005c38:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005c3c:	4b2b      	ldr	r3, [pc, #172]	; (8005cec <HAL_GPIO_Init+0x238>)
 8005c3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005c42:	f003 0302 	and.w	r3, r3, #2
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c4a:	4a29      	ldr	r2, [pc, #164]	; (8005cf0 <HAL_GPIO_Init+0x23c>)
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	089b      	lsrs	r3, r3, #2
 8005c50:	3302      	adds	r3, #2
 8005c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	220f      	movs	r2, #15
 8005c62:	fa02 f303 	lsl.w	r3, r2, r3
 8005c66:	43db      	mvns	r3, r3
 8005c68:	69ba      	ldr	r2, [r7, #24]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a20      	ldr	r2, [pc, #128]	; (8005cf4 <HAL_GPIO_Init+0x240>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d052      	beq.n	8005d1c <HAL_GPIO_Init+0x268>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a1f      	ldr	r2, [pc, #124]	; (8005cf8 <HAL_GPIO_Init+0x244>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d031      	beq.n	8005ce2 <HAL_GPIO_Init+0x22e>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a1e      	ldr	r2, [pc, #120]	; (8005cfc <HAL_GPIO_Init+0x248>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d02b      	beq.n	8005cde <HAL_GPIO_Init+0x22a>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a1d      	ldr	r2, [pc, #116]	; (8005d00 <HAL_GPIO_Init+0x24c>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d025      	beq.n	8005cda <HAL_GPIO_Init+0x226>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a1c      	ldr	r2, [pc, #112]	; (8005d04 <HAL_GPIO_Init+0x250>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01f      	beq.n	8005cd6 <HAL_GPIO_Init+0x222>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a1b      	ldr	r2, [pc, #108]	; (8005d08 <HAL_GPIO_Init+0x254>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d019      	beq.n	8005cd2 <HAL_GPIO_Init+0x21e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a1a      	ldr	r2, [pc, #104]	; (8005d0c <HAL_GPIO_Init+0x258>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d013      	beq.n	8005cce <HAL_GPIO_Init+0x21a>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a19      	ldr	r2, [pc, #100]	; (8005d10 <HAL_GPIO_Init+0x25c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00d      	beq.n	8005cca <HAL_GPIO_Init+0x216>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4a18      	ldr	r2, [pc, #96]	; (8005d14 <HAL_GPIO_Init+0x260>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d007      	beq.n	8005cc6 <HAL_GPIO_Init+0x212>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <HAL_GPIO_Init+0x264>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d101      	bne.n	8005cc2 <HAL_GPIO_Init+0x20e>
 8005cbe:	2309      	movs	r3, #9
 8005cc0:	e02d      	b.n	8005d1e <HAL_GPIO_Init+0x26a>
 8005cc2:	230a      	movs	r3, #10
 8005cc4:	e02b      	b.n	8005d1e <HAL_GPIO_Init+0x26a>
 8005cc6:	2308      	movs	r3, #8
 8005cc8:	e029      	b.n	8005d1e <HAL_GPIO_Init+0x26a>
 8005cca:	2307      	movs	r3, #7
 8005ccc:	e027      	b.n	8005d1e <HAL_GPIO_Init+0x26a>
 8005cce:	2306      	movs	r3, #6
 8005cd0:	e025      	b.n	8005d1e <HAL_GPIO_Init+0x26a>
 8005cd2:	2305      	movs	r3, #5
 8005cd4:	e023      	b.n	8005d1e <HAL_GPIO_Init+0x26a>
 8005cd6:	2304      	movs	r3, #4
 8005cd8:	e021      	b.n	8005d1e <HAL_GPIO_Init+0x26a>
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e01f      	b.n	8005d1e <HAL_GPIO_Init+0x26a>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	e01d      	b.n	8005d1e <HAL_GPIO_Init+0x26a>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e01b      	b.n	8005d1e <HAL_GPIO_Init+0x26a>
 8005ce6:	bf00      	nop
 8005ce8:	58000080 	.word	0x58000080
 8005cec:	58024400 	.word	0x58024400
 8005cf0:	58000400 	.word	0x58000400
 8005cf4:	58020000 	.word	0x58020000
 8005cf8:	58020400 	.word	0x58020400
 8005cfc:	58020800 	.word	0x58020800
 8005d00:	58020c00 	.word	0x58020c00
 8005d04:	58021000 	.word	0x58021000
 8005d08:	58021400 	.word	0x58021400
 8005d0c:	58021800 	.word	0x58021800
 8005d10:	58021c00 	.word	0x58021c00
 8005d14:	58022000 	.word	0x58022000
 8005d18:	58022400 	.word	0x58022400
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	69fa      	ldr	r2, [r7, #28]
 8005d20:	f002 0203 	and.w	r2, r2, #3
 8005d24:	0092      	lsls	r2, r2, #2
 8005d26:	4093      	lsls	r3, r2
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d2e:	4938      	ldr	r1, [pc, #224]	; (8005e10 <HAL_GPIO_Init+0x35c>)
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	089b      	lsrs	r3, r3, #2
 8005d34:	3302      	adds	r3, #2
 8005d36:	69ba      	ldr	r2, [r7, #24]
 8005d38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	43db      	mvns	r3, r3
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005d5a:	69ba      	ldr	r2, [r7, #24]
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005d6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	43db      	mvns	r3, r3
 8005d76:	69ba      	ldr	r2, [r7, #24]
 8005d78:	4013      	ands	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d003      	beq.n	8005d90 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005d90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	43db      	mvns	r3, r3
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	4013      	ands	r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	4013      	ands	r3, r2
 8005dd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d003      	beq.n	8005de6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	3301      	adds	r3, #1
 8005df0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f47f ae63 	bne.w	8005ac8 <HAL_GPIO_Init+0x14>
  }
}
 8005e02:	bf00      	nop
 8005e04:	bf00      	nop
 8005e06:	3724      	adds	r7, #36	; 0x24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	58000400 	.word	0x58000400

08005e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	807b      	strh	r3, [r7, #2]
 8005e20:	4613      	mov	r3, r2
 8005e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e24:	787b      	ldrb	r3, [r7, #1]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e2a:	887a      	ldrh	r2, [r7, #2]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005e30:	e003      	b.n	8005e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005e32:	887b      	ldrh	r3, [r7, #2]
 8005e34:	041a      	lsls	r2, r3, #16
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	619a      	str	r2, [r3, #24]
}
 8005e3a:	bf00      	nop
 8005e3c:	370c      	adds	r7, #12
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr

08005e46 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e58:	88fb      	ldrh	r3, [r7, #6]
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d008      	beq.n	8005e72 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e64:	88fb      	ldrh	r3, [r7, #6]
 8005e66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e6a:	88fb      	ldrh	r3, [r7, #6]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fc f967 	bl	8002140 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005e72:	bf00      	nop
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
	...

08005e7c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005e84:	4b19      	ldr	r3, [pc, #100]	; (8005eec <HAL_PWREx_ConfigSupply+0x70>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b04      	cmp	r3, #4
 8005e8e:	d00a      	beq.n	8005ea6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005e90:	4b16      	ldr	r3, [pc, #88]	; (8005eec <HAL_PWREx_ConfigSupply+0x70>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	f003 0307 	and.w	r3, r3, #7
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d001      	beq.n	8005ea2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e01f      	b.n	8005ee2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e01d      	b.n	8005ee2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005ea6:	4b11      	ldr	r3, [pc, #68]	; (8005eec <HAL_PWREx_ConfigSupply+0x70>)
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	f023 0207 	bic.w	r2, r3, #7
 8005eae:	490f      	ldr	r1, [pc, #60]	; (8005eec <HAL_PWREx_ConfigSupply+0x70>)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005eb6:	f7fd f9bb 	bl	8003230 <HAL_GetTick>
 8005eba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ebc:	e009      	b.n	8005ed2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005ebe:	f7fd f9b7 	bl	8003230 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ecc:	d901      	bls.n	8005ed2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e007      	b.n	8005ee2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005ed2:	4b06      	ldr	r3, [pc, #24]	; (8005eec <HAL_PWREx_ConfigSupply+0x70>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ede:	d1ee      	bne.n	8005ebe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	58024800 	.word	0x58024800

08005ef0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08c      	sub	sp, #48	; 0x30
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d102      	bne.n	8005f04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	f000 bc1c 	b.w	800673c <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0301 	and.w	r3, r3, #1
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 8087 	beq.w	8006020 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f12:	4b9e      	ldr	r3, [pc, #632]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005f1c:	4b9b      	ldr	r3, [pc, #620]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f20:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f24:	2b10      	cmp	r3, #16
 8005f26:	d007      	beq.n	8005f38 <HAL_RCC_OscConfig+0x48>
 8005f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2a:	2b18      	cmp	r3, #24
 8005f2c:	d110      	bne.n	8005f50 <HAL_RCC_OscConfig+0x60>
 8005f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f30:	f003 0303 	and.w	r3, r3, #3
 8005f34:	2b02      	cmp	r3, #2
 8005f36:	d10b      	bne.n	8005f50 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f38:	4b94      	ldr	r3, [pc, #592]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d06c      	beq.n	800601e <HAL_RCC_OscConfig+0x12e>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d168      	bne.n	800601e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e3f5      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f58:	d106      	bne.n	8005f68 <HAL_RCC_OscConfig+0x78>
 8005f5a:	4b8c      	ldr	r3, [pc, #560]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a8b      	ldr	r2, [pc, #556]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	e02e      	b.n	8005fc6 <HAL_RCC_OscConfig+0xd6>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10c      	bne.n	8005f8a <HAL_RCC_OscConfig+0x9a>
 8005f70:	4b86      	ldr	r3, [pc, #536]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a85      	ldr	r2, [pc, #532]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	4b83      	ldr	r3, [pc, #524]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a82      	ldr	r2, [pc, #520]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	e01d      	b.n	8005fc6 <HAL_RCC_OscConfig+0xd6>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f92:	d10c      	bne.n	8005fae <HAL_RCC_OscConfig+0xbe>
 8005f94:	4b7d      	ldr	r3, [pc, #500]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a7c      	ldr	r2, [pc, #496]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005f9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	4b7a      	ldr	r3, [pc, #488]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a79      	ldr	r2, [pc, #484]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	e00b      	b.n	8005fc6 <HAL_RCC_OscConfig+0xd6>
 8005fae:	4b77      	ldr	r3, [pc, #476]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a76      	ldr	r2, [pc, #472]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005fb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fb8:	6013      	str	r3, [r2, #0]
 8005fba:	4b74      	ldr	r3, [pc, #464]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a73      	ldr	r2, [pc, #460]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005fc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fc4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d013      	beq.n	8005ff6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fce:	f7fd f92f 	bl	8003230 <HAL_GetTick>
 8005fd2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fd4:	e008      	b.n	8005fe8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fd6:	f7fd f92b 	bl	8003230 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	2b64      	cmp	r3, #100	; 0x64
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e3a9      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005fe8:	4b68      	ldr	r3, [pc, #416]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d0f0      	beq.n	8005fd6 <HAL_RCC_OscConfig+0xe6>
 8005ff4:	e014      	b.n	8006020 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ff6:	f7fd f91b 	bl	8003230 <HAL_GetTick>
 8005ffa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ffc:	e008      	b.n	8006010 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ffe:	f7fd f917 	bl	8003230 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b64      	cmp	r3, #100	; 0x64
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e395      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006010:	4b5e      	ldr	r3, [pc, #376]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1f0      	bne.n	8005ffe <HAL_RCC_OscConfig+0x10e>
 800601c:	e000      	b.n	8006020 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800601e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0302 	and.w	r3, r3, #2
 8006028:	2b00      	cmp	r3, #0
 800602a:	f000 80ca 	beq.w	80061c2 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800602e:	4b57      	ldr	r3, [pc, #348]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006036:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006038:	4b54      	ldr	r3, [pc, #336]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 800603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <HAL_RCC_OscConfig+0x164>
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	2b18      	cmp	r3, #24
 8006048:	d156      	bne.n	80060f8 <HAL_RCC_OscConfig+0x208>
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d151      	bne.n	80060f8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006054:	4b4d      	ldr	r3, [pc, #308]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d005      	beq.n	800606c <HAL_RCC_OscConfig+0x17c>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e367      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800606c:	4b47      	ldr	r3, [pc, #284]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f023 0219 	bic.w	r2, r3, #25
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	4944      	ldr	r1, [pc, #272]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 800607a:	4313      	orrs	r3, r2
 800607c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800607e:	f7fd f8d7 	bl	8003230 <HAL_GetTick>
 8006082:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006084:	e008      	b.n	8006098 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006086:	f7fd f8d3 	bl	8003230 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d901      	bls.n	8006098 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006094:	2303      	movs	r3, #3
 8006096:	e351      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006098:	4b3c      	ldr	r3, [pc, #240]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0304 	and.w	r3, r3, #4
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d0f0      	beq.n	8006086 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a4:	f7fd f8d0 	bl	8003248 <HAL_GetREVID>
 80060a8:	4603      	mov	r3, r0
 80060aa:	f241 0203 	movw	r2, #4099	; 0x1003
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d817      	bhi.n	80060e2 <HAL_RCC_OscConfig+0x1f2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b40      	cmp	r3, #64	; 0x40
 80060b8:	d108      	bne.n	80060cc <HAL_RCC_OscConfig+0x1dc>
 80060ba:	4b34      	ldr	r3, [pc, #208]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80060c2:	4a32      	ldr	r2, [pc, #200]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 80060c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060ca:	e07a      	b.n	80061c2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060cc:	4b2f      	ldr	r3, [pc, #188]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	031b      	lsls	r3, r3, #12
 80060da:	492c      	ldr	r1, [pc, #176]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060e0:	e06f      	b.n	80061c2 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e2:	4b2a      	ldr	r3, [pc, #168]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	061b      	lsls	r3, r3, #24
 80060f0:	4926      	ldr	r1, [pc, #152]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 80060f2:	4313      	orrs	r3, r2
 80060f4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060f6:	e064      	b.n	80061c2 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d047      	beq.n	8006190 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006100:	4b22      	ldr	r3, [pc, #136]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f023 0219 	bic.w	r2, r3, #25
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	491f      	ldr	r1, [pc, #124]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 800610e:	4313      	orrs	r3, r2
 8006110:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006112:	f7fd f88d 	bl	8003230 <HAL_GetTick>
 8006116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800611a:	f7fd f889 	bl	8003230 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e307      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800612c:	4b17      	ldr	r3, [pc, #92]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0304 	and.w	r3, r3, #4
 8006134:	2b00      	cmp	r3, #0
 8006136:	d0f0      	beq.n	800611a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006138:	f7fd f886 	bl	8003248 <HAL_GetREVID>
 800613c:	4603      	mov	r3, r0
 800613e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006142:	4293      	cmp	r3, r2
 8006144:	d817      	bhi.n	8006176 <HAL_RCC_OscConfig+0x286>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	691b      	ldr	r3, [r3, #16]
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	d108      	bne.n	8006160 <HAL_RCC_OscConfig+0x270>
 800614e:	4b0f      	ldr	r3, [pc, #60]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006156:	4a0d      	ldr	r2, [pc, #52]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8006158:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800615c:	6053      	str	r3, [r2, #4]
 800615e:	e030      	b.n	80061c2 <HAL_RCC_OscConfig+0x2d2>
 8006160:	4b0a      	ldr	r3, [pc, #40]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	031b      	lsls	r3, r3, #12
 800616e:	4907      	ldr	r1, [pc, #28]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8006170:	4313      	orrs	r3, r2
 8006172:	604b      	str	r3, [r1, #4]
 8006174:	e025      	b.n	80061c2 <HAL_RCC_OscConfig+0x2d2>
 8006176:	4b05      	ldr	r3, [pc, #20]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	061b      	lsls	r3, r3, #24
 8006184:	4901      	ldr	r1, [pc, #4]	; (800618c <HAL_RCC_OscConfig+0x29c>)
 8006186:	4313      	orrs	r3, r2
 8006188:	604b      	str	r3, [r1, #4]
 800618a:	e01a      	b.n	80061c2 <HAL_RCC_OscConfig+0x2d2>
 800618c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006190:	4b9e      	ldr	r3, [pc, #632]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a9d      	ldr	r2, [pc, #628]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 8006196:	f023 0301 	bic.w	r3, r3, #1
 800619a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800619c:	f7fd f848 	bl	8003230 <HAL_GetTick>
 80061a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061a2:	e008      	b.n	80061b6 <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061a4:	f7fd f844 	bl	8003230 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d901      	bls.n	80061b6 <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 80061b2:	2303      	movs	r3, #3
 80061b4:	e2c2      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80061b6:	4b95      	ldr	r3, [pc, #596]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f0      	bne.n	80061a4 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0310 	and.w	r3, r3, #16
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f000 80a9 	beq.w	8006322 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061d0:	4b8e      	ldr	r3, [pc, #568]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061d8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061da:	4b8c      	ldr	r3, [pc, #560]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b08      	cmp	r3, #8
 80061e4:	d007      	beq.n	80061f6 <HAL_RCC_OscConfig+0x306>
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b18      	cmp	r3, #24
 80061ea:	d13a      	bne.n	8006262 <HAL_RCC_OscConfig+0x372>
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f003 0303 	and.w	r3, r3, #3
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d135      	bne.n	8006262 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061f6:	4b85      	ldr	r3, [pc, #532]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d005      	beq.n	800620e <HAL_RCC_OscConfig+0x31e>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	2b80      	cmp	r3, #128	; 0x80
 8006208:	d001      	beq.n	800620e <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e296      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800620e:	f7fd f81b 	bl	8003248 <HAL_GetREVID>
 8006212:	4603      	mov	r3, r0
 8006214:	f241 0203 	movw	r2, #4099	; 0x1003
 8006218:	4293      	cmp	r3, r2
 800621a:	d817      	bhi.n	800624c <HAL_RCC_OscConfig+0x35c>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	2b20      	cmp	r3, #32
 8006222:	d108      	bne.n	8006236 <HAL_RCC_OscConfig+0x346>
 8006224:	4b79      	ldr	r3, [pc, #484]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800622c:	4a77      	ldr	r2, [pc, #476]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 800622e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006232:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006234:	e075      	b.n	8006322 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006236:	4b75      	ldr	r3, [pc, #468]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	069b      	lsls	r3, r3, #26
 8006244:	4971      	ldr	r1, [pc, #452]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 8006246:	4313      	orrs	r3, r2
 8006248:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800624a:	e06a      	b.n	8006322 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800624c:	4b6f      	ldr	r3, [pc, #444]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	061b      	lsls	r3, r3, #24
 800625a:	496c      	ldr	r1, [pc, #432]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 800625c:	4313      	orrs	r3, r2
 800625e:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006260:	e05f      	b.n	8006322 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d042      	beq.n	80062f0 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800626a:	4b68      	ldr	r3, [pc, #416]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a67      	ldr	r2, [pc, #412]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 8006270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006274:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006276:	f7fc ffdb 	bl	8003230 <HAL_GetTick>
 800627a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800627c:	e008      	b.n	8006290 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800627e:	f7fc ffd7 	bl	8003230 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e255      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006290:	4b5e      	ldr	r3, [pc, #376]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0f0      	beq.n	800627e <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800629c:	f7fc ffd4 	bl	8003248 <HAL_GetREVID>
 80062a0:	4603      	mov	r3, r0
 80062a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d817      	bhi.n	80062da <HAL_RCC_OscConfig+0x3ea>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	d108      	bne.n	80062c4 <HAL_RCC_OscConfig+0x3d4>
 80062b2:	4b56      	ldr	r3, [pc, #344]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80062ba:	4a54      	ldr	r2, [pc, #336]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80062bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062c0:	6053      	str	r3, [r2, #4]
 80062c2:	e02e      	b.n	8006322 <HAL_RCC_OscConfig+0x432>
 80062c4:	4b51      	ldr	r3, [pc, #324]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	069b      	lsls	r3, r3, #26
 80062d2:	494e      	ldr	r1, [pc, #312]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80062d4:	4313      	orrs	r3, r2
 80062d6:	604b      	str	r3, [r1, #4]
 80062d8:	e023      	b.n	8006322 <HAL_RCC_OscConfig+0x432>
 80062da:	4b4c      	ldr	r3, [pc, #304]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	061b      	lsls	r3, r3, #24
 80062e8:	4948      	ldr	r1, [pc, #288]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60cb      	str	r3, [r1, #12]
 80062ee:	e018      	b.n	8006322 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80062f0:	4b46      	ldr	r3, [pc, #280]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a45      	ldr	r2, [pc, #276]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80062f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062fc:	f7fc ff98 	bl	8003230 <HAL_GetTick>
 8006300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006302:	e008      	b.n	8006316 <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006304:	f7fc ff94 	bl	8003230 <HAL_GetTick>
 8006308:	4602      	mov	r2, r0
 800630a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630c:	1ad3      	subs	r3, r2, r3
 800630e:	2b02      	cmp	r3, #2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e212      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006316:	4b3d      	ldr	r3, [pc, #244]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1f0      	bne.n	8006304 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f003 0308 	and.w	r3, r3, #8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d036      	beq.n	800639c <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d019      	beq.n	800636a <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006336:	4b35      	ldr	r3, [pc, #212]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 8006338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800633a:	4a34      	ldr	r2, [pc, #208]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 800633c:	f043 0301 	orr.w	r3, r3, #1
 8006340:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006342:	f7fc ff75 	bl	8003230 <HAL_GetTick>
 8006346:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006348:	e008      	b.n	800635c <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800634a:	f7fc ff71 	bl	8003230 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	2b02      	cmp	r3, #2
 8006356:	d901      	bls.n	800635c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8006358:	2303      	movs	r3, #3
 800635a:	e1ef      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800635c:	4b2b      	ldr	r3, [pc, #172]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 800635e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d0f0      	beq.n	800634a <HAL_RCC_OscConfig+0x45a>
 8006368:	e018      	b.n	800639c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800636a:	4b28      	ldr	r3, [pc, #160]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 800636c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800636e:	4a27      	ldr	r2, [pc, #156]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 8006370:	f023 0301 	bic.w	r3, r3, #1
 8006374:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006376:	f7fc ff5b 	bl	8003230 <HAL_GetTick>
 800637a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800637c:	e008      	b.n	8006390 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800637e:	f7fc ff57 	bl	8003230 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e1d5      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006390:	4b1e      	ldr	r3, [pc, #120]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 8006392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1f0      	bne.n	800637e <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d039      	beq.n	800641c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d019      	beq.n	80063e4 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063b0:	4b16      	ldr	r3, [pc, #88]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a15      	ldr	r2, [pc, #84]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80063b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063bc:	f7fc ff38 	bl	8003230 <HAL_GetTick>
 80063c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063c2:	e008      	b.n	80063d6 <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80063c4:	f7fc ff34 	bl	8003230 <HAL_GetTick>
 80063c8:	4602      	mov	r2, r0
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d901      	bls.n	80063d6 <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e1b2      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063d6:	4b0d      	ldr	r3, [pc, #52]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0f0      	beq.n	80063c4 <HAL_RCC_OscConfig+0x4d4>
 80063e2:	e01b      	b.n	800641c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80063e4:	4b09      	ldr	r3, [pc, #36]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a08      	ldr	r2, [pc, #32]	; (800640c <HAL_RCC_OscConfig+0x51c>)
 80063ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063ee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063f0:	f7fc ff1e 	bl	8003230 <HAL_GetTick>
 80063f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063f6:	e00b      	b.n	8006410 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80063f8:	f7fc ff1a 	bl	8003230 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d904      	bls.n	8006410 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e198      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
 800640a:	bf00      	nop
 800640c:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006410:	4ba3      	ldr	r3, [pc, #652]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1ed      	bne.n	80063f8 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 0304 	and.w	r3, r3, #4
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8081 	beq.w	800652c <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800642a:	4b9e      	ldr	r3, [pc, #632]	; (80066a4 <HAL_RCC_OscConfig+0x7b4>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a9d      	ldr	r2, [pc, #628]	; (80066a4 <HAL_RCC_OscConfig+0x7b4>)
 8006430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006434:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006436:	f7fc fefb 	bl	8003230 <HAL_GetTick>
 800643a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800643e:	f7fc fef7 	bl	8003230 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b64      	cmp	r3, #100	; 0x64
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e175      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006450:	4b94      	ldr	r3, [pc, #592]	; (80066a4 <HAL_RCC_OscConfig+0x7b4>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006458:	2b00      	cmp	r3, #0
 800645a:	d0f0      	beq.n	800643e <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d106      	bne.n	8006472 <HAL_RCC_OscConfig+0x582>
 8006464:	4b8e      	ldr	r3, [pc, #568]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006468:	4a8d      	ldr	r2, [pc, #564]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 800646a:	f043 0301 	orr.w	r3, r3, #1
 800646e:	6713      	str	r3, [r2, #112]	; 0x70
 8006470:	e02d      	b.n	80064ce <HAL_RCC_OscConfig+0x5de>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10c      	bne.n	8006494 <HAL_RCC_OscConfig+0x5a4>
 800647a:	4b89      	ldr	r3, [pc, #548]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 800647c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647e:	4a88      	ldr	r2, [pc, #544]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006480:	f023 0301 	bic.w	r3, r3, #1
 8006484:	6713      	str	r3, [r2, #112]	; 0x70
 8006486:	4b86      	ldr	r3, [pc, #536]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648a:	4a85      	ldr	r2, [pc, #532]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 800648c:	f023 0304 	bic.w	r3, r3, #4
 8006490:	6713      	str	r3, [r2, #112]	; 0x70
 8006492:	e01c      	b.n	80064ce <HAL_RCC_OscConfig+0x5de>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	2b05      	cmp	r3, #5
 800649a:	d10c      	bne.n	80064b6 <HAL_RCC_OscConfig+0x5c6>
 800649c:	4b80      	ldr	r3, [pc, #512]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 800649e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064a0:	4a7f      	ldr	r2, [pc, #508]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 80064a2:	f043 0304 	orr.w	r3, r3, #4
 80064a6:	6713      	str	r3, [r2, #112]	; 0x70
 80064a8:	4b7d      	ldr	r3, [pc, #500]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 80064aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ac:	4a7c      	ldr	r2, [pc, #496]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 80064ae:	f043 0301 	orr.w	r3, r3, #1
 80064b2:	6713      	str	r3, [r2, #112]	; 0x70
 80064b4:	e00b      	b.n	80064ce <HAL_RCC_OscConfig+0x5de>
 80064b6:	4b7a      	ldr	r3, [pc, #488]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 80064b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ba:	4a79      	ldr	r2, [pc, #484]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 80064bc:	f023 0301 	bic.w	r3, r3, #1
 80064c0:	6713      	str	r3, [r2, #112]	; 0x70
 80064c2:	4b77      	ldr	r3, [pc, #476]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 80064c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064c6:	4a76      	ldr	r2, [pc, #472]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 80064c8:	f023 0304 	bic.w	r3, r3, #4
 80064cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d015      	beq.n	8006502 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064d6:	f7fc feab 	bl	8003230 <HAL_GetTick>
 80064da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064dc:	e00a      	b.n	80064f4 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064de:	f7fc fea7 	bl	8003230 <HAL_GetTick>
 80064e2:	4602      	mov	r2, r0
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	1ad3      	subs	r3, r2, r3
 80064e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d901      	bls.n	80064f4 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e123      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80064f4:	4b6a      	ldr	r3, [pc, #424]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 80064f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f8:	f003 0302 	and.w	r3, r3, #2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d0ee      	beq.n	80064de <HAL_RCC_OscConfig+0x5ee>
 8006500:	e014      	b.n	800652c <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006502:	f7fc fe95 	bl	8003230 <HAL_GetTick>
 8006506:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006508:	e00a      	b.n	8006520 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800650a:	f7fc fe91 	bl	8003230 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	f241 3288 	movw	r2, #5000	; 0x1388
 8006518:	4293      	cmp	r3, r2
 800651a:	d901      	bls.n	8006520 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e10d      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006520:	4b5f      	ldr	r3, [pc, #380]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1ee      	bne.n	800650a <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	f000 8102 	beq.w	800673a <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006536:	4b5a      	ldr	r3, [pc, #360]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800653e:	2b18      	cmp	r3, #24
 8006540:	f000 80bd 	beq.w	80066be <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006548:	2b02      	cmp	r3, #2
 800654a:	f040 8095 	bne.w	8006678 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800654e:	4b54      	ldr	r3, [pc, #336]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a53      	ldr	r2, [pc, #332]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006554:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800655a:	f7fc fe69 	bl	8003230 <HAL_GetTick>
 800655e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006560:	e008      	b.n	8006574 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006562:	f7fc fe65 	bl	8003230 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e0e3      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006574:	4b4a      	ldr	r3, [pc, #296]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1f0      	bne.n	8006562 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006580:	4b47      	ldr	r3, [pc, #284]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006582:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006584:	4b48      	ldr	r3, [pc, #288]	; (80066a8 <HAL_RCC_OscConfig+0x7b8>)
 8006586:	4013      	ands	r3, r2
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006590:	0112      	lsls	r2, r2, #4
 8006592:	430a      	orrs	r2, r1
 8006594:	4942      	ldr	r1, [pc, #264]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006596:	4313      	orrs	r3, r2
 8006598:	628b      	str	r3, [r1, #40]	; 0x28
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	3b01      	subs	r3, #1
 80065a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a8:	3b01      	subs	r3, #1
 80065aa:	025b      	lsls	r3, r3, #9
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	431a      	orrs	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b4:	3b01      	subs	r3, #1
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80065bc:	431a      	orrs	r2, r3
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c2:	3b01      	subs	r3, #1
 80065c4:	061b      	lsls	r3, r3, #24
 80065c6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80065ca:	4935      	ldr	r1, [pc, #212]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80065d0:	4b33      	ldr	r3, [pc, #204]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 80065d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d4:	4a32      	ldr	r2, [pc, #200]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80065dc:	4b30      	ldr	r3, [pc, #192]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 80065de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065e0:	4b32      	ldr	r3, [pc, #200]	; (80066ac <HAL_RCC_OscConfig+0x7bc>)
 80065e2:	4013      	ands	r3, r2
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80065e8:	00d2      	lsls	r2, r2, #3
 80065ea:	492d      	ldr	r1, [pc, #180]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80065f0:	4b2b      	ldr	r3, [pc, #172]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	f023 020c 	bic.w	r2, r3, #12
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fc:	4928      	ldr	r1, [pc, #160]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006602:	4b27      	ldr	r3, [pc, #156]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006606:	f023 0202 	bic.w	r2, r3, #2
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660e:	4924      	ldr	r1, [pc, #144]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006610:	4313      	orrs	r3, r2
 8006612:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006614:	4b22      	ldr	r3, [pc, #136]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	4a21      	ldr	r2, [pc, #132]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 800661a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800661e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006620:	4b1f      	ldr	r3, [pc, #124]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006624:	4a1e      	ldr	r2, [pc, #120]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800662a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800662c:	4b1c      	ldr	r3, [pc, #112]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	4a1b      	ldr	r2, [pc, #108]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006632:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006636:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006638:	4b19      	ldr	r3, [pc, #100]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 800663a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663c:	4a18      	ldr	r2, [pc, #96]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 800663e:	f043 0301 	orr.w	r3, r3, #1
 8006642:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006644:	4b16      	ldr	r3, [pc, #88]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a15      	ldr	r2, [pc, #84]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 800664a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800664e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006650:	f7fc fdee 	bl	8003230 <HAL_GetTick>
 8006654:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006656:	e008      	b.n	800666a <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006658:	f7fc fdea 	bl	8003230 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	2b02      	cmp	r3, #2
 8006664:	d901      	bls.n	800666a <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e068      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800666a:	4b0d      	ldr	r3, [pc, #52]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d0f0      	beq.n	8006658 <HAL_RCC_OscConfig+0x768>
 8006676:	e060      	b.n	800673a <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006678:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a08      	ldr	r2, [pc, #32]	; (80066a0 <HAL_RCC_OscConfig+0x7b0>)
 800667e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006684:	f7fc fdd4 	bl	8003230 <HAL_GetTick>
 8006688:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800668a:	e011      	b.n	80066b0 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800668c:	f7fc fdd0 	bl	8003230 <HAL_GetTick>
 8006690:	4602      	mov	r2, r0
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	2b02      	cmp	r3, #2
 8006698:	d90a      	bls.n	80066b0 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800669a:	2303      	movs	r3, #3
 800669c:	e04e      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
 800669e:	bf00      	nop
 80066a0:	58024400 	.word	0x58024400
 80066a4:	58024800 	.word	0x58024800
 80066a8:	fffffc0c 	.word	0xfffffc0c
 80066ac:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80066b0:	4b24      	ldr	r3, [pc, #144]	; (8006744 <HAL_RCC_OscConfig+0x854>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e7      	bne.n	800668c <HAL_RCC_OscConfig+0x79c>
 80066bc:	e03d      	b.n	800673a <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80066be:	4b21      	ldr	r3, [pc, #132]	; (8006744 <HAL_RCC_OscConfig+0x854>)
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80066c4:	4b1f      	ldr	r3, [pc, #124]	; (8006744 <HAL_RCC_OscConfig+0x854>)
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d031      	beq.n	8006736 <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f003 0203 	and.w	r2, r3, #3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066dc:	429a      	cmp	r2, r3
 80066de:	d12a      	bne.n	8006736 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	091b      	lsrs	r3, r3, #4
 80066e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d122      	bne.n	8006736 <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d11a      	bne.n	8006736 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	0a5b      	lsrs	r3, r3, #9
 8006704:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800670e:	429a      	cmp	r2, r3
 8006710:	d111      	bne.n	8006736 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	0c1b      	lsrs	r3, r3, #16
 8006716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006720:	429a      	cmp	r2, r3
 8006722:	d108      	bne.n	8006736 <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	0e1b      	lsrs	r3, r3, #24
 8006728:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006730:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006732:	429a      	cmp	r2, r3
 8006734:	d001      	beq.n	800673a <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e000      	b.n	800673c <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3730      	adds	r7, #48	; 0x30
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	58024400 	.word	0x58024400

08006748 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d101      	bne.n	800675c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	e19c      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800675c:	4b8a      	ldr	r3, [pc, #552]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 030f 	and.w	r3, r3, #15
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	429a      	cmp	r2, r3
 8006768:	d910      	bls.n	800678c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800676a:	4b87      	ldr	r3, [pc, #540]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f023 020f 	bic.w	r2, r3, #15
 8006772:	4985      	ldr	r1, [pc, #532]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	4313      	orrs	r3, r2
 8006778:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800677a:	4b83      	ldr	r3, [pc, #524]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d001      	beq.n	800678c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006788:	2301      	movs	r3, #1
 800678a:	e184      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	2b00      	cmp	r3, #0
 8006796:	d010      	beq.n	80067ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691a      	ldr	r2, [r3, #16]
 800679c:	4b7b      	ldr	r3, [pc, #492]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d908      	bls.n	80067ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067a8:	4b78      	ldr	r3, [pc, #480]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	4975      	ldr	r1, [pc, #468]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f003 0308 	and.w	r3, r3, #8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d010      	beq.n	80067e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	695a      	ldr	r2, [r3, #20]
 80067ca:	4b70      	ldr	r3, [pc, #448]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d908      	bls.n	80067e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067d6:	4b6d      	ldr	r3, [pc, #436]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067d8:	69db      	ldr	r3, [r3, #28]
 80067da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	496a      	ldr	r1, [pc, #424]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d010      	beq.n	8006816 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	699a      	ldr	r2, [r3, #24]
 80067f8:	4b64      	ldr	r3, [pc, #400]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006800:	429a      	cmp	r2, r3
 8006802:	d908      	bls.n	8006816 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006804:	4b61      	ldr	r3, [pc, #388]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006806:	69db      	ldr	r3, [r3, #28]
 8006808:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	495e      	ldr	r1, [pc, #376]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006812:	4313      	orrs	r3, r2
 8006814:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	2b00      	cmp	r3, #0
 8006820:	d010      	beq.n	8006844 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69da      	ldr	r2, [r3, #28]
 8006826:	4b59      	ldr	r3, [pc, #356]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800682e:	429a      	cmp	r2, r3
 8006830:	d908      	bls.n	8006844 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006832:	4b56      	ldr	r3, [pc, #344]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	4953      	ldr	r1, [pc, #332]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006840:	4313      	orrs	r3, r2
 8006842:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	2b00      	cmp	r3, #0
 800684e:	d010      	beq.n	8006872 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	68da      	ldr	r2, [r3, #12]
 8006854:	4b4d      	ldr	r3, [pc, #308]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f003 030f 	and.w	r3, r3, #15
 800685c:	429a      	cmp	r2, r3
 800685e:	d908      	bls.n	8006872 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006860:	4b4a      	ldr	r3, [pc, #296]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	f023 020f 	bic.w	r2, r3, #15
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	4947      	ldr	r1, [pc, #284]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800686e:	4313      	orrs	r3, r2
 8006870:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	2b00      	cmp	r3, #0
 800687c:	d055      	beq.n	800692a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800687e:	4b43      	ldr	r3, [pc, #268]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	4940      	ldr	r1, [pc, #256]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800688c:	4313      	orrs	r3, r2
 800688e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2b02      	cmp	r3, #2
 8006896:	d107      	bne.n	80068a8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006898:	4b3c      	ldr	r3, [pc, #240]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d121      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e0f6      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	2b03      	cmp	r3, #3
 80068ae:	d107      	bne.n	80068c0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068b0:	4b36      	ldr	r3, [pc, #216]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d115      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e0ea      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d107      	bne.n	80068d8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068c8:	4b30      	ldr	r3, [pc, #192]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d109      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e0de      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068d8:	4b2c      	ldr	r3, [pc, #176]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80068e4:	2301      	movs	r3, #1
 80068e6:	e0d6      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068e8:	4b28      	ldr	r3, [pc, #160]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f023 0207 	bic.w	r2, r3, #7
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	4925      	ldr	r1, [pc, #148]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068fa:	f7fc fc99 	bl	8003230 <HAL_GetTick>
 80068fe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006900:	e00a      	b.n	8006918 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006902:	f7fc fc95 	bl	8003230 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006910:	4293      	cmp	r3, r2
 8006912:	d901      	bls.n	8006918 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e0be      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006918:	4b1c      	ldr	r3, [pc, #112]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	429a      	cmp	r2, r3
 8006928:	d1eb      	bne.n	8006902 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0302 	and.w	r3, r3, #2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d010      	beq.n	8006958 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	4b14      	ldr	r3, [pc, #80]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	f003 030f 	and.w	r3, r3, #15
 8006942:	429a      	cmp	r2, r3
 8006944:	d208      	bcs.n	8006958 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006946:	4b11      	ldr	r3, [pc, #68]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	f023 020f 	bic.w	r2, r3, #15
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	490e      	ldr	r1, [pc, #56]	; (800698c <HAL_RCC_ClockConfig+0x244>)
 8006954:	4313      	orrs	r3, r2
 8006956:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006958:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 030f 	and.w	r3, r3, #15
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d214      	bcs.n	8006990 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006966:	4b08      	ldr	r3, [pc, #32]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f023 020f 	bic.w	r2, r3, #15
 800696e:	4906      	ldr	r1, [pc, #24]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	4313      	orrs	r3, r2
 8006974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006976:	4b04      	ldr	r3, [pc, #16]	; (8006988 <HAL_RCC_ClockConfig+0x240>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	683a      	ldr	r2, [r7, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d005      	beq.n	8006990 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006984:	2301      	movs	r3, #1
 8006986:	e086      	b.n	8006a96 <HAL_RCC_ClockConfig+0x34e>
 8006988:	52002000 	.word	0x52002000
 800698c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0304 	and.w	r3, r3, #4
 8006998:	2b00      	cmp	r3, #0
 800699a:	d010      	beq.n	80069be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	4b3f      	ldr	r3, [pc, #252]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d208      	bcs.n	80069be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069ac:	4b3c      	ldr	r3, [pc, #240]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	4939      	ldr	r1, [pc, #228]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0308 	and.w	r3, r3, #8
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d010      	beq.n	80069ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	695a      	ldr	r2, [r3, #20]
 80069ce:	4b34      	ldr	r3, [pc, #208]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d208      	bcs.n	80069ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069da:	4b31      	ldr	r3, [pc, #196]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	492e      	ldr	r1, [pc, #184]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d010      	beq.n	8006a1a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	699a      	ldr	r2, [r3, #24]
 80069fc:	4b28      	ldr	r3, [pc, #160]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d208      	bcs.n	8006a1a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a08:	4b25      	ldr	r3, [pc, #148]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a0a:	69db      	ldr	r3, [r3, #28]
 8006a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	4922      	ldr	r1, [pc, #136]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a16:	4313      	orrs	r3, r2
 8006a18:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0320 	and.w	r3, r3, #32
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d010      	beq.n	8006a48 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	69da      	ldr	r2, [r3, #28]
 8006a2a:	4b1d      	ldr	r3, [pc, #116]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d208      	bcs.n	8006a48 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006a36:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	4917      	ldr	r1, [pc, #92]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a48:	f000 f834 	bl	8006ab4 <HAL_RCC_GetSysClockFreq>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	4b14      	ldr	r3, [pc, #80]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	0a1b      	lsrs	r3, r3, #8
 8006a54:	f003 030f 	and.w	r3, r3, #15
 8006a58:	4912      	ldr	r1, [pc, #72]	; (8006aa4 <HAL_RCC_ClockConfig+0x35c>)
 8006a5a:	5ccb      	ldrb	r3, [r1, r3]
 8006a5c:	f003 031f 	and.w	r3, r3, #31
 8006a60:	fa22 f303 	lsr.w	r3, r2, r3
 8006a64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a66:	4b0e      	ldr	r3, [pc, #56]	; (8006aa0 <HAL_RCC_ClockConfig+0x358>)
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	f003 030f 	and.w	r3, r3, #15
 8006a6e:	4a0d      	ldr	r2, [pc, #52]	; (8006aa4 <HAL_RCC_ClockConfig+0x35c>)
 8006a70:	5cd3      	ldrb	r3, [r2, r3]
 8006a72:	f003 031f 	and.w	r3, r3, #31
 8006a76:	693a      	ldr	r2, [r7, #16]
 8006a78:	fa22 f303 	lsr.w	r3, r2, r3
 8006a7c:	4a0a      	ldr	r2, [pc, #40]	; (8006aa8 <HAL_RCC_ClockConfig+0x360>)
 8006a7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a80:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <HAL_RCC_ClockConfig+0x364>)
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006a86:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <HAL_RCC_ClockConfig+0x368>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fc fb86 	bl	800319c <HAL_InitTick>
 8006a90:	4603      	mov	r3, r0
 8006a92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	58024400 	.word	0x58024400
 8006aa4:	0800ef28 	.word	0x0800ef28
 8006aa8:	24000014 	.word	0x24000014
 8006aac:	24000010 	.word	0x24000010
 8006ab0:	24000018 	.word	0x24000018

08006ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b089      	sub	sp, #36	; 0x24
 8006ab8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006aba:	4bb3      	ldr	r3, [pc, #716]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ac2:	2b18      	cmp	r3, #24
 8006ac4:	f200 8155 	bhi.w	8006d72 <HAL_RCC_GetSysClockFreq+0x2be>
 8006ac8:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006b35 	.word	0x08006b35
 8006ad4:	08006d73 	.word	0x08006d73
 8006ad8:	08006d73 	.word	0x08006d73
 8006adc:	08006d73 	.word	0x08006d73
 8006ae0:	08006d73 	.word	0x08006d73
 8006ae4:	08006d73 	.word	0x08006d73
 8006ae8:	08006d73 	.word	0x08006d73
 8006aec:	08006d73 	.word	0x08006d73
 8006af0:	08006b5b 	.word	0x08006b5b
 8006af4:	08006d73 	.word	0x08006d73
 8006af8:	08006d73 	.word	0x08006d73
 8006afc:	08006d73 	.word	0x08006d73
 8006b00:	08006d73 	.word	0x08006d73
 8006b04:	08006d73 	.word	0x08006d73
 8006b08:	08006d73 	.word	0x08006d73
 8006b0c:	08006d73 	.word	0x08006d73
 8006b10:	08006b61 	.word	0x08006b61
 8006b14:	08006d73 	.word	0x08006d73
 8006b18:	08006d73 	.word	0x08006d73
 8006b1c:	08006d73 	.word	0x08006d73
 8006b20:	08006d73 	.word	0x08006d73
 8006b24:	08006d73 	.word	0x08006d73
 8006b28:	08006d73 	.word	0x08006d73
 8006b2c:	08006d73 	.word	0x08006d73
 8006b30:	08006b67 	.word	0x08006b67
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b34:	4b94      	ldr	r3, [pc, #592]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0320 	and.w	r3, r3, #32
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d009      	beq.n	8006b54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006b40:	4b91      	ldr	r3, [pc, #580]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	08db      	lsrs	r3, r3, #3
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	4a90      	ldr	r2, [pc, #576]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006b50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006b52:	e111      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b54:	4b8d      	ldr	r3, [pc, #564]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b56:	61bb      	str	r3, [r7, #24]
    break;
 8006b58:	e10e      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006b5a:	4b8d      	ldr	r3, [pc, #564]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b5c:	61bb      	str	r3, [r7, #24]
    break;
 8006b5e:	e10b      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006b60:	4b8c      	ldr	r3, [pc, #560]	; (8006d94 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006b62:	61bb      	str	r3, [r7, #24]
    break;
 8006b64:	e108      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b66:	4b88      	ldr	r3, [pc, #544]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6a:	f003 0303 	and.w	r3, r3, #3
 8006b6e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006b70:	4b85      	ldr	r3, [pc, #532]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	091b      	lsrs	r3, r3, #4
 8006b76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b7a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b7c:	4b82      	ldr	r3, [pc, #520]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	f003 0301 	and.w	r3, r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006b86:	4b80      	ldr	r3, [pc, #512]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8a:	08db      	lsrs	r3, r3, #3
 8006b8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	fb02 f303 	mul.w	r3, r2, r3
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 80e1 	beq.w	8006d6c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	f000 8083 	beq.w	8006cb8 <HAL_RCC_GetSysClockFreq+0x204>
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	f200 80a1 	bhi.w	8006cfc <HAL_RCC_GetSysClockFreq+0x248>
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <HAL_RCC_GetSysClockFreq+0x114>
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d056      	beq.n	8006c74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006bc6:	e099      	b.n	8006cfc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bc8:	4b6f      	ldr	r3, [pc, #444]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d02d      	beq.n	8006c30 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006bd4:	4b6c      	ldr	r3, [pc, #432]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	08db      	lsrs	r3, r3, #3
 8006bda:	f003 0303 	and.w	r3, r3, #3
 8006bde:	4a6b      	ldr	r2, [pc, #428]	; (8006d8c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006be0:	fa22 f303 	lsr.w	r3, r2, r3
 8006be4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	ee07 3a90 	vmov	s15, r3
 8006bec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfe:	4b62      	ldr	r3, [pc, #392]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c06:	ee07 3a90 	vmov	s15, r3
 8006c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006c2e:	e087      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	ee07 3a90 	vmov	s15, r3
 8006c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006d9c <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c42:	4b51      	ldr	r3, [pc, #324]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c52:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c72:	e065      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006da0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c86:	4b40      	ldr	r3, [pc, #256]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c96:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cb6:	e043      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006da4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cca:	4b2f      	ldr	r3, [pc, #188]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cda:	ed97 6a02 	vldr	s12, [r7, #8]
 8006cde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cfa:	e021      	b.n	8006d40 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006da0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0e:	4b1e      	ldr	r3, [pc, #120]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d22:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006d98 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d3e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006d40:	4b11      	ldr	r3, [pc, #68]	; (8006d88 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d44:	0a5b      	lsrs	r3, r3, #9
 8006d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	ee07 3a90 	vmov	s15, r3
 8006d54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d58:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d64:	ee17 3a90 	vmov	r3, s15
 8006d68:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006d6a:	e005      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	61bb      	str	r3, [r7, #24]
    break;
 8006d70:	e002      	b.n	8006d78 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006d72:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d74:	61bb      	str	r3, [r7, #24]
    break;
 8006d76:	bf00      	nop
  }

  return sysclockfreq;
 8006d78:	69bb      	ldr	r3, [r7, #24]
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3724      	adds	r7, #36	; 0x24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	58024400 	.word	0x58024400
 8006d8c:	03d09000 	.word	0x03d09000
 8006d90:	003d0900 	.word	0x003d0900
 8006d94:	02dc6c00 	.word	0x02dc6c00
 8006d98:	46000000 	.word	0x46000000
 8006d9c:	4c742400 	.word	0x4c742400
 8006da0:	4a742400 	.word	0x4a742400
 8006da4:	4c371b00 	.word	0x4c371b00

08006da8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006dae:	f7ff fe81 	bl	8006ab4 <HAL_RCC_GetSysClockFreq>
 8006db2:	4602      	mov	r2, r0
 8006db4:	4b10      	ldr	r3, [pc, #64]	; (8006df8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006db6:	699b      	ldr	r3, [r3, #24]
 8006db8:	0a1b      	lsrs	r3, r3, #8
 8006dba:	f003 030f 	and.w	r3, r3, #15
 8006dbe:	490f      	ldr	r1, [pc, #60]	; (8006dfc <HAL_RCC_GetHCLKFreq+0x54>)
 8006dc0:	5ccb      	ldrb	r3, [r1, r3]
 8006dc2:	f003 031f 	and.w	r3, r3, #31
 8006dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dcc:	4b0a      	ldr	r3, [pc, #40]	; (8006df8 <HAL_RCC_GetHCLKFreq+0x50>)
 8006dce:	699b      	ldr	r3, [r3, #24]
 8006dd0:	f003 030f 	and.w	r3, r3, #15
 8006dd4:	4a09      	ldr	r2, [pc, #36]	; (8006dfc <HAL_RCC_GetHCLKFreq+0x54>)
 8006dd6:	5cd3      	ldrb	r3, [r2, r3]
 8006dd8:	f003 031f 	and.w	r3, r3, #31
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	fa22 f303 	lsr.w	r3, r2, r3
 8006de2:	4a07      	ldr	r2, [pc, #28]	; (8006e00 <HAL_RCC_GetHCLKFreq+0x58>)
 8006de4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006de6:	4a07      	ldr	r2, [pc, #28]	; (8006e04 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006dec:	4b04      	ldr	r3, [pc, #16]	; (8006e00 <HAL_RCC_GetHCLKFreq+0x58>)
 8006dee:	681b      	ldr	r3, [r3, #0]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	58024400 	.word	0x58024400
 8006dfc:	0800ef28 	.word	0x0800ef28
 8006e00:	24000014 	.word	0x24000014
 8006e04:	24000010 	.word	0x24000010

08006e08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e0c:	f7ff ffcc 	bl	8006da8 <HAL_RCC_GetHCLKFreq>
 8006e10:	4602      	mov	r2, r0
 8006e12:	4b06      	ldr	r3, [pc, #24]	; (8006e2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	091b      	lsrs	r3, r3, #4
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	4904      	ldr	r1, [pc, #16]	; (8006e30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e1e:	5ccb      	ldrb	r3, [r1, r3]
 8006e20:	f003 031f 	and.w	r3, r3, #31
 8006e24:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	58024400 	.word	0x58024400
 8006e30:	0800ef28 	.word	0x0800ef28

08006e34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006e38:	f7ff ffb6 	bl	8006da8 <HAL_RCC_GetHCLKFreq>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	4b06      	ldr	r3, [pc, #24]	; (8006e58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e40:	69db      	ldr	r3, [r3, #28]
 8006e42:	0a1b      	lsrs	r3, r3, #8
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	4904      	ldr	r1, [pc, #16]	; (8006e5c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e4a:	5ccb      	ldrb	r3, [r1, r3]
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	58024400 	.word	0x58024400
 8006e5c:	0800ef28 	.word	0x0800ef28

08006e60 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e68:	2300      	movs	r3, #0
 8006e6a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d03f      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e84:	d02a      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006e86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006e8a:	d824      	bhi.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006e8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e90:	d018      	beq.n	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006e92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e96:	d81e      	bhi.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006e9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ea0:	d007      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006ea2:	e018      	b.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ea4:	4bab      	ldr	r3, [pc, #684]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	4aaa      	ldr	r2, [pc, #680]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006eaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006eae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006eb0:	e015      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	3304      	adds	r3, #4
 8006eb6:	2102      	movs	r1, #2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f001 f9cf 	bl	800825c <RCCEx_PLL2_Config>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ec2:	e00c      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3324      	adds	r3, #36	; 0x24
 8006ec8:	2102      	movs	r1, #2
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f001 fa78 	bl	80083c0 <RCCEx_PLL3_Config>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ed4:	e003      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	75fb      	strb	r3, [r7, #23]
      break;
 8006eda:	e000      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d109      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006ee4:	4b9b      	ldr	r3, [pc, #620]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ef0:	4998      	ldr	r1, [pc, #608]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	650b      	str	r3, [r1, #80]	; 0x50
 8006ef6:	e001      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d03d      	beq.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d826      	bhi.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006f10:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f16:	bf00      	nop
 8006f18:	08006f2d 	.word	0x08006f2d
 8006f1c:	08006f3b 	.word	0x08006f3b
 8006f20:	08006f4d 	.word	0x08006f4d
 8006f24:	08006f65 	.word	0x08006f65
 8006f28:	08006f65 	.word	0x08006f65
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f2c:	4b89      	ldr	r3, [pc, #548]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f30:	4a88      	ldr	r2, [pc, #544]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f38:	e015      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	2100      	movs	r1, #0
 8006f40:	4618      	mov	r0, r3
 8006f42:	f001 f98b 	bl	800825c <RCCEx_PLL2_Config>
 8006f46:	4603      	mov	r3, r0
 8006f48:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f4a:	e00c      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3324      	adds	r3, #36	; 0x24
 8006f50:	2100      	movs	r1, #0
 8006f52:	4618      	mov	r0, r3
 8006f54:	f001 fa34 	bl	80083c0 <RCCEx_PLL3_Config>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f5c:	e003      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	75fb      	strb	r3, [r7, #23]
      break;
 8006f62:	e000      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d109      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006f6c:	4b79      	ldr	r3, [pc, #484]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f70:	f023 0207 	bic.w	r2, r3, #7
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f78:	4976      	ldr	r1, [pc, #472]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	650b      	str	r3, [r1, #80]	; 0x50
 8006f7e:	e001      	b.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f80:	7dfb      	ldrb	r3, [r7, #23]
 8006f82:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d042      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f98:	d02b      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f9e:	d825      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006fa0:	2bc0      	cmp	r3, #192	; 0xc0
 8006fa2:	d028      	beq.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006fa4:	2bc0      	cmp	r3, #192	; 0xc0
 8006fa6:	d821      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006fa8:	2b80      	cmp	r3, #128	; 0x80
 8006faa:	d016      	beq.n	8006fda <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006fac:	2b80      	cmp	r3, #128	; 0x80
 8006fae:	d81d      	bhi.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d002      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006fb4:	2b40      	cmp	r3, #64	; 0x40
 8006fb6:	d007      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006fb8:	e018      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fba:	4b66      	ldr	r3, [pc, #408]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbe:	4a65      	ldr	r2, [pc, #404]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006fc6:	e017      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	2100      	movs	r1, #0
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f001 f944 	bl	800825c <RCCEx_PLL2_Config>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006fd8:	e00e      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3324      	adds	r3, #36	; 0x24
 8006fde:	2100      	movs	r1, #0
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f001 f9ed 	bl	80083c0 <RCCEx_PLL3_Config>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006fea:	e005      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff0:	e002      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006ff2:	bf00      	nop
 8006ff4:	e000      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006ff6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ff8:	7dfb      	ldrb	r3, [r7, #23]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d109      	bne.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ffe:	4b55      	ldr	r3, [pc, #340]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007002:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700a:	4952      	ldr	r1, [pc, #328]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800700c:	4313      	orrs	r3, r2
 800700e:	650b      	str	r3, [r1, #80]	; 0x50
 8007010:	e001      	b.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007012:	7dfb      	ldrb	r3, [r7, #23]
 8007014:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800701e:	2b00      	cmp	r3, #0
 8007020:	d049      	beq.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007028:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800702c:	d030      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800702e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007032:	d82a      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007034:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007038:	d02c      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800703a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800703e:	d824      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007040:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007044:	d018      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800704a:	d81e      	bhi.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800704c:	2b00      	cmp	r3, #0
 800704e:	d003      	beq.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007054:	d007      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007056:	e018      	b.n	800708a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007058:	4b3e      	ldr	r3, [pc, #248]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705c:	4a3d      	ldr	r2, [pc, #244]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800705e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007062:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007064:	e017      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3304      	adds	r3, #4
 800706a:	2100      	movs	r1, #0
 800706c:	4618      	mov	r0, r3
 800706e:	f001 f8f5 	bl	800825c <RCCEx_PLL2_Config>
 8007072:	4603      	mov	r3, r0
 8007074:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007076:	e00e      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3324      	adds	r3, #36	; 0x24
 800707c:	2100      	movs	r1, #0
 800707e:	4618      	mov	r0, r3
 8007080:	f001 f99e 	bl	80083c0 <RCCEx_PLL3_Config>
 8007084:	4603      	mov	r3, r0
 8007086:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007088:	e005      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	75fb      	strb	r3, [r7, #23]
      break;
 800708e:	e002      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007090:	bf00      	nop
 8007092:	e000      	b.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007094:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007096:	7dfb      	ldrb	r3, [r7, #23]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10a      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800709c:	4b2d      	ldr	r3, [pc, #180]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800709e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070a0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070aa:	492a      	ldr	r1, [pc, #168]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	658b      	str	r3, [r1, #88]	; 0x58
 80070b0:	e001      	b.n	80070b6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070b2:	7dfb      	ldrb	r3, [r7, #23]
 80070b4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d04c      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80070c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070cc:	d030      	beq.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80070ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070d2:	d82a      	bhi.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80070d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070d8:	d02c      	beq.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80070da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070de:	d824      	bhi.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80070e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070e4:	d018      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80070e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070ea:	d81e      	bhi.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d003      	beq.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80070f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070f4:	d007      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80070f6:	e018      	b.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070f8:	4b16      	ldr	r3, [pc, #88]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070fc:	4a15      	ldr	r2, [pc, #84]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80070fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007102:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007104:	e017      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	3304      	adds	r3, #4
 800710a:	2100      	movs	r1, #0
 800710c:	4618      	mov	r0, r3
 800710e:	f001 f8a5 	bl	800825c <RCCEx_PLL2_Config>
 8007112:	4603      	mov	r3, r0
 8007114:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007116:	e00e      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3324      	adds	r3, #36	; 0x24
 800711c:	2100      	movs	r1, #0
 800711e:	4618      	mov	r0, r3
 8007120:	f001 f94e 	bl	80083c0 <RCCEx_PLL3_Config>
 8007124:	4603      	mov	r3, r0
 8007126:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007128:	e005      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	75fb      	strb	r3, [r7, #23]
      break;
 800712e:	e002      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007130:	bf00      	nop
 8007132:	e000      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8007134:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007136:	7dfb      	ldrb	r3, [r7, #23]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10d      	bne.n	8007158 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800713c:	4b05      	ldr	r3, [pc, #20]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800713e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007140:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800714a:	4902      	ldr	r1, [pc, #8]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800714c:	4313      	orrs	r3, r2
 800714e:	658b      	str	r3, [r1, #88]	; 0x58
 8007150:	e004      	b.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007152:	bf00      	nop
 8007154:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d032      	beq.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800716c:	2b30      	cmp	r3, #48	; 0x30
 800716e:	d01c      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007170:	2b30      	cmp	r3, #48	; 0x30
 8007172:	d817      	bhi.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8007174:	2b20      	cmp	r3, #32
 8007176:	d00c      	beq.n	8007192 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007178:	2b20      	cmp	r3, #32
 800717a:	d813      	bhi.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800717c:	2b00      	cmp	r3, #0
 800717e:	d016      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007180:	2b10      	cmp	r3, #16
 8007182:	d10f      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007184:	4baf      	ldr	r3, [pc, #700]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	4aae      	ldr	r2, [pc, #696]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800718a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800718e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007190:	e00e      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	3304      	adds	r3, #4
 8007196:	2102      	movs	r1, #2
 8007198:	4618      	mov	r0, r3
 800719a:	f001 f85f 	bl	800825c <RCCEx_PLL2_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80071a2:	e005      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	75fb      	strb	r3, [r7, #23]
      break;
 80071a8:	e002      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80071aa:	bf00      	nop
 80071ac:	e000      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 80071ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071b0:	7dfb      	ldrb	r3, [r7, #23]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d109      	bne.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80071b6:	4ba3      	ldr	r3, [pc, #652]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c2:	49a0      	ldr	r1, [pc, #640]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80071c8:	e001      	b.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d047      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071e2:	d030      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80071e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071e8:	d82a      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80071ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071ee:	d02c      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80071f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071f4:	d824      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80071f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071fa:	d018      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80071fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007200:	d81e      	bhi.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8007206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800720a:	d007      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800720c:	e018      	b.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800720e:	4b8d      	ldr	r3, [pc, #564]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007212:	4a8c      	ldr	r2, [pc, #560]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007218:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800721a:	e017      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3304      	adds	r3, #4
 8007220:	2100      	movs	r1, #0
 8007222:	4618      	mov	r0, r3
 8007224:	f001 f81a 	bl	800825c <RCCEx_PLL2_Config>
 8007228:	4603      	mov	r3, r0
 800722a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800722c:	e00e      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3324      	adds	r3, #36	; 0x24
 8007232:	2100      	movs	r1, #0
 8007234:	4618      	mov	r0, r3
 8007236:	f001 f8c3 	bl	80083c0 <RCCEx_PLL3_Config>
 800723a:	4603      	mov	r3, r0
 800723c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800723e:	e005      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	75fb      	strb	r3, [r7, #23]
      break;
 8007244:	e002      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8007246:	bf00      	nop
 8007248:	e000      	b.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800724a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800724c:	7dfb      	ldrb	r3, [r7, #23]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d109      	bne.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007252:	4b7c      	ldr	r3, [pc, #496]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007256:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800725e:	4979      	ldr	r1, [pc, #484]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007260:	4313      	orrs	r3, r2
 8007262:	650b      	str	r3, [r1, #80]	; 0x50
 8007264:	e001      	b.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007266:	7dfb      	ldrb	r3, [r7, #23]
 8007268:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d049      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800727a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800727e:	d02e      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8007280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007284:	d828      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007286:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800728a:	d02a      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800728c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007290:	d822      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8007292:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007296:	d026      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8007298:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800729c:	d81c      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800729e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072a2:	d010      	beq.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x466>
 80072a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072a8:	d816      	bhi.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d01d      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x48a>
 80072ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072b2:	d111      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3304      	adds	r3, #4
 80072b8:	2101      	movs	r1, #1
 80072ba:	4618      	mov	r0, r3
 80072bc:	f000 ffce 	bl	800825c <RCCEx_PLL2_Config>
 80072c0:	4603      	mov	r3, r0
 80072c2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80072c4:	e012      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	3324      	adds	r3, #36	; 0x24
 80072ca:	2101      	movs	r1, #1
 80072cc:	4618      	mov	r0, r3
 80072ce:	f001 f877 	bl	80083c0 <RCCEx_PLL3_Config>
 80072d2:	4603      	mov	r3, r0
 80072d4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80072d6:	e009      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	75fb      	strb	r3, [r7, #23]
      break;
 80072dc:	e006      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80072de:	bf00      	nop
 80072e0:	e004      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80072e2:	bf00      	nop
 80072e4:	e002      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80072e6:	bf00      	nop
 80072e8:	e000      	b.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80072ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072ec:	7dfb      	ldrb	r3, [r7, #23]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d109      	bne.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80072f2:	4b54      	ldr	r3, [pc, #336]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80072f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072fe:	4951      	ldr	r1, [pc, #324]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007300:	4313      	orrs	r3, r2
 8007302:	650b      	str	r3, [r1, #80]	; 0x50
 8007304:	e001      	b.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007306:	7dfb      	ldrb	r3, [r7, #23]
 8007308:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007312:	2b00      	cmp	r3, #0
 8007314:	d04b      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800731c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007320:	d02e      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8007322:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007326:	d828      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007328:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800732c:	d02a      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800732e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007332:	d822      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007334:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007338:	d026      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800733a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800733e:	d81c      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007344:	d010      	beq.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800734a:	d816      	bhi.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800734c:	2b00      	cmp	r3, #0
 800734e:	d01d      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8007350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007354:	d111      	bne.n	800737a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	3304      	adds	r3, #4
 800735a:	2101      	movs	r1, #1
 800735c:	4618      	mov	r0, r3
 800735e:	f000 ff7d 	bl	800825c <RCCEx_PLL2_Config>
 8007362:	4603      	mov	r3, r0
 8007364:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007366:	e012      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	3324      	adds	r3, #36	; 0x24
 800736c:	2101      	movs	r1, #1
 800736e:	4618      	mov	r0, r3
 8007370:	f001 f826 	bl	80083c0 <RCCEx_PLL3_Config>
 8007374:	4603      	mov	r3, r0
 8007376:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007378:	e009      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	75fb      	strb	r3, [r7, #23]
      break;
 800737e:	e006      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007380:	bf00      	nop
 8007382:	e004      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007384:	bf00      	nop
 8007386:	e002      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8007388:	bf00      	nop
 800738a:	e000      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800738c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800738e:	7dfb      	ldrb	r3, [r7, #23]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10a      	bne.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007394:	4b2b      	ldr	r3, [pc, #172]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007398:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80073a2:	4928      	ldr	r1, [pc, #160]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073a4:	4313      	orrs	r3, r2
 80073a6:	658b      	str	r3, [r1, #88]	; 0x58
 80073a8:	e001      	b.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073aa:	7dfb      	ldrb	r3, [r7, #23]
 80073ac:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d02f      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073c2:	d00e      	beq.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
 80073c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073c8:	d814      	bhi.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d015      	beq.n	80073fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80073ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073d2:	d10f      	bne.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073d4:	4b1b      	ldr	r3, [pc, #108]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d8:	4a1a      	ldr	r2, [pc, #104]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80073da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80073e0:	e00c      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	3304      	adds	r3, #4
 80073e6:	2101      	movs	r1, #1
 80073e8:	4618      	mov	r0, r3
 80073ea:	f000 ff37 	bl	800825c <RCCEx_PLL2_Config>
 80073ee:	4603      	mov	r3, r0
 80073f0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80073f2:	e003      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	75fb      	strb	r3, [r7, #23]
      break;
 80073f8:	e000      	b.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80073fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073fc:	7dfb      	ldrb	r3, [r7, #23]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007402:	4b10      	ldr	r3, [pc, #64]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007406:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800740e:	490d      	ldr	r1, [pc, #52]	; (8007444 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8007410:	4313      	orrs	r3, r2
 8007412:	650b      	str	r3, [r1, #80]	; 0x50
 8007414:	e001      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007416:	7dfb      	ldrb	r3, [r7, #23]
 8007418:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d033      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742a:	2b03      	cmp	r3, #3
 800742c:	d81c      	bhi.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800742e:	a201      	add	r2, pc, #4	; (adr r2, 8007434 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8007430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007434:	0800746f 	.word	0x0800746f
 8007438:	08007449 	.word	0x08007449
 800743c:	08007457 	.word	0x08007457
 8007440:	0800746f 	.word	0x0800746f
 8007444:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007448:	4bb8      	ldr	r3, [pc, #736]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	4ab7      	ldr	r2, [pc, #732]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800744e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007452:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007454:	e00c      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	3304      	adds	r3, #4
 800745a:	2102      	movs	r1, #2
 800745c:	4618      	mov	r0, r3
 800745e:	f000 fefd 	bl	800825c <RCCEx_PLL2_Config>
 8007462:	4603      	mov	r3, r0
 8007464:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007466:	e003      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	75fb      	strb	r3, [r7, #23]
      break;
 800746c:	e000      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800746e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007470:	7dfb      	ldrb	r3, [r7, #23]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d109      	bne.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007476:	4bad      	ldr	r3, [pc, #692]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800747a:	f023 0203 	bic.w	r2, r3, #3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007482:	49aa      	ldr	r1, [pc, #680]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007484:	4313      	orrs	r3, r2
 8007486:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007488:	e001      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 8086 	beq.w	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800749c:	4ba4      	ldr	r3, [pc, #656]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4aa3      	ldr	r2, [pc, #652]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80074a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074a8:	f7fb fec2 	bl	8003230 <HAL_GetTick>
 80074ac:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074ae:	e009      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074b0:	f7fb febe 	bl	8003230 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b64      	cmp	r3, #100	; 0x64
 80074bc:	d902      	bls.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	75fb      	strb	r3, [r7, #23]
        break;
 80074c2:	e005      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074c4:	4b9a      	ldr	r3, [pc, #616]	; (8007730 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d0ef      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d166      	bne.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80074d6:	4b95      	ldr	r3, [pc, #596]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80074e0:	4053      	eors	r3, r2
 80074e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d013      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074ea:	4b90      	ldr	r3, [pc, #576]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80074f4:	4b8d      	ldr	r3, [pc, #564]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f8:	4a8c      	ldr	r2, [pc, #560]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80074fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074fe:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007500:	4b8a      	ldr	r3, [pc, #552]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007504:	4a89      	ldr	r2, [pc, #548]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800750a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800750c:	4a87      	ldr	r2, [pc, #540]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800751c:	d115      	bne.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800751e:	f7fb fe87 	bl	8003230 <HAL_GetTick>
 8007522:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007524:	e00b      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007526:	f7fb fe83 	bl	8003230 <HAL_GetTick>
 800752a:	4602      	mov	r2, r0
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	1ad3      	subs	r3, r2, r3
 8007530:	f241 3288 	movw	r2, #5000	; 0x1388
 8007534:	4293      	cmp	r3, r2
 8007536:	d902      	bls.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	75fb      	strb	r3, [r7, #23]
            break;
 800753c:	e005      	b.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800753e:	4b7b      	ldr	r3, [pc, #492]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0ed      	beq.n	8007526 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800754a:	7dfb      	ldrb	r3, [r7, #23]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d126      	bne.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800755a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800755e:	d10d      	bne.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007560:	4b72      	ldr	r3, [pc, #456]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800756e:	0919      	lsrs	r1, r3, #4
 8007570:	4b70      	ldr	r3, [pc, #448]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8007572:	400b      	ands	r3, r1
 8007574:	496d      	ldr	r1, [pc, #436]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007576:	4313      	orrs	r3, r2
 8007578:	610b      	str	r3, [r1, #16]
 800757a:	e005      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800757c:	4b6b      	ldr	r3, [pc, #428]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	4a6a      	ldr	r2, [pc, #424]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007582:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007586:	6113      	str	r3, [r2, #16]
 8007588:	4b68      	ldr	r3, [pc, #416]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800758a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007596:	4965      	ldr	r1, [pc, #404]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007598:	4313      	orrs	r3, r2
 800759a:	670b      	str	r3, [r1, #112]	; 0x70
 800759c:	e004      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	75bb      	strb	r3, [r7, #22]
 80075a2:	e001      	b.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a4:	7dfb      	ldrb	r3, [r7, #23]
 80075a6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d07e      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075b8:	2b28      	cmp	r3, #40	; 0x28
 80075ba:	d867      	bhi.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80075bc:	a201      	add	r2, pc, #4	; (adr r2, 80075c4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80075be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c2:	bf00      	nop
 80075c4:	08007693 	.word	0x08007693
 80075c8:	0800768d 	.word	0x0800768d
 80075cc:	0800768d 	.word	0x0800768d
 80075d0:	0800768d 	.word	0x0800768d
 80075d4:	0800768d 	.word	0x0800768d
 80075d8:	0800768d 	.word	0x0800768d
 80075dc:	0800768d 	.word	0x0800768d
 80075e0:	0800768d 	.word	0x0800768d
 80075e4:	08007669 	.word	0x08007669
 80075e8:	0800768d 	.word	0x0800768d
 80075ec:	0800768d 	.word	0x0800768d
 80075f0:	0800768d 	.word	0x0800768d
 80075f4:	0800768d 	.word	0x0800768d
 80075f8:	0800768d 	.word	0x0800768d
 80075fc:	0800768d 	.word	0x0800768d
 8007600:	0800768d 	.word	0x0800768d
 8007604:	0800767b 	.word	0x0800767b
 8007608:	0800768d 	.word	0x0800768d
 800760c:	0800768d 	.word	0x0800768d
 8007610:	0800768d 	.word	0x0800768d
 8007614:	0800768d 	.word	0x0800768d
 8007618:	0800768d 	.word	0x0800768d
 800761c:	0800768d 	.word	0x0800768d
 8007620:	0800768d 	.word	0x0800768d
 8007624:	08007693 	.word	0x08007693
 8007628:	0800768d 	.word	0x0800768d
 800762c:	0800768d 	.word	0x0800768d
 8007630:	0800768d 	.word	0x0800768d
 8007634:	0800768d 	.word	0x0800768d
 8007638:	0800768d 	.word	0x0800768d
 800763c:	0800768d 	.word	0x0800768d
 8007640:	0800768d 	.word	0x0800768d
 8007644:	08007693 	.word	0x08007693
 8007648:	0800768d 	.word	0x0800768d
 800764c:	0800768d 	.word	0x0800768d
 8007650:	0800768d 	.word	0x0800768d
 8007654:	0800768d 	.word	0x0800768d
 8007658:	0800768d 	.word	0x0800768d
 800765c:	0800768d 	.word	0x0800768d
 8007660:	0800768d 	.word	0x0800768d
 8007664:	08007693 	.word	0x08007693
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3304      	adds	r3, #4
 800766c:	2101      	movs	r1, #1
 800766e:	4618      	mov	r0, r3
 8007670:	f000 fdf4 	bl	800825c <RCCEx_PLL2_Config>
 8007674:	4603      	mov	r3, r0
 8007676:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007678:	e00c      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	3324      	adds	r3, #36	; 0x24
 800767e:	2101      	movs	r1, #1
 8007680:	4618      	mov	r0, r3
 8007682:	f000 fe9d 	bl	80083c0 <RCCEx_PLL3_Config>
 8007686:	4603      	mov	r3, r0
 8007688:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800768a:	e003      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	75fb      	strb	r3, [r7, #23]
      break;
 8007690:	e000      	b.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8007692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007694:	7dfb      	ldrb	r3, [r7, #23]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d109      	bne.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800769a:	4b24      	ldr	r3, [pc, #144]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800769c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076a6:	4921      	ldr	r1, [pc, #132]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	654b      	str	r3, [r1, #84]	; 0x54
 80076ac:	e001      	b.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076ae:	7dfb      	ldrb	r3, [r7, #23]
 80076b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d03e      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076c2:	2b05      	cmp	r3, #5
 80076c4:	d820      	bhi.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80076c6:	a201      	add	r2, pc, #4	; (adr r2, 80076cc <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80076c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076cc:	0800770f 	.word	0x0800770f
 80076d0:	080076e5 	.word	0x080076e5
 80076d4:	080076f7 	.word	0x080076f7
 80076d8:	0800770f 	.word	0x0800770f
 80076dc:	0800770f 	.word	0x0800770f
 80076e0:	0800770f 	.word	0x0800770f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	3304      	adds	r3, #4
 80076e8:	2101      	movs	r1, #1
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 fdb6 	bl	800825c <RCCEx_PLL2_Config>
 80076f0:	4603      	mov	r3, r0
 80076f2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80076f4:	e00c      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	3324      	adds	r3, #36	; 0x24
 80076fa:	2101      	movs	r1, #1
 80076fc:	4618      	mov	r0, r3
 80076fe:	f000 fe5f 	bl	80083c0 <RCCEx_PLL3_Config>
 8007702:	4603      	mov	r3, r0
 8007704:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007706:	e003      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
      break;
 800770c:	e000      	b.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800770e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d110      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007716:	4b05      	ldr	r3, [pc, #20]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800771a:	f023 0207 	bic.w	r2, r3, #7
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007722:	4902      	ldr	r1, [pc, #8]	; (800772c <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007724:	4313      	orrs	r3, r2
 8007726:	654b      	str	r3, [r1, #84]	; 0x54
 8007728:	e008      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800772a:	bf00      	nop
 800772c:	58024400 	.word	0x58024400
 8007730:	58024800 	.word	0x58024800
 8007734:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0304 	and.w	r3, r3, #4
 8007744:	2b00      	cmp	r3, #0
 8007746:	d039      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800774e:	2b05      	cmp	r3, #5
 8007750:	d820      	bhi.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8007752:	a201      	add	r2, pc, #4	; (adr r2, 8007758 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8007754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007758:	0800779b 	.word	0x0800779b
 800775c:	08007771 	.word	0x08007771
 8007760:	08007783 	.word	0x08007783
 8007764:	0800779b 	.word	0x0800779b
 8007768:	0800779b 	.word	0x0800779b
 800776c:	0800779b 	.word	0x0800779b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	3304      	adds	r3, #4
 8007774:	2101      	movs	r1, #1
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fd70 	bl	800825c <RCCEx_PLL2_Config>
 800777c:	4603      	mov	r3, r0
 800777e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007780:	e00c      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	3324      	adds	r3, #36	; 0x24
 8007786:	2101      	movs	r1, #1
 8007788:	4618      	mov	r0, r3
 800778a:	f000 fe19 	bl	80083c0 <RCCEx_PLL3_Config>
 800778e:	4603      	mov	r3, r0
 8007790:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007792:	e003      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	75fb      	strb	r3, [r7, #23]
      break;
 8007798:	e000      	b.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800779a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800779c:	7dfb      	ldrb	r3, [r7, #23]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10a      	bne.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077a2:	4bb7      	ldr	r3, [pc, #732]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077a6:	f023 0207 	bic.w	r2, r3, #7
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b0:	49b3      	ldr	r1, [pc, #716]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	658b      	str	r3, [r1, #88]	; 0x58
 80077b6:	e001      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
 80077ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0320 	and.w	r3, r3, #32
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d04b      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077d2:	d02e      	beq.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80077d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077d8:	d828      	bhi.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80077da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077de:	d02a      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80077e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e4:	d822      	bhi.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80077e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077ea:	d026      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80077ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077f0:	d81c      	bhi.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80077f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077f6:	d010      	beq.n	800781a <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80077f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077fc:	d816      	bhi.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d01d      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007806:	d111      	bne.n	800782c <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3304      	adds	r3, #4
 800780c:	2100      	movs	r1, #0
 800780e:	4618      	mov	r0, r3
 8007810:	f000 fd24 	bl	800825c <RCCEx_PLL2_Config>
 8007814:	4603      	mov	r3, r0
 8007816:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007818:	e012      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	3324      	adds	r3, #36	; 0x24
 800781e:	2102      	movs	r1, #2
 8007820:	4618      	mov	r0, r3
 8007822:	f000 fdcd 	bl	80083c0 <RCCEx_PLL3_Config>
 8007826:	4603      	mov	r3, r0
 8007828:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800782a:	e009      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	75fb      	strb	r3, [r7, #23]
      break;
 8007830:	e006      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007832:	bf00      	nop
 8007834:	e004      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8007836:	bf00      	nop
 8007838:	e002      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800783a:	bf00      	nop
 800783c:	e000      	b.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800783e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007840:	7dfb      	ldrb	r3, [r7, #23]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007846:	4b8e      	ldr	r3, [pc, #568]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007854:	498a      	ldr	r1, [pc, #552]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007856:	4313      	orrs	r3, r2
 8007858:	654b      	str	r3, [r1, #84]	; 0x54
 800785a:	e001      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800785c:	7dfb      	ldrb	r3, [r7, #23]
 800785e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007868:	2b00      	cmp	r3, #0
 800786a:	d04b      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007872:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007876:	d02e      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007878:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800787c:	d828      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800787e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007882:	d02a      	beq.n	80078da <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007888:	d822      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800788a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800788e:	d026      	beq.n	80078de <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007890:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007894:	d81c      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800789a:	d010      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800789c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a0:	d816      	bhi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d01d      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80078a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078aa:	d111      	bne.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3304      	adds	r3, #4
 80078b0:	2100      	movs	r1, #0
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fcd2 	bl	800825c <RCCEx_PLL2_Config>
 80078b8:	4603      	mov	r3, r0
 80078ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80078bc:	e012      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3324      	adds	r3, #36	; 0x24
 80078c2:	2102      	movs	r1, #2
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 fd7b 	bl	80083c0 <RCCEx_PLL3_Config>
 80078ca:	4603      	mov	r3, r0
 80078cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80078ce:	e009      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	75fb      	strb	r3, [r7, #23]
      break;
 80078d4:	e006      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80078d6:	bf00      	nop
 80078d8:	e004      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80078da:	bf00      	nop
 80078dc:	e002      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80078de:	bf00      	nop
 80078e0:	e000      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80078e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078e4:	7dfb      	ldrb	r3, [r7, #23]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10a      	bne.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80078ea:	4b65      	ldr	r3, [pc, #404]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078f8:	4961      	ldr	r1, [pc, #388]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80078fa:	4313      	orrs	r3, r2
 80078fc:	658b      	str	r3, [r1, #88]	; 0x58
 80078fe:	e001      	b.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007900:	7dfb      	ldrb	r3, [r7, #23]
 8007902:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800790c:	2b00      	cmp	r3, #0
 800790e:	d04b      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007916:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800791a:	d02e      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800791c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007920:	d828      	bhi.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007926:	d02a      	beq.n	800797e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8007928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800792c:	d822      	bhi.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800792e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007932:	d026      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007934:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007938:	d81c      	bhi.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800793a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800793e:	d010      	beq.n	8007962 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8007940:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007944:	d816      	bhi.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8007946:	2b00      	cmp	r3, #0
 8007948:	d01d      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800794a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800794e:	d111      	bne.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	3304      	adds	r3, #4
 8007954:	2100      	movs	r1, #0
 8007956:	4618      	mov	r0, r3
 8007958:	f000 fc80 	bl	800825c <RCCEx_PLL2_Config>
 800795c:	4603      	mov	r3, r0
 800795e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007960:	e012      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	3324      	adds	r3, #36	; 0x24
 8007966:	2102      	movs	r1, #2
 8007968:	4618      	mov	r0, r3
 800796a:	f000 fd29 	bl	80083c0 <RCCEx_PLL3_Config>
 800796e:	4603      	mov	r3, r0
 8007970:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007972:	e009      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007974:	2301      	movs	r3, #1
 8007976:	75fb      	strb	r3, [r7, #23]
      break;
 8007978:	e006      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800797a:	bf00      	nop
 800797c:	e004      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800797e:	bf00      	nop
 8007980:	e002      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007982:	bf00      	nop
 8007984:	e000      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007988:	7dfb      	ldrb	r3, [r7, #23]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800798e:	4b3c      	ldr	r3, [pc, #240]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800799c:	4938      	ldr	r1, [pc, #224]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	658b      	str	r3, [r1, #88]	; 0x58
 80079a2:	e001      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079a4:	7dfb      	ldrb	r3, [r7, #23]
 80079a6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d01a      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079be:	d10a      	bne.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3324      	adds	r3, #36	; 0x24
 80079c4:	2102      	movs	r1, #2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 fcfa 	bl	80083c0 <RCCEx_PLL3_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80079d6:	4b2a      	ldr	r3, [pc, #168]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079e4:	4926      	ldr	r1, [pc, #152]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80079e6:	4313      	orrs	r3, r2
 80079e8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 0310 	and.w	r3, r3, #16
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d01a      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a00:	d10a      	bne.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3324      	adds	r3, #36	; 0x24
 8007a06:	2102      	movs	r1, #2
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 fcd9 	bl	80083c0 <RCCEx_PLL3_Config>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a18:	4b19      	ldr	r3, [pc, #100]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a26:	4916      	ldr	r1, [pc, #88]	; (8007a80 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d036      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a42:	d01f      	beq.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a48:	d817      	bhi.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d003      	beq.n	8007a56 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a52:	d009      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8007a54:	e011      	b.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	3304      	adds	r3, #4
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f000 fbfd 	bl	800825c <RCCEx_PLL2_Config>
 8007a62:	4603      	mov	r3, r0
 8007a64:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007a66:	e00e      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3324      	adds	r3, #36	; 0x24
 8007a6c:	2102      	movs	r1, #2
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fca6 	bl	80083c0 <RCCEx_PLL3_Config>
 8007a74:	4603      	mov	r3, r0
 8007a76:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007a78:	e005      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a7e:	e002      	b.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007a80:	58024400 	.word	0x58024400
      break;
 8007a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a86:	7dfb      	ldrb	r3, [r7, #23]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a8c:	4b93      	ldr	r3, [pc, #588]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a9a:	4990      	ldr	r1, [pc, #576]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	658b      	str	r3, [r1, #88]	; 0x58
 8007aa0:	e001      	b.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d033      	beq.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ab8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007abc:	d01c      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007abe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007ac2:	d816      	bhi.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8007ac4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ac8:	d003      	beq.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007aca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ace:	d007      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007ad0:	e00f      	b.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ad2:	4b82      	ldr	r3, [pc, #520]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad6:	4a81      	ldr	r2, [pc, #516]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007adc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007ade:	e00c      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3324      	adds	r3, #36	; 0x24
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f000 fc6a 	bl	80083c0 <RCCEx_PLL3_Config>
 8007aec:	4603      	mov	r3, r0
 8007aee:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007af0:	e003      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	75fb      	strb	r3, [r7, #23]
      break;
 8007af6:	e000      	b.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8007af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10a      	bne.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b00:	4b76      	ldr	r3, [pc, #472]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b0e:	4973      	ldr	r1, [pc, #460]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b10:	4313      	orrs	r3, r2
 8007b12:	654b      	str	r3, [r1, #84]	; 0x54
 8007b14:	e001      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d029      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8007b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b32:	d007      	beq.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8007b34:	e00f      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b36:	4b69      	ldr	r3, [pc, #420]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3a:	4a68      	ldr	r2, [pc, #416]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b40:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007b42:	e00b      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3304      	adds	r3, #4
 8007b48:	2102      	movs	r1, #2
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 fb86 	bl	800825c <RCCEx_PLL2_Config>
 8007b50:	4603      	mov	r3, r0
 8007b52:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007b54:	e002      	b.n	8007b5c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	75fb      	strb	r3, [r7, #23]
      break;
 8007b5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d109      	bne.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007b62:	4b5e      	ldr	r3, [pc, #376]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b6e:	495b      	ldr	r1, [pc, #364]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007b74:	e001      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b76:	7dfb      	ldrb	r3, [r7, #23]
 8007b78:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00a      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	3324      	adds	r3, #36	; 0x24
 8007b8a:	2102      	movs	r1, #2
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f000 fc17 	bl	80083c0 <RCCEx_PLL3_Config>
 8007b92:	4603      	mov	r3, r0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d001      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d030      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bb0:	d017      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8007bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bb6:	d811      	bhi.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bbc:	d013      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bc2:	d80b      	bhi.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d010      	beq.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007bc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bcc:	d106      	bne.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bce:	4b43      	ldr	r3, [pc, #268]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd2:	4a42      	ldr	r2, [pc, #264]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007bda:	e007      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	75fb      	strb	r3, [r7, #23]
      break;
 8007be0:	e004      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007be2:	bf00      	nop
 8007be4:	e002      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007be6:	bf00      	nop
 8007be8:	e000      	b.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8007bea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bec:	7dfb      	ldrb	r3, [r7, #23]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d109      	bne.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007bf2:	4b3a      	ldr	r3, [pc, #232]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bfe:	4937      	ldr	r1, [pc, #220]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c00:	4313      	orrs	r3, r2
 8007c02:	654b      	str	r3, [r1, #84]	; 0x54
 8007c04:	e001      	b.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d008      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007c16:	4b31      	ldr	r3, [pc, #196]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c22:	492e      	ldr	r1, [pc, #184]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d009      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007c34:	4b29      	ldr	r3, [pc, #164]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007c42:	4926      	ldr	r1, [pc, #152]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c44:	4313      	orrs	r3, r2
 8007c46:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d008      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007c54:	4b21      	ldr	r3, [pc, #132]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c60:	491e      	ldr	r1, [pc, #120]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d00d      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007c72:	4b1a      	ldr	r3, [pc, #104]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	4a19      	ldr	r2, [pc, #100]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c78:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c7c:	6113      	str	r3, [r2, #16]
 8007c7e:	4b17      	ldr	r3, [pc, #92]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c80:	691a      	ldr	r2, [r3, #16]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007c88:	4914      	ldr	r1, [pc, #80]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	da08      	bge.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007c96:	4b11      	ldr	r3, [pc, #68]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca2:	490e      	ldr	r1, [pc, #56]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d009      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007cb4:	4b09      	ldr	r3, [pc, #36]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cc2:	4906      	ldr	r1, [pc, #24]	; (8007cdc <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007cc8:	7dbb      	ldrb	r3, [r7, #22]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d101      	bne.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	e000      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	58024400 	.word	0x58024400

08007ce0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ce4:	f7ff f860 	bl	8006da8 <HAL_RCC_GetHCLKFreq>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	4b06      	ldr	r3, [pc, #24]	; (8007d04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	091b      	lsrs	r3, r3, #4
 8007cf0:	f003 0307 	and.w	r3, r3, #7
 8007cf4:	4904      	ldr	r1, [pc, #16]	; (8007d08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007cf6:	5ccb      	ldrb	r3, [r1, r3]
 8007cf8:	f003 031f 	and.w	r3, r3, #31
 8007cfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	58024400 	.word	0x58024400
 8007d08:	0800ef28 	.word	0x0800ef28

08007d0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b089      	sub	sp, #36	; 0x24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007d14:	4ba1      	ldr	r3, [pc, #644]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d18:	f003 0303 	and.w	r3, r3, #3
 8007d1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007d1e:	4b9f      	ldr	r3, [pc, #636]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d22:	0b1b      	lsrs	r3, r3, #12
 8007d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007d2a:	4b9c      	ldr	r3, [pc, #624]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2e:	091b      	lsrs	r3, r3, #4
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007d36:	4b99      	ldr	r3, [pc, #612]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d3a:	08db      	lsrs	r3, r3, #3
 8007d3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	fb02 f303 	mul.w	r3, r2, r3
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 8111 	beq.w	8007f7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007d5a:	69bb      	ldr	r3, [r7, #24]
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	f000 8083 	beq.w	8007e68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	f200 80a1 	bhi.w	8007eac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d003      	beq.n	8007d78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d056      	beq.n	8007e24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007d76:	e099      	b.n	8007eac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d78:	4b88      	ldr	r3, [pc, #544]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0320 	and.w	r3, r3, #32
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d02d      	beq.n	8007de0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007d84:	4b85      	ldr	r3, [pc, #532]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	08db      	lsrs	r3, r3, #3
 8007d8a:	f003 0303 	and.w	r3, r3, #3
 8007d8e:	4a84      	ldr	r2, [pc, #528]	; (8007fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007d90:	fa22 f303 	lsr.w	r3, r2, r3
 8007d94:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	ee07 3a90 	vmov	s15, r3
 8007d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007da0:	697b      	ldr	r3, [r7, #20]
 8007da2:	ee07 3a90 	vmov	s15, r3
 8007da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dae:	4b7b      	ldr	r3, [pc, #492]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007db6:	ee07 3a90 	vmov	s15, r3
 8007dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007dc2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dda:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007dde:	e087      	b.n	8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	ee07 3a90 	vmov	s15, r3
 8007de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007df2:	4b6a      	ldr	r3, [pc, #424]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dfa:	ee07 3a90 	vmov	s15, r3
 8007dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e06:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e1e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e22:	e065      	b.n	8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	ee07 3a90 	vmov	s15, r3
 8007e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e36:	4b59      	ldr	r3, [pc, #356]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e62:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007e66:	e043      	b.n	8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	ee07 3a90 	vmov	s15, r3
 8007e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e7a:	4b48      	ldr	r3, [pc, #288]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e82:	ee07 3a90 	vmov	s15, r3
 8007e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ea6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eaa:	e021      	b.n	8007ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	ee07 3a90 	vmov	s15, r3
 8007eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007fac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ebe:	4b37      	ldr	r3, [pc, #220]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec6:	ee07 3a90 	vmov	s15, r3
 8007eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ed2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eea:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007eee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007ef0:	4b2a      	ldr	r3, [pc, #168]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef4:	0a5b      	lsrs	r3, r3, #9
 8007ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007efa:	ee07 3a90 	vmov	s15, r3
 8007efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f16:	ee17 2a90 	vmov	r2, s15
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007f1e:	4b1f      	ldr	r3, [pc, #124]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f22:	0c1b      	lsrs	r3, r3, #16
 8007f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f28:	ee07 3a90 	vmov	s15, r3
 8007f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f38:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f44:	ee17 2a90 	vmov	r2, s15
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007f4c:	4b13      	ldr	r3, [pc, #76]	; (8007f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f50:	0e1b      	lsrs	r3, r3, #24
 8007f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f56:	ee07 3a90 	vmov	s15, r3
 8007f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f72:	ee17 2a90 	vmov	r2, s15
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007f7a:	e008      	b.n	8007f8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	609a      	str	r2, [r3, #8]
}
 8007f8e:	bf00      	nop
 8007f90:	3724      	adds	r7, #36	; 0x24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	58024400 	.word	0x58024400
 8007fa0:	03d09000 	.word	0x03d09000
 8007fa4:	46000000 	.word	0x46000000
 8007fa8:	4c742400 	.word	0x4c742400
 8007fac:	4a742400 	.word	0x4a742400
 8007fb0:	4c371b00 	.word	0x4c371b00

08007fb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b089      	sub	sp, #36	; 0x24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fbc:	4ba1      	ldr	r3, [pc, #644]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc0:	f003 0303 	and.w	r3, r3, #3
 8007fc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007fc6:	4b9f      	ldr	r3, [pc, #636]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fca:	0d1b      	lsrs	r3, r3, #20
 8007fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007fd2:	4b9c      	ldr	r3, [pc, #624]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd6:	0a1b      	lsrs	r3, r3, #8
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007fde:	4b99      	ldr	r3, [pc, #612]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fe2:	08db      	lsrs	r3, r3, #3
 8007fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	fb02 f303 	mul.w	r3, r2, r3
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 8111 	beq.w	8008224 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	2b02      	cmp	r3, #2
 8008006:	f000 8083 	beq.w	8008110 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	2b02      	cmp	r3, #2
 800800e:	f200 80a1 	bhi.w	8008154 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d056      	beq.n	80080cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800801e:	e099      	b.n	8008154 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008020:	4b88      	ldr	r3, [pc, #544]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b00      	cmp	r3, #0
 800802a:	d02d      	beq.n	8008088 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800802c:	4b85      	ldr	r3, [pc, #532]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	08db      	lsrs	r3, r3, #3
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	4a84      	ldr	r2, [pc, #528]	; (8008248 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008038:	fa22 f303 	lsr.w	r3, r2, r3
 800803c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	ee07 3a90 	vmov	s15, r3
 8008044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008056:	4b7b      	ldr	r3, [pc, #492]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805e:	ee07 3a90 	vmov	s15, r3
 8008062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008066:	ed97 6a03 	vldr	s12, [r7, #12]
 800806a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800824c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800806e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800807a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008082:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008086:	e087      	b.n	8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	ee07 3a90 	vmov	s15, r3
 800808e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008092:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008250 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800809a:	4b6a      	ldr	r3, [pc, #424]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a2:	ee07 3a90 	vmov	s15, r3
 80080a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ae:	eddf 5a67 	vldr	s11, [pc, #412]	; 800824c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80080be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80080ca:	e065      	b.n	8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80080da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080de:	4b59      	ldr	r3, [pc, #356]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80080e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800824c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80080f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800810e:	e043      	b.n	8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008258 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800811e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008122:	4b48      	ldr	r3, [pc, #288]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008132:	ed97 6a03 	vldr	s12, [r7, #12]
 8008136:	eddf 5a45 	vldr	s11, [pc, #276]	; 800824c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800813a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800813e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008142:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800814a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800814e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008152:	e021      	b.n	8008198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008166:	4b37      	ldr	r3, [pc, #220]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800816e:	ee07 3a90 	vmov	s15, r3
 8008172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008176:	ed97 6a03 	vldr	s12, [r7, #12]
 800817a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800824c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800817e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800818a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800818e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008192:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008196:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008198:	4b2a      	ldr	r3, [pc, #168]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800819a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819c:	0a5b      	lsrs	r3, r3, #9
 800819e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80081b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081be:	ee17 2a90 	vmov	r2, s15
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80081c6:	4b1f      	ldr	r3, [pc, #124]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	0c1b      	lsrs	r3, r3, #16
 80081cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081d0:	ee07 3a90 	vmov	s15, r3
 80081d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80081dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80081e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ec:	ee17 2a90 	vmov	r2, s15
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80081f4:	4b13      	ldr	r3, [pc, #76]	; (8008244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80081f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f8:	0e1b      	lsrs	r3, r3, #24
 80081fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800820a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800820e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800821a:	ee17 2a90 	vmov	r2, s15
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008222:	e008      	b.n	8008236 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	609a      	str	r2, [r3, #8]
}
 8008236:	bf00      	nop
 8008238:	3724      	adds	r7, #36	; 0x24
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	58024400 	.word	0x58024400
 8008248:	03d09000 	.word	0x03d09000
 800824c:	46000000 	.word	0x46000000
 8008250:	4c742400 	.word	0x4c742400
 8008254:	4a742400 	.word	0x4a742400
 8008258:	4c371b00 	.word	0x4c371b00

0800825c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800826a:	4b53      	ldr	r3, [pc, #332]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 800826c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	2b03      	cmp	r3, #3
 8008274:	d101      	bne.n	800827a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008276:	2301      	movs	r3, #1
 8008278:	e099      	b.n	80083ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800827a:	4b4f      	ldr	r3, [pc, #316]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a4e      	ldr	r2, [pc, #312]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008280:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008286:	f7fa ffd3 	bl	8003230 <HAL_GetTick>
 800828a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800828c:	e008      	b.n	80082a0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800828e:	f7fa ffcf 	bl	8003230 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	2b02      	cmp	r3, #2
 800829a:	d901      	bls.n	80082a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e086      	b.n	80083ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80082a0:	4b45      	ldr	r3, [pc, #276]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1f0      	bne.n	800828e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80082ac:	4b42      	ldr	r3, [pc, #264]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 80082ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	031b      	lsls	r3, r3, #12
 80082ba:	493f      	ldr	r1, [pc, #252]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	628b      	str	r3, [r1, #40]	; 0x28
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	3b01      	subs	r3, #1
 80082c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	689b      	ldr	r3, [r3, #8]
 80082ce:	3b01      	subs	r3, #1
 80082d0:	025b      	lsls	r3, r3, #9
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	431a      	orrs	r2, r3
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	3b01      	subs	r3, #1
 80082dc:	041b      	lsls	r3, r3, #16
 80082de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80082e2:	431a      	orrs	r2, r3
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	3b01      	subs	r3, #1
 80082ea:	061b      	lsls	r3, r3, #24
 80082ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80082f0:	4931      	ldr	r1, [pc, #196]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80082f6:	4b30      	ldr	r3, [pc, #192]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 80082f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	492d      	ldr	r1, [pc, #180]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008304:	4313      	orrs	r3, r2
 8008306:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008308:	4b2b      	ldr	r3, [pc, #172]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 800830a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800830c:	f023 0220 	bic.w	r2, r3, #32
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	4928      	ldr	r1, [pc, #160]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008316:	4313      	orrs	r3, r2
 8008318:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800831a:	4b27      	ldr	r3, [pc, #156]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 800831c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831e:	4a26      	ldr	r2, [pc, #152]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008320:	f023 0310 	bic.w	r3, r3, #16
 8008324:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008326:	4b24      	ldr	r3, [pc, #144]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008328:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800832a:	4b24      	ldr	r3, [pc, #144]	; (80083bc <RCCEx_PLL2_Config+0x160>)
 800832c:	4013      	ands	r3, r2
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	69d2      	ldr	r2, [r2, #28]
 8008332:	00d2      	lsls	r2, r2, #3
 8008334:	4920      	ldr	r1, [pc, #128]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008336:	4313      	orrs	r3, r2
 8008338:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800833a:	4b1f      	ldr	r3, [pc, #124]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 800833c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833e:	4a1e      	ldr	r2, [pc, #120]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008340:	f043 0310 	orr.w	r3, r3, #16
 8008344:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d106      	bne.n	800835a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800834c:	4b1a      	ldr	r3, [pc, #104]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	4a19      	ldr	r2, [pc, #100]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008352:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008356:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008358:	e00f      	b.n	800837a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b01      	cmp	r3, #1
 800835e:	d106      	bne.n	800836e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008360:	4b15      	ldr	r3, [pc, #84]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008364:	4a14      	ldr	r2, [pc, #80]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800836a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800836c:	e005      	b.n	800837a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800836e:	4b12      	ldr	r3, [pc, #72]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008372:	4a11      	ldr	r2, [pc, #68]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008374:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008378:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800837a:	4b0f      	ldr	r3, [pc, #60]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4a0e      	ldr	r2, [pc, #56]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 8008380:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008386:	f7fa ff53 	bl	8003230 <HAL_GetTick>
 800838a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800838c:	e008      	b.n	80083a0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800838e:	f7fa ff4f 	bl	8003230 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	2b02      	cmp	r3, #2
 800839a:	d901      	bls.n	80083a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800839c:	2303      	movs	r3, #3
 800839e:	e006      	b.n	80083ae <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80083a0:	4b05      	ldr	r3, [pc, #20]	; (80083b8 <RCCEx_PLL2_Config+0x15c>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0f0      	beq.n	800838e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80083ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	58024400 	.word	0x58024400
 80083bc:	ffff0007 	.word	0xffff0007

080083c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80083ce:	4b53      	ldr	r3, [pc, #332]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80083d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d2:	f003 0303 	and.w	r3, r3, #3
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d101      	bne.n	80083de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	e099      	b.n	8008512 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80083de:	4b4f      	ldr	r3, [pc, #316]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a4e      	ldr	r2, [pc, #312]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80083e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083ea:	f7fa ff21 	bl	8003230 <HAL_GetTick>
 80083ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80083f0:	e008      	b.n	8008404 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80083f2:	f7fa ff1d 	bl	8003230 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d901      	bls.n	8008404 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e086      	b.n	8008512 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008404:	4b45      	ldr	r3, [pc, #276]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1f0      	bne.n	80083f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008410:	4b42      	ldr	r3, [pc, #264]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008414:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	051b      	lsls	r3, r3, #20
 800841e:	493f      	ldr	r1, [pc, #252]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008420:	4313      	orrs	r3, r2
 8008422:	628b      	str	r3, [r1, #40]	; 0x28
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	3b01      	subs	r3, #1
 800842a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	3b01      	subs	r3, #1
 8008434:	025b      	lsls	r3, r3, #9
 8008436:	b29b      	uxth	r3, r3
 8008438:	431a      	orrs	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	3b01      	subs	r3, #1
 8008440:	041b      	lsls	r3, r3, #16
 8008442:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008446:	431a      	orrs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	691b      	ldr	r3, [r3, #16]
 800844c:	3b01      	subs	r3, #1
 800844e:	061b      	lsls	r3, r3, #24
 8008450:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008454:	4931      	ldr	r1, [pc, #196]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008456:	4313      	orrs	r3, r2
 8008458:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800845a:	4b30      	ldr	r3, [pc, #192]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 800845c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800845e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	492d      	ldr	r1, [pc, #180]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008468:	4313      	orrs	r3, r2
 800846a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800846c:	4b2b      	ldr	r3, [pc, #172]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 800846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008470:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	4928      	ldr	r1, [pc, #160]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 800847a:	4313      	orrs	r3, r2
 800847c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800847e:	4b27      	ldr	r3, [pc, #156]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008482:	4a26      	ldr	r2, [pc, #152]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008488:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800848a:	4b24      	ldr	r3, [pc, #144]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 800848c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800848e:	4b24      	ldr	r3, [pc, #144]	; (8008520 <RCCEx_PLL3_Config+0x160>)
 8008490:	4013      	ands	r3, r2
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	69d2      	ldr	r2, [r2, #28]
 8008496:	00d2      	lsls	r2, r2, #3
 8008498:	4920      	ldr	r1, [pc, #128]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 800849a:	4313      	orrs	r3, r2
 800849c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800849e:	4b1f      	ldr	r3, [pc, #124]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a2:	4a1e      	ldr	r2, [pc, #120]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d106      	bne.n	80084be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80084b0:	4b1a      	ldr	r3, [pc, #104]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	4a19      	ldr	r2, [pc, #100]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80084ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084bc:	e00f      	b.n	80084de <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d106      	bne.n	80084d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80084c4:	4b15      	ldr	r3, [pc, #84]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	4a14      	ldr	r2, [pc, #80]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80084ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80084d0:	e005      	b.n	80084de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80084d2:	4b12      	ldr	r3, [pc, #72]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d6:	4a11      	ldr	r2, [pc, #68]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80084de:	4b0f      	ldr	r3, [pc, #60]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a0e      	ldr	r2, [pc, #56]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 80084e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ea:	f7fa fea1 	bl	8003230 <HAL_GetTick>
 80084ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80084f0:	e008      	b.n	8008504 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80084f2:	f7fa fe9d 	bl	8003230 <HAL_GetTick>
 80084f6:	4602      	mov	r2, r0
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d901      	bls.n	8008504 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008500:	2303      	movs	r3, #3
 8008502:	e006      	b.n	8008512 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <RCCEx_PLL3_Config+0x15c>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d0f0      	beq.n	80084f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008510:	7bfb      	ldrb	r3, [r7, #15]
}
 8008512:	4618      	mov	r0, r3
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	58024400 	.word	0x58024400
 8008520:	ffff0007 	.word	0xffff0007

08008524 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e0f1      	b.n	800871a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a78      	ldr	r2, [pc, #480]	; (8008724 <HAL_SPI_Init+0x200>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d00f      	beq.n	8008566 <HAL_SPI_Init+0x42>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a77      	ldr	r2, [pc, #476]	; (8008728 <HAL_SPI_Init+0x204>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d00a      	beq.n	8008566 <HAL_SPI_Init+0x42>
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a75      	ldr	r2, [pc, #468]	; (800872c <HAL_SPI_Init+0x208>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d005      	beq.n	8008566 <HAL_SPI_Init+0x42>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	2b0f      	cmp	r3, #15
 8008560:	d901      	bls.n	8008566 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	e0d9      	b.n	800871a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 f8e2 	bl	8008730 <SPI_GetPacketSize>
 800856c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a6c      	ldr	r2, [pc, #432]	; (8008724 <HAL_SPI_Init+0x200>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d00c      	beq.n	8008592 <HAL_SPI_Init+0x6e>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a6a      	ldr	r2, [pc, #424]	; (8008728 <HAL_SPI_Init+0x204>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d007      	beq.n	8008592 <HAL_SPI_Init+0x6e>
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4a69      	ldr	r2, [pc, #420]	; (800872c <HAL_SPI_Init+0x208>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d002      	beq.n	8008592 <HAL_SPI_Init+0x6e>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b08      	cmp	r3, #8
 8008590:	d811      	bhi.n	80085b6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008596:	4a63      	ldr	r2, [pc, #396]	; (8008724 <HAL_SPI_Init+0x200>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d009      	beq.n	80085b0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a61      	ldr	r2, [pc, #388]	; (8008728 <HAL_SPI_Init+0x204>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d004      	beq.n	80085b0 <HAL_SPI_Init+0x8c>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a60      	ldr	r2, [pc, #384]	; (800872c <HAL_SPI_Init+0x208>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d104      	bne.n	80085ba <HAL_SPI_Init+0x96>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2b10      	cmp	r3, #16
 80085b4:	d901      	bls.n	80085ba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e0af      	b.n	800871a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d106      	bne.n	80085d4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7f9 fefa 	bl	80023c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2202      	movs	r2, #2
 80085d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f022 0201 	bic.w	r2, r2, #1
 80085ea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80085f6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	699b      	ldr	r3, [r3, #24]
 80085fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008600:	d119      	bne.n	8008636 <HAL_SPI_Init+0x112>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800860a:	d103      	bne.n	8008614 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008610:	2b00      	cmp	r3, #0
 8008612:	d008      	beq.n	8008626 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10c      	bne.n	8008636 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008620:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008624:	d107      	bne.n	8008636 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008634:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	69da      	ldr	r2, [r3, #28]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863e:	431a      	orrs	r2, r3
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	431a      	orrs	r2, r3
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008648:	ea42 0103 	orr.w	r1, r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	68da      	ldr	r2, [r3, #12]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	430a      	orrs	r2, r1
 8008656:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	431a      	orrs	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008666:	431a      	orrs	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	431a      	orrs	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	431a      	orrs	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	431a      	orrs	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	431a      	orrs	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	431a      	orrs	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800868a:	431a      	orrs	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	431a      	orrs	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008696:	ea42 0103 	orr.w	r1, r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	430a      	orrs	r2, r1
 80086a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d113      	bne.n	80086d6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086c0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80086d4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f022 0201 	bic.w	r2, r2, #1
 80086e4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d00a      	beq.n	8008708 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	430a      	orrs	r2, r1
 8008706:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2200      	movs	r2, #0
 800870c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3710      	adds	r7, #16
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop
 8008724:	40013000 	.word	0x40013000
 8008728:	40003800 	.word	0x40003800
 800872c:	40003c00 	.word	0x40003c00

08008730 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008730:	b480      	push	{r7}
 8008732:	b085      	sub	sp, #20
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800873c:	095b      	lsrs	r3, r3, #5
 800873e:	3301      	adds	r3, #1
 8008740:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	3301      	adds	r3, #1
 8008748:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	3307      	adds	r3, #7
 800874e:	08db      	lsrs	r3, r3, #3
 8008750:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	fb02 f303 	mul.w	r3, r2, r3
}
 800875a:	4618      	mov	r0, r3
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d101      	bne.n	8008778 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e049      	b.n	800880c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800877e:	b2db      	uxtb	r3, r3
 8008780:	2b00      	cmp	r3, #0
 8008782:	d106      	bne.n	8008792 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f7f9 fe81 	bl	8002494 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2202      	movs	r2, #2
 8008796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	3304      	adds	r3, #4
 80087a2:	4619      	mov	r1, r3
 80087a4:	4610      	mov	r0, r2
 80087a6:	f000 fd71 	bl	800928c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2201      	movs	r2, #1
 80087ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2201      	movs	r2, #1
 80087be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2201      	movs	r2, #1
 80087c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2201      	movs	r2, #1
 80087d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2201      	movs	r2, #1
 80087f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2201      	movs	r2, #1
 80087fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b01      	cmp	r3, #1
 8008826:	d001      	beq.n	800882c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	e054      	b.n	80088d6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2202      	movs	r2, #2
 8008830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68da      	ldr	r2, [r3, #12]
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f042 0201 	orr.w	r2, r2, #1
 8008842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a26      	ldr	r2, [pc, #152]	; (80088e4 <HAL_TIM_Base_Start_IT+0xd0>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d022      	beq.n	8008894 <HAL_TIM_Base_Start_IT+0x80>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008856:	d01d      	beq.n	8008894 <HAL_TIM_Base_Start_IT+0x80>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a22      	ldr	r2, [pc, #136]	; (80088e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d018      	beq.n	8008894 <HAL_TIM_Base_Start_IT+0x80>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a21      	ldr	r2, [pc, #132]	; (80088ec <HAL_TIM_Base_Start_IT+0xd8>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d013      	beq.n	8008894 <HAL_TIM_Base_Start_IT+0x80>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a1f      	ldr	r2, [pc, #124]	; (80088f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d00e      	beq.n	8008894 <HAL_TIM_Base_Start_IT+0x80>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a1e      	ldr	r2, [pc, #120]	; (80088f4 <HAL_TIM_Base_Start_IT+0xe0>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d009      	beq.n	8008894 <HAL_TIM_Base_Start_IT+0x80>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a1c      	ldr	r2, [pc, #112]	; (80088f8 <HAL_TIM_Base_Start_IT+0xe4>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d004      	beq.n	8008894 <HAL_TIM_Base_Start_IT+0x80>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a1b      	ldr	r2, [pc, #108]	; (80088fc <HAL_TIM_Base_Start_IT+0xe8>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d115      	bne.n	80088c0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689a      	ldr	r2, [r3, #8]
 800889a:	4b19      	ldr	r3, [pc, #100]	; (8008900 <HAL_TIM_Base_Start_IT+0xec>)
 800889c:	4013      	ands	r3, r2
 800889e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2b06      	cmp	r3, #6
 80088a4:	d015      	beq.n	80088d2 <HAL_TIM_Base_Start_IT+0xbe>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ac:	d011      	beq.n	80088d2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f042 0201 	orr.w	r2, r2, #1
 80088bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088be:	e008      	b.n	80088d2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f042 0201 	orr.w	r2, r2, #1
 80088ce:	601a      	str	r2, [r3, #0]
 80088d0:	e000      	b.n	80088d4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3714      	adds	r7, #20
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	40010000 	.word	0x40010000
 80088e8:	40000400 	.word	0x40000400
 80088ec:	40000800 	.word	0x40000800
 80088f0:	40000c00 	.word	0x40000c00
 80088f4:	40010400 	.word	0x40010400
 80088f8:	40001800 	.word	0x40001800
 80088fc:	40014000 	.word	0x40014000
 8008900:	00010007 	.word	0x00010007

08008904 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e049      	b.n	80089aa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d106      	bne.n	8008930 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f841 	bl	80089b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2202      	movs	r2, #2
 8008934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	3304      	adds	r3, #4
 8008940:	4619      	mov	r1, r3
 8008942:	4610      	mov	r0, r2
 8008944:	f000 fca2 	bl	800928c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2201      	movs	r2, #1
 8008994:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b083      	sub	sp, #12
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80089ba:	bf00      	nop
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr
	...

080089c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d109      	bne.n	80089ec <HAL_TIM_PWM_Start+0x24>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	bf14      	ite	ne
 80089e4:	2301      	movne	r3, #1
 80089e6:	2300      	moveq	r3, #0
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	e03c      	b.n	8008a66 <HAL_TIM_PWM_Start+0x9e>
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	2b04      	cmp	r3, #4
 80089f0:	d109      	bne.n	8008a06 <HAL_TIM_PWM_Start+0x3e>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089f8:	b2db      	uxtb	r3, r3
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	bf14      	ite	ne
 80089fe:	2301      	movne	r3, #1
 8008a00:	2300      	moveq	r3, #0
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	e02f      	b.n	8008a66 <HAL_TIM_PWM_Start+0x9e>
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d109      	bne.n	8008a20 <HAL_TIM_PWM_Start+0x58>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	bf14      	ite	ne
 8008a18:	2301      	movne	r3, #1
 8008a1a:	2300      	moveq	r3, #0
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	e022      	b.n	8008a66 <HAL_TIM_PWM_Start+0x9e>
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b0c      	cmp	r3, #12
 8008a24:	d109      	bne.n	8008a3a <HAL_TIM_PWM_Start+0x72>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	bf14      	ite	ne
 8008a32:	2301      	movne	r3, #1
 8008a34:	2300      	moveq	r3, #0
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	e015      	b.n	8008a66 <HAL_TIM_PWM_Start+0x9e>
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	2b10      	cmp	r3, #16
 8008a3e:	d109      	bne.n	8008a54 <HAL_TIM_PWM_Start+0x8c>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	bf14      	ite	ne
 8008a4c:	2301      	movne	r3, #1
 8008a4e:	2300      	moveq	r3, #0
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	e008      	b.n	8008a66 <HAL_TIM_PWM_Start+0x9e>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	bf14      	ite	ne
 8008a60:	2301      	movne	r3, #1
 8008a62:	2300      	moveq	r3, #0
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e0a1      	b.n	8008bb2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d104      	bne.n	8008a7e <HAL_TIM_PWM_Start+0xb6>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2202      	movs	r2, #2
 8008a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a7c:	e023      	b.n	8008ac6 <HAL_TIM_PWM_Start+0xfe>
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	2b04      	cmp	r3, #4
 8008a82:	d104      	bne.n	8008a8e <HAL_TIM_PWM_Start+0xc6>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a8c:	e01b      	b.n	8008ac6 <HAL_TIM_PWM_Start+0xfe>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d104      	bne.n	8008a9e <HAL_TIM_PWM_Start+0xd6>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2202      	movs	r2, #2
 8008a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a9c:	e013      	b.n	8008ac6 <HAL_TIM_PWM_Start+0xfe>
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	2b0c      	cmp	r3, #12
 8008aa2:	d104      	bne.n	8008aae <HAL_TIM_PWM_Start+0xe6>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2202      	movs	r2, #2
 8008aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008aac:	e00b      	b.n	8008ac6 <HAL_TIM_PWM_Start+0xfe>
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	2b10      	cmp	r3, #16
 8008ab2:	d104      	bne.n	8008abe <HAL_TIM_PWM_Start+0xf6>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008abc:	e003      	b.n	8008ac6 <HAL_TIM_PWM_Start+0xfe>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	2202      	movs	r2, #2
 8008ac2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2201      	movs	r2, #1
 8008acc:	6839      	ldr	r1, [r7, #0]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 ffea 	bl	8009aa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a38      	ldr	r2, [pc, #224]	; (8008bbc <HAL_TIM_PWM_Start+0x1f4>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d013      	beq.n	8008b06 <HAL_TIM_PWM_Start+0x13e>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a37      	ldr	r2, [pc, #220]	; (8008bc0 <HAL_TIM_PWM_Start+0x1f8>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d00e      	beq.n	8008b06 <HAL_TIM_PWM_Start+0x13e>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	4a35      	ldr	r2, [pc, #212]	; (8008bc4 <HAL_TIM_PWM_Start+0x1fc>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d009      	beq.n	8008b06 <HAL_TIM_PWM_Start+0x13e>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	4a34      	ldr	r2, [pc, #208]	; (8008bc8 <HAL_TIM_PWM_Start+0x200>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d004      	beq.n	8008b06 <HAL_TIM_PWM_Start+0x13e>
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a32      	ldr	r2, [pc, #200]	; (8008bcc <HAL_TIM_PWM_Start+0x204>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d101      	bne.n	8008b0a <HAL_TIM_PWM_Start+0x142>
 8008b06:	2301      	movs	r3, #1
 8008b08:	e000      	b.n	8008b0c <HAL_TIM_PWM_Start+0x144>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d007      	beq.n	8008b20 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b1e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a25      	ldr	r2, [pc, #148]	; (8008bbc <HAL_TIM_PWM_Start+0x1f4>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d022      	beq.n	8008b70 <HAL_TIM_PWM_Start+0x1a8>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b32:	d01d      	beq.n	8008b70 <HAL_TIM_PWM_Start+0x1a8>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a25      	ldr	r2, [pc, #148]	; (8008bd0 <HAL_TIM_PWM_Start+0x208>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d018      	beq.n	8008b70 <HAL_TIM_PWM_Start+0x1a8>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a24      	ldr	r2, [pc, #144]	; (8008bd4 <HAL_TIM_PWM_Start+0x20c>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d013      	beq.n	8008b70 <HAL_TIM_PWM_Start+0x1a8>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a22      	ldr	r2, [pc, #136]	; (8008bd8 <HAL_TIM_PWM_Start+0x210>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d00e      	beq.n	8008b70 <HAL_TIM_PWM_Start+0x1a8>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a1a      	ldr	r2, [pc, #104]	; (8008bc0 <HAL_TIM_PWM_Start+0x1f8>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d009      	beq.n	8008b70 <HAL_TIM_PWM_Start+0x1a8>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a1e      	ldr	r2, [pc, #120]	; (8008bdc <HAL_TIM_PWM_Start+0x214>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d004      	beq.n	8008b70 <HAL_TIM_PWM_Start+0x1a8>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a16      	ldr	r2, [pc, #88]	; (8008bc4 <HAL_TIM_PWM_Start+0x1fc>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d115      	bne.n	8008b9c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689a      	ldr	r2, [r3, #8]
 8008b76:	4b1a      	ldr	r3, [pc, #104]	; (8008be0 <HAL_TIM_PWM_Start+0x218>)
 8008b78:	4013      	ands	r3, r2
 8008b7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	2b06      	cmp	r3, #6
 8008b80:	d015      	beq.n	8008bae <HAL_TIM_PWM_Start+0x1e6>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b88:	d011      	beq.n	8008bae <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f042 0201 	orr.w	r2, r2, #1
 8008b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b9a:	e008      	b.n	8008bae <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f042 0201 	orr.w	r2, r2, #1
 8008baa:	601a      	str	r2, [r3, #0]
 8008bac:	e000      	b.n	8008bb0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	40010000 	.word	0x40010000
 8008bc0:	40010400 	.word	0x40010400
 8008bc4:	40014000 	.word	0x40014000
 8008bc8:	40014400 	.word	0x40014400
 8008bcc:	40014800 	.word	0x40014800
 8008bd0:	40000400 	.word	0x40000400
 8008bd4:	40000800 	.word	0x40000800
 8008bd8:	40000c00 	.word	0x40000c00
 8008bdc:	40001800 	.word	0x40001800
 8008be0:	00010007 	.word	0x00010007

08008be4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b082      	sub	sp, #8
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	691b      	ldr	r3, [r3, #16]
 8008bf2:	f003 0302 	and.w	r3, r3, #2
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d122      	bne.n	8008c40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d11b      	bne.n	8008c40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f06f 0202 	mvn.w	r2, #2
 8008c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2201      	movs	r2, #1
 8008c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	699b      	ldr	r3, [r3, #24]
 8008c1e:	f003 0303 	and.w	r3, r3, #3
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d003      	beq.n	8008c2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fb12 	bl	8009250 <HAL_TIM_IC_CaptureCallback>
 8008c2c:	e005      	b.n	8008c3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fb04 	bl	800923c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fb15 	bl	8009264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b04      	cmp	r3, #4
 8008c4c:	d122      	bne.n	8008c94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d11b      	bne.n	8008c94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f06f 0204 	mvn.w	r2, #4
 8008c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2202      	movs	r2, #2
 8008c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fae8 	bl	8009250 <HAL_TIM_IC_CaptureCallback>
 8008c80:	e005      	b.n	8008c8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fada 	bl	800923c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 faeb 	bl	8009264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	f003 0308 	and.w	r3, r3, #8
 8008c9e:	2b08      	cmp	r3, #8
 8008ca0:	d122      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f003 0308 	and.w	r3, r3, #8
 8008cac:	2b08      	cmp	r3, #8
 8008cae:	d11b      	bne.n	8008ce8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f06f 0208 	mvn.w	r2, #8
 8008cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2204      	movs	r2, #4
 8008cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fabe 	bl	8009250 <HAL_TIM_IC_CaptureCallback>
 8008cd4:	e005      	b.n	8008ce2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fab0 	bl	800923c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fac1 	bl	8009264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	f003 0310 	and.w	r3, r3, #16
 8008cf2:	2b10      	cmp	r3, #16
 8008cf4:	d122      	bne.n	8008d3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	f003 0310 	and.w	r3, r3, #16
 8008d00:	2b10      	cmp	r3, #16
 8008d02:	d11b      	bne.n	8008d3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f06f 0210 	mvn.w	r2, #16
 8008d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2208      	movs	r2, #8
 8008d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	69db      	ldr	r3, [r3, #28]
 8008d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fa94 	bl	8009250 <HAL_TIM_IC_CaptureCallback>
 8008d28:	e005      	b.n	8008d36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fa86 	bl	800923c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fa97 	bl	8009264 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	691b      	ldr	r3, [r3, #16]
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d10e      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	f003 0301 	and.w	r3, r3, #1
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d107      	bne.n	8008d68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f06f 0201 	mvn.w	r2, #1
 8008d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7f8 f8a4 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d72:	2b80      	cmp	r3, #128	; 0x80
 8008d74:	d10e      	bne.n	8008d94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d80:	2b80      	cmp	r3, #128	; 0x80
 8008d82:	d107      	bne.n	8008d94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 ffc6 	bl	8009d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008da2:	d10e      	bne.n	8008dc2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dae:	2b80      	cmp	r3, #128	; 0x80
 8008db0:	d107      	bne.n	8008dc2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008dba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 ffb9 	bl	8009d34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	691b      	ldr	r3, [r3, #16]
 8008dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dcc:	2b40      	cmp	r3, #64	; 0x40
 8008dce:	d10e      	bne.n	8008dee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dda:	2b40      	cmp	r3, #64	; 0x40
 8008ddc:	d107      	bne.n	8008dee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fa45 	bl	8009278 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	f003 0320 	and.w	r3, r3, #32
 8008df8:	2b20      	cmp	r3, #32
 8008dfa:	d10e      	bne.n	8008e1a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f003 0320 	and.w	r3, r3, #32
 8008e06:	2b20      	cmp	r3, #32
 8008e08:	d107      	bne.n	8008e1a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f06f 0220 	mvn.w	r2, #32
 8008e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 ff79 	bl	8009d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e1a:	bf00      	nop
 8008e1c:	3708      	adds	r7, #8
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
	...

08008e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d101      	bne.n	8008e42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e0ff      	b.n	8009042 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	2b14      	cmp	r3, #20
 8008e4e:	f200 80f0 	bhi.w	8009032 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008e52:	a201      	add	r2, pc, #4	; (adr r2, 8008e58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e58:	08008ead 	.word	0x08008ead
 8008e5c:	08009033 	.word	0x08009033
 8008e60:	08009033 	.word	0x08009033
 8008e64:	08009033 	.word	0x08009033
 8008e68:	08008eed 	.word	0x08008eed
 8008e6c:	08009033 	.word	0x08009033
 8008e70:	08009033 	.word	0x08009033
 8008e74:	08009033 	.word	0x08009033
 8008e78:	08008f2f 	.word	0x08008f2f
 8008e7c:	08009033 	.word	0x08009033
 8008e80:	08009033 	.word	0x08009033
 8008e84:	08009033 	.word	0x08009033
 8008e88:	08008f6f 	.word	0x08008f6f
 8008e8c:	08009033 	.word	0x08009033
 8008e90:	08009033 	.word	0x08009033
 8008e94:	08009033 	.word	0x08009033
 8008e98:	08008fb1 	.word	0x08008fb1
 8008e9c:	08009033 	.word	0x08009033
 8008ea0:	08009033 	.word	0x08009033
 8008ea4:	08009033 	.word	0x08009033
 8008ea8:	08008ff1 	.word	0x08008ff1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68b9      	ldr	r1, [r7, #8]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f000 fa84 	bl	80093c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	699a      	ldr	r2, [r3, #24]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f042 0208 	orr.w	r2, r2, #8
 8008ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	699a      	ldr	r2, [r3, #24]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f022 0204 	bic.w	r2, r2, #4
 8008ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	6999      	ldr	r1, [r3, #24]
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	691a      	ldr	r2, [r3, #16]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	430a      	orrs	r2, r1
 8008ee8:	619a      	str	r2, [r3, #24]
      break;
 8008eea:	e0a5      	b.n	8009038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68b9      	ldr	r1, [r7, #8]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 faf4 	bl	80094e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	699a      	ldr	r2, [r3, #24]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	699a      	ldr	r2, [r3, #24]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6999      	ldr	r1, [r3, #24]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	021a      	lsls	r2, r3, #8
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	619a      	str	r2, [r3, #24]
      break;
 8008f2c:	e084      	b.n	8009038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68b9      	ldr	r1, [r7, #8]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f000 fb5d 	bl	80095f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	69da      	ldr	r2, [r3, #28]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f042 0208 	orr.w	r2, r2, #8
 8008f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	69da      	ldr	r2, [r3, #28]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f022 0204 	bic.w	r2, r2, #4
 8008f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	69d9      	ldr	r1, [r3, #28]
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	691a      	ldr	r2, [r3, #16]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	430a      	orrs	r2, r1
 8008f6a:	61da      	str	r2, [r3, #28]
      break;
 8008f6c:	e064      	b.n	8009038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68b9      	ldr	r1, [r7, #8]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 fbc5 	bl	8009704 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	69da      	ldr	r2, [r3, #28]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69da      	ldr	r2, [r3, #28]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	69d9      	ldr	r1, [r3, #28]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	691b      	ldr	r3, [r3, #16]
 8008fa4:	021a      	lsls	r2, r3, #8
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	430a      	orrs	r2, r1
 8008fac:	61da      	str	r2, [r3, #28]
      break;
 8008fae:	e043      	b.n	8009038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	68b9      	ldr	r1, [r7, #8]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 fc0e 	bl	80097d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f042 0208 	orr.w	r2, r2, #8
 8008fca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f022 0204 	bic.w	r2, r2, #4
 8008fda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	691a      	ldr	r2, [r3, #16]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008fee:	e023      	b.n	8009038 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68b9      	ldr	r1, [r7, #8]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 fc52 	bl	80098a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800900a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800901a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	021a      	lsls	r2, r3, #8
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	430a      	orrs	r2, r1
 800902e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009030:	e002      	b.n	8009038 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009032:	2301      	movs	r3, #1
 8009034:	75fb      	strb	r3, [r7, #23]
      break;
 8009036:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	2200      	movs	r2, #0
 800903c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009040:	7dfb      	ldrb	r3, [r7, #23]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3718      	adds	r7, #24
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop

0800904c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009056:	2300      	movs	r3, #0
 8009058:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009060:	2b01      	cmp	r3, #1
 8009062:	d101      	bne.n	8009068 <HAL_TIM_ConfigClockSource+0x1c>
 8009064:	2302      	movs	r3, #2
 8009066:	e0dc      	b.n	8009222 <HAL_TIM_ConfigClockSource+0x1d6>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2202      	movs	r2, #2
 8009074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009080:	68ba      	ldr	r2, [r7, #8]
 8009082:	4b6a      	ldr	r3, [pc, #424]	; (800922c <HAL_TIM_ConfigClockSource+0x1e0>)
 8009084:	4013      	ands	r3, r2
 8009086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800908e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a64      	ldr	r2, [pc, #400]	; (8009230 <HAL_TIM_ConfigClockSource+0x1e4>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	f000 80a9 	beq.w	80091f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80090a4:	4a62      	ldr	r2, [pc, #392]	; (8009230 <HAL_TIM_ConfigClockSource+0x1e4>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	f200 80ae 	bhi.w	8009208 <HAL_TIM_ConfigClockSource+0x1bc>
 80090ac:	4a61      	ldr	r2, [pc, #388]	; (8009234 <HAL_TIM_ConfigClockSource+0x1e8>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	f000 80a1 	beq.w	80091f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80090b4:	4a5f      	ldr	r2, [pc, #380]	; (8009234 <HAL_TIM_ConfigClockSource+0x1e8>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	f200 80a6 	bhi.w	8009208 <HAL_TIM_ConfigClockSource+0x1bc>
 80090bc:	4a5e      	ldr	r2, [pc, #376]	; (8009238 <HAL_TIM_ConfigClockSource+0x1ec>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	f000 8099 	beq.w	80091f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80090c4:	4a5c      	ldr	r2, [pc, #368]	; (8009238 <HAL_TIM_ConfigClockSource+0x1ec>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	f200 809e 	bhi.w	8009208 <HAL_TIM_ConfigClockSource+0x1bc>
 80090cc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80090d0:	f000 8091 	beq.w	80091f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80090d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80090d8:	f200 8096 	bhi.w	8009208 <HAL_TIM_ConfigClockSource+0x1bc>
 80090dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090e0:	f000 8089 	beq.w	80091f6 <HAL_TIM_ConfigClockSource+0x1aa>
 80090e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090e8:	f200 808e 	bhi.w	8009208 <HAL_TIM_ConfigClockSource+0x1bc>
 80090ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090f0:	d03e      	beq.n	8009170 <HAL_TIM_ConfigClockSource+0x124>
 80090f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090f6:	f200 8087 	bhi.w	8009208 <HAL_TIM_ConfigClockSource+0x1bc>
 80090fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090fe:	f000 8086 	beq.w	800920e <HAL_TIM_ConfigClockSource+0x1c2>
 8009102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009106:	d87f      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x1bc>
 8009108:	2b70      	cmp	r3, #112	; 0x70
 800910a:	d01a      	beq.n	8009142 <HAL_TIM_ConfigClockSource+0xf6>
 800910c:	2b70      	cmp	r3, #112	; 0x70
 800910e:	d87b      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x1bc>
 8009110:	2b60      	cmp	r3, #96	; 0x60
 8009112:	d050      	beq.n	80091b6 <HAL_TIM_ConfigClockSource+0x16a>
 8009114:	2b60      	cmp	r3, #96	; 0x60
 8009116:	d877      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x1bc>
 8009118:	2b50      	cmp	r3, #80	; 0x50
 800911a:	d03c      	beq.n	8009196 <HAL_TIM_ConfigClockSource+0x14a>
 800911c:	2b50      	cmp	r3, #80	; 0x50
 800911e:	d873      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x1bc>
 8009120:	2b40      	cmp	r3, #64	; 0x40
 8009122:	d058      	beq.n	80091d6 <HAL_TIM_ConfigClockSource+0x18a>
 8009124:	2b40      	cmp	r3, #64	; 0x40
 8009126:	d86f      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x1bc>
 8009128:	2b30      	cmp	r3, #48	; 0x30
 800912a:	d064      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800912c:	2b30      	cmp	r3, #48	; 0x30
 800912e:	d86b      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x1bc>
 8009130:	2b20      	cmp	r3, #32
 8009132:	d060      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009134:	2b20      	cmp	r3, #32
 8009136:	d867      	bhi.n	8009208 <HAL_TIM_ConfigClockSource+0x1bc>
 8009138:	2b00      	cmp	r3, #0
 800913a:	d05c      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800913c:	2b10      	cmp	r3, #16
 800913e:	d05a      	beq.n	80091f6 <HAL_TIM_ConfigClockSource+0x1aa>
 8009140:	e062      	b.n	8009208 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6818      	ldr	r0, [r3, #0]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	6899      	ldr	r1, [r3, #8]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f000 fc89 	bl	8009a68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	689b      	ldr	r3, [r3, #8]
 800915c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	609a      	str	r2, [r3, #8]
      break;
 800916e:	e04f      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6818      	ldr	r0, [r3, #0]
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	6899      	ldr	r1, [r3, #8]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	f000 fc72 	bl	8009a68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	689a      	ldr	r2, [r3, #8]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009192:	609a      	str	r2, [r3, #8]
      break;
 8009194:	e03c      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	6859      	ldr	r1, [r3, #4]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	461a      	mov	r2, r3
 80091a4:	f000 fbe2 	bl	800996c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2150      	movs	r1, #80	; 0x50
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 fc3c 	bl	8009a2c <TIM_ITRx_SetConfig>
      break;
 80091b4:	e02c      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6818      	ldr	r0, [r3, #0]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	6859      	ldr	r1, [r3, #4]
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	461a      	mov	r2, r3
 80091c4:	f000 fc01 	bl	80099ca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2160      	movs	r1, #96	; 0x60
 80091ce:	4618      	mov	r0, r3
 80091d0:	f000 fc2c 	bl	8009a2c <TIM_ITRx_SetConfig>
      break;
 80091d4:	e01c      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	6859      	ldr	r1, [r3, #4]
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	461a      	mov	r2, r3
 80091e4:	f000 fbc2 	bl	800996c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2140      	movs	r1, #64	; 0x40
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 fc1c 	bl	8009a2c <TIM_ITRx_SetConfig>
      break;
 80091f4:	e00c      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4619      	mov	r1, r3
 8009200:	4610      	mov	r0, r2
 8009202:	f000 fc13 	bl	8009a2c <TIM_ITRx_SetConfig>
      break;
 8009206:	e003      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009208:	2301      	movs	r3, #1
 800920a:	73fb      	strb	r3, [r7, #15]
      break;
 800920c:	e000      	b.n	8009210 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800920e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009220:	7bfb      	ldrb	r3, [r7, #15]
}
 8009222:	4618      	mov	r0, r3
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	ffceff88 	.word	0xffceff88
 8009230:	00100040 	.word	0x00100040
 8009234:	00100030 	.word	0x00100030
 8009238:	00100020 	.word	0x00100020

0800923c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a40      	ldr	r2, [pc, #256]	; (80093a0 <TIM_Base_SetConfig+0x114>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d013      	beq.n	80092cc <TIM_Base_SetConfig+0x40>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092aa:	d00f      	beq.n	80092cc <TIM_Base_SetConfig+0x40>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a3d      	ldr	r2, [pc, #244]	; (80093a4 <TIM_Base_SetConfig+0x118>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d00b      	beq.n	80092cc <TIM_Base_SetConfig+0x40>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a3c      	ldr	r2, [pc, #240]	; (80093a8 <TIM_Base_SetConfig+0x11c>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d007      	beq.n	80092cc <TIM_Base_SetConfig+0x40>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a3b      	ldr	r2, [pc, #236]	; (80093ac <TIM_Base_SetConfig+0x120>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d003      	beq.n	80092cc <TIM_Base_SetConfig+0x40>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4a3a      	ldr	r2, [pc, #232]	; (80093b0 <TIM_Base_SetConfig+0x124>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d108      	bne.n	80092de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	68fa      	ldr	r2, [r7, #12]
 80092da:	4313      	orrs	r3, r2
 80092dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a2f      	ldr	r2, [pc, #188]	; (80093a0 <TIM_Base_SetConfig+0x114>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d01f      	beq.n	8009326 <TIM_Base_SetConfig+0x9a>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092ec:	d01b      	beq.n	8009326 <TIM_Base_SetConfig+0x9a>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a2c      	ldr	r2, [pc, #176]	; (80093a4 <TIM_Base_SetConfig+0x118>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d017      	beq.n	8009326 <TIM_Base_SetConfig+0x9a>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a2b      	ldr	r2, [pc, #172]	; (80093a8 <TIM_Base_SetConfig+0x11c>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d013      	beq.n	8009326 <TIM_Base_SetConfig+0x9a>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a2a      	ldr	r2, [pc, #168]	; (80093ac <TIM_Base_SetConfig+0x120>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d00f      	beq.n	8009326 <TIM_Base_SetConfig+0x9a>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a29      	ldr	r2, [pc, #164]	; (80093b0 <TIM_Base_SetConfig+0x124>)
 800930a:	4293      	cmp	r3, r2
 800930c:	d00b      	beq.n	8009326 <TIM_Base_SetConfig+0x9a>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a28      	ldr	r2, [pc, #160]	; (80093b4 <TIM_Base_SetConfig+0x128>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d007      	beq.n	8009326 <TIM_Base_SetConfig+0x9a>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a27      	ldr	r2, [pc, #156]	; (80093b8 <TIM_Base_SetConfig+0x12c>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d003      	beq.n	8009326 <TIM_Base_SetConfig+0x9a>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a26      	ldr	r2, [pc, #152]	; (80093bc <TIM_Base_SetConfig+0x130>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d108      	bne.n	8009338 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800932c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	4313      	orrs	r3, r2
 8009336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	4313      	orrs	r3, r2
 8009344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	689a      	ldr	r2, [r3, #8]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4a10      	ldr	r2, [pc, #64]	; (80093a0 <TIM_Base_SetConfig+0x114>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d00f      	beq.n	8009384 <TIM_Base_SetConfig+0xf8>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4a12      	ldr	r2, [pc, #72]	; (80093b0 <TIM_Base_SetConfig+0x124>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d00b      	beq.n	8009384 <TIM_Base_SetConfig+0xf8>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a11      	ldr	r2, [pc, #68]	; (80093b4 <TIM_Base_SetConfig+0x128>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d007      	beq.n	8009384 <TIM_Base_SetConfig+0xf8>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a10      	ldr	r2, [pc, #64]	; (80093b8 <TIM_Base_SetConfig+0x12c>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d003      	beq.n	8009384 <TIM_Base_SetConfig+0xf8>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a0f      	ldr	r2, [pc, #60]	; (80093bc <TIM_Base_SetConfig+0x130>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d103      	bne.n	800938c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	691a      	ldr	r2, [r3, #16]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	615a      	str	r2, [r3, #20]
}
 8009392:	bf00      	nop
 8009394:	3714      	adds	r7, #20
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	40010000 	.word	0x40010000
 80093a4:	40000400 	.word	0x40000400
 80093a8:	40000800 	.word	0x40000800
 80093ac:	40000c00 	.word	0x40000c00
 80093b0:	40010400 	.word	0x40010400
 80093b4:	40014000 	.word	0x40014000
 80093b8:	40014400 	.word	0x40014400
 80093bc:	40014800 	.word	0x40014800

080093c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b087      	sub	sp, #28
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	f023 0201 	bic.w	r2, r3, #1
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a1b      	ldr	r3, [r3, #32]
 80093da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	4b37      	ldr	r3, [pc, #220]	; (80094c8 <TIM_OC1_SetConfig+0x108>)
 80093ec:	4013      	ands	r3, r2
 80093ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f023 0303 	bic.w	r3, r3, #3
 80093f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	4313      	orrs	r3, r2
 8009400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	f023 0302 	bic.w	r3, r3, #2
 8009408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	689b      	ldr	r3, [r3, #8]
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	4313      	orrs	r3, r2
 8009412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a2d      	ldr	r2, [pc, #180]	; (80094cc <TIM_OC1_SetConfig+0x10c>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d00f      	beq.n	800943c <TIM_OC1_SetConfig+0x7c>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	4a2c      	ldr	r2, [pc, #176]	; (80094d0 <TIM_OC1_SetConfig+0x110>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d00b      	beq.n	800943c <TIM_OC1_SetConfig+0x7c>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	4a2b      	ldr	r2, [pc, #172]	; (80094d4 <TIM_OC1_SetConfig+0x114>)
 8009428:	4293      	cmp	r3, r2
 800942a:	d007      	beq.n	800943c <TIM_OC1_SetConfig+0x7c>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4a2a      	ldr	r2, [pc, #168]	; (80094d8 <TIM_OC1_SetConfig+0x118>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d003      	beq.n	800943c <TIM_OC1_SetConfig+0x7c>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4a29      	ldr	r2, [pc, #164]	; (80094dc <TIM_OC1_SetConfig+0x11c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d10c      	bne.n	8009456 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f023 0308 	bic.w	r3, r3, #8
 8009442:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	4313      	orrs	r3, r2
 800944c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800944e:	697b      	ldr	r3, [r7, #20]
 8009450:	f023 0304 	bic.w	r3, r3, #4
 8009454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a1c      	ldr	r2, [pc, #112]	; (80094cc <TIM_OC1_SetConfig+0x10c>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d00f      	beq.n	800947e <TIM_OC1_SetConfig+0xbe>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a1b      	ldr	r2, [pc, #108]	; (80094d0 <TIM_OC1_SetConfig+0x110>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d00b      	beq.n	800947e <TIM_OC1_SetConfig+0xbe>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a1a      	ldr	r2, [pc, #104]	; (80094d4 <TIM_OC1_SetConfig+0x114>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d007      	beq.n	800947e <TIM_OC1_SetConfig+0xbe>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a19      	ldr	r2, [pc, #100]	; (80094d8 <TIM_OC1_SetConfig+0x118>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d003      	beq.n	800947e <TIM_OC1_SetConfig+0xbe>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a18      	ldr	r2, [pc, #96]	; (80094dc <TIM_OC1_SetConfig+0x11c>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d111      	bne.n	80094a2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009484:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800948c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	695b      	ldr	r3, [r3, #20]
 8009492:	693a      	ldr	r2, [r7, #16]
 8009494:	4313      	orrs	r3, r2
 8009496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	693a      	ldr	r2, [r7, #16]
 800949e:	4313      	orrs	r3, r2
 80094a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	693a      	ldr	r2, [r7, #16]
 80094a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	68fa      	ldr	r2, [r7, #12]
 80094ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	685a      	ldr	r2, [r3, #4]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	621a      	str	r2, [r3, #32]
}
 80094bc:	bf00      	nop
 80094be:	371c      	adds	r7, #28
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	fffeff8f 	.word	0xfffeff8f
 80094cc:	40010000 	.word	0x40010000
 80094d0:	40010400 	.word	0x40010400
 80094d4:	40014000 	.word	0x40014000
 80094d8:	40014400 	.word	0x40014400
 80094dc:	40014800 	.word	0x40014800

080094e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b087      	sub	sp, #28
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6a1b      	ldr	r3, [r3, #32]
 80094ee:	f023 0210 	bic.w	r2, r3, #16
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	4b34      	ldr	r3, [pc, #208]	; (80095dc <TIM_OC2_SetConfig+0xfc>)
 800950c:	4013      	ands	r3, r2
 800950e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009516:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	021b      	lsls	r3, r3, #8
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	4313      	orrs	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	f023 0320 	bic.w	r3, r3, #32
 800952a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	011b      	lsls	r3, r3, #4
 8009532:	697a      	ldr	r2, [r7, #20]
 8009534:	4313      	orrs	r3, r2
 8009536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a29      	ldr	r2, [pc, #164]	; (80095e0 <TIM_OC2_SetConfig+0x100>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d003      	beq.n	8009548 <TIM_OC2_SetConfig+0x68>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	4a28      	ldr	r2, [pc, #160]	; (80095e4 <TIM_OC2_SetConfig+0x104>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d10d      	bne.n	8009564 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800954e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	68db      	ldr	r3, [r3, #12]
 8009554:	011b      	lsls	r3, r3, #4
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	4313      	orrs	r3, r2
 800955a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009562:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a1e      	ldr	r2, [pc, #120]	; (80095e0 <TIM_OC2_SetConfig+0x100>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d00f      	beq.n	800958c <TIM_OC2_SetConfig+0xac>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a1d      	ldr	r2, [pc, #116]	; (80095e4 <TIM_OC2_SetConfig+0x104>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d00b      	beq.n	800958c <TIM_OC2_SetConfig+0xac>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a1c      	ldr	r2, [pc, #112]	; (80095e8 <TIM_OC2_SetConfig+0x108>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d007      	beq.n	800958c <TIM_OC2_SetConfig+0xac>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a1b      	ldr	r2, [pc, #108]	; (80095ec <TIM_OC2_SetConfig+0x10c>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d003      	beq.n	800958c <TIM_OC2_SetConfig+0xac>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	4a1a      	ldr	r2, [pc, #104]	; (80095f0 <TIM_OC2_SetConfig+0x110>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d113      	bne.n	80095b4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800959a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	695b      	ldr	r3, [r3, #20]
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	693a      	ldr	r2, [r7, #16]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	697a      	ldr	r2, [r7, #20]
 80095cc:	621a      	str	r2, [r3, #32]
}
 80095ce:	bf00      	nop
 80095d0:	371c      	adds	r7, #28
 80095d2:	46bd      	mov	sp, r7
 80095d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d8:	4770      	bx	lr
 80095da:	bf00      	nop
 80095dc:	feff8fff 	.word	0xfeff8fff
 80095e0:	40010000 	.word	0x40010000
 80095e4:	40010400 	.word	0x40010400
 80095e8:	40014000 	.word	0x40014000
 80095ec:	40014400 	.word	0x40014400
 80095f0:	40014800 	.word	0x40014800

080095f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b087      	sub	sp, #28
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a1b      	ldr	r3, [r3, #32]
 8009602:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	69db      	ldr	r3, [r3, #28]
 800961a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	4b33      	ldr	r3, [pc, #204]	; (80096ec <TIM_OC3_SetConfig+0xf8>)
 8009620:	4013      	ands	r3, r2
 8009622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f023 0303 	bic.w	r3, r3, #3
 800962a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	4313      	orrs	r3, r2
 8009634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800963c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	021b      	lsls	r3, r3, #8
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	4313      	orrs	r3, r2
 8009648:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a28      	ldr	r2, [pc, #160]	; (80096f0 <TIM_OC3_SetConfig+0xfc>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d003      	beq.n	800965a <TIM_OC3_SetConfig+0x66>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a27      	ldr	r2, [pc, #156]	; (80096f4 <TIM_OC3_SetConfig+0x100>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d10d      	bne.n	8009676 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009660:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	021b      	lsls	r3, r3, #8
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	4313      	orrs	r3, r2
 800966c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a1d      	ldr	r2, [pc, #116]	; (80096f0 <TIM_OC3_SetConfig+0xfc>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d00f      	beq.n	800969e <TIM_OC3_SetConfig+0xaa>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a1c      	ldr	r2, [pc, #112]	; (80096f4 <TIM_OC3_SetConfig+0x100>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d00b      	beq.n	800969e <TIM_OC3_SetConfig+0xaa>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a1b      	ldr	r2, [pc, #108]	; (80096f8 <TIM_OC3_SetConfig+0x104>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d007      	beq.n	800969e <TIM_OC3_SetConfig+0xaa>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a1a      	ldr	r2, [pc, #104]	; (80096fc <TIM_OC3_SetConfig+0x108>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d003      	beq.n	800969e <TIM_OC3_SetConfig+0xaa>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a19      	ldr	r2, [pc, #100]	; (8009700 <TIM_OC3_SetConfig+0x10c>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d113      	bne.n	80096c6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80096a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80096ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	011b      	lsls	r3, r3, #4
 80096b4:	693a      	ldr	r2, [r7, #16]
 80096b6:	4313      	orrs	r3, r2
 80096b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	011b      	lsls	r3, r3, #4
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	693a      	ldr	r2, [r7, #16]
 80096ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68fa      	ldr	r2, [r7, #12]
 80096d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	685a      	ldr	r2, [r3, #4]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	697a      	ldr	r2, [r7, #20]
 80096de:	621a      	str	r2, [r3, #32]
}
 80096e0:	bf00      	nop
 80096e2:	371c      	adds	r7, #28
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr
 80096ec:	fffeff8f 	.word	0xfffeff8f
 80096f0:	40010000 	.word	0x40010000
 80096f4:	40010400 	.word	0x40010400
 80096f8:	40014000 	.word	0x40014000
 80096fc:	40014400 	.word	0x40014400
 8009700:	40014800 	.word	0x40014800

08009704 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	69db      	ldr	r3, [r3, #28]
 800972a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	4b24      	ldr	r3, [pc, #144]	; (80097c0 <TIM_OC4_SetConfig+0xbc>)
 8009730:	4013      	ands	r3, r2
 8009732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800973a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	021b      	lsls	r3, r3, #8
 8009742:	68fa      	ldr	r2, [r7, #12]
 8009744:	4313      	orrs	r3, r2
 8009746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800974e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	031b      	lsls	r3, r3, #12
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	4313      	orrs	r3, r2
 800975a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a19      	ldr	r2, [pc, #100]	; (80097c4 <TIM_OC4_SetConfig+0xc0>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d00f      	beq.n	8009784 <TIM_OC4_SetConfig+0x80>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4a18      	ldr	r2, [pc, #96]	; (80097c8 <TIM_OC4_SetConfig+0xc4>)
 8009768:	4293      	cmp	r3, r2
 800976a:	d00b      	beq.n	8009784 <TIM_OC4_SetConfig+0x80>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a17      	ldr	r2, [pc, #92]	; (80097cc <TIM_OC4_SetConfig+0xc8>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d007      	beq.n	8009784 <TIM_OC4_SetConfig+0x80>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a16      	ldr	r2, [pc, #88]	; (80097d0 <TIM_OC4_SetConfig+0xcc>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d003      	beq.n	8009784 <TIM_OC4_SetConfig+0x80>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a15      	ldr	r2, [pc, #84]	; (80097d4 <TIM_OC4_SetConfig+0xd0>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d109      	bne.n	8009798 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800978a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	695b      	ldr	r3, [r3, #20]
 8009790:	019b      	lsls	r3, r3, #6
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	4313      	orrs	r3, r2
 8009796:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	697a      	ldr	r2, [r7, #20]
 800979c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	693a      	ldr	r2, [r7, #16]
 80097b0:	621a      	str	r2, [r3, #32]
}
 80097b2:	bf00      	nop
 80097b4:	371c      	adds	r7, #28
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	feff8fff 	.word	0xfeff8fff
 80097c4:	40010000 	.word	0x40010000
 80097c8:	40010400 	.word	0x40010400
 80097cc:	40014000 	.word	0x40014000
 80097d0:	40014400 	.word	0x40014400
 80097d4:	40014800 	.word	0x40014800

080097d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80097d8:	b480      	push	{r7}
 80097da:	b087      	sub	sp, #28
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a1b      	ldr	r3, [r3, #32]
 80097e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	4b21      	ldr	r3, [pc, #132]	; (8009888 <TIM_OC5_SetConfig+0xb0>)
 8009804:	4013      	ands	r3, r2
 8009806:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	4313      	orrs	r3, r2
 8009810:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009818:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	689b      	ldr	r3, [r3, #8]
 800981e:	041b      	lsls	r3, r3, #16
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	4313      	orrs	r3, r2
 8009824:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4a18      	ldr	r2, [pc, #96]	; (800988c <TIM_OC5_SetConfig+0xb4>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d00f      	beq.n	800984e <TIM_OC5_SetConfig+0x76>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a17      	ldr	r2, [pc, #92]	; (8009890 <TIM_OC5_SetConfig+0xb8>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d00b      	beq.n	800984e <TIM_OC5_SetConfig+0x76>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a16      	ldr	r2, [pc, #88]	; (8009894 <TIM_OC5_SetConfig+0xbc>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d007      	beq.n	800984e <TIM_OC5_SetConfig+0x76>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a15      	ldr	r2, [pc, #84]	; (8009898 <TIM_OC5_SetConfig+0xc0>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d003      	beq.n	800984e <TIM_OC5_SetConfig+0x76>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a14      	ldr	r2, [pc, #80]	; (800989c <TIM_OC5_SetConfig+0xc4>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d109      	bne.n	8009862 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009854:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	695b      	ldr	r3, [r3, #20]
 800985a:	021b      	lsls	r3, r3, #8
 800985c:	697a      	ldr	r2, [r7, #20]
 800985e:	4313      	orrs	r3, r2
 8009860:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	697a      	ldr	r2, [r7, #20]
 8009866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	685a      	ldr	r2, [r3, #4]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	693a      	ldr	r2, [r7, #16]
 800987a:	621a      	str	r2, [r3, #32]
}
 800987c:	bf00      	nop
 800987e:	371c      	adds	r7, #28
 8009880:	46bd      	mov	sp, r7
 8009882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009886:	4770      	bx	lr
 8009888:	fffeff8f 	.word	0xfffeff8f
 800988c:	40010000 	.word	0x40010000
 8009890:	40010400 	.word	0x40010400
 8009894:	40014000 	.word	0x40014000
 8009898:	40014400 	.word	0x40014400
 800989c:	40014800 	.word	0x40014800

080098a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b087      	sub	sp, #28
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a1b      	ldr	r3, [r3, #32]
 80098ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a1b      	ldr	r3, [r3, #32]
 80098ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80098c8:	68fa      	ldr	r2, [r7, #12]
 80098ca:	4b22      	ldr	r3, [pc, #136]	; (8009954 <TIM_OC6_SetConfig+0xb4>)
 80098cc:	4013      	ands	r3, r2
 80098ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	021b      	lsls	r3, r3, #8
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	4313      	orrs	r3, r2
 80098da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80098e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	689b      	ldr	r3, [r3, #8]
 80098e8:	051b      	lsls	r3, r3, #20
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4a19      	ldr	r2, [pc, #100]	; (8009958 <TIM_OC6_SetConfig+0xb8>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d00f      	beq.n	8009918 <TIM_OC6_SetConfig+0x78>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4a18      	ldr	r2, [pc, #96]	; (800995c <TIM_OC6_SetConfig+0xbc>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d00b      	beq.n	8009918 <TIM_OC6_SetConfig+0x78>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	4a17      	ldr	r2, [pc, #92]	; (8009960 <TIM_OC6_SetConfig+0xc0>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d007      	beq.n	8009918 <TIM_OC6_SetConfig+0x78>
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	4a16      	ldr	r2, [pc, #88]	; (8009964 <TIM_OC6_SetConfig+0xc4>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d003      	beq.n	8009918 <TIM_OC6_SetConfig+0x78>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a15      	ldr	r2, [pc, #84]	; (8009968 <TIM_OC6_SetConfig+0xc8>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d109      	bne.n	800992c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800991e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	695b      	ldr	r3, [r3, #20]
 8009924:	029b      	lsls	r3, r3, #10
 8009926:	697a      	ldr	r2, [r7, #20]
 8009928:	4313      	orrs	r3, r2
 800992a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	697a      	ldr	r2, [r7, #20]
 8009930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	685a      	ldr	r2, [r3, #4]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	621a      	str	r2, [r3, #32]
}
 8009946:	bf00      	nop
 8009948:	371c      	adds	r7, #28
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
 8009952:	bf00      	nop
 8009954:	feff8fff 	.word	0xfeff8fff
 8009958:	40010000 	.word	0x40010000
 800995c:	40010400 	.word	0x40010400
 8009960:	40014000 	.word	0x40014000
 8009964:	40014400 	.word	0x40014400
 8009968:	40014800 	.word	0x40014800

0800996c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800996c:	b480      	push	{r7}
 800996e:	b087      	sub	sp, #28
 8009970:	af00      	add	r7, sp, #0
 8009972:	60f8      	str	r0, [r7, #12]
 8009974:	60b9      	str	r1, [r7, #8]
 8009976:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	f023 0201 	bic.w	r2, r3, #1
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	699b      	ldr	r3, [r3, #24]
 800998e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009996:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	011b      	lsls	r3, r3, #4
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	4313      	orrs	r3, r2
 80099a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f023 030a 	bic.w	r3, r3, #10
 80099a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	621a      	str	r2, [r3, #32]
}
 80099be:	bf00      	nop
 80099c0:	371c      	adds	r7, #28
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b087      	sub	sp, #28
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	60f8      	str	r0, [r7, #12]
 80099d2:	60b9      	str	r1, [r7, #8]
 80099d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	f023 0210 	bic.w	r2, r3, #16
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6a1b      	ldr	r3, [r3, #32]
 80099ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	031b      	lsls	r3, r3, #12
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	4313      	orrs	r3, r2
 80099fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	011b      	lsls	r3, r3, #4
 8009a0c:	693a      	ldr	r2, [r7, #16]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	693a      	ldr	r2, [r7, #16]
 8009a1c:	621a      	str	r2, [r3, #32]
}
 8009a1e:	bf00      	nop
 8009a20:	371c      	adds	r7, #28
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
	...

08009a2c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b085      	sub	sp, #20
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	4b09      	ldr	r3, [pc, #36]	; (8009a64 <TIM_ITRx_SetConfig+0x38>)
 8009a40:	4013      	ands	r3, r2
 8009a42:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a44:	683a      	ldr	r2, [r7, #0]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	f043 0307 	orr.w	r3, r3, #7
 8009a4e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	609a      	str	r2, [r3, #8]
}
 8009a56:	bf00      	nop
 8009a58:	3714      	adds	r7, #20
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	ffcfff8f 	.word	0xffcfff8f

08009a68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a68:	b480      	push	{r7}
 8009a6a:	b087      	sub	sp, #28
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
 8009a74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	021a      	lsls	r2, r3, #8
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	431a      	orrs	r2, r3
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	4313      	orrs	r3, r2
 8009a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	609a      	str	r2, [r3, #8]
}
 8009a9c:	bf00      	nop
 8009a9e:	371c      	adds	r7, #28
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b087      	sub	sp, #28
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	f003 031f 	and.w	r3, r3, #31
 8009aba:	2201      	movs	r2, #1
 8009abc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	6a1a      	ldr	r2, [r3, #32]
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	43db      	mvns	r3, r3
 8009aca:	401a      	ands	r2, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6a1a      	ldr	r2, [r3, #32]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	f003 031f 	and.w	r3, r3, #31
 8009ada:	6879      	ldr	r1, [r7, #4]
 8009adc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae0:	431a      	orrs	r2, r3
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	621a      	str	r2, [r3, #32]
}
 8009ae6:	bf00      	nop
 8009ae8:	371c      	adds	r7, #28
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
	...

08009af4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d101      	bne.n	8009b0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b08:	2302      	movs	r3, #2
 8009b0a:	e06d      	b.n	8009be8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2202      	movs	r2, #2
 8009b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a30      	ldr	r2, [pc, #192]	; (8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d004      	beq.n	8009b40 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4a2f      	ldr	r2, [pc, #188]	; (8009bf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d108      	bne.n	8009b52 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b46:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	4313      	orrs	r3, r2
 8009b62:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4a20      	ldr	r2, [pc, #128]	; (8009bf4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d022      	beq.n	8009bbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b7e:	d01d      	beq.n	8009bbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a1d      	ldr	r2, [pc, #116]	; (8009bfc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d018      	beq.n	8009bbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a1c      	ldr	r2, [pc, #112]	; (8009c00 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d013      	beq.n	8009bbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a1a      	ldr	r2, [pc, #104]	; (8009c04 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d00e      	beq.n	8009bbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a15      	ldr	r2, [pc, #84]	; (8009bf8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d009      	beq.n	8009bbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a16      	ldr	r2, [pc, #88]	; (8009c08 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d004      	beq.n	8009bbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a15      	ldr	r2, [pc, #84]	; (8009c0c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d10c      	bne.n	8009bd6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2201      	movs	r2, #1
 8009bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009be6:	2300      	movs	r3, #0
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3714      	adds	r7, #20
 8009bec:	46bd      	mov	sp, r7
 8009bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf2:	4770      	bx	lr
 8009bf4:	40010000 	.word	0x40010000
 8009bf8:	40010400 	.word	0x40010400
 8009bfc:	40000400 	.word	0x40000400
 8009c00:	40000800 	.word	0x40000800
 8009c04:	40000c00 	.word	0x40000c00
 8009c08:	40001800 	.word	0x40001800
 8009c0c:	40014000 	.word	0x40014000

08009c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d101      	bne.n	8009c2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c28:	2302      	movs	r3, #2
 8009c2a:	e065      	b.n	8009cf8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	041b      	lsls	r3, r3, #16
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a16      	ldr	r2, [pc, #88]	; (8009d04 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d004      	beq.n	8009cba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a14      	ldr	r2, [pc, #80]	; (8009d08 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d115      	bne.n	8009ce6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009cc0:	683b      	ldr	r3, [r7, #0]
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	051b      	lsls	r3, r3, #20
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	69db      	ldr	r3, [r3, #28]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009cf6:	2300      	movs	r3, #0
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	40010000 	.word	0x40010000
 8009d08:	40010400 	.word	0x40010400

08009d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b083      	sub	sp, #12
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d14:	bf00      	nop
 8009d16:	370c      	adds	r7, #12
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d28:	bf00      	nop
 8009d2a:	370c      	adds	r7, #12
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d3c:	bf00      	nop
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b082      	sub	sp, #8
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	e042      	b.n	8009de0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d106      	bne.n	8009d72 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f7f8 fd63 	bl	8002838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	2224      	movs	r2, #36	; 0x24
 8009d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	681a      	ldr	r2, [r3, #0]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f022 0201 	bic.w	r2, r2, #1
 8009d88:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fd54 	bl	800a838 <UART_SetConfig>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d101      	bne.n	8009d9a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	e022      	b.n	8009de0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d002      	beq.n	8009da8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f001 faa8 	bl	800b2f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	685a      	ldr	r2, [r3, #4]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009db6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	689a      	ldr	r2, [r3, #8]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009dc6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f042 0201 	orr.w	r2, r2, #1
 8009dd6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f001 fb2f 	bl	800b43c <UART_CheckIdleState>
 8009dde:	4603      	mov	r3, r0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08a      	sub	sp, #40	; 0x28
 8009dec:	af02      	add	r7, sp, #8
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	603b      	str	r3, [r7, #0]
 8009df4:	4613      	mov	r3, r2
 8009df6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dfe:	2b20      	cmp	r3, #32
 8009e00:	f040 8083 	bne.w	8009f0a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d002      	beq.n	8009e10 <HAL_UART_Transmit+0x28>
 8009e0a:	88fb      	ldrh	r3, [r7, #6]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009e10:	2301      	movs	r3, #1
 8009e12:	e07b      	b.n	8009f0c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d101      	bne.n	8009e22 <HAL_UART_Transmit+0x3a>
 8009e1e:	2302      	movs	r3, #2
 8009e20:	e074      	b.n	8009f0c <HAL_UART_Transmit+0x124>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2201      	movs	r2, #1
 8009e26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2221      	movs	r2, #33	; 0x21
 8009e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009e3a:	f7f9 f9f9 	bl	8003230 <HAL_GetTick>
 8009e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	88fa      	ldrh	r2, [r7, #6]
 8009e44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	88fa      	ldrh	r2, [r7, #6]
 8009e4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e58:	d108      	bne.n	8009e6c <HAL_UART_Transmit+0x84>
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d104      	bne.n	8009e6c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009e62:	2300      	movs	r3, #0
 8009e64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	61bb      	str	r3, [r7, #24]
 8009e6a:	e003      	b.n	8009e74 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009e70:	2300      	movs	r3, #0
 8009e72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009e7c:	e02c      	b.n	8009ed8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	2200      	movs	r2, #0
 8009e86:	2180      	movs	r1, #128	; 0x80
 8009e88:	68f8      	ldr	r0, [r7, #12]
 8009e8a:	f001 fb22 	bl	800b4d2 <UART_WaitOnFlagUntilTimeout>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d001      	beq.n	8009e98 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e039      	b.n	8009f0c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d10b      	bne.n	8009eb6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009e9e:	69bb      	ldr	r3, [r7, #24]
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009eac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	3302      	adds	r3, #2
 8009eb2:	61bb      	str	r3, [r7, #24]
 8009eb4:	e007      	b.n	8009ec6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	781a      	ldrb	r2, [r3, #0]
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	3301      	adds	r3, #1
 8009ec4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	3b01      	subs	r3, #1
 8009ed0:	b29a      	uxth	r2, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d1cc      	bne.n	8009e7e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	9300      	str	r3, [sp, #0]
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	2200      	movs	r2, #0
 8009eec:	2140      	movs	r1, #64	; 0x40
 8009eee:	68f8      	ldr	r0, [r7, #12]
 8009ef0:	f001 faef 	bl	800b4d2 <UART_WaitOnFlagUntilTimeout>
 8009ef4:	4603      	mov	r3, r0
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d001      	beq.n	8009efe <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009efa:	2303      	movs	r3, #3
 8009efc:	e006      	b.n	8009f0c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2220      	movs	r2, #32
 8009f02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009f06:	2300      	movs	r3, #0
 8009f08:	e000      	b.n	8009f0c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009f0a:	2302      	movs	r3, #2
  }
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3720      	adds	r7, #32
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b08a      	sub	sp, #40	; 0x28
 8009f18:	af02      	add	r7, sp, #8
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	603b      	str	r3, [r7, #0]
 8009f20:	4613      	mov	r3, r2
 8009f22:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f2a:	2b20      	cmp	r3, #32
 8009f2c:	f040 80c0 	bne.w	800a0b0 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d002      	beq.n	8009f3c <HAL_UART_Receive+0x28>
 8009f36:	88fb      	ldrh	r3, [r7, #6]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d101      	bne.n	8009f40 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e0b8      	b.n	800a0b2 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f46:	2b01      	cmp	r3, #1
 8009f48:	d101      	bne.n	8009f4e <HAL_UART_Receive+0x3a>
 8009f4a:	2302      	movs	r3, #2
 8009f4c:	e0b1      	b.n	800a0b2 <HAL_UART_Receive+0x19e>
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2222      	movs	r2, #34	; 0x22
 8009f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009f6c:	f7f9 f960 	bl	8003230 <HAL_GetTick>
 8009f70:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	88fa      	ldrh	r2, [r7, #6]
 8009f76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	88fa      	ldrh	r2, [r7, #6]
 8009f7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f8a:	d10e      	bne.n	8009faa <HAL_UART_Receive+0x96>
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d105      	bne.n	8009fa0 <HAL_UART_Receive+0x8c>
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009f9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009f9e:	e02d      	b.n	8009ffc <HAL_UART_Receive+0xe8>
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	22ff      	movs	r2, #255	; 0xff
 8009fa4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009fa8:	e028      	b.n	8009ffc <HAL_UART_Receive+0xe8>
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	689b      	ldr	r3, [r3, #8]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d10d      	bne.n	8009fce <HAL_UART_Receive+0xba>
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d104      	bne.n	8009fc4 <HAL_UART_Receive+0xb0>
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	22ff      	movs	r2, #255	; 0xff
 8009fbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009fc2:	e01b      	b.n	8009ffc <HAL_UART_Receive+0xe8>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	227f      	movs	r2, #127	; 0x7f
 8009fc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009fcc:	e016      	b.n	8009ffc <HAL_UART_Receive+0xe8>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fd6:	d10d      	bne.n	8009ff4 <HAL_UART_Receive+0xe0>
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	691b      	ldr	r3, [r3, #16]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d104      	bne.n	8009fea <HAL_UART_Receive+0xd6>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	227f      	movs	r2, #127	; 0x7f
 8009fe4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009fe8:	e008      	b.n	8009ffc <HAL_UART_Receive+0xe8>
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	223f      	movs	r2, #63	; 0x3f
 8009fee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009ff2:	e003      	b.n	8009ffc <HAL_UART_Receive+0xe8>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a002:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a00c:	d108      	bne.n	800a020 <HAL_UART_Receive+0x10c>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d104      	bne.n	800a020 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800a016:	2300      	movs	r3, #0
 800a018:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	61bb      	str	r3, [r7, #24]
 800a01e:	e003      	b.n	800a028 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a024:	2300      	movs	r3, #0
 800a026:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a030:	e032      	b.n	800a098 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	9300      	str	r3, [sp, #0]
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2200      	movs	r2, #0
 800a03a:	2120      	movs	r1, #32
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f001 fa48 	bl	800b4d2 <UART_WaitOnFlagUntilTimeout>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800a048:	2303      	movs	r3, #3
 800a04a:	e032      	b.n	800a0b2 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800a04c:	69fb      	ldr	r3, [r7, #28]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10c      	bne.n	800a06c <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a058:	b29a      	uxth	r2, r3
 800a05a:	8a7b      	ldrh	r3, [r7, #18]
 800a05c:	4013      	ands	r3, r2
 800a05e:	b29a      	uxth	r2, r3
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	3302      	adds	r3, #2
 800a068:	61bb      	str	r3, [r7, #24]
 800a06a:	e00c      	b.n	800a086 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a072:	b2da      	uxtb	r2, r3
 800a074:	8a7b      	ldrh	r3, [r7, #18]
 800a076:	b2db      	uxtb	r3, r3
 800a078:	4013      	ands	r3, r2
 800a07a:	b2da      	uxtb	r2, r3
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	3301      	adds	r3, #1
 800a084:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	3b01      	subs	r3, #1
 800a090:	b29a      	uxth	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1c6      	bne.n	800a032 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	e000      	b.n	800a0b2 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800a0b0:	2302      	movs	r3, #2
  }
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3720      	adds	r7, #32
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
	...

0800a0bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b0ba      	sub	sp, #232	; 0xe8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	69db      	ldr	r3, [r3, #28]
 800a0ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	689b      	ldr	r3, [r3, #8]
 800a0de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a0e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a0e6:	f640 030f 	movw	r3, #2063	; 0x80f
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a0f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d11b      	bne.n	800a130 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0fc:	f003 0320 	and.w	r3, r3, #32
 800a100:	2b00      	cmp	r3, #0
 800a102:	d015      	beq.n	800a130 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a108:	f003 0320 	and.w	r3, r3, #32
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d105      	bne.n	800a11c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d009      	beq.n	800a130 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a120:	2b00      	cmp	r3, #0
 800a122:	f000 835a 	beq.w	800a7da <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	4798      	blx	r3
      }
      return;
 800a12e:	e354      	b.n	800a7da <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a130:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 811f 	beq.w	800a378 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a13a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a13e:	4b8b      	ldr	r3, [pc, #556]	; (800a36c <HAL_UART_IRQHandler+0x2b0>)
 800a140:	4013      	ands	r3, r2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d106      	bne.n	800a154 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a146:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a14a:	4b89      	ldr	r3, [pc, #548]	; (800a370 <HAL_UART_IRQHandler+0x2b4>)
 800a14c:	4013      	ands	r3, r2
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f000 8112 	beq.w	800a378 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a158:	f003 0301 	and.w	r3, r3, #1
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d011      	beq.n	800a184 <HAL_UART_IRQHandler+0xc8>
 800a160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d00b      	beq.n	800a184 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	2201      	movs	r2, #1
 800a172:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a17a:	f043 0201 	orr.w	r2, r3, #1
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a188:	f003 0302 	and.w	r3, r3, #2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d011      	beq.n	800a1b4 <HAL_UART_IRQHandler+0xf8>
 800a190:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a194:	f003 0301 	and.w	r3, r3, #1
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00b      	beq.n	800a1b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2202      	movs	r2, #2
 800a1a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1aa:	f043 0204 	orr.w	r2, r3, #4
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a1b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1b8:	f003 0304 	and.w	r3, r3, #4
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d011      	beq.n	800a1e4 <HAL_UART_IRQHandler+0x128>
 800a1c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a1c4:	f003 0301 	and.w	r3, r3, #1
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00b      	beq.n	800a1e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2204      	movs	r2, #4
 800a1d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1da:	f043 0202 	orr.w	r2, r3, #2
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a1e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a1e8:	f003 0308 	and.w	r3, r3, #8
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d017      	beq.n	800a220 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a1f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a1f4:	f003 0320 	and.w	r3, r3, #32
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d105      	bne.n	800a208 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a1fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a200:	4b5a      	ldr	r3, [pc, #360]	; (800a36c <HAL_UART_IRQHandler+0x2b0>)
 800a202:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00b      	beq.n	800a220 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2208      	movs	r2, #8
 800a20e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a216:	f043 0208 	orr.w	r2, r3, #8
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d012      	beq.n	800a252 <HAL_UART_IRQHandler+0x196>
 800a22c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a230:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a234:	2b00      	cmp	r3, #0
 800a236:	d00c      	beq.n	800a252 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a240:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a248:	f043 0220 	orr.w	r2, r3, #32
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a258:	2b00      	cmp	r3, #0
 800a25a:	f000 82c0 	beq.w	800a7de <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a25e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a262:	f003 0320 	and.w	r3, r3, #32
 800a266:	2b00      	cmp	r3, #0
 800a268:	d013      	beq.n	800a292 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a26a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a26e:	f003 0320 	and.w	r3, r3, #32
 800a272:	2b00      	cmp	r3, #0
 800a274:	d105      	bne.n	800a282 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a27a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d007      	beq.n	800a292 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a286:	2b00      	cmp	r3, #0
 800a288:	d003      	beq.n	800a292 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a298:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a6:	2b40      	cmp	r3, #64	; 0x40
 800a2a8:	d005      	beq.n	800a2b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a2aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a2ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d04f      	beq.n	800a356 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f001 f9d4 	bl	800b664 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c6:	2b40      	cmp	r3, #64	; 0x40
 800a2c8:	d141      	bne.n	800a34e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	3308      	adds	r3, #8
 800a2d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a2d8:	e853 3f00 	ldrex	r3, [r3]
 800a2dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a2e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a2e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	3308      	adds	r3, #8
 800a2f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a2f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a2fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a302:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a306:	e841 2300 	strex	r3, r2, [r1]
 800a30a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a30e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1d9      	bne.n	800a2ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d013      	beq.n	800a346 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a322:	4a14      	ldr	r2, [pc, #80]	; (800a374 <HAL_UART_IRQHandler+0x2b8>)
 800a324:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a32a:	4618      	mov	r0, r3
 800a32c:	f7fa f818 	bl	8004360 <HAL_DMA_Abort_IT>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d017      	beq.n	800a366 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a33a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800a340:	4610      	mov	r0, r2
 800a342:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a344:	e00f      	b.n	800a366 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f000 fa60 	bl	800a80c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a34c:	e00b      	b.n	800a366 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 fa5c 	bl	800a80c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a354:	e007      	b.n	800a366 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 fa58 	bl	800a80c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800a364:	e23b      	b.n	800a7de <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a366:	bf00      	nop
    return;
 800a368:	e239      	b.n	800a7de <HAL_UART_IRQHandler+0x722>
 800a36a:	bf00      	nop
 800a36c:	10000001 	.word	0x10000001
 800a370:	04000120 	.word	0x04000120
 800a374:	0800b731 	.word	0x0800b731

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	f040 81ce 	bne.w	800a71e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a386:	f003 0310 	and.w	r3, r3, #16
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f000 81c7 	beq.w	800a71e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a394:	f003 0310 	and.w	r3, r3, #16
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f000 81c0 	beq.w	800a71e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2210      	movs	r2, #16
 800a3a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689b      	ldr	r3, [r3, #8]
 800a3ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b0:	2b40      	cmp	r3, #64	; 0x40
 800a3b2:	f040 813b 	bne.w	800a62c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a8b      	ldr	r2, [pc, #556]	; (800a5ec <HAL_UART_IRQHandler+0x530>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d059      	beq.n	800a476 <HAL_UART_IRQHandler+0x3ba>
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a89      	ldr	r2, [pc, #548]	; (800a5f0 <HAL_UART_IRQHandler+0x534>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d053      	beq.n	800a476 <HAL_UART_IRQHandler+0x3ba>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a87      	ldr	r2, [pc, #540]	; (800a5f4 <HAL_UART_IRQHandler+0x538>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d04d      	beq.n	800a476 <HAL_UART_IRQHandler+0x3ba>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a85      	ldr	r2, [pc, #532]	; (800a5f8 <HAL_UART_IRQHandler+0x53c>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d047      	beq.n	800a476 <HAL_UART_IRQHandler+0x3ba>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a83      	ldr	r2, [pc, #524]	; (800a5fc <HAL_UART_IRQHandler+0x540>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d041      	beq.n	800a476 <HAL_UART_IRQHandler+0x3ba>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a81      	ldr	r2, [pc, #516]	; (800a600 <HAL_UART_IRQHandler+0x544>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d03b      	beq.n	800a476 <HAL_UART_IRQHandler+0x3ba>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a7f      	ldr	r2, [pc, #508]	; (800a604 <HAL_UART_IRQHandler+0x548>)
 800a406:	4293      	cmp	r3, r2
 800a408:	d035      	beq.n	800a476 <HAL_UART_IRQHandler+0x3ba>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a7d      	ldr	r2, [pc, #500]	; (800a608 <HAL_UART_IRQHandler+0x54c>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d02f      	beq.n	800a476 <HAL_UART_IRQHandler+0x3ba>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a7b      	ldr	r2, [pc, #492]	; (800a60c <HAL_UART_IRQHandler+0x550>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d029      	beq.n	800a476 <HAL_UART_IRQHandler+0x3ba>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a79      	ldr	r2, [pc, #484]	; (800a610 <HAL_UART_IRQHandler+0x554>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d023      	beq.n	800a476 <HAL_UART_IRQHandler+0x3ba>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	4a77      	ldr	r2, [pc, #476]	; (800a614 <HAL_UART_IRQHandler+0x558>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d01d      	beq.n	800a476 <HAL_UART_IRQHandler+0x3ba>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a75      	ldr	r2, [pc, #468]	; (800a618 <HAL_UART_IRQHandler+0x55c>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d017      	beq.n	800a476 <HAL_UART_IRQHandler+0x3ba>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4a73      	ldr	r2, [pc, #460]	; (800a61c <HAL_UART_IRQHandler+0x560>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d011      	beq.n	800a476 <HAL_UART_IRQHandler+0x3ba>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a71      	ldr	r2, [pc, #452]	; (800a620 <HAL_UART_IRQHandler+0x564>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d00b      	beq.n	800a476 <HAL_UART_IRQHandler+0x3ba>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a6f      	ldr	r2, [pc, #444]	; (800a624 <HAL_UART_IRQHandler+0x568>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d005      	beq.n	800a476 <HAL_UART_IRQHandler+0x3ba>
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a6d      	ldr	r2, [pc, #436]	; (800a628 <HAL_UART_IRQHandler+0x56c>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d105      	bne.n	800a482 <HAL_UART_IRQHandler+0x3c6>
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	b29b      	uxth	r3, r3
 800a480:	e004      	b.n	800a48c <HAL_UART_IRQHandler+0x3d0>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a490:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a494:	2b00      	cmp	r3, #0
 800a496:	f000 81a4 	beq.w	800a7e2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a4a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	f080 819c 	bcs.w	800a7e2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a4b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a4b8:	69db      	ldr	r3, [r3, #28]
 800a4ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4be:	f000 8086 	beq.w	800a5ce <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a4ce:	e853 3f00 	ldrex	r3, [r3]
 800a4d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a4d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a4da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a4ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a4f0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a4f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a4fc:	e841 2300 	strex	r3, r2, [r1]
 800a500:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a504:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d1da      	bne.n	800a4c2 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	3308      	adds	r3, #8
 800a512:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a516:	e853 3f00 	ldrex	r3, [r3]
 800a51a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a51c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a51e:	f023 0301 	bic.w	r3, r3, #1
 800a522:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	3308      	adds	r3, #8
 800a52c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a530:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a534:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a536:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a538:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a53c:	e841 2300 	strex	r3, r2, [r1]
 800a540:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a544:	2b00      	cmp	r3, #0
 800a546:	d1e1      	bne.n	800a50c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	3308      	adds	r3, #8
 800a54e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a550:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a552:	e853 3f00 	ldrex	r3, [r3]
 800a556:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a55a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a55e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	3308      	adds	r3, #8
 800a568:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a56c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a56e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a570:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a572:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a574:	e841 2300 	strex	r3, r2, [r1]
 800a578:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a57a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d1e3      	bne.n	800a548 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2220      	movs	r2, #32
 800a584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a596:	e853 3f00 	ldrex	r3, [r3]
 800a59a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a59c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a59e:	f023 0310 	bic.w	r3, r3, #16
 800a5a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a5b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800a5b2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a5b8:	e841 2300 	strex	r3, r2, [r1]
 800a5bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a5be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d1e4      	bne.n	800a58e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f7f9 fbab 	bl	8003d24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 f91c 	bl	800a820 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a5e8:	e0fb      	b.n	800a7e2 <HAL_UART_IRQHandler+0x726>
 800a5ea:	bf00      	nop
 800a5ec:	40020010 	.word	0x40020010
 800a5f0:	40020028 	.word	0x40020028
 800a5f4:	40020040 	.word	0x40020040
 800a5f8:	40020058 	.word	0x40020058
 800a5fc:	40020070 	.word	0x40020070
 800a600:	40020088 	.word	0x40020088
 800a604:	400200a0 	.word	0x400200a0
 800a608:	400200b8 	.word	0x400200b8
 800a60c:	40020410 	.word	0x40020410
 800a610:	40020428 	.word	0x40020428
 800a614:	40020440 	.word	0x40020440
 800a618:	40020458 	.word	0x40020458
 800a61c:	40020470 	.word	0x40020470
 800a620:	40020488 	.word	0x40020488
 800a624:	400204a0 	.word	0x400204a0
 800a628:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a638:	b29b      	uxth	r3, r3
 800a63a:	1ad3      	subs	r3, r2, r3
 800a63c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a646:	b29b      	uxth	r3, r3
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f000 80cc 	beq.w	800a7e6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800a64e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 80c7 	beq.w	800a7e6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a65e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a660:	e853 3f00 	ldrex	r3, [r3]
 800a664:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a668:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a66c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	461a      	mov	r2, r3
 800a676:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a67a:	647b      	str	r3, [r7, #68]	; 0x44
 800a67c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a67e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a680:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a682:	e841 2300 	strex	r3, r2, [r1]
 800a686:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d1e4      	bne.n	800a658 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	3308      	adds	r3, #8
 800a694:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	e853 3f00 	ldrex	r3, [r3]
 800a69c:	623b      	str	r3, [r7, #32]
   return(result);
 800a69e:	6a3a      	ldr	r2, [r7, #32]
 800a6a0:	4b54      	ldr	r3, [pc, #336]	; (800a7f4 <HAL_UART_IRQHandler+0x738>)
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	3308      	adds	r3, #8
 800a6ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a6b2:	633a      	str	r2, [r7, #48]	; 0x30
 800a6b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6ba:	e841 2300 	strex	r3, r2, [r1]
 800a6be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1e3      	bne.n	800a68e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2220      	movs	r2, #32
 800a6ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2200      	movs	r2, #0
 800a6d8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	e853 3f00 	ldrex	r3, [r3]
 800a6e6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f023 0310 	bic.w	r3, r3, #16
 800a6ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a6fc:	61fb      	str	r3, [r7, #28]
 800a6fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a700:	69b9      	ldr	r1, [r7, #24]
 800a702:	69fa      	ldr	r2, [r7, #28]
 800a704:	e841 2300 	strex	r3, r2, [r1]
 800a708:	617b      	str	r3, [r7, #20]
   return(result);
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1e4      	bne.n	800a6da <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a714:	4619      	mov	r1, r3
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f000 f882 	bl	800a820 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a71c:	e063      	b.n	800a7e6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a71e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00e      	beq.n	800a748 <HAL_UART_IRQHandler+0x68c>
 800a72a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a72e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a732:	2b00      	cmp	r3, #0
 800a734:	d008      	beq.n	800a748 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a73e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f001 f836 	bl	800b7b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a746:	e051      	b.n	800a7ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a74c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a750:	2b00      	cmp	r3, #0
 800a752:	d014      	beq.n	800a77e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d105      	bne.n	800a76c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a760:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d008      	beq.n	800a77e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a770:	2b00      	cmp	r3, #0
 800a772:	d03a      	beq.n	800a7ea <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	4798      	blx	r3
    }
    return;
 800a77c:	e035      	b.n	800a7ea <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a77e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a786:	2b00      	cmp	r3, #0
 800a788:	d009      	beq.n	800a79e <HAL_UART_IRQHandler+0x6e2>
 800a78a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a78e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a792:	2b00      	cmp	r3, #0
 800a794:	d003      	beq.n	800a79e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 ffe0 	bl	800b75c <UART_EndTransmit_IT>
    return;
 800a79c:	e026      	b.n	800a7ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a79e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d009      	beq.n	800a7be <HAL_UART_IRQHandler+0x702>
 800a7aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d003      	beq.n	800a7be <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a7b6:	6878      	ldr	r0, [r7, #4]
 800a7b8:	f001 f80f 	bl	800b7da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7bc:	e016      	b.n	800a7ec <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a7be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d010      	beq.n	800a7ec <HAL_UART_IRQHandler+0x730>
 800a7ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	da0c      	bge.n	800a7ec <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f000 fff7 	bl	800b7c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a7d8:	e008      	b.n	800a7ec <HAL_UART_IRQHandler+0x730>
      return;
 800a7da:	bf00      	nop
 800a7dc:	e006      	b.n	800a7ec <HAL_UART_IRQHandler+0x730>
    return;
 800a7de:	bf00      	nop
 800a7e0:	e004      	b.n	800a7ec <HAL_UART_IRQHandler+0x730>
      return;
 800a7e2:	bf00      	nop
 800a7e4:	e002      	b.n	800a7ec <HAL_UART_IRQHandler+0x730>
      return;
 800a7e6:	bf00      	nop
 800a7e8:	e000      	b.n	800a7ec <HAL_UART_IRQHandler+0x730>
    return;
 800a7ea:	bf00      	nop
  }
}
 800a7ec:	37e8      	adds	r7, #232	; 0xe8
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	effffffe 	.word	0xeffffffe

0800a7f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a80c:	b480      	push	{r7}
 800a80e:	b083      	sub	sp, #12
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a814:	bf00      	nop
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a838:	b5b0      	push	{r4, r5, r7, lr}
 800a83a:	b08e      	sub	sp, #56	; 0x38
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a840:	2300      	movs	r3, #0
 800a842:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	689a      	ldr	r2, [r3, #8]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	431a      	orrs	r2, r3
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	695b      	ldr	r3, [r3, #20]
 800a854:	431a      	orrs	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	4bbf      	ldr	r3, [pc, #764]	; (800ab64 <UART_SetConfig+0x32c>)
 800a866:	4013      	ands	r3, r2
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	6812      	ldr	r2, [r2, #0]
 800a86c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a86e:	430b      	orrs	r3, r1
 800a870:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	68da      	ldr	r2, [r3, #12]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	430a      	orrs	r2, r1
 800a886:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	699b      	ldr	r3, [r3, #24]
 800a88c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4ab5      	ldr	r2, [pc, #724]	; (800ab68 <UART_SetConfig+0x330>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d004      	beq.n	800a8a2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a1b      	ldr	r3, [r3, #32]
 800a89c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	689a      	ldr	r2, [r3, #8]
 800a8a8:	4bb0      	ldr	r3, [pc, #704]	; (800ab6c <UART_SetConfig+0x334>)
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	687a      	ldr	r2, [r7, #4]
 800a8ae:	6812      	ldr	r2, [r2, #0]
 800a8b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a8b2:	430b      	orrs	r3, r1
 800a8b4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8bc:	f023 010f 	bic.w	r1, r3, #15
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	430a      	orrs	r2, r1
 800a8ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4aa7      	ldr	r2, [pc, #668]	; (800ab70 <UART_SetConfig+0x338>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d176      	bne.n	800a9c4 <UART_SetConfig+0x18c>
 800a8d6:	4ba7      	ldr	r3, [pc, #668]	; (800ab74 <UART_SetConfig+0x33c>)
 800a8d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8de:	2b28      	cmp	r3, #40	; 0x28
 800a8e0:	d86c      	bhi.n	800a9bc <UART_SetConfig+0x184>
 800a8e2:	a201      	add	r2, pc, #4	; (adr r2, 800a8e8 <UART_SetConfig+0xb0>)
 800a8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8e8:	0800a98d 	.word	0x0800a98d
 800a8ec:	0800a9bd 	.word	0x0800a9bd
 800a8f0:	0800a9bd 	.word	0x0800a9bd
 800a8f4:	0800a9bd 	.word	0x0800a9bd
 800a8f8:	0800a9bd 	.word	0x0800a9bd
 800a8fc:	0800a9bd 	.word	0x0800a9bd
 800a900:	0800a9bd 	.word	0x0800a9bd
 800a904:	0800a9bd 	.word	0x0800a9bd
 800a908:	0800a995 	.word	0x0800a995
 800a90c:	0800a9bd 	.word	0x0800a9bd
 800a910:	0800a9bd 	.word	0x0800a9bd
 800a914:	0800a9bd 	.word	0x0800a9bd
 800a918:	0800a9bd 	.word	0x0800a9bd
 800a91c:	0800a9bd 	.word	0x0800a9bd
 800a920:	0800a9bd 	.word	0x0800a9bd
 800a924:	0800a9bd 	.word	0x0800a9bd
 800a928:	0800a99d 	.word	0x0800a99d
 800a92c:	0800a9bd 	.word	0x0800a9bd
 800a930:	0800a9bd 	.word	0x0800a9bd
 800a934:	0800a9bd 	.word	0x0800a9bd
 800a938:	0800a9bd 	.word	0x0800a9bd
 800a93c:	0800a9bd 	.word	0x0800a9bd
 800a940:	0800a9bd 	.word	0x0800a9bd
 800a944:	0800a9bd 	.word	0x0800a9bd
 800a948:	0800a9a5 	.word	0x0800a9a5
 800a94c:	0800a9bd 	.word	0x0800a9bd
 800a950:	0800a9bd 	.word	0x0800a9bd
 800a954:	0800a9bd 	.word	0x0800a9bd
 800a958:	0800a9bd 	.word	0x0800a9bd
 800a95c:	0800a9bd 	.word	0x0800a9bd
 800a960:	0800a9bd 	.word	0x0800a9bd
 800a964:	0800a9bd 	.word	0x0800a9bd
 800a968:	0800a9ad 	.word	0x0800a9ad
 800a96c:	0800a9bd 	.word	0x0800a9bd
 800a970:	0800a9bd 	.word	0x0800a9bd
 800a974:	0800a9bd 	.word	0x0800a9bd
 800a978:	0800a9bd 	.word	0x0800a9bd
 800a97c:	0800a9bd 	.word	0x0800a9bd
 800a980:	0800a9bd 	.word	0x0800a9bd
 800a984:	0800a9bd 	.word	0x0800a9bd
 800a988:	0800a9b5 	.word	0x0800a9b5
 800a98c:	2301      	movs	r3, #1
 800a98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a992:	e222      	b.n	800adda <UART_SetConfig+0x5a2>
 800a994:	2304      	movs	r3, #4
 800a996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a99a:	e21e      	b.n	800adda <UART_SetConfig+0x5a2>
 800a99c:	2308      	movs	r3, #8
 800a99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9a2:	e21a      	b.n	800adda <UART_SetConfig+0x5a2>
 800a9a4:	2310      	movs	r3, #16
 800a9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9aa:	e216      	b.n	800adda <UART_SetConfig+0x5a2>
 800a9ac:	2320      	movs	r3, #32
 800a9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9b2:	e212      	b.n	800adda <UART_SetConfig+0x5a2>
 800a9b4:	2340      	movs	r3, #64	; 0x40
 800a9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9ba:	e20e      	b.n	800adda <UART_SetConfig+0x5a2>
 800a9bc:	2380      	movs	r3, #128	; 0x80
 800a9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9c2:	e20a      	b.n	800adda <UART_SetConfig+0x5a2>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a6b      	ldr	r2, [pc, #428]	; (800ab78 <UART_SetConfig+0x340>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d130      	bne.n	800aa30 <UART_SetConfig+0x1f8>
 800a9ce:	4b69      	ldr	r3, [pc, #420]	; (800ab74 <UART_SetConfig+0x33c>)
 800a9d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9d2:	f003 0307 	and.w	r3, r3, #7
 800a9d6:	2b05      	cmp	r3, #5
 800a9d8:	d826      	bhi.n	800aa28 <UART_SetConfig+0x1f0>
 800a9da:	a201      	add	r2, pc, #4	; (adr r2, 800a9e0 <UART_SetConfig+0x1a8>)
 800a9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e0:	0800a9f9 	.word	0x0800a9f9
 800a9e4:	0800aa01 	.word	0x0800aa01
 800a9e8:	0800aa09 	.word	0x0800aa09
 800a9ec:	0800aa11 	.word	0x0800aa11
 800a9f0:	0800aa19 	.word	0x0800aa19
 800a9f4:	0800aa21 	.word	0x0800aa21
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9fe:	e1ec      	b.n	800adda <UART_SetConfig+0x5a2>
 800aa00:	2304      	movs	r3, #4
 800aa02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa06:	e1e8      	b.n	800adda <UART_SetConfig+0x5a2>
 800aa08:	2308      	movs	r3, #8
 800aa0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa0e:	e1e4      	b.n	800adda <UART_SetConfig+0x5a2>
 800aa10:	2310      	movs	r3, #16
 800aa12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa16:	e1e0      	b.n	800adda <UART_SetConfig+0x5a2>
 800aa18:	2320      	movs	r3, #32
 800aa1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa1e:	e1dc      	b.n	800adda <UART_SetConfig+0x5a2>
 800aa20:	2340      	movs	r3, #64	; 0x40
 800aa22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa26:	e1d8      	b.n	800adda <UART_SetConfig+0x5a2>
 800aa28:	2380      	movs	r3, #128	; 0x80
 800aa2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa2e:	e1d4      	b.n	800adda <UART_SetConfig+0x5a2>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a51      	ldr	r2, [pc, #324]	; (800ab7c <UART_SetConfig+0x344>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d130      	bne.n	800aa9c <UART_SetConfig+0x264>
 800aa3a:	4b4e      	ldr	r3, [pc, #312]	; (800ab74 <UART_SetConfig+0x33c>)
 800aa3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa3e:	f003 0307 	and.w	r3, r3, #7
 800aa42:	2b05      	cmp	r3, #5
 800aa44:	d826      	bhi.n	800aa94 <UART_SetConfig+0x25c>
 800aa46:	a201      	add	r2, pc, #4	; (adr r2, 800aa4c <UART_SetConfig+0x214>)
 800aa48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa4c:	0800aa65 	.word	0x0800aa65
 800aa50:	0800aa6d 	.word	0x0800aa6d
 800aa54:	0800aa75 	.word	0x0800aa75
 800aa58:	0800aa7d 	.word	0x0800aa7d
 800aa5c:	0800aa85 	.word	0x0800aa85
 800aa60:	0800aa8d 	.word	0x0800aa8d
 800aa64:	2300      	movs	r3, #0
 800aa66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa6a:	e1b6      	b.n	800adda <UART_SetConfig+0x5a2>
 800aa6c:	2304      	movs	r3, #4
 800aa6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa72:	e1b2      	b.n	800adda <UART_SetConfig+0x5a2>
 800aa74:	2308      	movs	r3, #8
 800aa76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa7a:	e1ae      	b.n	800adda <UART_SetConfig+0x5a2>
 800aa7c:	2310      	movs	r3, #16
 800aa7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa82:	e1aa      	b.n	800adda <UART_SetConfig+0x5a2>
 800aa84:	2320      	movs	r3, #32
 800aa86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa8a:	e1a6      	b.n	800adda <UART_SetConfig+0x5a2>
 800aa8c:	2340      	movs	r3, #64	; 0x40
 800aa8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa92:	e1a2      	b.n	800adda <UART_SetConfig+0x5a2>
 800aa94:	2380      	movs	r3, #128	; 0x80
 800aa96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa9a:	e19e      	b.n	800adda <UART_SetConfig+0x5a2>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a37      	ldr	r2, [pc, #220]	; (800ab80 <UART_SetConfig+0x348>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d130      	bne.n	800ab08 <UART_SetConfig+0x2d0>
 800aaa6:	4b33      	ldr	r3, [pc, #204]	; (800ab74 <UART_SetConfig+0x33c>)
 800aaa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaaa:	f003 0307 	and.w	r3, r3, #7
 800aaae:	2b05      	cmp	r3, #5
 800aab0:	d826      	bhi.n	800ab00 <UART_SetConfig+0x2c8>
 800aab2:	a201      	add	r2, pc, #4	; (adr r2, 800aab8 <UART_SetConfig+0x280>)
 800aab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aab8:	0800aad1 	.word	0x0800aad1
 800aabc:	0800aad9 	.word	0x0800aad9
 800aac0:	0800aae1 	.word	0x0800aae1
 800aac4:	0800aae9 	.word	0x0800aae9
 800aac8:	0800aaf1 	.word	0x0800aaf1
 800aacc:	0800aaf9 	.word	0x0800aaf9
 800aad0:	2300      	movs	r3, #0
 800aad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aad6:	e180      	b.n	800adda <UART_SetConfig+0x5a2>
 800aad8:	2304      	movs	r3, #4
 800aada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aade:	e17c      	b.n	800adda <UART_SetConfig+0x5a2>
 800aae0:	2308      	movs	r3, #8
 800aae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aae6:	e178      	b.n	800adda <UART_SetConfig+0x5a2>
 800aae8:	2310      	movs	r3, #16
 800aaea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaee:	e174      	b.n	800adda <UART_SetConfig+0x5a2>
 800aaf0:	2320      	movs	r3, #32
 800aaf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaf6:	e170      	b.n	800adda <UART_SetConfig+0x5a2>
 800aaf8:	2340      	movs	r3, #64	; 0x40
 800aafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aafe:	e16c      	b.n	800adda <UART_SetConfig+0x5a2>
 800ab00:	2380      	movs	r3, #128	; 0x80
 800ab02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab06:	e168      	b.n	800adda <UART_SetConfig+0x5a2>
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a1d      	ldr	r2, [pc, #116]	; (800ab84 <UART_SetConfig+0x34c>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d142      	bne.n	800ab98 <UART_SetConfig+0x360>
 800ab12:	4b18      	ldr	r3, [pc, #96]	; (800ab74 <UART_SetConfig+0x33c>)
 800ab14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab16:	f003 0307 	and.w	r3, r3, #7
 800ab1a:	2b05      	cmp	r3, #5
 800ab1c:	d838      	bhi.n	800ab90 <UART_SetConfig+0x358>
 800ab1e:	a201      	add	r2, pc, #4	; (adr r2, 800ab24 <UART_SetConfig+0x2ec>)
 800ab20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab24:	0800ab3d 	.word	0x0800ab3d
 800ab28:	0800ab45 	.word	0x0800ab45
 800ab2c:	0800ab4d 	.word	0x0800ab4d
 800ab30:	0800ab55 	.word	0x0800ab55
 800ab34:	0800ab5d 	.word	0x0800ab5d
 800ab38:	0800ab89 	.word	0x0800ab89
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab42:	e14a      	b.n	800adda <UART_SetConfig+0x5a2>
 800ab44:	2304      	movs	r3, #4
 800ab46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab4a:	e146      	b.n	800adda <UART_SetConfig+0x5a2>
 800ab4c:	2308      	movs	r3, #8
 800ab4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab52:	e142      	b.n	800adda <UART_SetConfig+0x5a2>
 800ab54:	2310      	movs	r3, #16
 800ab56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab5a:	e13e      	b.n	800adda <UART_SetConfig+0x5a2>
 800ab5c:	2320      	movs	r3, #32
 800ab5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab62:	e13a      	b.n	800adda <UART_SetConfig+0x5a2>
 800ab64:	cfff69f3 	.word	0xcfff69f3
 800ab68:	58000c00 	.word	0x58000c00
 800ab6c:	11fff4ff 	.word	0x11fff4ff
 800ab70:	40011000 	.word	0x40011000
 800ab74:	58024400 	.word	0x58024400
 800ab78:	40004400 	.word	0x40004400
 800ab7c:	40004800 	.word	0x40004800
 800ab80:	40004c00 	.word	0x40004c00
 800ab84:	40005000 	.word	0x40005000
 800ab88:	2340      	movs	r3, #64	; 0x40
 800ab8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab8e:	e124      	b.n	800adda <UART_SetConfig+0x5a2>
 800ab90:	2380      	movs	r3, #128	; 0x80
 800ab92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab96:	e120      	b.n	800adda <UART_SetConfig+0x5a2>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4acc      	ldr	r2, [pc, #816]	; (800aed0 <UART_SetConfig+0x698>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d176      	bne.n	800ac90 <UART_SetConfig+0x458>
 800aba2:	4bcc      	ldr	r3, [pc, #816]	; (800aed4 <UART_SetConfig+0x69c>)
 800aba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aba6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abaa:	2b28      	cmp	r3, #40	; 0x28
 800abac:	d86c      	bhi.n	800ac88 <UART_SetConfig+0x450>
 800abae:	a201      	add	r2, pc, #4	; (adr r2, 800abb4 <UART_SetConfig+0x37c>)
 800abb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb4:	0800ac59 	.word	0x0800ac59
 800abb8:	0800ac89 	.word	0x0800ac89
 800abbc:	0800ac89 	.word	0x0800ac89
 800abc0:	0800ac89 	.word	0x0800ac89
 800abc4:	0800ac89 	.word	0x0800ac89
 800abc8:	0800ac89 	.word	0x0800ac89
 800abcc:	0800ac89 	.word	0x0800ac89
 800abd0:	0800ac89 	.word	0x0800ac89
 800abd4:	0800ac61 	.word	0x0800ac61
 800abd8:	0800ac89 	.word	0x0800ac89
 800abdc:	0800ac89 	.word	0x0800ac89
 800abe0:	0800ac89 	.word	0x0800ac89
 800abe4:	0800ac89 	.word	0x0800ac89
 800abe8:	0800ac89 	.word	0x0800ac89
 800abec:	0800ac89 	.word	0x0800ac89
 800abf0:	0800ac89 	.word	0x0800ac89
 800abf4:	0800ac69 	.word	0x0800ac69
 800abf8:	0800ac89 	.word	0x0800ac89
 800abfc:	0800ac89 	.word	0x0800ac89
 800ac00:	0800ac89 	.word	0x0800ac89
 800ac04:	0800ac89 	.word	0x0800ac89
 800ac08:	0800ac89 	.word	0x0800ac89
 800ac0c:	0800ac89 	.word	0x0800ac89
 800ac10:	0800ac89 	.word	0x0800ac89
 800ac14:	0800ac71 	.word	0x0800ac71
 800ac18:	0800ac89 	.word	0x0800ac89
 800ac1c:	0800ac89 	.word	0x0800ac89
 800ac20:	0800ac89 	.word	0x0800ac89
 800ac24:	0800ac89 	.word	0x0800ac89
 800ac28:	0800ac89 	.word	0x0800ac89
 800ac2c:	0800ac89 	.word	0x0800ac89
 800ac30:	0800ac89 	.word	0x0800ac89
 800ac34:	0800ac79 	.word	0x0800ac79
 800ac38:	0800ac89 	.word	0x0800ac89
 800ac3c:	0800ac89 	.word	0x0800ac89
 800ac40:	0800ac89 	.word	0x0800ac89
 800ac44:	0800ac89 	.word	0x0800ac89
 800ac48:	0800ac89 	.word	0x0800ac89
 800ac4c:	0800ac89 	.word	0x0800ac89
 800ac50:	0800ac89 	.word	0x0800ac89
 800ac54:	0800ac81 	.word	0x0800ac81
 800ac58:	2301      	movs	r3, #1
 800ac5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac5e:	e0bc      	b.n	800adda <UART_SetConfig+0x5a2>
 800ac60:	2304      	movs	r3, #4
 800ac62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac66:	e0b8      	b.n	800adda <UART_SetConfig+0x5a2>
 800ac68:	2308      	movs	r3, #8
 800ac6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac6e:	e0b4      	b.n	800adda <UART_SetConfig+0x5a2>
 800ac70:	2310      	movs	r3, #16
 800ac72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac76:	e0b0      	b.n	800adda <UART_SetConfig+0x5a2>
 800ac78:	2320      	movs	r3, #32
 800ac7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac7e:	e0ac      	b.n	800adda <UART_SetConfig+0x5a2>
 800ac80:	2340      	movs	r3, #64	; 0x40
 800ac82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac86:	e0a8      	b.n	800adda <UART_SetConfig+0x5a2>
 800ac88:	2380      	movs	r3, #128	; 0x80
 800ac8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ac8e:	e0a4      	b.n	800adda <UART_SetConfig+0x5a2>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a90      	ldr	r2, [pc, #576]	; (800aed8 <UART_SetConfig+0x6a0>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d130      	bne.n	800acfc <UART_SetConfig+0x4c4>
 800ac9a:	4b8e      	ldr	r3, [pc, #568]	; (800aed4 <UART_SetConfig+0x69c>)
 800ac9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac9e:	f003 0307 	and.w	r3, r3, #7
 800aca2:	2b05      	cmp	r3, #5
 800aca4:	d826      	bhi.n	800acf4 <UART_SetConfig+0x4bc>
 800aca6:	a201      	add	r2, pc, #4	; (adr r2, 800acac <UART_SetConfig+0x474>)
 800aca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acac:	0800acc5 	.word	0x0800acc5
 800acb0:	0800accd 	.word	0x0800accd
 800acb4:	0800acd5 	.word	0x0800acd5
 800acb8:	0800acdd 	.word	0x0800acdd
 800acbc:	0800ace5 	.word	0x0800ace5
 800acc0:	0800aced 	.word	0x0800aced
 800acc4:	2300      	movs	r3, #0
 800acc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acca:	e086      	b.n	800adda <UART_SetConfig+0x5a2>
 800accc:	2304      	movs	r3, #4
 800acce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acd2:	e082      	b.n	800adda <UART_SetConfig+0x5a2>
 800acd4:	2308      	movs	r3, #8
 800acd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acda:	e07e      	b.n	800adda <UART_SetConfig+0x5a2>
 800acdc:	2310      	movs	r3, #16
 800acde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ace2:	e07a      	b.n	800adda <UART_SetConfig+0x5a2>
 800ace4:	2320      	movs	r3, #32
 800ace6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acea:	e076      	b.n	800adda <UART_SetConfig+0x5a2>
 800acec:	2340      	movs	r3, #64	; 0x40
 800acee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acf2:	e072      	b.n	800adda <UART_SetConfig+0x5a2>
 800acf4:	2380      	movs	r3, #128	; 0x80
 800acf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800acfa:	e06e      	b.n	800adda <UART_SetConfig+0x5a2>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a76      	ldr	r2, [pc, #472]	; (800aedc <UART_SetConfig+0x6a4>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d130      	bne.n	800ad68 <UART_SetConfig+0x530>
 800ad06:	4b73      	ldr	r3, [pc, #460]	; (800aed4 <UART_SetConfig+0x69c>)
 800ad08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad0a:	f003 0307 	and.w	r3, r3, #7
 800ad0e:	2b05      	cmp	r3, #5
 800ad10:	d826      	bhi.n	800ad60 <UART_SetConfig+0x528>
 800ad12:	a201      	add	r2, pc, #4	; (adr r2, 800ad18 <UART_SetConfig+0x4e0>)
 800ad14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad18:	0800ad31 	.word	0x0800ad31
 800ad1c:	0800ad39 	.word	0x0800ad39
 800ad20:	0800ad41 	.word	0x0800ad41
 800ad24:	0800ad49 	.word	0x0800ad49
 800ad28:	0800ad51 	.word	0x0800ad51
 800ad2c:	0800ad59 	.word	0x0800ad59
 800ad30:	2300      	movs	r3, #0
 800ad32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad36:	e050      	b.n	800adda <UART_SetConfig+0x5a2>
 800ad38:	2304      	movs	r3, #4
 800ad3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad3e:	e04c      	b.n	800adda <UART_SetConfig+0x5a2>
 800ad40:	2308      	movs	r3, #8
 800ad42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad46:	e048      	b.n	800adda <UART_SetConfig+0x5a2>
 800ad48:	2310      	movs	r3, #16
 800ad4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad4e:	e044      	b.n	800adda <UART_SetConfig+0x5a2>
 800ad50:	2320      	movs	r3, #32
 800ad52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad56:	e040      	b.n	800adda <UART_SetConfig+0x5a2>
 800ad58:	2340      	movs	r3, #64	; 0x40
 800ad5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad5e:	e03c      	b.n	800adda <UART_SetConfig+0x5a2>
 800ad60:	2380      	movs	r3, #128	; 0x80
 800ad62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ad66:	e038      	b.n	800adda <UART_SetConfig+0x5a2>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	4a5c      	ldr	r2, [pc, #368]	; (800aee0 <UART_SetConfig+0x6a8>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d130      	bne.n	800add4 <UART_SetConfig+0x59c>
 800ad72:	4b58      	ldr	r3, [pc, #352]	; (800aed4 <UART_SetConfig+0x69c>)
 800ad74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad76:	f003 0307 	and.w	r3, r3, #7
 800ad7a:	2b05      	cmp	r3, #5
 800ad7c:	d826      	bhi.n	800adcc <UART_SetConfig+0x594>
 800ad7e:	a201      	add	r2, pc, #4	; (adr r2, 800ad84 <UART_SetConfig+0x54c>)
 800ad80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad84:	0800ad9d 	.word	0x0800ad9d
 800ad88:	0800ada5 	.word	0x0800ada5
 800ad8c:	0800adad 	.word	0x0800adad
 800ad90:	0800adb5 	.word	0x0800adb5
 800ad94:	0800adbd 	.word	0x0800adbd
 800ad98:	0800adc5 	.word	0x0800adc5
 800ad9c:	2302      	movs	r3, #2
 800ad9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ada2:	e01a      	b.n	800adda <UART_SetConfig+0x5a2>
 800ada4:	2304      	movs	r3, #4
 800ada6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adaa:	e016      	b.n	800adda <UART_SetConfig+0x5a2>
 800adac:	2308      	movs	r3, #8
 800adae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adb2:	e012      	b.n	800adda <UART_SetConfig+0x5a2>
 800adb4:	2310      	movs	r3, #16
 800adb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adba:	e00e      	b.n	800adda <UART_SetConfig+0x5a2>
 800adbc:	2320      	movs	r3, #32
 800adbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adc2:	e00a      	b.n	800adda <UART_SetConfig+0x5a2>
 800adc4:	2340      	movs	r3, #64	; 0x40
 800adc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800adca:	e006      	b.n	800adda <UART_SetConfig+0x5a2>
 800adcc:	2380      	movs	r3, #128	; 0x80
 800adce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800add2:	e002      	b.n	800adda <UART_SetConfig+0x5a2>
 800add4:	2380      	movs	r3, #128	; 0x80
 800add6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4a40      	ldr	r2, [pc, #256]	; (800aee0 <UART_SetConfig+0x6a8>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	f040 80ef 	bne.w	800afc4 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ade6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800adea:	2b20      	cmp	r3, #32
 800adec:	dc46      	bgt.n	800ae7c <UART_SetConfig+0x644>
 800adee:	2b02      	cmp	r3, #2
 800adf0:	f2c0 8081 	blt.w	800aef6 <UART_SetConfig+0x6be>
 800adf4:	3b02      	subs	r3, #2
 800adf6:	2b1e      	cmp	r3, #30
 800adf8:	d87d      	bhi.n	800aef6 <UART_SetConfig+0x6be>
 800adfa:	a201      	add	r2, pc, #4	; (adr r2, 800ae00 <UART_SetConfig+0x5c8>)
 800adfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae00:	0800ae83 	.word	0x0800ae83
 800ae04:	0800aef7 	.word	0x0800aef7
 800ae08:	0800ae8b 	.word	0x0800ae8b
 800ae0c:	0800aef7 	.word	0x0800aef7
 800ae10:	0800aef7 	.word	0x0800aef7
 800ae14:	0800aef7 	.word	0x0800aef7
 800ae18:	0800ae9b 	.word	0x0800ae9b
 800ae1c:	0800aef7 	.word	0x0800aef7
 800ae20:	0800aef7 	.word	0x0800aef7
 800ae24:	0800aef7 	.word	0x0800aef7
 800ae28:	0800aef7 	.word	0x0800aef7
 800ae2c:	0800aef7 	.word	0x0800aef7
 800ae30:	0800aef7 	.word	0x0800aef7
 800ae34:	0800aef7 	.word	0x0800aef7
 800ae38:	0800aeab 	.word	0x0800aeab
 800ae3c:	0800aef7 	.word	0x0800aef7
 800ae40:	0800aef7 	.word	0x0800aef7
 800ae44:	0800aef7 	.word	0x0800aef7
 800ae48:	0800aef7 	.word	0x0800aef7
 800ae4c:	0800aef7 	.word	0x0800aef7
 800ae50:	0800aef7 	.word	0x0800aef7
 800ae54:	0800aef7 	.word	0x0800aef7
 800ae58:	0800aef7 	.word	0x0800aef7
 800ae5c:	0800aef7 	.word	0x0800aef7
 800ae60:	0800aef7 	.word	0x0800aef7
 800ae64:	0800aef7 	.word	0x0800aef7
 800ae68:	0800aef7 	.word	0x0800aef7
 800ae6c:	0800aef7 	.word	0x0800aef7
 800ae70:	0800aef7 	.word	0x0800aef7
 800ae74:	0800aef7 	.word	0x0800aef7
 800ae78:	0800aee9 	.word	0x0800aee9
 800ae7c:	2b40      	cmp	r3, #64	; 0x40
 800ae7e:	d036      	beq.n	800aeee <UART_SetConfig+0x6b6>
 800ae80:	e039      	b.n	800aef6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ae82:	f7fc ff2d 	bl	8007ce0 <HAL_RCCEx_GetD3PCLK1Freq>
 800ae86:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ae88:	e03b      	b.n	800af02 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae8a:	f107 0314 	add.w	r3, r7, #20
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fc ff3c 	bl	8007d0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae98:	e033      	b.n	800af02 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae9a:	f107 0308 	add.w	r3, r7, #8
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fd f888 	bl	8007fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aea8:	e02b      	b.n	800af02 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeaa:	4b0a      	ldr	r3, [pc, #40]	; (800aed4 <UART_SetConfig+0x69c>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 0320 	and.w	r3, r3, #32
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d009      	beq.n	800aeca <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aeb6:	4b07      	ldr	r3, [pc, #28]	; (800aed4 <UART_SetConfig+0x69c>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	08db      	lsrs	r3, r3, #3
 800aebc:	f003 0303 	and.w	r3, r3, #3
 800aec0:	4a08      	ldr	r2, [pc, #32]	; (800aee4 <UART_SetConfig+0x6ac>)
 800aec2:	fa22 f303 	lsr.w	r3, r2, r3
 800aec6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aec8:	e01b      	b.n	800af02 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800aeca:	4b06      	ldr	r3, [pc, #24]	; (800aee4 <UART_SetConfig+0x6ac>)
 800aecc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aece:	e018      	b.n	800af02 <UART_SetConfig+0x6ca>
 800aed0:	40011400 	.word	0x40011400
 800aed4:	58024400 	.word	0x58024400
 800aed8:	40007800 	.word	0x40007800
 800aedc:	40007c00 	.word	0x40007c00
 800aee0:	58000c00 	.word	0x58000c00
 800aee4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aee8:	4bc4      	ldr	r3, [pc, #784]	; (800b1fc <UART_SetConfig+0x9c4>)
 800aeea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aeec:	e009      	b.n	800af02 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aeee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aef2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aef4:	e005      	b.n	800af02 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800aef6:	2300      	movs	r3, #0
 800aef8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800aefa:	2301      	movs	r3, #1
 800aefc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800af00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800af02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 81da 	beq.w	800b2be <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0e:	4abc      	ldr	r2, [pc, #752]	; (800b200 <UART_SetConfig+0x9c8>)
 800af10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af14:	461a      	mov	r2, r3
 800af16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af18:	fbb3 f3f2 	udiv	r3, r3, r2
 800af1c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685a      	ldr	r2, [r3, #4]
 800af22:	4613      	mov	r3, r2
 800af24:	005b      	lsls	r3, r3, #1
 800af26:	4413      	add	r3, r2
 800af28:	6a3a      	ldr	r2, [r7, #32]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d305      	bcc.n	800af3a <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	685b      	ldr	r3, [r3, #4]
 800af32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800af34:	6a3a      	ldr	r2, [r7, #32]
 800af36:	429a      	cmp	r2, r3
 800af38:	d903      	bls.n	800af42 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800af3a:	2301      	movs	r3, #1
 800af3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800af40:	e1bd      	b.n	800b2be <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af44:	4618      	mov	r0, r3
 800af46:	f04f 0100 	mov.w	r1, #0
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4e:	4aac      	ldr	r2, [pc, #688]	; (800b200 <UART_SetConfig+0x9c8>)
 800af50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800af54:	b29a      	uxth	r2, r3
 800af56:	f04f 0300 	mov.w	r3, #0
 800af5a:	f7f5 fa19 	bl	8000390 <__aeabi_uldivmod>
 800af5e:	4602      	mov	r2, r0
 800af60:	460b      	mov	r3, r1
 800af62:	4610      	mov	r0, r2
 800af64:	4619      	mov	r1, r3
 800af66:	f04f 0200 	mov.w	r2, #0
 800af6a:	f04f 0300 	mov.w	r3, #0
 800af6e:	020b      	lsls	r3, r1, #8
 800af70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800af74:	0202      	lsls	r2, r0, #8
 800af76:	6879      	ldr	r1, [r7, #4]
 800af78:	6849      	ldr	r1, [r1, #4]
 800af7a:	0849      	lsrs	r1, r1, #1
 800af7c:	4608      	mov	r0, r1
 800af7e:	f04f 0100 	mov.w	r1, #0
 800af82:	1814      	adds	r4, r2, r0
 800af84:	eb43 0501 	adc.w	r5, r3, r1
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	461a      	mov	r2, r3
 800af8e:	f04f 0300 	mov.w	r3, #0
 800af92:	4620      	mov	r0, r4
 800af94:	4629      	mov	r1, r5
 800af96:	f7f5 f9fb 	bl	8000390 <__aeabi_uldivmod>
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	4613      	mov	r3, r2
 800afa0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800afa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afa8:	d308      	bcc.n	800afbc <UART_SetConfig+0x784>
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afb0:	d204      	bcs.n	800afbc <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afb8:	60da      	str	r2, [r3, #12]
 800afba:	e180      	b.n	800b2be <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800afc2:	e17c      	b.n	800b2be <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	69db      	ldr	r3, [r3, #28]
 800afc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afcc:	f040 80be 	bne.w	800b14c <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800afd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800afd4:	2b20      	cmp	r3, #32
 800afd6:	dc49      	bgt.n	800b06c <UART_SetConfig+0x834>
 800afd8:	2b00      	cmp	r3, #0
 800afda:	db7c      	blt.n	800b0d6 <UART_SetConfig+0x89e>
 800afdc:	2b20      	cmp	r3, #32
 800afde:	d87a      	bhi.n	800b0d6 <UART_SetConfig+0x89e>
 800afe0:	a201      	add	r2, pc, #4	; (adr r2, 800afe8 <UART_SetConfig+0x7b0>)
 800afe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe6:	bf00      	nop
 800afe8:	0800b073 	.word	0x0800b073
 800afec:	0800b07b 	.word	0x0800b07b
 800aff0:	0800b0d7 	.word	0x0800b0d7
 800aff4:	0800b0d7 	.word	0x0800b0d7
 800aff8:	0800b083 	.word	0x0800b083
 800affc:	0800b0d7 	.word	0x0800b0d7
 800b000:	0800b0d7 	.word	0x0800b0d7
 800b004:	0800b0d7 	.word	0x0800b0d7
 800b008:	0800b093 	.word	0x0800b093
 800b00c:	0800b0d7 	.word	0x0800b0d7
 800b010:	0800b0d7 	.word	0x0800b0d7
 800b014:	0800b0d7 	.word	0x0800b0d7
 800b018:	0800b0d7 	.word	0x0800b0d7
 800b01c:	0800b0d7 	.word	0x0800b0d7
 800b020:	0800b0d7 	.word	0x0800b0d7
 800b024:	0800b0d7 	.word	0x0800b0d7
 800b028:	0800b0a3 	.word	0x0800b0a3
 800b02c:	0800b0d7 	.word	0x0800b0d7
 800b030:	0800b0d7 	.word	0x0800b0d7
 800b034:	0800b0d7 	.word	0x0800b0d7
 800b038:	0800b0d7 	.word	0x0800b0d7
 800b03c:	0800b0d7 	.word	0x0800b0d7
 800b040:	0800b0d7 	.word	0x0800b0d7
 800b044:	0800b0d7 	.word	0x0800b0d7
 800b048:	0800b0d7 	.word	0x0800b0d7
 800b04c:	0800b0d7 	.word	0x0800b0d7
 800b050:	0800b0d7 	.word	0x0800b0d7
 800b054:	0800b0d7 	.word	0x0800b0d7
 800b058:	0800b0d7 	.word	0x0800b0d7
 800b05c:	0800b0d7 	.word	0x0800b0d7
 800b060:	0800b0d7 	.word	0x0800b0d7
 800b064:	0800b0d7 	.word	0x0800b0d7
 800b068:	0800b0c9 	.word	0x0800b0c9
 800b06c:	2b40      	cmp	r3, #64	; 0x40
 800b06e:	d02e      	beq.n	800b0ce <UART_SetConfig+0x896>
 800b070:	e031      	b.n	800b0d6 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b072:	f7fb fec9 	bl	8006e08 <HAL_RCC_GetPCLK1Freq>
 800b076:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b078:	e033      	b.n	800b0e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b07a:	f7fb fedb 	bl	8006e34 <HAL_RCC_GetPCLK2Freq>
 800b07e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b080:	e02f      	b.n	800b0e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b082:	f107 0314 	add.w	r3, r7, #20
 800b086:	4618      	mov	r0, r3
 800b088:	f7fc fe40 	bl	8007d0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b090:	e027      	b.n	800b0e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b092:	f107 0308 	add.w	r3, r7, #8
 800b096:	4618      	mov	r0, r3
 800b098:	f7fc ff8c 	bl	8007fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0a0:	e01f      	b.n	800b0e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b0a2:	4b58      	ldr	r3, [pc, #352]	; (800b204 <UART_SetConfig+0x9cc>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f003 0320 	and.w	r3, r3, #32
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d009      	beq.n	800b0c2 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b0ae:	4b55      	ldr	r3, [pc, #340]	; (800b204 <UART_SetConfig+0x9cc>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	08db      	lsrs	r3, r3, #3
 800b0b4:	f003 0303 	and.w	r3, r3, #3
 800b0b8:	4a53      	ldr	r2, [pc, #332]	; (800b208 <UART_SetConfig+0x9d0>)
 800b0ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b0be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b0c0:	e00f      	b.n	800b0e2 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800b0c2:	4b51      	ldr	r3, [pc, #324]	; (800b208 <UART_SetConfig+0x9d0>)
 800b0c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0c6:	e00c      	b.n	800b0e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b0c8:	4b4c      	ldr	r3, [pc, #304]	; (800b1fc <UART_SetConfig+0x9c4>)
 800b0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0cc:	e009      	b.n	800b0e2 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b0d4:	e005      	b.n	800b0e2 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b0da:	2301      	movs	r3, #1
 800b0dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b0e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	f000 80ea 	beq.w	800b2be <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ee:	4a44      	ldr	r2, [pc, #272]	; (800b200 <UART_SetConfig+0x9c8>)
 800b0f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b0fc:	005a      	lsls	r2, r3, #1
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	085b      	lsrs	r3, r3, #1
 800b104:	441a      	add	r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b10e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b112:	2b0f      	cmp	r3, #15
 800b114:	d916      	bls.n	800b144 <UART_SetConfig+0x90c>
 800b116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b11c:	d212      	bcs.n	800b144 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b120:	b29b      	uxth	r3, r3
 800b122:	f023 030f 	bic.w	r3, r3, #15
 800b126:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12a:	085b      	lsrs	r3, r3, #1
 800b12c:	b29b      	uxth	r3, r3
 800b12e:	f003 0307 	and.w	r3, r3, #7
 800b132:	b29a      	uxth	r2, r3
 800b134:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b136:	4313      	orrs	r3, r2
 800b138:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b140:	60da      	str	r2, [r3, #12]
 800b142:	e0bc      	b.n	800b2be <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800b14a:	e0b8      	b.n	800b2be <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b14c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b150:	2b20      	cmp	r3, #32
 800b152:	dc4b      	bgt.n	800b1ec <UART_SetConfig+0x9b4>
 800b154:	2b00      	cmp	r3, #0
 800b156:	f2c0 8087 	blt.w	800b268 <UART_SetConfig+0xa30>
 800b15a:	2b20      	cmp	r3, #32
 800b15c:	f200 8084 	bhi.w	800b268 <UART_SetConfig+0xa30>
 800b160:	a201      	add	r2, pc, #4	; (adr r2, 800b168 <UART_SetConfig+0x930>)
 800b162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b166:	bf00      	nop
 800b168:	0800b1f3 	.word	0x0800b1f3
 800b16c:	0800b20d 	.word	0x0800b20d
 800b170:	0800b269 	.word	0x0800b269
 800b174:	0800b269 	.word	0x0800b269
 800b178:	0800b215 	.word	0x0800b215
 800b17c:	0800b269 	.word	0x0800b269
 800b180:	0800b269 	.word	0x0800b269
 800b184:	0800b269 	.word	0x0800b269
 800b188:	0800b225 	.word	0x0800b225
 800b18c:	0800b269 	.word	0x0800b269
 800b190:	0800b269 	.word	0x0800b269
 800b194:	0800b269 	.word	0x0800b269
 800b198:	0800b269 	.word	0x0800b269
 800b19c:	0800b269 	.word	0x0800b269
 800b1a0:	0800b269 	.word	0x0800b269
 800b1a4:	0800b269 	.word	0x0800b269
 800b1a8:	0800b235 	.word	0x0800b235
 800b1ac:	0800b269 	.word	0x0800b269
 800b1b0:	0800b269 	.word	0x0800b269
 800b1b4:	0800b269 	.word	0x0800b269
 800b1b8:	0800b269 	.word	0x0800b269
 800b1bc:	0800b269 	.word	0x0800b269
 800b1c0:	0800b269 	.word	0x0800b269
 800b1c4:	0800b269 	.word	0x0800b269
 800b1c8:	0800b269 	.word	0x0800b269
 800b1cc:	0800b269 	.word	0x0800b269
 800b1d0:	0800b269 	.word	0x0800b269
 800b1d4:	0800b269 	.word	0x0800b269
 800b1d8:	0800b269 	.word	0x0800b269
 800b1dc:	0800b269 	.word	0x0800b269
 800b1e0:	0800b269 	.word	0x0800b269
 800b1e4:	0800b269 	.word	0x0800b269
 800b1e8:	0800b25b 	.word	0x0800b25b
 800b1ec:	2b40      	cmp	r3, #64	; 0x40
 800b1ee:	d037      	beq.n	800b260 <UART_SetConfig+0xa28>
 800b1f0:	e03a      	b.n	800b268 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1f2:	f7fb fe09 	bl	8006e08 <HAL_RCC_GetPCLK1Freq>
 800b1f6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b1f8:	e03c      	b.n	800b274 <UART_SetConfig+0xa3c>
 800b1fa:	bf00      	nop
 800b1fc:	003d0900 	.word	0x003d0900
 800b200:	0800ef40 	.word	0x0800ef40
 800b204:	58024400 	.word	0x58024400
 800b208:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b20c:	f7fb fe12 	bl	8006e34 <HAL_RCC_GetPCLK2Freq>
 800b210:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800b212:	e02f      	b.n	800b274 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b214:	f107 0314 	add.w	r3, r7, #20
 800b218:	4618      	mov	r0, r3
 800b21a:	f7fc fd77 	bl	8007d0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b21e:	69bb      	ldr	r3, [r7, #24]
 800b220:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b222:	e027      	b.n	800b274 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b224:	f107 0308 	add.w	r3, r7, #8
 800b228:	4618      	mov	r0, r3
 800b22a:	f7fc fec3 	bl	8007fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b232:	e01f      	b.n	800b274 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b234:	4b2c      	ldr	r3, [pc, #176]	; (800b2e8 <UART_SetConfig+0xab0>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 0320 	and.w	r3, r3, #32
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d009      	beq.n	800b254 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b240:	4b29      	ldr	r3, [pc, #164]	; (800b2e8 <UART_SetConfig+0xab0>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	08db      	lsrs	r3, r3, #3
 800b246:	f003 0303 	and.w	r3, r3, #3
 800b24a:	4a28      	ldr	r2, [pc, #160]	; (800b2ec <UART_SetConfig+0xab4>)
 800b24c:	fa22 f303 	lsr.w	r3, r2, r3
 800b250:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b252:	e00f      	b.n	800b274 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800b254:	4b25      	ldr	r3, [pc, #148]	; (800b2ec <UART_SetConfig+0xab4>)
 800b256:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b258:	e00c      	b.n	800b274 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b25a:	4b25      	ldr	r3, [pc, #148]	; (800b2f0 <UART_SetConfig+0xab8>)
 800b25c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b25e:	e009      	b.n	800b274 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b260:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b264:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800b266:	e005      	b.n	800b274 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800b268:	2300      	movs	r3, #0
 800b26a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800b272:	bf00      	nop
    }

    if (pclk != 0U)
 800b274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b276:	2b00      	cmp	r3, #0
 800b278:	d021      	beq.n	800b2be <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	4a1d      	ldr	r2, [pc, #116]	; (800b2f4 <UART_SetConfig+0xabc>)
 800b280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b284:	461a      	mov	r2, r3
 800b286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b288:	fbb3 f2f2 	udiv	r2, r3, r2
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	085b      	lsrs	r3, r3, #1
 800b292:	441a      	add	r2, r3
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	fbb2 f3f3 	udiv	r3, r2, r3
 800b29c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a0:	2b0f      	cmp	r3, #15
 800b2a2:	d909      	bls.n	800b2b8 <UART_SetConfig+0xa80>
 800b2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2aa:	d205      	bcs.n	800b2b8 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ae:	b29a      	uxth	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	60da      	str	r2, [r3, #12]
 800b2b6:	e002      	b.n	800b2be <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b2da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3738      	adds	r7, #56	; 0x38
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bdb0      	pop	{r4, r5, r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	58024400 	.word	0x58024400
 800b2ec:	03d09000 	.word	0x03d09000
 800b2f0:	003d0900 	.word	0x003d0900
 800b2f4:	0800ef40 	.word	0x0800ef40

0800b2f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b304:	f003 0301 	and.w	r3, r3, #1
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d00a      	beq.n	800b322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	430a      	orrs	r2, r1
 800b320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b326:	f003 0302 	and.w	r3, r3, #2
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d00a      	beq.n	800b344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	430a      	orrs	r2, r1
 800b342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b348:	f003 0304 	and.w	r3, r3, #4
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00a      	beq.n	800b366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	430a      	orrs	r2, r1
 800b364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b36a:	f003 0308 	and.w	r3, r3, #8
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00a      	beq.n	800b388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	430a      	orrs	r2, r1
 800b386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b38c:	f003 0310 	and.w	r3, r3, #16
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00a      	beq.n	800b3aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	430a      	orrs	r2, r1
 800b3a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ae:	f003 0320 	and.w	r3, r3, #32
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00a      	beq.n	800b3cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	430a      	orrs	r2, r1
 800b3ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d01a      	beq.n	800b40e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	430a      	orrs	r2, r1
 800b3ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3f6:	d10a      	bne.n	800b40e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	430a      	orrs	r2, r1
 800b40c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00a      	beq.n	800b430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	430a      	orrs	r2, r1
 800b42e:	605a      	str	r2, [r3, #4]
  }
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af02      	add	r7, sp, #8
 800b442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2200      	movs	r2, #0
 800b448:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b44c:	f7f7 fef0 	bl	8003230 <HAL_GetTick>
 800b450:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 0308 	and.w	r3, r3, #8
 800b45c:	2b08      	cmp	r3, #8
 800b45e:	d10e      	bne.n	800b47e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b464:	9300      	str	r3, [sp, #0]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2200      	movs	r2, #0
 800b46a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 f82f 	bl	800b4d2 <UART_WaitOnFlagUntilTimeout>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d001      	beq.n	800b47e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b47a:	2303      	movs	r3, #3
 800b47c:	e025      	b.n	800b4ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 0304 	and.w	r3, r3, #4
 800b488:	2b04      	cmp	r3, #4
 800b48a:	d10e      	bne.n	800b4aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b48c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b490:	9300      	str	r3, [sp, #0]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 f819 	bl	800b4d2 <UART_WaitOnFlagUntilTimeout>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	e00f      	b.n	800b4ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2220      	movs	r2, #32
 800b4ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2220      	movs	r2, #32
 800b4b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3710      	adds	r7, #16
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b09c      	sub	sp, #112	; 0x70
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	60f8      	str	r0, [r7, #12]
 800b4da:	60b9      	str	r1, [r7, #8]
 800b4dc:	603b      	str	r3, [r7, #0]
 800b4de:	4613      	mov	r3, r2
 800b4e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b4e2:	e0a9      	b.n	800b638 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b4e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b4e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ea:	f000 80a5 	beq.w	800b638 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4ee:	f7f7 fe9f 	bl	8003230 <HAL_GetTick>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	1ad3      	subs	r3, r2, r3
 800b4f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d302      	bcc.n	800b504 <UART_WaitOnFlagUntilTimeout+0x32>
 800b4fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b500:	2b00      	cmp	r3, #0
 800b502:	d140      	bne.n	800b586 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b50a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b50c:	e853 3f00 	ldrex	r3, [r3]
 800b510:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b514:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b518:	667b      	str	r3, [r7, #100]	; 0x64
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	461a      	mov	r2, r3
 800b520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b522:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b524:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b526:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b528:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b52a:	e841 2300 	strex	r3, r2, [r1]
 800b52e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1e6      	bne.n	800b504 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3308      	adds	r3, #8
 800b53c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b540:	e853 3f00 	ldrex	r3, [r3]
 800b544:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b548:	f023 0301 	bic.w	r3, r3, #1
 800b54c:	663b      	str	r3, [r7, #96]	; 0x60
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	3308      	adds	r3, #8
 800b554:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b556:	64ba      	str	r2, [r7, #72]	; 0x48
 800b558:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b55a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b55c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b55e:	e841 2300 	strex	r3, r2, [r1]
 800b562:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b566:	2b00      	cmp	r3, #0
 800b568:	d1e5      	bne.n	800b536 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2220      	movs	r2, #32
 800b56e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2220      	movs	r2, #32
 800b576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2200      	movs	r2, #0
 800b57e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b582:	2303      	movs	r3, #3
 800b584:	e069      	b.n	800b65a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f003 0304 	and.w	r3, r3, #4
 800b590:	2b00      	cmp	r3, #0
 800b592:	d051      	beq.n	800b638 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b59e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b5a2:	d149      	bne.n	800b638 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b5ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b6:	e853 3f00 	ldrex	r3, [r3]
 800b5ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b5c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5cc:	637b      	str	r3, [r7, #52]	; 0x34
 800b5ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b5d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5d4:	e841 2300 	strex	r3, r2, [r1]
 800b5d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d1e6      	bne.n	800b5ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	3308      	adds	r3, #8
 800b5e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	e853 3f00 	ldrex	r3, [r3]
 800b5ee:	613b      	str	r3, [r7, #16]
   return(result);
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	f023 0301 	bic.w	r3, r3, #1
 800b5f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	3308      	adds	r3, #8
 800b5fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b600:	623a      	str	r2, [r7, #32]
 800b602:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b604:	69f9      	ldr	r1, [r7, #28]
 800b606:	6a3a      	ldr	r2, [r7, #32]
 800b608:	e841 2300 	strex	r3, r2, [r1]
 800b60c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d1e5      	bne.n	800b5e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2220      	movs	r2, #32
 800b618:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2220      	movs	r2, #32
 800b620:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2220      	movs	r2, #32
 800b628:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	2200      	movs	r2, #0
 800b630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b634:	2303      	movs	r3, #3
 800b636:	e010      	b.n	800b65a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	69da      	ldr	r2, [r3, #28]
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	4013      	ands	r3, r2
 800b642:	68ba      	ldr	r2, [r7, #8]
 800b644:	429a      	cmp	r2, r3
 800b646:	bf0c      	ite	eq
 800b648:	2301      	moveq	r3, #1
 800b64a:	2300      	movne	r3, #0
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	461a      	mov	r2, r3
 800b650:	79fb      	ldrb	r3, [r7, #7]
 800b652:	429a      	cmp	r2, r3
 800b654:	f43f af46 	beq.w	800b4e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3770      	adds	r7, #112	; 0x70
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
	...

0800b664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b664:	b480      	push	{r7}
 800b666:	b095      	sub	sp, #84	; 0x54
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b674:	e853 3f00 	ldrex	r3, [r3]
 800b678:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b680:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	461a      	mov	r2, r3
 800b688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b68a:	643b      	str	r3, [r7, #64]	; 0x40
 800b68c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b690:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b692:	e841 2300 	strex	r3, r2, [r1]
 800b696:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1e6      	bne.n	800b66c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3308      	adds	r3, #8
 800b6a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a6:	6a3b      	ldr	r3, [r7, #32]
 800b6a8:	e853 3f00 	ldrex	r3, [r3]
 800b6ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800b6ae:	69fa      	ldr	r2, [r7, #28]
 800b6b0:	4b1e      	ldr	r3, [pc, #120]	; (800b72c <UART_EndRxTransfer+0xc8>)
 800b6b2:	4013      	ands	r3, r2
 800b6b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	3308      	adds	r3, #8
 800b6bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b6be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b6c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b6c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6c6:	e841 2300 	strex	r3, r2, [r1]
 800b6ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1e5      	bne.n	800b69e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b6d6:	2b01      	cmp	r3, #1
 800b6d8:	d118      	bne.n	800b70c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	e853 3f00 	ldrex	r3, [r3]
 800b6e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	f023 0310 	bic.w	r3, r3, #16
 800b6ee:	647b      	str	r3, [r7, #68]	; 0x44
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6f8:	61bb      	str	r3, [r7, #24]
 800b6fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fc:	6979      	ldr	r1, [r7, #20]
 800b6fe:	69ba      	ldr	r2, [r7, #24]
 800b700:	e841 2300 	strex	r3, r2, [r1]
 800b704:	613b      	str	r3, [r7, #16]
   return(result);
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d1e6      	bne.n	800b6da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2220      	movs	r2, #32
 800b710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2200      	movs	r2, #0
 800b718:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2200      	movs	r2, #0
 800b71e:	671a      	str	r2, [r3, #112]	; 0x70
}
 800b720:	bf00      	nop
 800b722:	3754      	adds	r7, #84	; 0x54
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr
 800b72c:	effffffe 	.word	0xeffffffe

0800b730 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b73c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2200      	movs	r2, #0
 800b742:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2200      	movs	r2, #0
 800b74a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f7ff f85c 	bl	800a80c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b754:	bf00      	nop
 800b756:	3710      	adds	r7, #16
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b088      	sub	sp, #32
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	e853 3f00 	ldrex	r3, [r3]
 800b770:	60bb      	str	r3, [r7, #8]
   return(result);
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b778:	61fb      	str	r3, [r7, #28]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	461a      	mov	r2, r3
 800b780:	69fb      	ldr	r3, [r7, #28]
 800b782:	61bb      	str	r3, [r7, #24]
 800b784:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b786:	6979      	ldr	r1, [r7, #20]
 800b788:	69ba      	ldr	r2, [r7, #24]
 800b78a:	e841 2300 	strex	r3, r2, [r1]
 800b78e:	613b      	str	r3, [r7, #16]
   return(result);
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d1e6      	bne.n	800b764 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	2220      	movs	r2, #32
 800b79a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f7ff f827 	bl	800a7f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b7aa:	bf00      	nop
 800b7ac:	3720      	adds	r7, #32
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b7b2:	b480      	push	{r7}
 800b7b4:	b083      	sub	sp, #12
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b7ba:	bf00      	nop
 800b7bc:	370c      	adds	r7, #12
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr

0800b7c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b7c6:	b480      	push	{r7}
 800b7c8:	b083      	sub	sp, #12
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b7ce:	bf00      	nop
 800b7d0:	370c      	adds	r7, #12
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d8:	4770      	bx	lr

0800b7da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b7da:	b480      	push	{r7}
 800b7dc:	b083      	sub	sp, #12
 800b7de:	af00      	add	r7, sp, #0
 800b7e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b7e2:	bf00      	nop
 800b7e4:	370c      	adds	r7, #12
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ec:	4770      	bx	lr

0800b7ee <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800b7ee:	b580      	push	{r7, lr}
 800b7f0:	b084      	sub	sp, #16
 800b7f2:	af00      	add	r7, sp, #0
 800b7f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d101      	bne.n	800b804 <HAL_UARTEx_EnableFifoMode+0x16>
 800b800:	2302      	movs	r3, #2
 800b802:	e02b      	b.n	800b85c <HAL_UARTEx_EnableFifoMode+0x6e>
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2201      	movs	r2, #1
 800b808:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2224      	movs	r2, #36	; 0x24
 800b810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f022 0201 	bic.w	r2, r2, #1
 800b82a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b832:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b83a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 f8c3 	bl	800b9d0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2220      	movs	r2, #32
 800b84e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b864:	b480      	push	{r7}
 800b866:	b085      	sub	sp, #20
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b872:	2b01      	cmp	r3, #1
 800b874:	d101      	bne.n	800b87a <HAL_UARTEx_DisableFifoMode+0x16>
 800b876:	2302      	movs	r3, #2
 800b878:	e027      	b.n	800b8ca <HAL_UARTEx_DisableFifoMode+0x66>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2201      	movs	r2, #1
 800b87e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2224      	movs	r2, #36	; 0x24
 800b886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f022 0201 	bic.w	r2, r2, #1
 800b8a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b8a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2220      	movs	r2, #32
 800b8bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3714      	adds	r7, #20
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d4:	4770      	bx	lr

0800b8d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b084      	sub	sp, #16
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
 800b8de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b8e6:	2b01      	cmp	r3, #1
 800b8e8:	d101      	bne.n	800b8ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b8ea:	2302      	movs	r3, #2
 800b8ec:	e02d      	b.n	800b94a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2224      	movs	r2, #36	; 0x24
 800b8fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f022 0201 	bic.w	r2, r2, #1
 800b914:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	689b      	ldr	r3, [r3, #8]
 800b91c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	683a      	ldr	r2, [r7, #0]
 800b926:	430a      	orrs	r2, r1
 800b928:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 f850 	bl	800b9d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2220      	movs	r2, #32
 800b93c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2200      	movs	r2, #0
 800b944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b084      	sub	sp, #16
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
 800b95a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b962:	2b01      	cmp	r3, #1
 800b964:	d101      	bne.n	800b96a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b966:	2302      	movs	r3, #2
 800b968:	e02d      	b.n	800b9c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2201      	movs	r2, #1
 800b96e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2224      	movs	r2, #36	; 0x24
 800b976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f022 0201 	bic.w	r2, r2, #1
 800b990:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	683a      	ldr	r2, [r7, #0]
 800b9a2:	430a      	orrs	r2, r1
 800b9a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 f812 	bl	800b9d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	68fa      	ldr	r2, [r7, #12]
 800b9b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2220      	movs	r2, #32
 800b9b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b9c4:	2300      	movs	r3, #0
}
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	3710      	adds	r7, #16
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
	...

0800b9d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b9d0:	b480      	push	{r7}
 800b9d2:	b085      	sub	sp, #20
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d108      	bne.n	800b9f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b9f0:	e031      	b.n	800ba56 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b9f2:	2310      	movs	r3, #16
 800b9f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b9f6:	2310      	movs	r3, #16
 800b9f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	0e5b      	lsrs	r3, r3, #25
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	f003 0307 	and.w	r3, r3, #7
 800ba08:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	689b      	ldr	r3, [r3, #8]
 800ba10:	0f5b      	lsrs	r3, r3, #29
 800ba12:	b2db      	uxtb	r3, r3
 800ba14:	f003 0307 	and.w	r3, r3, #7
 800ba18:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba1a:	7bbb      	ldrb	r3, [r7, #14]
 800ba1c:	7b3a      	ldrb	r2, [r7, #12]
 800ba1e:	4911      	ldr	r1, [pc, #68]	; (800ba64 <UARTEx_SetNbDataToProcess+0x94>)
 800ba20:	5c8a      	ldrb	r2, [r1, r2]
 800ba22:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ba26:	7b3a      	ldrb	r2, [r7, #12]
 800ba28:	490f      	ldr	r1, [pc, #60]	; (800ba68 <UARTEx_SetNbDataToProcess+0x98>)
 800ba2a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ba2c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba30:	b29a      	uxth	r2, r3
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba38:	7bfb      	ldrb	r3, [r7, #15]
 800ba3a:	7b7a      	ldrb	r2, [r7, #13]
 800ba3c:	4909      	ldr	r1, [pc, #36]	; (800ba64 <UARTEx_SetNbDataToProcess+0x94>)
 800ba3e:	5c8a      	ldrb	r2, [r1, r2]
 800ba40:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ba44:	7b7a      	ldrb	r2, [r7, #13]
 800ba46:	4908      	ldr	r1, [pc, #32]	; (800ba68 <UARTEx_SetNbDataToProcess+0x98>)
 800ba48:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ba4a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ba4e:	b29a      	uxth	r2, r3
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ba56:	bf00      	nop
 800ba58:	3714      	adds	r7, #20
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba60:	4770      	bx	lr
 800ba62:	bf00      	nop
 800ba64:	0800ef58 	.word	0x0800ef58
 800ba68:	0800ef60 	.word	0x0800ef60
 800ba6c:	00000000 	.word	0x00000000

0800ba70 <sin>:
 800ba70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba72:	eeb0 7b40 	vmov.f64	d7, d0
 800ba76:	ee17 3a90 	vmov	r3, s15
 800ba7a:	4a1f      	ldr	r2, [pc, #124]	; (800baf8 <sin+0x88>)
 800ba7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ba80:	4293      	cmp	r3, r2
 800ba82:	dc05      	bgt.n	800ba90 <sin+0x20>
 800ba84:	ed9f 1b1a 	vldr	d1, [pc, #104]	; 800baf0 <sin+0x80>
 800ba88:	2000      	movs	r0, #0
 800ba8a:	f000 fc65 	bl	800c358 <__kernel_sin>
 800ba8e:	e004      	b.n	800ba9a <sin+0x2a>
 800ba90:	4a1a      	ldr	r2, [pc, #104]	; (800bafc <sin+0x8c>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	dd04      	ble.n	800baa0 <sin+0x30>
 800ba96:	ee30 0b40 	vsub.f64	d0, d0, d0
 800ba9a:	b005      	add	sp, #20
 800ba9c:	f85d fb04 	ldr.w	pc, [sp], #4
 800baa0:	4668      	mov	r0, sp
 800baa2:	f000 f82d 	bl	800bb00 <__ieee754_rem_pio2>
 800baa6:	f000 0003 	and.w	r0, r0, #3
 800baaa:	2801      	cmp	r0, #1
 800baac:	d008      	beq.n	800bac0 <sin+0x50>
 800baae:	2802      	cmp	r0, #2
 800bab0:	d00d      	beq.n	800bace <sin+0x5e>
 800bab2:	b9b0      	cbnz	r0, 800bae2 <sin+0x72>
 800bab4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bab8:	ed9d 0b00 	vldr	d0, [sp]
 800babc:	2001      	movs	r0, #1
 800babe:	e7e4      	b.n	800ba8a <sin+0x1a>
 800bac0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bac4:	ed9d 0b00 	vldr	d0, [sp]
 800bac8:	f000 f95a 	bl	800bd80 <__kernel_cos>
 800bacc:	e7e5      	b.n	800ba9a <sin+0x2a>
 800bace:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bad2:	ed9d 0b00 	vldr	d0, [sp]
 800bad6:	2001      	movs	r0, #1
 800bad8:	f000 fc3e 	bl	800c358 <__kernel_sin>
 800badc:	eeb1 0b40 	vneg.f64	d0, d0
 800bae0:	e7db      	b.n	800ba9a <sin+0x2a>
 800bae2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bae6:	ed9d 0b00 	vldr	d0, [sp]
 800baea:	f000 f949 	bl	800bd80 <__kernel_cos>
 800baee:	e7f5      	b.n	800badc <sin+0x6c>
	...
 800baf8:	3fe921fb 	.word	0x3fe921fb
 800bafc:	7fefffff 	.word	0x7fefffff

0800bb00 <__ieee754_rem_pio2>:
 800bb00:	b570      	push	{r4, r5, r6, lr}
 800bb02:	eeb0 7b40 	vmov.f64	d7, d0
 800bb06:	ee17 5a90 	vmov	r5, s15
 800bb0a:	4b97      	ldr	r3, [pc, #604]	; (800bd68 <__ieee754_rem_pio2+0x268>)
 800bb0c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bb10:	429e      	cmp	r6, r3
 800bb12:	b088      	sub	sp, #32
 800bb14:	4604      	mov	r4, r0
 800bb16:	dc07      	bgt.n	800bb28 <__ieee754_rem_pio2+0x28>
 800bb18:	2200      	movs	r2, #0
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	ed84 0b00 	vstr	d0, [r4]
 800bb20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800bb24:	2000      	movs	r0, #0
 800bb26:	e01b      	b.n	800bb60 <__ieee754_rem_pio2+0x60>
 800bb28:	4b90      	ldr	r3, [pc, #576]	; (800bd6c <__ieee754_rem_pio2+0x26c>)
 800bb2a:	429e      	cmp	r6, r3
 800bb2c:	dc3b      	bgt.n	800bba6 <__ieee754_rem_pio2+0xa6>
 800bb2e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800bb32:	2d00      	cmp	r5, #0
 800bb34:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 800bd28 <__ieee754_rem_pio2+0x228>
 800bb38:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800bb3c:	dd19      	ble.n	800bb72 <__ieee754_rem_pio2+0x72>
 800bb3e:	ee30 7b46 	vsub.f64	d7, d0, d6
 800bb42:	429e      	cmp	r6, r3
 800bb44:	d00e      	beq.n	800bb64 <__ieee754_rem_pio2+0x64>
 800bb46:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800bd30 <__ieee754_rem_pio2+0x230>
 800bb4a:	ee37 5b46 	vsub.f64	d5, d7, d6
 800bb4e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800bb52:	ed84 5b00 	vstr	d5, [r4]
 800bb56:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bb5a:	ed84 7b02 	vstr	d7, [r4, #8]
 800bb5e:	2001      	movs	r0, #1
 800bb60:	b008      	add	sp, #32
 800bb62:	bd70      	pop	{r4, r5, r6, pc}
 800bb64:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800bd38 <__ieee754_rem_pio2+0x238>
 800bb68:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bb6c:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800bd40 <__ieee754_rem_pio2+0x240>
 800bb70:	e7eb      	b.n	800bb4a <__ieee754_rem_pio2+0x4a>
 800bb72:	429e      	cmp	r6, r3
 800bb74:	ee30 7b06 	vadd.f64	d7, d0, d6
 800bb78:	d00e      	beq.n	800bb98 <__ieee754_rem_pio2+0x98>
 800bb7a:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800bd30 <__ieee754_rem_pio2+0x230>
 800bb7e:	ee37 5b06 	vadd.f64	d5, d7, d6
 800bb82:	ee37 7b45 	vsub.f64	d7, d7, d5
 800bb86:	ed84 5b00 	vstr	d5, [r4]
 800bb8a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bb8e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb92:	ed84 7b02 	vstr	d7, [r4, #8]
 800bb96:	e7e3      	b.n	800bb60 <__ieee754_rem_pio2+0x60>
 800bb98:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800bd38 <__ieee754_rem_pio2+0x238>
 800bb9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bba0:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800bd40 <__ieee754_rem_pio2+0x240>
 800bba4:	e7eb      	b.n	800bb7e <__ieee754_rem_pio2+0x7e>
 800bba6:	4b72      	ldr	r3, [pc, #456]	; (800bd70 <__ieee754_rem_pio2+0x270>)
 800bba8:	429e      	cmp	r6, r3
 800bbaa:	dc6e      	bgt.n	800bc8a <__ieee754_rem_pio2+0x18a>
 800bbac:	f000 fc2c 	bl	800c408 <fabs>
 800bbb0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800bbb4:	ed9f 6b64 	vldr	d6, [pc, #400]	; 800bd48 <__ieee754_rem_pio2+0x248>
 800bbb8:	eea0 7b06 	vfma.f64	d7, d0, d6
 800bbbc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800bbc0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800bbc4:	ee17 0a90 	vmov	r0, s15
 800bbc8:	eeb1 4b45 	vneg.f64	d4, d5
 800bbcc:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800bd28 <__ieee754_rem_pio2+0x228>
 800bbd0:	eea5 0b47 	vfms.f64	d0, d5, d7
 800bbd4:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800bd30 <__ieee754_rem_pio2+0x230>
 800bbd8:	281f      	cmp	r0, #31
 800bbda:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bbde:	ee30 6b47 	vsub.f64	d6, d0, d7
 800bbe2:	dc08      	bgt.n	800bbf6 <__ieee754_rem_pio2+0xf6>
 800bbe4:	4b63      	ldr	r3, [pc, #396]	; (800bd74 <__ieee754_rem_pio2+0x274>)
 800bbe6:	1e42      	subs	r2, r0, #1
 800bbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbec:	42b3      	cmp	r3, r6
 800bbee:	d002      	beq.n	800bbf6 <__ieee754_rem_pio2+0xf6>
 800bbf0:	ed84 6b00 	vstr	d6, [r4]
 800bbf4:	e024      	b.n	800bc40 <__ieee754_rem_pio2+0x140>
 800bbf6:	ee16 3a90 	vmov	r3, s13
 800bbfa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800bbfe:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800bc02:	2b10      	cmp	r3, #16
 800bc04:	ea4f 5226 	mov.w	r2, r6, asr #20
 800bc08:	ddf2      	ble.n	800bbf0 <__ieee754_rem_pio2+0xf0>
 800bc0a:	eeb0 6b40 	vmov.f64	d6, d0
 800bc0e:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 800bd38 <__ieee754_rem_pio2+0x238>
 800bc12:	eea4 6b03 	vfma.f64	d6, d4, d3
 800bc16:	ee30 7b46 	vsub.f64	d7, d0, d6
 800bc1a:	eea4 7b03 	vfma.f64	d7, d4, d3
 800bc1e:	ed9f 3b48 	vldr	d3, [pc, #288]	; 800bd40 <__ieee754_rem_pio2+0x240>
 800bc22:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800bc26:	ee36 3b47 	vsub.f64	d3, d6, d7
 800bc2a:	ee13 3a90 	vmov	r3, s7
 800bc2e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800bc32:	1ad3      	subs	r3, r2, r3
 800bc34:	2b31      	cmp	r3, #49	; 0x31
 800bc36:	dc17      	bgt.n	800bc68 <__ieee754_rem_pio2+0x168>
 800bc38:	eeb0 0b46 	vmov.f64	d0, d6
 800bc3c:	ed84 3b00 	vstr	d3, [r4]
 800bc40:	ed94 6b00 	vldr	d6, [r4]
 800bc44:	2d00      	cmp	r5, #0
 800bc46:	ee30 0b46 	vsub.f64	d0, d0, d6
 800bc4a:	ee30 7b47 	vsub.f64	d7, d0, d7
 800bc4e:	ed84 7b02 	vstr	d7, [r4, #8]
 800bc52:	da85      	bge.n	800bb60 <__ieee754_rem_pio2+0x60>
 800bc54:	eeb1 6b46 	vneg.f64	d6, d6
 800bc58:	ed84 6b00 	vstr	d6, [r4]
 800bc5c:	eeb1 7b47 	vneg.f64	d7, d7
 800bc60:	4240      	negs	r0, r0
 800bc62:	ed84 7b02 	vstr	d7, [r4, #8]
 800bc66:	e77b      	b.n	800bb60 <__ieee754_rem_pio2+0x60>
 800bc68:	ed9f 3b39 	vldr	d3, [pc, #228]	; 800bd50 <__ieee754_rem_pio2+0x250>
 800bc6c:	eeb0 0b46 	vmov.f64	d0, d6
 800bc70:	eea4 0b03 	vfma.f64	d0, d4, d3
 800bc74:	ee36 7b40 	vsub.f64	d7, d6, d0
 800bc78:	ed9f 6b37 	vldr	d6, [pc, #220]	; 800bd58 <__ieee754_rem_pio2+0x258>
 800bc7c:	eea4 7b03 	vfma.f64	d7, d4, d3
 800bc80:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800bc84:	ee30 6b47 	vsub.f64	d6, d0, d7
 800bc88:	e7b2      	b.n	800bbf0 <__ieee754_rem_pio2+0xf0>
 800bc8a:	4b3b      	ldr	r3, [pc, #236]	; (800bd78 <__ieee754_rem_pio2+0x278>)
 800bc8c:	429e      	cmp	r6, r3
 800bc8e:	dd06      	ble.n	800bc9e <__ieee754_rem_pio2+0x19e>
 800bc90:	ee30 7b40 	vsub.f64	d7, d0, d0
 800bc94:	ed80 7b02 	vstr	d7, [r0, #8]
 800bc98:	ed80 7b00 	vstr	d7, [r0]
 800bc9c:	e742      	b.n	800bb24 <__ieee754_rem_pio2+0x24>
 800bc9e:	1532      	asrs	r2, r6, #20
 800bca0:	ee10 0a10 	vmov	r0, s0
 800bca4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800bca8:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800bcac:	ec41 0b17 	vmov	d7, r0, r1
 800bcb0:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800bcb4:	ed9f 5b2a 	vldr	d5, [pc, #168]	; 800bd60 <__ieee754_rem_pio2+0x260>
 800bcb8:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800bcbc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bcc0:	ed8d 6b02 	vstr	d6, [sp, #8]
 800bcc4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bcc8:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800bccc:	a902      	add	r1, sp, #8
 800bcce:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800bcd2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bcd6:	ed8d 6b04 	vstr	d6, [sp, #16]
 800bcda:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bcde:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bce2:	2603      	movs	r6, #3
 800bce4:	4608      	mov	r0, r1
 800bce6:	ed91 7b04 	vldr	d7, [r1, #16]
 800bcea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcf2:	4633      	mov	r3, r6
 800bcf4:	f1a1 0108 	sub.w	r1, r1, #8
 800bcf8:	f106 36ff 	add.w	r6, r6, #4294967295
 800bcfc:	d0f3      	beq.n	800bce6 <__ieee754_rem_pio2+0x1e6>
 800bcfe:	491f      	ldr	r1, [pc, #124]	; (800bd7c <__ieee754_rem_pio2+0x27c>)
 800bd00:	9101      	str	r1, [sp, #4]
 800bd02:	2102      	movs	r1, #2
 800bd04:	9100      	str	r1, [sp, #0]
 800bd06:	4621      	mov	r1, r4
 800bd08:	f000 f8a6 	bl	800be58 <__kernel_rem_pio2>
 800bd0c:	2d00      	cmp	r5, #0
 800bd0e:	f6bf af27 	bge.w	800bb60 <__ieee754_rem_pio2+0x60>
 800bd12:	ed94 7b00 	vldr	d7, [r4]
 800bd16:	eeb1 7b47 	vneg.f64	d7, d7
 800bd1a:	ed84 7b00 	vstr	d7, [r4]
 800bd1e:	ed94 7b02 	vldr	d7, [r4, #8]
 800bd22:	e79b      	b.n	800bc5c <__ieee754_rem_pio2+0x15c>
 800bd24:	f3af 8000 	nop.w
 800bd28:	54400000 	.word	0x54400000
 800bd2c:	3ff921fb 	.word	0x3ff921fb
 800bd30:	1a626331 	.word	0x1a626331
 800bd34:	3dd0b461 	.word	0x3dd0b461
 800bd38:	1a600000 	.word	0x1a600000
 800bd3c:	3dd0b461 	.word	0x3dd0b461
 800bd40:	2e037073 	.word	0x2e037073
 800bd44:	3ba3198a 	.word	0x3ba3198a
 800bd48:	6dc9c883 	.word	0x6dc9c883
 800bd4c:	3fe45f30 	.word	0x3fe45f30
 800bd50:	2e000000 	.word	0x2e000000
 800bd54:	3ba3198a 	.word	0x3ba3198a
 800bd58:	252049c1 	.word	0x252049c1
 800bd5c:	397b839a 	.word	0x397b839a
 800bd60:	00000000 	.word	0x00000000
 800bd64:	41700000 	.word	0x41700000
 800bd68:	3fe921fb 	.word	0x3fe921fb
 800bd6c:	4002d97b 	.word	0x4002d97b
 800bd70:	413921fb 	.word	0x413921fb
 800bd74:	0800ef68 	.word	0x0800ef68
 800bd78:	7fefffff 	.word	0x7fefffff
 800bd7c:	0800efe8 	.word	0x0800efe8

0800bd80 <__kernel_cos>:
 800bd80:	ee10 1a90 	vmov	r1, s1
 800bd84:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800bd88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bd8c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800bd90:	da05      	bge.n	800bd9e <__kernel_cos+0x1e>
 800bd92:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800bd96:	ee17 3a90 	vmov	r3, s15
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d03d      	beq.n	800be1a <__kernel_cos+0x9a>
 800bd9e:	ee20 3b00 	vmul.f64	d3, d0, d0
 800bda2:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 800be20 <__kernel_cos+0xa0>
 800bda6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800be28 <__kernel_cos+0xa8>
 800bdaa:	eea3 6b07 	vfma.f64	d6, d3, d7
 800bdae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800be30 <__kernel_cos+0xb0>
 800bdb2:	eea6 7b03 	vfma.f64	d7, d6, d3
 800bdb6:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800be38 <__kernel_cos+0xb8>
 800bdba:	eea7 6b03 	vfma.f64	d6, d7, d3
 800bdbe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800be40 <__kernel_cos+0xc0>
 800bdc2:	4b23      	ldr	r3, [pc, #140]	; (800be50 <__kernel_cos+0xd0>)
 800bdc4:	eea6 7b03 	vfma.f64	d7, d6, d3
 800bdc8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800be48 <__kernel_cos+0xc8>
 800bdcc:	4299      	cmp	r1, r3
 800bdce:	eea7 6b03 	vfma.f64	d6, d7, d3
 800bdd2:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800bdd6:	ee26 5b03 	vmul.f64	d5, d6, d3
 800bdda:	ee23 7b07 	vmul.f64	d7, d3, d7
 800bdde:	ee21 6b40 	vnmul.f64	d6, d1, d0
 800bde2:	eea3 6b05 	vfma.f64	d6, d3, d5
 800bde6:	dc04      	bgt.n	800bdf2 <__kernel_cos+0x72>
 800bde8:	ee37 6b46 	vsub.f64	d6, d7, d6
 800bdec:	ee34 0b46 	vsub.f64	d0, d4, d6
 800bdf0:	4770      	bx	lr
 800bdf2:	4b18      	ldr	r3, [pc, #96]	; (800be54 <__kernel_cos+0xd4>)
 800bdf4:	4299      	cmp	r1, r3
 800bdf6:	dc0d      	bgt.n	800be14 <__kernel_cos+0x94>
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800bdfe:	ec43 2b15 	vmov	d5, r2, r3
 800be02:	ee34 0b45 	vsub.f64	d0, d4, d5
 800be06:	ee37 7b45 	vsub.f64	d7, d7, d5
 800be0a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800be0e:	ee30 0b47 	vsub.f64	d0, d0, d7
 800be12:	4770      	bx	lr
 800be14:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800be18:	e7f3      	b.n	800be02 <__kernel_cos+0x82>
 800be1a:	eeb0 0b44 	vmov.f64	d0, d4
 800be1e:	4770      	bx	lr
 800be20:	be8838d4 	.word	0xbe8838d4
 800be24:	bda8fae9 	.word	0xbda8fae9
 800be28:	bdb4b1c4 	.word	0xbdb4b1c4
 800be2c:	3e21ee9e 	.word	0x3e21ee9e
 800be30:	809c52ad 	.word	0x809c52ad
 800be34:	be927e4f 	.word	0xbe927e4f
 800be38:	19cb1590 	.word	0x19cb1590
 800be3c:	3efa01a0 	.word	0x3efa01a0
 800be40:	16c15177 	.word	0x16c15177
 800be44:	bf56c16c 	.word	0xbf56c16c
 800be48:	5555554c 	.word	0x5555554c
 800be4c:	3fa55555 	.word	0x3fa55555
 800be50:	3fd33332 	.word	0x3fd33332
 800be54:	3fe90000 	.word	0x3fe90000

0800be58 <__kernel_rem_pio2>:
 800be58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5c:	ed2d 8b06 	vpush	{d8-d10}
 800be60:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 800be64:	469b      	mov	fp, r3
 800be66:	460f      	mov	r7, r1
 800be68:	4bcf      	ldr	r3, [pc, #828]	; (800c1a8 <__kernel_rem_pio2+0x350>)
 800be6a:	99a0      	ldr	r1, [sp, #640]	; 0x280
 800be6c:	f8dd c284 	ldr.w	ip, [sp, #644]	; 0x284
 800be70:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800be74:	9000      	str	r0, [sp, #0]
 800be76:	f112 0f14 	cmn.w	r2, #20
 800be7a:	bfa8      	it	ge
 800be7c:	2318      	movge	r3, #24
 800be7e:	f10b 31ff 	add.w	r1, fp, #4294967295
 800be82:	bfb8      	it	lt
 800be84:	2300      	movlt	r3, #0
 800be86:	f06f 0417 	mvn.w	r4, #23
 800be8a:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800c190 <__kernel_rem_pio2+0x338>
 800be8e:	bfa4      	itt	ge
 800be90:	f1a2 0a03 	subge.w	sl, r2, #3
 800be94:	fb9a f3f3 	sdivge	r3, sl, r3
 800be98:	fb03 4404 	mla	r4, r3, r4, r4
 800be9c:	1a5d      	subs	r5, r3, r1
 800be9e:	4414      	add	r4, r2
 800bea0:	eb09 0601 	add.w	r6, r9, r1
 800bea4:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 800bea8:	eb0c 0e85 	add.w	lr, ip, r5, lsl #2
 800beac:	2200      	movs	r2, #0
 800beae:	42b2      	cmp	r2, r6
 800beb0:	dd12      	ble.n	800bed8 <__kernel_rem_pio2+0x80>
 800beb2:	aa18      	add	r2, sp, #96	; 0x60
 800beb4:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800beb8:	460e      	mov	r6, r1
 800beba:	f50d 78d0 	add.w	r8, sp, #416	; 0x1a0
 800bebe:	f1cb 0a01 	rsb	sl, fp, #1
 800bec2:	eb0a 0006 	add.w	r0, sl, r6
 800bec6:	4581      	cmp	r9, r0
 800bec8:	db25      	blt.n	800bf16 <__kernel_rem_pio2+0xbe>
 800beca:	ed9f 7bb1 	vldr	d7, [pc, #708]	; 800c190 <__kernel_rem_pio2+0x338>
 800bece:	f8dd e000 	ldr.w	lr, [sp]
 800bed2:	4615      	mov	r5, r2
 800bed4:	2000      	movs	r0, #0
 800bed6:	e015      	b.n	800bf04 <__kernel_rem_pio2+0xac>
 800bed8:	42d5      	cmn	r5, r2
 800beda:	d409      	bmi.n	800bef0 <__kernel_rem_pio2+0x98>
 800bedc:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 800bee0:	ee07 0a90 	vmov	s15, r0
 800bee4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800bee8:	eca8 7b02 	vstmia	r8!, {d7}
 800beec:	3201      	adds	r2, #1
 800beee:	e7de      	b.n	800beae <__kernel_rem_pio2+0x56>
 800bef0:	eeb0 7b46 	vmov.f64	d7, d6
 800bef4:	e7f8      	b.n	800bee8 <__kernel_rem_pio2+0x90>
 800bef6:	ecbe 5b02 	vldmia	lr!, {d5}
 800befa:	ed95 6b00 	vldr	d6, [r5]
 800befe:	3001      	adds	r0, #1
 800bf00:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bf04:	4288      	cmp	r0, r1
 800bf06:	f1a5 0508 	sub.w	r5, r5, #8
 800bf0a:	ddf4      	ble.n	800bef6 <__kernel_rem_pio2+0x9e>
 800bf0c:	eca8 7b02 	vstmia	r8!, {d7}
 800bf10:	3208      	adds	r2, #8
 800bf12:	3601      	adds	r6, #1
 800bf14:	e7d5      	b.n	800bec2 <__kernel_rem_pio2+0x6a>
 800bf16:	aa04      	add	r2, sp, #16
 800bf18:	ed9f 9b9f 	vldr	d9, [pc, #636]	; 800c198 <__kernel_rem_pio2+0x340>
 800bf1c:	ed9f aba0 	vldr	d10, [pc, #640]	; 800c1a0 <__kernel_rem_pio2+0x348>
 800bf20:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800bf24:	9201      	str	r2, [sp, #4]
 800bf26:	eb0c 0a83 	add.w	sl, ip, r3, lsl #2
 800bf2a:	464e      	mov	r6, r9
 800bf2c:	ab90      	add	r3, sp, #576	; 0x240
 800bf2e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bf32:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800bf36:	ab04      	add	r3, sp, #16
 800bf38:	4618      	mov	r0, r3
 800bf3a:	4632      	mov	r2, r6
 800bf3c:	2a00      	cmp	r2, #0
 800bf3e:	dc4e      	bgt.n	800bfde <__kernel_rem_pio2+0x186>
 800bf40:	4620      	mov	r0, r4
 800bf42:	e9cd 1302 	strd	r1, r3, [sp, #8]
 800bf46:	f000 fadf 	bl	800c508 <scalbn>
 800bf4a:	eeb0 8b40 	vmov.f64	d8, d0
 800bf4e:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800bf52:	ee28 0b00 	vmul.f64	d0, d8, d0
 800bf56:	f000 fa63 	bl	800c420 <floor>
 800bf5a:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800bf5e:	eea0 8b47 	vfms.f64	d8, d0, d7
 800bf62:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800bf66:	2c00      	cmp	r4, #0
 800bf68:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800bf6c:	e9dd 1302 	ldrd	r1, r3, [sp, #8]
 800bf70:	ee38 8b40 	vsub.f64	d8, d8, d0
 800bf74:	ee17 8a90 	vmov	r8, s15
 800bf78:	dd46      	ble.n	800c008 <__kernel_rem_pio2+0x1b0>
 800bf7a:	1e70      	subs	r0, r6, #1
 800bf7c:	aa04      	add	r2, sp, #16
 800bf7e:	f1c4 0c18 	rsb	ip, r4, #24
 800bf82:	f852 5020 	ldr.w	r5, [r2, r0, lsl #2]
 800bf86:	fa45 f20c 	asr.w	r2, r5, ip
 800bf8a:	4490      	add	r8, r2
 800bf8c:	fa02 f20c 	lsl.w	r2, r2, ip
 800bf90:	1aad      	subs	r5, r5, r2
 800bf92:	aa04      	add	r2, sp, #16
 800bf94:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 800bf98:	f1c4 0217 	rsb	r2, r4, #23
 800bf9c:	4115      	asrs	r5, r2
 800bf9e:	2d00      	cmp	r5, #0
 800bfa0:	dd41      	ble.n	800c026 <__kernel_rem_pio2+0x1ce>
 800bfa2:	f04f 0c00 	mov.w	ip, #0
 800bfa6:	f108 0801 	add.w	r8, r8, #1
 800bfaa:	4660      	mov	r0, ip
 800bfac:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800bfb0:	4566      	cmp	r6, ip
 800bfb2:	dc69      	bgt.n	800c088 <__kernel_rem_pio2+0x230>
 800bfb4:	2c00      	cmp	r4, #0
 800bfb6:	dd03      	ble.n	800bfc0 <__kernel_rem_pio2+0x168>
 800bfb8:	2c01      	cmp	r4, #1
 800bfba:	d076      	beq.n	800c0aa <__kernel_rem_pio2+0x252>
 800bfbc:	2c02      	cmp	r4, #2
 800bfbe:	d07f      	beq.n	800c0c0 <__kernel_rem_pio2+0x268>
 800bfc0:	2d02      	cmp	r5, #2
 800bfc2:	d130      	bne.n	800c026 <__kernel_rem_pio2+0x1ce>
 800bfc4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800bfc8:	ee30 8b48 	vsub.f64	d8, d0, d8
 800bfcc:	b358      	cbz	r0, 800c026 <__kernel_rem_pio2+0x1ce>
 800bfce:	4620      	mov	r0, r4
 800bfd0:	9102      	str	r1, [sp, #8]
 800bfd2:	f000 fa99 	bl	800c508 <scalbn>
 800bfd6:	9902      	ldr	r1, [sp, #8]
 800bfd8:	ee38 8b40 	vsub.f64	d8, d8, d0
 800bfdc:	e023      	b.n	800c026 <__kernel_rem_pio2+0x1ce>
 800bfde:	ee20 7b09 	vmul.f64	d7, d0, d9
 800bfe2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800bfe6:	3a01      	subs	r2, #1
 800bfe8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800bfec:	ad68      	add	r5, sp, #416	; 0x1a0
 800bfee:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800bff2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800bff6:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
 800bffa:	eca0 0a01 	vstmia	r0!, {s0}
 800bffe:	ed95 0b00 	vldr	d0, [r5]
 800c002:	ee37 0b00 	vadd.f64	d0, d7, d0
 800c006:	e799      	b.n	800bf3c <__kernel_rem_pio2+0xe4>
 800c008:	d105      	bne.n	800c016 <__kernel_rem_pio2+0x1be>
 800c00a:	1e72      	subs	r2, r6, #1
 800c00c:	a804      	add	r0, sp, #16
 800c00e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 800c012:	15ed      	asrs	r5, r5, #23
 800c014:	e7c3      	b.n	800bf9e <__kernel_rem_pio2+0x146>
 800c016:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800c01a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c01e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c022:	da2f      	bge.n	800c084 <__kernel_rem_pio2+0x22c>
 800c024:	2500      	movs	r5, #0
 800c026:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c02e:	f040 8087 	bne.w	800c140 <__kernel_rem_pio2+0x2e8>
 800c032:	1e73      	subs	r3, r6, #1
 800c034:	4618      	mov	r0, r3
 800c036:	f04f 0c00 	mov.w	ip, #0
 800c03a:	4548      	cmp	r0, r9
 800c03c:	da47      	bge.n	800c0ce <__kernel_rem_pio2+0x276>
 800c03e:	f1bc 0f00 	cmp.w	ip, #0
 800c042:	d070      	beq.n	800c126 <__kernel_rem_pio2+0x2ce>
 800c044:	aa04      	add	r2, sp, #16
 800c046:	3c18      	subs	r4, #24
 800c048:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c04c:	2a00      	cmp	r2, #0
 800c04e:	d075      	beq.n	800c13c <__kernel_rem_pio2+0x2e4>
 800c050:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c054:	4620      	mov	r0, r4
 800c056:	9300      	str	r3, [sp, #0]
 800c058:	f000 fa56 	bl	800c508 <scalbn>
 800c05c:	9b00      	ldr	r3, [sp, #0]
 800c05e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800c198 <__kernel_rem_pio2+0x340>
 800c062:	461a      	mov	r2, r3
 800c064:	2a00      	cmp	r2, #0
 800c066:	f280 80ac 	bge.w	800c1c2 <__kernel_rem_pio2+0x36a>
 800c06a:	4619      	mov	r1, r3
 800c06c:	2000      	movs	r0, #0
 800c06e:	2900      	cmp	r1, #0
 800c070:	f2c0 80cd 	blt.w	800c20e <__kernel_rem_pio2+0x3b6>
 800c074:	aa68      	add	r2, sp, #416	; 0x1a0
 800c076:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
 800c07a:	ed9f 7b45 	vldr	d7, [pc, #276]	; 800c190 <__kernel_rem_pio2+0x338>
 800c07e:	4e4b      	ldr	r6, [pc, #300]	; (800c1ac <__kernel_rem_pio2+0x354>)
 800c080:	2200      	movs	r2, #0
 800c082:	e0b8      	b.n	800c1f6 <__kernel_rem_pio2+0x39e>
 800c084:	2502      	movs	r5, #2
 800c086:	e78c      	b.n	800bfa2 <__kernel_rem_pio2+0x14a>
 800c088:	681a      	ldr	r2, [r3, #0]
 800c08a:	b948      	cbnz	r0, 800c0a0 <__kernel_rem_pio2+0x248>
 800c08c:	b11a      	cbz	r2, 800c096 <__kernel_rem_pio2+0x23e>
 800c08e:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	2201      	movs	r2, #1
 800c096:	f10c 0c01 	add.w	ip, ip, #1
 800c09a:	3304      	adds	r3, #4
 800c09c:	4610      	mov	r0, r2
 800c09e:	e787      	b.n	800bfb0 <__kernel_rem_pio2+0x158>
 800c0a0:	ebae 0202 	sub.w	r2, lr, r2
 800c0a4:	601a      	str	r2, [r3, #0]
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	e7f5      	b.n	800c096 <__kernel_rem_pio2+0x23e>
 800c0aa:	1e72      	subs	r2, r6, #1
 800c0ac:	ab04      	add	r3, sp, #16
 800c0ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0b2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c0b6:	f10d 0c10 	add.w	ip, sp, #16
 800c0ba:	f84c 3022 	str.w	r3, [ip, r2, lsl #2]
 800c0be:	e77f      	b.n	800bfc0 <__kernel_rem_pio2+0x168>
 800c0c0:	1e72      	subs	r2, r6, #1
 800c0c2:	ab04      	add	r3, sp, #16
 800c0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c0cc:	e7f3      	b.n	800c0b6 <__kernel_rem_pio2+0x25e>
 800c0ce:	aa04      	add	r2, sp, #16
 800c0d0:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 800c0d4:	3801      	subs	r0, #1
 800c0d6:	ea4c 0c02 	orr.w	ip, ip, r2
 800c0da:	e7ae      	b.n	800c03a <__kernel_rem_pio2+0x1e2>
 800c0dc:	3001      	adds	r0, #1
 800c0de:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c0e2:	2a00      	cmp	r2, #0
 800c0e4:	d0fa      	beq.n	800c0dc <__kernel_rem_pio2+0x284>
 800c0e6:	eb06 020b 	add.w	r2, r6, fp
 800c0ea:	ad18      	add	r5, sp, #96	; 0x60
 800c0ec:	1c73      	adds	r3, r6, #1
 800c0ee:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800c0f2:	4406      	add	r6, r0
 800c0f4:	429e      	cmp	r6, r3
 800c0f6:	f6ff af19 	blt.w	800bf2c <__kernel_rem_pio2+0xd4>
 800c0fa:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
 800c0fe:	9d00      	ldr	r5, [sp, #0]
 800c100:	ee07 0a90 	vmov	s15, r0
 800c104:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c108:	2000      	movs	r0, #0
 800c10a:	eca2 7b02 	vstmia	r2!, {d7}
 800c10e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c190 <__kernel_rem_pio2+0x338>
 800c112:	4694      	mov	ip, r2
 800c114:	4288      	cmp	r0, r1
 800c116:	dd09      	ble.n	800c12c <__kernel_rem_pio2+0x2d4>
 800c118:	a868      	add	r0, sp, #416	; 0x1a0
 800c11a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 800c11e:	ed80 7b00 	vstr	d7, [r0]
 800c122:	3301      	adds	r3, #1
 800c124:	e7e6      	b.n	800c0f4 <__kernel_rem_pio2+0x29c>
 800c126:	9b01      	ldr	r3, [sp, #4]
 800c128:	2001      	movs	r0, #1
 800c12a:	e7d8      	b.n	800c0de <__kernel_rem_pio2+0x286>
 800c12c:	ecb5 5b02 	vldmia	r5!, {d5}
 800c130:	ed3c 6b02 	vldmdb	ip!, {d6}
 800c134:	3001      	adds	r0, #1
 800c136:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c13a:	e7eb      	b.n	800c114 <__kernel_rem_pio2+0x2bc>
 800c13c:	3b01      	subs	r3, #1
 800c13e:	e781      	b.n	800c044 <__kernel_rem_pio2+0x1ec>
 800c140:	4260      	negs	r0, r4
 800c142:	eeb0 0b48 	vmov.f64	d0, d8
 800c146:	f000 f9df 	bl	800c508 <scalbn>
 800c14a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 800c1a0 <__kernel_rem_pio2+0x348>
 800c14e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800c152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c156:	db2b      	blt.n	800c1b0 <__kernel_rem_pio2+0x358>
 800c158:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800c198 <__kernel_rem_pio2+0x340>
 800c15c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c160:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800c164:	aa04      	add	r2, sp, #16
 800c166:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800c16a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800c16e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c172:	a904      	add	r1, sp, #16
 800c174:	ee10 3a10 	vmov	r3, s0
 800c178:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c17c:	ee17 2a10 	vmov	r2, s14
 800c180:	1c73      	adds	r3, r6, #1
 800c182:	3418      	adds	r4, #24
 800c184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c188:	e762      	b.n	800c050 <__kernel_rem_pio2+0x1f8>
 800c18a:	bf00      	nop
 800c18c:	f3af 8000 	nop.w
	...
 800c19c:	3e700000 	.word	0x3e700000
 800c1a0:	00000000 	.word	0x00000000
 800c1a4:	41700000 	.word	0x41700000
 800c1a8:	0800f130 	.word	0x0800f130
 800c1ac:	0800f0f0 	.word	0x0800f0f0
 800c1b0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800c1b4:	aa04      	add	r2, sp, #16
 800c1b6:	ee10 3a10 	vmov	r3, s0
 800c1ba:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800c1be:	4633      	mov	r3, r6
 800c1c0:	e746      	b.n	800c050 <__kernel_rem_pio2+0x1f8>
 800c1c2:	a804      	add	r0, sp, #16
 800c1c4:	a968      	add	r1, sp, #416	; 0x1a0
 800c1c6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800c1ca:	9000      	str	r0, [sp, #0]
 800c1cc:	ee07 0a90 	vmov	s15, r0
 800c1d0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c1d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c1d8:	3a01      	subs	r2, #1
 800c1da:	ee27 7b00 	vmul.f64	d7, d7, d0
 800c1de:	ee20 0b06 	vmul.f64	d0, d0, d6
 800c1e2:	ed81 7b00 	vstr	d7, [r1]
 800c1e6:	e73d      	b.n	800c064 <__kernel_rem_pio2+0x20c>
 800c1e8:	ecb6 5b02 	vldmia	r6!, {d5}
 800c1ec:	ecb4 6b02 	vldmia	r4!, {d6}
 800c1f0:	3201      	adds	r2, #1
 800c1f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c1f6:	454a      	cmp	r2, r9
 800c1f8:	dc01      	bgt.n	800c1fe <__kernel_rem_pio2+0x3a6>
 800c1fa:	4290      	cmp	r0, r2
 800c1fc:	daf4      	bge.n	800c1e8 <__kernel_rem_pio2+0x390>
 800c1fe:	aa40      	add	r2, sp, #256	; 0x100
 800c200:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800c204:	ed82 7b00 	vstr	d7, [r2]
 800c208:	3901      	subs	r1, #1
 800c20a:	3001      	adds	r0, #1
 800c20c:	e72f      	b.n	800c06e <__kernel_rem_pio2+0x216>
 800c20e:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800c210:	2a02      	cmp	r2, #2
 800c212:	dc0a      	bgt.n	800c22a <__kernel_rem_pio2+0x3d2>
 800c214:	2a00      	cmp	r2, #0
 800c216:	dc5a      	bgt.n	800c2ce <__kernel_rem_pio2+0x476>
 800c218:	d039      	beq.n	800c28e <__kernel_rem_pio2+0x436>
 800c21a:	f008 0007 	and.w	r0, r8, #7
 800c21e:	f50d 7d11 	add.w	sp, sp, #580	; 0x244
 800c222:	ecbd 8b06 	vpop	{d8-d10}
 800c226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c22a:	9aa0      	ldr	r2, [sp, #640]	; 0x280
 800c22c:	2a03      	cmp	r2, #3
 800c22e:	d1f4      	bne.n	800c21a <__kernel_rem_pio2+0x3c2>
 800c230:	aa40      	add	r2, sp, #256	; 0x100
 800c232:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c236:	4611      	mov	r1, r2
 800c238:	4618      	mov	r0, r3
 800c23a:	2800      	cmp	r0, #0
 800c23c:	f1a1 0108 	sub.w	r1, r1, #8
 800c240:	dc52      	bgt.n	800c2e8 <__kernel_rem_pio2+0x490>
 800c242:	4619      	mov	r1, r3
 800c244:	2901      	cmp	r1, #1
 800c246:	f1a2 0208 	sub.w	r2, r2, #8
 800c24a:	dc5d      	bgt.n	800c308 <__kernel_rem_pio2+0x4b0>
 800c24c:	ed9f 7b40 	vldr	d7, [pc, #256]	; 800c350 <__kernel_rem_pio2+0x4f8>
 800c250:	2b01      	cmp	r3, #1
 800c252:	dc69      	bgt.n	800c328 <__kernel_rem_pio2+0x4d0>
 800c254:	ed9d 5b40 	vldr	d5, [sp, #256]	; 0x100
 800c258:	ed9d 6b42 	vldr	d6, [sp, #264]	; 0x108
 800c25c:	2d00      	cmp	r5, #0
 800c25e:	d16c      	bne.n	800c33a <__kernel_rem_pio2+0x4e2>
 800c260:	ed87 5b00 	vstr	d5, [r7]
 800c264:	ed87 6b02 	vstr	d6, [r7, #8]
 800c268:	ed87 7b04 	vstr	d7, [r7, #16]
 800c26c:	e7d5      	b.n	800c21a <__kernel_rem_pio2+0x3c2>
 800c26e:	aa40      	add	r2, sp, #256	; 0x100
 800c270:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c274:	ed92 6b00 	vldr	d6, [r2]
 800c278:	3b01      	subs	r3, #1
 800c27a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c27e:	2b00      	cmp	r3, #0
 800c280:	daf5      	bge.n	800c26e <__kernel_rem_pio2+0x416>
 800c282:	b10d      	cbz	r5, 800c288 <__kernel_rem_pio2+0x430>
 800c284:	eeb1 7b47 	vneg.f64	d7, d7
 800c288:	ed87 7b00 	vstr	d7, [r7]
 800c28c:	e7c5      	b.n	800c21a <__kernel_rem_pio2+0x3c2>
 800c28e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800c350 <__kernel_rem_pio2+0x4f8>
 800c292:	e7f4      	b.n	800c27e <__kernel_rem_pio2+0x426>
 800c294:	a940      	add	r1, sp, #256	; 0x100
 800c296:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c29a:	ed91 7b00 	vldr	d7, [r1]
 800c29e:	3a01      	subs	r2, #1
 800c2a0:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c2a4:	2a00      	cmp	r2, #0
 800c2a6:	daf5      	bge.n	800c294 <__kernel_rem_pio2+0x43c>
 800c2a8:	b1ad      	cbz	r5, 800c2d6 <__kernel_rem_pio2+0x47e>
 800c2aa:	eeb1 7b46 	vneg.f64	d7, d6
 800c2ae:	ed87 7b00 	vstr	d7, [r7]
 800c2b2:	ed9d 7b40 	vldr	d7, [sp, #256]	; 0x100
 800c2b6:	a942      	add	r1, sp, #264	; 0x108
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	da0c      	bge.n	800c2dc <__kernel_rem_pio2+0x484>
 800c2c2:	b10d      	cbz	r5, 800c2c8 <__kernel_rem_pio2+0x470>
 800c2c4:	eeb1 7b47 	vneg.f64	d7, d7
 800c2c8:	ed87 7b02 	vstr	d7, [r7, #8]
 800c2cc:	e7a5      	b.n	800c21a <__kernel_rem_pio2+0x3c2>
 800c2ce:	ed9f 6b20 	vldr	d6, [pc, #128]	; 800c350 <__kernel_rem_pio2+0x4f8>
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	e7e6      	b.n	800c2a4 <__kernel_rem_pio2+0x44c>
 800c2d6:	eeb0 7b46 	vmov.f64	d7, d6
 800c2da:	e7e8      	b.n	800c2ae <__kernel_rem_pio2+0x456>
 800c2dc:	ecb1 6b02 	vldmia	r1!, {d6}
 800c2e0:	3201      	adds	r2, #1
 800c2e2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c2e6:	e7ea      	b.n	800c2be <__kernel_rem_pio2+0x466>
 800c2e8:	ed91 7b00 	vldr	d7, [r1]
 800c2ec:	ed91 5b02 	vldr	d5, [r1, #8]
 800c2f0:	3801      	subs	r0, #1
 800c2f2:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c2f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c2fa:	ed81 6b00 	vstr	d6, [r1]
 800c2fe:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c302:	ed81 7b02 	vstr	d7, [r1, #8]
 800c306:	e798      	b.n	800c23a <__kernel_rem_pio2+0x3e2>
 800c308:	ed92 7b00 	vldr	d7, [r2]
 800c30c:	ed92 5b02 	vldr	d5, [r2, #8]
 800c310:	3901      	subs	r1, #1
 800c312:	ee37 6b05 	vadd.f64	d6, d7, d5
 800c316:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c31a:	ed82 6b00 	vstr	d6, [r2]
 800c31e:	ee37 7b05 	vadd.f64	d7, d7, d5
 800c322:	ed82 7b02 	vstr	d7, [r2, #8]
 800c326:	e78d      	b.n	800c244 <__kernel_rem_pio2+0x3ec>
 800c328:	aa40      	add	r2, sp, #256	; 0x100
 800c32a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c32e:	ed92 6b00 	vldr	d6, [r2]
 800c332:	3b01      	subs	r3, #1
 800c334:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c338:	e78a      	b.n	800c250 <__kernel_rem_pio2+0x3f8>
 800c33a:	eeb1 5b45 	vneg.f64	d5, d5
 800c33e:	eeb1 6b46 	vneg.f64	d6, d6
 800c342:	ed87 5b00 	vstr	d5, [r7]
 800c346:	eeb1 7b47 	vneg.f64	d7, d7
 800c34a:	ed87 6b02 	vstr	d6, [r7, #8]
 800c34e:	e78b      	b.n	800c268 <__kernel_rem_pio2+0x410>
	...

0800c358 <__kernel_sin>:
 800c358:	ee10 3a90 	vmov	r3, s1
 800c35c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c360:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c364:	da04      	bge.n	800c370 <__kernel_sin+0x18>
 800c366:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800c36a:	ee17 3a90 	vmov	r3, s15
 800c36e:	b35b      	cbz	r3, 800c3c8 <__kernel_sin+0x70>
 800c370:	ee20 6b00 	vmul.f64	d6, d0, d0
 800c374:	ee20 5b06 	vmul.f64	d5, d0, d6
 800c378:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800c3d0 <__kernel_sin+0x78>
 800c37c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c3d8 <__kernel_sin+0x80>
 800c380:	eea6 4b07 	vfma.f64	d4, d6, d7
 800c384:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800c3e0 <__kernel_sin+0x88>
 800c388:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c38c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c3e8 <__kernel_sin+0x90>
 800c390:	eea7 4b06 	vfma.f64	d4, d7, d6
 800c394:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800c3f0 <__kernel_sin+0x98>
 800c398:	eea4 7b06 	vfma.f64	d7, d4, d6
 800c39c:	b930      	cbnz	r0, 800c3ac <__kernel_sin+0x54>
 800c39e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800c3f8 <__kernel_sin+0xa0>
 800c3a2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800c3a6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800c3aa:	4770      	bx	lr
 800c3ac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800c3b0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c3b4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800c3b8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800c3bc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800c400 <__kernel_sin+0xa8>
 800c3c0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800c3c4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop
 800c3cc:	f3af 8000 	nop.w
 800c3d0:	5acfd57c 	.word	0x5acfd57c
 800c3d4:	3de5d93a 	.word	0x3de5d93a
 800c3d8:	8a2b9ceb 	.word	0x8a2b9ceb
 800c3dc:	be5ae5e6 	.word	0xbe5ae5e6
 800c3e0:	57b1fe7d 	.word	0x57b1fe7d
 800c3e4:	3ec71de3 	.word	0x3ec71de3
 800c3e8:	19c161d5 	.word	0x19c161d5
 800c3ec:	bf2a01a0 	.word	0xbf2a01a0
 800c3f0:	1110f8a6 	.word	0x1110f8a6
 800c3f4:	3f811111 	.word	0x3f811111
 800c3f8:	55555549 	.word	0x55555549
 800c3fc:	bfc55555 	.word	0xbfc55555
 800c400:	55555549 	.word	0x55555549
 800c404:	3fc55555 	.word	0x3fc55555

0800c408 <fabs>:
 800c408:	ec51 0b10 	vmov	r0, r1, d0
 800c40c:	ee10 2a10 	vmov	r2, s0
 800c410:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c414:	ec43 2b10 	vmov	d0, r2, r3
 800c418:	4770      	bx	lr
 800c41a:	0000      	movs	r0, r0
 800c41c:	0000      	movs	r0, r0
	...

0800c420 <floor>:
 800c420:	ee10 1a90 	vmov	r1, s1
 800c424:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c428:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800c42c:	2b13      	cmp	r3, #19
 800c42e:	b530      	push	{r4, r5, lr}
 800c430:	ee10 0a10 	vmov	r0, s0
 800c434:	ee10 5a10 	vmov	r5, s0
 800c438:	dc31      	bgt.n	800c49e <floor+0x7e>
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	da15      	bge.n	800c46a <floor+0x4a>
 800c43e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800c4f8 <floor+0xd8>
 800c442:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c446:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c44e:	dd07      	ble.n	800c460 <floor+0x40>
 800c450:	2900      	cmp	r1, #0
 800c452:	da4e      	bge.n	800c4f2 <floor+0xd2>
 800c454:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c458:	4318      	orrs	r0, r3
 800c45a:	d001      	beq.n	800c460 <floor+0x40>
 800c45c:	4928      	ldr	r1, [pc, #160]	; (800c500 <floor+0xe0>)
 800c45e:	2000      	movs	r0, #0
 800c460:	460b      	mov	r3, r1
 800c462:	4602      	mov	r2, r0
 800c464:	ec43 2b10 	vmov	d0, r2, r3
 800c468:	e020      	b.n	800c4ac <floor+0x8c>
 800c46a:	4a26      	ldr	r2, [pc, #152]	; (800c504 <floor+0xe4>)
 800c46c:	411a      	asrs	r2, r3
 800c46e:	ea01 0402 	and.w	r4, r1, r2
 800c472:	4304      	orrs	r4, r0
 800c474:	d01a      	beq.n	800c4ac <floor+0x8c>
 800c476:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800c4f8 <floor+0xd8>
 800c47a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c47e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c486:	ddeb      	ble.n	800c460 <floor+0x40>
 800c488:	2900      	cmp	r1, #0
 800c48a:	bfbe      	ittt	lt
 800c48c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800c490:	fa40 f303 	asrlt.w	r3, r0, r3
 800c494:	18c9      	addlt	r1, r1, r3
 800c496:	ea21 0102 	bic.w	r1, r1, r2
 800c49a:	2000      	movs	r0, #0
 800c49c:	e7e0      	b.n	800c460 <floor+0x40>
 800c49e:	2b33      	cmp	r3, #51	; 0x33
 800c4a0:	dd05      	ble.n	800c4ae <floor+0x8e>
 800c4a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4a6:	d101      	bne.n	800c4ac <floor+0x8c>
 800c4a8:	ee30 0b00 	vadd.f64	d0, d0, d0
 800c4ac:	bd30      	pop	{r4, r5, pc}
 800c4ae:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800c4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b6:	40e2      	lsrs	r2, r4
 800c4b8:	4202      	tst	r2, r0
 800c4ba:	d0f7      	beq.n	800c4ac <floor+0x8c>
 800c4bc:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800c4f8 <floor+0xd8>
 800c4c0:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c4c4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c4c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4cc:	ddc8      	ble.n	800c460 <floor+0x40>
 800c4ce:	2900      	cmp	r1, #0
 800c4d0:	da02      	bge.n	800c4d8 <floor+0xb8>
 800c4d2:	2b14      	cmp	r3, #20
 800c4d4:	d103      	bne.n	800c4de <floor+0xbe>
 800c4d6:	3101      	adds	r1, #1
 800c4d8:	ea20 0002 	bic.w	r0, r0, r2
 800c4dc:	e7c0      	b.n	800c460 <floor+0x40>
 800c4de:	2401      	movs	r4, #1
 800c4e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c4e4:	fa04 f303 	lsl.w	r3, r4, r3
 800c4e8:	4418      	add	r0, r3
 800c4ea:	42a8      	cmp	r0, r5
 800c4ec:	bf38      	it	cc
 800c4ee:	1909      	addcc	r1, r1, r4
 800c4f0:	e7f2      	b.n	800c4d8 <floor+0xb8>
 800c4f2:	2000      	movs	r0, #0
 800c4f4:	4601      	mov	r1, r0
 800c4f6:	e7b3      	b.n	800c460 <floor+0x40>
 800c4f8:	8800759c 	.word	0x8800759c
 800c4fc:	7e37e43c 	.word	0x7e37e43c
 800c500:	bff00000 	.word	0xbff00000
 800c504:	000fffff 	.word	0x000fffff

0800c508 <scalbn>:
 800c508:	b082      	sub	sp, #8
 800c50a:	ed8d 0b00 	vstr	d0, [sp]
 800c50e:	9b01      	ldr	r3, [sp, #4]
 800c510:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c514:	b9a2      	cbnz	r2, 800c540 <scalbn+0x38>
 800c516:	9a00      	ldr	r2, [sp, #0]
 800c518:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c51c:	4313      	orrs	r3, r2
 800c51e:	d03a      	beq.n	800c596 <scalbn+0x8e>
 800c520:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800c5f8 <scalbn+0xf0>
 800c524:	4b40      	ldr	r3, [pc, #256]	; (800c628 <scalbn+0x120>)
 800c526:	ee20 7b07 	vmul.f64	d7, d0, d7
 800c52a:	4298      	cmp	r0, r3
 800c52c:	ed8d 7b00 	vstr	d7, [sp]
 800c530:	da11      	bge.n	800c556 <scalbn+0x4e>
 800c532:	ed9f 7b33 	vldr	d7, [pc, #204]	; 800c600 <scalbn+0xf8>
 800c536:	ed9d 6b00 	vldr	d6, [sp]
 800c53a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c53e:	e007      	b.n	800c550 <scalbn+0x48>
 800c540:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c544:	428a      	cmp	r2, r1
 800c546:	d10a      	bne.n	800c55e <scalbn+0x56>
 800c548:	ed9d 7b00 	vldr	d7, [sp]
 800c54c:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c550:	ed8d 7b00 	vstr	d7, [sp]
 800c554:	e01f      	b.n	800c596 <scalbn+0x8e>
 800c556:	9b01      	ldr	r3, [sp, #4]
 800c558:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c55c:	3a36      	subs	r2, #54	; 0x36
 800c55e:	4402      	add	r2, r0
 800c560:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c564:	428a      	cmp	r2, r1
 800c566:	dd0a      	ble.n	800c57e <scalbn+0x76>
 800c568:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800c608 <scalbn+0x100>
 800c56c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 800c610 <scalbn+0x108>
 800c570:	eeb0 6b47 	vmov.f64	d6, d7
 800c574:	9b01      	ldr	r3, [sp, #4]
 800c576:	2b00      	cmp	r3, #0
 800c578:	fe27 7b05 	vselge.f64	d7, d7, d5
 800c57c:	e7dd      	b.n	800c53a <scalbn+0x32>
 800c57e:	2a00      	cmp	r2, #0
 800c580:	dd0d      	ble.n	800c59e <scalbn+0x96>
 800c582:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c586:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c58a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c58e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c592:	e9cd 0100 	strd	r0, r1, [sp]
 800c596:	ed9d 0b00 	vldr	d0, [sp]
 800c59a:	b002      	add	sp, #8
 800c59c:	4770      	bx	lr
 800c59e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c5a2:	da18      	bge.n	800c5d6 <scalbn+0xce>
 800c5a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c5a8:	4298      	cmp	r0, r3
 800c5aa:	9b01      	ldr	r3, [sp, #4]
 800c5ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5b0:	dd09      	ble.n	800c5c6 <scalbn+0xbe>
 800c5b2:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800c608 <scalbn+0x100>
 800c5b6:	ed9f 5b16 	vldr	d5, [pc, #88]	; 800c610 <scalbn+0x108>
 800c5ba:	eeb0 6b47 	vmov.f64	d6, d7
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	fe07 7b05 	vseleq.f64	d7, d7, d5
 800c5c4:	e7b9      	b.n	800c53a <scalbn+0x32>
 800c5c6:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 800c600 <scalbn+0xf8>
 800c5ca:	ed9f 5b13 	vldr	d5, [pc, #76]	; 800c618 <scalbn+0x110>
 800c5ce:	eeb0 6b47 	vmov.f64	d6, d7
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	e7f4      	b.n	800c5c0 <scalbn+0xb8>
 800c5d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5de:	3236      	adds	r2, #54	; 0x36
 800c5e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5e4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c5e8:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 800c620 <scalbn+0x118>
 800c5ec:	ec41 0b17 	vmov	d7, r0, r1
 800c5f0:	e7a3      	b.n	800c53a <scalbn+0x32>
 800c5f2:	bf00      	nop
 800c5f4:	f3af 8000 	nop.w
 800c5f8:	00000000 	.word	0x00000000
 800c5fc:	43500000 	.word	0x43500000
 800c600:	c2f8f359 	.word	0xc2f8f359
 800c604:	01a56e1f 	.word	0x01a56e1f
 800c608:	8800759c 	.word	0x8800759c
 800c60c:	7e37e43c 	.word	0x7e37e43c
 800c610:	8800759c 	.word	0x8800759c
 800c614:	fe37e43c 	.word	0xfe37e43c
 800c618:	c2f8f359 	.word	0xc2f8f359
 800c61c:	81a56e1f 	.word	0x81a56e1f
 800c620:	00000000 	.word	0x00000000
 800c624:	3c900000 	.word	0x3c900000
 800c628:	ffff3cb0 	.word	0xffff3cb0

0800c62c <__errno>:
 800c62c:	4b01      	ldr	r3, [pc, #4]	; (800c634 <__errno+0x8>)
 800c62e:	6818      	ldr	r0, [r3, #0]
 800c630:	4770      	bx	lr
 800c632:	bf00      	nop
 800c634:	24000020 	.word	0x24000020

0800c638 <__libc_init_array>:
 800c638:	b570      	push	{r4, r5, r6, lr}
 800c63a:	4d0d      	ldr	r5, [pc, #52]	; (800c670 <__libc_init_array+0x38>)
 800c63c:	4c0d      	ldr	r4, [pc, #52]	; (800c674 <__libc_init_array+0x3c>)
 800c63e:	1b64      	subs	r4, r4, r5
 800c640:	10a4      	asrs	r4, r4, #2
 800c642:	2600      	movs	r6, #0
 800c644:	42a6      	cmp	r6, r4
 800c646:	d109      	bne.n	800c65c <__libc_init_array+0x24>
 800c648:	4d0b      	ldr	r5, [pc, #44]	; (800c678 <__libc_init_array+0x40>)
 800c64a:	4c0c      	ldr	r4, [pc, #48]	; (800c67c <__libc_init_array+0x44>)
 800c64c:	f002 fc60 	bl	800ef10 <_init>
 800c650:	1b64      	subs	r4, r4, r5
 800c652:	10a4      	asrs	r4, r4, #2
 800c654:	2600      	movs	r6, #0
 800c656:	42a6      	cmp	r6, r4
 800c658:	d105      	bne.n	800c666 <__libc_init_array+0x2e>
 800c65a:	bd70      	pop	{r4, r5, r6, pc}
 800c65c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c660:	4798      	blx	r3
 800c662:	3601      	adds	r6, #1
 800c664:	e7ee      	b.n	800c644 <__libc_init_array+0xc>
 800c666:	f855 3b04 	ldr.w	r3, [r5], #4
 800c66a:	4798      	blx	r3
 800c66c:	3601      	adds	r6, #1
 800c66e:	e7f2      	b.n	800c656 <__libc_init_array+0x1e>
 800c670:	0800f52c 	.word	0x0800f52c
 800c674:	0800f52c 	.word	0x0800f52c
 800c678:	0800f52c 	.word	0x0800f52c
 800c67c:	0800f534 	.word	0x0800f534

0800c680 <memset>:
 800c680:	4402      	add	r2, r0
 800c682:	4603      	mov	r3, r0
 800c684:	4293      	cmp	r3, r2
 800c686:	d100      	bne.n	800c68a <memset+0xa>
 800c688:	4770      	bx	lr
 800c68a:	f803 1b01 	strb.w	r1, [r3], #1
 800c68e:	e7f9      	b.n	800c684 <memset+0x4>

0800c690 <__cvt>:
 800c690:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c692:	ed2d 8b02 	vpush	{d8}
 800c696:	eeb0 8b40 	vmov.f64	d8, d0
 800c69a:	b085      	sub	sp, #20
 800c69c:	4617      	mov	r7, r2
 800c69e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800c6a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800c6a2:	ee18 2a90 	vmov	r2, s17
 800c6a6:	f025 0520 	bic.w	r5, r5, #32
 800c6aa:	2a00      	cmp	r2, #0
 800c6ac:	bfb6      	itet	lt
 800c6ae:	222d      	movlt	r2, #45	; 0x2d
 800c6b0:	2200      	movge	r2, #0
 800c6b2:	eeb1 8b40 	vneglt.f64	d8, d0
 800c6b6:	2d46      	cmp	r5, #70	; 0x46
 800c6b8:	460c      	mov	r4, r1
 800c6ba:	701a      	strb	r2, [r3, #0]
 800c6bc:	d004      	beq.n	800c6c8 <__cvt+0x38>
 800c6be:	2d45      	cmp	r5, #69	; 0x45
 800c6c0:	d100      	bne.n	800c6c4 <__cvt+0x34>
 800c6c2:	3401      	adds	r4, #1
 800c6c4:	2102      	movs	r1, #2
 800c6c6:	e000      	b.n	800c6ca <__cvt+0x3a>
 800c6c8:	2103      	movs	r1, #3
 800c6ca:	ab03      	add	r3, sp, #12
 800c6cc:	9301      	str	r3, [sp, #4]
 800c6ce:	ab02      	add	r3, sp, #8
 800c6d0:	9300      	str	r3, [sp, #0]
 800c6d2:	4622      	mov	r2, r4
 800c6d4:	4633      	mov	r3, r6
 800c6d6:	eeb0 0b48 	vmov.f64	d0, d8
 800c6da:	f000 fca9 	bl	800d030 <_dtoa_r>
 800c6de:	2d47      	cmp	r5, #71	; 0x47
 800c6e0:	d109      	bne.n	800c6f6 <__cvt+0x66>
 800c6e2:	07fb      	lsls	r3, r7, #31
 800c6e4:	d407      	bmi.n	800c6f6 <__cvt+0x66>
 800c6e6:	9b03      	ldr	r3, [sp, #12]
 800c6e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6ea:	1a1b      	subs	r3, r3, r0
 800c6ec:	6013      	str	r3, [r2, #0]
 800c6ee:	b005      	add	sp, #20
 800c6f0:	ecbd 8b02 	vpop	{d8}
 800c6f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6f6:	2d46      	cmp	r5, #70	; 0x46
 800c6f8:	eb00 0204 	add.w	r2, r0, r4
 800c6fc:	d10c      	bne.n	800c718 <__cvt+0x88>
 800c6fe:	7803      	ldrb	r3, [r0, #0]
 800c700:	2b30      	cmp	r3, #48	; 0x30
 800c702:	d107      	bne.n	800c714 <__cvt+0x84>
 800c704:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c70c:	bf1c      	itt	ne
 800c70e:	f1c4 0401 	rsbne	r4, r4, #1
 800c712:	6034      	strne	r4, [r6, #0]
 800c714:	6833      	ldr	r3, [r6, #0]
 800c716:	441a      	add	r2, r3
 800c718:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c71c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c720:	bf08      	it	eq
 800c722:	9203      	streq	r2, [sp, #12]
 800c724:	2130      	movs	r1, #48	; 0x30
 800c726:	9b03      	ldr	r3, [sp, #12]
 800c728:	4293      	cmp	r3, r2
 800c72a:	d2dc      	bcs.n	800c6e6 <__cvt+0x56>
 800c72c:	1c5c      	adds	r4, r3, #1
 800c72e:	9403      	str	r4, [sp, #12]
 800c730:	7019      	strb	r1, [r3, #0]
 800c732:	e7f8      	b.n	800c726 <__cvt+0x96>

0800c734 <__exponent>:
 800c734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c736:	4603      	mov	r3, r0
 800c738:	2900      	cmp	r1, #0
 800c73a:	bfb8      	it	lt
 800c73c:	4249      	neglt	r1, r1
 800c73e:	f803 2b02 	strb.w	r2, [r3], #2
 800c742:	bfb4      	ite	lt
 800c744:	222d      	movlt	r2, #45	; 0x2d
 800c746:	222b      	movge	r2, #43	; 0x2b
 800c748:	2909      	cmp	r1, #9
 800c74a:	7042      	strb	r2, [r0, #1]
 800c74c:	dd2a      	ble.n	800c7a4 <__exponent+0x70>
 800c74e:	f10d 0407 	add.w	r4, sp, #7
 800c752:	46a4      	mov	ip, r4
 800c754:	270a      	movs	r7, #10
 800c756:	46a6      	mov	lr, r4
 800c758:	460a      	mov	r2, r1
 800c75a:	fb91 f6f7 	sdiv	r6, r1, r7
 800c75e:	fb07 1516 	mls	r5, r7, r6, r1
 800c762:	3530      	adds	r5, #48	; 0x30
 800c764:	2a63      	cmp	r2, #99	; 0x63
 800c766:	f104 34ff 	add.w	r4, r4, #4294967295
 800c76a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c76e:	4631      	mov	r1, r6
 800c770:	dcf1      	bgt.n	800c756 <__exponent+0x22>
 800c772:	3130      	adds	r1, #48	; 0x30
 800c774:	f1ae 0502 	sub.w	r5, lr, #2
 800c778:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c77c:	1c44      	adds	r4, r0, #1
 800c77e:	4629      	mov	r1, r5
 800c780:	4561      	cmp	r1, ip
 800c782:	d30a      	bcc.n	800c79a <__exponent+0x66>
 800c784:	f10d 0209 	add.w	r2, sp, #9
 800c788:	eba2 020e 	sub.w	r2, r2, lr
 800c78c:	4565      	cmp	r5, ip
 800c78e:	bf88      	it	hi
 800c790:	2200      	movhi	r2, #0
 800c792:	4413      	add	r3, r2
 800c794:	1a18      	subs	r0, r3, r0
 800c796:	b003      	add	sp, #12
 800c798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c79a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c79e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c7a2:	e7ed      	b.n	800c780 <__exponent+0x4c>
 800c7a4:	2330      	movs	r3, #48	; 0x30
 800c7a6:	3130      	adds	r1, #48	; 0x30
 800c7a8:	7083      	strb	r3, [r0, #2]
 800c7aa:	70c1      	strb	r1, [r0, #3]
 800c7ac:	1d03      	adds	r3, r0, #4
 800c7ae:	e7f1      	b.n	800c794 <__exponent+0x60>

0800c7b0 <_printf_float>:
 800c7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7b4:	b08b      	sub	sp, #44	; 0x2c
 800c7b6:	460c      	mov	r4, r1
 800c7b8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c7bc:	4616      	mov	r6, r2
 800c7be:	461f      	mov	r7, r3
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	f001 f9b7 	bl	800db34 <_localeconv_r>
 800c7c6:	f8d0 b000 	ldr.w	fp, [r0]
 800c7ca:	4658      	mov	r0, fp
 800c7cc:	f7f3 fd88 	bl	80002e0 <strlen>
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	9308      	str	r3, [sp, #32]
 800c7d4:	f8d8 3000 	ldr.w	r3, [r8]
 800c7d8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c7dc:	6822      	ldr	r2, [r4, #0]
 800c7de:	3307      	adds	r3, #7
 800c7e0:	f023 0307 	bic.w	r3, r3, #7
 800c7e4:	f103 0108 	add.w	r1, r3, #8
 800c7e8:	f8c8 1000 	str.w	r1, [r8]
 800c7ec:	4682      	mov	sl, r0
 800c7ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c7f2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c7f6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800ca58 <_printf_float+0x2a8>
 800c7fa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c7fe:	eeb0 6bc0 	vabs.f64	d6, d0
 800c802:	eeb4 6b47 	vcmp.f64	d6, d7
 800c806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c80a:	dd24      	ble.n	800c856 <_printf_float+0xa6>
 800c80c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c814:	d502      	bpl.n	800c81c <_printf_float+0x6c>
 800c816:	232d      	movs	r3, #45	; 0x2d
 800c818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c81c:	4b90      	ldr	r3, [pc, #576]	; (800ca60 <_printf_float+0x2b0>)
 800c81e:	4891      	ldr	r0, [pc, #580]	; (800ca64 <_printf_float+0x2b4>)
 800c820:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c824:	bf94      	ite	ls
 800c826:	4698      	movls	r8, r3
 800c828:	4680      	movhi	r8, r0
 800c82a:	2303      	movs	r3, #3
 800c82c:	6123      	str	r3, [r4, #16]
 800c82e:	f022 0204 	bic.w	r2, r2, #4
 800c832:	2300      	movs	r3, #0
 800c834:	6022      	str	r2, [r4, #0]
 800c836:	9304      	str	r3, [sp, #16]
 800c838:	9700      	str	r7, [sp, #0]
 800c83a:	4633      	mov	r3, r6
 800c83c:	aa09      	add	r2, sp, #36	; 0x24
 800c83e:	4621      	mov	r1, r4
 800c840:	4628      	mov	r0, r5
 800c842:	f000 f9d3 	bl	800cbec <_printf_common>
 800c846:	3001      	adds	r0, #1
 800c848:	f040 808a 	bne.w	800c960 <_printf_float+0x1b0>
 800c84c:	f04f 30ff 	mov.w	r0, #4294967295
 800c850:	b00b      	add	sp, #44	; 0x2c
 800c852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c856:	eeb4 0b40 	vcmp.f64	d0, d0
 800c85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c85e:	d709      	bvc.n	800c874 <_printf_float+0xc4>
 800c860:	ee10 3a90 	vmov	r3, s1
 800c864:	2b00      	cmp	r3, #0
 800c866:	bfbc      	itt	lt
 800c868:	232d      	movlt	r3, #45	; 0x2d
 800c86a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c86e:	487e      	ldr	r0, [pc, #504]	; (800ca68 <_printf_float+0x2b8>)
 800c870:	4b7e      	ldr	r3, [pc, #504]	; (800ca6c <_printf_float+0x2bc>)
 800c872:	e7d5      	b.n	800c820 <_printf_float+0x70>
 800c874:	6863      	ldr	r3, [r4, #4]
 800c876:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c87a:	9104      	str	r1, [sp, #16]
 800c87c:	1c59      	adds	r1, r3, #1
 800c87e:	d13c      	bne.n	800c8fa <_printf_float+0x14a>
 800c880:	2306      	movs	r3, #6
 800c882:	6063      	str	r3, [r4, #4]
 800c884:	2300      	movs	r3, #0
 800c886:	9303      	str	r3, [sp, #12]
 800c888:	ab08      	add	r3, sp, #32
 800c88a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c88e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c892:	ab07      	add	r3, sp, #28
 800c894:	6861      	ldr	r1, [r4, #4]
 800c896:	9300      	str	r3, [sp, #0]
 800c898:	6022      	str	r2, [r4, #0]
 800c89a:	f10d 031b 	add.w	r3, sp, #27
 800c89e:	4628      	mov	r0, r5
 800c8a0:	f7ff fef6 	bl	800c690 <__cvt>
 800c8a4:	9b04      	ldr	r3, [sp, #16]
 800c8a6:	9907      	ldr	r1, [sp, #28]
 800c8a8:	2b47      	cmp	r3, #71	; 0x47
 800c8aa:	4680      	mov	r8, r0
 800c8ac:	d108      	bne.n	800c8c0 <_printf_float+0x110>
 800c8ae:	1cc8      	adds	r0, r1, #3
 800c8b0:	db02      	blt.n	800c8b8 <_printf_float+0x108>
 800c8b2:	6863      	ldr	r3, [r4, #4]
 800c8b4:	4299      	cmp	r1, r3
 800c8b6:	dd41      	ble.n	800c93c <_printf_float+0x18c>
 800c8b8:	f1a9 0902 	sub.w	r9, r9, #2
 800c8bc:	fa5f f989 	uxtb.w	r9, r9
 800c8c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c8c4:	d820      	bhi.n	800c908 <_printf_float+0x158>
 800c8c6:	3901      	subs	r1, #1
 800c8c8:	464a      	mov	r2, r9
 800c8ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c8ce:	9107      	str	r1, [sp, #28]
 800c8d0:	f7ff ff30 	bl	800c734 <__exponent>
 800c8d4:	9a08      	ldr	r2, [sp, #32]
 800c8d6:	9004      	str	r0, [sp, #16]
 800c8d8:	1813      	adds	r3, r2, r0
 800c8da:	2a01      	cmp	r2, #1
 800c8dc:	6123      	str	r3, [r4, #16]
 800c8de:	dc02      	bgt.n	800c8e6 <_printf_float+0x136>
 800c8e0:	6822      	ldr	r2, [r4, #0]
 800c8e2:	07d2      	lsls	r2, r2, #31
 800c8e4:	d501      	bpl.n	800c8ea <_printf_float+0x13a>
 800c8e6:	3301      	adds	r3, #1
 800c8e8:	6123      	str	r3, [r4, #16]
 800c8ea:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d0a2      	beq.n	800c838 <_printf_float+0x88>
 800c8f2:	232d      	movs	r3, #45	; 0x2d
 800c8f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8f8:	e79e      	b.n	800c838 <_printf_float+0x88>
 800c8fa:	9904      	ldr	r1, [sp, #16]
 800c8fc:	2947      	cmp	r1, #71	; 0x47
 800c8fe:	d1c1      	bne.n	800c884 <_printf_float+0xd4>
 800c900:	2b00      	cmp	r3, #0
 800c902:	d1bf      	bne.n	800c884 <_printf_float+0xd4>
 800c904:	2301      	movs	r3, #1
 800c906:	e7bc      	b.n	800c882 <_printf_float+0xd2>
 800c908:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c90c:	d118      	bne.n	800c940 <_printf_float+0x190>
 800c90e:	2900      	cmp	r1, #0
 800c910:	6863      	ldr	r3, [r4, #4]
 800c912:	dd0b      	ble.n	800c92c <_printf_float+0x17c>
 800c914:	6121      	str	r1, [r4, #16]
 800c916:	b913      	cbnz	r3, 800c91e <_printf_float+0x16e>
 800c918:	6822      	ldr	r2, [r4, #0]
 800c91a:	07d0      	lsls	r0, r2, #31
 800c91c:	d502      	bpl.n	800c924 <_printf_float+0x174>
 800c91e:	3301      	adds	r3, #1
 800c920:	440b      	add	r3, r1
 800c922:	6123      	str	r3, [r4, #16]
 800c924:	2300      	movs	r3, #0
 800c926:	65a1      	str	r1, [r4, #88]	; 0x58
 800c928:	9304      	str	r3, [sp, #16]
 800c92a:	e7de      	b.n	800c8ea <_printf_float+0x13a>
 800c92c:	b913      	cbnz	r3, 800c934 <_printf_float+0x184>
 800c92e:	6822      	ldr	r2, [r4, #0]
 800c930:	07d2      	lsls	r2, r2, #31
 800c932:	d501      	bpl.n	800c938 <_printf_float+0x188>
 800c934:	3302      	adds	r3, #2
 800c936:	e7f4      	b.n	800c922 <_printf_float+0x172>
 800c938:	2301      	movs	r3, #1
 800c93a:	e7f2      	b.n	800c922 <_printf_float+0x172>
 800c93c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c940:	9b08      	ldr	r3, [sp, #32]
 800c942:	4299      	cmp	r1, r3
 800c944:	db05      	blt.n	800c952 <_printf_float+0x1a2>
 800c946:	6823      	ldr	r3, [r4, #0]
 800c948:	6121      	str	r1, [r4, #16]
 800c94a:	07d8      	lsls	r0, r3, #31
 800c94c:	d5ea      	bpl.n	800c924 <_printf_float+0x174>
 800c94e:	1c4b      	adds	r3, r1, #1
 800c950:	e7e7      	b.n	800c922 <_printf_float+0x172>
 800c952:	2900      	cmp	r1, #0
 800c954:	bfd4      	ite	le
 800c956:	f1c1 0202 	rsble	r2, r1, #2
 800c95a:	2201      	movgt	r2, #1
 800c95c:	4413      	add	r3, r2
 800c95e:	e7e0      	b.n	800c922 <_printf_float+0x172>
 800c960:	6823      	ldr	r3, [r4, #0]
 800c962:	055a      	lsls	r2, r3, #21
 800c964:	d407      	bmi.n	800c976 <_printf_float+0x1c6>
 800c966:	6923      	ldr	r3, [r4, #16]
 800c968:	4642      	mov	r2, r8
 800c96a:	4631      	mov	r1, r6
 800c96c:	4628      	mov	r0, r5
 800c96e:	47b8      	blx	r7
 800c970:	3001      	adds	r0, #1
 800c972:	d12a      	bne.n	800c9ca <_printf_float+0x21a>
 800c974:	e76a      	b.n	800c84c <_printf_float+0x9c>
 800c976:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c97a:	f240 80e2 	bls.w	800cb42 <_printf_float+0x392>
 800c97e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c982:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c98a:	d133      	bne.n	800c9f4 <_printf_float+0x244>
 800c98c:	4a38      	ldr	r2, [pc, #224]	; (800ca70 <_printf_float+0x2c0>)
 800c98e:	2301      	movs	r3, #1
 800c990:	4631      	mov	r1, r6
 800c992:	4628      	mov	r0, r5
 800c994:	47b8      	blx	r7
 800c996:	3001      	adds	r0, #1
 800c998:	f43f af58 	beq.w	800c84c <_printf_float+0x9c>
 800c99c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	db02      	blt.n	800c9aa <_printf_float+0x1fa>
 800c9a4:	6823      	ldr	r3, [r4, #0]
 800c9a6:	07d8      	lsls	r0, r3, #31
 800c9a8:	d50f      	bpl.n	800c9ca <_printf_float+0x21a>
 800c9aa:	4653      	mov	r3, sl
 800c9ac:	465a      	mov	r2, fp
 800c9ae:	4631      	mov	r1, r6
 800c9b0:	4628      	mov	r0, r5
 800c9b2:	47b8      	blx	r7
 800c9b4:	3001      	adds	r0, #1
 800c9b6:	f43f af49 	beq.w	800c84c <_printf_float+0x9c>
 800c9ba:	f04f 0800 	mov.w	r8, #0
 800c9be:	f104 091a 	add.w	r9, r4, #26
 800c9c2:	9b08      	ldr	r3, [sp, #32]
 800c9c4:	3b01      	subs	r3, #1
 800c9c6:	4543      	cmp	r3, r8
 800c9c8:	dc09      	bgt.n	800c9de <_printf_float+0x22e>
 800c9ca:	6823      	ldr	r3, [r4, #0]
 800c9cc:	079b      	lsls	r3, r3, #30
 800c9ce:	f100 8108 	bmi.w	800cbe2 <_printf_float+0x432>
 800c9d2:	68e0      	ldr	r0, [r4, #12]
 800c9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9d6:	4298      	cmp	r0, r3
 800c9d8:	bfb8      	it	lt
 800c9da:	4618      	movlt	r0, r3
 800c9dc:	e738      	b.n	800c850 <_printf_float+0xa0>
 800c9de:	2301      	movs	r3, #1
 800c9e0:	464a      	mov	r2, r9
 800c9e2:	4631      	mov	r1, r6
 800c9e4:	4628      	mov	r0, r5
 800c9e6:	47b8      	blx	r7
 800c9e8:	3001      	adds	r0, #1
 800c9ea:	f43f af2f 	beq.w	800c84c <_printf_float+0x9c>
 800c9ee:	f108 0801 	add.w	r8, r8, #1
 800c9f2:	e7e6      	b.n	800c9c2 <_printf_float+0x212>
 800c9f4:	9b07      	ldr	r3, [sp, #28]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	dc3c      	bgt.n	800ca74 <_printf_float+0x2c4>
 800c9fa:	4a1d      	ldr	r2, [pc, #116]	; (800ca70 <_printf_float+0x2c0>)
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	4631      	mov	r1, r6
 800ca00:	4628      	mov	r0, r5
 800ca02:	47b8      	blx	r7
 800ca04:	3001      	adds	r0, #1
 800ca06:	f43f af21 	beq.w	800c84c <_printf_float+0x9c>
 800ca0a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	d102      	bne.n	800ca18 <_printf_float+0x268>
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	07d9      	lsls	r1, r3, #31
 800ca16:	d5d8      	bpl.n	800c9ca <_printf_float+0x21a>
 800ca18:	4653      	mov	r3, sl
 800ca1a:	465a      	mov	r2, fp
 800ca1c:	4631      	mov	r1, r6
 800ca1e:	4628      	mov	r0, r5
 800ca20:	47b8      	blx	r7
 800ca22:	3001      	adds	r0, #1
 800ca24:	f43f af12 	beq.w	800c84c <_printf_float+0x9c>
 800ca28:	f04f 0900 	mov.w	r9, #0
 800ca2c:	f104 0a1a 	add.w	sl, r4, #26
 800ca30:	9b07      	ldr	r3, [sp, #28]
 800ca32:	425b      	negs	r3, r3
 800ca34:	454b      	cmp	r3, r9
 800ca36:	dc01      	bgt.n	800ca3c <_printf_float+0x28c>
 800ca38:	9b08      	ldr	r3, [sp, #32]
 800ca3a:	e795      	b.n	800c968 <_printf_float+0x1b8>
 800ca3c:	2301      	movs	r3, #1
 800ca3e:	4652      	mov	r2, sl
 800ca40:	4631      	mov	r1, r6
 800ca42:	4628      	mov	r0, r5
 800ca44:	47b8      	blx	r7
 800ca46:	3001      	adds	r0, #1
 800ca48:	f43f af00 	beq.w	800c84c <_printf_float+0x9c>
 800ca4c:	f109 0901 	add.w	r9, r9, #1
 800ca50:	e7ee      	b.n	800ca30 <_printf_float+0x280>
 800ca52:	bf00      	nop
 800ca54:	f3af 8000 	nop.w
 800ca58:	ffffffff 	.word	0xffffffff
 800ca5c:	7fefffff 	.word	0x7fefffff
 800ca60:	0800f144 	.word	0x0800f144
 800ca64:	0800f148 	.word	0x0800f148
 800ca68:	0800f150 	.word	0x0800f150
 800ca6c:	0800f14c 	.word	0x0800f14c
 800ca70:	0800f154 	.word	0x0800f154
 800ca74:	9a08      	ldr	r2, [sp, #32]
 800ca76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	bfa8      	it	ge
 800ca7c:	461a      	movge	r2, r3
 800ca7e:	2a00      	cmp	r2, #0
 800ca80:	4691      	mov	r9, r2
 800ca82:	dc38      	bgt.n	800caf6 <_printf_float+0x346>
 800ca84:	2300      	movs	r3, #0
 800ca86:	9305      	str	r3, [sp, #20]
 800ca88:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca8c:	f104 021a 	add.w	r2, r4, #26
 800ca90:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca92:	9905      	ldr	r1, [sp, #20]
 800ca94:	9304      	str	r3, [sp, #16]
 800ca96:	eba3 0309 	sub.w	r3, r3, r9
 800ca9a:	428b      	cmp	r3, r1
 800ca9c:	dc33      	bgt.n	800cb06 <_printf_float+0x356>
 800ca9e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	db3c      	blt.n	800cb20 <_printf_float+0x370>
 800caa6:	6823      	ldr	r3, [r4, #0]
 800caa8:	07da      	lsls	r2, r3, #31
 800caaa:	d439      	bmi.n	800cb20 <_printf_float+0x370>
 800caac:	9a08      	ldr	r2, [sp, #32]
 800caae:	9b04      	ldr	r3, [sp, #16]
 800cab0:	9907      	ldr	r1, [sp, #28]
 800cab2:	1ad3      	subs	r3, r2, r3
 800cab4:	eba2 0901 	sub.w	r9, r2, r1
 800cab8:	4599      	cmp	r9, r3
 800caba:	bfa8      	it	ge
 800cabc:	4699      	movge	r9, r3
 800cabe:	f1b9 0f00 	cmp.w	r9, #0
 800cac2:	dc35      	bgt.n	800cb30 <_printf_float+0x380>
 800cac4:	f04f 0800 	mov.w	r8, #0
 800cac8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cacc:	f104 0a1a 	add.w	sl, r4, #26
 800cad0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800cad4:	1a9b      	subs	r3, r3, r2
 800cad6:	eba3 0309 	sub.w	r3, r3, r9
 800cada:	4543      	cmp	r3, r8
 800cadc:	f77f af75 	ble.w	800c9ca <_printf_float+0x21a>
 800cae0:	2301      	movs	r3, #1
 800cae2:	4652      	mov	r2, sl
 800cae4:	4631      	mov	r1, r6
 800cae6:	4628      	mov	r0, r5
 800cae8:	47b8      	blx	r7
 800caea:	3001      	adds	r0, #1
 800caec:	f43f aeae 	beq.w	800c84c <_printf_float+0x9c>
 800caf0:	f108 0801 	add.w	r8, r8, #1
 800caf4:	e7ec      	b.n	800cad0 <_printf_float+0x320>
 800caf6:	4613      	mov	r3, r2
 800caf8:	4631      	mov	r1, r6
 800cafa:	4642      	mov	r2, r8
 800cafc:	4628      	mov	r0, r5
 800cafe:	47b8      	blx	r7
 800cb00:	3001      	adds	r0, #1
 800cb02:	d1bf      	bne.n	800ca84 <_printf_float+0x2d4>
 800cb04:	e6a2      	b.n	800c84c <_printf_float+0x9c>
 800cb06:	2301      	movs	r3, #1
 800cb08:	4631      	mov	r1, r6
 800cb0a:	4628      	mov	r0, r5
 800cb0c:	9204      	str	r2, [sp, #16]
 800cb0e:	47b8      	blx	r7
 800cb10:	3001      	adds	r0, #1
 800cb12:	f43f ae9b 	beq.w	800c84c <_printf_float+0x9c>
 800cb16:	9b05      	ldr	r3, [sp, #20]
 800cb18:	9a04      	ldr	r2, [sp, #16]
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	9305      	str	r3, [sp, #20]
 800cb1e:	e7b7      	b.n	800ca90 <_printf_float+0x2e0>
 800cb20:	4653      	mov	r3, sl
 800cb22:	465a      	mov	r2, fp
 800cb24:	4631      	mov	r1, r6
 800cb26:	4628      	mov	r0, r5
 800cb28:	47b8      	blx	r7
 800cb2a:	3001      	adds	r0, #1
 800cb2c:	d1be      	bne.n	800caac <_printf_float+0x2fc>
 800cb2e:	e68d      	b.n	800c84c <_printf_float+0x9c>
 800cb30:	9a04      	ldr	r2, [sp, #16]
 800cb32:	464b      	mov	r3, r9
 800cb34:	4442      	add	r2, r8
 800cb36:	4631      	mov	r1, r6
 800cb38:	4628      	mov	r0, r5
 800cb3a:	47b8      	blx	r7
 800cb3c:	3001      	adds	r0, #1
 800cb3e:	d1c1      	bne.n	800cac4 <_printf_float+0x314>
 800cb40:	e684      	b.n	800c84c <_printf_float+0x9c>
 800cb42:	9a08      	ldr	r2, [sp, #32]
 800cb44:	2a01      	cmp	r2, #1
 800cb46:	dc01      	bgt.n	800cb4c <_printf_float+0x39c>
 800cb48:	07db      	lsls	r3, r3, #31
 800cb4a:	d537      	bpl.n	800cbbc <_printf_float+0x40c>
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	4642      	mov	r2, r8
 800cb50:	4631      	mov	r1, r6
 800cb52:	4628      	mov	r0, r5
 800cb54:	47b8      	blx	r7
 800cb56:	3001      	adds	r0, #1
 800cb58:	f43f ae78 	beq.w	800c84c <_printf_float+0x9c>
 800cb5c:	4653      	mov	r3, sl
 800cb5e:	465a      	mov	r2, fp
 800cb60:	4631      	mov	r1, r6
 800cb62:	4628      	mov	r0, r5
 800cb64:	47b8      	blx	r7
 800cb66:	3001      	adds	r0, #1
 800cb68:	f43f ae70 	beq.w	800c84c <_printf_float+0x9c>
 800cb6c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800cb70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb78:	d01b      	beq.n	800cbb2 <_printf_float+0x402>
 800cb7a:	9b08      	ldr	r3, [sp, #32]
 800cb7c:	f108 0201 	add.w	r2, r8, #1
 800cb80:	3b01      	subs	r3, #1
 800cb82:	4631      	mov	r1, r6
 800cb84:	4628      	mov	r0, r5
 800cb86:	47b8      	blx	r7
 800cb88:	3001      	adds	r0, #1
 800cb8a:	d10e      	bne.n	800cbaa <_printf_float+0x3fa>
 800cb8c:	e65e      	b.n	800c84c <_printf_float+0x9c>
 800cb8e:	2301      	movs	r3, #1
 800cb90:	464a      	mov	r2, r9
 800cb92:	4631      	mov	r1, r6
 800cb94:	4628      	mov	r0, r5
 800cb96:	47b8      	blx	r7
 800cb98:	3001      	adds	r0, #1
 800cb9a:	f43f ae57 	beq.w	800c84c <_printf_float+0x9c>
 800cb9e:	f108 0801 	add.w	r8, r8, #1
 800cba2:	9b08      	ldr	r3, [sp, #32]
 800cba4:	3b01      	subs	r3, #1
 800cba6:	4543      	cmp	r3, r8
 800cba8:	dcf1      	bgt.n	800cb8e <_printf_float+0x3de>
 800cbaa:	9b04      	ldr	r3, [sp, #16]
 800cbac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cbb0:	e6db      	b.n	800c96a <_printf_float+0x1ba>
 800cbb2:	f04f 0800 	mov.w	r8, #0
 800cbb6:	f104 091a 	add.w	r9, r4, #26
 800cbba:	e7f2      	b.n	800cba2 <_printf_float+0x3f2>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	4642      	mov	r2, r8
 800cbc0:	e7df      	b.n	800cb82 <_printf_float+0x3d2>
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	464a      	mov	r2, r9
 800cbc6:	4631      	mov	r1, r6
 800cbc8:	4628      	mov	r0, r5
 800cbca:	47b8      	blx	r7
 800cbcc:	3001      	adds	r0, #1
 800cbce:	f43f ae3d 	beq.w	800c84c <_printf_float+0x9c>
 800cbd2:	f108 0801 	add.w	r8, r8, #1
 800cbd6:	68e3      	ldr	r3, [r4, #12]
 800cbd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbda:	1a5b      	subs	r3, r3, r1
 800cbdc:	4543      	cmp	r3, r8
 800cbde:	dcf0      	bgt.n	800cbc2 <_printf_float+0x412>
 800cbe0:	e6f7      	b.n	800c9d2 <_printf_float+0x222>
 800cbe2:	f04f 0800 	mov.w	r8, #0
 800cbe6:	f104 0919 	add.w	r9, r4, #25
 800cbea:	e7f4      	b.n	800cbd6 <_printf_float+0x426>

0800cbec <_printf_common>:
 800cbec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf0:	4616      	mov	r6, r2
 800cbf2:	4699      	mov	r9, r3
 800cbf4:	688a      	ldr	r2, [r1, #8]
 800cbf6:	690b      	ldr	r3, [r1, #16]
 800cbf8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cbfc:	4293      	cmp	r3, r2
 800cbfe:	bfb8      	it	lt
 800cc00:	4613      	movlt	r3, r2
 800cc02:	6033      	str	r3, [r6, #0]
 800cc04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cc08:	4607      	mov	r7, r0
 800cc0a:	460c      	mov	r4, r1
 800cc0c:	b10a      	cbz	r2, 800cc12 <_printf_common+0x26>
 800cc0e:	3301      	adds	r3, #1
 800cc10:	6033      	str	r3, [r6, #0]
 800cc12:	6823      	ldr	r3, [r4, #0]
 800cc14:	0699      	lsls	r1, r3, #26
 800cc16:	bf42      	ittt	mi
 800cc18:	6833      	ldrmi	r3, [r6, #0]
 800cc1a:	3302      	addmi	r3, #2
 800cc1c:	6033      	strmi	r3, [r6, #0]
 800cc1e:	6825      	ldr	r5, [r4, #0]
 800cc20:	f015 0506 	ands.w	r5, r5, #6
 800cc24:	d106      	bne.n	800cc34 <_printf_common+0x48>
 800cc26:	f104 0a19 	add.w	sl, r4, #25
 800cc2a:	68e3      	ldr	r3, [r4, #12]
 800cc2c:	6832      	ldr	r2, [r6, #0]
 800cc2e:	1a9b      	subs	r3, r3, r2
 800cc30:	42ab      	cmp	r3, r5
 800cc32:	dc26      	bgt.n	800cc82 <_printf_common+0x96>
 800cc34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc38:	1e13      	subs	r3, r2, #0
 800cc3a:	6822      	ldr	r2, [r4, #0]
 800cc3c:	bf18      	it	ne
 800cc3e:	2301      	movne	r3, #1
 800cc40:	0692      	lsls	r2, r2, #26
 800cc42:	d42b      	bmi.n	800cc9c <_printf_common+0xb0>
 800cc44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc48:	4649      	mov	r1, r9
 800cc4a:	4638      	mov	r0, r7
 800cc4c:	47c0      	blx	r8
 800cc4e:	3001      	adds	r0, #1
 800cc50:	d01e      	beq.n	800cc90 <_printf_common+0xa4>
 800cc52:	6823      	ldr	r3, [r4, #0]
 800cc54:	68e5      	ldr	r5, [r4, #12]
 800cc56:	6832      	ldr	r2, [r6, #0]
 800cc58:	f003 0306 	and.w	r3, r3, #6
 800cc5c:	2b04      	cmp	r3, #4
 800cc5e:	bf08      	it	eq
 800cc60:	1aad      	subeq	r5, r5, r2
 800cc62:	68a3      	ldr	r3, [r4, #8]
 800cc64:	6922      	ldr	r2, [r4, #16]
 800cc66:	bf0c      	ite	eq
 800cc68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc6c:	2500      	movne	r5, #0
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	bfc4      	itt	gt
 800cc72:	1a9b      	subgt	r3, r3, r2
 800cc74:	18ed      	addgt	r5, r5, r3
 800cc76:	2600      	movs	r6, #0
 800cc78:	341a      	adds	r4, #26
 800cc7a:	42b5      	cmp	r5, r6
 800cc7c:	d11a      	bne.n	800ccb4 <_printf_common+0xc8>
 800cc7e:	2000      	movs	r0, #0
 800cc80:	e008      	b.n	800cc94 <_printf_common+0xa8>
 800cc82:	2301      	movs	r3, #1
 800cc84:	4652      	mov	r2, sl
 800cc86:	4649      	mov	r1, r9
 800cc88:	4638      	mov	r0, r7
 800cc8a:	47c0      	blx	r8
 800cc8c:	3001      	adds	r0, #1
 800cc8e:	d103      	bne.n	800cc98 <_printf_common+0xac>
 800cc90:	f04f 30ff 	mov.w	r0, #4294967295
 800cc94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc98:	3501      	adds	r5, #1
 800cc9a:	e7c6      	b.n	800cc2a <_printf_common+0x3e>
 800cc9c:	18e1      	adds	r1, r4, r3
 800cc9e:	1c5a      	adds	r2, r3, #1
 800cca0:	2030      	movs	r0, #48	; 0x30
 800cca2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cca6:	4422      	add	r2, r4
 800cca8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ccac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ccb0:	3302      	adds	r3, #2
 800ccb2:	e7c7      	b.n	800cc44 <_printf_common+0x58>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	4622      	mov	r2, r4
 800ccb8:	4649      	mov	r1, r9
 800ccba:	4638      	mov	r0, r7
 800ccbc:	47c0      	blx	r8
 800ccbe:	3001      	adds	r0, #1
 800ccc0:	d0e6      	beq.n	800cc90 <_printf_common+0xa4>
 800ccc2:	3601      	adds	r6, #1
 800ccc4:	e7d9      	b.n	800cc7a <_printf_common+0x8e>
	...

0800ccc8 <_printf_i>:
 800ccc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cccc:	460c      	mov	r4, r1
 800ccce:	4691      	mov	r9, r2
 800ccd0:	7e27      	ldrb	r7, [r4, #24]
 800ccd2:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ccd4:	2f78      	cmp	r7, #120	; 0x78
 800ccd6:	4680      	mov	r8, r0
 800ccd8:	469a      	mov	sl, r3
 800ccda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ccde:	d807      	bhi.n	800ccf0 <_printf_i+0x28>
 800cce0:	2f62      	cmp	r7, #98	; 0x62
 800cce2:	d80a      	bhi.n	800ccfa <_printf_i+0x32>
 800cce4:	2f00      	cmp	r7, #0
 800cce6:	f000 80d8 	beq.w	800ce9a <_printf_i+0x1d2>
 800ccea:	2f58      	cmp	r7, #88	; 0x58
 800ccec:	f000 80a3 	beq.w	800ce36 <_printf_i+0x16e>
 800ccf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ccf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ccf8:	e03a      	b.n	800cd70 <_printf_i+0xa8>
 800ccfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ccfe:	2b15      	cmp	r3, #21
 800cd00:	d8f6      	bhi.n	800ccf0 <_printf_i+0x28>
 800cd02:	a001      	add	r0, pc, #4	; (adr r0, 800cd08 <_printf_i+0x40>)
 800cd04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800cd08:	0800cd61 	.word	0x0800cd61
 800cd0c:	0800cd75 	.word	0x0800cd75
 800cd10:	0800ccf1 	.word	0x0800ccf1
 800cd14:	0800ccf1 	.word	0x0800ccf1
 800cd18:	0800ccf1 	.word	0x0800ccf1
 800cd1c:	0800ccf1 	.word	0x0800ccf1
 800cd20:	0800cd75 	.word	0x0800cd75
 800cd24:	0800ccf1 	.word	0x0800ccf1
 800cd28:	0800ccf1 	.word	0x0800ccf1
 800cd2c:	0800ccf1 	.word	0x0800ccf1
 800cd30:	0800ccf1 	.word	0x0800ccf1
 800cd34:	0800ce81 	.word	0x0800ce81
 800cd38:	0800cda5 	.word	0x0800cda5
 800cd3c:	0800ce63 	.word	0x0800ce63
 800cd40:	0800ccf1 	.word	0x0800ccf1
 800cd44:	0800ccf1 	.word	0x0800ccf1
 800cd48:	0800cea3 	.word	0x0800cea3
 800cd4c:	0800ccf1 	.word	0x0800ccf1
 800cd50:	0800cda5 	.word	0x0800cda5
 800cd54:	0800ccf1 	.word	0x0800ccf1
 800cd58:	0800ccf1 	.word	0x0800ccf1
 800cd5c:	0800ce6b 	.word	0x0800ce6b
 800cd60:	680b      	ldr	r3, [r1, #0]
 800cd62:	1d1a      	adds	r2, r3, #4
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	600a      	str	r2, [r1, #0]
 800cd68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800cd6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd70:	2301      	movs	r3, #1
 800cd72:	e0a3      	b.n	800cebc <_printf_i+0x1f4>
 800cd74:	6825      	ldr	r5, [r4, #0]
 800cd76:	6808      	ldr	r0, [r1, #0]
 800cd78:	062e      	lsls	r6, r5, #24
 800cd7a:	f100 0304 	add.w	r3, r0, #4
 800cd7e:	d50a      	bpl.n	800cd96 <_printf_i+0xce>
 800cd80:	6805      	ldr	r5, [r0, #0]
 800cd82:	600b      	str	r3, [r1, #0]
 800cd84:	2d00      	cmp	r5, #0
 800cd86:	da03      	bge.n	800cd90 <_printf_i+0xc8>
 800cd88:	232d      	movs	r3, #45	; 0x2d
 800cd8a:	426d      	negs	r5, r5
 800cd8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd90:	485e      	ldr	r0, [pc, #376]	; (800cf0c <_printf_i+0x244>)
 800cd92:	230a      	movs	r3, #10
 800cd94:	e019      	b.n	800cdca <_printf_i+0x102>
 800cd96:	f015 0f40 	tst.w	r5, #64	; 0x40
 800cd9a:	6805      	ldr	r5, [r0, #0]
 800cd9c:	600b      	str	r3, [r1, #0]
 800cd9e:	bf18      	it	ne
 800cda0:	b22d      	sxthne	r5, r5
 800cda2:	e7ef      	b.n	800cd84 <_printf_i+0xbc>
 800cda4:	680b      	ldr	r3, [r1, #0]
 800cda6:	6825      	ldr	r5, [r4, #0]
 800cda8:	1d18      	adds	r0, r3, #4
 800cdaa:	6008      	str	r0, [r1, #0]
 800cdac:	0628      	lsls	r0, r5, #24
 800cdae:	d501      	bpl.n	800cdb4 <_printf_i+0xec>
 800cdb0:	681d      	ldr	r5, [r3, #0]
 800cdb2:	e002      	b.n	800cdba <_printf_i+0xf2>
 800cdb4:	0669      	lsls	r1, r5, #25
 800cdb6:	d5fb      	bpl.n	800cdb0 <_printf_i+0xe8>
 800cdb8:	881d      	ldrh	r5, [r3, #0]
 800cdba:	4854      	ldr	r0, [pc, #336]	; (800cf0c <_printf_i+0x244>)
 800cdbc:	2f6f      	cmp	r7, #111	; 0x6f
 800cdbe:	bf0c      	ite	eq
 800cdc0:	2308      	moveq	r3, #8
 800cdc2:	230a      	movne	r3, #10
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cdca:	6866      	ldr	r6, [r4, #4]
 800cdcc:	60a6      	str	r6, [r4, #8]
 800cdce:	2e00      	cmp	r6, #0
 800cdd0:	bfa2      	ittt	ge
 800cdd2:	6821      	ldrge	r1, [r4, #0]
 800cdd4:	f021 0104 	bicge.w	r1, r1, #4
 800cdd8:	6021      	strge	r1, [r4, #0]
 800cdda:	b90d      	cbnz	r5, 800cde0 <_printf_i+0x118>
 800cddc:	2e00      	cmp	r6, #0
 800cdde:	d04d      	beq.n	800ce7c <_printf_i+0x1b4>
 800cde0:	4616      	mov	r6, r2
 800cde2:	fbb5 f1f3 	udiv	r1, r5, r3
 800cde6:	fb03 5711 	mls	r7, r3, r1, r5
 800cdea:	5dc7      	ldrb	r7, [r0, r7]
 800cdec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cdf0:	462f      	mov	r7, r5
 800cdf2:	42bb      	cmp	r3, r7
 800cdf4:	460d      	mov	r5, r1
 800cdf6:	d9f4      	bls.n	800cde2 <_printf_i+0x11a>
 800cdf8:	2b08      	cmp	r3, #8
 800cdfa:	d10b      	bne.n	800ce14 <_printf_i+0x14c>
 800cdfc:	6823      	ldr	r3, [r4, #0]
 800cdfe:	07df      	lsls	r7, r3, #31
 800ce00:	d508      	bpl.n	800ce14 <_printf_i+0x14c>
 800ce02:	6923      	ldr	r3, [r4, #16]
 800ce04:	6861      	ldr	r1, [r4, #4]
 800ce06:	4299      	cmp	r1, r3
 800ce08:	bfde      	ittt	le
 800ce0a:	2330      	movle	r3, #48	; 0x30
 800ce0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ce10:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ce14:	1b92      	subs	r2, r2, r6
 800ce16:	6122      	str	r2, [r4, #16]
 800ce18:	f8cd a000 	str.w	sl, [sp]
 800ce1c:	464b      	mov	r3, r9
 800ce1e:	aa03      	add	r2, sp, #12
 800ce20:	4621      	mov	r1, r4
 800ce22:	4640      	mov	r0, r8
 800ce24:	f7ff fee2 	bl	800cbec <_printf_common>
 800ce28:	3001      	adds	r0, #1
 800ce2a:	d14c      	bne.n	800cec6 <_printf_i+0x1fe>
 800ce2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce30:	b004      	add	sp, #16
 800ce32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce36:	4835      	ldr	r0, [pc, #212]	; (800cf0c <_printf_i+0x244>)
 800ce38:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ce3c:	6823      	ldr	r3, [r4, #0]
 800ce3e:	680e      	ldr	r6, [r1, #0]
 800ce40:	061f      	lsls	r7, r3, #24
 800ce42:	f856 5b04 	ldr.w	r5, [r6], #4
 800ce46:	600e      	str	r6, [r1, #0]
 800ce48:	d514      	bpl.n	800ce74 <_printf_i+0x1ac>
 800ce4a:	07d9      	lsls	r1, r3, #31
 800ce4c:	bf44      	itt	mi
 800ce4e:	f043 0320 	orrmi.w	r3, r3, #32
 800ce52:	6023      	strmi	r3, [r4, #0]
 800ce54:	b91d      	cbnz	r5, 800ce5e <_printf_i+0x196>
 800ce56:	6823      	ldr	r3, [r4, #0]
 800ce58:	f023 0320 	bic.w	r3, r3, #32
 800ce5c:	6023      	str	r3, [r4, #0]
 800ce5e:	2310      	movs	r3, #16
 800ce60:	e7b0      	b.n	800cdc4 <_printf_i+0xfc>
 800ce62:	6823      	ldr	r3, [r4, #0]
 800ce64:	f043 0320 	orr.w	r3, r3, #32
 800ce68:	6023      	str	r3, [r4, #0]
 800ce6a:	2378      	movs	r3, #120	; 0x78
 800ce6c:	4828      	ldr	r0, [pc, #160]	; (800cf10 <_printf_i+0x248>)
 800ce6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce72:	e7e3      	b.n	800ce3c <_printf_i+0x174>
 800ce74:	065e      	lsls	r6, r3, #25
 800ce76:	bf48      	it	mi
 800ce78:	b2ad      	uxthmi	r5, r5
 800ce7a:	e7e6      	b.n	800ce4a <_printf_i+0x182>
 800ce7c:	4616      	mov	r6, r2
 800ce7e:	e7bb      	b.n	800cdf8 <_printf_i+0x130>
 800ce80:	680b      	ldr	r3, [r1, #0]
 800ce82:	6826      	ldr	r6, [r4, #0]
 800ce84:	6960      	ldr	r0, [r4, #20]
 800ce86:	1d1d      	adds	r5, r3, #4
 800ce88:	600d      	str	r5, [r1, #0]
 800ce8a:	0635      	lsls	r5, r6, #24
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	d501      	bpl.n	800ce94 <_printf_i+0x1cc>
 800ce90:	6018      	str	r0, [r3, #0]
 800ce92:	e002      	b.n	800ce9a <_printf_i+0x1d2>
 800ce94:	0671      	lsls	r1, r6, #25
 800ce96:	d5fb      	bpl.n	800ce90 <_printf_i+0x1c8>
 800ce98:	8018      	strh	r0, [r3, #0]
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	6123      	str	r3, [r4, #16]
 800ce9e:	4616      	mov	r6, r2
 800cea0:	e7ba      	b.n	800ce18 <_printf_i+0x150>
 800cea2:	680b      	ldr	r3, [r1, #0]
 800cea4:	1d1a      	adds	r2, r3, #4
 800cea6:	600a      	str	r2, [r1, #0]
 800cea8:	681e      	ldr	r6, [r3, #0]
 800ceaa:	6862      	ldr	r2, [r4, #4]
 800ceac:	2100      	movs	r1, #0
 800ceae:	4630      	mov	r0, r6
 800ceb0:	f7f3 fa1e 	bl	80002f0 <memchr>
 800ceb4:	b108      	cbz	r0, 800ceba <_printf_i+0x1f2>
 800ceb6:	1b80      	subs	r0, r0, r6
 800ceb8:	6060      	str	r0, [r4, #4]
 800ceba:	6863      	ldr	r3, [r4, #4]
 800cebc:	6123      	str	r3, [r4, #16]
 800cebe:	2300      	movs	r3, #0
 800cec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cec4:	e7a8      	b.n	800ce18 <_printf_i+0x150>
 800cec6:	6923      	ldr	r3, [r4, #16]
 800cec8:	4632      	mov	r2, r6
 800ceca:	4649      	mov	r1, r9
 800cecc:	4640      	mov	r0, r8
 800cece:	47d0      	blx	sl
 800ced0:	3001      	adds	r0, #1
 800ced2:	d0ab      	beq.n	800ce2c <_printf_i+0x164>
 800ced4:	6823      	ldr	r3, [r4, #0]
 800ced6:	079b      	lsls	r3, r3, #30
 800ced8:	d413      	bmi.n	800cf02 <_printf_i+0x23a>
 800ceda:	68e0      	ldr	r0, [r4, #12]
 800cedc:	9b03      	ldr	r3, [sp, #12]
 800cede:	4298      	cmp	r0, r3
 800cee0:	bfb8      	it	lt
 800cee2:	4618      	movlt	r0, r3
 800cee4:	e7a4      	b.n	800ce30 <_printf_i+0x168>
 800cee6:	2301      	movs	r3, #1
 800cee8:	4632      	mov	r2, r6
 800ceea:	4649      	mov	r1, r9
 800ceec:	4640      	mov	r0, r8
 800ceee:	47d0      	blx	sl
 800cef0:	3001      	adds	r0, #1
 800cef2:	d09b      	beq.n	800ce2c <_printf_i+0x164>
 800cef4:	3501      	adds	r5, #1
 800cef6:	68e3      	ldr	r3, [r4, #12]
 800cef8:	9903      	ldr	r1, [sp, #12]
 800cefa:	1a5b      	subs	r3, r3, r1
 800cefc:	42ab      	cmp	r3, r5
 800cefe:	dcf2      	bgt.n	800cee6 <_printf_i+0x21e>
 800cf00:	e7eb      	b.n	800ceda <_printf_i+0x212>
 800cf02:	2500      	movs	r5, #0
 800cf04:	f104 0619 	add.w	r6, r4, #25
 800cf08:	e7f5      	b.n	800cef6 <_printf_i+0x22e>
 800cf0a:	bf00      	nop
 800cf0c:	0800f156 	.word	0x0800f156
 800cf10:	0800f167 	.word	0x0800f167

0800cf14 <quorem>:
 800cf14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf18:	6903      	ldr	r3, [r0, #16]
 800cf1a:	690c      	ldr	r4, [r1, #16]
 800cf1c:	42a3      	cmp	r3, r4
 800cf1e:	4607      	mov	r7, r0
 800cf20:	f2c0 8081 	blt.w	800d026 <quorem+0x112>
 800cf24:	3c01      	subs	r4, #1
 800cf26:	f101 0814 	add.w	r8, r1, #20
 800cf2a:	f100 0514 	add.w	r5, r0, #20
 800cf2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf32:	9301      	str	r3, [sp, #4]
 800cf34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cf44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cf48:	fbb2 f6f3 	udiv	r6, r2, r3
 800cf4c:	d331      	bcc.n	800cfb2 <quorem+0x9e>
 800cf4e:	f04f 0e00 	mov.w	lr, #0
 800cf52:	4640      	mov	r0, r8
 800cf54:	46ac      	mov	ip, r5
 800cf56:	46f2      	mov	sl, lr
 800cf58:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf5c:	b293      	uxth	r3, r2
 800cf5e:	fb06 e303 	mla	r3, r6, r3, lr
 800cf62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	ebaa 0303 	sub.w	r3, sl, r3
 800cf6c:	0c12      	lsrs	r2, r2, #16
 800cf6e:	f8dc a000 	ldr.w	sl, [ip]
 800cf72:	fb06 e202 	mla	r2, r6, r2, lr
 800cf76:	fa13 f38a 	uxtah	r3, r3, sl
 800cf7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf7e:	fa1f fa82 	uxth.w	sl, r2
 800cf82:	f8dc 2000 	ldr.w	r2, [ip]
 800cf86:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800cf8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf94:	4581      	cmp	r9, r0
 800cf96:	f84c 3b04 	str.w	r3, [ip], #4
 800cf9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cf9e:	d2db      	bcs.n	800cf58 <quorem+0x44>
 800cfa0:	f855 300b 	ldr.w	r3, [r5, fp]
 800cfa4:	b92b      	cbnz	r3, 800cfb2 <quorem+0x9e>
 800cfa6:	9b01      	ldr	r3, [sp, #4]
 800cfa8:	3b04      	subs	r3, #4
 800cfaa:	429d      	cmp	r5, r3
 800cfac:	461a      	mov	r2, r3
 800cfae:	d32e      	bcc.n	800d00e <quorem+0xfa>
 800cfb0:	613c      	str	r4, [r7, #16]
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	f001 f856 	bl	800e064 <__mcmp>
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	db24      	blt.n	800d006 <quorem+0xf2>
 800cfbc:	3601      	adds	r6, #1
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f04f 0c00 	mov.w	ip, #0
 800cfc4:	f858 2b04 	ldr.w	r2, [r8], #4
 800cfc8:	f8d0 e000 	ldr.w	lr, [r0]
 800cfcc:	b293      	uxth	r3, r2
 800cfce:	ebac 0303 	sub.w	r3, ip, r3
 800cfd2:	0c12      	lsrs	r2, r2, #16
 800cfd4:	fa13 f38e 	uxtah	r3, r3, lr
 800cfd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cfdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfe6:	45c1      	cmp	r9, r8
 800cfe8:	f840 3b04 	str.w	r3, [r0], #4
 800cfec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cff0:	d2e8      	bcs.n	800cfc4 <quorem+0xb0>
 800cff2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cff6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cffa:	b922      	cbnz	r2, 800d006 <quorem+0xf2>
 800cffc:	3b04      	subs	r3, #4
 800cffe:	429d      	cmp	r5, r3
 800d000:	461a      	mov	r2, r3
 800d002:	d30a      	bcc.n	800d01a <quorem+0x106>
 800d004:	613c      	str	r4, [r7, #16]
 800d006:	4630      	mov	r0, r6
 800d008:	b003      	add	sp, #12
 800d00a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d00e:	6812      	ldr	r2, [r2, #0]
 800d010:	3b04      	subs	r3, #4
 800d012:	2a00      	cmp	r2, #0
 800d014:	d1cc      	bne.n	800cfb0 <quorem+0x9c>
 800d016:	3c01      	subs	r4, #1
 800d018:	e7c7      	b.n	800cfaa <quorem+0x96>
 800d01a:	6812      	ldr	r2, [r2, #0]
 800d01c:	3b04      	subs	r3, #4
 800d01e:	2a00      	cmp	r2, #0
 800d020:	d1f0      	bne.n	800d004 <quorem+0xf0>
 800d022:	3c01      	subs	r4, #1
 800d024:	e7eb      	b.n	800cffe <quorem+0xea>
 800d026:	2000      	movs	r0, #0
 800d028:	e7ee      	b.n	800d008 <quorem+0xf4>
 800d02a:	0000      	movs	r0, r0
 800d02c:	0000      	movs	r0, r0
	...

0800d030 <_dtoa_r>:
 800d030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d034:	ec59 8b10 	vmov	r8, r9, d0
 800d038:	b095      	sub	sp, #84	; 0x54
 800d03a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d03c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800d03e:	9107      	str	r1, [sp, #28]
 800d040:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d044:	4606      	mov	r6, r0
 800d046:	9209      	str	r2, [sp, #36]	; 0x24
 800d048:	9310      	str	r3, [sp, #64]	; 0x40
 800d04a:	b975      	cbnz	r5, 800d06a <_dtoa_r+0x3a>
 800d04c:	2010      	movs	r0, #16
 800d04e:	f000 fd75 	bl	800db3c <malloc>
 800d052:	4602      	mov	r2, r0
 800d054:	6270      	str	r0, [r6, #36]	; 0x24
 800d056:	b920      	cbnz	r0, 800d062 <_dtoa_r+0x32>
 800d058:	4bab      	ldr	r3, [pc, #684]	; (800d308 <_dtoa_r+0x2d8>)
 800d05a:	21ea      	movs	r1, #234	; 0xea
 800d05c:	48ab      	ldr	r0, [pc, #684]	; (800d30c <_dtoa_r+0x2dc>)
 800d05e:	f001 f9cb 	bl	800e3f8 <__assert_func>
 800d062:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d066:	6005      	str	r5, [r0, #0]
 800d068:	60c5      	str	r5, [r0, #12]
 800d06a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d06c:	6819      	ldr	r1, [r3, #0]
 800d06e:	b151      	cbz	r1, 800d086 <_dtoa_r+0x56>
 800d070:	685a      	ldr	r2, [r3, #4]
 800d072:	604a      	str	r2, [r1, #4]
 800d074:	2301      	movs	r3, #1
 800d076:	4093      	lsls	r3, r2
 800d078:	608b      	str	r3, [r1, #8]
 800d07a:	4630      	mov	r0, r6
 800d07c:	f000 fdb4 	bl	800dbe8 <_Bfree>
 800d080:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d082:	2200      	movs	r2, #0
 800d084:	601a      	str	r2, [r3, #0]
 800d086:	f1b9 0300 	subs.w	r3, r9, #0
 800d08a:	bfbb      	ittet	lt
 800d08c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d090:	9303      	strlt	r3, [sp, #12]
 800d092:	2300      	movge	r3, #0
 800d094:	2201      	movlt	r2, #1
 800d096:	bfac      	ite	ge
 800d098:	6023      	strge	r3, [r4, #0]
 800d09a:	6022      	strlt	r2, [r4, #0]
 800d09c:	4b9c      	ldr	r3, [pc, #624]	; (800d310 <_dtoa_r+0x2e0>)
 800d09e:	9c03      	ldr	r4, [sp, #12]
 800d0a0:	43a3      	bics	r3, r4
 800d0a2:	d11a      	bne.n	800d0da <_dtoa_r+0xaa>
 800d0a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d0a6:	f242 730f 	movw	r3, #9999	; 0x270f
 800d0aa:	6013      	str	r3, [r2, #0]
 800d0ac:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800d0b0:	ea53 0308 	orrs.w	r3, r3, r8
 800d0b4:	f000 8512 	beq.w	800dadc <_dtoa_r+0xaac>
 800d0b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d0ba:	b953      	cbnz	r3, 800d0d2 <_dtoa_r+0xa2>
 800d0bc:	4b95      	ldr	r3, [pc, #596]	; (800d314 <_dtoa_r+0x2e4>)
 800d0be:	e01f      	b.n	800d100 <_dtoa_r+0xd0>
 800d0c0:	4b95      	ldr	r3, [pc, #596]	; (800d318 <_dtoa_r+0x2e8>)
 800d0c2:	9300      	str	r3, [sp, #0]
 800d0c4:	3308      	adds	r3, #8
 800d0c6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800d0c8:	6013      	str	r3, [r2, #0]
 800d0ca:	9800      	ldr	r0, [sp, #0]
 800d0cc:	b015      	add	sp, #84	; 0x54
 800d0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0d2:	4b90      	ldr	r3, [pc, #576]	; (800d314 <_dtoa_r+0x2e4>)
 800d0d4:	9300      	str	r3, [sp, #0]
 800d0d6:	3303      	adds	r3, #3
 800d0d8:	e7f5      	b.n	800d0c6 <_dtoa_r+0x96>
 800d0da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d0ea:	d10b      	bne.n	800d104 <_dtoa_r+0xd4>
 800d0ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	6013      	str	r3, [r2, #0]
 800d0f2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f000 84ee 	beq.w	800dad6 <_dtoa_r+0xaa6>
 800d0fa:	4888      	ldr	r0, [pc, #544]	; (800d31c <_dtoa_r+0x2ec>)
 800d0fc:	6018      	str	r0, [r3, #0]
 800d0fe:	1e43      	subs	r3, r0, #1
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	e7e2      	b.n	800d0ca <_dtoa_r+0x9a>
 800d104:	a913      	add	r1, sp, #76	; 0x4c
 800d106:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d10a:	aa12      	add	r2, sp, #72	; 0x48
 800d10c:	4630      	mov	r0, r6
 800d10e:	f001 f84d 	bl	800e1ac <__d2b>
 800d112:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800d116:	4605      	mov	r5, r0
 800d118:	9812      	ldr	r0, [sp, #72]	; 0x48
 800d11a:	2900      	cmp	r1, #0
 800d11c:	d047      	beq.n	800d1ae <_dtoa_r+0x17e>
 800d11e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800d120:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d124:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d128:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800d12c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d130:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d134:	2400      	movs	r4, #0
 800d136:	ec43 2b16 	vmov	d6, r2, r3
 800d13a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800d13e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d2f0 <_dtoa_r+0x2c0>
 800d142:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d146:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d2f8 <_dtoa_r+0x2c8>
 800d14a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800d14e:	eeb0 7b46 	vmov.f64	d7, d6
 800d152:	ee06 1a90 	vmov	s13, r1
 800d156:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800d15a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800d300 <_dtoa_r+0x2d0>
 800d15e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800d162:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800d166:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d16e:	ee16 ba90 	vmov	fp, s13
 800d172:	9411      	str	r4, [sp, #68]	; 0x44
 800d174:	d508      	bpl.n	800d188 <_dtoa_r+0x158>
 800d176:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800d17a:	eeb4 6b47 	vcmp.f64	d6, d7
 800d17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d182:	bf18      	it	ne
 800d184:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800d188:	f1bb 0f16 	cmp.w	fp, #22
 800d18c:	d832      	bhi.n	800d1f4 <_dtoa_r+0x1c4>
 800d18e:	4b64      	ldr	r3, [pc, #400]	; (800d320 <_dtoa_r+0x2f0>)
 800d190:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d194:	ed93 7b00 	vldr	d7, [r3]
 800d198:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d19c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d1a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a4:	d501      	bpl.n	800d1aa <_dtoa_r+0x17a>
 800d1a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	e023      	b.n	800d1f6 <_dtoa_r+0x1c6>
 800d1ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800d1b0:	4401      	add	r1, r0
 800d1b2:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800d1b6:	2b20      	cmp	r3, #32
 800d1b8:	bfc3      	ittte	gt
 800d1ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d1be:	fa04 f303 	lslgt.w	r3, r4, r3
 800d1c2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800d1c6:	f1c3 0320 	rsble	r3, r3, #32
 800d1ca:	bfc6      	itte	gt
 800d1cc:	fa28 f804 	lsrgt.w	r8, r8, r4
 800d1d0:	ea43 0308 	orrgt.w	r3, r3, r8
 800d1d4:	fa08 f303 	lslle.w	r3, r8, r3
 800d1d8:	ee07 3a90 	vmov	s15, r3
 800d1dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800d1e0:	3901      	subs	r1, #1
 800d1e2:	ed8d 7b00 	vstr	d7, [sp]
 800d1e6:	9c01      	ldr	r4, [sp, #4]
 800d1e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1ec:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800d1f0:	2401      	movs	r4, #1
 800d1f2:	e7a0      	b.n	800d136 <_dtoa_r+0x106>
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1f8:	1a43      	subs	r3, r0, r1
 800d1fa:	1e5a      	subs	r2, r3, #1
 800d1fc:	bf45      	ittet	mi
 800d1fe:	f1c3 0301 	rsbmi	r3, r3, #1
 800d202:	9305      	strmi	r3, [sp, #20]
 800d204:	2300      	movpl	r3, #0
 800d206:	2300      	movmi	r3, #0
 800d208:	9206      	str	r2, [sp, #24]
 800d20a:	bf54      	ite	pl
 800d20c:	9305      	strpl	r3, [sp, #20]
 800d20e:	9306      	strmi	r3, [sp, #24]
 800d210:	f1bb 0f00 	cmp.w	fp, #0
 800d214:	db18      	blt.n	800d248 <_dtoa_r+0x218>
 800d216:	9b06      	ldr	r3, [sp, #24]
 800d218:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800d21c:	445b      	add	r3, fp
 800d21e:	9306      	str	r3, [sp, #24]
 800d220:	2300      	movs	r3, #0
 800d222:	9a07      	ldr	r2, [sp, #28]
 800d224:	2a09      	cmp	r2, #9
 800d226:	d849      	bhi.n	800d2bc <_dtoa_r+0x28c>
 800d228:	2a05      	cmp	r2, #5
 800d22a:	bfc4      	itt	gt
 800d22c:	3a04      	subgt	r2, #4
 800d22e:	9207      	strgt	r2, [sp, #28]
 800d230:	9a07      	ldr	r2, [sp, #28]
 800d232:	f1a2 0202 	sub.w	r2, r2, #2
 800d236:	bfcc      	ite	gt
 800d238:	2400      	movgt	r4, #0
 800d23a:	2401      	movle	r4, #1
 800d23c:	2a03      	cmp	r2, #3
 800d23e:	d848      	bhi.n	800d2d2 <_dtoa_r+0x2a2>
 800d240:	e8df f002 	tbb	[pc, r2]
 800d244:	3a2c2e0b 	.word	0x3a2c2e0b
 800d248:	9b05      	ldr	r3, [sp, #20]
 800d24a:	2200      	movs	r2, #0
 800d24c:	eba3 030b 	sub.w	r3, r3, fp
 800d250:	9305      	str	r3, [sp, #20]
 800d252:	920e      	str	r2, [sp, #56]	; 0x38
 800d254:	f1cb 0300 	rsb	r3, fp, #0
 800d258:	e7e3      	b.n	800d222 <_dtoa_r+0x1f2>
 800d25a:	2200      	movs	r2, #0
 800d25c:	9208      	str	r2, [sp, #32]
 800d25e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d260:	2a00      	cmp	r2, #0
 800d262:	dc39      	bgt.n	800d2d8 <_dtoa_r+0x2a8>
 800d264:	f04f 0a01 	mov.w	sl, #1
 800d268:	46d1      	mov	r9, sl
 800d26a:	4652      	mov	r2, sl
 800d26c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800d270:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800d272:	2100      	movs	r1, #0
 800d274:	6079      	str	r1, [r7, #4]
 800d276:	2004      	movs	r0, #4
 800d278:	f100 0c14 	add.w	ip, r0, #20
 800d27c:	4594      	cmp	ip, r2
 800d27e:	6879      	ldr	r1, [r7, #4]
 800d280:	d92f      	bls.n	800d2e2 <_dtoa_r+0x2b2>
 800d282:	4630      	mov	r0, r6
 800d284:	930c      	str	r3, [sp, #48]	; 0x30
 800d286:	f000 fc6f 	bl	800db68 <_Balloc>
 800d28a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d28c:	9000      	str	r0, [sp, #0]
 800d28e:	4602      	mov	r2, r0
 800d290:	2800      	cmp	r0, #0
 800d292:	d149      	bne.n	800d328 <_dtoa_r+0x2f8>
 800d294:	4b23      	ldr	r3, [pc, #140]	; (800d324 <_dtoa_r+0x2f4>)
 800d296:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d29a:	e6df      	b.n	800d05c <_dtoa_r+0x2c>
 800d29c:	2201      	movs	r2, #1
 800d29e:	e7dd      	b.n	800d25c <_dtoa_r+0x22c>
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	9208      	str	r2, [sp, #32]
 800d2a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2a6:	eb0b 0a02 	add.w	sl, fp, r2
 800d2aa:	f10a 0901 	add.w	r9, sl, #1
 800d2ae:	464a      	mov	r2, r9
 800d2b0:	2a01      	cmp	r2, #1
 800d2b2:	bfb8      	it	lt
 800d2b4:	2201      	movlt	r2, #1
 800d2b6:	e7db      	b.n	800d270 <_dtoa_r+0x240>
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	e7f2      	b.n	800d2a2 <_dtoa_r+0x272>
 800d2bc:	2401      	movs	r4, #1
 800d2be:	2200      	movs	r2, #0
 800d2c0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800d2c4:	f04f 3aff 	mov.w	sl, #4294967295
 800d2c8:	2100      	movs	r1, #0
 800d2ca:	46d1      	mov	r9, sl
 800d2cc:	2212      	movs	r2, #18
 800d2ce:	9109      	str	r1, [sp, #36]	; 0x24
 800d2d0:	e7ce      	b.n	800d270 <_dtoa_r+0x240>
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	9208      	str	r2, [sp, #32]
 800d2d6:	e7f5      	b.n	800d2c4 <_dtoa_r+0x294>
 800d2d8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800d2dc:	46d1      	mov	r9, sl
 800d2de:	4652      	mov	r2, sl
 800d2e0:	e7c6      	b.n	800d270 <_dtoa_r+0x240>
 800d2e2:	3101      	adds	r1, #1
 800d2e4:	6079      	str	r1, [r7, #4]
 800d2e6:	0040      	lsls	r0, r0, #1
 800d2e8:	e7c6      	b.n	800d278 <_dtoa_r+0x248>
 800d2ea:	bf00      	nop
 800d2ec:	f3af 8000 	nop.w
 800d2f0:	636f4361 	.word	0x636f4361
 800d2f4:	3fd287a7 	.word	0x3fd287a7
 800d2f8:	8b60c8b3 	.word	0x8b60c8b3
 800d2fc:	3fc68a28 	.word	0x3fc68a28
 800d300:	509f79fb 	.word	0x509f79fb
 800d304:	3fd34413 	.word	0x3fd34413
 800d308:	0800f185 	.word	0x0800f185
 800d30c:	0800f19c 	.word	0x0800f19c
 800d310:	7ff00000 	.word	0x7ff00000
 800d314:	0800f181 	.word	0x0800f181
 800d318:	0800f178 	.word	0x0800f178
 800d31c:	0800f155 	.word	0x0800f155
 800d320:	0800f298 	.word	0x0800f298
 800d324:	0800f1fb 	.word	0x0800f1fb
 800d328:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800d32a:	9900      	ldr	r1, [sp, #0]
 800d32c:	6011      	str	r1, [r2, #0]
 800d32e:	f1b9 0f0e 	cmp.w	r9, #14
 800d332:	d872      	bhi.n	800d41a <_dtoa_r+0x3ea>
 800d334:	2c00      	cmp	r4, #0
 800d336:	d070      	beq.n	800d41a <_dtoa_r+0x3ea>
 800d338:	f1bb 0f00 	cmp.w	fp, #0
 800d33c:	f340 80a6 	ble.w	800d48c <_dtoa_r+0x45c>
 800d340:	49ca      	ldr	r1, [pc, #808]	; (800d66c <_dtoa_r+0x63c>)
 800d342:	f00b 020f 	and.w	r2, fp, #15
 800d346:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800d34a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d34e:	ed92 7b00 	vldr	d7, [r2]
 800d352:	ea4f 112b 	mov.w	r1, fp, asr #4
 800d356:	f000 808d 	beq.w	800d474 <_dtoa_r+0x444>
 800d35a:	4ac5      	ldr	r2, [pc, #788]	; (800d670 <_dtoa_r+0x640>)
 800d35c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800d360:	ed92 6b08 	vldr	d6, [r2, #32]
 800d364:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800d368:	ed8d 6b02 	vstr	d6, [sp, #8]
 800d36c:	f001 010f 	and.w	r1, r1, #15
 800d370:	2203      	movs	r2, #3
 800d372:	48bf      	ldr	r0, [pc, #764]	; (800d670 <_dtoa_r+0x640>)
 800d374:	2900      	cmp	r1, #0
 800d376:	d17f      	bne.n	800d478 <_dtoa_r+0x448>
 800d378:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d37c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800d380:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d384:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d386:	2900      	cmp	r1, #0
 800d388:	f000 80b2 	beq.w	800d4f0 <_dtoa_r+0x4c0>
 800d38c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800d390:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d394:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d39c:	f140 80a8 	bpl.w	800d4f0 <_dtoa_r+0x4c0>
 800d3a0:	f1b9 0f00 	cmp.w	r9, #0
 800d3a4:	f000 80a4 	beq.w	800d4f0 <_dtoa_r+0x4c0>
 800d3a8:	f1ba 0f00 	cmp.w	sl, #0
 800d3ac:	dd31      	ble.n	800d412 <_dtoa_r+0x3e2>
 800d3ae:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800d3b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d3b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d3ba:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d3be:	3201      	adds	r2, #1
 800d3c0:	4650      	mov	r0, sl
 800d3c2:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d3c6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800d3ca:	ee07 2a90 	vmov	s15, r2
 800d3ce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800d3d2:	eea7 5b06 	vfma.f64	d5, d7, d6
 800d3d6:	ed8d 5b02 	vstr	d5, [sp, #8]
 800d3da:	9c03      	ldr	r4, [sp, #12]
 800d3dc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800d3e0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	f040 8086 	bne.w	800d4f6 <_dtoa_r+0x4c6>
 800d3ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d3ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d3f2:	ec42 1b17 	vmov	d7, r1, r2
 800d3f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d3fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3fe:	f300 8272 	bgt.w	800d8e6 <_dtoa_r+0x8b6>
 800d402:	eeb1 7b47 	vneg.f64	d7, d7
 800d406:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d40e:	f100 8267 	bmi.w	800d8e0 <_dtoa_r+0x8b0>
 800d412:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800d416:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d41a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d41c:	2a00      	cmp	r2, #0
 800d41e:	f2c0 8129 	blt.w	800d674 <_dtoa_r+0x644>
 800d422:	f1bb 0f0e 	cmp.w	fp, #14
 800d426:	f300 8125 	bgt.w	800d674 <_dtoa_r+0x644>
 800d42a:	4b90      	ldr	r3, [pc, #576]	; (800d66c <_dtoa_r+0x63c>)
 800d42c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d430:	ed93 6b00 	vldr	d6, [r3]
 800d434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d436:	2b00      	cmp	r3, #0
 800d438:	f280 80c3 	bge.w	800d5c2 <_dtoa_r+0x592>
 800d43c:	f1b9 0f00 	cmp.w	r9, #0
 800d440:	f300 80bf 	bgt.w	800d5c2 <_dtoa_r+0x592>
 800d444:	f040 824c 	bne.w	800d8e0 <_dtoa_r+0x8b0>
 800d448:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800d44c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d450:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d454:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d45c:	464c      	mov	r4, r9
 800d45e:	464f      	mov	r7, r9
 800d460:	f280 8222 	bge.w	800d8a8 <_dtoa_r+0x878>
 800d464:	f8dd 8000 	ldr.w	r8, [sp]
 800d468:	2331      	movs	r3, #49	; 0x31
 800d46a:	f808 3b01 	strb.w	r3, [r8], #1
 800d46e:	f10b 0b01 	add.w	fp, fp, #1
 800d472:	e21e      	b.n	800d8b2 <_dtoa_r+0x882>
 800d474:	2202      	movs	r2, #2
 800d476:	e77c      	b.n	800d372 <_dtoa_r+0x342>
 800d478:	07cc      	lsls	r4, r1, #31
 800d47a:	d504      	bpl.n	800d486 <_dtoa_r+0x456>
 800d47c:	ed90 6b00 	vldr	d6, [r0]
 800d480:	3201      	adds	r2, #1
 800d482:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d486:	1049      	asrs	r1, r1, #1
 800d488:	3008      	adds	r0, #8
 800d48a:	e773      	b.n	800d374 <_dtoa_r+0x344>
 800d48c:	d02e      	beq.n	800d4ec <_dtoa_r+0x4bc>
 800d48e:	f1cb 0100 	rsb	r1, fp, #0
 800d492:	4a76      	ldr	r2, [pc, #472]	; (800d66c <_dtoa_r+0x63c>)
 800d494:	f001 000f 	and.w	r0, r1, #15
 800d498:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d49c:	ed92 7b00 	vldr	d7, [r2]
 800d4a0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800d4a4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d4a8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d4ac:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800d4b0:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800d4b4:	486e      	ldr	r0, [pc, #440]	; (800d670 <_dtoa_r+0x640>)
 800d4b6:	1109      	asrs	r1, r1, #4
 800d4b8:	2400      	movs	r4, #0
 800d4ba:	2202      	movs	r2, #2
 800d4bc:	b939      	cbnz	r1, 800d4ce <_dtoa_r+0x49e>
 800d4be:	2c00      	cmp	r4, #0
 800d4c0:	f43f af60 	beq.w	800d384 <_dtoa_r+0x354>
 800d4c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d4c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d4cc:	e75a      	b.n	800d384 <_dtoa_r+0x354>
 800d4ce:	07cf      	lsls	r7, r1, #31
 800d4d0:	d509      	bpl.n	800d4e6 <_dtoa_r+0x4b6>
 800d4d2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800d4d6:	ed90 7b00 	vldr	d7, [r0]
 800d4da:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d4de:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800d4e2:	3201      	adds	r2, #1
 800d4e4:	2401      	movs	r4, #1
 800d4e6:	1049      	asrs	r1, r1, #1
 800d4e8:	3008      	adds	r0, #8
 800d4ea:	e7e7      	b.n	800d4bc <_dtoa_r+0x48c>
 800d4ec:	2202      	movs	r2, #2
 800d4ee:	e749      	b.n	800d384 <_dtoa_r+0x354>
 800d4f0:	465f      	mov	r7, fp
 800d4f2:	4648      	mov	r0, r9
 800d4f4:	e765      	b.n	800d3c2 <_dtoa_r+0x392>
 800d4f6:	ec42 1b17 	vmov	d7, r1, r2
 800d4fa:	4a5c      	ldr	r2, [pc, #368]	; (800d66c <_dtoa_r+0x63c>)
 800d4fc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800d500:	ed12 4b02 	vldr	d4, [r2, #-8]
 800d504:	9a00      	ldr	r2, [sp, #0]
 800d506:	1814      	adds	r4, r2, r0
 800d508:	9a08      	ldr	r2, [sp, #32]
 800d50a:	b352      	cbz	r2, 800d562 <_dtoa_r+0x532>
 800d50c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800d510:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800d514:	f8dd 8000 	ldr.w	r8, [sp]
 800d518:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800d51c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d520:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d524:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d528:	ee14 2a90 	vmov	r2, s9
 800d52c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d530:	3230      	adds	r2, #48	; 0x30
 800d532:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d536:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d53a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d53e:	f808 2b01 	strb.w	r2, [r8], #1
 800d542:	d439      	bmi.n	800d5b8 <_dtoa_r+0x588>
 800d544:	ee32 5b46 	vsub.f64	d5, d2, d6
 800d548:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800d54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d550:	d472      	bmi.n	800d638 <_dtoa_r+0x608>
 800d552:	45a0      	cmp	r8, r4
 800d554:	f43f af5d 	beq.w	800d412 <_dtoa_r+0x3e2>
 800d558:	ee27 7b03 	vmul.f64	d7, d7, d3
 800d55c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d560:	e7e0      	b.n	800d524 <_dtoa_r+0x4f4>
 800d562:	f8dd 8000 	ldr.w	r8, [sp]
 800d566:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d56a:	4621      	mov	r1, r4
 800d56c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800d570:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800d574:	ee14 2a90 	vmov	r2, s9
 800d578:	3230      	adds	r2, #48	; 0x30
 800d57a:	f808 2b01 	strb.w	r2, [r8], #1
 800d57e:	45a0      	cmp	r8, r4
 800d580:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800d584:	ee36 6b45 	vsub.f64	d6, d6, d5
 800d588:	d118      	bne.n	800d5bc <_dtoa_r+0x58c>
 800d58a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d58e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800d592:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800d596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d59a:	dc4d      	bgt.n	800d638 <_dtoa_r+0x608>
 800d59c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d5a0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800d5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5a8:	f57f af33 	bpl.w	800d412 <_dtoa_r+0x3e2>
 800d5ac:	4688      	mov	r8, r1
 800d5ae:	3901      	subs	r1, #1
 800d5b0:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800d5b4:	2b30      	cmp	r3, #48	; 0x30
 800d5b6:	d0f9      	beq.n	800d5ac <_dtoa_r+0x57c>
 800d5b8:	46bb      	mov	fp, r7
 800d5ba:	e02a      	b.n	800d612 <_dtoa_r+0x5e2>
 800d5bc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800d5c0:	e7d6      	b.n	800d570 <_dtoa_r+0x540>
 800d5c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d5c6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800d5ca:	f8dd 8000 	ldr.w	r8, [sp]
 800d5ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800d5d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800d5d6:	ee15 3a10 	vmov	r3, s10
 800d5da:	3330      	adds	r3, #48	; 0x30
 800d5dc:	f808 3b01 	strb.w	r3, [r8], #1
 800d5e0:	9b00      	ldr	r3, [sp, #0]
 800d5e2:	eba8 0303 	sub.w	r3, r8, r3
 800d5e6:	4599      	cmp	r9, r3
 800d5e8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800d5ec:	eea3 7b46 	vfms.f64	d7, d3, d6
 800d5f0:	d133      	bne.n	800d65a <_dtoa_r+0x62a>
 800d5f2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800d5f6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5fe:	dc1a      	bgt.n	800d636 <_dtoa_r+0x606>
 800d600:	eeb4 7b46 	vcmp.f64	d7, d6
 800d604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d608:	d103      	bne.n	800d612 <_dtoa_r+0x5e2>
 800d60a:	ee15 3a10 	vmov	r3, s10
 800d60e:	07d9      	lsls	r1, r3, #31
 800d610:	d411      	bmi.n	800d636 <_dtoa_r+0x606>
 800d612:	4629      	mov	r1, r5
 800d614:	4630      	mov	r0, r6
 800d616:	f000 fae7 	bl	800dbe8 <_Bfree>
 800d61a:	2300      	movs	r3, #0
 800d61c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d61e:	f888 3000 	strb.w	r3, [r8]
 800d622:	f10b 0301 	add.w	r3, fp, #1
 800d626:	6013      	str	r3, [r2, #0]
 800d628:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	f43f ad4d 	beq.w	800d0ca <_dtoa_r+0x9a>
 800d630:	f8c3 8000 	str.w	r8, [r3]
 800d634:	e549      	b.n	800d0ca <_dtoa_r+0x9a>
 800d636:	465f      	mov	r7, fp
 800d638:	4643      	mov	r3, r8
 800d63a:	4698      	mov	r8, r3
 800d63c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d640:	2a39      	cmp	r2, #57	; 0x39
 800d642:	d106      	bne.n	800d652 <_dtoa_r+0x622>
 800d644:	9a00      	ldr	r2, [sp, #0]
 800d646:	429a      	cmp	r2, r3
 800d648:	d1f7      	bne.n	800d63a <_dtoa_r+0x60a>
 800d64a:	9900      	ldr	r1, [sp, #0]
 800d64c:	2230      	movs	r2, #48	; 0x30
 800d64e:	3701      	adds	r7, #1
 800d650:	700a      	strb	r2, [r1, #0]
 800d652:	781a      	ldrb	r2, [r3, #0]
 800d654:	3201      	adds	r2, #1
 800d656:	701a      	strb	r2, [r3, #0]
 800d658:	e7ae      	b.n	800d5b8 <_dtoa_r+0x588>
 800d65a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d65e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d666:	d1b2      	bne.n	800d5ce <_dtoa_r+0x59e>
 800d668:	e7d3      	b.n	800d612 <_dtoa_r+0x5e2>
 800d66a:	bf00      	nop
 800d66c:	0800f298 	.word	0x0800f298
 800d670:	0800f270 	.word	0x0800f270
 800d674:	9908      	ldr	r1, [sp, #32]
 800d676:	2900      	cmp	r1, #0
 800d678:	f000 80d1 	beq.w	800d81e <_dtoa_r+0x7ee>
 800d67c:	9907      	ldr	r1, [sp, #28]
 800d67e:	2901      	cmp	r1, #1
 800d680:	f300 80b4 	bgt.w	800d7ec <_dtoa_r+0x7bc>
 800d684:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d686:	2900      	cmp	r1, #0
 800d688:	f000 80ac 	beq.w	800d7e4 <_dtoa_r+0x7b4>
 800d68c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d690:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d694:	461c      	mov	r4, r3
 800d696:	930a      	str	r3, [sp, #40]	; 0x28
 800d698:	9b05      	ldr	r3, [sp, #20]
 800d69a:	4413      	add	r3, r2
 800d69c:	9305      	str	r3, [sp, #20]
 800d69e:	9b06      	ldr	r3, [sp, #24]
 800d6a0:	2101      	movs	r1, #1
 800d6a2:	4413      	add	r3, r2
 800d6a4:	4630      	mov	r0, r6
 800d6a6:	9306      	str	r3, [sp, #24]
 800d6a8:	f000 fb5a 	bl	800dd60 <__i2b>
 800d6ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6ae:	4607      	mov	r7, r0
 800d6b0:	f1b8 0f00 	cmp.w	r8, #0
 800d6b4:	dd0d      	ble.n	800d6d2 <_dtoa_r+0x6a2>
 800d6b6:	9a06      	ldr	r2, [sp, #24]
 800d6b8:	2a00      	cmp	r2, #0
 800d6ba:	dd0a      	ble.n	800d6d2 <_dtoa_r+0x6a2>
 800d6bc:	4542      	cmp	r2, r8
 800d6be:	9905      	ldr	r1, [sp, #20]
 800d6c0:	bfa8      	it	ge
 800d6c2:	4642      	movge	r2, r8
 800d6c4:	1a89      	subs	r1, r1, r2
 800d6c6:	9105      	str	r1, [sp, #20]
 800d6c8:	9906      	ldr	r1, [sp, #24]
 800d6ca:	eba8 0802 	sub.w	r8, r8, r2
 800d6ce:	1a8a      	subs	r2, r1, r2
 800d6d0:	9206      	str	r2, [sp, #24]
 800d6d2:	b303      	cbz	r3, 800d716 <_dtoa_r+0x6e6>
 800d6d4:	9a08      	ldr	r2, [sp, #32]
 800d6d6:	2a00      	cmp	r2, #0
 800d6d8:	f000 80a6 	beq.w	800d828 <_dtoa_r+0x7f8>
 800d6dc:	2c00      	cmp	r4, #0
 800d6de:	dd13      	ble.n	800d708 <_dtoa_r+0x6d8>
 800d6e0:	4639      	mov	r1, r7
 800d6e2:	4622      	mov	r2, r4
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	930c      	str	r3, [sp, #48]	; 0x30
 800d6e8:	f000 fbf6 	bl	800ded8 <__pow5mult>
 800d6ec:	462a      	mov	r2, r5
 800d6ee:	4601      	mov	r1, r0
 800d6f0:	4607      	mov	r7, r0
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	f000 fb4a 	bl	800dd8c <__multiply>
 800d6f8:	4629      	mov	r1, r5
 800d6fa:	900a      	str	r0, [sp, #40]	; 0x28
 800d6fc:	4630      	mov	r0, r6
 800d6fe:	f000 fa73 	bl	800dbe8 <_Bfree>
 800d702:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d704:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d706:	4615      	mov	r5, r2
 800d708:	1b1a      	subs	r2, r3, r4
 800d70a:	d004      	beq.n	800d716 <_dtoa_r+0x6e6>
 800d70c:	4629      	mov	r1, r5
 800d70e:	4630      	mov	r0, r6
 800d710:	f000 fbe2 	bl	800ded8 <__pow5mult>
 800d714:	4605      	mov	r5, r0
 800d716:	2101      	movs	r1, #1
 800d718:	4630      	mov	r0, r6
 800d71a:	f000 fb21 	bl	800dd60 <__i2b>
 800d71e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d720:	2b00      	cmp	r3, #0
 800d722:	4604      	mov	r4, r0
 800d724:	f340 8082 	ble.w	800d82c <_dtoa_r+0x7fc>
 800d728:	461a      	mov	r2, r3
 800d72a:	4601      	mov	r1, r0
 800d72c:	4630      	mov	r0, r6
 800d72e:	f000 fbd3 	bl	800ded8 <__pow5mult>
 800d732:	9b07      	ldr	r3, [sp, #28]
 800d734:	2b01      	cmp	r3, #1
 800d736:	4604      	mov	r4, r0
 800d738:	dd7b      	ble.n	800d832 <_dtoa_r+0x802>
 800d73a:	2300      	movs	r3, #0
 800d73c:	930a      	str	r3, [sp, #40]	; 0x28
 800d73e:	6922      	ldr	r2, [r4, #16]
 800d740:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d744:	6910      	ldr	r0, [r2, #16]
 800d746:	f000 fabb 	bl	800dcc0 <__hi0bits>
 800d74a:	f1c0 0020 	rsb	r0, r0, #32
 800d74e:	9b06      	ldr	r3, [sp, #24]
 800d750:	4418      	add	r0, r3
 800d752:	f010 001f 	ands.w	r0, r0, #31
 800d756:	f000 808d 	beq.w	800d874 <_dtoa_r+0x844>
 800d75a:	f1c0 0220 	rsb	r2, r0, #32
 800d75e:	2a04      	cmp	r2, #4
 800d760:	f340 8086 	ble.w	800d870 <_dtoa_r+0x840>
 800d764:	f1c0 001c 	rsb	r0, r0, #28
 800d768:	9b05      	ldr	r3, [sp, #20]
 800d76a:	4403      	add	r3, r0
 800d76c:	9305      	str	r3, [sp, #20]
 800d76e:	9b06      	ldr	r3, [sp, #24]
 800d770:	4403      	add	r3, r0
 800d772:	4480      	add	r8, r0
 800d774:	9306      	str	r3, [sp, #24]
 800d776:	9b05      	ldr	r3, [sp, #20]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	dd05      	ble.n	800d788 <_dtoa_r+0x758>
 800d77c:	4629      	mov	r1, r5
 800d77e:	461a      	mov	r2, r3
 800d780:	4630      	mov	r0, r6
 800d782:	f000 fc03 	bl	800df8c <__lshift>
 800d786:	4605      	mov	r5, r0
 800d788:	9b06      	ldr	r3, [sp, #24]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	dd05      	ble.n	800d79a <_dtoa_r+0x76a>
 800d78e:	4621      	mov	r1, r4
 800d790:	461a      	mov	r2, r3
 800d792:	4630      	mov	r0, r6
 800d794:	f000 fbfa 	bl	800df8c <__lshift>
 800d798:	4604      	mov	r4, r0
 800d79a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d06b      	beq.n	800d878 <_dtoa_r+0x848>
 800d7a0:	4621      	mov	r1, r4
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	f000 fc5e 	bl	800e064 <__mcmp>
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	da65      	bge.n	800d878 <_dtoa_r+0x848>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	4629      	mov	r1, r5
 800d7b0:	220a      	movs	r2, #10
 800d7b2:	4630      	mov	r0, r6
 800d7b4:	f000 fa3a 	bl	800dc2c <__multadd>
 800d7b8:	9b08      	ldr	r3, [sp, #32]
 800d7ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d7be:	4605      	mov	r5, r0
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f000 8192 	beq.w	800daea <_dtoa_r+0xaba>
 800d7c6:	4639      	mov	r1, r7
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	220a      	movs	r2, #10
 800d7cc:	4630      	mov	r0, r6
 800d7ce:	f000 fa2d 	bl	800dc2c <__multadd>
 800d7d2:	f1ba 0f00 	cmp.w	sl, #0
 800d7d6:	4607      	mov	r7, r0
 800d7d8:	f300 808e 	bgt.w	800d8f8 <_dtoa_r+0x8c8>
 800d7dc:	9b07      	ldr	r3, [sp, #28]
 800d7de:	2b02      	cmp	r3, #2
 800d7e0:	dc51      	bgt.n	800d886 <_dtoa_r+0x856>
 800d7e2:	e089      	b.n	800d8f8 <_dtoa_r+0x8c8>
 800d7e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d7e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d7ea:	e751      	b.n	800d690 <_dtoa_r+0x660>
 800d7ec:	f109 34ff 	add.w	r4, r9, #4294967295
 800d7f0:	42a3      	cmp	r3, r4
 800d7f2:	bfbf      	itttt	lt
 800d7f4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800d7f6:	1ae3      	sublt	r3, r4, r3
 800d7f8:	18d2      	addlt	r2, r2, r3
 800d7fa:	4613      	movlt	r3, r2
 800d7fc:	bfb7      	itett	lt
 800d7fe:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d800:	1b1c      	subge	r4, r3, r4
 800d802:	4623      	movlt	r3, r4
 800d804:	2400      	movlt	r4, #0
 800d806:	f1b9 0f00 	cmp.w	r9, #0
 800d80a:	bfb5      	itete	lt
 800d80c:	9a05      	ldrlt	r2, [sp, #20]
 800d80e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800d812:	eba2 0809 	sublt.w	r8, r2, r9
 800d816:	464a      	movge	r2, r9
 800d818:	bfb8      	it	lt
 800d81a:	2200      	movlt	r2, #0
 800d81c:	e73b      	b.n	800d696 <_dtoa_r+0x666>
 800d81e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d822:	9f08      	ldr	r7, [sp, #32]
 800d824:	461c      	mov	r4, r3
 800d826:	e743      	b.n	800d6b0 <_dtoa_r+0x680>
 800d828:	461a      	mov	r2, r3
 800d82a:	e76f      	b.n	800d70c <_dtoa_r+0x6dc>
 800d82c:	9b07      	ldr	r3, [sp, #28]
 800d82e:	2b01      	cmp	r3, #1
 800d830:	dc18      	bgt.n	800d864 <_dtoa_r+0x834>
 800d832:	9b02      	ldr	r3, [sp, #8]
 800d834:	b9b3      	cbnz	r3, 800d864 <_dtoa_r+0x834>
 800d836:	9b03      	ldr	r3, [sp, #12]
 800d838:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d83c:	b9a2      	cbnz	r2, 800d868 <_dtoa_r+0x838>
 800d83e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d842:	0d12      	lsrs	r2, r2, #20
 800d844:	0512      	lsls	r2, r2, #20
 800d846:	b18a      	cbz	r2, 800d86c <_dtoa_r+0x83c>
 800d848:	9b05      	ldr	r3, [sp, #20]
 800d84a:	3301      	adds	r3, #1
 800d84c:	9305      	str	r3, [sp, #20]
 800d84e:	9b06      	ldr	r3, [sp, #24]
 800d850:	3301      	adds	r3, #1
 800d852:	9306      	str	r3, [sp, #24]
 800d854:	2301      	movs	r3, #1
 800d856:	930a      	str	r3, [sp, #40]	; 0x28
 800d858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	f47f af6f 	bne.w	800d73e <_dtoa_r+0x70e>
 800d860:	2001      	movs	r0, #1
 800d862:	e774      	b.n	800d74e <_dtoa_r+0x71e>
 800d864:	2300      	movs	r3, #0
 800d866:	e7f6      	b.n	800d856 <_dtoa_r+0x826>
 800d868:	9b02      	ldr	r3, [sp, #8]
 800d86a:	e7f4      	b.n	800d856 <_dtoa_r+0x826>
 800d86c:	920a      	str	r2, [sp, #40]	; 0x28
 800d86e:	e7f3      	b.n	800d858 <_dtoa_r+0x828>
 800d870:	d081      	beq.n	800d776 <_dtoa_r+0x746>
 800d872:	4610      	mov	r0, r2
 800d874:	301c      	adds	r0, #28
 800d876:	e777      	b.n	800d768 <_dtoa_r+0x738>
 800d878:	f1b9 0f00 	cmp.w	r9, #0
 800d87c:	dc37      	bgt.n	800d8ee <_dtoa_r+0x8be>
 800d87e:	9b07      	ldr	r3, [sp, #28]
 800d880:	2b02      	cmp	r3, #2
 800d882:	dd34      	ble.n	800d8ee <_dtoa_r+0x8be>
 800d884:	46ca      	mov	sl, r9
 800d886:	f1ba 0f00 	cmp.w	sl, #0
 800d88a:	d10d      	bne.n	800d8a8 <_dtoa_r+0x878>
 800d88c:	4621      	mov	r1, r4
 800d88e:	4653      	mov	r3, sl
 800d890:	2205      	movs	r2, #5
 800d892:	4630      	mov	r0, r6
 800d894:	f000 f9ca 	bl	800dc2c <__multadd>
 800d898:	4601      	mov	r1, r0
 800d89a:	4604      	mov	r4, r0
 800d89c:	4628      	mov	r0, r5
 800d89e:	f000 fbe1 	bl	800e064 <__mcmp>
 800d8a2:	2800      	cmp	r0, #0
 800d8a4:	f73f adde 	bgt.w	800d464 <_dtoa_r+0x434>
 800d8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8aa:	f8dd 8000 	ldr.w	r8, [sp]
 800d8ae:	ea6f 0b03 	mvn.w	fp, r3
 800d8b2:	f04f 0900 	mov.w	r9, #0
 800d8b6:	4621      	mov	r1, r4
 800d8b8:	4630      	mov	r0, r6
 800d8ba:	f000 f995 	bl	800dbe8 <_Bfree>
 800d8be:	2f00      	cmp	r7, #0
 800d8c0:	f43f aea7 	beq.w	800d612 <_dtoa_r+0x5e2>
 800d8c4:	f1b9 0f00 	cmp.w	r9, #0
 800d8c8:	d005      	beq.n	800d8d6 <_dtoa_r+0x8a6>
 800d8ca:	45b9      	cmp	r9, r7
 800d8cc:	d003      	beq.n	800d8d6 <_dtoa_r+0x8a6>
 800d8ce:	4649      	mov	r1, r9
 800d8d0:	4630      	mov	r0, r6
 800d8d2:	f000 f989 	bl	800dbe8 <_Bfree>
 800d8d6:	4639      	mov	r1, r7
 800d8d8:	4630      	mov	r0, r6
 800d8da:	f000 f985 	bl	800dbe8 <_Bfree>
 800d8de:	e698      	b.n	800d612 <_dtoa_r+0x5e2>
 800d8e0:	2400      	movs	r4, #0
 800d8e2:	4627      	mov	r7, r4
 800d8e4:	e7e0      	b.n	800d8a8 <_dtoa_r+0x878>
 800d8e6:	46bb      	mov	fp, r7
 800d8e8:	4604      	mov	r4, r0
 800d8ea:	4607      	mov	r7, r0
 800d8ec:	e5ba      	b.n	800d464 <_dtoa_r+0x434>
 800d8ee:	9b08      	ldr	r3, [sp, #32]
 800d8f0:	46ca      	mov	sl, r9
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f000 8100 	beq.w	800daf8 <_dtoa_r+0xac8>
 800d8f8:	f1b8 0f00 	cmp.w	r8, #0
 800d8fc:	dd05      	ble.n	800d90a <_dtoa_r+0x8da>
 800d8fe:	4639      	mov	r1, r7
 800d900:	4642      	mov	r2, r8
 800d902:	4630      	mov	r0, r6
 800d904:	f000 fb42 	bl	800df8c <__lshift>
 800d908:	4607      	mov	r7, r0
 800d90a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d05d      	beq.n	800d9cc <_dtoa_r+0x99c>
 800d910:	6879      	ldr	r1, [r7, #4]
 800d912:	4630      	mov	r0, r6
 800d914:	f000 f928 	bl	800db68 <_Balloc>
 800d918:	4680      	mov	r8, r0
 800d91a:	b928      	cbnz	r0, 800d928 <_dtoa_r+0x8f8>
 800d91c:	4b82      	ldr	r3, [pc, #520]	; (800db28 <_dtoa_r+0xaf8>)
 800d91e:	4602      	mov	r2, r0
 800d920:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d924:	f7ff bb9a 	b.w	800d05c <_dtoa_r+0x2c>
 800d928:	693a      	ldr	r2, [r7, #16]
 800d92a:	3202      	adds	r2, #2
 800d92c:	0092      	lsls	r2, r2, #2
 800d92e:	f107 010c 	add.w	r1, r7, #12
 800d932:	300c      	adds	r0, #12
 800d934:	f000 f90a 	bl	800db4c <memcpy>
 800d938:	2201      	movs	r2, #1
 800d93a:	4641      	mov	r1, r8
 800d93c:	4630      	mov	r0, r6
 800d93e:	f000 fb25 	bl	800df8c <__lshift>
 800d942:	9b00      	ldr	r3, [sp, #0]
 800d944:	3301      	adds	r3, #1
 800d946:	9305      	str	r3, [sp, #20]
 800d948:	9b00      	ldr	r3, [sp, #0]
 800d94a:	4453      	add	r3, sl
 800d94c:	9309      	str	r3, [sp, #36]	; 0x24
 800d94e:	9b02      	ldr	r3, [sp, #8]
 800d950:	f003 0301 	and.w	r3, r3, #1
 800d954:	46b9      	mov	r9, r7
 800d956:	9308      	str	r3, [sp, #32]
 800d958:	4607      	mov	r7, r0
 800d95a:	9b05      	ldr	r3, [sp, #20]
 800d95c:	4621      	mov	r1, r4
 800d95e:	3b01      	subs	r3, #1
 800d960:	4628      	mov	r0, r5
 800d962:	9302      	str	r3, [sp, #8]
 800d964:	f7ff fad6 	bl	800cf14 <quorem>
 800d968:	4603      	mov	r3, r0
 800d96a:	3330      	adds	r3, #48	; 0x30
 800d96c:	9006      	str	r0, [sp, #24]
 800d96e:	4649      	mov	r1, r9
 800d970:	4628      	mov	r0, r5
 800d972:	930a      	str	r3, [sp, #40]	; 0x28
 800d974:	f000 fb76 	bl	800e064 <__mcmp>
 800d978:	463a      	mov	r2, r7
 800d97a:	4682      	mov	sl, r0
 800d97c:	4621      	mov	r1, r4
 800d97e:	4630      	mov	r0, r6
 800d980:	f000 fb8c 	bl	800e09c <__mdiff>
 800d984:	68c2      	ldr	r2, [r0, #12]
 800d986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d988:	4680      	mov	r8, r0
 800d98a:	bb0a      	cbnz	r2, 800d9d0 <_dtoa_r+0x9a0>
 800d98c:	4601      	mov	r1, r0
 800d98e:	4628      	mov	r0, r5
 800d990:	f000 fb68 	bl	800e064 <__mcmp>
 800d994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d996:	4602      	mov	r2, r0
 800d998:	4641      	mov	r1, r8
 800d99a:	4630      	mov	r0, r6
 800d99c:	920e      	str	r2, [sp, #56]	; 0x38
 800d99e:	930a      	str	r3, [sp, #40]	; 0x28
 800d9a0:	f000 f922 	bl	800dbe8 <_Bfree>
 800d9a4:	9b07      	ldr	r3, [sp, #28]
 800d9a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9a8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800d9ac:	ea43 0102 	orr.w	r1, r3, r2
 800d9b0:	9b08      	ldr	r3, [sp, #32]
 800d9b2:	430b      	orrs	r3, r1
 800d9b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9b6:	d10d      	bne.n	800d9d4 <_dtoa_r+0x9a4>
 800d9b8:	2b39      	cmp	r3, #57	; 0x39
 800d9ba:	d029      	beq.n	800da10 <_dtoa_r+0x9e0>
 800d9bc:	f1ba 0f00 	cmp.w	sl, #0
 800d9c0:	dd01      	ble.n	800d9c6 <_dtoa_r+0x996>
 800d9c2:	9b06      	ldr	r3, [sp, #24]
 800d9c4:	3331      	adds	r3, #49	; 0x31
 800d9c6:	9a02      	ldr	r2, [sp, #8]
 800d9c8:	7013      	strb	r3, [r2, #0]
 800d9ca:	e774      	b.n	800d8b6 <_dtoa_r+0x886>
 800d9cc:	4638      	mov	r0, r7
 800d9ce:	e7b8      	b.n	800d942 <_dtoa_r+0x912>
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	e7e1      	b.n	800d998 <_dtoa_r+0x968>
 800d9d4:	f1ba 0f00 	cmp.w	sl, #0
 800d9d8:	db06      	blt.n	800d9e8 <_dtoa_r+0x9b8>
 800d9da:	9907      	ldr	r1, [sp, #28]
 800d9dc:	ea41 0a0a 	orr.w	sl, r1, sl
 800d9e0:	9908      	ldr	r1, [sp, #32]
 800d9e2:	ea5a 0101 	orrs.w	r1, sl, r1
 800d9e6:	d120      	bne.n	800da2a <_dtoa_r+0x9fa>
 800d9e8:	2a00      	cmp	r2, #0
 800d9ea:	ddec      	ble.n	800d9c6 <_dtoa_r+0x996>
 800d9ec:	4629      	mov	r1, r5
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	4630      	mov	r0, r6
 800d9f2:	9305      	str	r3, [sp, #20]
 800d9f4:	f000 faca 	bl	800df8c <__lshift>
 800d9f8:	4621      	mov	r1, r4
 800d9fa:	4605      	mov	r5, r0
 800d9fc:	f000 fb32 	bl	800e064 <__mcmp>
 800da00:	2800      	cmp	r0, #0
 800da02:	9b05      	ldr	r3, [sp, #20]
 800da04:	dc02      	bgt.n	800da0c <_dtoa_r+0x9dc>
 800da06:	d1de      	bne.n	800d9c6 <_dtoa_r+0x996>
 800da08:	07da      	lsls	r2, r3, #31
 800da0a:	d5dc      	bpl.n	800d9c6 <_dtoa_r+0x996>
 800da0c:	2b39      	cmp	r3, #57	; 0x39
 800da0e:	d1d8      	bne.n	800d9c2 <_dtoa_r+0x992>
 800da10:	9a02      	ldr	r2, [sp, #8]
 800da12:	2339      	movs	r3, #57	; 0x39
 800da14:	7013      	strb	r3, [r2, #0]
 800da16:	4643      	mov	r3, r8
 800da18:	4698      	mov	r8, r3
 800da1a:	3b01      	subs	r3, #1
 800da1c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800da20:	2a39      	cmp	r2, #57	; 0x39
 800da22:	d051      	beq.n	800dac8 <_dtoa_r+0xa98>
 800da24:	3201      	adds	r2, #1
 800da26:	701a      	strb	r2, [r3, #0]
 800da28:	e745      	b.n	800d8b6 <_dtoa_r+0x886>
 800da2a:	2a00      	cmp	r2, #0
 800da2c:	dd03      	ble.n	800da36 <_dtoa_r+0xa06>
 800da2e:	2b39      	cmp	r3, #57	; 0x39
 800da30:	d0ee      	beq.n	800da10 <_dtoa_r+0x9e0>
 800da32:	3301      	adds	r3, #1
 800da34:	e7c7      	b.n	800d9c6 <_dtoa_r+0x996>
 800da36:	9a05      	ldr	r2, [sp, #20]
 800da38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da3a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800da3e:	428a      	cmp	r2, r1
 800da40:	d02b      	beq.n	800da9a <_dtoa_r+0xa6a>
 800da42:	4629      	mov	r1, r5
 800da44:	2300      	movs	r3, #0
 800da46:	220a      	movs	r2, #10
 800da48:	4630      	mov	r0, r6
 800da4a:	f000 f8ef 	bl	800dc2c <__multadd>
 800da4e:	45b9      	cmp	r9, r7
 800da50:	4605      	mov	r5, r0
 800da52:	f04f 0300 	mov.w	r3, #0
 800da56:	f04f 020a 	mov.w	r2, #10
 800da5a:	4649      	mov	r1, r9
 800da5c:	4630      	mov	r0, r6
 800da5e:	d107      	bne.n	800da70 <_dtoa_r+0xa40>
 800da60:	f000 f8e4 	bl	800dc2c <__multadd>
 800da64:	4681      	mov	r9, r0
 800da66:	4607      	mov	r7, r0
 800da68:	9b05      	ldr	r3, [sp, #20]
 800da6a:	3301      	adds	r3, #1
 800da6c:	9305      	str	r3, [sp, #20]
 800da6e:	e774      	b.n	800d95a <_dtoa_r+0x92a>
 800da70:	f000 f8dc 	bl	800dc2c <__multadd>
 800da74:	4639      	mov	r1, r7
 800da76:	4681      	mov	r9, r0
 800da78:	2300      	movs	r3, #0
 800da7a:	220a      	movs	r2, #10
 800da7c:	4630      	mov	r0, r6
 800da7e:	f000 f8d5 	bl	800dc2c <__multadd>
 800da82:	4607      	mov	r7, r0
 800da84:	e7f0      	b.n	800da68 <_dtoa_r+0xa38>
 800da86:	f1ba 0f00 	cmp.w	sl, #0
 800da8a:	9a00      	ldr	r2, [sp, #0]
 800da8c:	bfcc      	ite	gt
 800da8e:	46d0      	movgt	r8, sl
 800da90:	f04f 0801 	movle.w	r8, #1
 800da94:	4490      	add	r8, r2
 800da96:	f04f 0900 	mov.w	r9, #0
 800da9a:	4629      	mov	r1, r5
 800da9c:	2201      	movs	r2, #1
 800da9e:	4630      	mov	r0, r6
 800daa0:	9302      	str	r3, [sp, #8]
 800daa2:	f000 fa73 	bl	800df8c <__lshift>
 800daa6:	4621      	mov	r1, r4
 800daa8:	4605      	mov	r5, r0
 800daaa:	f000 fadb 	bl	800e064 <__mcmp>
 800daae:	2800      	cmp	r0, #0
 800dab0:	dcb1      	bgt.n	800da16 <_dtoa_r+0x9e6>
 800dab2:	d102      	bne.n	800daba <_dtoa_r+0xa8a>
 800dab4:	9b02      	ldr	r3, [sp, #8]
 800dab6:	07db      	lsls	r3, r3, #31
 800dab8:	d4ad      	bmi.n	800da16 <_dtoa_r+0x9e6>
 800daba:	4643      	mov	r3, r8
 800dabc:	4698      	mov	r8, r3
 800dabe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dac2:	2a30      	cmp	r2, #48	; 0x30
 800dac4:	d0fa      	beq.n	800dabc <_dtoa_r+0xa8c>
 800dac6:	e6f6      	b.n	800d8b6 <_dtoa_r+0x886>
 800dac8:	9a00      	ldr	r2, [sp, #0]
 800daca:	429a      	cmp	r2, r3
 800dacc:	d1a4      	bne.n	800da18 <_dtoa_r+0x9e8>
 800dace:	f10b 0b01 	add.w	fp, fp, #1
 800dad2:	2331      	movs	r3, #49	; 0x31
 800dad4:	e778      	b.n	800d9c8 <_dtoa_r+0x998>
 800dad6:	4b15      	ldr	r3, [pc, #84]	; (800db2c <_dtoa_r+0xafc>)
 800dad8:	f7ff bb12 	b.w	800d100 <_dtoa_r+0xd0>
 800dadc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800dade:	2b00      	cmp	r3, #0
 800dae0:	f47f aaee 	bne.w	800d0c0 <_dtoa_r+0x90>
 800dae4:	4b12      	ldr	r3, [pc, #72]	; (800db30 <_dtoa_r+0xb00>)
 800dae6:	f7ff bb0b 	b.w	800d100 <_dtoa_r+0xd0>
 800daea:	f1ba 0f00 	cmp.w	sl, #0
 800daee:	dc03      	bgt.n	800daf8 <_dtoa_r+0xac8>
 800daf0:	9b07      	ldr	r3, [sp, #28]
 800daf2:	2b02      	cmp	r3, #2
 800daf4:	f73f aec7 	bgt.w	800d886 <_dtoa_r+0x856>
 800daf8:	f8dd 8000 	ldr.w	r8, [sp]
 800dafc:	4621      	mov	r1, r4
 800dafe:	4628      	mov	r0, r5
 800db00:	f7ff fa08 	bl	800cf14 <quorem>
 800db04:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800db08:	f808 3b01 	strb.w	r3, [r8], #1
 800db0c:	9a00      	ldr	r2, [sp, #0]
 800db0e:	eba8 0202 	sub.w	r2, r8, r2
 800db12:	4592      	cmp	sl, r2
 800db14:	ddb7      	ble.n	800da86 <_dtoa_r+0xa56>
 800db16:	4629      	mov	r1, r5
 800db18:	2300      	movs	r3, #0
 800db1a:	220a      	movs	r2, #10
 800db1c:	4630      	mov	r0, r6
 800db1e:	f000 f885 	bl	800dc2c <__multadd>
 800db22:	4605      	mov	r5, r0
 800db24:	e7ea      	b.n	800dafc <_dtoa_r+0xacc>
 800db26:	bf00      	nop
 800db28:	0800f1fb 	.word	0x0800f1fb
 800db2c:	0800f154 	.word	0x0800f154
 800db30:	0800f178 	.word	0x0800f178

0800db34 <_localeconv_r>:
 800db34:	4800      	ldr	r0, [pc, #0]	; (800db38 <_localeconv_r+0x4>)
 800db36:	4770      	bx	lr
 800db38:	24000174 	.word	0x24000174

0800db3c <malloc>:
 800db3c:	4b02      	ldr	r3, [pc, #8]	; (800db48 <malloc+0xc>)
 800db3e:	4601      	mov	r1, r0
 800db40:	6818      	ldr	r0, [r3, #0]
 800db42:	f000 bbef 	b.w	800e324 <_malloc_r>
 800db46:	bf00      	nop
 800db48:	24000020 	.word	0x24000020

0800db4c <memcpy>:
 800db4c:	440a      	add	r2, r1
 800db4e:	4291      	cmp	r1, r2
 800db50:	f100 33ff 	add.w	r3, r0, #4294967295
 800db54:	d100      	bne.n	800db58 <memcpy+0xc>
 800db56:	4770      	bx	lr
 800db58:	b510      	push	{r4, lr}
 800db5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db62:	4291      	cmp	r1, r2
 800db64:	d1f9      	bne.n	800db5a <memcpy+0xe>
 800db66:	bd10      	pop	{r4, pc}

0800db68 <_Balloc>:
 800db68:	b570      	push	{r4, r5, r6, lr}
 800db6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800db6c:	4604      	mov	r4, r0
 800db6e:	460d      	mov	r5, r1
 800db70:	b976      	cbnz	r6, 800db90 <_Balloc+0x28>
 800db72:	2010      	movs	r0, #16
 800db74:	f7ff ffe2 	bl	800db3c <malloc>
 800db78:	4602      	mov	r2, r0
 800db7a:	6260      	str	r0, [r4, #36]	; 0x24
 800db7c:	b920      	cbnz	r0, 800db88 <_Balloc+0x20>
 800db7e:	4b18      	ldr	r3, [pc, #96]	; (800dbe0 <_Balloc+0x78>)
 800db80:	4818      	ldr	r0, [pc, #96]	; (800dbe4 <_Balloc+0x7c>)
 800db82:	2166      	movs	r1, #102	; 0x66
 800db84:	f000 fc38 	bl	800e3f8 <__assert_func>
 800db88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db8c:	6006      	str	r6, [r0, #0]
 800db8e:	60c6      	str	r6, [r0, #12]
 800db90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800db92:	68f3      	ldr	r3, [r6, #12]
 800db94:	b183      	cbz	r3, 800dbb8 <_Balloc+0x50>
 800db96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db9e:	b9b8      	cbnz	r0, 800dbd0 <_Balloc+0x68>
 800dba0:	2101      	movs	r1, #1
 800dba2:	fa01 f605 	lsl.w	r6, r1, r5
 800dba6:	1d72      	adds	r2, r6, #5
 800dba8:	0092      	lsls	r2, r2, #2
 800dbaa:	4620      	mov	r0, r4
 800dbac:	f000 fb5a 	bl	800e264 <_calloc_r>
 800dbb0:	b160      	cbz	r0, 800dbcc <_Balloc+0x64>
 800dbb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dbb6:	e00e      	b.n	800dbd6 <_Balloc+0x6e>
 800dbb8:	2221      	movs	r2, #33	; 0x21
 800dbba:	2104      	movs	r1, #4
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	f000 fb51 	bl	800e264 <_calloc_r>
 800dbc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dbc4:	60f0      	str	r0, [r6, #12]
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d1e4      	bne.n	800db96 <_Balloc+0x2e>
 800dbcc:	2000      	movs	r0, #0
 800dbce:	bd70      	pop	{r4, r5, r6, pc}
 800dbd0:	6802      	ldr	r2, [r0, #0]
 800dbd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dbdc:	e7f7      	b.n	800dbce <_Balloc+0x66>
 800dbde:	bf00      	nop
 800dbe0:	0800f185 	.word	0x0800f185
 800dbe4:	0800f20c 	.word	0x0800f20c

0800dbe8 <_Bfree>:
 800dbe8:	b570      	push	{r4, r5, r6, lr}
 800dbea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dbec:	4605      	mov	r5, r0
 800dbee:	460c      	mov	r4, r1
 800dbf0:	b976      	cbnz	r6, 800dc10 <_Bfree+0x28>
 800dbf2:	2010      	movs	r0, #16
 800dbf4:	f7ff ffa2 	bl	800db3c <malloc>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	6268      	str	r0, [r5, #36]	; 0x24
 800dbfc:	b920      	cbnz	r0, 800dc08 <_Bfree+0x20>
 800dbfe:	4b09      	ldr	r3, [pc, #36]	; (800dc24 <_Bfree+0x3c>)
 800dc00:	4809      	ldr	r0, [pc, #36]	; (800dc28 <_Bfree+0x40>)
 800dc02:	218a      	movs	r1, #138	; 0x8a
 800dc04:	f000 fbf8 	bl	800e3f8 <__assert_func>
 800dc08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc0c:	6006      	str	r6, [r0, #0]
 800dc0e:	60c6      	str	r6, [r0, #12]
 800dc10:	b13c      	cbz	r4, 800dc22 <_Bfree+0x3a>
 800dc12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dc14:	6862      	ldr	r2, [r4, #4]
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dc1c:	6021      	str	r1, [r4, #0]
 800dc1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dc22:	bd70      	pop	{r4, r5, r6, pc}
 800dc24:	0800f185 	.word	0x0800f185
 800dc28:	0800f20c 	.word	0x0800f20c

0800dc2c <__multadd>:
 800dc2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc30:	690e      	ldr	r6, [r1, #16]
 800dc32:	4607      	mov	r7, r0
 800dc34:	4698      	mov	r8, r3
 800dc36:	460c      	mov	r4, r1
 800dc38:	f101 0014 	add.w	r0, r1, #20
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	6805      	ldr	r5, [r0, #0]
 800dc40:	b2a9      	uxth	r1, r5
 800dc42:	fb02 8101 	mla	r1, r2, r1, r8
 800dc46:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800dc4a:	0c2d      	lsrs	r5, r5, #16
 800dc4c:	fb02 c505 	mla	r5, r2, r5, ip
 800dc50:	b289      	uxth	r1, r1
 800dc52:	3301      	adds	r3, #1
 800dc54:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800dc58:	429e      	cmp	r6, r3
 800dc5a:	f840 1b04 	str.w	r1, [r0], #4
 800dc5e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800dc62:	dcec      	bgt.n	800dc3e <__multadd+0x12>
 800dc64:	f1b8 0f00 	cmp.w	r8, #0
 800dc68:	d022      	beq.n	800dcb0 <__multadd+0x84>
 800dc6a:	68a3      	ldr	r3, [r4, #8]
 800dc6c:	42b3      	cmp	r3, r6
 800dc6e:	dc19      	bgt.n	800dca4 <__multadd+0x78>
 800dc70:	6861      	ldr	r1, [r4, #4]
 800dc72:	4638      	mov	r0, r7
 800dc74:	3101      	adds	r1, #1
 800dc76:	f7ff ff77 	bl	800db68 <_Balloc>
 800dc7a:	4605      	mov	r5, r0
 800dc7c:	b928      	cbnz	r0, 800dc8a <__multadd+0x5e>
 800dc7e:	4602      	mov	r2, r0
 800dc80:	4b0d      	ldr	r3, [pc, #52]	; (800dcb8 <__multadd+0x8c>)
 800dc82:	480e      	ldr	r0, [pc, #56]	; (800dcbc <__multadd+0x90>)
 800dc84:	21b5      	movs	r1, #181	; 0xb5
 800dc86:	f000 fbb7 	bl	800e3f8 <__assert_func>
 800dc8a:	6922      	ldr	r2, [r4, #16]
 800dc8c:	3202      	adds	r2, #2
 800dc8e:	f104 010c 	add.w	r1, r4, #12
 800dc92:	0092      	lsls	r2, r2, #2
 800dc94:	300c      	adds	r0, #12
 800dc96:	f7ff ff59 	bl	800db4c <memcpy>
 800dc9a:	4621      	mov	r1, r4
 800dc9c:	4638      	mov	r0, r7
 800dc9e:	f7ff ffa3 	bl	800dbe8 <_Bfree>
 800dca2:	462c      	mov	r4, r5
 800dca4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800dca8:	3601      	adds	r6, #1
 800dcaa:	f8c3 8014 	str.w	r8, [r3, #20]
 800dcae:	6126      	str	r6, [r4, #16]
 800dcb0:	4620      	mov	r0, r4
 800dcb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb6:	bf00      	nop
 800dcb8:	0800f1fb 	.word	0x0800f1fb
 800dcbc:	0800f20c 	.word	0x0800f20c

0800dcc0 <__hi0bits>:
 800dcc0:	0c03      	lsrs	r3, r0, #16
 800dcc2:	041b      	lsls	r3, r3, #16
 800dcc4:	b9d3      	cbnz	r3, 800dcfc <__hi0bits+0x3c>
 800dcc6:	0400      	lsls	r0, r0, #16
 800dcc8:	2310      	movs	r3, #16
 800dcca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dcce:	bf04      	itt	eq
 800dcd0:	0200      	lsleq	r0, r0, #8
 800dcd2:	3308      	addeq	r3, #8
 800dcd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dcd8:	bf04      	itt	eq
 800dcda:	0100      	lsleq	r0, r0, #4
 800dcdc:	3304      	addeq	r3, #4
 800dcde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dce2:	bf04      	itt	eq
 800dce4:	0080      	lsleq	r0, r0, #2
 800dce6:	3302      	addeq	r3, #2
 800dce8:	2800      	cmp	r0, #0
 800dcea:	db05      	blt.n	800dcf8 <__hi0bits+0x38>
 800dcec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dcf0:	f103 0301 	add.w	r3, r3, #1
 800dcf4:	bf08      	it	eq
 800dcf6:	2320      	moveq	r3, #32
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	4770      	bx	lr
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	e7e4      	b.n	800dcca <__hi0bits+0xa>

0800dd00 <__lo0bits>:
 800dd00:	6803      	ldr	r3, [r0, #0]
 800dd02:	f013 0207 	ands.w	r2, r3, #7
 800dd06:	4601      	mov	r1, r0
 800dd08:	d00b      	beq.n	800dd22 <__lo0bits+0x22>
 800dd0a:	07da      	lsls	r2, r3, #31
 800dd0c:	d424      	bmi.n	800dd58 <__lo0bits+0x58>
 800dd0e:	0798      	lsls	r0, r3, #30
 800dd10:	bf49      	itett	mi
 800dd12:	085b      	lsrmi	r3, r3, #1
 800dd14:	089b      	lsrpl	r3, r3, #2
 800dd16:	2001      	movmi	r0, #1
 800dd18:	600b      	strmi	r3, [r1, #0]
 800dd1a:	bf5c      	itt	pl
 800dd1c:	600b      	strpl	r3, [r1, #0]
 800dd1e:	2002      	movpl	r0, #2
 800dd20:	4770      	bx	lr
 800dd22:	b298      	uxth	r0, r3
 800dd24:	b9b0      	cbnz	r0, 800dd54 <__lo0bits+0x54>
 800dd26:	0c1b      	lsrs	r3, r3, #16
 800dd28:	2010      	movs	r0, #16
 800dd2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dd2e:	bf04      	itt	eq
 800dd30:	0a1b      	lsreq	r3, r3, #8
 800dd32:	3008      	addeq	r0, #8
 800dd34:	071a      	lsls	r2, r3, #28
 800dd36:	bf04      	itt	eq
 800dd38:	091b      	lsreq	r3, r3, #4
 800dd3a:	3004      	addeq	r0, #4
 800dd3c:	079a      	lsls	r2, r3, #30
 800dd3e:	bf04      	itt	eq
 800dd40:	089b      	lsreq	r3, r3, #2
 800dd42:	3002      	addeq	r0, #2
 800dd44:	07da      	lsls	r2, r3, #31
 800dd46:	d403      	bmi.n	800dd50 <__lo0bits+0x50>
 800dd48:	085b      	lsrs	r3, r3, #1
 800dd4a:	f100 0001 	add.w	r0, r0, #1
 800dd4e:	d005      	beq.n	800dd5c <__lo0bits+0x5c>
 800dd50:	600b      	str	r3, [r1, #0]
 800dd52:	4770      	bx	lr
 800dd54:	4610      	mov	r0, r2
 800dd56:	e7e8      	b.n	800dd2a <__lo0bits+0x2a>
 800dd58:	2000      	movs	r0, #0
 800dd5a:	4770      	bx	lr
 800dd5c:	2020      	movs	r0, #32
 800dd5e:	4770      	bx	lr

0800dd60 <__i2b>:
 800dd60:	b510      	push	{r4, lr}
 800dd62:	460c      	mov	r4, r1
 800dd64:	2101      	movs	r1, #1
 800dd66:	f7ff feff 	bl	800db68 <_Balloc>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	b928      	cbnz	r0, 800dd7a <__i2b+0x1a>
 800dd6e:	4b05      	ldr	r3, [pc, #20]	; (800dd84 <__i2b+0x24>)
 800dd70:	4805      	ldr	r0, [pc, #20]	; (800dd88 <__i2b+0x28>)
 800dd72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dd76:	f000 fb3f 	bl	800e3f8 <__assert_func>
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	6144      	str	r4, [r0, #20]
 800dd7e:	6103      	str	r3, [r0, #16]
 800dd80:	bd10      	pop	{r4, pc}
 800dd82:	bf00      	nop
 800dd84:	0800f1fb 	.word	0x0800f1fb
 800dd88:	0800f20c 	.word	0x0800f20c

0800dd8c <__multiply>:
 800dd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd90:	4614      	mov	r4, r2
 800dd92:	690a      	ldr	r2, [r1, #16]
 800dd94:	6923      	ldr	r3, [r4, #16]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	bfb8      	it	lt
 800dd9a:	460b      	movlt	r3, r1
 800dd9c:	460d      	mov	r5, r1
 800dd9e:	bfbc      	itt	lt
 800dda0:	4625      	movlt	r5, r4
 800dda2:	461c      	movlt	r4, r3
 800dda4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800dda8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ddac:	68ab      	ldr	r3, [r5, #8]
 800ddae:	6869      	ldr	r1, [r5, #4]
 800ddb0:	eb0a 0709 	add.w	r7, sl, r9
 800ddb4:	42bb      	cmp	r3, r7
 800ddb6:	b085      	sub	sp, #20
 800ddb8:	bfb8      	it	lt
 800ddba:	3101      	addlt	r1, #1
 800ddbc:	f7ff fed4 	bl	800db68 <_Balloc>
 800ddc0:	b930      	cbnz	r0, 800ddd0 <__multiply+0x44>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	4b42      	ldr	r3, [pc, #264]	; (800ded0 <__multiply+0x144>)
 800ddc6:	4843      	ldr	r0, [pc, #268]	; (800ded4 <__multiply+0x148>)
 800ddc8:	f240 115d 	movw	r1, #349	; 0x15d
 800ddcc:	f000 fb14 	bl	800e3f8 <__assert_func>
 800ddd0:	f100 0614 	add.w	r6, r0, #20
 800ddd4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ddd8:	4633      	mov	r3, r6
 800ddda:	2200      	movs	r2, #0
 800dddc:	4543      	cmp	r3, r8
 800ddde:	d31e      	bcc.n	800de1e <__multiply+0x92>
 800dde0:	f105 0c14 	add.w	ip, r5, #20
 800dde4:	f104 0314 	add.w	r3, r4, #20
 800dde8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ddec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ddf0:	9202      	str	r2, [sp, #8]
 800ddf2:	ebac 0205 	sub.w	r2, ip, r5
 800ddf6:	3a15      	subs	r2, #21
 800ddf8:	f022 0203 	bic.w	r2, r2, #3
 800ddfc:	3204      	adds	r2, #4
 800ddfe:	f105 0115 	add.w	r1, r5, #21
 800de02:	458c      	cmp	ip, r1
 800de04:	bf38      	it	cc
 800de06:	2204      	movcc	r2, #4
 800de08:	9201      	str	r2, [sp, #4]
 800de0a:	9a02      	ldr	r2, [sp, #8]
 800de0c:	9303      	str	r3, [sp, #12]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d808      	bhi.n	800de24 <__multiply+0x98>
 800de12:	2f00      	cmp	r7, #0
 800de14:	dc55      	bgt.n	800dec2 <__multiply+0x136>
 800de16:	6107      	str	r7, [r0, #16]
 800de18:	b005      	add	sp, #20
 800de1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de1e:	f843 2b04 	str.w	r2, [r3], #4
 800de22:	e7db      	b.n	800dddc <__multiply+0x50>
 800de24:	f8b3 a000 	ldrh.w	sl, [r3]
 800de28:	f1ba 0f00 	cmp.w	sl, #0
 800de2c:	d020      	beq.n	800de70 <__multiply+0xe4>
 800de2e:	f105 0e14 	add.w	lr, r5, #20
 800de32:	46b1      	mov	r9, r6
 800de34:	2200      	movs	r2, #0
 800de36:	f85e 4b04 	ldr.w	r4, [lr], #4
 800de3a:	f8d9 b000 	ldr.w	fp, [r9]
 800de3e:	b2a1      	uxth	r1, r4
 800de40:	fa1f fb8b 	uxth.w	fp, fp
 800de44:	fb0a b101 	mla	r1, sl, r1, fp
 800de48:	4411      	add	r1, r2
 800de4a:	f8d9 2000 	ldr.w	r2, [r9]
 800de4e:	0c24      	lsrs	r4, r4, #16
 800de50:	0c12      	lsrs	r2, r2, #16
 800de52:	fb0a 2404 	mla	r4, sl, r4, r2
 800de56:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800de5a:	b289      	uxth	r1, r1
 800de5c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800de60:	45f4      	cmp	ip, lr
 800de62:	f849 1b04 	str.w	r1, [r9], #4
 800de66:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800de6a:	d8e4      	bhi.n	800de36 <__multiply+0xaa>
 800de6c:	9901      	ldr	r1, [sp, #4]
 800de6e:	5072      	str	r2, [r6, r1]
 800de70:	9a03      	ldr	r2, [sp, #12]
 800de72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800de76:	3304      	adds	r3, #4
 800de78:	f1b9 0f00 	cmp.w	r9, #0
 800de7c:	d01f      	beq.n	800debe <__multiply+0x132>
 800de7e:	6834      	ldr	r4, [r6, #0]
 800de80:	f105 0114 	add.w	r1, r5, #20
 800de84:	46b6      	mov	lr, r6
 800de86:	f04f 0a00 	mov.w	sl, #0
 800de8a:	880a      	ldrh	r2, [r1, #0]
 800de8c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800de90:	fb09 b202 	mla	r2, r9, r2, fp
 800de94:	4492      	add	sl, r2
 800de96:	b2a4      	uxth	r4, r4
 800de98:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800de9c:	f84e 4b04 	str.w	r4, [lr], #4
 800dea0:	f851 4b04 	ldr.w	r4, [r1], #4
 800dea4:	f8be 2000 	ldrh.w	r2, [lr]
 800dea8:	0c24      	lsrs	r4, r4, #16
 800deaa:	fb09 2404 	mla	r4, r9, r4, r2
 800deae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800deb2:	458c      	cmp	ip, r1
 800deb4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800deb8:	d8e7      	bhi.n	800de8a <__multiply+0xfe>
 800deba:	9a01      	ldr	r2, [sp, #4]
 800debc:	50b4      	str	r4, [r6, r2]
 800debe:	3604      	adds	r6, #4
 800dec0:	e7a3      	b.n	800de0a <__multiply+0x7e>
 800dec2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d1a5      	bne.n	800de16 <__multiply+0x8a>
 800deca:	3f01      	subs	r7, #1
 800decc:	e7a1      	b.n	800de12 <__multiply+0x86>
 800dece:	bf00      	nop
 800ded0:	0800f1fb 	.word	0x0800f1fb
 800ded4:	0800f20c 	.word	0x0800f20c

0800ded8 <__pow5mult>:
 800ded8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dedc:	4615      	mov	r5, r2
 800dede:	f012 0203 	ands.w	r2, r2, #3
 800dee2:	4606      	mov	r6, r0
 800dee4:	460f      	mov	r7, r1
 800dee6:	d007      	beq.n	800def8 <__pow5mult+0x20>
 800dee8:	4c25      	ldr	r4, [pc, #148]	; (800df80 <__pow5mult+0xa8>)
 800deea:	3a01      	subs	r2, #1
 800deec:	2300      	movs	r3, #0
 800deee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800def2:	f7ff fe9b 	bl	800dc2c <__multadd>
 800def6:	4607      	mov	r7, r0
 800def8:	10ad      	asrs	r5, r5, #2
 800defa:	d03d      	beq.n	800df78 <__pow5mult+0xa0>
 800defc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800defe:	b97c      	cbnz	r4, 800df20 <__pow5mult+0x48>
 800df00:	2010      	movs	r0, #16
 800df02:	f7ff fe1b 	bl	800db3c <malloc>
 800df06:	4602      	mov	r2, r0
 800df08:	6270      	str	r0, [r6, #36]	; 0x24
 800df0a:	b928      	cbnz	r0, 800df18 <__pow5mult+0x40>
 800df0c:	4b1d      	ldr	r3, [pc, #116]	; (800df84 <__pow5mult+0xac>)
 800df0e:	481e      	ldr	r0, [pc, #120]	; (800df88 <__pow5mult+0xb0>)
 800df10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800df14:	f000 fa70 	bl	800e3f8 <__assert_func>
 800df18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800df1c:	6004      	str	r4, [r0, #0]
 800df1e:	60c4      	str	r4, [r0, #12]
 800df20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800df24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800df28:	b94c      	cbnz	r4, 800df3e <__pow5mult+0x66>
 800df2a:	f240 2171 	movw	r1, #625	; 0x271
 800df2e:	4630      	mov	r0, r6
 800df30:	f7ff ff16 	bl	800dd60 <__i2b>
 800df34:	2300      	movs	r3, #0
 800df36:	f8c8 0008 	str.w	r0, [r8, #8]
 800df3a:	4604      	mov	r4, r0
 800df3c:	6003      	str	r3, [r0, #0]
 800df3e:	f04f 0900 	mov.w	r9, #0
 800df42:	07eb      	lsls	r3, r5, #31
 800df44:	d50a      	bpl.n	800df5c <__pow5mult+0x84>
 800df46:	4639      	mov	r1, r7
 800df48:	4622      	mov	r2, r4
 800df4a:	4630      	mov	r0, r6
 800df4c:	f7ff ff1e 	bl	800dd8c <__multiply>
 800df50:	4639      	mov	r1, r7
 800df52:	4680      	mov	r8, r0
 800df54:	4630      	mov	r0, r6
 800df56:	f7ff fe47 	bl	800dbe8 <_Bfree>
 800df5a:	4647      	mov	r7, r8
 800df5c:	106d      	asrs	r5, r5, #1
 800df5e:	d00b      	beq.n	800df78 <__pow5mult+0xa0>
 800df60:	6820      	ldr	r0, [r4, #0]
 800df62:	b938      	cbnz	r0, 800df74 <__pow5mult+0x9c>
 800df64:	4622      	mov	r2, r4
 800df66:	4621      	mov	r1, r4
 800df68:	4630      	mov	r0, r6
 800df6a:	f7ff ff0f 	bl	800dd8c <__multiply>
 800df6e:	6020      	str	r0, [r4, #0]
 800df70:	f8c0 9000 	str.w	r9, [r0]
 800df74:	4604      	mov	r4, r0
 800df76:	e7e4      	b.n	800df42 <__pow5mult+0x6a>
 800df78:	4638      	mov	r0, r7
 800df7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df7e:	bf00      	nop
 800df80:	0800f360 	.word	0x0800f360
 800df84:	0800f185 	.word	0x0800f185
 800df88:	0800f20c 	.word	0x0800f20c

0800df8c <__lshift>:
 800df8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df90:	460c      	mov	r4, r1
 800df92:	6849      	ldr	r1, [r1, #4]
 800df94:	6923      	ldr	r3, [r4, #16]
 800df96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df9a:	68a3      	ldr	r3, [r4, #8]
 800df9c:	4607      	mov	r7, r0
 800df9e:	4691      	mov	r9, r2
 800dfa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dfa4:	f108 0601 	add.w	r6, r8, #1
 800dfa8:	42b3      	cmp	r3, r6
 800dfaa:	db0b      	blt.n	800dfc4 <__lshift+0x38>
 800dfac:	4638      	mov	r0, r7
 800dfae:	f7ff fddb 	bl	800db68 <_Balloc>
 800dfb2:	4605      	mov	r5, r0
 800dfb4:	b948      	cbnz	r0, 800dfca <__lshift+0x3e>
 800dfb6:	4602      	mov	r2, r0
 800dfb8:	4b28      	ldr	r3, [pc, #160]	; (800e05c <__lshift+0xd0>)
 800dfba:	4829      	ldr	r0, [pc, #164]	; (800e060 <__lshift+0xd4>)
 800dfbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dfc0:	f000 fa1a 	bl	800e3f8 <__assert_func>
 800dfc4:	3101      	adds	r1, #1
 800dfc6:	005b      	lsls	r3, r3, #1
 800dfc8:	e7ee      	b.n	800dfa8 <__lshift+0x1c>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	f100 0114 	add.w	r1, r0, #20
 800dfd0:	f100 0210 	add.w	r2, r0, #16
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	4553      	cmp	r3, sl
 800dfd8:	db33      	blt.n	800e042 <__lshift+0xb6>
 800dfda:	6920      	ldr	r0, [r4, #16]
 800dfdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dfe0:	f104 0314 	add.w	r3, r4, #20
 800dfe4:	f019 091f 	ands.w	r9, r9, #31
 800dfe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dfec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dff0:	d02b      	beq.n	800e04a <__lshift+0xbe>
 800dff2:	f1c9 0e20 	rsb	lr, r9, #32
 800dff6:	468a      	mov	sl, r1
 800dff8:	2200      	movs	r2, #0
 800dffa:	6818      	ldr	r0, [r3, #0]
 800dffc:	fa00 f009 	lsl.w	r0, r0, r9
 800e000:	4302      	orrs	r2, r0
 800e002:	f84a 2b04 	str.w	r2, [sl], #4
 800e006:	f853 2b04 	ldr.w	r2, [r3], #4
 800e00a:	459c      	cmp	ip, r3
 800e00c:	fa22 f20e 	lsr.w	r2, r2, lr
 800e010:	d8f3      	bhi.n	800dffa <__lshift+0x6e>
 800e012:	ebac 0304 	sub.w	r3, ip, r4
 800e016:	3b15      	subs	r3, #21
 800e018:	f023 0303 	bic.w	r3, r3, #3
 800e01c:	3304      	adds	r3, #4
 800e01e:	f104 0015 	add.w	r0, r4, #21
 800e022:	4584      	cmp	ip, r0
 800e024:	bf38      	it	cc
 800e026:	2304      	movcc	r3, #4
 800e028:	50ca      	str	r2, [r1, r3]
 800e02a:	b10a      	cbz	r2, 800e030 <__lshift+0xa4>
 800e02c:	f108 0602 	add.w	r6, r8, #2
 800e030:	3e01      	subs	r6, #1
 800e032:	4638      	mov	r0, r7
 800e034:	612e      	str	r6, [r5, #16]
 800e036:	4621      	mov	r1, r4
 800e038:	f7ff fdd6 	bl	800dbe8 <_Bfree>
 800e03c:	4628      	mov	r0, r5
 800e03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e042:	f842 0f04 	str.w	r0, [r2, #4]!
 800e046:	3301      	adds	r3, #1
 800e048:	e7c5      	b.n	800dfd6 <__lshift+0x4a>
 800e04a:	3904      	subs	r1, #4
 800e04c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e050:	f841 2f04 	str.w	r2, [r1, #4]!
 800e054:	459c      	cmp	ip, r3
 800e056:	d8f9      	bhi.n	800e04c <__lshift+0xc0>
 800e058:	e7ea      	b.n	800e030 <__lshift+0xa4>
 800e05a:	bf00      	nop
 800e05c:	0800f1fb 	.word	0x0800f1fb
 800e060:	0800f20c 	.word	0x0800f20c

0800e064 <__mcmp>:
 800e064:	b530      	push	{r4, r5, lr}
 800e066:	6902      	ldr	r2, [r0, #16]
 800e068:	690c      	ldr	r4, [r1, #16]
 800e06a:	1b12      	subs	r2, r2, r4
 800e06c:	d10e      	bne.n	800e08c <__mcmp+0x28>
 800e06e:	f100 0314 	add.w	r3, r0, #20
 800e072:	3114      	adds	r1, #20
 800e074:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e078:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e07c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e080:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e084:	42a5      	cmp	r5, r4
 800e086:	d003      	beq.n	800e090 <__mcmp+0x2c>
 800e088:	d305      	bcc.n	800e096 <__mcmp+0x32>
 800e08a:	2201      	movs	r2, #1
 800e08c:	4610      	mov	r0, r2
 800e08e:	bd30      	pop	{r4, r5, pc}
 800e090:	4283      	cmp	r3, r0
 800e092:	d3f3      	bcc.n	800e07c <__mcmp+0x18>
 800e094:	e7fa      	b.n	800e08c <__mcmp+0x28>
 800e096:	f04f 32ff 	mov.w	r2, #4294967295
 800e09a:	e7f7      	b.n	800e08c <__mcmp+0x28>

0800e09c <__mdiff>:
 800e09c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a0:	460c      	mov	r4, r1
 800e0a2:	4606      	mov	r6, r0
 800e0a4:	4611      	mov	r1, r2
 800e0a6:	4620      	mov	r0, r4
 800e0a8:	4617      	mov	r7, r2
 800e0aa:	f7ff ffdb 	bl	800e064 <__mcmp>
 800e0ae:	1e05      	subs	r5, r0, #0
 800e0b0:	d110      	bne.n	800e0d4 <__mdiff+0x38>
 800e0b2:	4629      	mov	r1, r5
 800e0b4:	4630      	mov	r0, r6
 800e0b6:	f7ff fd57 	bl	800db68 <_Balloc>
 800e0ba:	b930      	cbnz	r0, 800e0ca <__mdiff+0x2e>
 800e0bc:	4b39      	ldr	r3, [pc, #228]	; (800e1a4 <__mdiff+0x108>)
 800e0be:	4602      	mov	r2, r0
 800e0c0:	f240 2132 	movw	r1, #562	; 0x232
 800e0c4:	4838      	ldr	r0, [pc, #224]	; (800e1a8 <__mdiff+0x10c>)
 800e0c6:	f000 f997 	bl	800e3f8 <__assert_func>
 800e0ca:	2301      	movs	r3, #1
 800e0cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e0d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0d4:	bfa4      	itt	ge
 800e0d6:	463b      	movge	r3, r7
 800e0d8:	4627      	movge	r7, r4
 800e0da:	4630      	mov	r0, r6
 800e0dc:	6879      	ldr	r1, [r7, #4]
 800e0de:	bfa6      	itte	ge
 800e0e0:	461c      	movge	r4, r3
 800e0e2:	2500      	movge	r5, #0
 800e0e4:	2501      	movlt	r5, #1
 800e0e6:	f7ff fd3f 	bl	800db68 <_Balloc>
 800e0ea:	b920      	cbnz	r0, 800e0f6 <__mdiff+0x5a>
 800e0ec:	4b2d      	ldr	r3, [pc, #180]	; (800e1a4 <__mdiff+0x108>)
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e0f4:	e7e6      	b.n	800e0c4 <__mdiff+0x28>
 800e0f6:	693e      	ldr	r6, [r7, #16]
 800e0f8:	60c5      	str	r5, [r0, #12]
 800e0fa:	6925      	ldr	r5, [r4, #16]
 800e0fc:	f107 0114 	add.w	r1, r7, #20
 800e100:	f104 0914 	add.w	r9, r4, #20
 800e104:	f100 0e14 	add.w	lr, r0, #20
 800e108:	f107 0210 	add.w	r2, r7, #16
 800e10c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e110:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e114:	46f2      	mov	sl, lr
 800e116:	2700      	movs	r7, #0
 800e118:	f859 3b04 	ldr.w	r3, [r9], #4
 800e11c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e120:	fa1f f883 	uxth.w	r8, r3
 800e124:	fa17 f78b 	uxtah	r7, r7, fp
 800e128:	0c1b      	lsrs	r3, r3, #16
 800e12a:	eba7 0808 	sub.w	r8, r7, r8
 800e12e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e132:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e136:	fa1f f888 	uxth.w	r8, r8
 800e13a:	141f      	asrs	r7, r3, #16
 800e13c:	454d      	cmp	r5, r9
 800e13e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e142:	f84a 3b04 	str.w	r3, [sl], #4
 800e146:	d8e7      	bhi.n	800e118 <__mdiff+0x7c>
 800e148:	1b2b      	subs	r3, r5, r4
 800e14a:	3b15      	subs	r3, #21
 800e14c:	f023 0303 	bic.w	r3, r3, #3
 800e150:	3304      	adds	r3, #4
 800e152:	3415      	adds	r4, #21
 800e154:	42a5      	cmp	r5, r4
 800e156:	bf38      	it	cc
 800e158:	2304      	movcc	r3, #4
 800e15a:	4419      	add	r1, r3
 800e15c:	4473      	add	r3, lr
 800e15e:	469e      	mov	lr, r3
 800e160:	460d      	mov	r5, r1
 800e162:	4565      	cmp	r5, ip
 800e164:	d30e      	bcc.n	800e184 <__mdiff+0xe8>
 800e166:	f10c 0203 	add.w	r2, ip, #3
 800e16a:	1a52      	subs	r2, r2, r1
 800e16c:	f022 0203 	bic.w	r2, r2, #3
 800e170:	3903      	subs	r1, #3
 800e172:	458c      	cmp	ip, r1
 800e174:	bf38      	it	cc
 800e176:	2200      	movcc	r2, #0
 800e178:	441a      	add	r2, r3
 800e17a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e17e:	b17b      	cbz	r3, 800e1a0 <__mdiff+0x104>
 800e180:	6106      	str	r6, [r0, #16]
 800e182:	e7a5      	b.n	800e0d0 <__mdiff+0x34>
 800e184:	f855 8b04 	ldr.w	r8, [r5], #4
 800e188:	fa17 f488 	uxtah	r4, r7, r8
 800e18c:	1422      	asrs	r2, r4, #16
 800e18e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800e192:	b2a4      	uxth	r4, r4
 800e194:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800e198:	f84e 4b04 	str.w	r4, [lr], #4
 800e19c:	1417      	asrs	r7, r2, #16
 800e19e:	e7e0      	b.n	800e162 <__mdiff+0xc6>
 800e1a0:	3e01      	subs	r6, #1
 800e1a2:	e7ea      	b.n	800e17a <__mdiff+0xde>
 800e1a4:	0800f1fb 	.word	0x0800f1fb
 800e1a8:	0800f20c 	.word	0x0800f20c

0800e1ac <__d2b>:
 800e1ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e1b0:	4689      	mov	r9, r1
 800e1b2:	2101      	movs	r1, #1
 800e1b4:	ec57 6b10 	vmov	r6, r7, d0
 800e1b8:	4690      	mov	r8, r2
 800e1ba:	f7ff fcd5 	bl	800db68 <_Balloc>
 800e1be:	4604      	mov	r4, r0
 800e1c0:	b930      	cbnz	r0, 800e1d0 <__d2b+0x24>
 800e1c2:	4602      	mov	r2, r0
 800e1c4:	4b25      	ldr	r3, [pc, #148]	; (800e25c <__d2b+0xb0>)
 800e1c6:	4826      	ldr	r0, [pc, #152]	; (800e260 <__d2b+0xb4>)
 800e1c8:	f240 310a 	movw	r1, #778	; 0x30a
 800e1cc:	f000 f914 	bl	800e3f8 <__assert_func>
 800e1d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e1d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e1d8:	bb35      	cbnz	r5, 800e228 <__d2b+0x7c>
 800e1da:	2e00      	cmp	r6, #0
 800e1dc:	9301      	str	r3, [sp, #4]
 800e1de:	d028      	beq.n	800e232 <__d2b+0x86>
 800e1e0:	4668      	mov	r0, sp
 800e1e2:	9600      	str	r6, [sp, #0]
 800e1e4:	f7ff fd8c 	bl	800dd00 <__lo0bits>
 800e1e8:	9900      	ldr	r1, [sp, #0]
 800e1ea:	b300      	cbz	r0, 800e22e <__d2b+0x82>
 800e1ec:	9a01      	ldr	r2, [sp, #4]
 800e1ee:	f1c0 0320 	rsb	r3, r0, #32
 800e1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800e1f6:	430b      	orrs	r3, r1
 800e1f8:	40c2      	lsrs	r2, r0
 800e1fa:	6163      	str	r3, [r4, #20]
 800e1fc:	9201      	str	r2, [sp, #4]
 800e1fe:	9b01      	ldr	r3, [sp, #4]
 800e200:	61a3      	str	r3, [r4, #24]
 800e202:	2b00      	cmp	r3, #0
 800e204:	bf14      	ite	ne
 800e206:	2202      	movne	r2, #2
 800e208:	2201      	moveq	r2, #1
 800e20a:	6122      	str	r2, [r4, #16]
 800e20c:	b1d5      	cbz	r5, 800e244 <__d2b+0x98>
 800e20e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e212:	4405      	add	r5, r0
 800e214:	f8c9 5000 	str.w	r5, [r9]
 800e218:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e21c:	f8c8 0000 	str.w	r0, [r8]
 800e220:	4620      	mov	r0, r4
 800e222:	b003      	add	sp, #12
 800e224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e22c:	e7d5      	b.n	800e1da <__d2b+0x2e>
 800e22e:	6161      	str	r1, [r4, #20]
 800e230:	e7e5      	b.n	800e1fe <__d2b+0x52>
 800e232:	a801      	add	r0, sp, #4
 800e234:	f7ff fd64 	bl	800dd00 <__lo0bits>
 800e238:	9b01      	ldr	r3, [sp, #4]
 800e23a:	6163      	str	r3, [r4, #20]
 800e23c:	2201      	movs	r2, #1
 800e23e:	6122      	str	r2, [r4, #16]
 800e240:	3020      	adds	r0, #32
 800e242:	e7e3      	b.n	800e20c <__d2b+0x60>
 800e244:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e248:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e24c:	f8c9 0000 	str.w	r0, [r9]
 800e250:	6918      	ldr	r0, [r3, #16]
 800e252:	f7ff fd35 	bl	800dcc0 <__hi0bits>
 800e256:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e25a:	e7df      	b.n	800e21c <__d2b+0x70>
 800e25c:	0800f1fb 	.word	0x0800f1fb
 800e260:	0800f20c 	.word	0x0800f20c

0800e264 <_calloc_r>:
 800e264:	b513      	push	{r0, r1, r4, lr}
 800e266:	434a      	muls	r2, r1
 800e268:	4611      	mov	r1, r2
 800e26a:	9201      	str	r2, [sp, #4]
 800e26c:	f000 f85a 	bl	800e324 <_malloc_r>
 800e270:	4604      	mov	r4, r0
 800e272:	b118      	cbz	r0, 800e27c <_calloc_r+0x18>
 800e274:	9a01      	ldr	r2, [sp, #4]
 800e276:	2100      	movs	r1, #0
 800e278:	f7fe fa02 	bl	800c680 <memset>
 800e27c:	4620      	mov	r0, r4
 800e27e:	b002      	add	sp, #8
 800e280:	bd10      	pop	{r4, pc}
	...

0800e284 <_free_r>:
 800e284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e286:	2900      	cmp	r1, #0
 800e288:	d048      	beq.n	800e31c <_free_r+0x98>
 800e28a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e28e:	9001      	str	r0, [sp, #4]
 800e290:	2b00      	cmp	r3, #0
 800e292:	f1a1 0404 	sub.w	r4, r1, #4
 800e296:	bfb8      	it	lt
 800e298:	18e4      	addlt	r4, r4, r3
 800e29a:	f000 f8ef 	bl	800e47c <__malloc_lock>
 800e29e:	4a20      	ldr	r2, [pc, #128]	; (800e320 <_free_r+0x9c>)
 800e2a0:	9801      	ldr	r0, [sp, #4]
 800e2a2:	6813      	ldr	r3, [r2, #0]
 800e2a4:	4615      	mov	r5, r2
 800e2a6:	b933      	cbnz	r3, 800e2b6 <_free_r+0x32>
 800e2a8:	6063      	str	r3, [r4, #4]
 800e2aa:	6014      	str	r4, [r2, #0]
 800e2ac:	b003      	add	sp, #12
 800e2ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e2b2:	f000 b8e9 	b.w	800e488 <__malloc_unlock>
 800e2b6:	42a3      	cmp	r3, r4
 800e2b8:	d90b      	bls.n	800e2d2 <_free_r+0x4e>
 800e2ba:	6821      	ldr	r1, [r4, #0]
 800e2bc:	1862      	adds	r2, r4, r1
 800e2be:	4293      	cmp	r3, r2
 800e2c0:	bf04      	itt	eq
 800e2c2:	681a      	ldreq	r2, [r3, #0]
 800e2c4:	685b      	ldreq	r3, [r3, #4]
 800e2c6:	6063      	str	r3, [r4, #4]
 800e2c8:	bf04      	itt	eq
 800e2ca:	1852      	addeq	r2, r2, r1
 800e2cc:	6022      	streq	r2, [r4, #0]
 800e2ce:	602c      	str	r4, [r5, #0]
 800e2d0:	e7ec      	b.n	800e2ac <_free_r+0x28>
 800e2d2:	461a      	mov	r2, r3
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	b10b      	cbz	r3, 800e2dc <_free_r+0x58>
 800e2d8:	42a3      	cmp	r3, r4
 800e2da:	d9fa      	bls.n	800e2d2 <_free_r+0x4e>
 800e2dc:	6811      	ldr	r1, [r2, #0]
 800e2de:	1855      	adds	r5, r2, r1
 800e2e0:	42a5      	cmp	r5, r4
 800e2e2:	d10b      	bne.n	800e2fc <_free_r+0x78>
 800e2e4:	6824      	ldr	r4, [r4, #0]
 800e2e6:	4421      	add	r1, r4
 800e2e8:	1854      	adds	r4, r2, r1
 800e2ea:	42a3      	cmp	r3, r4
 800e2ec:	6011      	str	r1, [r2, #0]
 800e2ee:	d1dd      	bne.n	800e2ac <_free_r+0x28>
 800e2f0:	681c      	ldr	r4, [r3, #0]
 800e2f2:	685b      	ldr	r3, [r3, #4]
 800e2f4:	6053      	str	r3, [r2, #4]
 800e2f6:	4421      	add	r1, r4
 800e2f8:	6011      	str	r1, [r2, #0]
 800e2fa:	e7d7      	b.n	800e2ac <_free_r+0x28>
 800e2fc:	d902      	bls.n	800e304 <_free_r+0x80>
 800e2fe:	230c      	movs	r3, #12
 800e300:	6003      	str	r3, [r0, #0]
 800e302:	e7d3      	b.n	800e2ac <_free_r+0x28>
 800e304:	6825      	ldr	r5, [r4, #0]
 800e306:	1961      	adds	r1, r4, r5
 800e308:	428b      	cmp	r3, r1
 800e30a:	bf04      	itt	eq
 800e30c:	6819      	ldreq	r1, [r3, #0]
 800e30e:	685b      	ldreq	r3, [r3, #4]
 800e310:	6063      	str	r3, [r4, #4]
 800e312:	bf04      	itt	eq
 800e314:	1949      	addeq	r1, r1, r5
 800e316:	6021      	streq	r1, [r4, #0]
 800e318:	6054      	str	r4, [r2, #4]
 800e31a:	e7c7      	b.n	800e2ac <_free_r+0x28>
 800e31c:	b003      	add	sp, #12
 800e31e:	bd30      	pop	{r4, r5, pc}
 800e320:	24000a00 	.word	0x24000a00

0800e324 <_malloc_r>:
 800e324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e326:	1ccd      	adds	r5, r1, #3
 800e328:	f025 0503 	bic.w	r5, r5, #3
 800e32c:	3508      	adds	r5, #8
 800e32e:	2d0c      	cmp	r5, #12
 800e330:	bf38      	it	cc
 800e332:	250c      	movcc	r5, #12
 800e334:	2d00      	cmp	r5, #0
 800e336:	4606      	mov	r6, r0
 800e338:	db01      	blt.n	800e33e <_malloc_r+0x1a>
 800e33a:	42a9      	cmp	r1, r5
 800e33c:	d903      	bls.n	800e346 <_malloc_r+0x22>
 800e33e:	230c      	movs	r3, #12
 800e340:	6033      	str	r3, [r6, #0]
 800e342:	2000      	movs	r0, #0
 800e344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e346:	f000 f899 	bl	800e47c <__malloc_lock>
 800e34a:	4921      	ldr	r1, [pc, #132]	; (800e3d0 <_malloc_r+0xac>)
 800e34c:	680a      	ldr	r2, [r1, #0]
 800e34e:	4614      	mov	r4, r2
 800e350:	b99c      	cbnz	r4, 800e37a <_malloc_r+0x56>
 800e352:	4f20      	ldr	r7, [pc, #128]	; (800e3d4 <_malloc_r+0xb0>)
 800e354:	683b      	ldr	r3, [r7, #0]
 800e356:	b923      	cbnz	r3, 800e362 <_malloc_r+0x3e>
 800e358:	4621      	mov	r1, r4
 800e35a:	4630      	mov	r0, r6
 800e35c:	f000 f83c 	bl	800e3d8 <_sbrk_r>
 800e360:	6038      	str	r0, [r7, #0]
 800e362:	4629      	mov	r1, r5
 800e364:	4630      	mov	r0, r6
 800e366:	f000 f837 	bl	800e3d8 <_sbrk_r>
 800e36a:	1c43      	adds	r3, r0, #1
 800e36c:	d123      	bne.n	800e3b6 <_malloc_r+0x92>
 800e36e:	230c      	movs	r3, #12
 800e370:	6033      	str	r3, [r6, #0]
 800e372:	4630      	mov	r0, r6
 800e374:	f000 f888 	bl	800e488 <__malloc_unlock>
 800e378:	e7e3      	b.n	800e342 <_malloc_r+0x1e>
 800e37a:	6823      	ldr	r3, [r4, #0]
 800e37c:	1b5b      	subs	r3, r3, r5
 800e37e:	d417      	bmi.n	800e3b0 <_malloc_r+0x8c>
 800e380:	2b0b      	cmp	r3, #11
 800e382:	d903      	bls.n	800e38c <_malloc_r+0x68>
 800e384:	6023      	str	r3, [r4, #0]
 800e386:	441c      	add	r4, r3
 800e388:	6025      	str	r5, [r4, #0]
 800e38a:	e004      	b.n	800e396 <_malloc_r+0x72>
 800e38c:	6863      	ldr	r3, [r4, #4]
 800e38e:	42a2      	cmp	r2, r4
 800e390:	bf0c      	ite	eq
 800e392:	600b      	streq	r3, [r1, #0]
 800e394:	6053      	strne	r3, [r2, #4]
 800e396:	4630      	mov	r0, r6
 800e398:	f000 f876 	bl	800e488 <__malloc_unlock>
 800e39c:	f104 000b 	add.w	r0, r4, #11
 800e3a0:	1d23      	adds	r3, r4, #4
 800e3a2:	f020 0007 	bic.w	r0, r0, #7
 800e3a6:	1ac2      	subs	r2, r0, r3
 800e3a8:	d0cc      	beq.n	800e344 <_malloc_r+0x20>
 800e3aa:	1a1b      	subs	r3, r3, r0
 800e3ac:	50a3      	str	r3, [r4, r2]
 800e3ae:	e7c9      	b.n	800e344 <_malloc_r+0x20>
 800e3b0:	4622      	mov	r2, r4
 800e3b2:	6864      	ldr	r4, [r4, #4]
 800e3b4:	e7cc      	b.n	800e350 <_malloc_r+0x2c>
 800e3b6:	1cc4      	adds	r4, r0, #3
 800e3b8:	f024 0403 	bic.w	r4, r4, #3
 800e3bc:	42a0      	cmp	r0, r4
 800e3be:	d0e3      	beq.n	800e388 <_malloc_r+0x64>
 800e3c0:	1a21      	subs	r1, r4, r0
 800e3c2:	4630      	mov	r0, r6
 800e3c4:	f000 f808 	bl	800e3d8 <_sbrk_r>
 800e3c8:	3001      	adds	r0, #1
 800e3ca:	d1dd      	bne.n	800e388 <_malloc_r+0x64>
 800e3cc:	e7cf      	b.n	800e36e <_malloc_r+0x4a>
 800e3ce:	bf00      	nop
 800e3d0:	24000a00 	.word	0x24000a00
 800e3d4:	24000a04 	.word	0x24000a04

0800e3d8 <_sbrk_r>:
 800e3d8:	b538      	push	{r3, r4, r5, lr}
 800e3da:	4d06      	ldr	r5, [pc, #24]	; (800e3f4 <_sbrk_r+0x1c>)
 800e3dc:	2300      	movs	r3, #0
 800e3de:	4604      	mov	r4, r0
 800e3e0:	4608      	mov	r0, r1
 800e3e2:	602b      	str	r3, [r5, #0]
 800e3e4:	f7f4 fdb2 	bl	8002f4c <_sbrk>
 800e3e8:	1c43      	adds	r3, r0, #1
 800e3ea:	d102      	bne.n	800e3f2 <_sbrk_r+0x1a>
 800e3ec:	682b      	ldr	r3, [r5, #0]
 800e3ee:	b103      	cbz	r3, 800e3f2 <_sbrk_r+0x1a>
 800e3f0:	6023      	str	r3, [r4, #0]
 800e3f2:	bd38      	pop	{r3, r4, r5, pc}
 800e3f4:	24000a0c 	.word	0x24000a0c

0800e3f8 <__assert_func>:
 800e3f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e3fa:	4614      	mov	r4, r2
 800e3fc:	461a      	mov	r2, r3
 800e3fe:	4b09      	ldr	r3, [pc, #36]	; (800e424 <__assert_func+0x2c>)
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	4605      	mov	r5, r0
 800e404:	68d8      	ldr	r0, [r3, #12]
 800e406:	b14c      	cbz	r4, 800e41c <__assert_func+0x24>
 800e408:	4b07      	ldr	r3, [pc, #28]	; (800e428 <__assert_func+0x30>)
 800e40a:	9100      	str	r1, [sp, #0]
 800e40c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e410:	4906      	ldr	r1, [pc, #24]	; (800e42c <__assert_func+0x34>)
 800e412:	462b      	mov	r3, r5
 800e414:	f000 f80e 	bl	800e434 <fiprintf>
 800e418:	f000 fa64 	bl	800e8e4 <abort>
 800e41c:	4b04      	ldr	r3, [pc, #16]	; (800e430 <__assert_func+0x38>)
 800e41e:	461c      	mov	r4, r3
 800e420:	e7f3      	b.n	800e40a <__assert_func+0x12>
 800e422:	bf00      	nop
 800e424:	24000020 	.word	0x24000020
 800e428:	0800f36c 	.word	0x0800f36c
 800e42c:	0800f379 	.word	0x0800f379
 800e430:	0800f3a7 	.word	0x0800f3a7

0800e434 <fiprintf>:
 800e434:	b40e      	push	{r1, r2, r3}
 800e436:	b503      	push	{r0, r1, lr}
 800e438:	4601      	mov	r1, r0
 800e43a:	ab03      	add	r3, sp, #12
 800e43c:	4805      	ldr	r0, [pc, #20]	; (800e454 <fiprintf+0x20>)
 800e43e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e442:	6800      	ldr	r0, [r0, #0]
 800e444:	9301      	str	r3, [sp, #4]
 800e446:	f000 f84f 	bl	800e4e8 <_vfiprintf_r>
 800e44a:	b002      	add	sp, #8
 800e44c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e450:	b003      	add	sp, #12
 800e452:	4770      	bx	lr
 800e454:	24000020 	.word	0x24000020

0800e458 <__ascii_mbtowc>:
 800e458:	b082      	sub	sp, #8
 800e45a:	b901      	cbnz	r1, 800e45e <__ascii_mbtowc+0x6>
 800e45c:	a901      	add	r1, sp, #4
 800e45e:	b142      	cbz	r2, 800e472 <__ascii_mbtowc+0x1a>
 800e460:	b14b      	cbz	r3, 800e476 <__ascii_mbtowc+0x1e>
 800e462:	7813      	ldrb	r3, [r2, #0]
 800e464:	600b      	str	r3, [r1, #0]
 800e466:	7812      	ldrb	r2, [r2, #0]
 800e468:	1e10      	subs	r0, r2, #0
 800e46a:	bf18      	it	ne
 800e46c:	2001      	movne	r0, #1
 800e46e:	b002      	add	sp, #8
 800e470:	4770      	bx	lr
 800e472:	4610      	mov	r0, r2
 800e474:	e7fb      	b.n	800e46e <__ascii_mbtowc+0x16>
 800e476:	f06f 0001 	mvn.w	r0, #1
 800e47a:	e7f8      	b.n	800e46e <__ascii_mbtowc+0x16>

0800e47c <__malloc_lock>:
 800e47c:	4801      	ldr	r0, [pc, #4]	; (800e484 <__malloc_lock+0x8>)
 800e47e:	f000 bbf1 	b.w	800ec64 <__retarget_lock_acquire_recursive>
 800e482:	bf00      	nop
 800e484:	24000a14 	.word	0x24000a14

0800e488 <__malloc_unlock>:
 800e488:	4801      	ldr	r0, [pc, #4]	; (800e490 <__malloc_unlock+0x8>)
 800e48a:	f000 bbec 	b.w	800ec66 <__retarget_lock_release_recursive>
 800e48e:	bf00      	nop
 800e490:	24000a14 	.word	0x24000a14

0800e494 <__sfputc_r>:
 800e494:	6893      	ldr	r3, [r2, #8]
 800e496:	3b01      	subs	r3, #1
 800e498:	2b00      	cmp	r3, #0
 800e49a:	b410      	push	{r4}
 800e49c:	6093      	str	r3, [r2, #8]
 800e49e:	da08      	bge.n	800e4b2 <__sfputc_r+0x1e>
 800e4a0:	6994      	ldr	r4, [r2, #24]
 800e4a2:	42a3      	cmp	r3, r4
 800e4a4:	db01      	blt.n	800e4aa <__sfputc_r+0x16>
 800e4a6:	290a      	cmp	r1, #10
 800e4a8:	d103      	bne.n	800e4b2 <__sfputc_r+0x1e>
 800e4aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4ae:	f000 b94b 	b.w	800e748 <__swbuf_r>
 800e4b2:	6813      	ldr	r3, [r2, #0]
 800e4b4:	1c58      	adds	r0, r3, #1
 800e4b6:	6010      	str	r0, [r2, #0]
 800e4b8:	7019      	strb	r1, [r3, #0]
 800e4ba:	4608      	mov	r0, r1
 800e4bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4c0:	4770      	bx	lr

0800e4c2 <__sfputs_r>:
 800e4c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4c4:	4606      	mov	r6, r0
 800e4c6:	460f      	mov	r7, r1
 800e4c8:	4614      	mov	r4, r2
 800e4ca:	18d5      	adds	r5, r2, r3
 800e4cc:	42ac      	cmp	r4, r5
 800e4ce:	d101      	bne.n	800e4d4 <__sfputs_r+0x12>
 800e4d0:	2000      	movs	r0, #0
 800e4d2:	e007      	b.n	800e4e4 <__sfputs_r+0x22>
 800e4d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4d8:	463a      	mov	r2, r7
 800e4da:	4630      	mov	r0, r6
 800e4dc:	f7ff ffda 	bl	800e494 <__sfputc_r>
 800e4e0:	1c43      	adds	r3, r0, #1
 800e4e2:	d1f3      	bne.n	800e4cc <__sfputs_r+0xa>
 800e4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e4e8 <_vfiprintf_r>:
 800e4e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4ec:	460d      	mov	r5, r1
 800e4ee:	b09d      	sub	sp, #116	; 0x74
 800e4f0:	4614      	mov	r4, r2
 800e4f2:	4698      	mov	r8, r3
 800e4f4:	4606      	mov	r6, r0
 800e4f6:	b118      	cbz	r0, 800e500 <_vfiprintf_r+0x18>
 800e4f8:	6983      	ldr	r3, [r0, #24]
 800e4fa:	b90b      	cbnz	r3, 800e500 <_vfiprintf_r+0x18>
 800e4fc:	f000 fb14 	bl	800eb28 <__sinit>
 800e500:	4b89      	ldr	r3, [pc, #548]	; (800e728 <_vfiprintf_r+0x240>)
 800e502:	429d      	cmp	r5, r3
 800e504:	d11b      	bne.n	800e53e <_vfiprintf_r+0x56>
 800e506:	6875      	ldr	r5, [r6, #4]
 800e508:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e50a:	07d9      	lsls	r1, r3, #31
 800e50c:	d405      	bmi.n	800e51a <_vfiprintf_r+0x32>
 800e50e:	89ab      	ldrh	r3, [r5, #12]
 800e510:	059a      	lsls	r2, r3, #22
 800e512:	d402      	bmi.n	800e51a <_vfiprintf_r+0x32>
 800e514:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e516:	f000 fba5 	bl	800ec64 <__retarget_lock_acquire_recursive>
 800e51a:	89ab      	ldrh	r3, [r5, #12]
 800e51c:	071b      	lsls	r3, r3, #28
 800e51e:	d501      	bpl.n	800e524 <_vfiprintf_r+0x3c>
 800e520:	692b      	ldr	r3, [r5, #16]
 800e522:	b9eb      	cbnz	r3, 800e560 <_vfiprintf_r+0x78>
 800e524:	4629      	mov	r1, r5
 800e526:	4630      	mov	r0, r6
 800e528:	f000 f96e 	bl	800e808 <__swsetup_r>
 800e52c:	b1c0      	cbz	r0, 800e560 <_vfiprintf_r+0x78>
 800e52e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e530:	07dc      	lsls	r4, r3, #31
 800e532:	d50e      	bpl.n	800e552 <_vfiprintf_r+0x6a>
 800e534:	f04f 30ff 	mov.w	r0, #4294967295
 800e538:	b01d      	add	sp, #116	; 0x74
 800e53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e53e:	4b7b      	ldr	r3, [pc, #492]	; (800e72c <_vfiprintf_r+0x244>)
 800e540:	429d      	cmp	r5, r3
 800e542:	d101      	bne.n	800e548 <_vfiprintf_r+0x60>
 800e544:	68b5      	ldr	r5, [r6, #8]
 800e546:	e7df      	b.n	800e508 <_vfiprintf_r+0x20>
 800e548:	4b79      	ldr	r3, [pc, #484]	; (800e730 <_vfiprintf_r+0x248>)
 800e54a:	429d      	cmp	r5, r3
 800e54c:	bf08      	it	eq
 800e54e:	68f5      	ldreq	r5, [r6, #12]
 800e550:	e7da      	b.n	800e508 <_vfiprintf_r+0x20>
 800e552:	89ab      	ldrh	r3, [r5, #12]
 800e554:	0598      	lsls	r0, r3, #22
 800e556:	d4ed      	bmi.n	800e534 <_vfiprintf_r+0x4c>
 800e558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e55a:	f000 fb84 	bl	800ec66 <__retarget_lock_release_recursive>
 800e55e:	e7e9      	b.n	800e534 <_vfiprintf_r+0x4c>
 800e560:	2300      	movs	r3, #0
 800e562:	9309      	str	r3, [sp, #36]	; 0x24
 800e564:	2320      	movs	r3, #32
 800e566:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e56a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e56e:	2330      	movs	r3, #48	; 0x30
 800e570:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e734 <_vfiprintf_r+0x24c>
 800e574:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e578:	f04f 0901 	mov.w	r9, #1
 800e57c:	4623      	mov	r3, r4
 800e57e:	469a      	mov	sl, r3
 800e580:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e584:	b10a      	cbz	r2, 800e58a <_vfiprintf_r+0xa2>
 800e586:	2a25      	cmp	r2, #37	; 0x25
 800e588:	d1f9      	bne.n	800e57e <_vfiprintf_r+0x96>
 800e58a:	ebba 0b04 	subs.w	fp, sl, r4
 800e58e:	d00b      	beq.n	800e5a8 <_vfiprintf_r+0xc0>
 800e590:	465b      	mov	r3, fp
 800e592:	4622      	mov	r2, r4
 800e594:	4629      	mov	r1, r5
 800e596:	4630      	mov	r0, r6
 800e598:	f7ff ff93 	bl	800e4c2 <__sfputs_r>
 800e59c:	3001      	adds	r0, #1
 800e59e:	f000 80aa 	beq.w	800e6f6 <_vfiprintf_r+0x20e>
 800e5a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5a4:	445a      	add	r2, fp
 800e5a6:	9209      	str	r2, [sp, #36]	; 0x24
 800e5a8:	f89a 3000 	ldrb.w	r3, [sl]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	f000 80a2 	beq.w	800e6f6 <_vfiprintf_r+0x20e>
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	f04f 32ff 	mov.w	r2, #4294967295
 800e5b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5bc:	f10a 0a01 	add.w	sl, sl, #1
 800e5c0:	9304      	str	r3, [sp, #16]
 800e5c2:	9307      	str	r3, [sp, #28]
 800e5c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5c8:	931a      	str	r3, [sp, #104]	; 0x68
 800e5ca:	4654      	mov	r4, sl
 800e5cc:	2205      	movs	r2, #5
 800e5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5d2:	4858      	ldr	r0, [pc, #352]	; (800e734 <_vfiprintf_r+0x24c>)
 800e5d4:	f7f1 fe8c 	bl	80002f0 <memchr>
 800e5d8:	9a04      	ldr	r2, [sp, #16]
 800e5da:	b9d8      	cbnz	r0, 800e614 <_vfiprintf_r+0x12c>
 800e5dc:	06d1      	lsls	r1, r2, #27
 800e5de:	bf44      	itt	mi
 800e5e0:	2320      	movmi	r3, #32
 800e5e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5e6:	0713      	lsls	r3, r2, #28
 800e5e8:	bf44      	itt	mi
 800e5ea:	232b      	movmi	r3, #43	; 0x2b
 800e5ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5f0:	f89a 3000 	ldrb.w	r3, [sl]
 800e5f4:	2b2a      	cmp	r3, #42	; 0x2a
 800e5f6:	d015      	beq.n	800e624 <_vfiprintf_r+0x13c>
 800e5f8:	9a07      	ldr	r2, [sp, #28]
 800e5fa:	4654      	mov	r4, sl
 800e5fc:	2000      	movs	r0, #0
 800e5fe:	f04f 0c0a 	mov.w	ip, #10
 800e602:	4621      	mov	r1, r4
 800e604:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e608:	3b30      	subs	r3, #48	; 0x30
 800e60a:	2b09      	cmp	r3, #9
 800e60c:	d94e      	bls.n	800e6ac <_vfiprintf_r+0x1c4>
 800e60e:	b1b0      	cbz	r0, 800e63e <_vfiprintf_r+0x156>
 800e610:	9207      	str	r2, [sp, #28]
 800e612:	e014      	b.n	800e63e <_vfiprintf_r+0x156>
 800e614:	eba0 0308 	sub.w	r3, r0, r8
 800e618:	fa09 f303 	lsl.w	r3, r9, r3
 800e61c:	4313      	orrs	r3, r2
 800e61e:	9304      	str	r3, [sp, #16]
 800e620:	46a2      	mov	sl, r4
 800e622:	e7d2      	b.n	800e5ca <_vfiprintf_r+0xe2>
 800e624:	9b03      	ldr	r3, [sp, #12]
 800e626:	1d19      	adds	r1, r3, #4
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	9103      	str	r1, [sp, #12]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	bfbb      	ittet	lt
 800e630:	425b      	neglt	r3, r3
 800e632:	f042 0202 	orrlt.w	r2, r2, #2
 800e636:	9307      	strge	r3, [sp, #28]
 800e638:	9307      	strlt	r3, [sp, #28]
 800e63a:	bfb8      	it	lt
 800e63c:	9204      	strlt	r2, [sp, #16]
 800e63e:	7823      	ldrb	r3, [r4, #0]
 800e640:	2b2e      	cmp	r3, #46	; 0x2e
 800e642:	d10c      	bne.n	800e65e <_vfiprintf_r+0x176>
 800e644:	7863      	ldrb	r3, [r4, #1]
 800e646:	2b2a      	cmp	r3, #42	; 0x2a
 800e648:	d135      	bne.n	800e6b6 <_vfiprintf_r+0x1ce>
 800e64a:	9b03      	ldr	r3, [sp, #12]
 800e64c:	1d1a      	adds	r2, r3, #4
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	9203      	str	r2, [sp, #12]
 800e652:	2b00      	cmp	r3, #0
 800e654:	bfb8      	it	lt
 800e656:	f04f 33ff 	movlt.w	r3, #4294967295
 800e65a:	3402      	adds	r4, #2
 800e65c:	9305      	str	r3, [sp, #20]
 800e65e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e744 <_vfiprintf_r+0x25c>
 800e662:	7821      	ldrb	r1, [r4, #0]
 800e664:	2203      	movs	r2, #3
 800e666:	4650      	mov	r0, sl
 800e668:	f7f1 fe42 	bl	80002f0 <memchr>
 800e66c:	b140      	cbz	r0, 800e680 <_vfiprintf_r+0x198>
 800e66e:	2340      	movs	r3, #64	; 0x40
 800e670:	eba0 000a 	sub.w	r0, r0, sl
 800e674:	fa03 f000 	lsl.w	r0, r3, r0
 800e678:	9b04      	ldr	r3, [sp, #16]
 800e67a:	4303      	orrs	r3, r0
 800e67c:	3401      	adds	r4, #1
 800e67e:	9304      	str	r3, [sp, #16]
 800e680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e684:	482c      	ldr	r0, [pc, #176]	; (800e738 <_vfiprintf_r+0x250>)
 800e686:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e68a:	2206      	movs	r2, #6
 800e68c:	f7f1 fe30 	bl	80002f0 <memchr>
 800e690:	2800      	cmp	r0, #0
 800e692:	d03f      	beq.n	800e714 <_vfiprintf_r+0x22c>
 800e694:	4b29      	ldr	r3, [pc, #164]	; (800e73c <_vfiprintf_r+0x254>)
 800e696:	bb1b      	cbnz	r3, 800e6e0 <_vfiprintf_r+0x1f8>
 800e698:	9b03      	ldr	r3, [sp, #12]
 800e69a:	3307      	adds	r3, #7
 800e69c:	f023 0307 	bic.w	r3, r3, #7
 800e6a0:	3308      	adds	r3, #8
 800e6a2:	9303      	str	r3, [sp, #12]
 800e6a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6a6:	443b      	add	r3, r7
 800e6a8:	9309      	str	r3, [sp, #36]	; 0x24
 800e6aa:	e767      	b.n	800e57c <_vfiprintf_r+0x94>
 800e6ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6b0:	460c      	mov	r4, r1
 800e6b2:	2001      	movs	r0, #1
 800e6b4:	e7a5      	b.n	800e602 <_vfiprintf_r+0x11a>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	3401      	adds	r4, #1
 800e6ba:	9305      	str	r3, [sp, #20]
 800e6bc:	4619      	mov	r1, r3
 800e6be:	f04f 0c0a 	mov.w	ip, #10
 800e6c2:	4620      	mov	r0, r4
 800e6c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6c8:	3a30      	subs	r2, #48	; 0x30
 800e6ca:	2a09      	cmp	r2, #9
 800e6cc:	d903      	bls.n	800e6d6 <_vfiprintf_r+0x1ee>
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d0c5      	beq.n	800e65e <_vfiprintf_r+0x176>
 800e6d2:	9105      	str	r1, [sp, #20]
 800e6d4:	e7c3      	b.n	800e65e <_vfiprintf_r+0x176>
 800e6d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6da:	4604      	mov	r4, r0
 800e6dc:	2301      	movs	r3, #1
 800e6de:	e7f0      	b.n	800e6c2 <_vfiprintf_r+0x1da>
 800e6e0:	ab03      	add	r3, sp, #12
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	462a      	mov	r2, r5
 800e6e6:	4b16      	ldr	r3, [pc, #88]	; (800e740 <_vfiprintf_r+0x258>)
 800e6e8:	a904      	add	r1, sp, #16
 800e6ea:	4630      	mov	r0, r6
 800e6ec:	f7fe f860 	bl	800c7b0 <_printf_float>
 800e6f0:	4607      	mov	r7, r0
 800e6f2:	1c78      	adds	r0, r7, #1
 800e6f4:	d1d6      	bne.n	800e6a4 <_vfiprintf_r+0x1bc>
 800e6f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e6f8:	07d9      	lsls	r1, r3, #31
 800e6fa:	d405      	bmi.n	800e708 <_vfiprintf_r+0x220>
 800e6fc:	89ab      	ldrh	r3, [r5, #12]
 800e6fe:	059a      	lsls	r2, r3, #22
 800e700:	d402      	bmi.n	800e708 <_vfiprintf_r+0x220>
 800e702:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e704:	f000 faaf 	bl	800ec66 <__retarget_lock_release_recursive>
 800e708:	89ab      	ldrh	r3, [r5, #12]
 800e70a:	065b      	lsls	r3, r3, #25
 800e70c:	f53f af12 	bmi.w	800e534 <_vfiprintf_r+0x4c>
 800e710:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e712:	e711      	b.n	800e538 <_vfiprintf_r+0x50>
 800e714:	ab03      	add	r3, sp, #12
 800e716:	9300      	str	r3, [sp, #0]
 800e718:	462a      	mov	r2, r5
 800e71a:	4b09      	ldr	r3, [pc, #36]	; (800e740 <_vfiprintf_r+0x258>)
 800e71c:	a904      	add	r1, sp, #16
 800e71e:	4630      	mov	r0, r6
 800e720:	f7fe fad2 	bl	800ccc8 <_printf_i>
 800e724:	e7e4      	b.n	800e6f0 <_vfiprintf_r+0x208>
 800e726:	bf00      	nop
 800e728:	0800f4e4 	.word	0x0800f4e4
 800e72c:	0800f504 	.word	0x0800f504
 800e730:	0800f4c4 	.word	0x0800f4c4
 800e734:	0800f3b2 	.word	0x0800f3b2
 800e738:	0800f3bc 	.word	0x0800f3bc
 800e73c:	0800c7b1 	.word	0x0800c7b1
 800e740:	0800e4c3 	.word	0x0800e4c3
 800e744:	0800f3b8 	.word	0x0800f3b8

0800e748 <__swbuf_r>:
 800e748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e74a:	460e      	mov	r6, r1
 800e74c:	4614      	mov	r4, r2
 800e74e:	4605      	mov	r5, r0
 800e750:	b118      	cbz	r0, 800e75a <__swbuf_r+0x12>
 800e752:	6983      	ldr	r3, [r0, #24]
 800e754:	b90b      	cbnz	r3, 800e75a <__swbuf_r+0x12>
 800e756:	f000 f9e7 	bl	800eb28 <__sinit>
 800e75a:	4b21      	ldr	r3, [pc, #132]	; (800e7e0 <__swbuf_r+0x98>)
 800e75c:	429c      	cmp	r4, r3
 800e75e:	d12b      	bne.n	800e7b8 <__swbuf_r+0x70>
 800e760:	686c      	ldr	r4, [r5, #4]
 800e762:	69a3      	ldr	r3, [r4, #24]
 800e764:	60a3      	str	r3, [r4, #8]
 800e766:	89a3      	ldrh	r3, [r4, #12]
 800e768:	071a      	lsls	r2, r3, #28
 800e76a:	d52f      	bpl.n	800e7cc <__swbuf_r+0x84>
 800e76c:	6923      	ldr	r3, [r4, #16]
 800e76e:	b36b      	cbz	r3, 800e7cc <__swbuf_r+0x84>
 800e770:	6923      	ldr	r3, [r4, #16]
 800e772:	6820      	ldr	r0, [r4, #0]
 800e774:	1ac0      	subs	r0, r0, r3
 800e776:	6963      	ldr	r3, [r4, #20]
 800e778:	b2f6      	uxtb	r6, r6
 800e77a:	4283      	cmp	r3, r0
 800e77c:	4637      	mov	r7, r6
 800e77e:	dc04      	bgt.n	800e78a <__swbuf_r+0x42>
 800e780:	4621      	mov	r1, r4
 800e782:	4628      	mov	r0, r5
 800e784:	f000 f93c 	bl	800ea00 <_fflush_r>
 800e788:	bb30      	cbnz	r0, 800e7d8 <__swbuf_r+0x90>
 800e78a:	68a3      	ldr	r3, [r4, #8]
 800e78c:	3b01      	subs	r3, #1
 800e78e:	60a3      	str	r3, [r4, #8]
 800e790:	6823      	ldr	r3, [r4, #0]
 800e792:	1c5a      	adds	r2, r3, #1
 800e794:	6022      	str	r2, [r4, #0]
 800e796:	701e      	strb	r6, [r3, #0]
 800e798:	6963      	ldr	r3, [r4, #20]
 800e79a:	3001      	adds	r0, #1
 800e79c:	4283      	cmp	r3, r0
 800e79e:	d004      	beq.n	800e7aa <__swbuf_r+0x62>
 800e7a0:	89a3      	ldrh	r3, [r4, #12]
 800e7a2:	07db      	lsls	r3, r3, #31
 800e7a4:	d506      	bpl.n	800e7b4 <__swbuf_r+0x6c>
 800e7a6:	2e0a      	cmp	r6, #10
 800e7a8:	d104      	bne.n	800e7b4 <__swbuf_r+0x6c>
 800e7aa:	4621      	mov	r1, r4
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	f000 f927 	bl	800ea00 <_fflush_r>
 800e7b2:	b988      	cbnz	r0, 800e7d8 <__swbuf_r+0x90>
 800e7b4:	4638      	mov	r0, r7
 800e7b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7b8:	4b0a      	ldr	r3, [pc, #40]	; (800e7e4 <__swbuf_r+0x9c>)
 800e7ba:	429c      	cmp	r4, r3
 800e7bc:	d101      	bne.n	800e7c2 <__swbuf_r+0x7a>
 800e7be:	68ac      	ldr	r4, [r5, #8]
 800e7c0:	e7cf      	b.n	800e762 <__swbuf_r+0x1a>
 800e7c2:	4b09      	ldr	r3, [pc, #36]	; (800e7e8 <__swbuf_r+0xa0>)
 800e7c4:	429c      	cmp	r4, r3
 800e7c6:	bf08      	it	eq
 800e7c8:	68ec      	ldreq	r4, [r5, #12]
 800e7ca:	e7ca      	b.n	800e762 <__swbuf_r+0x1a>
 800e7cc:	4621      	mov	r1, r4
 800e7ce:	4628      	mov	r0, r5
 800e7d0:	f000 f81a 	bl	800e808 <__swsetup_r>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	d0cb      	beq.n	800e770 <__swbuf_r+0x28>
 800e7d8:	f04f 37ff 	mov.w	r7, #4294967295
 800e7dc:	e7ea      	b.n	800e7b4 <__swbuf_r+0x6c>
 800e7de:	bf00      	nop
 800e7e0:	0800f4e4 	.word	0x0800f4e4
 800e7e4:	0800f504 	.word	0x0800f504
 800e7e8:	0800f4c4 	.word	0x0800f4c4

0800e7ec <__ascii_wctomb>:
 800e7ec:	b149      	cbz	r1, 800e802 <__ascii_wctomb+0x16>
 800e7ee:	2aff      	cmp	r2, #255	; 0xff
 800e7f0:	bf85      	ittet	hi
 800e7f2:	238a      	movhi	r3, #138	; 0x8a
 800e7f4:	6003      	strhi	r3, [r0, #0]
 800e7f6:	700a      	strbls	r2, [r1, #0]
 800e7f8:	f04f 30ff 	movhi.w	r0, #4294967295
 800e7fc:	bf98      	it	ls
 800e7fe:	2001      	movls	r0, #1
 800e800:	4770      	bx	lr
 800e802:	4608      	mov	r0, r1
 800e804:	4770      	bx	lr
	...

0800e808 <__swsetup_r>:
 800e808:	4b32      	ldr	r3, [pc, #200]	; (800e8d4 <__swsetup_r+0xcc>)
 800e80a:	b570      	push	{r4, r5, r6, lr}
 800e80c:	681d      	ldr	r5, [r3, #0]
 800e80e:	4606      	mov	r6, r0
 800e810:	460c      	mov	r4, r1
 800e812:	b125      	cbz	r5, 800e81e <__swsetup_r+0x16>
 800e814:	69ab      	ldr	r3, [r5, #24]
 800e816:	b913      	cbnz	r3, 800e81e <__swsetup_r+0x16>
 800e818:	4628      	mov	r0, r5
 800e81a:	f000 f985 	bl	800eb28 <__sinit>
 800e81e:	4b2e      	ldr	r3, [pc, #184]	; (800e8d8 <__swsetup_r+0xd0>)
 800e820:	429c      	cmp	r4, r3
 800e822:	d10f      	bne.n	800e844 <__swsetup_r+0x3c>
 800e824:	686c      	ldr	r4, [r5, #4]
 800e826:	89a3      	ldrh	r3, [r4, #12]
 800e828:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e82c:	0719      	lsls	r1, r3, #28
 800e82e:	d42c      	bmi.n	800e88a <__swsetup_r+0x82>
 800e830:	06dd      	lsls	r5, r3, #27
 800e832:	d411      	bmi.n	800e858 <__swsetup_r+0x50>
 800e834:	2309      	movs	r3, #9
 800e836:	6033      	str	r3, [r6, #0]
 800e838:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e83c:	81a3      	strh	r3, [r4, #12]
 800e83e:	f04f 30ff 	mov.w	r0, #4294967295
 800e842:	e03e      	b.n	800e8c2 <__swsetup_r+0xba>
 800e844:	4b25      	ldr	r3, [pc, #148]	; (800e8dc <__swsetup_r+0xd4>)
 800e846:	429c      	cmp	r4, r3
 800e848:	d101      	bne.n	800e84e <__swsetup_r+0x46>
 800e84a:	68ac      	ldr	r4, [r5, #8]
 800e84c:	e7eb      	b.n	800e826 <__swsetup_r+0x1e>
 800e84e:	4b24      	ldr	r3, [pc, #144]	; (800e8e0 <__swsetup_r+0xd8>)
 800e850:	429c      	cmp	r4, r3
 800e852:	bf08      	it	eq
 800e854:	68ec      	ldreq	r4, [r5, #12]
 800e856:	e7e6      	b.n	800e826 <__swsetup_r+0x1e>
 800e858:	0758      	lsls	r0, r3, #29
 800e85a:	d512      	bpl.n	800e882 <__swsetup_r+0x7a>
 800e85c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e85e:	b141      	cbz	r1, 800e872 <__swsetup_r+0x6a>
 800e860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e864:	4299      	cmp	r1, r3
 800e866:	d002      	beq.n	800e86e <__swsetup_r+0x66>
 800e868:	4630      	mov	r0, r6
 800e86a:	f7ff fd0b 	bl	800e284 <_free_r>
 800e86e:	2300      	movs	r3, #0
 800e870:	6363      	str	r3, [r4, #52]	; 0x34
 800e872:	89a3      	ldrh	r3, [r4, #12]
 800e874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e878:	81a3      	strh	r3, [r4, #12]
 800e87a:	2300      	movs	r3, #0
 800e87c:	6063      	str	r3, [r4, #4]
 800e87e:	6923      	ldr	r3, [r4, #16]
 800e880:	6023      	str	r3, [r4, #0]
 800e882:	89a3      	ldrh	r3, [r4, #12]
 800e884:	f043 0308 	orr.w	r3, r3, #8
 800e888:	81a3      	strh	r3, [r4, #12]
 800e88a:	6923      	ldr	r3, [r4, #16]
 800e88c:	b94b      	cbnz	r3, 800e8a2 <__swsetup_r+0x9a>
 800e88e:	89a3      	ldrh	r3, [r4, #12]
 800e890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e898:	d003      	beq.n	800e8a2 <__swsetup_r+0x9a>
 800e89a:	4621      	mov	r1, r4
 800e89c:	4630      	mov	r0, r6
 800e89e:	f000 fa07 	bl	800ecb0 <__smakebuf_r>
 800e8a2:	89a0      	ldrh	r0, [r4, #12]
 800e8a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8a8:	f010 0301 	ands.w	r3, r0, #1
 800e8ac:	d00a      	beq.n	800e8c4 <__swsetup_r+0xbc>
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	60a3      	str	r3, [r4, #8]
 800e8b2:	6963      	ldr	r3, [r4, #20]
 800e8b4:	425b      	negs	r3, r3
 800e8b6:	61a3      	str	r3, [r4, #24]
 800e8b8:	6923      	ldr	r3, [r4, #16]
 800e8ba:	b943      	cbnz	r3, 800e8ce <__swsetup_r+0xc6>
 800e8bc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e8c0:	d1ba      	bne.n	800e838 <__swsetup_r+0x30>
 800e8c2:	bd70      	pop	{r4, r5, r6, pc}
 800e8c4:	0781      	lsls	r1, r0, #30
 800e8c6:	bf58      	it	pl
 800e8c8:	6963      	ldrpl	r3, [r4, #20]
 800e8ca:	60a3      	str	r3, [r4, #8]
 800e8cc:	e7f4      	b.n	800e8b8 <__swsetup_r+0xb0>
 800e8ce:	2000      	movs	r0, #0
 800e8d0:	e7f7      	b.n	800e8c2 <__swsetup_r+0xba>
 800e8d2:	bf00      	nop
 800e8d4:	24000020 	.word	0x24000020
 800e8d8:	0800f4e4 	.word	0x0800f4e4
 800e8dc:	0800f504 	.word	0x0800f504
 800e8e0:	0800f4c4 	.word	0x0800f4c4

0800e8e4 <abort>:
 800e8e4:	b508      	push	{r3, lr}
 800e8e6:	2006      	movs	r0, #6
 800e8e8:	f000 fa4a 	bl	800ed80 <raise>
 800e8ec:	2001      	movs	r0, #1
 800e8ee:	f7f4 fab5 	bl	8002e5c <_exit>
	...

0800e8f4 <__sflush_r>:
 800e8f4:	898a      	ldrh	r2, [r1, #12]
 800e8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8fa:	4605      	mov	r5, r0
 800e8fc:	0710      	lsls	r0, r2, #28
 800e8fe:	460c      	mov	r4, r1
 800e900:	d458      	bmi.n	800e9b4 <__sflush_r+0xc0>
 800e902:	684b      	ldr	r3, [r1, #4]
 800e904:	2b00      	cmp	r3, #0
 800e906:	dc05      	bgt.n	800e914 <__sflush_r+0x20>
 800e908:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	dc02      	bgt.n	800e914 <__sflush_r+0x20>
 800e90e:	2000      	movs	r0, #0
 800e910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e914:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e916:	2e00      	cmp	r6, #0
 800e918:	d0f9      	beq.n	800e90e <__sflush_r+0x1a>
 800e91a:	2300      	movs	r3, #0
 800e91c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e920:	682f      	ldr	r7, [r5, #0]
 800e922:	602b      	str	r3, [r5, #0]
 800e924:	d032      	beq.n	800e98c <__sflush_r+0x98>
 800e926:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e928:	89a3      	ldrh	r3, [r4, #12]
 800e92a:	075a      	lsls	r2, r3, #29
 800e92c:	d505      	bpl.n	800e93a <__sflush_r+0x46>
 800e92e:	6863      	ldr	r3, [r4, #4]
 800e930:	1ac0      	subs	r0, r0, r3
 800e932:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e934:	b10b      	cbz	r3, 800e93a <__sflush_r+0x46>
 800e936:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e938:	1ac0      	subs	r0, r0, r3
 800e93a:	2300      	movs	r3, #0
 800e93c:	4602      	mov	r2, r0
 800e93e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e940:	6a21      	ldr	r1, [r4, #32]
 800e942:	4628      	mov	r0, r5
 800e944:	47b0      	blx	r6
 800e946:	1c43      	adds	r3, r0, #1
 800e948:	89a3      	ldrh	r3, [r4, #12]
 800e94a:	d106      	bne.n	800e95a <__sflush_r+0x66>
 800e94c:	6829      	ldr	r1, [r5, #0]
 800e94e:	291d      	cmp	r1, #29
 800e950:	d82c      	bhi.n	800e9ac <__sflush_r+0xb8>
 800e952:	4a2a      	ldr	r2, [pc, #168]	; (800e9fc <__sflush_r+0x108>)
 800e954:	40ca      	lsrs	r2, r1
 800e956:	07d6      	lsls	r6, r2, #31
 800e958:	d528      	bpl.n	800e9ac <__sflush_r+0xb8>
 800e95a:	2200      	movs	r2, #0
 800e95c:	6062      	str	r2, [r4, #4]
 800e95e:	04d9      	lsls	r1, r3, #19
 800e960:	6922      	ldr	r2, [r4, #16]
 800e962:	6022      	str	r2, [r4, #0]
 800e964:	d504      	bpl.n	800e970 <__sflush_r+0x7c>
 800e966:	1c42      	adds	r2, r0, #1
 800e968:	d101      	bne.n	800e96e <__sflush_r+0x7a>
 800e96a:	682b      	ldr	r3, [r5, #0]
 800e96c:	b903      	cbnz	r3, 800e970 <__sflush_r+0x7c>
 800e96e:	6560      	str	r0, [r4, #84]	; 0x54
 800e970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e972:	602f      	str	r7, [r5, #0]
 800e974:	2900      	cmp	r1, #0
 800e976:	d0ca      	beq.n	800e90e <__sflush_r+0x1a>
 800e978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e97c:	4299      	cmp	r1, r3
 800e97e:	d002      	beq.n	800e986 <__sflush_r+0x92>
 800e980:	4628      	mov	r0, r5
 800e982:	f7ff fc7f 	bl	800e284 <_free_r>
 800e986:	2000      	movs	r0, #0
 800e988:	6360      	str	r0, [r4, #52]	; 0x34
 800e98a:	e7c1      	b.n	800e910 <__sflush_r+0x1c>
 800e98c:	6a21      	ldr	r1, [r4, #32]
 800e98e:	2301      	movs	r3, #1
 800e990:	4628      	mov	r0, r5
 800e992:	47b0      	blx	r6
 800e994:	1c41      	adds	r1, r0, #1
 800e996:	d1c7      	bne.n	800e928 <__sflush_r+0x34>
 800e998:	682b      	ldr	r3, [r5, #0]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d0c4      	beq.n	800e928 <__sflush_r+0x34>
 800e99e:	2b1d      	cmp	r3, #29
 800e9a0:	d001      	beq.n	800e9a6 <__sflush_r+0xb2>
 800e9a2:	2b16      	cmp	r3, #22
 800e9a4:	d101      	bne.n	800e9aa <__sflush_r+0xb6>
 800e9a6:	602f      	str	r7, [r5, #0]
 800e9a8:	e7b1      	b.n	800e90e <__sflush_r+0x1a>
 800e9aa:	89a3      	ldrh	r3, [r4, #12]
 800e9ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9b0:	81a3      	strh	r3, [r4, #12]
 800e9b2:	e7ad      	b.n	800e910 <__sflush_r+0x1c>
 800e9b4:	690f      	ldr	r7, [r1, #16]
 800e9b6:	2f00      	cmp	r7, #0
 800e9b8:	d0a9      	beq.n	800e90e <__sflush_r+0x1a>
 800e9ba:	0793      	lsls	r3, r2, #30
 800e9bc:	680e      	ldr	r6, [r1, #0]
 800e9be:	bf08      	it	eq
 800e9c0:	694b      	ldreq	r3, [r1, #20]
 800e9c2:	600f      	str	r7, [r1, #0]
 800e9c4:	bf18      	it	ne
 800e9c6:	2300      	movne	r3, #0
 800e9c8:	eba6 0807 	sub.w	r8, r6, r7
 800e9cc:	608b      	str	r3, [r1, #8]
 800e9ce:	f1b8 0f00 	cmp.w	r8, #0
 800e9d2:	dd9c      	ble.n	800e90e <__sflush_r+0x1a>
 800e9d4:	6a21      	ldr	r1, [r4, #32]
 800e9d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e9d8:	4643      	mov	r3, r8
 800e9da:	463a      	mov	r2, r7
 800e9dc:	4628      	mov	r0, r5
 800e9de:	47b0      	blx	r6
 800e9e0:	2800      	cmp	r0, #0
 800e9e2:	dc06      	bgt.n	800e9f2 <__sflush_r+0xfe>
 800e9e4:	89a3      	ldrh	r3, [r4, #12]
 800e9e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e9ea:	81a3      	strh	r3, [r4, #12]
 800e9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e9f0:	e78e      	b.n	800e910 <__sflush_r+0x1c>
 800e9f2:	4407      	add	r7, r0
 800e9f4:	eba8 0800 	sub.w	r8, r8, r0
 800e9f8:	e7e9      	b.n	800e9ce <__sflush_r+0xda>
 800e9fa:	bf00      	nop
 800e9fc:	20400001 	.word	0x20400001

0800ea00 <_fflush_r>:
 800ea00:	b538      	push	{r3, r4, r5, lr}
 800ea02:	690b      	ldr	r3, [r1, #16]
 800ea04:	4605      	mov	r5, r0
 800ea06:	460c      	mov	r4, r1
 800ea08:	b913      	cbnz	r3, 800ea10 <_fflush_r+0x10>
 800ea0a:	2500      	movs	r5, #0
 800ea0c:	4628      	mov	r0, r5
 800ea0e:	bd38      	pop	{r3, r4, r5, pc}
 800ea10:	b118      	cbz	r0, 800ea1a <_fflush_r+0x1a>
 800ea12:	6983      	ldr	r3, [r0, #24]
 800ea14:	b90b      	cbnz	r3, 800ea1a <_fflush_r+0x1a>
 800ea16:	f000 f887 	bl	800eb28 <__sinit>
 800ea1a:	4b14      	ldr	r3, [pc, #80]	; (800ea6c <_fflush_r+0x6c>)
 800ea1c:	429c      	cmp	r4, r3
 800ea1e:	d11b      	bne.n	800ea58 <_fflush_r+0x58>
 800ea20:	686c      	ldr	r4, [r5, #4]
 800ea22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d0ef      	beq.n	800ea0a <_fflush_r+0xa>
 800ea2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ea2c:	07d0      	lsls	r0, r2, #31
 800ea2e:	d404      	bmi.n	800ea3a <_fflush_r+0x3a>
 800ea30:	0599      	lsls	r1, r3, #22
 800ea32:	d402      	bmi.n	800ea3a <_fflush_r+0x3a>
 800ea34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea36:	f000 f915 	bl	800ec64 <__retarget_lock_acquire_recursive>
 800ea3a:	4628      	mov	r0, r5
 800ea3c:	4621      	mov	r1, r4
 800ea3e:	f7ff ff59 	bl	800e8f4 <__sflush_r>
 800ea42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ea44:	07da      	lsls	r2, r3, #31
 800ea46:	4605      	mov	r5, r0
 800ea48:	d4e0      	bmi.n	800ea0c <_fflush_r+0xc>
 800ea4a:	89a3      	ldrh	r3, [r4, #12]
 800ea4c:	059b      	lsls	r3, r3, #22
 800ea4e:	d4dd      	bmi.n	800ea0c <_fflush_r+0xc>
 800ea50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ea52:	f000 f908 	bl	800ec66 <__retarget_lock_release_recursive>
 800ea56:	e7d9      	b.n	800ea0c <_fflush_r+0xc>
 800ea58:	4b05      	ldr	r3, [pc, #20]	; (800ea70 <_fflush_r+0x70>)
 800ea5a:	429c      	cmp	r4, r3
 800ea5c:	d101      	bne.n	800ea62 <_fflush_r+0x62>
 800ea5e:	68ac      	ldr	r4, [r5, #8]
 800ea60:	e7df      	b.n	800ea22 <_fflush_r+0x22>
 800ea62:	4b04      	ldr	r3, [pc, #16]	; (800ea74 <_fflush_r+0x74>)
 800ea64:	429c      	cmp	r4, r3
 800ea66:	bf08      	it	eq
 800ea68:	68ec      	ldreq	r4, [r5, #12]
 800ea6a:	e7da      	b.n	800ea22 <_fflush_r+0x22>
 800ea6c:	0800f4e4 	.word	0x0800f4e4
 800ea70:	0800f504 	.word	0x0800f504
 800ea74:	0800f4c4 	.word	0x0800f4c4

0800ea78 <std>:
 800ea78:	2300      	movs	r3, #0
 800ea7a:	b510      	push	{r4, lr}
 800ea7c:	4604      	mov	r4, r0
 800ea7e:	e9c0 3300 	strd	r3, r3, [r0]
 800ea82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ea86:	6083      	str	r3, [r0, #8]
 800ea88:	8181      	strh	r1, [r0, #12]
 800ea8a:	6643      	str	r3, [r0, #100]	; 0x64
 800ea8c:	81c2      	strh	r2, [r0, #14]
 800ea8e:	6183      	str	r3, [r0, #24]
 800ea90:	4619      	mov	r1, r3
 800ea92:	2208      	movs	r2, #8
 800ea94:	305c      	adds	r0, #92	; 0x5c
 800ea96:	f7fd fdf3 	bl	800c680 <memset>
 800ea9a:	4b05      	ldr	r3, [pc, #20]	; (800eab0 <std+0x38>)
 800ea9c:	6263      	str	r3, [r4, #36]	; 0x24
 800ea9e:	4b05      	ldr	r3, [pc, #20]	; (800eab4 <std+0x3c>)
 800eaa0:	62a3      	str	r3, [r4, #40]	; 0x28
 800eaa2:	4b05      	ldr	r3, [pc, #20]	; (800eab8 <std+0x40>)
 800eaa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eaa6:	4b05      	ldr	r3, [pc, #20]	; (800eabc <std+0x44>)
 800eaa8:	6224      	str	r4, [r4, #32]
 800eaaa:	6323      	str	r3, [r4, #48]	; 0x30
 800eaac:	bd10      	pop	{r4, pc}
 800eaae:	bf00      	nop
 800eab0:	0800edb9 	.word	0x0800edb9
 800eab4:	0800eddb 	.word	0x0800eddb
 800eab8:	0800ee13 	.word	0x0800ee13
 800eabc:	0800ee37 	.word	0x0800ee37

0800eac0 <_cleanup_r>:
 800eac0:	4901      	ldr	r1, [pc, #4]	; (800eac8 <_cleanup_r+0x8>)
 800eac2:	f000 b8af 	b.w	800ec24 <_fwalk_reent>
 800eac6:	bf00      	nop
 800eac8:	0800ea01 	.word	0x0800ea01

0800eacc <__sfmoreglue>:
 800eacc:	b570      	push	{r4, r5, r6, lr}
 800eace:	1e4a      	subs	r2, r1, #1
 800ead0:	2568      	movs	r5, #104	; 0x68
 800ead2:	4355      	muls	r5, r2
 800ead4:	460e      	mov	r6, r1
 800ead6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eada:	f7ff fc23 	bl	800e324 <_malloc_r>
 800eade:	4604      	mov	r4, r0
 800eae0:	b140      	cbz	r0, 800eaf4 <__sfmoreglue+0x28>
 800eae2:	2100      	movs	r1, #0
 800eae4:	e9c0 1600 	strd	r1, r6, [r0]
 800eae8:	300c      	adds	r0, #12
 800eaea:	60a0      	str	r0, [r4, #8]
 800eaec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eaf0:	f7fd fdc6 	bl	800c680 <memset>
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	bd70      	pop	{r4, r5, r6, pc}

0800eaf8 <__sfp_lock_acquire>:
 800eaf8:	4801      	ldr	r0, [pc, #4]	; (800eb00 <__sfp_lock_acquire+0x8>)
 800eafa:	f000 b8b3 	b.w	800ec64 <__retarget_lock_acquire_recursive>
 800eafe:	bf00      	nop
 800eb00:	24000a18 	.word	0x24000a18

0800eb04 <__sfp_lock_release>:
 800eb04:	4801      	ldr	r0, [pc, #4]	; (800eb0c <__sfp_lock_release+0x8>)
 800eb06:	f000 b8ae 	b.w	800ec66 <__retarget_lock_release_recursive>
 800eb0a:	bf00      	nop
 800eb0c:	24000a18 	.word	0x24000a18

0800eb10 <__sinit_lock_acquire>:
 800eb10:	4801      	ldr	r0, [pc, #4]	; (800eb18 <__sinit_lock_acquire+0x8>)
 800eb12:	f000 b8a7 	b.w	800ec64 <__retarget_lock_acquire_recursive>
 800eb16:	bf00      	nop
 800eb18:	24000a13 	.word	0x24000a13

0800eb1c <__sinit_lock_release>:
 800eb1c:	4801      	ldr	r0, [pc, #4]	; (800eb24 <__sinit_lock_release+0x8>)
 800eb1e:	f000 b8a2 	b.w	800ec66 <__retarget_lock_release_recursive>
 800eb22:	bf00      	nop
 800eb24:	24000a13 	.word	0x24000a13

0800eb28 <__sinit>:
 800eb28:	b510      	push	{r4, lr}
 800eb2a:	4604      	mov	r4, r0
 800eb2c:	f7ff fff0 	bl	800eb10 <__sinit_lock_acquire>
 800eb30:	69a3      	ldr	r3, [r4, #24]
 800eb32:	b11b      	cbz	r3, 800eb3c <__sinit+0x14>
 800eb34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eb38:	f7ff bff0 	b.w	800eb1c <__sinit_lock_release>
 800eb3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eb40:	6523      	str	r3, [r4, #80]	; 0x50
 800eb42:	4b13      	ldr	r3, [pc, #76]	; (800eb90 <__sinit+0x68>)
 800eb44:	4a13      	ldr	r2, [pc, #76]	; (800eb94 <__sinit+0x6c>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	62a2      	str	r2, [r4, #40]	; 0x28
 800eb4a:	42a3      	cmp	r3, r4
 800eb4c:	bf04      	itt	eq
 800eb4e:	2301      	moveq	r3, #1
 800eb50:	61a3      	streq	r3, [r4, #24]
 800eb52:	4620      	mov	r0, r4
 800eb54:	f000 f820 	bl	800eb98 <__sfp>
 800eb58:	6060      	str	r0, [r4, #4]
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	f000 f81c 	bl	800eb98 <__sfp>
 800eb60:	60a0      	str	r0, [r4, #8]
 800eb62:	4620      	mov	r0, r4
 800eb64:	f000 f818 	bl	800eb98 <__sfp>
 800eb68:	2200      	movs	r2, #0
 800eb6a:	60e0      	str	r0, [r4, #12]
 800eb6c:	2104      	movs	r1, #4
 800eb6e:	6860      	ldr	r0, [r4, #4]
 800eb70:	f7ff ff82 	bl	800ea78 <std>
 800eb74:	68a0      	ldr	r0, [r4, #8]
 800eb76:	2201      	movs	r2, #1
 800eb78:	2109      	movs	r1, #9
 800eb7a:	f7ff ff7d 	bl	800ea78 <std>
 800eb7e:	68e0      	ldr	r0, [r4, #12]
 800eb80:	2202      	movs	r2, #2
 800eb82:	2112      	movs	r1, #18
 800eb84:	f7ff ff78 	bl	800ea78 <std>
 800eb88:	2301      	movs	r3, #1
 800eb8a:	61a3      	str	r3, [r4, #24]
 800eb8c:	e7d2      	b.n	800eb34 <__sinit+0xc>
 800eb8e:	bf00      	nop
 800eb90:	0800f140 	.word	0x0800f140
 800eb94:	0800eac1 	.word	0x0800eac1

0800eb98 <__sfp>:
 800eb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb9a:	4607      	mov	r7, r0
 800eb9c:	f7ff ffac 	bl	800eaf8 <__sfp_lock_acquire>
 800eba0:	4b1e      	ldr	r3, [pc, #120]	; (800ec1c <__sfp+0x84>)
 800eba2:	681e      	ldr	r6, [r3, #0]
 800eba4:	69b3      	ldr	r3, [r6, #24]
 800eba6:	b913      	cbnz	r3, 800ebae <__sfp+0x16>
 800eba8:	4630      	mov	r0, r6
 800ebaa:	f7ff ffbd 	bl	800eb28 <__sinit>
 800ebae:	3648      	adds	r6, #72	; 0x48
 800ebb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ebb4:	3b01      	subs	r3, #1
 800ebb6:	d503      	bpl.n	800ebc0 <__sfp+0x28>
 800ebb8:	6833      	ldr	r3, [r6, #0]
 800ebba:	b30b      	cbz	r3, 800ec00 <__sfp+0x68>
 800ebbc:	6836      	ldr	r6, [r6, #0]
 800ebbe:	e7f7      	b.n	800ebb0 <__sfp+0x18>
 800ebc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ebc4:	b9d5      	cbnz	r5, 800ebfc <__sfp+0x64>
 800ebc6:	4b16      	ldr	r3, [pc, #88]	; (800ec20 <__sfp+0x88>)
 800ebc8:	60e3      	str	r3, [r4, #12]
 800ebca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ebce:	6665      	str	r5, [r4, #100]	; 0x64
 800ebd0:	f000 f847 	bl	800ec62 <__retarget_lock_init_recursive>
 800ebd4:	f7ff ff96 	bl	800eb04 <__sfp_lock_release>
 800ebd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ebdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ebe0:	6025      	str	r5, [r4, #0]
 800ebe2:	61a5      	str	r5, [r4, #24]
 800ebe4:	2208      	movs	r2, #8
 800ebe6:	4629      	mov	r1, r5
 800ebe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ebec:	f7fd fd48 	bl	800c680 <memset>
 800ebf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ebf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ebf8:	4620      	mov	r0, r4
 800ebfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ebfc:	3468      	adds	r4, #104	; 0x68
 800ebfe:	e7d9      	b.n	800ebb4 <__sfp+0x1c>
 800ec00:	2104      	movs	r1, #4
 800ec02:	4638      	mov	r0, r7
 800ec04:	f7ff ff62 	bl	800eacc <__sfmoreglue>
 800ec08:	4604      	mov	r4, r0
 800ec0a:	6030      	str	r0, [r6, #0]
 800ec0c:	2800      	cmp	r0, #0
 800ec0e:	d1d5      	bne.n	800ebbc <__sfp+0x24>
 800ec10:	f7ff ff78 	bl	800eb04 <__sfp_lock_release>
 800ec14:	230c      	movs	r3, #12
 800ec16:	603b      	str	r3, [r7, #0]
 800ec18:	e7ee      	b.n	800ebf8 <__sfp+0x60>
 800ec1a:	bf00      	nop
 800ec1c:	0800f140 	.word	0x0800f140
 800ec20:	ffff0001 	.word	0xffff0001

0800ec24 <_fwalk_reent>:
 800ec24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec28:	4606      	mov	r6, r0
 800ec2a:	4688      	mov	r8, r1
 800ec2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ec30:	2700      	movs	r7, #0
 800ec32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ec36:	f1b9 0901 	subs.w	r9, r9, #1
 800ec3a:	d505      	bpl.n	800ec48 <_fwalk_reent+0x24>
 800ec3c:	6824      	ldr	r4, [r4, #0]
 800ec3e:	2c00      	cmp	r4, #0
 800ec40:	d1f7      	bne.n	800ec32 <_fwalk_reent+0xe>
 800ec42:	4638      	mov	r0, r7
 800ec44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec48:	89ab      	ldrh	r3, [r5, #12]
 800ec4a:	2b01      	cmp	r3, #1
 800ec4c:	d907      	bls.n	800ec5e <_fwalk_reent+0x3a>
 800ec4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ec52:	3301      	adds	r3, #1
 800ec54:	d003      	beq.n	800ec5e <_fwalk_reent+0x3a>
 800ec56:	4629      	mov	r1, r5
 800ec58:	4630      	mov	r0, r6
 800ec5a:	47c0      	blx	r8
 800ec5c:	4307      	orrs	r7, r0
 800ec5e:	3568      	adds	r5, #104	; 0x68
 800ec60:	e7e9      	b.n	800ec36 <_fwalk_reent+0x12>

0800ec62 <__retarget_lock_init_recursive>:
 800ec62:	4770      	bx	lr

0800ec64 <__retarget_lock_acquire_recursive>:
 800ec64:	4770      	bx	lr

0800ec66 <__retarget_lock_release_recursive>:
 800ec66:	4770      	bx	lr

0800ec68 <__swhatbuf_r>:
 800ec68:	b570      	push	{r4, r5, r6, lr}
 800ec6a:	460e      	mov	r6, r1
 800ec6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec70:	2900      	cmp	r1, #0
 800ec72:	b096      	sub	sp, #88	; 0x58
 800ec74:	4614      	mov	r4, r2
 800ec76:	461d      	mov	r5, r3
 800ec78:	da07      	bge.n	800ec8a <__swhatbuf_r+0x22>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	602b      	str	r3, [r5, #0]
 800ec7e:	89b3      	ldrh	r3, [r6, #12]
 800ec80:	061a      	lsls	r2, r3, #24
 800ec82:	d410      	bmi.n	800eca6 <__swhatbuf_r+0x3e>
 800ec84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec88:	e00e      	b.n	800eca8 <__swhatbuf_r+0x40>
 800ec8a:	466a      	mov	r2, sp
 800ec8c:	f000 f8fa 	bl	800ee84 <_fstat_r>
 800ec90:	2800      	cmp	r0, #0
 800ec92:	dbf2      	blt.n	800ec7a <__swhatbuf_r+0x12>
 800ec94:	9a01      	ldr	r2, [sp, #4]
 800ec96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ec9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ec9e:	425a      	negs	r2, r3
 800eca0:	415a      	adcs	r2, r3
 800eca2:	602a      	str	r2, [r5, #0]
 800eca4:	e7ee      	b.n	800ec84 <__swhatbuf_r+0x1c>
 800eca6:	2340      	movs	r3, #64	; 0x40
 800eca8:	2000      	movs	r0, #0
 800ecaa:	6023      	str	r3, [r4, #0]
 800ecac:	b016      	add	sp, #88	; 0x58
 800ecae:	bd70      	pop	{r4, r5, r6, pc}

0800ecb0 <__smakebuf_r>:
 800ecb0:	898b      	ldrh	r3, [r1, #12]
 800ecb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ecb4:	079d      	lsls	r5, r3, #30
 800ecb6:	4606      	mov	r6, r0
 800ecb8:	460c      	mov	r4, r1
 800ecba:	d507      	bpl.n	800eccc <__smakebuf_r+0x1c>
 800ecbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ecc0:	6023      	str	r3, [r4, #0]
 800ecc2:	6123      	str	r3, [r4, #16]
 800ecc4:	2301      	movs	r3, #1
 800ecc6:	6163      	str	r3, [r4, #20]
 800ecc8:	b002      	add	sp, #8
 800ecca:	bd70      	pop	{r4, r5, r6, pc}
 800eccc:	ab01      	add	r3, sp, #4
 800ecce:	466a      	mov	r2, sp
 800ecd0:	f7ff ffca 	bl	800ec68 <__swhatbuf_r>
 800ecd4:	9900      	ldr	r1, [sp, #0]
 800ecd6:	4605      	mov	r5, r0
 800ecd8:	4630      	mov	r0, r6
 800ecda:	f7ff fb23 	bl	800e324 <_malloc_r>
 800ecde:	b948      	cbnz	r0, 800ecf4 <__smakebuf_r+0x44>
 800ece0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ece4:	059a      	lsls	r2, r3, #22
 800ece6:	d4ef      	bmi.n	800ecc8 <__smakebuf_r+0x18>
 800ece8:	f023 0303 	bic.w	r3, r3, #3
 800ecec:	f043 0302 	orr.w	r3, r3, #2
 800ecf0:	81a3      	strh	r3, [r4, #12]
 800ecf2:	e7e3      	b.n	800ecbc <__smakebuf_r+0xc>
 800ecf4:	4b0d      	ldr	r3, [pc, #52]	; (800ed2c <__smakebuf_r+0x7c>)
 800ecf6:	62b3      	str	r3, [r6, #40]	; 0x28
 800ecf8:	89a3      	ldrh	r3, [r4, #12]
 800ecfa:	6020      	str	r0, [r4, #0]
 800ecfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed00:	81a3      	strh	r3, [r4, #12]
 800ed02:	9b00      	ldr	r3, [sp, #0]
 800ed04:	6163      	str	r3, [r4, #20]
 800ed06:	9b01      	ldr	r3, [sp, #4]
 800ed08:	6120      	str	r0, [r4, #16]
 800ed0a:	b15b      	cbz	r3, 800ed24 <__smakebuf_r+0x74>
 800ed0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed10:	4630      	mov	r0, r6
 800ed12:	f000 f8c9 	bl	800eea8 <_isatty_r>
 800ed16:	b128      	cbz	r0, 800ed24 <__smakebuf_r+0x74>
 800ed18:	89a3      	ldrh	r3, [r4, #12]
 800ed1a:	f023 0303 	bic.w	r3, r3, #3
 800ed1e:	f043 0301 	orr.w	r3, r3, #1
 800ed22:	81a3      	strh	r3, [r4, #12]
 800ed24:	89a0      	ldrh	r0, [r4, #12]
 800ed26:	4305      	orrs	r5, r0
 800ed28:	81a5      	strh	r5, [r4, #12]
 800ed2a:	e7cd      	b.n	800ecc8 <__smakebuf_r+0x18>
 800ed2c:	0800eac1 	.word	0x0800eac1

0800ed30 <_raise_r>:
 800ed30:	291f      	cmp	r1, #31
 800ed32:	b538      	push	{r3, r4, r5, lr}
 800ed34:	4604      	mov	r4, r0
 800ed36:	460d      	mov	r5, r1
 800ed38:	d904      	bls.n	800ed44 <_raise_r+0x14>
 800ed3a:	2316      	movs	r3, #22
 800ed3c:	6003      	str	r3, [r0, #0]
 800ed3e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed42:	bd38      	pop	{r3, r4, r5, pc}
 800ed44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ed46:	b112      	cbz	r2, 800ed4e <_raise_r+0x1e>
 800ed48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed4c:	b94b      	cbnz	r3, 800ed62 <_raise_r+0x32>
 800ed4e:	4620      	mov	r0, r4
 800ed50:	f000 f830 	bl	800edb4 <_getpid_r>
 800ed54:	462a      	mov	r2, r5
 800ed56:	4601      	mov	r1, r0
 800ed58:	4620      	mov	r0, r4
 800ed5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed5e:	f000 b817 	b.w	800ed90 <_kill_r>
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d00a      	beq.n	800ed7c <_raise_r+0x4c>
 800ed66:	1c59      	adds	r1, r3, #1
 800ed68:	d103      	bne.n	800ed72 <_raise_r+0x42>
 800ed6a:	2316      	movs	r3, #22
 800ed6c:	6003      	str	r3, [r0, #0]
 800ed6e:	2001      	movs	r0, #1
 800ed70:	e7e7      	b.n	800ed42 <_raise_r+0x12>
 800ed72:	2400      	movs	r4, #0
 800ed74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ed78:	4628      	mov	r0, r5
 800ed7a:	4798      	blx	r3
 800ed7c:	2000      	movs	r0, #0
 800ed7e:	e7e0      	b.n	800ed42 <_raise_r+0x12>

0800ed80 <raise>:
 800ed80:	4b02      	ldr	r3, [pc, #8]	; (800ed8c <raise+0xc>)
 800ed82:	4601      	mov	r1, r0
 800ed84:	6818      	ldr	r0, [r3, #0]
 800ed86:	f7ff bfd3 	b.w	800ed30 <_raise_r>
 800ed8a:	bf00      	nop
 800ed8c:	24000020 	.word	0x24000020

0800ed90 <_kill_r>:
 800ed90:	b538      	push	{r3, r4, r5, lr}
 800ed92:	4d07      	ldr	r5, [pc, #28]	; (800edb0 <_kill_r+0x20>)
 800ed94:	2300      	movs	r3, #0
 800ed96:	4604      	mov	r4, r0
 800ed98:	4608      	mov	r0, r1
 800ed9a:	4611      	mov	r1, r2
 800ed9c:	602b      	str	r3, [r5, #0]
 800ed9e:	f7f4 f84d 	bl	8002e3c <_kill>
 800eda2:	1c43      	adds	r3, r0, #1
 800eda4:	d102      	bne.n	800edac <_kill_r+0x1c>
 800eda6:	682b      	ldr	r3, [r5, #0]
 800eda8:	b103      	cbz	r3, 800edac <_kill_r+0x1c>
 800edaa:	6023      	str	r3, [r4, #0]
 800edac:	bd38      	pop	{r3, r4, r5, pc}
 800edae:	bf00      	nop
 800edb0:	24000a0c 	.word	0x24000a0c

0800edb4 <_getpid_r>:
 800edb4:	f7f4 b83a 	b.w	8002e2c <_getpid>

0800edb8 <__sread>:
 800edb8:	b510      	push	{r4, lr}
 800edba:	460c      	mov	r4, r1
 800edbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edc0:	f000 f894 	bl	800eeec <_read_r>
 800edc4:	2800      	cmp	r0, #0
 800edc6:	bfab      	itete	ge
 800edc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800edca:	89a3      	ldrhlt	r3, [r4, #12]
 800edcc:	181b      	addge	r3, r3, r0
 800edce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800edd2:	bfac      	ite	ge
 800edd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800edd6:	81a3      	strhlt	r3, [r4, #12]
 800edd8:	bd10      	pop	{r4, pc}

0800edda <__swrite>:
 800edda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edde:	461f      	mov	r7, r3
 800ede0:	898b      	ldrh	r3, [r1, #12]
 800ede2:	05db      	lsls	r3, r3, #23
 800ede4:	4605      	mov	r5, r0
 800ede6:	460c      	mov	r4, r1
 800ede8:	4616      	mov	r6, r2
 800edea:	d505      	bpl.n	800edf8 <__swrite+0x1e>
 800edec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edf0:	2302      	movs	r3, #2
 800edf2:	2200      	movs	r2, #0
 800edf4:	f000 f868 	bl	800eec8 <_lseek_r>
 800edf8:	89a3      	ldrh	r3, [r4, #12]
 800edfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee02:	81a3      	strh	r3, [r4, #12]
 800ee04:	4632      	mov	r2, r6
 800ee06:	463b      	mov	r3, r7
 800ee08:	4628      	mov	r0, r5
 800ee0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0e:	f000 b817 	b.w	800ee40 <_write_r>

0800ee12 <__sseek>:
 800ee12:	b510      	push	{r4, lr}
 800ee14:	460c      	mov	r4, r1
 800ee16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee1a:	f000 f855 	bl	800eec8 <_lseek_r>
 800ee1e:	1c43      	adds	r3, r0, #1
 800ee20:	89a3      	ldrh	r3, [r4, #12]
 800ee22:	bf15      	itete	ne
 800ee24:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee2e:	81a3      	strheq	r3, [r4, #12]
 800ee30:	bf18      	it	ne
 800ee32:	81a3      	strhne	r3, [r4, #12]
 800ee34:	bd10      	pop	{r4, pc}

0800ee36 <__sclose>:
 800ee36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee3a:	f000 b813 	b.w	800ee64 <_close_r>
	...

0800ee40 <_write_r>:
 800ee40:	b538      	push	{r3, r4, r5, lr}
 800ee42:	4d07      	ldr	r5, [pc, #28]	; (800ee60 <_write_r+0x20>)
 800ee44:	4604      	mov	r4, r0
 800ee46:	4608      	mov	r0, r1
 800ee48:	4611      	mov	r1, r2
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	602a      	str	r2, [r5, #0]
 800ee4e:	461a      	mov	r2, r3
 800ee50:	f7f4 f82b 	bl	8002eaa <_write>
 800ee54:	1c43      	adds	r3, r0, #1
 800ee56:	d102      	bne.n	800ee5e <_write_r+0x1e>
 800ee58:	682b      	ldr	r3, [r5, #0]
 800ee5a:	b103      	cbz	r3, 800ee5e <_write_r+0x1e>
 800ee5c:	6023      	str	r3, [r4, #0]
 800ee5e:	bd38      	pop	{r3, r4, r5, pc}
 800ee60:	24000a0c 	.word	0x24000a0c

0800ee64 <_close_r>:
 800ee64:	b538      	push	{r3, r4, r5, lr}
 800ee66:	4d06      	ldr	r5, [pc, #24]	; (800ee80 <_close_r+0x1c>)
 800ee68:	2300      	movs	r3, #0
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	4608      	mov	r0, r1
 800ee6e:	602b      	str	r3, [r5, #0]
 800ee70:	f7f4 f837 	bl	8002ee2 <_close>
 800ee74:	1c43      	adds	r3, r0, #1
 800ee76:	d102      	bne.n	800ee7e <_close_r+0x1a>
 800ee78:	682b      	ldr	r3, [r5, #0]
 800ee7a:	b103      	cbz	r3, 800ee7e <_close_r+0x1a>
 800ee7c:	6023      	str	r3, [r4, #0]
 800ee7e:	bd38      	pop	{r3, r4, r5, pc}
 800ee80:	24000a0c 	.word	0x24000a0c

0800ee84 <_fstat_r>:
 800ee84:	b538      	push	{r3, r4, r5, lr}
 800ee86:	4d07      	ldr	r5, [pc, #28]	; (800eea4 <_fstat_r+0x20>)
 800ee88:	2300      	movs	r3, #0
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	4608      	mov	r0, r1
 800ee8e:	4611      	mov	r1, r2
 800ee90:	602b      	str	r3, [r5, #0]
 800ee92:	f7f4 f832 	bl	8002efa <_fstat>
 800ee96:	1c43      	adds	r3, r0, #1
 800ee98:	d102      	bne.n	800eea0 <_fstat_r+0x1c>
 800ee9a:	682b      	ldr	r3, [r5, #0]
 800ee9c:	b103      	cbz	r3, 800eea0 <_fstat_r+0x1c>
 800ee9e:	6023      	str	r3, [r4, #0]
 800eea0:	bd38      	pop	{r3, r4, r5, pc}
 800eea2:	bf00      	nop
 800eea4:	24000a0c 	.word	0x24000a0c

0800eea8 <_isatty_r>:
 800eea8:	b538      	push	{r3, r4, r5, lr}
 800eeaa:	4d06      	ldr	r5, [pc, #24]	; (800eec4 <_isatty_r+0x1c>)
 800eeac:	2300      	movs	r3, #0
 800eeae:	4604      	mov	r4, r0
 800eeb0:	4608      	mov	r0, r1
 800eeb2:	602b      	str	r3, [r5, #0]
 800eeb4:	f7f4 f831 	bl	8002f1a <_isatty>
 800eeb8:	1c43      	adds	r3, r0, #1
 800eeba:	d102      	bne.n	800eec2 <_isatty_r+0x1a>
 800eebc:	682b      	ldr	r3, [r5, #0]
 800eebe:	b103      	cbz	r3, 800eec2 <_isatty_r+0x1a>
 800eec0:	6023      	str	r3, [r4, #0]
 800eec2:	bd38      	pop	{r3, r4, r5, pc}
 800eec4:	24000a0c 	.word	0x24000a0c

0800eec8 <_lseek_r>:
 800eec8:	b538      	push	{r3, r4, r5, lr}
 800eeca:	4d07      	ldr	r5, [pc, #28]	; (800eee8 <_lseek_r+0x20>)
 800eecc:	4604      	mov	r4, r0
 800eece:	4608      	mov	r0, r1
 800eed0:	4611      	mov	r1, r2
 800eed2:	2200      	movs	r2, #0
 800eed4:	602a      	str	r2, [r5, #0]
 800eed6:	461a      	mov	r2, r3
 800eed8:	f7f4 f82a 	bl	8002f30 <_lseek>
 800eedc:	1c43      	adds	r3, r0, #1
 800eede:	d102      	bne.n	800eee6 <_lseek_r+0x1e>
 800eee0:	682b      	ldr	r3, [r5, #0]
 800eee2:	b103      	cbz	r3, 800eee6 <_lseek_r+0x1e>
 800eee4:	6023      	str	r3, [r4, #0]
 800eee6:	bd38      	pop	{r3, r4, r5, pc}
 800eee8:	24000a0c 	.word	0x24000a0c

0800eeec <_read_r>:
 800eeec:	b538      	push	{r3, r4, r5, lr}
 800eeee:	4d07      	ldr	r5, [pc, #28]	; (800ef0c <_read_r+0x20>)
 800eef0:	4604      	mov	r4, r0
 800eef2:	4608      	mov	r0, r1
 800eef4:	4611      	mov	r1, r2
 800eef6:	2200      	movs	r2, #0
 800eef8:	602a      	str	r2, [r5, #0]
 800eefa:	461a      	mov	r2, r3
 800eefc:	f7f3 ffb8 	bl	8002e70 <_read>
 800ef00:	1c43      	adds	r3, r0, #1
 800ef02:	d102      	bne.n	800ef0a <_read_r+0x1e>
 800ef04:	682b      	ldr	r3, [r5, #0]
 800ef06:	b103      	cbz	r3, 800ef0a <_read_r+0x1e>
 800ef08:	6023      	str	r3, [r4, #0]
 800ef0a:	bd38      	pop	{r3, r4, r5, pc}
 800ef0c:	24000a0c 	.word	0x24000a0c

0800ef10 <_init>:
 800ef10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef12:	bf00      	nop
 800ef14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef16:	bc08      	pop	{r3}
 800ef18:	469e      	mov	lr, r3
 800ef1a:	4770      	bx	lr

0800ef1c <_fini>:
 800ef1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef1e:	bf00      	nop
 800ef20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef22:	bc08      	pop	{r3}
 800ef24:	469e      	mov	lr, r3
 800ef26:	4770      	bx	lr
