
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012354  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e7c  080125f8  080125f8  000225f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014474  08014474  00024474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801447c  0801447c  0002447c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08014484  08014484  00024484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000021c  24000000  0801448c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000dd4  2400021c  080146a8  0003021c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000ff0  080146a8  00030ff0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003b5ae  00000000  00000000  0003024a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005749  00000000  00000000  0006b7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016b0  00000000  00000000  00070f48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001508  00000000  00000000  000725f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003e1f7  00000000  00000000  00073b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000229af  00000000  00000000  000b1cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016dc04  00000000  00000000  000d46a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002422aa  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007170  00000000  00000000  00242300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400021c 	.word	0x2400021c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080125dc 	.word	0x080125dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000220 	.word	0x24000220
 80002dc:	080125dc 	.word	0x080125dc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	; 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96e 	b.w	80009fc <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468c      	mov	ip, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	f040 8083 	bne.w	800084e <__udivmoddi4+0x116>
 8000748:	428a      	cmp	r2, r1
 800074a:	4617      	mov	r7, r2
 800074c:	d947      	bls.n	80007de <__udivmoddi4+0xa6>
 800074e:	fab2 f282 	clz	r2, r2
 8000752:	b142      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000754:	f1c2 0020 	rsb	r0, r2, #32
 8000758:	fa24 f000 	lsr.w	r0, r4, r0
 800075c:	4091      	lsls	r1, r2
 800075e:	4097      	lsls	r7, r2
 8000760:	ea40 0c01 	orr.w	ip, r0, r1
 8000764:	4094      	lsls	r4, r2
 8000766:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800076a:	0c23      	lsrs	r3, r4, #16
 800076c:	fbbc f6f8 	udiv	r6, ip, r8
 8000770:	fa1f fe87 	uxth.w	lr, r7
 8000774:	fb08 c116 	mls	r1, r8, r6, ip
 8000778:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077c:	fb06 f10e 	mul.w	r1, r6, lr
 8000780:	4299      	cmp	r1, r3
 8000782:	d909      	bls.n	8000798 <__udivmoddi4+0x60>
 8000784:	18fb      	adds	r3, r7, r3
 8000786:	f106 30ff 	add.w	r0, r6, #4294967295
 800078a:	f080 8119 	bcs.w	80009c0 <__udivmoddi4+0x288>
 800078e:	4299      	cmp	r1, r3
 8000790:	f240 8116 	bls.w	80009c0 <__udivmoddi4+0x288>
 8000794:	3e02      	subs	r6, #2
 8000796:	443b      	add	r3, r7
 8000798:	1a5b      	subs	r3, r3, r1
 800079a:	b2a4      	uxth	r4, r4
 800079c:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a0:	fb08 3310 	mls	r3, r8, r0, r3
 80007a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007ac:	45a6      	cmp	lr, r4
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x8c>
 80007b0:	193c      	adds	r4, r7, r4
 80007b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80007b6:	f080 8105 	bcs.w	80009c4 <__udivmoddi4+0x28c>
 80007ba:	45a6      	cmp	lr, r4
 80007bc:	f240 8102 	bls.w	80009c4 <__udivmoddi4+0x28c>
 80007c0:	3802      	subs	r0, #2
 80007c2:	443c      	add	r4, r7
 80007c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007c8:	eba4 040e 	sub.w	r4, r4, lr
 80007cc:	2600      	movs	r6, #0
 80007ce:	b11d      	cbz	r5, 80007d8 <__udivmoddi4+0xa0>
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	2300      	movs	r3, #0
 80007d4:	e9c5 4300 	strd	r4, r3, [r5]
 80007d8:	4631      	mov	r1, r6
 80007da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007de:	b902      	cbnz	r2, 80007e2 <__udivmoddi4+0xaa>
 80007e0:	deff      	udf	#255	; 0xff
 80007e2:	fab2 f282 	clz	r2, r2
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	d150      	bne.n	800088c <__udivmoddi4+0x154>
 80007ea:	1bcb      	subs	r3, r1, r7
 80007ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007f0:	fa1f f887 	uxth.w	r8, r7
 80007f4:	2601      	movs	r6, #1
 80007f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007fa:	0c21      	lsrs	r1, r4, #16
 80007fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000800:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000804:	fb08 f30c 	mul.w	r3, r8, ip
 8000808:	428b      	cmp	r3, r1
 800080a:	d907      	bls.n	800081c <__udivmoddi4+0xe4>
 800080c:	1879      	adds	r1, r7, r1
 800080e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000812:	d202      	bcs.n	800081a <__udivmoddi4+0xe2>
 8000814:	428b      	cmp	r3, r1
 8000816:	f200 80e9 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 800081a:	4684      	mov	ip, r0
 800081c:	1ac9      	subs	r1, r1, r3
 800081e:	b2a3      	uxth	r3, r4
 8000820:	fbb1 f0fe 	udiv	r0, r1, lr
 8000824:	fb0e 1110 	mls	r1, lr, r0, r1
 8000828:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800082c:	fb08 f800 	mul.w	r8, r8, r0
 8000830:	45a0      	cmp	r8, r4
 8000832:	d907      	bls.n	8000844 <__udivmoddi4+0x10c>
 8000834:	193c      	adds	r4, r7, r4
 8000836:	f100 33ff 	add.w	r3, r0, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x10a>
 800083c:	45a0      	cmp	r8, r4
 800083e:	f200 80d9 	bhi.w	80009f4 <__udivmoddi4+0x2bc>
 8000842:	4618      	mov	r0, r3
 8000844:	eba4 0408 	sub.w	r4, r4, r8
 8000848:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800084c:	e7bf      	b.n	80007ce <__udivmoddi4+0x96>
 800084e:	428b      	cmp	r3, r1
 8000850:	d909      	bls.n	8000866 <__udivmoddi4+0x12e>
 8000852:	2d00      	cmp	r5, #0
 8000854:	f000 80b1 	beq.w	80009ba <__udivmoddi4+0x282>
 8000858:	2600      	movs	r6, #0
 800085a:	e9c5 0100 	strd	r0, r1, [r5]
 800085e:	4630      	mov	r0, r6
 8000860:	4631      	mov	r1, r6
 8000862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000866:	fab3 f683 	clz	r6, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d14a      	bne.n	8000904 <__udivmoddi4+0x1cc>
 800086e:	428b      	cmp	r3, r1
 8000870:	d302      	bcc.n	8000878 <__udivmoddi4+0x140>
 8000872:	4282      	cmp	r2, r0
 8000874:	f200 80b8 	bhi.w	80009e8 <__udivmoddi4+0x2b0>
 8000878:	1a84      	subs	r4, r0, r2
 800087a:	eb61 0103 	sbc.w	r1, r1, r3
 800087e:	2001      	movs	r0, #1
 8000880:	468c      	mov	ip, r1
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0a8      	beq.n	80007d8 <__udivmoddi4+0xa0>
 8000886:	e9c5 4c00 	strd	r4, ip, [r5]
 800088a:	e7a5      	b.n	80007d8 <__udivmoddi4+0xa0>
 800088c:	f1c2 0320 	rsb	r3, r2, #32
 8000890:	fa20 f603 	lsr.w	r6, r0, r3
 8000894:	4097      	lsls	r7, r2
 8000896:	fa01 f002 	lsl.w	r0, r1, r2
 800089a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800089e:	40d9      	lsrs	r1, r3
 80008a0:	4330      	orrs	r0, r6
 80008a2:	0c03      	lsrs	r3, r0, #16
 80008a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80008a8:	fa1f f887 	uxth.w	r8, r7
 80008ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80008b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008b4:	fb06 f108 	mul.w	r1, r6, r8
 80008b8:	4299      	cmp	r1, r3
 80008ba:	fa04 f402 	lsl.w	r4, r4, r2
 80008be:	d909      	bls.n	80008d4 <__udivmoddi4+0x19c>
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80008c6:	f080 808d 	bcs.w	80009e4 <__udivmoddi4+0x2ac>
 80008ca:	4299      	cmp	r1, r3
 80008cc:	f240 808a 	bls.w	80009e4 <__udivmoddi4+0x2ac>
 80008d0:	3e02      	subs	r6, #2
 80008d2:	443b      	add	r3, r7
 80008d4:	1a5b      	subs	r3, r3, r1
 80008d6:	b281      	uxth	r1, r0
 80008d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80008e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e4:	fb00 f308 	mul.w	r3, r0, r8
 80008e8:	428b      	cmp	r3, r1
 80008ea:	d907      	bls.n	80008fc <__udivmoddi4+0x1c4>
 80008ec:	1879      	adds	r1, r7, r1
 80008ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80008f2:	d273      	bcs.n	80009dc <__udivmoddi4+0x2a4>
 80008f4:	428b      	cmp	r3, r1
 80008f6:	d971      	bls.n	80009dc <__udivmoddi4+0x2a4>
 80008f8:	3802      	subs	r0, #2
 80008fa:	4439      	add	r1, r7
 80008fc:	1acb      	subs	r3, r1, r3
 80008fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000902:	e778      	b.n	80007f6 <__udivmoddi4+0xbe>
 8000904:	f1c6 0c20 	rsb	ip, r6, #32
 8000908:	fa03 f406 	lsl.w	r4, r3, r6
 800090c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000910:	431c      	orrs	r4, r3
 8000912:	fa20 f70c 	lsr.w	r7, r0, ip
 8000916:	fa01 f306 	lsl.w	r3, r1, r6
 800091a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800091e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000922:	431f      	orrs	r7, r3
 8000924:	0c3b      	lsrs	r3, r7, #16
 8000926:	fbb1 f9fe 	udiv	r9, r1, lr
 800092a:	fa1f f884 	uxth.w	r8, r4
 800092e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000932:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000936:	fb09 fa08 	mul.w	sl, r9, r8
 800093a:	458a      	cmp	sl, r1
 800093c:	fa02 f206 	lsl.w	r2, r2, r6
 8000940:	fa00 f306 	lsl.w	r3, r0, r6
 8000944:	d908      	bls.n	8000958 <__udivmoddi4+0x220>
 8000946:	1861      	adds	r1, r4, r1
 8000948:	f109 30ff 	add.w	r0, r9, #4294967295
 800094c:	d248      	bcs.n	80009e0 <__udivmoddi4+0x2a8>
 800094e:	458a      	cmp	sl, r1
 8000950:	d946      	bls.n	80009e0 <__udivmoddi4+0x2a8>
 8000952:	f1a9 0902 	sub.w	r9, r9, #2
 8000956:	4421      	add	r1, r4
 8000958:	eba1 010a 	sub.w	r1, r1, sl
 800095c:	b2bf      	uxth	r7, r7
 800095e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000962:	fb0e 1110 	mls	r1, lr, r0, r1
 8000966:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800096a:	fb00 f808 	mul.w	r8, r0, r8
 800096e:	45b8      	cmp	r8, r7
 8000970:	d907      	bls.n	8000982 <__udivmoddi4+0x24a>
 8000972:	19e7      	adds	r7, r4, r7
 8000974:	f100 31ff 	add.w	r1, r0, #4294967295
 8000978:	d22e      	bcs.n	80009d8 <__udivmoddi4+0x2a0>
 800097a:	45b8      	cmp	r8, r7
 800097c:	d92c      	bls.n	80009d8 <__udivmoddi4+0x2a0>
 800097e:	3802      	subs	r0, #2
 8000980:	4427      	add	r7, r4
 8000982:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000986:	eba7 0708 	sub.w	r7, r7, r8
 800098a:	fba0 8902 	umull	r8, r9, r0, r2
 800098e:	454f      	cmp	r7, r9
 8000990:	46c6      	mov	lr, r8
 8000992:	4649      	mov	r1, r9
 8000994:	d31a      	bcc.n	80009cc <__udivmoddi4+0x294>
 8000996:	d017      	beq.n	80009c8 <__udivmoddi4+0x290>
 8000998:	b15d      	cbz	r5, 80009b2 <__udivmoddi4+0x27a>
 800099a:	ebb3 020e 	subs.w	r2, r3, lr
 800099e:	eb67 0701 	sbc.w	r7, r7, r1
 80009a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80009a6:	40f2      	lsrs	r2, r6
 80009a8:	ea4c 0202 	orr.w	r2, ip, r2
 80009ac:	40f7      	lsrs	r7, r6
 80009ae:	e9c5 2700 	strd	r2, r7, [r5]
 80009b2:	2600      	movs	r6, #0
 80009b4:	4631      	mov	r1, r6
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	462e      	mov	r6, r5
 80009bc:	4628      	mov	r0, r5
 80009be:	e70b      	b.n	80007d8 <__udivmoddi4+0xa0>
 80009c0:	4606      	mov	r6, r0
 80009c2:	e6e9      	b.n	8000798 <__udivmoddi4+0x60>
 80009c4:	4618      	mov	r0, r3
 80009c6:	e6fd      	b.n	80007c4 <__udivmoddi4+0x8c>
 80009c8:	4543      	cmp	r3, r8
 80009ca:	d2e5      	bcs.n	8000998 <__udivmoddi4+0x260>
 80009cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80009d0:	eb69 0104 	sbc.w	r1, r9, r4
 80009d4:	3801      	subs	r0, #1
 80009d6:	e7df      	b.n	8000998 <__udivmoddi4+0x260>
 80009d8:	4608      	mov	r0, r1
 80009da:	e7d2      	b.n	8000982 <__udivmoddi4+0x24a>
 80009dc:	4660      	mov	r0, ip
 80009de:	e78d      	b.n	80008fc <__udivmoddi4+0x1c4>
 80009e0:	4681      	mov	r9, r0
 80009e2:	e7b9      	b.n	8000958 <__udivmoddi4+0x220>
 80009e4:	4666      	mov	r6, ip
 80009e6:	e775      	b.n	80008d4 <__udivmoddi4+0x19c>
 80009e8:	4630      	mov	r0, r6
 80009ea:	e74a      	b.n	8000882 <__udivmoddi4+0x14a>
 80009ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80009f0:	4439      	add	r1, r7
 80009f2:	e713      	b.n	800081c <__udivmoddi4+0xe4>
 80009f4:	3802      	subs	r0, #2
 80009f6:	443c      	add	r4, r7
 80009f8:	e724      	b.n	8000844 <__udivmoddi4+0x10c>
 80009fa:	bf00      	nop

080009fc <__aeabi_idiv0>:
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	601a      	str	r2, [r3, #0]
	this->address = _address;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	729a      	strb	r2, [r3, #10]
}
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

}
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f103 010a 	add.w	r1, r3, #10
 8000a50:	2364      	movs	r3, #100	; 0x64
 8000a52:	2201      	movs	r2, #1
 8000a54:	f00c f934 	bl	800ccc0 <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6818      	ldr	r0, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f103 010c 	add.w	r1, r3, #12
 8000a62:	2364      	movs	r3, #100	; 0x64
 8000a64:	2202      	movs	r2, #2
 8000a66:	f00c f9c1 	bl	800cdec <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	899b      	ldrh	r3, [r3, #12]
 8000a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	899b      	ldrh	r3, [r3, #12]
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	0bdb      	lsrs	r3, r3, #15
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	765a      	strb	r2, [r3, #25]
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(this->address), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	899b      	ldrh	r3, [r3, #12]
 8000aa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000aac:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	899b      	ldrh	r3, [r3, #12]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	899b      	ldrh	r3, [r3, #12]
 8000abe:	105b      	asrs	r3, r3, #1
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	737b      	strb	r3, [r7, #13]
 8000acc:	7b7b      	ldrb	r3, [r7, #13]
 8000ace:	2b05      	cmp	r3, #5
 8000ad0:	d820      	bhi.n	8000b14 <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	899b      	ldrh	r3, [r3, #12]
 8000ad6:	109b      	asrs	r3, r3, #2
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	899b      	ldrh	r3, [r3, #12]
 8000ae2:	b25b      	sxtb	r3, r3
 8000ae4:	f003 0301 	and.w	r3, r3, #1
 8000ae8:	b25a      	sxtb	r2, r3
 8000aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aee:	4053      	eors	r3, r2
 8000af0:	b25b      	sxtb	r3, r3
 8000af2:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	899b      	ldrh	r3, [r3, #12]
 8000af8:	105b      	asrs	r3, r3, #1
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	b25a      	sxtb	r2, r3
 8000b02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000b06:	4053      	eors	r3, r2
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000b0c:	7b7b      	ldrb	r3, [r7, #13]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	737b      	strb	r3, [r7, #13]
 8000b12:	e7db      	b.n	8000acc <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	bf0c      	ite	eq
 8000b1a:	2301      	moveq	r3, #1
 8000b1c:	2300      	movne	r3, #0
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 8000b22:	7bbb      	ldrb	r3, [r7, #14]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	bf0c      	ite	eq
 8000b28:	2301      	moveq	r3, #1
 8000b2a:	2300      	movne	r3, #0
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7e1b      	ldrb	r3, [r3, #24]
 8000b34:	7bfa      	ldrb	r2, [r7, #15]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d10a      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7e5b      	ldrb	r3, [r3, #25]
 8000b3e:	7bba      	ldrb	r2, [r7, #14]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d105      	bne.n	8000b50 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 8000b44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	e003      	b.n	8000b58 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
	}
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b72:	b29b      	uxth	r3, r3
 8000b74:	135b      	asrs	r3, r3, #13
			+ (this->raw_value & 0x3FFF)) * -1;
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	f003 0301 	and.w	r3, r3, #1
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	0392      	lsls	r2, r2, #14
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	b29a      	uxth	r2, r3
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	b21b      	sxth	r3, r3
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bb0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb4:	fefb 7a67 	vrintm.f32	s15, s15
 8000bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	ed87 0a01 	vstr	s0, [r7, #4]
 8000bd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bd4:	fef8 7a67 	vrinta.f32	s15, s15
 8000bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>:
 *
 *  Created on: Jan 30, 2022
 *      Author: SakuranohanaTH
 */
#include "ServoMotor.h"
ServoMotor::ServoMotor(TIM_HandleTypeDef *_servo_htim,
 8000be6:	b480      	push	{r7}
 8000be8:	b085      	sub	sp, #20
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	60f8      	str	r0, [r7, #12]
 8000bee:	60b9      	str	r1, [r7, #8]
 8000bf0:	607a      	str	r2, [r7, #4]
		uint32_t _SERVO_TIM_CHANNEL) {
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	22b4      	movs	r2, #180	; 0xb4
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	761a      	strb	r2, [r3, #24]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2200      	movs	r2, #0
 8000c14:	765a      	strb	r2, [r3, #25]
	this->servo_htim = _servo_htim;
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	68ba      	ldr	r2, [r7, #8]
 8000c1a:	601a      	str	r2, [r3, #0]
	this->SERVO_TIM_CHANNEL = _SERVO_TIM_CHANNEL;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	605a      	str	r2, [r3, #4]
	 * 2ms/20ms = 0.1 = 10%
	 *
	 * CRR = 0.1 * (19999 + 1) = 2000
	 *
	 */
	this->servo_htim->Instance->PSC = _PSC_SERVO_MOTOR - 1U;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	22ef      	movs	r2, #239	; 0xef
 8000c2a:	629a      	str	r2, [r3, #40]	; 0x28
	this->servo_htim->Instance->ARR = _ARR_SERVO_MOTOR - 1U;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000c36:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <_ZN10ServoMotorD1Ev>:
ServoMotor::~ServoMotor() {
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
}
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4618      	mov	r0, r3
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <_ZN10ServoMotor11ServoEnableEv>:
void ServoMotor::ServoEnable() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Enable PWM for Servo Motor
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4610      	mov	r0, r2
 8000c70:	f00a fe16 	bl	800b8a0 <HAL_TIM_PWM_Start>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <_ZN10ServoMotor17ServoRotateDegreeEl>:
void ServoMotor::ServoDisable() {
	HAL_TIM_PWM_Stop(this->servo_htim, this->SERVO_TIM_CHANNEL);	// Disable PWM for Servo Motor
}
void ServoMotor::ServoRotateDegree(int32_t _sdegrotate) {
 8000c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af02      	add	r7, sp, #8
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
	if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d13f      	bne.n	8000d0e <_ZN10ServoMotor17ServoRotateDegreeEl+0x92>
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	691c      	ldr	r4, [r3, #16]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	695d      	ldr	r5, [r3, #20]
				_sdegrotate, this->minsdeg, this->maxsdeg, // Mapping degree value to CRR value
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	ee07 3a90 	vmov	s15, r3
 8000ca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ca8:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cb4:	f7ff ff87 	bl	8000bc6 <_ZSt5roundf>
 8000cb8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8000cbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ccc:	3301      	adds	r3, #1
 8000cce:	ee07 3a90 	vmov	s15, r3
 8000cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd6:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000cda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cde:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce2:	f7ff ff60 	bl	8000ba6 <_ZSt5floorf>
 8000ce6:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR1 = (uint32_t) (this->GripperMap(
 8000cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cee:	ee17 3a90 	vmov	r3, s15
 8000cf2:	9301      	str	r3, [sp, #4]
 8000cf4:	9600      	str	r6, [sp, #0]
 8000cf6:	462b      	mov	r3, r5
 8000cf8:	4622      	mov	r2, r4
 8000cfa:	6839      	ldr	r1, [r7, #0]
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 f9cf 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000d02:	4602      	mov	r2, r0
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR3 = 0;
		this->servo_htim->Instance->CCR4 = 0;
		this->servo_htim->Instance->CCR5 = 0;
		this->servo_htim->Instance->CCR6 = 0;
	}
}
 8000d0c:	e176      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	2b04      	cmp	r3, #4
 8000d14:	d13f      	bne.n	8000d96 <_ZN10ServoMotor17ServoRotateDegreeEl+0x11a>
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	691c      	ldr	r4, [r3, #16]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d26:	3301      	adds	r3, #1
 8000d28:	ee07 3a90 	vmov	s15, r3
 8000d2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d30:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d38:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3c:	f7ff ff43 	bl	8000bc6 <_ZSt5roundf>
 8000d40:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8000d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d48:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d54:	3301      	adds	r3, #1
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d5e:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d66:	eeb0 0a67 	vmov.f32	s0, s15
 8000d6a:	f7ff ff1c 	bl	8000ba6 <_ZSt5floorf>
 8000d6e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR2 = (uint32_t) (this->GripperMap(
 8000d72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d76:	ee17 3a90 	vmov	r3, s15
 8000d7a:	9301      	str	r3, [sp, #4]
 8000d7c:	9600      	str	r6, [sp, #0]
 8000d7e:	462b      	mov	r3, r5
 8000d80:	4622      	mov	r2, r4
 8000d82:	6839      	ldr	r1, [r7, #0]
 8000d84:	6878      	ldr	r0, [r7, #4]
 8000d86:	f000 f98b 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d94:	e132      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b08      	cmp	r3, #8
 8000d9c:	d13f      	bne.n	8000e1e <_ZN10ServoMotor17ServoRotateDegreeEl+0x1a2>
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	691c      	ldr	r4, [r3, #16]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	3301      	adds	r3, #1
 8000db0:	ee07 3a90 	vmov	s15, r3
 8000db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000db8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000dbc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dc0:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc4:	f7ff feff 	bl	8000bc6 <_ZSt5roundf>
 8000dc8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8000dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dd0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	3301      	adds	r3, #1
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000dea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dee:	eeb0 0a67 	vmov.f32	s0, s15
 8000df2:	f7ff fed8 	bl	8000ba6 <_ZSt5floorf>
 8000df6:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR3 = (uint32_t) (this->GripperMap(
 8000dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dfe:	ee17 3a90 	vmov	r3, s15
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	9600      	str	r6, [sp, #0]
 8000e06:	462b      	mov	r3, r5
 8000e08:	4622      	mov	r2, r4
 8000e0a:	6839      	ldr	r1, [r7, #0]
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 f947 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000e12:	4602      	mov	r2, r0
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e1c:	e0ee      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	2b0c      	cmp	r3, #12
 8000e24:	d13f      	bne.n	8000ea6 <_ZN10ServoMotor17ServoRotateDegreeEl+0x22a>
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	691c      	ldr	r4, [r3, #16]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e36:	3301      	adds	r3, #1
 8000e38:	ee07 3a90 	vmov	s15, r3
 8000e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e40:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000e44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e48:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4c:	f7ff febb 	bl	8000bc6 <_ZSt5roundf>
 8000e50:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8000e54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e58:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	3301      	adds	r3, #1
 8000e66:	ee07 3a90 	vmov	s15, r3
 8000e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e6e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000e72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e76:	eeb0 0a67 	vmov.f32	s0, s15
 8000e7a:	f7ff fe94 	bl	8000ba6 <_ZSt5floorf>
 8000e7e:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR4 = (uint32_t) (this->GripperMap(
 8000e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e86:	ee17 3a90 	vmov	r3, s15
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	9600      	str	r6, [sp, #0]
 8000e8e:	462b      	mov	r3, r5
 8000e90:	4622      	mov	r2, r4
 8000e92:	6839      	ldr	r1, [r7, #0]
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 f903 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000ea4:	e0aa      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b10      	cmp	r3, #16
 8000eac:	d144      	bne.n	8000f38 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2bc>
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691c      	ldr	r4, [r3, #16]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	ee07 3a90 	vmov	s15, r3
 8000ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ec8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000ecc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ed4:	f7ff fe77 	bl	8000bc6 <_ZSt5roundf>
 8000ed8:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8000edc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee0:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	3301      	adds	r3, #1
 8000eee:	ee07 3a90 	vmov	s15, r3
 8000ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ef6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000efa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000efe:	eeb0 0a67 	vmov.f32	s0, s15
 8000f02:	f7ff fe50 	bl	8000ba6 <_ZSt5floorf>
 8000f06:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR5 = (uint32_t) (this->GripperMap(
 8000f0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f0e:	ee17 3a90 	vmov	r3, s15
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	9600      	str	r6, [sp, #0]
 8000f16:	462b      	mov	r3, r5
 8000f18:	4622      	mov	r2, r4
 8000f1a:	6839      	ldr	r1, [r7, #0]
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f000 f8bf 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000f22:	4602      	mov	r2, r0
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000f2c:	e066      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
 8000f2e:	bf00      	nop
 8000f30:	3d4ccccd 	.word	0x3d4ccccd
 8000f34:	3e19999a 	.word	0x3e19999a
	else if (this->SERVO_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b14      	cmp	r3, #20
 8000f3e:	d13f      	bne.n	8000fc0 <_ZN10ServoMotor17ServoRotateDegreeEl+0x344>
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691c      	ldr	r4, [r3, #16]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	695d      	ldr	r5, [r3, #20]
				round((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.05f),	// 1ms (default to 0 degree)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f50:	3301      	adds	r3, #1
 8000f52:	ee07 3a90 	vmov	s15, r3
 8000f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f5a:	ed1f 7a0b 	vldr	s14, [pc, #-44]	; 8000f30 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b4>
 8000f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f62:	eeb0 0a67 	vmov.f32	s0, s15
 8000f66:	f7ff fe2e 	bl	8000bc6 <_ZSt5roundf>
 8000f6a:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8000f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f72:	ee17 6a90 	vmov	r6, s15
				floor((float) ((this->servo_htim->Instance->ARR) + 1U) * 0.15f))); // 2ms (default to 180 degree)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7e:	3301      	adds	r3, #1
 8000f80:	ee07 3a90 	vmov	s15, r3
 8000f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f88:	ed1f 7a16 	vldr	s14, [pc, #-88]	; 8000f34 <_ZN10ServoMotor17ServoRotateDegreeEl+0x2b8>
 8000f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f90:	eeb0 0a67 	vmov.f32	s0, s15
 8000f94:	f7ff fe07 	bl	8000ba6 <_ZSt5floorf>
 8000f98:	eef0 7a40 	vmov.f32	s15, s0
		this->servo_htim->Instance->CCR6 = (uint32_t) (this->GripperMap(
 8000f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fa0:	ee17 3a90 	vmov	r3, s15
 8000fa4:	9301      	str	r3, [sp, #4]
 8000fa6:	9600      	str	r6, [sp, #0]
 8000fa8:	462b      	mov	r3, r5
 8000faa:	4622      	mov	r2, r4
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f876 	bl	80010a0 <_ZN10ServoMotor10GripperMapElllll>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000fbe:	e01d      	b.n	8000ffc <_ZN10ServoMotor17ServoRotateDegreeEl+0x380>
		this->servo_htim->Instance->CCR1 = 0;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	635a      	str	r2, [r3, #52]	; 0x34
		this->servo_htim->Instance->CCR2 = 0;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	639a      	str	r2, [r3, #56]	; 0x38
		this->servo_htim->Instance->CCR3 = 0;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	63da      	str	r2, [r3, #60]	; 0x3c
		this->servo_htim->Instance->CCR4 = 0;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40
		this->servo_htim->Instance->CCR5 = 0;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	659a      	str	r2, [r3, #88]	; 0x58
		this->servo_htim->Instance->CCR6 = 0;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001004 <_ZN10ServoMotor20setDegreeGripperOpenEl>:
void ServoMotor::setDegreeGripperOpen(int32_t _sdegopen) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
	this->sdegopen = _sdegopen;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	609a      	str	r2, [r3, #8]
	this->isSetDegreeGripperOpen = true;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	761a      	strb	r2, [r3, #24]
}
 800101a:	bf00      	nop
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_ZN10ServoMotor21setDegreeGripperCloseEl>:
void ServoMotor::setDegreeGripperClose(int32_t _sdegclose) {
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
 800102e:	6039      	str	r1, [r7, #0]
	this->sdegclose = _sdegclose;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	60da      	str	r2, [r3, #12]
	this->isSetDegreeGripperClose = true;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2201      	movs	r2, #1
 800103a:	765a      	strb	r2, [r3, #25]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_ZN10ServoMotor12GripperCloseEv>:
void ServoMotor::GripperClose() {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperClose)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	7e5b      	ldrb	r3, [r3, #25]
 8001054:	f083 0301 	eor.w	r3, r3, #1
 8001058:	b2db      	uxtb	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d106      	bne.n	800106c <_ZN10ServoMotor12GripperCloseEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegclose);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	4619      	mov	r1, r3
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff fe09 	bl	8000c7c <_ZN10ServoMotor17ServoRotateDegreeEl>
 800106a:	e000      	b.n	800106e <_ZN10ServoMotor12GripperCloseEv+0x26>
		return;
 800106c:	bf00      	nop
}
 800106e:	3708      	adds	r7, #8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <_ZN10ServoMotor11GripperOpenEv>:
void ServoMotor::GripperOpen() {
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	if (!this->isSetDegreeGripperOpen)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	7e1b      	ldrb	r3, [r3, #24]
 8001080:	f083 0301 	eor.w	r3, r3, #1
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d106      	bne.n	8001098 <_ZN10ServoMotor11GripperOpenEv+0x24>
		return;
	this->ServoRotateDegree(this->sdegopen);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	4619      	mov	r1, r3
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff fdf3 	bl	8000c7c <_ZN10ServoMotor17ServoRotateDegreeEl>
 8001096:	e000      	b.n	800109a <_ZN10ServoMotor11GripperOpenEv+0x26>
		return;
 8001098:	bf00      	nop
}
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN10ServoMotor10GripperMapElllll>:
int32_t ServoMotor::GripperMap(int32_t x, int32_t in_min, int32_t in_max, int32_t out_min,
		int32_t out_max) {
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80010ae:	68ba      	ldr	r2, [r7, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	69f9      	ldr	r1, [r7, #28]
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	1a8a      	subs	r2, r1, r2
 80010ba:	fb02 f203 	mul.w	r2, r2, r3
 80010be:	6839      	ldr	r1, [r7, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	1acb      	subs	r3, r1, r3
 80010c4:	fb92 f2f3 	sdiv	r2, r2, r3
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	4413      	add	r3, r2
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3714      	adds	r7, #20
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	ed87 0a01 	vstr	s0, [r7, #4]
 80010e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e6:	eef0 7ae7 	vabs.f32	s15, s15
 80010ea:	eeb0 0a67 	vmov.f32	s0, s15
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4a18      	ldr	r2, [pc, #96]	; (800116c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4a18      	ldr	r2, [pc, #96]	; (8001170 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001110:	619a      	str	r2, [r3, #24]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001118:	61da      	str	r2, [r3, #28]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4a15      	ldr	r2, [pc, #84]	; (8001174 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 800111e:	621a      	str	r2, [r3, #32]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	22c7      	movs	r2, #199	; 0xc7
 800113c:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 60.0f;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 8001142:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8001148:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 800114a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800117c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 f832 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	60da      	str	r2, [r3, #12]
}
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4618      	mov	r0, r3
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	41a00000 	.word	0x41a00000
 8001170:	469c4000 	.word	0x469c4000
 8001174:	43480000 	.word	0x43480000
 8001178:	42700000 	.word	0x42700000
 800117c:	00000000 	.word	0x00000000

08001180 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
}
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8001196:	b580      	push	{r7, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	4619      	mov	r1, r3
 80011a8:	4610      	mov	r0, r2
 80011aa:	f00a fb79 	bl	800b8a0 <HAL_TIM_PWM_Start>
}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	ed2d 8b02 	vpush	{d8}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80011d4:	eeb0 0a67 	vmov.f32	s0, s15
 80011d8:	f7ff ff7e 	bl	80010d8 <_ZSt4fabsf>
 80011dc:	eeb0 7a40 	vmov.f32	s14, s0
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	edd3 7a05 	vldr	s15, [r3, #20]
 80011e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	bf94      	ite	ls
 80011f0:	2301      	movls	r3, #1
 80011f2:	2300      	movhi	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e01b      	b.n	800123a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edd3 7a04 	vldr	s15, [r3, #16]
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	f7ff ff64 	bl	80010d8 <_ZSt4fabsf>
 8001210:	eeb0 7a40 	vmov.f32	s14, s0
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	edd3 7a06 	vldr	s15, [r3, #24]
 800121a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	bfac      	ite	ge
 8001224:	2301      	movge	r3, #1
 8001226:	2300      	movlt	r3, #0
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	e001      	b.n	800123a <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001240:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80014dc <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8001244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	f2c0 80db 	blt.w	8001406 <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6898      	ldr	r0, [r3, #8]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	b29b      	uxth	r3, r3
 800125a:	2201      	movs	r2, #1
 800125c:	4619      	mov	r1, r3
 800125e:	f007 fd45 	bl	8008cec <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800126a:	3301      	adds	r3, #1
 800126c:	ee07 3a90 	vmov	s15, r3
 8001270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001274:	edd7 7a03 	vldr	s15, [r7, #12]
 8001278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127c:	eddf 6a98 	vldr	s13, [pc, #608]	; 80014e0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001280:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001284:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001288:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800128c:	eeb0 0a67 	vmov.f32	s0, s15
 8001290:	f7ff fc99 	bl	8000bc6 <_ZSt5roundf>
 8001294:	eef0 7a40 	vmov.f32	s15, s0
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012a2:	ee17 2a90 	vmov	r2, s15
 80012a6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d113      	bne.n	80012d8 <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 80012ba:	085b      	lsrs	r3, r3, #1
 80012bc:	4618      	mov	r0, r3
 80012be:	f000 fa5b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80012c2:	eeb0 7b40 	vmov.f64	d7, d0
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80012d0:	ee17 2a90 	vmov	r2, s15
 80012d4:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 80012d6:	e1e0      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d113      	bne.n	8001308 <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 80012ea:	085b      	lsrs	r3, r3, #1
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 fa43 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80012f2:	eeb0 7b40 	vmov.f64	d7, d0
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001300:	ee17 2a90 	vmov	r2, s15
 8001304:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001306:	e1c8      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b08      	cmp	r3, #8
 800130e:	d113      	bne.n	8001338 <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 800131a:	085b      	lsrs	r3, r3, #1
 800131c:	4618      	mov	r0, r3
 800131e:	f000 fa2b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001322:	eeb0 7b40 	vmov.f64	d7, d0
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001330:	ee17 2a90 	vmov	r2, s15
 8001334:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001336:	e1b0      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b0c      	cmp	r3, #12
 800133e:	d113      	bne.n	8001368 <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800134a:	085b      	lsrs	r3, r3, #1
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fa13 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001352:	eeb0 7b40 	vmov.f64	d7, d0
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001360:	ee17 2a90 	vmov	r2, s15
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001366:	e198      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b10      	cmp	r3, #16
 800136e:	d113      	bne.n	8001398 <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800137a:	085b      	lsrs	r3, r3, #1
 800137c:	4618      	mov	r0, r3
 800137e:	f000 f9fb 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001382:	eeb0 7b40 	vmov.f64	d7, d0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001390:	ee17 2a90 	vmov	r2, s15
 8001394:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001396:	e180      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b14      	cmp	r3, #20
 800139e:	d113      	bne.n	80013c8 <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 80013aa:	085b      	lsrs	r3, r3, #1
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f9e3 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80013b2:	eeb0 7b40 	vmov.f64	d7, d0
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80013c0:	ee17 2a90 	vmov	r2, s15
 80013c4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80013c6:	e168      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2200      	movs	r2, #0
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2200      	movs	r2, #0
 80013da:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2200      	movs	r2, #0
 80013e4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2200      	movs	r2, #0
 80013ee:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2200      	movs	r2, #0
 80013f8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2200      	movs	r2, #0
 8001402:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001404:	e149      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edd3 7a04 	vldr	s15, [r3, #16]
 800140c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80014e4 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8001410:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001418:	f200 80e5 	bhi.w	80015e6 <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6898      	ldr	r0, [r3, #8]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	b29b      	uxth	r3, r3
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	f007 fc5f 	bl	8008cec <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	3301      	adds	r3, #1
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001440:	ed97 0a03 	vldr	s0, [r7, #12]
 8001444:	f7ff fe48 	bl	80010d8 <_ZSt4fabsf>
 8001448:	eef0 7a40 	vmov.f32	s15, s0
 800144c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001450:	eddf 6a23 	vldr	s13, [pc, #140]	; 80014e0 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8001454:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8001458:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800145c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001460:	eeb0 0a67 	vmov.f32	s0, s15
 8001464:	f7ff fbaf 	bl	8000bc6 <_ZSt5roundf>
 8001468:	eef0 7a40 	vmov.f32	s15, s0
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001476:	ee17 2a90 	vmov	r2, s15
 800147a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d113      	bne.n	80014ac <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 800148e:	085b      	lsrs	r3, r3, #1
 8001490:	4618      	mov	r0, r3
 8001492:	f000 f971 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001496:	eeb0 7b40 	vmov.f64	d7, d0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014a4:	ee17 2a90 	vmov	r2, s15
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014aa:	e0f6      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	2b04      	cmp	r3, #4
 80014b2:	d119      	bne.n	80014e8 <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 80014be:	085b      	lsrs	r3, r3, #1
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f959 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80014c6:	eeb0 7b40 	vmov.f64	d7, d0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80014d4:	ee17 2a90 	vmov	r2, s15
 80014d8:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014da:	e0de      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 80014dc:	3a83126f 	.word	0x3a83126f
 80014e0:	4d64e1c0 	.word	0x4d64e1c0
 80014e4:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b08      	cmp	r3, #8
 80014ee:	d113      	bne.n	8001518 <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 80014fa:	085b      	lsrs	r3, r3, #1
 80014fc:	4618      	mov	r0, r3
 80014fe:	f000 f93b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001502:	eeb0 7b40 	vmov.f64	d7, d0
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001510:	ee17 2a90 	vmov	r2, s15
 8001514:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001516:	e0c0      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b0c      	cmp	r3, #12
 800151e:	d113      	bne.n	8001548 <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	4618      	mov	r0, r3
 800152e:	f000 f923 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001532:	eeb0 7b40 	vmov.f64	d7, d0
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001540:	ee17 2a90 	vmov	r2, s15
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001546:	e0a8      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b10      	cmp	r3, #16
 800154e:	d113      	bne.n	8001578 <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 800155a:	085b      	lsrs	r3, r3, #1
 800155c:	4618      	mov	r0, r3
 800155e:	f000 f90b 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001562:	eeb0 7b40 	vmov.f64	d7, d0
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001570:	ee17 2a90 	vmov	r2, s15
 8001574:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001576:	e090      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b14      	cmp	r3, #20
 800157e:	d113      	bne.n	80015a8 <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001588:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 800158a:	085b      	lsrs	r3, r3, #1
 800158c:	4618      	mov	r0, r3
 800158e:	f000 f8f3 	bl	8001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001592:	eeb0 7b40 	vmov.f64	d7, d0
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80015a0:	ee17 2a90 	vmov	r2, s15
 80015a4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015a6:	e078      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2200      	movs	r2, #0
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2200      	movs	r2, #0
 80015ba:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2200      	movs	r2, #0
 80015c4:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2200      	movs	r2, #0
 80015e2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80015e4:	e059      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d105      	bne.n	80015fa <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2200      	movs	r2, #0
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80015f8:	e04f      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d105      	bne.n	800160e <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2200      	movs	r2, #0
 800160a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800160c:	e045      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b08      	cmp	r3, #8
 8001614:	d105      	bne.n	8001622 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2200      	movs	r2, #0
 800161e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001620:	e03b      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b0c      	cmp	r3, #12
 8001628:	d105      	bne.n	8001636 <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2200      	movs	r2, #0
 8001632:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001634:	e031      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	2b10      	cmp	r3, #16
 800163c:	d105      	bne.n	800164a <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2200      	movs	r2, #0
 8001646:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001648:	e027      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b14      	cmp	r3, #20
 8001650:	d105      	bne.n	800165e <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2200      	movs	r2, #0
 800165a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800165c:	e01d      	b.n	800169a <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2200      	movs	r2, #0
 8001670:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2200      	movs	r2, #0
 800167a:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2200      	movs	r2, #0
 8001684:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2200      	movs	r2, #0
 8001698:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	ecbd 8b02 	vpop	{d8}
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop

080016a8 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 80016b4:	ed97 0a00 	vldr	s0, [r7]
 80016b8:	f7ff fd0e 	bl	80010d8 <_ZSt4fabsf>
 80016bc:	eef0 7a40 	vmov.f32	s15, s0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80016e2:	eeb0 0b47 	vmov.f64	d0, d7
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ffe5 	bl	80016ce <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001704:	eeb0 7b40 	vmov.f64	d7, d0
 8001708:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	0000      	movs	r0, r0
 800171c:	0000      	movs	r0, r0
	...

08001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>:
void Stepper::StepperOpenLoopSpeed(float _speed) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001732:	edd7 7a00 	vldr	s15, [r7]
 8001736:	ee27 7a27 	vmul.f32	s14, s14, s15
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001740:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	edd3 7a08 	vldr	s15, [r3, #32]
 800174a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI)));
 8001752:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8001770 <_ZN7Stepper20StepperOpenLoopSpeedEf+0x50>
 8001756:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 800175a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800175e:	eeb0 0a67 	vmov.f32	s0, s15
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fd28 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	54442eea 	.word	0x54442eea
 8001774:	401921fb 	.word	0x401921fb

08001778 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	ee07 3a90 	vmov	s15, r3
 8001786:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800178a:	eeb0 0b47 	vmov.f64	d0, d7
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800179c:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_CRC_Init+0x54>)
 800179e:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <MX_CRC_Init+0x58>)
 80017a0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <MX_CRC_Init+0x54>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80017a8:	4b10      	ldr	r3, [pc, #64]	; (80017ec <MX_CRC_Init+0x54>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_CRC_Init+0x54>)
 80017b0:	f248 0205 	movw	r2, #32773	; 0x8005
 80017b4:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <MX_CRC_Init+0x54>)
 80017b8:	2208      	movs	r2, #8
 80017ba:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_CRC_Init+0x54>)
 80017be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017c2:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_CRC_Init+0x54>)
 80017c6:	2220      	movs	r2, #32
 80017c8:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_CRC_Init+0x54>)
 80017cc:	2280      	movs	r2, #128	; 0x80
 80017ce:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_CRC_Init+0x54>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_CRC_Init+0x54>)
 80017d8:	f004 f8a0 	bl	800591c <HAL_CRC_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 80017e2:	f002 f903 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	240007e4 	.word	0x240007e4
 80017f0:	58024c00 	.word	0x58024c00

080017f4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <HAL_CRC_MspInit+0x3c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d10e      	bne.n	8001824 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <HAL_CRC_MspInit+0x40>)
 8001808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800180c:	4a09      	ldr	r2, [pc, #36]	; (8001834 <HAL_CRC_MspInit+0x40>)
 800180e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001812:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_CRC_MspInit+0x40>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800181c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	58024c00 	.word	0x58024c00
 8001834:	58024400 	.word	0x58024400

08001838 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800183e:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <MX_DMA_Init+0x7c>)
 8001840:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <MX_DMA_Init+0x7c>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <MX_DMA_Init+0x7c>)
 8001850:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	607b      	str	r3, [r7, #4]
 800185a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800185c:	2200      	movs	r2, #0
 800185e:	2100      	movs	r1, #0
 8001860:	200b      	movs	r0, #11
 8001862:	f004 f81a 	bl	800589a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001866:	200b      	movs	r0, #11
 8001868:	f004 f831 	bl	80058ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	200c      	movs	r0, #12
 8001872:	f004 f812 	bl	800589a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001876:	200c      	movs	r0, #12
 8001878:	f004 f829 	bl	80058ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800187c:	2200      	movs	r2, #0
 800187e:	2100      	movs	r1, #0
 8001880:	200d      	movs	r0, #13
 8001882:	f004 f80a 	bl	800589a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001886:	200d      	movs	r0, #13
 8001888:	f004 f821 	bl	80058ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	200e      	movs	r0, #14
 8001892:	f004 f802 	bl	800589a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001896:	200e      	movs	r0, #14
 8001898:	f004 f819 	bl	80058ce <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	200f      	movs	r0, #15
 80018a2:	f003 fffa 	bl	800589a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80018a6:	200f      	movs	r0, #15
 80018a8:	f004 f811 	bl	80058ce <HAL_NVIC_EnableIRQ>

}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	58024400 	.word	0x58024400

080018b8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b08c      	sub	sp, #48	; 0x30
 80018bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	605a      	str	r2, [r3, #4]
 80018c8:	609a      	str	r2, [r3, #8]
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ce:	4b8e      	ldr	r3, [pc, #568]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d4:	4a8c      	ldr	r2, [pc, #560]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018d6:	f043 0310 	orr.w	r3, r3, #16
 80018da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018de:	4b8a      	ldr	r3, [pc, #552]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ec:	4b86      	ldr	r3, [pc, #536]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018f2:	4a85      	ldr	r2, [pc, #532]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018fc:	4b82      	ldr	r3, [pc, #520]	; (8001b08 <MX_GPIO_Init+0x250>)
 80018fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800190a:	4b7f      	ldr	r3, [pc, #508]	; (8001b08 <MX_GPIO_Init+0x250>)
 800190c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001910:	4a7d      	ldr	r2, [pc, #500]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800191a:	4b7b      	ldr	r3, [pc, #492]	; (8001b08 <MX_GPIO_Init+0x250>)
 800191c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001928:	4b77      	ldr	r3, [pc, #476]	; (8001b08 <MX_GPIO_Init+0x250>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192e:	4a76      	ldr	r2, [pc, #472]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001938:	4b73      	ldr	r3, [pc, #460]	; (8001b08 <MX_GPIO_Init+0x250>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b70      	ldr	r3, [pc, #448]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194c:	4a6e      	ldr	r2, [pc, #440]	; (8001b08 <MX_GPIO_Init+0x250>)
 800194e:	f043 0302 	orr.w	r3, r3, #2
 8001952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001956:	4b6c      	ldr	r3, [pc, #432]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001964:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196a:	4a67      	ldr	r2, [pc, #412]	; (8001b08 <MX_GPIO_Init+0x250>)
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001974:	4b64      	ldr	r3, [pc, #400]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001982:	4b61      	ldr	r3, [pc, #388]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001988:	4a5f      	ldr	r2, [pc, #380]	; (8001b08 <MX_GPIO_Init+0x250>)
 800198a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800198e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001992:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <MX_GPIO_Init+0x250>)
 8001994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80019a0:	2200      	movs	r2, #0
 80019a2:	f644 2121 	movw	r1, #18977	; 0x4a21
 80019a6:	4859      	ldr	r0, [pc, #356]	; (8001b0c <MX_GPIO_Init+0x254>)
 80019a8:	f007 f9a0 	bl	8008cec <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019ac:	2200      	movs	r2, #0
 80019ae:	f24c 0102 	movw	r1, #49154	; 0xc002
 80019b2:	4857      	ldr	r0, [pc, #348]	; (8001b10 <MX_GPIO_Init+0x258>)
 80019b4:	f007 f99a 	bl	8008cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019be:	4855      	ldr	r0, [pc, #340]	; (8001b14 <MX_GPIO_Init+0x25c>)
 80019c0:	f007 f994 	bl	8008cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80019c4:	2200      	movs	r2, #0
 80019c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019ca:	4853      	ldr	r0, [pc, #332]	; (8001b18 <MX_GPIO_Init+0x260>)
 80019cc:	f007 f98e 	bl	8008cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019d6:	4851      	ldr	r0, [pc, #324]	; (8001b1c <MX_GPIO_Init+0x264>)
 80019d8:	f007 f988 	bl	8008cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 80019dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 80019ec:	f107 031c 	add.w	r3, r7, #28
 80019f0:	4619      	mov	r1, r3
 80019f2:	4849      	ldr	r0, [pc, #292]	; (8001b18 <MX_GPIO_Init+0x260>)
 80019f4:	f006 ffca 	bl	800898c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80019f8:	f644 2321 	movw	r3, #18977	; 0x4a21
 80019fc:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	483e      	ldr	r0, [pc, #248]	; (8001b0c <MX_GPIO_Init+0x254>)
 8001a12:	f006 ffbb 	bl	800898c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001a16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a1c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4838      	ldr	r0, [pc, #224]	; (8001b10 <MX_GPIO_Init+0x258>)
 8001a2e:	f006 ffad 	bl	800898c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001a32:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4831      	ldr	r0, [pc, #196]	; (8001b10 <MX_GPIO_Init+0x258>)
 8001a4c:	f006 ff9e 	bl	800898c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 031c 	add.w	r3, r7, #28
 8001a66:	4619      	mov	r1, r3
 8001a68:	482a      	ldr	r0, [pc, #168]	; (8001b14 <MX_GPIO_Init+0x25c>)
 8001a6a:	f006 ff8f 	bl	800898c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001a6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	4824      	ldr	r0, [pc, #144]	; (8001b18 <MX_GPIO_Init+0x260>)
 8001a88:	f006 ff80 	bl	800898c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8001a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a92:	2301      	movs	r3, #1
 8001a94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8001a9e:	f107 031c 	add.w	r3, r7, #28
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	481d      	ldr	r0, [pc, #116]	; (8001b1c <MX_GPIO_Init+0x264>)
 8001aa6:	f006 ff71 	bl	800898c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001aaa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ab0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4817      	ldr	r0, [pc, #92]	; (8001b20 <MX_GPIO_Init+0x268>)
 8001ac2:	f006 ff63 	bl	800898c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001ac6:	23c0      	movs	r3, #192	; 0xc0
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	480c      	ldr	r0, [pc, #48]	; (8001b0c <MX_GPIO_Init+0x254>)
 8001adc:	f006 ff56 	bl	800898c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2017      	movs	r0, #23
 8001ae6:	f003 fed8 	bl	800589a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001aea:	2017      	movs	r0, #23
 8001aec:	f003 feef 	bl	80058ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2028      	movs	r0, #40	; 0x28
 8001af6:	f003 fed0 	bl	800589a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001afa:	2028      	movs	r0, #40	; 0x28
 8001afc:	f003 fee7 	bl	80058ce <HAL_NVIC_EnableIRQ>

}
 8001b00:	bf00      	nop
 8001b02:	3730      	adds	r7, #48	; 0x30
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	58024400 	.word	0x58024400
 8001b0c:	58020400 	.word	0x58020400
 8001b10:	58021000 	.word	0x58021000
 8001b14:	58020c00 	.word	0x58020c00
 8001b18:	58020800 	.word	0x58020800
 8001b1c:	58020000 	.word	0x58020000
 8001b20:	58021800 	.word	0x58021800

08001b24 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b2e:	edc7 0a00 	vstr	s1, [r7]
 8001b32:	edd7 0a00 	vldr	s1, [r7]
 8001b36:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b3a:	f00d fec5 	bl	800f8c8 <atan2f>
 8001b3e:	eef0 7a40 	vmov.f32	s15, s0
 8001b42:	eeb0 0a67 	vmov.f32	s0, s15
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b56:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b5a:	f00d fa45 	bl	800efe8 <cosf>
 8001b5e:	eef0 7a40 	vmov.f32	s15, s0
 8001b62:	eeb0 0a67 	vmov.f32	s0, s15
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b76:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b7a:	f00d fe05 	bl	800f788 <sinf>
 8001b7e:	eef0 7a40 	vmov.f32	s15, s0
 8001b82:	eeb0 0a67 	vmov.f32	s0, s15
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_ZSt4sqrtf>:
  { return __builtin_sqrtf(__x); }
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b96:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b9a:	f00d fe97 	bl	800f8cc <sqrtf>
 8001b9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_UARTEx_RxEventCallback>:
#define Rx_BUFFER_SIZE   20
uint8_t Old_Rx_Buffer[Rx_BUFFER_SIZE] = { 0 };
uint8_t New_Rx_Buffer[Rx_BUFFER_SIZE] = { 0 };
volatile uint16_t cmdDataSize = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001bac:	b5b0      	push	{r4, r5, r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a99      	ldr	r2, [pc, #612]	; (8001e20 <HAL_UARTEx_RxEventCallback+0x274>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	f040 8200 	bne.w	8001fc2 <HAL_UARTEx_RxEventCallback+0x416>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 8001bc2:	4a98      	ldr	r2, [pc, #608]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001bc4:	4b98      	ldr	r3, [pc, #608]	; (8001e28 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001bc6:	4614      	mov	r4, r2
 8001bc8:	461d      	mov	r5, r3
 8001bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bce:	682b      	ldr	r3, [r5, #0]
 8001bd0:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 8001bd2:	2214      	movs	r2, #20
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4894      	ldr	r0, [pc, #592]	; (8001e28 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001bd8:	f00e f8c6 	bl	800fd68 <memset>
		if (Size - 2 > 0 && Size <= Rx_BUFFER_SIZE) {// Check if there's some data.
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	f240 81de 	bls.w	8001fa0 <HAL_UARTEx_RxEventCallback+0x3f4>
 8001be4:	887b      	ldrh	r3, [r7, #2]
 8001be6:	2b14      	cmp	r3, #20
 8001be8:	f200 81da 	bhi.w	8001fa0 <HAL_UARTEx_RxEventCallback+0x3f4>
			cmdDataSize = Size - 2;	// Calculate data length.
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	3b02      	subs	r3, #2
 8001bf0:	b29a      	uxth	r2, r3
 8001bf2:	4b8e      	ldr	r3, [pc, #568]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001bf4:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) Old_Rx_Buffer,
 8001bf6:	4b8d      	ldr	r3, [pc, #564]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	4989      	ldr	r1, [pc, #548]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c00:	488b      	ldr	r0, [pc, #556]	; (8001e30 <HAL_UARTEx_RxEventCallback+0x284>)
 8001c02:	f003 feef 	bl	80059e4 <HAL_CRC_Calculate>
 8001c06:	4603      	mov	r3, r0
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	4b8a      	ldr	r3, [pc, #552]	; (8001e34 <HAL_UARTEx_RxEventCallback+0x288>)
 8001c0c:	801a      	strh	r2, [r3, #0]
					cmdDataSize); // Calculate data only by STM32 Hardware CRC.
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8001c0e:	4b87      	ldr	r3, [pc, #540]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001c10:	881b      	ldrh	r3, [r3, #0]
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b83      	ldr	r3, [pc, #524]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c18:	5c9b      	ldrb	r3, [r3, r2]
 8001c1a:	021b      	lsls	r3, r3, #8
					| Old_Rx_Buffer[cmdDataSize + 1]; // Read Expected CRC from Protocol.
 8001c1c:	b21a      	sxth	r2, r3
 8001c1e:	4b83      	ldr	r3, [pc, #524]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	497f      	ldr	r1, [pc, #508]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c28:	5ccb      	ldrb	r3, [r1, r3]
 8001c2a:	b21b      	sxth	r3, r3
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	b21b      	sxth	r3, r3
 8001c30:	b29a      	uxth	r2, r3
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8
 8001c32:	4b81      	ldr	r3, [pc, #516]	; (8001e38 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001c34:	801a      	strh	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001c36:	4b7f      	ldr	r3, [pc, #508]	; (8001e34 <HAL_UARTEx_RxEventCallback+0x288>)
 8001c38:	881b      	ldrh	r3, [r3, #0]
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b7e      	ldr	r3, [pc, #504]	; (8001e38 <HAL_UARTEx_RxEventCallback+0x28c>)
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	429a      	cmp	r2, r3
 8001c44:	bf0c      	ite	eq
 8001c46:	2301      	moveq	r3, #1
 8001c48:	2300      	movne	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 81c9 	beq.w	8001fe4 <HAL_UARTEx_RxEventCallback+0x438>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001c52:	2201      	movs	r2, #1
 8001c54:	2102      	movs	r1, #2
 8001c56:	4879      	ldr	r0, [pc, #484]	; (8001e3c <HAL_UARTEx_RxEventCallback+0x290>)
 8001c58:	f007 f848 	bl	8008cec <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c62:	4877      	ldr	r0, [pc, #476]	; (8001e40 <HAL_UARTEx_RxEventCallback+0x294>)
 8001c64:	f007 f842 	bl	8008cec <HAL_GPIO_WritePin>
				if (Old_Rx_Buffer[0] == 0x41 && cmdDataSize == 3) {	// Joint Jog q1
 8001c68:	4b6e      	ldr	r3, [pc, #440]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b41      	cmp	r3, #65	; 0x41
 8001c6e:	d106      	bne.n	8001c7e <HAL_UARTEx_RxEventCallback+0xd2>
 8001c70:	4b6e      	ldr	r3, [pc, #440]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d101      	bne.n	8001c7e <HAL_UARTEx_RxEventCallback+0xd2>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_UARTEx_RxEventCallback+0xd4>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d00b      	beq.n	8001c9c <HAL_UARTEx_RxEventCallback+0xf0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001c84:	4b67      	ldr	r3, [pc, #412]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c86:	785b      	ldrb	r3, [r3, #1]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	b25a      	sxtb	r2, r3
 8001c8c:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c8e:	789b      	ldrb	r3, [r3, #2]
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	4313      	orrs	r3, r2
 8001c94:	b25a      	sxtb	r2, r3
 8001c96:	4b6b      	ldr	r3, [pc, #428]	; (8001e44 <HAL_UARTEx_RxEventCallback+0x298>)
 8001c98:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001c9a:	e1a3      	b.n	8001fe4 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x42 && cmdDataSize == 3) {// Joint Jog q2
 8001c9c:	4b61      	ldr	r3, [pc, #388]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b42      	cmp	r3, #66	; 0x42
 8001ca2:	d106      	bne.n	8001cb2 <HAL_UARTEx_RxEventCallback+0x106>
 8001ca4:	4b61      	ldr	r3, [pc, #388]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d101      	bne.n	8001cb2 <HAL_UARTEx_RxEventCallback+0x106>
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <HAL_UARTEx_RxEventCallback+0x108>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00b      	beq.n	8001cd0 <HAL_UARTEx_RxEventCallback+0x124>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq2 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001cb8:	4b5a      	ldr	r3, [pc, #360]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001cba:	785b      	ldrb	r3, [r3, #1]
 8001cbc:	021b      	lsls	r3, r3, #8
 8001cbe:	b25a      	sxtb	r2, r3
 8001cc0:	4b58      	ldr	r3, [pc, #352]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001cc2:	789b      	ldrb	r3, [r3, #2]
 8001cc4:	b25b      	sxtb	r3, r3
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	b25a      	sxtb	r2, r3
 8001cca:	4b5f      	ldr	r3, [pc, #380]	; (8001e48 <HAL_UARTEx_RxEventCallback+0x29c>)
 8001ccc:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001cce:	e189      	b.n	8001fe4 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x43 && cmdDataSize == 3) {// Joint Jog q3
 8001cd0:	4b54      	ldr	r3, [pc, #336]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b43      	cmp	r3, #67	; 0x43
 8001cd6:	d106      	bne.n	8001ce6 <HAL_UARTEx_RxEventCallback+0x13a>
 8001cd8:	4b54      	ldr	r3, [pc, #336]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001cda:	881b      	ldrh	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d101      	bne.n	8001ce6 <HAL_UARTEx_RxEventCallback+0x13a>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <HAL_UARTEx_RxEventCallback+0x13c>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00b      	beq.n	8001d04 <HAL_UARTEx_RxEventCallback+0x158>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq3 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001cec:	4b4d      	ldr	r3, [pc, #308]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001cee:	785b      	ldrb	r3, [r3, #1]
 8001cf0:	021b      	lsls	r3, r3, #8
 8001cf2:	b25a      	sxtb	r2, r3
 8001cf4:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001cf6:	789b      	ldrb	r3, [r3, #2]
 8001cf8:	b25b      	sxtb	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b25a      	sxtb	r2, r3
 8001cfe:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_UARTEx_RxEventCallback+0x2a0>)
 8001d00:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d02:	e16f      	b.n	8001fe4 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x44 && cmdDataSize == 3) {// Joint Jog q4
 8001d04:	4b47      	ldr	r3, [pc, #284]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	2b44      	cmp	r3, #68	; 0x44
 8001d0a:	d106      	bne.n	8001d1a <HAL_UARTEx_RxEventCallback+0x16e>
 8001d0c:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d101      	bne.n	8001d1a <HAL_UARTEx_RxEventCallback+0x16e>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_UARTEx_RxEventCallback+0x170>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00b      	beq.n	8001d38 <HAL_UARTEx_RxEventCallback+0x18c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq4 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001d20:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d22:	785b      	ldrb	r3, [r3, #1]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	b25a      	sxtb	r2, r3
 8001d28:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d2a:	789b      	ldrb	r3, [r3, #2]
 8001d2c:	b25b      	sxtb	r3, r3
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	b25a      	sxtb	r2, r3
 8001d32:	4b47      	ldr	r3, [pc, #284]	; (8001e50 <HAL_UARTEx_RxEventCallback+0x2a4>)
 8001d34:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d36:	e155      	b.n	8001fe4 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x51 && cmdDataSize == 3) {// Linear Jog X
 8001d38:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b51      	cmp	r3, #81	; 0x51
 8001d3e:	d106      	bne.n	8001d4e <HAL_UARTEx_RxEventCallback+0x1a2>
 8001d40:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d101      	bne.n	8001d4e <HAL_UARTEx_RxEventCallback+0x1a2>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_UARTEx_RxEventCallback+0x1a4>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00b      	beq.n	8001d6c <HAL_UARTEx_RxEventCallback+0x1c0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001d54:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d56:	785b      	ldrb	r3, [r3, #1]
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	b25a      	sxtb	r2, r3
 8001d5c:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d5e:	789b      	ldrb	r3, [r3, #2]
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	4313      	orrs	r3, r2
 8001d64:	b25a      	sxtb	r2, r3
 8001d66:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001d68:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d6a:	e13b      	b.n	8001fe4 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x52 && cmdDataSize == 3) {// Linear Jog Y
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b52      	cmp	r3, #82	; 0x52
 8001d72:	d106      	bne.n	8001d82 <HAL_UARTEx_RxEventCallback+0x1d6>
 8001d74:	4b2d      	ldr	r3, [pc, #180]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001d76:	881b      	ldrh	r3, [r3, #0]
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d101      	bne.n	8001d82 <HAL_UARTEx_RxEventCallback+0x1d6>
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e000      	b.n	8001d84 <HAL_UARTEx_RxEventCallback+0x1d8>
 8001d82:	2300      	movs	r3, #0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00b      	beq.n	8001da0 <HAL_UARTEx_RxEventCallback+0x1f4>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dy = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001d88:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d8a:	785b      	ldrb	r3, [r3, #1]
 8001d8c:	021b      	lsls	r3, r3, #8
 8001d8e:	b25a      	sxtb	r2, r3
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001d92:	789b      	ldrb	r3, [r3, #2]
 8001d94:	b25b      	sxtb	r3, r3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b25a      	sxtb	r2, r3
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <HAL_UARTEx_RxEventCallback+0x2ac>)
 8001d9c:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001d9e:	e121      	b.n	8001fe4 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x53 && cmdDataSize == 3) {// Linear Jog Z
 8001da0:	4b20      	ldr	r3, [pc, #128]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b53      	cmp	r3, #83	; 0x53
 8001da6:	d106      	bne.n	8001db6 <HAL_UARTEx_RxEventCallback+0x20a>
 8001da8:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d101      	bne.n	8001db6 <HAL_UARTEx_RxEventCallback+0x20a>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_UARTEx_RxEventCallback+0x20c>
 8001db6:	2300      	movs	r3, #0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00b      	beq.n	8001dd4 <HAL_UARTEx_RxEventCallback+0x228>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dz = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001dbe:	785b      	ldrb	r3, [r3, #1]
 8001dc0:	021b      	lsls	r3, r3, #8
 8001dc2:	b25a      	sxtb	r2, r3
 8001dc4:	4b17      	ldr	r3, [pc, #92]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001dc6:	789b      	ldrb	r3, [r3, #2]
 8001dc8:	b25b      	sxtb	r3, r3
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	b25a      	sxtb	r2, r3
 8001dce:	4b23      	ldr	r3, [pc, #140]	; (8001e5c <HAL_UARTEx_RxEventCallback+0x2b0>)
 8001dd0:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001dd2:	e107      	b.n	8001fe4 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3) {// Linear Jog Yaw
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b54      	cmp	r3, #84	; 0x54
 8001dda:	d106      	bne.n	8001dea <HAL_UARTEx_RxEventCallback+0x23e>
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	2b03      	cmp	r3, #3
 8001de4:	d101      	bne.n	8001dea <HAL_UARTEx_RxEventCallback+0x23e>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e000      	b.n	8001dec <HAL_UARTEx_RxEventCallback+0x240>
 8001dea:	2300      	movs	r3, #0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00b      	beq.n	8001e08 <HAL_UARTEx_RxEventCallback+0x25c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001df2:	785b      	ldrb	r3, [r3, #1]
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	b25a      	sxtb	r2, r3
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001dfa:	789b      	ldrb	r3, [r3, #2]
 8001dfc:	b25b      	sxtb	r3, r3
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b25a      	sxtb	r2, r3
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_UARTEx_RxEventCallback+0x2b4>)
 8001e04:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001e06:	e0ed      	b.n	8001fe4 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5) { // Joint Jog 4q
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_UARTEx_RxEventCallback+0x278>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b61      	cmp	r3, #97	; 0x61
 8001e0e:	d129      	bne.n	8001e64 <HAL_UARTEx_RxEventCallback+0x2b8>
 8001e10:	4b06      	ldr	r3, [pc, #24]	; (8001e2c <HAL_UARTEx_RxEventCallback+0x280>)
 8001e12:	881b      	ldrh	r3, [r3, #0]
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d124      	bne.n	8001e64 <HAL_UARTEx_RxEventCallback+0x2b8>
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e023      	b.n	8001e66 <HAL_UARTEx_RxEventCallback+0x2ba>
 8001e1e:	bf00      	nop
 8001e20:	24000d54 	.word	0x24000d54
 8001e24:	24000350 	.word	0x24000350
 8001e28:	24000364 	.word	0x24000364
 8001e2c:	24000378 	.word	0x24000378
 8001e30:	240007e4 	.word	0x240007e4
 8001e34:	24000348 	.word	0x24000348
 8001e38:	2400034a 	.word	0x2400034a
 8001e3c:	58021000 	.word	0x58021000
 8001e40:	58020400 	.word	0x58020400
 8001e44:	2400032e 	.word	0x2400032e
 8001e48:	2400032f 	.word	0x2400032f
 8001e4c:	24000330 	.word	0x24000330
 8001e50:	24000331 	.word	0x24000331
 8001e54:	24000332 	.word	0x24000332
 8001e58:	24000333 	.word	0x24000333
 8001e5c:	24000334 	.word	0x24000334
 8001e60:	24000335 	.word	0x24000335
 8001e64:	2300      	movs	r3, #0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d014      	beq.n	8001e94 <HAL_UARTEx_RxEventCallback+0x2e8>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8001e6a:	4b94      	ldr	r3, [pc, #592]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001e6c:	785b      	ldrb	r3, [r3, #1]
 8001e6e:	b25a      	sxtb	r2, r3
 8001e70:	4b93      	ldr	r3, [pc, #588]	; (80020c0 <HAL_UARTEx_RxEventCallback+0x514>)
 8001e72:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 8001e74:	4b91      	ldr	r3, [pc, #580]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001e76:	789b      	ldrb	r3, [r3, #2]
 8001e78:	b25a      	sxtb	r2, r3
 8001e7a:	4b92      	ldr	r3, [pc, #584]	; (80020c4 <HAL_UARTEx_RxEventCallback+0x518>)
 8001e7c:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8001e7e:	4b8f      	ldr	r3, [pc, #572]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001e80:	78db      	ldrb	r3, [r3, #3]
 8001e82:	b25a      	sxtb	r2, r3
 8001e84:	4b90      	ldr	r3, [pc, #576]	; (80020c8 <HAL_UARTEx_RxEventCallback+0x51c>)
 8001e86:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8001e88:	4b8c      	ldr	r3, [pc, #560]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001e8a:	791b      	ldrb	r3, [r3, #4]
 8001e8c:	b25a      	sxtb	r2, r3
 8001e8e:	4b8f      	ldr	r3, [pc, #572]	; (80020cc <HAL_UARTEx_RxEventCallback+0x520>)
 8001e90:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001e92:	e0a7      	b.n	8001fe4 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5) { // Linear Jog X,Y,Z,Yaw
 8001e94:	4b89      	ldr	r3, [pc, #548]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b71      	cmp	r3, #113	; 0x71
 8001e9a:	d106      	bne.n	8001eaa <HAL_UARTEx_RxEventCallback+0x2fe>
 8001e9c:	4b8c      	ldr	r3, [pc, #560]	; (80020d0 <HAL_UARTEx_RxEventCallback+0x524>)
 8001e9e:	881b      	ldrh	r3, [r3, #0]
 8001ea0:	b29b      	uxth	r3, r3
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	d101      	bne.n	8001eaa <HAL_UARTEx_RxEventCallback+0x2fe>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_UARTEx_RxEventCallback+0x300>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d014      	beq.n	8001eda <HAL_UARTEx_RxEventCallback+0x32e>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = Old_Rx_Buffer[1];
 8001eb0:	4b82      	ldr	r3, [pc, #520]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001eb2:	785b      	ldrb	r3, [r3, #1]
 8001eb4:	b25a      	sxtb	r2, r3
 8001eb6:	4b87      	ldr	r3, [pc, #540]	; (80020d4 <HAL_UARTEx_RxEventCallback+0x528>)
 8001eb8:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 8001eba:	4b80      	ldr	r3, [pc, #512]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001ebc:	789b      	ldrb	r3, [r3, #2]
 8001ebe:	b25a      	sxtb	r2, r3
 8001ec0:	4b85      	ldr	r3, [pc, #532]	; (80020d8 <HAL_UARTEx_RxEventCallback+0x52c>)
 8001ec2:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 8001ec4:	4b7d      	ldr	r3, [pc, #500]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001ec6:	78db      	ldrb	r3, [r3, #3]
 8001ec8:	b25a      	sxtb	r2, r3
 8001eca:	4b84      	ldr	r3, [pc, #528]	; (80020dc <HAL_UARTEx_RxEventCallback+0x530>)
 8001ecc:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 8001ece:	4b7b      	ldr	r3, [pc, #492]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001ed0:	791b      	ldrb	r3, [r3, #4]
 8001ed2:	b25a      	sxtb	r2, r3
 8001ed4:	4b82      	ldr	r3, [pc, #520]	; (80020e0 <HAL_UARTEx_RxEventCallback+0x534>)
 8001ed6:	701a      	strb	r2, [r3, #0]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001ed8:	e084      	b.n	8001fe4 <HAL_UARTEx_RxEventCallback+0x438>
				} else if (Old_Rx_Buffer[0] == 0x81 && cmdDataSize == 2) {// Servo
 8001eda:	4b78      	ldr	r3, [pc, #480]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b81      	cmp	r3, #129	; 0x81
 8001ee0:	d106      	bne.n	8001ef0 <HAL_UARTEx_RxEventCallback+0x344>
 8001ee2:	4b7b      	ldr	r3, [pc, #492]	; (80020d0 <HAL_UARTEx_RxEventCallback+0x524>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d101      	bne.n	8001ef0 <HAL_UARTEx_RxEventCallback+0x344>
 8001eec:	2301      	movs	r3, #1
 8001eee:	e000      	b.n	8001ef2 <HAL_UARTEx_RxEventCallback+0x346>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d015      	beq.n	8001f22 <HAL_UARTEx_RxEventCallback+0x376>
					gripperstate = Old_Rx_Buffer[1];
 8001ef6:	4b71      	ldr	r3, [pc, #452]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001ef8:	785b      	ldrb	r3, [r3, #1]
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b79      	ldr	r3, [pc, #484]	; (80020e4 <HAL_UARTEx_RxEventCallback+0x538>)
 8001efe:	601a      	str	r2, [r3, #0]
					if (gripperstate == 0) {
 8001f00:	4b78      	ldr	r3, [pc, #480]	; (80020e4 <HAL_UARTEx_RxEventCallback+0x538>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	bf0c      	ite	eq
 8001f08:	2301      	moveq	r3, #1
 8001f0a:	2300      	movne	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_UARTEx_RxEventCallback+0x36e>
						gripper.GripperOpen();
 8001f12:	4875      	ldr	r0, [pc, #468]	; (80020e8 <HAL_UARTEx_RxEventCallback+0x53c>)
 8001f14:	f7ff f8ae 	bl	8001074 <_ZN10ServoMotor11GripperOpenEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001f18:	e064      	b.n	8001fe4 <HAL_UARTEx_RxEventCallback+0x438>
					} else {
						gripper.GripperClose();
 8001f1a:	4873      	ldr	r0, [pc, #460]	; (80020e8 <HAL_UARTEx_RxEventCallback+0x53c>)
 8001f1c:	f7ff f894 	bl	8001048 <_ZN10ServoMotor12GripperCloseEv>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001f20:	e060      	b.n	8001fe4 <HAL_UARTEx_RxEventCallback+0x438>
					}

				} else if (Old_Rx_Buffer[0] == 0x91 && cmdDataSize == 8) {
 8001f22:	4b66      	ldr	r3, [pc, #408]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b91      	cmp	r3, #145	; 0x91
 8001f28:	d106      	bne.n	8001f38 <HAL_UARTEx_RxEventCallback+0x38c>
 8001f2a:	4b69      	ldr	r3, [pc, #420]	; (80020d0 <HAL_UARTEx_RxEventCallback+0x524>)
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	2b08      	cmp	r3, #8
 8001f32:	d101      	bne.n	8001f38 <HAL_UARTEx_RxEventCallback+0x38c>
 8001f34:	2301      	movs	r3, #1
 8001f36:	e000      	b.n	8001f3a <HAL_UARTEx_RxEventCallback+0x38e>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d052      	beq.n	8001fe4 <HAL_UARTEx_RxEventCallback+0x438>
					px = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2] ;
 8001f3e:	4b5f      	ldr	r3, [pc, #380]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f40:	785b      	ldrb	r3, [r3, #1]
 8001f42:	021b      	lsls	r3, r3, #8
 8001f44:	4a5d      	ldr	r2, [pc, #372]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f46:	7892      	ldrb	r2, [r2, #2]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f52:	4b66      	ldr	r3, [pc, #408]	; (80020ec <HAL_UARTEx_RxEventCallback+0x540>)
 8001f54:	edc3 7a00 	vstr	s15, [r3]
					py = (Old_Rx_Buffer[3] << 8) | Old_Rx_Buffer[4] ;
 8001f58:	4b58      	ldr	r3, [pc, #352]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f5a:	78db      	ldrb	r3, [r3, #3]
 8001f5c:	021b      	lsls	r3, r3, #8
 8001f5e:	4a57      	ldr	r2, [pc, #348]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f60:	7912      	ldrb	r2, [r2, #4]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	ee07 3a90 	vmov	s15, r3
 8001f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f6c:	4b60      	ldr	r3, [pc, #384]	; (80020f0 <HAL_UARTEx_RxEventCallback+0x544>)
 8001f6e:	edc3 7a00 	vstr	s15, [r3]
					pz = (Old_Rx_Buffer[5] << 8) | Old_Rx_Buffer[6] ;
 8001f72:	4b52      	ldr	r3, [pc, #328]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f74:	795b      	ldrb	r3, [r3, #5]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	4a50      	ldr	r2, [pc, #320]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f7a:	7992      	ldrb	r2, [r2, #6]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f86:	4b5b      	ldr	r3, [pc, #364]	; (80020f4 <HAL_UARTEx_RxEventCallback+0x548>)
 8001f88:	edc3 7a00 	vstr	s15, [r3]
					pyaw = Old_Rx_Buffer[7];
 8001f8c:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <HAL_UARTEx_RxEventCallback+0x510>)
 8001f8e:	79db      	ldrb	r3, [r3, #7]
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f98:	4b57      	ldr	r3, [pc, #348]	; (80020f8 <HAL_UARTEx_RxEventCallback+0x54c>)
 8001f9a:	edc3 7a00 	vstr	s15, [r3]
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001f9e:	e021      	b.n	8001fe4 <HAL_UARTEx_RxEventCallback+0x438>
				}
			}
		} else {
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	4855      	ldr	r0, [pc, #340]	; (80020fc <HAL_UARTEx_RxEventCallback+0x550>)
 8001fa6:	f006 fea1 	bl	8008cec <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001faa:	2201      	movs	r2, #1
 8001fac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fb0:	4853      	ldr	r0, [pc, #332]	; (8002100 <HAL_UARTEx_RxEventCallback+0x554>)
 8001fb2:	f006 fe9b 	bl	8008cec <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "CRC16 error\n", 12);
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	4952      	ldr	r1, [pc, #328]	; (8002104 <HAL_UARTEx_RxEventCallback+0x558>)
 8001fba:	4853      	ldr	r0, [pc, #332]	; (8002108 <HAL_UARTEx_RxEventCallback+0x55c>)
 8001fbc:	f00a ffea 	bl	800cf94 <HAL_UART_Transmit_DMA>
 8001fc0:	e011      	b.n	8001fe6 <HAL_UARTEx_RxEventCallback+0x43a>
		}
	} else {
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	2102      	movs	r1, #2
 8001fc6:	484d      	ldr	r0, [pc, #308]	; (80020fc <HAL_UARTEx_RxEventCallback+0x550>)
 8001fc8:	f006 fe90 	bl	8008cec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fd2:	484b      	ldr	r0, [pc, #300]	; (8002100 <HAL_UARTEx_RxEventCallback+0x554>)
 8001fd4:	f006 fe8a 	bl	8008cec <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart3, (uint8_t*) "Protocol match error\n", 21);
 8001fd8:	2215      	movs	r2, #21
 8001fda:	494c      	ldr	r1, [pc, #304]	; (800210c <HAL_UARTEx_RxEventCallback+0x560>)
 8001fdc:	484a      	ldr	r0, [pc, #296]	; (8002108 <HAL_UARTEx_RxEventCallback+0x55c>)
 8001fde:	f00a ffd9 	bl	800cf94 <HAL_UART_Transmit_DMA>
 8001fe2:	e000      	b.n	8001fe6 <HAL_UARTEx_RxEventCallback+0x43a>
			if (CRCValue == ExpectedCRCValue) { // Check if CRC value is equal to Expected CRC value.
 8001fe4:	bf00      	nop
	}
	/* start the DMA again */
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer,
 8001fe6:	2214      	movs	r2, #20
 8001fe8:	4949      	ldr	r1, [pc, #292]	; (8002110 <HAL_UARTEx_RxEventCallback+0x564>)
 8001fea:	4847      	ldr	r0, [pc, #284]	; (8002108 <HAL_UARTEx_RxEventCallback+0x55c>)
 8001fec:	f00c ff25 	bl	800ee3a <HAL_UARTEx_ReceiveToIdle_DMA>
			Rx_BUFFER_SIZE);
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001ff0:	4b48      	ldr	r3, [pc, #288]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a48      	ldr	r2, [pc, #288]	; (8002118 <HAL_UARTEx_RxEventCallback+0x56c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d04a      	beq.n	8002090 <HAL_UARTEx_RxEventCallback+0x4e4>
 8001ffa:	4b46      	ldr	r3, [pc, #280]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a47      	ldr	r2, [pc, #284]	; (800211c <HAL_UARTEx_RxEventCallback+0x570>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d045      	beq.n	8002090 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002004:	4b43      	ldr	r3, [pc, #268]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a45      	ldr	r2, [pc, #276]	; (8002120 <HAL_UARTEx_RxEventCallback+0x574>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d040      	beq.n	8002090 <HAL_UARTEx_RxEventCallback+0x4e4>
 800200e:	4b41      	ldr	r3, [pc, #260]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a44      	ldr	r2, [pc, #272]	; (8002124 <HAL_UARTEx_RxEventCallback+0x578>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d03b      	beq.n	8002090 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002018:	4b3e      	ldr	r3, [pc, #248]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a42      	ldr	r2, [pc, #264]	; (8002128 <HAL_UARTEx_RxEventCallback+0x57c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d036      	beq.n	8002090 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002022:	4b3c      	ldr	r3, [pc, #240]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a41      	ldr	r2, [pc, #260]	; (800212c <HAL_UARTEx_RxEventCallback+0x580>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d031      	beq.n	8002090 <HAL_UARTEx_RxEventCallback+0x4e4>
 800202c:	4b39      	ldr	r3, [pc, #228]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a3f      	ldr	r2, [pc, #252]	; (8002130 <HAL_UARTEx_RxEventCallback+0x584>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d02c      	beq.n	8002090 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002036:	4b37      	ldr	r3, [pc, #220]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a3e      	ldr	r2, [pc, #248]	; (8002134 <HAL_UARTEx_RxEventCallback+0x588>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d027      	beq.n	8002090 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002040:	4b34      	ldr	r3, [pc, #208]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a3c      	ldr	r2, [pc, #240]	; (8002138 <HAL_UARTEx_RxEventCallback+0x58c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d022      	beq.n	8002090 <HAL_UARTEx_RxEventCallback+0x4e4>
 800204a:	4b32      	ldr	r3, [pc, #200]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a3b      	ldr	r2, [pc, #236]	; (800213c <HAL_UARTEx_RxEventCallback+0x590>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d01d      	beq.n	8002090 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002054:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a39      	ldr	r2, [pc, #228]	; (8002140 <HAL_UARTEx_RxEventCallback+0x594>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d018      	beq.n	8002090 <HAL_UARTEx_RxEventCallback+0x4e4>
 800205e:	4b2d      	ldr	r3, [pc, #180]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a38      	ldr	r2, [pc, #224]	; (8002144 <HAL_UARTEx_RxEventCallback+0x598>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d013      	beq.n	8002090 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002068:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a36      	ldr	r2, [pc, #216]	; (8002148 <HAL_UARTEx_RxEventCallback+0x59c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00e      	beq.n	8002090 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002072:	4b28      	ldr	r3, [pc, #160]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a35      	ldr	r2, [pc, #212]	; (800214c <HAL_UARTEx_RxEventCallback+0x5a0>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d009      	beq.n	8002090 <HAL_UARTEx_RxEventCallback+0x4e4>
 800207c:	4b25      	ldr	r3, [pc, #148]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a33      	ldr	r2, [pc, #204]	; (8002150 <HAL_UARTEx_RxEventCallback+0x5a4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d004      	beq.n	8002090 <HAL_UARTEx_RxEventCallback+0x4e4>
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a32      	ldr	r2, [pc, #200]	; (8002154 <HAL_UARTEx_RxEventCallback+0x5a8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d108      	bne.n	80020a2 <HAL_UARTEx_RxEventCallback+0x4f6>
 8002090:	4b20      	ldr	r3, [pc, #128]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	4b1f      	ldr	r3, [pc, #124]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 0208 	bic.w	r2, r2, #8
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	e008      	b.n	80020b4 <HAL_UARTEx_RxEventCallback+0x508>
 80020a2:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_UARTEx_RxEventCallback+0x568>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0204 	bic.w	r2, r2, #4
 80020b0:	601a      	str	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bdb0      	pop	{r4, r5, r7, pc}
 80020bc:	24000350 	.word	0x24000350
 80020c0:	2400032e 	.word	0x2400032e
 80020c4:	2400032f 	.word	0x2400032f
 80020c8:	24000330 	.word	0x24000330
 80020cc:	24000331 	.word	0x24000331
 80020d0:	24000378 	.word	0x24000378
 80020d4:	24000332 	.word	0x24000332
 80020d8:	24000333 	.word	0x24000333
 80020dc:	24000334 	.word	0x24000334
 80020e0:	24000335 	.word	0x24000335
 80020e4:	2400034c 	.word	0x2400034c
 80020e8:	24000310 	.word	0x24000310
 80020ec:	24000338 	.word	0x24000338
 80020f0:	2400033c 	.word	0x2400033c
 80020f4:	24000340 	.word	0x24000340
 80020f8:	24000344 	.word	0x24000344
 80020fc:	58021000 	.word	0x58021000
 8002100:	58020400 	.word	0x58020400
 8002104:	080125f8 	.word	0x080125f8
 8002108:	24000d54 	.word	0x24000d54
 800210c:	08012608 	.word	0x08012608
 8002110:	24000364 	.word	0x24000364
 8002114:	24000cdc 	.word	0x24000cdc
 8002118:	40020010 	.word	0x40020010
 800211c:	40020028 	.word	0x40020028
 8002120:	40020040 	.word	0x40020040
 8002124:	40020058 	.word	0x40020058
 8002128:	40020070 	.word	0x40020070
 800212c:	40020088 	.word	0x40020088
 8002130:	400200a0 	.word	0x400200a0
 8002134:	400200b8 	.word	0x400200b8
 8002138:	40020410 	.word	0x40020410
 800213c:	40020428 	.word	0x40020428
 8002140:	40020440 	.word	0x40020440
 8002144:	40020458 	.word	0x40020458
 8002148:	40020470 	.word	0x40020470
 800214c:	40020488 	.word	0x40020488
 8002150:	400204a0 	.word	0x400204a0
 8002154:	400204b8 	.word	0x400204b8

08002158 <_ZN11robot_jointC1Ev>:
struct joint_state {
float q1, q2, q3, q4;
};
typedef struct joint_state joint_config;

struct robot_joint {
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f04f 0200 	mov.w	r2, #0
 8002166:	65da      	str	r2, [r3, #92]	; 0x5c
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	661a      	str	r2, [r3, #96]	; 0x60
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002176:	665a      	str	r2, [r3, #100]	; 0x64
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	669a      	str	r2, [r3, #104]	; 0x68
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002186:	66da      	str	r2, [r3, #108]	; 0x6c
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	671a      	str	r2, [r3, #112]	; 0x70
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	675a      	str	r2, [r3, #116]	; 0x74
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f04f 0200 	mov.w	r2, #0
 800219e:	679a      	str	r2, [r3, #120]	; 0x78
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a06      	ldr	r2, [pc, #24]	; (80021bc <_ZN11robot_jointC1Ev+0x64>)
 80021a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <_ZN11robot_jointC1Ev+0x68>)
 80021aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	3dc28f5c 	.word	0x3dc28f5c
 80021c0:	387ba882 	.word	0x387ba882

080021c4 <_Z10Update_ivkffffffff>:
};
typedef struct robot_kinematic fcb_kinematic;

fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;

void Update_ivk(float q1, float q2, float q3, float q4, float Vx, float Vy, float Vz, float Wz) {
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b090      	sub	sp, #64	; 0x40
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	ed87 0a07 	vstr	s0, [r7, #28]
 80021ce:	edc7 0a06 	vstr	s1, [r7, #24]
 80021d2:	ed87 1a05 	vstr	s2, [r7, #20]
 80021d6:	edc7 1a04 	vstr	s3, [r7, #16]
 80021da:	ed87 2a03 	vstr	s4, [r7, #12]
 80021de:	edc7 2a02 	vstr	s5, [r7, #8]
 80021e2:	ed87 3a01 	vstr	s6, [r7, #4]
 80021e6:	edc7 3a00 	vstr	s7, [r7]
float S13 = sin(q1 + q3);
 80021ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80021ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80021f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f6:	eeb0 0a67 	vmov.f32	s0, s15
 80021fa:	f7ff fcb7 	bl	8001b6c <_ZSt3sinf>
 80021fe:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
float C13 = cos(q1 + q3);
 8002202:	ed97 7a07 	vldr	s14, [r7, #28]
 8002206:	edd7 7a05 	vldr	s15, [r7, #20]
 800220a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220e:	eeb0 0a67 	vmov.f32	s0, s15
 8002212:	f7ff fc9b 	bl	8001b4c <_ZSt3cosf>
 8002216:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
float S3 = sin(q3);
 800221a:	ed97 0a05 	vldr	s0, [r7, #20]
 800221e:	f7ff fca5 	bl	8001b6c <_ZSt3sinf>
 8002222:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
float S1 = sin(q1);
 8002226:	ed97 0a07 	vldr	s0, [r7, #28]
 800222a:	f7ff fc9f 	bl	8001b6c <_ZSt3sinf>
 800222e:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
float C1 = cos(q1);
 8002232:	ed97 0a07 	vldr	s0, [r7, #28]
 8002236:	f7ff fc89 	bl	8001b4c <_ZSt3cosf>
 800223a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
float L12 = L1 + L2;
 800223e:	4b53      	ldr	r3, [pc, #332]	; (800238c <_Z10Update_ivkffffffff+0x1c8>)
 8002240:	ed93 7a00 	vldr	s14, [r3]
 8002244:	4b52      	ldr	r3, [pc, #328]	; (8002390 <_Z10Update_ivkffffffff+0x1cc>)
 8002246:	edd3 7a00 	vldr	s15, [r3]
 800224a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800224e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
float L3S3 = L3 * S3;
 8002252:	4b50      	ldr	r3, [pc, #320]	; (8002394 <_Z10Update_ivkffffffff+0x1d0>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800225c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002260:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

w_q1 = (Vx * C13 + Vy * S13) / (S3 * L12);
 8002264:	ed97 7a03 	vldr	s14, [r7, #12]
 8002268:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800226c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002270:	edd7 6a02 	vldr	s13, [r7, #8]
 8002274:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800227c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002280:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8002284:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002288:	ee27 7a27 	vmul.f32	s14, s14, s15
 800228c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002290:	4b41      	ldr	r3, [pc, #260]	; (8002398 <_Z10Update_ivkffffffff+0x1d4>)
 8002292:	edc3 7a00 	vstr	s15, [r3]
w_q2 = Vz;
 8002296:	4a41      	ldr	r2, [pc, #260]	; (800239c <_Z10Update_ivkffffffff+0x1d8>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6013      	str	r3, [r2, #0]
w_q3 = -(Vx * (L3 * C13 + L1 * C1 + L2 * C1)) / (L3S3 * L12)
 800229c:	4b3d      	ldr	r3, [pc, #244]	; (8002394 <_Z10Update_ivkffffffff+0x1d0>)
 800229e:	ed93 7a00 	vldr	s14, [r3]
 80022a2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80022a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022aa:	4b38      	ldr	r3, [pc, #224]	; (800238c <_Z10Update_ivkffffffff+0x1c8>)
 80022ac:	edd3 6a00 	vldr	s13, [r3]
 80022b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80022b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022bc:	4b34      	ldr	r3, [pc, #208]	; (8002390 <_Z10Update_ivkffffffff+0x1cc>)
 80022be:	edd3 6a00 	vldr	s13, [r3]
 80022c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80022c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d6:	eef1 6a67 	vneg.f32	s13, s15
 80022da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80022de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80022e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
		- (Vy * (L3 * S13 + L1 * S1 + L2 * S1)) / (L3S3 * L12);
 80022ea:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <_Z10Update_ivkffffffff+0x1d0>)
 80022ec:	edd3 6a00 	vldr	s13, [r3]
 80022f0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80022f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <_Z10Update_ivkffffffff+0x1c8>)
 80022fa:	ed93 6a00 	vldr	s12, [r3]
 80022fe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002302:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002306:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800230a:	4b21      	ldr	r3, [pc, #132]	; (8002390 <_Z10Update_ivkffffffff+0x1cc>)
 800230c:	ed93 6a00 	vldr	s12, [r3]
 8002310:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002314:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002318:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800231c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002320:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8002324:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002328:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800232c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002330:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002334:	ee77 7a67 	vsub.f32	s15, s14, s15
w_q3 = -(Vx * (L3 * C13 + L1 * C1 + L2 * C1)) / (L3S3 * L12)
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <_Z10Update_ivkffffffff+0x1dc>)
 800233a:	edc3 7a00 	vstr	s15, [r3]
w_q4 = (Vx * C1 + Vy * S1 + L3 * Wz * S3) / (L3S3);
 800233e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002342:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002346:	ee27 7a27 	vmul.f32	s14, s14, s15
 800234a:	edd7 6a02 	vldr	s13, [r7, #8]
 800234e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002352:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002356:	ee37 7a27 	vadd.f32	s14, s14, s15
 800235a:	4b0e      	ldr	r3, [pc, #56]	; (8002394 <_Z10Update_ivkffffffff+0x1d0>)
 800235c:	edd3 6a00 	vldr	s13, [r3]
 8002360:	edd7 7a00 	vldr	s15, [r7]
 8002364:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002368:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800236c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002370:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002374:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002378:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <_Z10Update_ivkffffffff+0x1e0>)
 800237e:	edc3 7a00 	vstr	s15, [r3]

};
 8002382:	bf00      	nop
 8002384:	3740      	adds	r7, #64	; 0x40
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	24000000 	.word	0x24000000
 8002390:	24000004 	.word	0x24000004
 8002394:	24000008 	.word	0x24000008
 8002398:	240003c0 	.word	0x240003c0
 800239c:	240003c4 	.word	0x240003c4
 80023a0:	240003c8 	.word	0x240003c8
 80023a4:	240003cc 	.word	0x240003cc

080023a8 <_Z12KalmanFilterf11robot_joint>:
//	p12 = -((P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)) - 1)*((Q*pow(dt,3))/2 + P22*dt + P12);
//	p21 = P21 + P22*dt + (Q*pow(dt,3))/2 - (((Q*pow(dt,3))/2 + P22*dt + P21)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
//	p22 = P22 + Q*pow(dt,2) - (((Q*pow(dt,3))/2 + P22*dt + P12)*((Q*pow(dt,3))/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
//}

fcb_joint KalmanFilter(float theta_k, fcb_joint joint) {
 80023a8:	b084      	sub	sp, #16
 80023aa:	b580      	push	{r7, lr}
 80023ac:	ed2d 8b08 	vpush	{d8-d11}
 80023b0:	b08a      	sub	sp, #40	; 0x28
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	ed87 0a00 	vstr	s0, [r7]
 80023ba:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80023be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	bug1 = joint.Encoder;
float X1 = joint.X11;
 80023c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023c6:	627b      	str	r3, [r7, #36]	; 0x24
float X2 = joint.X21;
 80023c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023cc:	623b      	str	r3, [r7, #32]
float P11 = joint.p11;
 80023ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80023d2:	61fb      	str	r3, [r7, #28]
float P12 = joint.p12;
 80023d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80023d8:	61bb      	str	r3, [r7, #24]
float P21 = joint.p21;
 80023da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023de:	617b      	str	r3, [r7, #20]
float P22 = joint.p22;
 80023e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023e4:	613b      	str	r3, [r7, #16]
float Q = joint.Q;
 80023e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80023ea:	60fb      	str	r3, [r7, #12]
float R = joint.R;
 80023ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80023f0:	60bb      	str	r3, [r7, #8]

joint.X11 =
		X1 + (X2 * dt)
 80023f2:	4bef      	ldr	r3, [pc, #956]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80023f4:	ed93 7a00 	vldr	s14, [r3]
 80023f8:	edd7 7a08 	vldr	s15, [r7, #32]
 80023fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002400:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002408:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
				- ((X1 - theta_k + X2 * dt)
 800240c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002410:	edd7 7a00 	vldr	s15, [r7]
 8002414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002418:	4be5      	ldr	r3, [pc, #916]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 800241a:	edd3 6a00 	vldr	s13, [r3]
 800241e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800242a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 800242e:	4be0      	ldr	r3, [pc, #896]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002430:	ed93 7a00 	vldr	s14, [r3]
 8002434:	edd7 7a05 	vldr	s15, [r7, #20]
 8002438:	ee27 7a27 	vmul.f32	s14, s14, s15
 800243c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002440:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002444:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002448:	edd7 7a03 	vldr	s15, [r7, #12]
 800244c:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002450:	4bd7      	ldr	r3, [pc, #860]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002452:	edd3 7a00 	vldr	s15, [r3]
 8002456:	2004      	movs	r0, #4
 8002458:	eeb0 0a67 	vmov.f32	s0, s15
 800245c:	f001 fae0 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002460:	eeb0 7b40 	vmov.f64	d7, d0
 8002464:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002468:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800246c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002470:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt)))
 8002474:	4bce      	ldr	r3, [pc, #824]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002476:	ed93 7a00 	vldr	s14, [r3]
 800247a:	edd7 7a04 	vldr	s15, [r7, #16]
 800247e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002482:	edd7 7a06 	vldr	s15, [r7, #24]
 8002486:	ee37 7a27 	vadd.f32	s14, s14, s15
 800248a:	4bc9      	ldr	r3, [pc, #804]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002494:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002498:	ee36 7b07 	vadd.f64	d7, d6, d7
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 800249c:	ee29 9b07 	vmul.f64	d9, d9, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 80024a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80024a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80024a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024ac:	4bc0      	ldr	r3, [pc, #768]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80024ae:	edd3 6a00 	vldr	s13, [r3]
 80024b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80024b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024be:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80024c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80024c6:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80024ca:	4bb9      	ldr	r3, [pc, #740]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	2004      	movs	r0, #4
 80024d2:	eeb0 0a67 	vmov.f32	s0, s15
 80024d6:	f001 faa3 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024da:	eeb0 7b40 	vmov.f64	d7, d0
 80024de:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80024e2:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80024e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024ea:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt));
 80024ee:	4bb0      	ldr	r3, [pc, #704]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80024f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8002500:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002504:	4baa      	ldr	r3, [pc, #680]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800250e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002512:	ee36 6b07 	vadd.f64	d6, d6, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002516:	ee89 7b06 	vdiv.f64	d7, d9, d6
				- ((X1 - theta_k + X2 * dt)
 800251a:	ee38 7b47 	vsub.f64	d7, d8, d7
 800251e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.X11 =
 8002522:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
joint.X21 = X2
 8002526:	edd7 7a08 	vldr	s15, [r7, #32]
 800252a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21) * (X1 - theta_k + X2 * dt))
 800252e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002532:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002536:	4b9e      	ldr	r3, [pc, #632]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002538:	edd3 7a00 	vldr	s15, [r3]
 800253c:	2003      	movs	r0, #3
 800253e:	eeb0 0a67 	vmov.f32	s0, s15
 8002542:	f001 fa6d 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002546:	eeb0 7b40 	vmov.f64	d7, d0
 800254a:	ee29 7b07 	vmul.f64	d7, d9, d7
 800254e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002552:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002556:	4b96      	ldr	r3, [pc, #600]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002558:	ed93 7a00 	vldr	s14, [r3]
 800255c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002560:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002564:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002568:	ee36 6b07 	vadd.f64	d6, d6, d7
 800256c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002570:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002574:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002578:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800257c:	edd7 7a00 	vldr	s15, [r7]
 8002580:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002584:	4b8a      	ldr	r3, [pc, #552]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002586:	edd3 5a00 	vldr	s11, [r3]
 800258a:	edd7 7a08 	vldr	s15, [r7, #32]
 800258e:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8002592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002596:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800259a:	ee26 9b07 	vmul.f64	d9, d6, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 800259e:	ed97 7a07 	vldr	s14, [r7, #28]
 80025a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80025a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025aa:	4b81      	ldr	r3, [pc, #516]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80025ac:	edd3 6a00 	vldr	s13, [r3]
 80025b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80025b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025bc:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80025c0:	edd7 7a03 	vldr	s15, [r7, #12]
 80025c4:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80025c8:	4b79      	ldr	r3, [pc, #484]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	2004      	movs	r0, #4
 80025d0:	eeb0 0a67 	vmov.f32	s0, s15
 80025d4:	f001 fa24 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80025d8:	eeb0 7b40 	vmov.f64	d7, d0
 80025dc:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80025e0:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80025e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80025e8:	ee3a 6b07 	vadd.f64	d6, d10, d7
						+ dt * (P12 + P22 * dt));
 80025ec:	4b70      	ldr	r3, [pc, #448]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80025ee:	ed93 7a00 	vldr	s14, [r3]
 80025f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80025f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80025fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002602:	4b6b      	ldr	r3, [pc, #428]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002604:	edd3 7a00 	vldr	s15, [r3]
 8002608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002610:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002614:	ee89 7b06 	vdiv.f64	d7, d9, d6
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21) * (X1 - theta_k + X2 * dt))
 8002618:	ee38 7b47 	vsub.f64	d7, d8, d7
 800261c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.X21 = X2
 8002620:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
joint.p11 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002624:	4b62      	ldr	r3, [pc, #392]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002626:	ed93 7a00 	vldr	s14, [r3]
 800262a:	edd7 7a05 	vldr	s15, [r7, #20]
 800262e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002632:	edd7 7a07 	vldr	s15, [r7, #28]
 8002636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800263a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 800263e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002642:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002646:	4b5a      	ldr	r3, [pc, #360]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	2004      	movs	r0, #4
 800264e:	eeb0 0a67 	vmov.f32	s0, s15
 8002652:	f001 f9e5 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002656:	eeb0 7b40 	vmov.f64	d7, d0
 800265a:	ee29 6b07 	vmul.f64	d6, d9, d7
 800265e:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002662:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002666:	ee38 6b07 	vadd.f64	d6, d8, d7
 800266a:	4b51      	ldr	r3, [pc, #324]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 800266c:	ed93 7a00 	vldr	s14, [r3]
 8002670:	edd7 7a04 	vldr	s15, [r7, #16]
 8002674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002678:	edd7 7a06 	vldr	s15, [r7, #24]
 800267c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002680:	4b4b      	ldr	r3, [pc, #300]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002682:	edd3 7a00 	vldr	s15, [r3]
 8002686:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800268e:	ee36 8b07 	vadd.f64	d8, d6, d7
		/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002692:	ed97 7a07 	vldr	s14, [r7, #28]
 8002696:	edd7 7a02 	vldr	s15, [r7, #8]
 800269a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800269e:	4b44      	ldr	r3, [pc, #272]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026a0:	edd3 6a00 	vldr	s13, [r3]
 80026a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80026a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026b0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80026b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80026b8:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80026bc:	4b3c      	ldr	r3, [pc, #240]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026be:	edd3 7a00 	vldr	s15, [r3]
 80026c2:	2004      	movs	r0, #4
 80026c4:	eeb0 0a67 	vmov.f32	s0, s15
 80026c8:	f001 f9aa 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80026cc:	eeb0 7b40 	vmov.f64	d7, d0
 80026d0:	ee2a 6b07 	vmul.f64	d6, d10, d7
 80026d4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80026d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80026dc:	ee39 6b07 	vadd.f64	d6, d9, d7
 80026e0:	4b33      	ldr	r3, [pc, #204]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026e2:	ed93 7a00 	vldr	s14, [r3]
 80026e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80026ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80026f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80026f6:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 80026f8:	edd3 7a00 	vldr	s15, [r3]
 80026fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002700:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002704:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002708:	ee88 7b06 	vdiv.f64	d7, d8, d6
		- 1) * (P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt));
 800270c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002710:	ee37 7b46 	vsub.f64	d7, d7, d6
joint.p11 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002714:	eeb1 8b47 	vneg.f64	d8, d7
		- 1) * (P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt));
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 800271a:	ed93 7a00 	vldr	s14, [r3]
 800271e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002722:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002726:	edd7 7a07 	vldr	s15, [r7, #28]
 800272a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800272e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002732:	edd7 7a03 	vldr	s15, [r7, #12]
 8002736:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800273a:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 800273c:	edd3 7a00 	vldr	s15, [r3]
 8002740:	2004      	movs	r0, #4
 8002742:	eeb0 0a67 	vmov.f32	s0, s15
 8002746:	f001 f96b 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 800274a:	eeb0 7b40 	vmov.f64	d7, d0
 800274e:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8002752:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002756:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800275a:	ee39 6b07 	vadd.f64	d6, d9, d7
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002760:	ed93 7a00 	vldr	s14, [r3]
 8002764:	edd7 7a04 	vldr	s15, [r7, #16]
 8002768:	ee27 7a27 	vmul.f32	s14, s14, s15
 800276c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002770:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800277e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002782:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002786:	ee28 7b07 	vmul.f64	d7, d8, d7
 800278a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p11 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 800278e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
joint.p12 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002792:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <_Z12KalmanFilterf11robot_joint+0x408>)
 8002794:	ed93 7a00 	vldr	s14, [r3]
 8002798:	edd7 7a05 	vldr	s15, [r7, #20]
 800279c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80027a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a8:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80027ac:	e002      	b.n	80027b4 <_Z12KalmanFilterf11robot_joint+0x40c>
 80027ae:	bf00      	nop
 80027b0:	24000034 	.word	0x24000034
 80027b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80027b8:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 80027bc:	4bef      	ldr	r3, [pc, #956]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80027be:	edd3 7a00 	vldr	s15, [r3]
 80027c2:	2004      	movs	r0, #4
 80027c4:	eeb0 0a67 	vmov.f32	s0, s15
 80027c8:	f001 f92a 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80027cc:	eeb0 7b40 	vmov.f64	d7, d0
 80027d0:	ee29 6b07 	vmul.f64	d6, d9, d7
 80027d4:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80027d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80027dc:	ee38 6b07 	vadd.f64	d6, d8, d7
 80027e0:	4be6      	ldr	r3, [pc, #920]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80027e2:	ed93 7a00 	vldr	s14, [r3]
 80027e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80027ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80027f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027f6:	4be1      	ldr	r3, [pc, #900]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80027f8:	edd3 7a00 	vldr	s15, [r3]
 80027fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002800:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002804:	ee36 8b07 	vadd.f64	d8, d6, d7
		/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 8002808:	ed97 7a07 	vldr	s14, [r7, #28]
 800280c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002810:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002814:	4bd9      	ldr	r3, [pc, #868]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002816:	edd3 6a00 	vldr	s13, [r3]
 800281a:	edd7 7a05 	vldr	s15, [r7, #20]
 800281e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002826:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 800282a:	edd7 7a03 	vldr	s15, [r7, #12]
 800282e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002832:	4bd2      	ldr	r3, [pc, #840]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	2004      	movs	r0, #4
 800283a:	eeb0 0a67 	vmov.f32	s0, s15
 800283e:	f001 f8ef 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002842:	eeb0 7b40 	vmov.f64	d7, d0
 8002846:	ee2a 6b07 	vmul.f64	d6, d10, d7
 800284a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800284e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002852:	ee39 6b07 	vadd.f64	d6, d9, d7
 8002856:	4bc9      	ldr	r3, [pc, #804]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002858:	ed93 7a00 	vldr	s14, [r3]
 800285c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002860:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002864:	edd7 7a06 	vldr	s15, [r7, #24]
 8002868:	ee37 7a27 	vadd.f32	s14, s14, s15
 800286c:	4bc3      	ldr	r3, [pc, #780]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002876:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800287a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800287e:	ee88 7b06 	vdiv.f64	d7, d8, d6
		- 1) * ((Q * pow(dt, 3)) / 2 + P22 * dt + P12);
 8002882:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002886:	ee37 7b46 	vsub.f64	d7, d7, d6
joint.p12 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 800288a:	eeb1 8b47 	vneg.f64	d8, d7
		- 1) * ((Q * pow(dt, 3)) / 2 + P22 * dt + P12);
 800288e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002892:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002896:	4bb9      	ldr	r3, [pc, #740]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002898:	edd3 7a00 	vldr	s15, [r3]
 800289c:	2003      	movs	r0, #3
 800289e:	eeb0 0a67 	vmov.f32	s0, s15
 80028a2:	f001 f8bd 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80028a6:	eeb0 7b40 	vmov.f64	d7, d0
 80028aa:	ee29 7b07 	vmul.f64	d7, d9, d7
 80028ae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80028b2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80028b6:	4bb1      	ldr	r3, [pc, #708]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80028b8:	ed93 7a00 	vldr	s14, [r3]
 80028bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80028c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80028cc:	edd7 7a06 	vldr	s15, [r7, #24]
 80028d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80028d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80028d8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80028dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p12 = -((P11 + P21 * dt + (Q * pow(dt, 4)) / 4 + dt * (P12 + P22 * dt))
 80028e0:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
joint.p21 =
		P21 + P22 * dt + (Q * pow(dt, 3)) / 2
 80028e4:	4ba5      	ldr	r3, [pc, #660]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80028e6:	ed93 7a00 	vldr	s14, [r3]
 80028ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80028ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80028f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fa:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80028fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002902:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002906:	4b9d      	ldr	r3, [pc, #628]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002908:	edd3 7a00 	vldr	s15, [r3]
 800290c:	2003      	movs	r0, #3
 800290e:	eeb0 0a67 	vmov.f32	s0, s15
 8002912:	f001 f885 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002916:	eeb0 7b40 	vmov.f64	d7, d0
 800291a:	ee29 6b07 	vmul.f64	d6, d9, d7
 800291e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002922:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002926:	ee38 8b07 	vadd.f64	d8, d8, d7
				- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21)
 800292a:	edd7 7a03 	vldr	s15, [r7, #12]
 800292e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002932:	4b92      	ldr	r3, [pc, #584]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002934:	edd3 7a00 	vldr	s15, [r3]
 8002938:	2003      	movs	r0, #3
 800293a:	eeb0 0a67 	vmov.f32	s0, s15
 800293e:	f001 f86f 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002942:	eeb0 7b40 	vmov.f64	d7, d0
 8002946:	ee29 7b07 	vmul.f64	d7, d9, d7
 800294a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800294e:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002952:	4b8a      	ldr	r3, [pc, #552]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002954:	ed93 7a00 	vldr	s14, [r3]
 8002958:	edd7 7a04 	vldr	s15, [r7, #16]
 800295c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002960:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002964:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002968:	edd7 7a05 	vldr	s15, [r7, #20]
 800296c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002970:	ee36 9b07 	vadd.f64	d9, d6, d7
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 8002974:	4b81      	ldr	r3, [pc, #516]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002976:	ed93 7a00 	vldr	s14, [r3]
 800297a:	edd7 7a05 	vldr	s15, [r7, #20]
 800297e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002982:	edd7 7a07 	vldr	s15, [r7, #28]
 8002986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800298a:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800298e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002992:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002996:	4b79      	ldr	r3, [pc, #484]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	2004      	movs	r0, #4
 800299e:	eeb0 0a67 	vmov.f32	s0, s15
 80029a2:	f001 f83d 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80029a6:	eeb0 7b40 	vmov.f64	d7, d0
 80029aa:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80029ae:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80029b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80029b6:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt)))
 80029ba:	4b70      	ldr	r3, [pc, #448]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80029bc:	ed93 7a00 	vldr	s14, [r3]
 80029c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80029c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80029cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029d0:	4b6a      	ldr	r3, [pc, #424]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029da:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80029de:	ee36 7b07 	vadd.f64	d7, d6, d7
						* (P11 + P21 * dt + (Q * pow(dt, 4)) / 4
 80029e2:	ee29 9b07 	vmul.f64	d9, d9, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 80029e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80029ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80029ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029f2:	4b62      	ldr	r3, [pc, #392]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 80029f4:	edd3 6a00 	vldr	s13, [r3]
 80029f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80029fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a04:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002a08:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a0c:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002a10:	4b5a      	ldr	r3, [pc, #360]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a12:	edd3 7a00 	vldr	s15, [r3]
 8002a16:	2004      	movs	r0, #4
 8002a18:	eeb0 0a67 	vmov.f32	s0, s15
 8002a1c:	f001 f800 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a20:	eeb0 7b40 	vmov.f64	d7, d0
 8002a24:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002a28:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002a2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002a30:	ee3a 6b07 	vadd.f64	d6, d10, d7
								+ dt * (P12 + P22 * dt));
 8002a34:	4b51      	ldr	r3, [pc, #324]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a36:	ed93 7a00 	vldr	s14, [r3]
 8002a3a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a42:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a4a:	4b4c      	ldr	r3, [pc, #304]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a4c:	edd3 7a00 	vldr	s15, [r3]
 8002a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a58:	ee36 6b07 	vadd.f64	d6, d6, d7
						/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002a5c:	ee89 7b06 	vdiv.f64	d7, d9, d6
				- (((Q * pow(dt, 3)) / 2 + P22 * dt + P21)
 8002a60:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002a64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p21 =
 8002a68:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
joint.p22 = P22 + Q * pow(dt, 2)
 8002a6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a70:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8002a74:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a78:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002a7c:	4b3f      	ldr	r3, [pc, #252]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002a7e:	edd3 7a00 	vldr	s15, [r3]
 8002a82:	2002      	movs	r0, #2
 8002a84:	eeb0 0a67 	vmov.f32	s0, s15
 8002a88:	f000 ffca 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002a8c:	eeb0 7b40 	vmov.f64	d7, d0
 8002a90:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002a94:	ee38 8b07 	vadd.f64	d8, d8, d7
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P12)
 8002a98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a9c:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8002aa0:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	2003      	movs	r0, #3
 8002aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8002aac:	f000 ffb8 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002ab0:	eeb0 7b40 	vmov.f64	d7, d0
 8002ab4:	ee29 7b07 	vmul.f64	d7, d9, d7
 8002ab8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002abc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002ac0:	4b2e      	ldr	r3, [pc, #184]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002ac2:	ed93 7a00 	vldr	s14, [r3]
 8002ac6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ace:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ad2:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002ad6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ada:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ade:	ee36 9b07 	vadd.f64	d9, d6, d7
				* ((Q * pow(dt, 3)) / 2 + P22 * dt + P21))
 8002ae2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ae6:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	2003      	movs	r0, #3
 8002af2:	eeb0 0a67 	vmov.f32	s0, s15
 8002af6:	f000 ff93 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002afa:	eeb0 7b40 	vmov.f64	d7, d0
 8002afe:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8002b02:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8002b06:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002b0c:	ed93 7a00 	vldr	s14, [r3]
 8002b10:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b18:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b1c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002b20:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b28:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002b2c:	ee29 9b07 	vmul.f64	d9, d9, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002b30:	ed97 7a07 	vldr	s14, [r7, #28]
 8002b34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b3c:	4b0f      	ldr	r3, [pc, #60]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002b3e:	edd3 6a00 	vldr	s13, [r3]
 8002b42:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b4e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8002b52:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b56:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002b5a:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002b5c:	edd3 7a00 	vldr	s15, [r3]
 8002b60:	2004      	movs	r0, #4
 8002b62:	eeb0 0a67 	vmov.f32	s0, s15
 8002b66:	f000 ff5b 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002b6a:	eeb0 7b40 	vmov.f64	d7, d0
 8002b6e:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8002b72:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8002b76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002b7a:	e001      	b.n	8002b80 <_Z12KalmanFilterf11robot_joint+0x7d8>
 8002b7c:	24000034 	.word	0x24000034
 8002b80:	ee3a 6b07 	vadd.f64	d6, d10, d7
						+ dt * (P12 + P22 * dt));
 8002b84:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <_Z12KalmanFilterf11robot_joint+0x838>)
 8002b86:	ed93 7a00 	vldr	s14, [r3]
 8002b8a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b92:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b9a:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <_Z12KalmanFilterf11robot_joint+0x838>)
 8002b9c:	edd3 7a00 	vldr	s15, [r3]
 8002ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ba8:	ee36 6b07 	vadd.f64	d6, d6, d7
				/ (P11 + R + P21 * dt + (Q * pow(dt, 4)) / 4
 8002bac:	ee89 7b06 	vdiv.f64	d7, d9, d6
		- (((Q * pow(dt, 3)) / 2 + P22 * dt + P12)
 8002bb0:	ee38 7b47 	vsub.f64	d7, d8, d7
 8002bb4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
joint.p22 = P22 + Q * pow(dt, 2)
 8002bb8:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
//	joint.p11 = (R*(4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p12 = (2*R*(Q*dt3 + 2*p22*dt + 2*p12))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p21 = (2*R*(Q*dt3 + 2*p22*dt + 2*p21))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p22 = p22 + Q*dt2 - (((Q*dt3)/2 + p22*dt + p12)*((Q*dt3)/2 + p22*dt + p21))/(R + p11 + dt*p21 + (Q*dt4)/4 + dt*(p12 + dt*p22));

return joint;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002bc4:	2284      	movs	r2, #132	; 0x84
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f00d f8c0 	bl	800fd4c <memcpy>

}
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	3728      	adds	r7, #40	; 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	ecbd 8b08 	vpop	{d8-d11}
 8002bd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bda:	b004      	add	sp, #16
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	24000034 	.word	0x24000034

08002be4 <_Z7find_IKffff>:

joint_config find_IK(float gripper_linear_x, float gripper_linear_y,
	float gripper_linear_z, float gripper_angular_yaw) {
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b09b      	sub	sp, #108	; 0x6c
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	ed87 0a07 	vstr	s0, [r7, #28]
 8002bee:	edc7 0a06 	vstr	s1, [r7, #24]
 8002bf2:	ed87 1a05 	vstr	s2, [r7, #20]
 8002bf6:	edc7 1a04 	vstr	s3, [r7, #16]
bug1 = gripper_linear_x * gripper_linear_x;
 8002bfa:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bfe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c02:	4b74      	ldr	r3, [pc, #464]	; (8002dd4 <_Z7find_IKffff+0x1f0>)
 8002c04:	edc3 7a00 	vstr	s15, [r3]
bug2 = gripper_linear_y * gripper_linear_y;
 8002c08:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c10:	4b71      	ldr	r3, [pc, #452]	; (8002dd8 <_Z7find_IKffff+0x1f4>)
 8002c12:	edc3 7a00 	vstr	s15, [r3]
bug3 = L12 * L12;
 8002c16:	4b71      	ldr	r3, [pc, #452]	; (8002ddc <_Z7find_IKffff+0x1f8>)
 8002c18:	ed93 7a00 	vldr	s14, [r3]
 8002c1c:	4b6f      	ldr	r3, [pc, #444]	; (8002ddc <_Z7find_IKffff+0x1f8>)
 8002c1e:	edd3 7a00 	vldr	s15, [r3]
 8002c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c26:	4b6e      	ldr	r3, [pc, #440]	; (8002de0 <_Z7find_IKffff+0x1fc>)
 8002c28:	edc3 7a00 	vstr	s15, [r3]
bug4 = L3 * L3;
 8002c2c:	4b6d      	ldr	r3, [pc, #436]	; (8002de4 <_Z7find_IKffff+0x200>)
 8002c2e:	ed93 7a00 	vldr	s14, [r3]
 8002c32:	4b6c      	ldr	r3, [pc, #432]	; (8002de4 <_Z7find_IKffff+0x200>)
 8002c34:	edd3 7a00 	vldr	s15, [r3]
 8002c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3c:	4b6a      	ldr	r3, [pc, #424]	; (8002de8 <_Z7find_IKffff+0x204>)
 8002c3e:	edc3 7a00 	vstr	s15, [r3]
float C3 = ((gripper_linear_x * gripper_linear_x)
 8002c42:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c46:	ee27 7aa7 	vmul.f32	s14, s15, s15
		+ (gripper_linear_y * gripper_linear_y) - (L12 * L12) - (L3 * L3))
 8002c4a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002c52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c56:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <_Z7find_IKffff+0x1f8>)
 8002c58:	edd3 6a00 	vldr	s13, [r3]
 8002c5c:	4b5f      	ldr	r3, [pc, #380]	; (8002ddc <_Z7find_IKffff+0x1f8>)
 8002c5e:	edd3 7a00 	vldr	s15, [r3]
 8002c62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c6a:	4b5e      	ldr	r3, [pc, #376]	; (8002de4 <_Z7find_IKffff+0x200>)
 8002c6c:	edd3 6a00 	vldr	s13, [r3]
 8002c70:	4b5c      	ldr	r3, [pc, #368]	; (8002de4 <_Z7find_IKffff+0x200>)
 8002c72:	edd3 7a00 	vldr	s15, [r3]
 8002c76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c7a:	ee77 6a67 	vsub.f32	s13, s14, s15
		/ (2 * L12 * L3);
 8002c7e:	4b57      	ldr	r3, [pc, #348]	; (8002ddc <_Z7find_IKffff+0x1f8>)
 8002c80:	edd3 7a00 	vldr	s15, [r3]
 8002c84:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002c88:	4b56      	ldr	r3, [pc, #344]	; (8002de4 <_Z7find_IKffff+0x200>)
 8002c8a:	edd3 7a00 	vldr	s15, [r3]
 8002c8e:	ee27 7a27 	vmul.f32	s14, s14, s15
float C3 = ((gripper_linear_x * gripper_linear_x)
 8002c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c96:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
float S3 = sqrt(1 - (C3 * C3));
 8002c9a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002c9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002ca2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002caa:	eeb0 0a67 	vmov.f32	s0, s15
 8002cae:	f7fe ff6d 	bl	8001b8c <_ZSt4sqrtf>
 8002cb2:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
float q3 = atan2(S3, C3);
 8002cb6:	edd7 0a19 	vldr	s1, [r7, #100]	; 0x64
 8002cba:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8002cbe:	f7fe ff31 	bl	8001b24 <_ZSt5atan2ff>
 8002cc2:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c

float L3S3 = L3 * S3;
 8002cc6:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <_Z7find_IKffff+0x200>)
 8002cc8:	edd3 7a00 	vldr	s15, [r3]
 8002ccc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
float L123C3 = L12 + (L3 * C3);
 8002cd8:	4b42      	ldr	r3, [pc, #264]	; (8002de4 <_Z7find_IKffff+0x200>)
 8002cda:	ed93 7a00 	vldr	s14, [r3]
 8002cde:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8002ce2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ce6:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <_Z7find_IKffff+0x1f8>)
 8002ce8:	edd3 7a00 	vldr	s15, [r3]
 8002cec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cf0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

float S1 = (-L3S3 * gripper_linear_x) + (L123C3 * gripper_linear_y);
 8002cf4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002cf8:	eeb1 7a67 	vneg.f32	s14, s15
 8002cfc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d00:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d04:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002d08:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d14:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
float C1 = (L3S3 * gripper_linear_y) + (L123C3 * gripper_linear_x);
 8002d18:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002d1c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d24:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 8002d28:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d34:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
float q1 = atan2(S1, C1);
 8002d38:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 8002d3c:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8002d40:	f7fe fef0 	bl	8001b24 <_ZSt5atan2ff>
 8002d44:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
float q4 = gripper_angular_yaw - q1 - q3;
 8002d48:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d4c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002d50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d54:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002d58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
float q2 = gripper_linear_z + H4 - H3 - H1;
 8002d60:	4b22      	ldr	r3, [pc, #136]	; (8002dec <_Z7find_IKffff+0x208>)
 8002d62:	ed93 7a00 	vldr	s14, [r3]
 8002d66:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d6e:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <_Z7find_IKffff+0x20c>)
 8002d70:	edd3 7a00 	vldr	s15, [r3]
 8002d74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d78:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <_Z7find_IKffff+0x210>)
 8002d7a:	edd3 7a00 	vldr	s15, [r3]
 8002d7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d82:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

joint_config buff;
buff.q1 = q1;
 8002d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d88:	623b      	str	r3, [r7, #32]
buff.q2 = C3;
 8002d8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
buff.q3 = q3;
 8002d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
buff.q4 = S3;
 8002d92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c

return buff;
 8002d96:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8002d9a:	f107 0320 	add.w	r3, r7, #32
 8002d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002da0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002da6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002da8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dac:	ee06 0a10 	vmov	s12, r0
 8002db0:	ee06 1a90 	vmov	s13, r1
 8002db4:	ee07 2a10 	vmov	s14, r2
 8002db8:	ee07 3a90 	vmov	s15, r3
}
 8002dbc:	eeb0 0a46 	vmov.f32	s0, s12
 8002dc0:	eef0 0a66 	vmov.f32	s1, s13
 8002dc4:	eeb0 1a47 	vmov.f32	s2, s14
 8002dc8:	eef0 1a67 	vmov.f32	s3, s15
 8002dcc:	376c      	adds	r7, #108	; 0x6c
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd90      	pop	{r4, r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	240003a0 	.word	0x240003a0
 8002dd8:	240003a4 	.word	0x240003a4
 8002ddc:	2400000c 	.word	0x2400000c
 8002de0:	240003a8 	.word	0x240003a8
 8002de4:	24000008 	.word	0x24000008
 8002de8:	240003ac 	.word	0x240003ac
 8002dec:	24000018 	.word	0x24000018
 8002df0:	24000014 	.word	0x24000014
 8002df4:	24000010 	.word	0x24000010

08002df8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfa:	ed2d 8b02 	vpush	{d8}
 8002dfe:	b0cb      	sub	sp, #300	; 0x12c
 8002e00:	af1e      	add	r7, sp, #120	; 0x78
 8002e02:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

if (htim == &htim12) {	//

}

if (htim == &htim5) {	//
 8002e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e0a:	4a7e      	ldr	r2, [pc, #504]	; (8003004 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	f040 815b 	bne.w	80030c8 <HAL_TIM_PeriodElapsedCallback+0x2d0>

		encoderJ1.AMT21_Read();
 8002e12:	487d      	ldr	r0, [pc, #500]	; (8003008 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002e14:	f7fd fe13 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 8002e18:	487b      	ldr	r0, [pc, #492]	; (8003008 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002e1a:	f7fd fe3f 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b7a      	ldr	r3, [pc, #488]	; (800300c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002e24:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 8002e26:	4b79      	ldr	r3, [pc, #484]	; (800300c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d106      	bne.n	8002e3c <HAL_TIM_PeriodElapsedCallback+0x44>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 8002e2e:	4876      	ldr	r0, [pc, #472]	; (8003008 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002e30:	f7fd fe98 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002e34:	4603      	mov	r3, r0
 8002e36:	461a      	mov	r2, r3
 8002e38:	4b75      	ldr	r3, [pc, #468]	; (8003010 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002e3a:	801a      	strh	r2, [r3, #0]
//		if(HALENCJ2OK == HAL_OK){
//			encoderJ2.unwarp();
//			posJ2 = encoderJ2.getUnwarpValue();
//		}

		encoderJ3.AMT21_Read();
 8002e3c:	4875      	ldr	r0, [pc, #468]	; (8003014 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002e3e:	f7fd fdfe 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8002e42:	4874      	ldr	r0, [pc, #464]	; (8003014 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002e44:	f7fd fe2a 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	4b72      	ldr	r3, [pc, #456]	; (8003018 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002e4e:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8002e50:	4b71      	ldr	r3, [pc, #452]	; (8003018 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d106      	bne.n	8002e66 <HAL_TIM_PeriodElapsedCallback+0x6e>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
 8002e58:	486e      	ldr	r0, [pc, #440]	; (8003014 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002e5a:	f7fd fe83 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	461a      	mov	r2, r3
 8002e62:	4b6e      	ldr	r3, [pc, #440]	; (800301c <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002e64:	801a      	strh	r2, [r3, #0]

//		stepperJ2.StepperOpenLoopSpeed(-1.0 * w_q1);
//		stepperJ3.StepperOpenLoopSpeed(w_q3);

		int i;
				for (i = 1 ; i<num ; i++)
 8002e66:	2301      	movs	r3, #1
 8002e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e6c:	4b6c      	ldr	r3, [pc, #432]	; (8003020 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e74:	429a      	cmp	r2, r3
 8002e76:	da39      	bge.n	8002eec <HAL_TIM_PeriodElapsedCallback+0xf4>
				{
					box_q1[i-1] = box_q1[i];
 8002e78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	4969      	ldr	r1, [pc, #420]	; (8003024 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002e80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e84:	0092      	lsls	r2, r2, #2
 8002e86:	440a      	add	r2, r1
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	4966      	ldr	r1, [pc, #408]	; (8003024 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	601a      	str	r2, [r3, #0]
					box_q2[i-1] = box_q2[i];
 8002e92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e96:	3b01      	subs	r3, #1
 8002e98:	4963      	ldr	r1, [pc, #396]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002e9a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e9e:	0092      	lsls	r2, r2, #2
 8002ea0:	440a      	add	r2, r1
 8002ea2:	6812      	ldr	r2, [r2, #0]
 8002ea4:	4960      	ldr	r1, [pc, #384]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	601a      	str	r2, [r3, #0]
					box_q3[i-1] = box_q3[i];
 8002eac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	495e      	ldr	r1, [pc, #376]	; (800302c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002eb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002eb8:	0092      	lsls	r2, r2, #2
 8002eba:	440a      	add	r2, r1
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	495b      	ldr	r1, [pc, #364]	; (800302c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	440b      	add	r3, r1
 8002ec4:	601a      	str	r2, [r3, #0]
					box_q4[i-1] = box_q4[i];
 8002ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	4958      	ldr	r1, [pc, #352]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002ece:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002ed2:	0092      	lsls	r2, r2, #2
 8002ed4:	440a      	add	r2, r1
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	4955      	ldr	r1, [pc, #340]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	601a      	str	r2, [r3, #0]
				for (i = 1 ; i<num ; i++)
 8002ee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002eea:	e7bf      	b.n	8002e6c <HAL_TIM_PeriodElapsedCallback+0x74>
				}
				 box_q1[num-1] = w_q1;
 8002eec:	4b4c      	ldr	r3, [pc, #304]	; (8003020 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	4a50      	ldr	r2, [pc, #320]	; (8003034 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	494b      	ldr	r1, [pc, #300]	; (8003024 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	601a      	str	r2, [r3, #0]
				 box_q2[num-1] = dz;
 8002efe:	4b4e      	ldr	r3, [pc, #312]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	b25a      	sxtb	r2, r3
 8002f04:	4b46      	ldr	r3, [pc, #280]	; (8003020 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	ee07 2a90 	vmov	s15, r2
 8002f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f12:	4a45      	ldr	r2, [pc, #276]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4413      	add	r3, r2
 8002f18:	edc3 7a00 	vstr	s15, [r3]
				 box_q3[num-1] = w_q3;
 8002f1c:	4b40      	ldr	r3, [pc, #256]	; (8003020 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3b01      	subs	r3, #1
 8002f22:	4a46      	ldr	r2, [pc, #280]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	4941      	ldr	r1, [pc, #260]	; (800302c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	601a      	str	r2, [r3, #0]
				 box_q4[num-1] = dyaw;
 8002f2e:	4b44      	ldr	r3, [pc, #272]	; (8003040 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	b25a      	sxtb	r2, r3
 8002f34:	4b3a      	ldr	r3, [pc, #232]	; (8003020 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	ee07 2a90 	vmov	s15, r2
 8002f3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f42:	4a3b      	ldr	r2, [pc, #236]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	edc3 7a00 	vstr	s15, [r3]

				u_q1 = 0.0;
 8002f4c:	4b3d      	ldr	r3, [pc, #244]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
				u_q2 = 0.0;
 8002f54:	4b3c      	ldr	r3, [pc, #240]	; (8003048 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002f56:	f04f 0200 	mov.w	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
				u_q3 = 0.0;
 8002f5c:	4b3b      	ldr	r3, [pc, #236]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]
				u_q4 = 0.0;
 8002f64:	4b3a      	ldr	r3, [pc, #232]	; (8003050 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

				for(i = 0; i < num; i++)
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f72:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	da6a      	bge.n	8003054 <HAL_TIM_PeriodElapsedCallback+0x25c>
				{
					u_q1 += box_q1[i];
 8002f7e:	4a29      	ldr	r2, [pc, #164]	; (8003024 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002f80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	ed93 7a00 	vldr	s14, [r3]
 8002f8c:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002f8e:	edd3 7a00 	vldr	s15, [r3]
 8002f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f96:	4b2b      	ldr	r3, [pc, #172]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002f98:	edc3 7a00 	vstr	s15, [r3]
					u_q2 += box_q2[i];
 8002f9c:	4a22      	ldr	r2, [pc, #136]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	ed93 7a00 	vldr	s14, [r3]
 8002faa:	4b27      	ldr	r3, [pc, #156]	; (8003048 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002fac:	edd3 7a00 	vldr	s15, [r3]
 8002fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb4:	4b24      	ldr	r3, [pc, #144]	; (8003048 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002fb6:	edc3 7a00 	vstr	s15, [r3]
					u_q3 += box_q3[i];
 8002fba:	4a1c      	ldr	r2, [pc, #112]	; (800302c <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002fbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	ed93 7a00 	vldr	s14, [r3]
 8002fc8:	4b20      	ldr	r3, [pc, #128]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd2:	4b1e      	ldr	r3, [pc, #120]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002fd4:	edc3 7a00 	vstr	s15, [r3]
					u_q4 += box_q4[i];
 8002fd8:	4a15      	ldr	r2, [pc, #84]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	4413      	add	r3, r2
 8002fe2:	ed93 7a00 	vldr	s14, [r3]
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002fe8:	edd3 7a00 	vldr	s15, [r3]
 8002fec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff0:	4b17      	ldr	r3, [pc, #92]	; (8003050 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002ff2:	edc3 7a00 	vstr	s15, [r3]
				for(i = 0; i < num; i++)
 8002ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003000:	e7b7      	b.n	8002f72 <HAL_TIM_PeriodElapsedCallback+0x17a>
 8003002:	bf00      	nop
 8003004:	24000928 	.word	0x24000928
 8003008:	24000238 	.word	0x24000238
 800300c:	2400032c 	.word	0x2400032c
 8003010:	240005c8 	.word	0x240005c8
 8003014:	24000254 	.word	0x24000254
 8003018:	2400032d 	.word	0x2400032d
 800301c:	240006d0 	.word	0x240006d0
 8003020:	24000038 	.word	0x24000038
 8003024:	240003e0 	.word	0x240003e0
 8003028:	24000458 	.word	0x24000458
 800302c:	240004d0 	.word	0x240004d0
 8003030:	24000548 	.word	0x24000548
 8003034:	240003c0 	.word	0x240003c0
 8003038:	24000334 	.word	0x24000334
 800303c:	240003c8 	.word	0x240003c8
 8003040:	24000335 	.word	0x24000335
 8003044:	240003d0 	.word	0x240003d0
 8003048:	240003d4 	.word	0x240003d4
 800304c:	240003d8 	.word	0x240003d8
 8003050:	240003dc 	.word	0x240003dc
				}

				stepperJ1.StepperOpenLoopSpeed(u_q1/num*-1.0);
 8003054:	4bd0      	ldr	r3, [pc, #832]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x5a0>)
 8003056:	edd3 6a00 	vldr	s13, [r3]
 800305a:	4bd0      	ldr	r3, [pc, #832]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800306a:	eef1 7a67 	vneg.f32	s15, s15
 800306e:	eeb0 0a67 	vmov.f32	s0, s15
 8003072:	48cb      	ldr	r0, [pc, #812]	; (80033a0 <HAL_TIM_PeriodElapsedCallback+0x5a8>)
 8003074:	f7fe fb54 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
				stepperJ2.StepperSetFrequency(u_q2/3.0);
 8003078:	4bca      	ldr	r3, [pc, #808]	; (80033a4 <HAL_TIM_PeriodElapsedCallback+0x5ac>)
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003082:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003086:	eeb0 0a47 	vmov.f32	s0, s14
 800308a:	48c7      	ldr	r0, [pc, #796]	; (80033a8 <HAL_TIM_PeriodElapsedCallback+0x5b0>)
 800308c:	f7fe f894 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
				stepperJ3.StepperOpenLoopSpeed(u_q3/num*1.0);
 8003090:	4bc6      	ldr	r3, [pc, #792]	; (80033ac <HAL_TIM_PeriodElapsedCallback+0x5b4>)
 8003092:	ed93 7a00 	vldr	s14, [r3]
 8003096:	4bc1      	ldr	r3, [pc, #772]	; (800339c <HAL_TIM_PeriodElapsedCallback+0x5a4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	ee07 3a90 	vmov	s15, r3
 800309e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80030a6:	eeb0 0a66 	vmov.f32	s0, s13
 80030aa:	48c1      	ldr	r0, [pc, #772]	; (80033b0 <HAL_TIM_PeriodElapsedCallback+0x5b8>)
 80030ac:	f7fe fb38 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
				stepperJ4.StepperSetFrequency(u_q4/3.0);
 80030b0:	4bc0      	ldr	r3, [pc, #768]	; (80033b4 <HAL_TIM_PeriodElapsedCallback+0x5bc>)
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80030ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030be:	eeb0 0a47 	vmov.f32	s0, s14
 80030c2:	48bd      	ldr	r0, [pc, #756]	; (80033b8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 80030c4:	f7fe f878 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
}

	if (htim == &htim7) { 	//
 80030c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030cc:	4abb      	ldr	r2, [pc, #748]	; (80033bc <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	f040 8221 	bne.w	8003516 <HAL_TIM_PeriodElapsedCallback+0x71e>

		encoderJ1.AMT21_Read();
 80030d4:	48ba      	ldr	r0, [pc, #744]	; (80033c0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80030d6:	f7fd fcb2 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80030da:	48b9      	ldr	r0, [pc, #740]	; (80033c0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80030dc:	f7fd fcde 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 80030e0:	4603      	mov	r3, r0
 80030e2:	461a      	mov	r2, r3
 80030e4:	4bb7      	ldr	r3, [pc, #732]	; (80033c4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80030e6:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80030e8:	4bb6      	ldr	r3, [pc, #728]	; (80033c4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d106      	bne.n	80030fe <HAL_TIM_PeriodElapsedCallback+0x306>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 80030f0:	48b3      	ldr	r0, [pc, #716]	; (80033c0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 80030f2:	f7fd fd37 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 80030f6:	4603      	mov	r3, r0
 80030f8:	461a      	mov	r2, r3
 80030fa:	4bb3      	ldr	r3, [pc, #716]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80030fc:	801a      	strh	r2, [r3, #0]
		}

		encoderJ3.AMT21_Read();
 80030fe:	48b3      	ldr	r0, [pc, #716]	; (80033cc <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8003100:	f7fd fc9d 	bl	8000a3e <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ3OK = encoderJ3.AMT21_Check_Value();
 8003104:	48b1      	ldr	r0, [pc, #708]	; (80033cc <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8003106:	f7fd fcc9 	bl	8000a9c <_ZN5AMT2117AMT21_Check_ValueEv>
 800310a:	4603      	mov	r3, r0
 800310c:	461a      	mov	r2, r3
 800310e:	4bb0      	ldr	r3, [pc, #704]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8003110:	701a      	strb	r2, [r3, #0]
		if (HALENCJ3OK == HAL_OK) {
 8003112:	4baf      	ldr	r3, [pc, #700]	; (80033d0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d106      	bne.n	8003128 <HAL_TIM_PeriodElapsedCallback+0x330>
			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
 800311a:	48ac      	ldr	r0, [pc, #688]	; (80033cc <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 800311c:	f7fd fd22 	bl	8000b64 <_ZN5AMT2112getAngPos180Ev>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	4bab      	ldr	r3, [pc, #684]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8003126:	801a      	strh	r2, [r3, #0]
		}

		float t_2 = t * t;
 8003128:	4bab      	ldr	r3, [pc, #684]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800312a:	ed93 7a00 	vldr	s14, [r3]
 800312e:	4baa      	ldr	r3, [pc, #680]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8003130:	edd3 7a00 	vldr	s15, [r3]
 8003134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003138:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
		float t_3 = t * t * t;
 800313c:	4ba6      	ldr	r3, [pc, #664]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800313e:	ed93 7a00 	vldr	s14, [r3]
 8003142:	4ba5      	ldr	r3, [pc, #660]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8003144:	edd3 7a00 	vldr	s15, [r3]
 8003148:	ee27 7a27 	vmul.f32	s14, s14, s15
 800314c:	4ba2      	ldr	r3, [pc, #648]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003156:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//		}

//		fcb_joint1.Goal_Velocity = sin(0.314 * 2 * t) * 2000;
//		fcb_joint3.Goal_Velocity = sin(0.314 * 2 * t) * 4000;

		chess_board_ang = chessboard_angular_velocity * t;
 800315a:	4ba0      	ldr	r3, [pc, #640]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800315c:	ed93 7a00 	vldr	s14, [r3]
 8003160:	4b9d      	ldr	r3, [pc, #628]	; (80033d8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8003162:	edd3 7a00 	vldr	s15, [r3]
 8003166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316a:	4b9d      	ldr	r3, [pc, #628]	; (80033e0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 800316c:	edc3 7a00 	vstr	s15, [r3]

		joint_config findchessbot_joint_state;
		debug_pos_x = (0.2828 * cos(chess_board_ang)) + 0.44;
 8003170:	4b9b      	ldr	r3, [pc, #620]	; (80033e0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	eeb0 0a67 	vmov.f32	s0, s15
 800317a:	f7fe fce7 	bl	8001b4c <_ZSt3cosf>
 800317e:	eef0 7a40 	vmov.f32	s15, s0
 8003182:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003186:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8003378 <HAL_TIM_PeriodElapsedCallback+0x580>
 800318a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800318e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8003380 <HAL_TIM_PeriodElapsedCallback+0x588>
 8003192:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003196:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800319a:	4b92      	ldr	r3, [pc, #584]	; (80033e4 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 800319c:	edc3 7a00 	vstr	s15, [r3]
		debug_pos_y = (0.2828 * sin(chess_board_ang)) + 0.00059371;
 80031a0:	4b8f      	ldr	r3, [pc, #572]	; (80033e0 <HAL_TIM_PeriodElapsedCallback+0x5e8>)
 80031a2:	edd3 7a00 	vldr	s15, [r3]
 80031a6:	eeb0 0a67 	vmov.f32	s0, s15
 80031aa:	f7fe fcdf 	bl	8001b6c <_ZSt3sinf>
 80031ae:	eef0 7a40 	vmov.f32	s15, s0
 80031b2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031b6:	ed9f 6b70 	vldr	d6, [pc, #448]	; 8003378 <HAL_TIM_PeriodElapsedCallback+0x580>
 80031ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80031be:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8003388 <HAL_TIM_PeriodElapsedCallback+0x590>
 80031c2:	ee37 7b06 	vadd.f64	d7, d7, d6
 80031c6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031ca:	4b87      	ldr	r3, [pc, #540]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 80031cc:	edc3 7a00 	vstr	s15, [r3]

//		idx = 0.247 * sin(chess_board_ang) * chessboard_angular_velocity;
//		idy = 0.247 * cos(chess_board_ang) * chessboard_angular_velocity;

		idx = (0.00059371 - debug_pos_y) 	* chessboard_angular_velocity;
 80031d0:	4b85      	ldr	r3, [pc, #532]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031da:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8003388 <HAL_TIM_PeriodElapsedCallback+0x590>
 80031de:	ee36 6b47 	vsub.f64	d6, d6, d7
 80031e2:	4b7e      	ldr	r3, [pc, #504]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80031ec:	ee26 7b07 	vmul.f64	d7, d6, d7
 80031f0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80031f4:	4b7d      	ldr	r3, [pc, #500]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 80031f6:	edc3 7a00 	vstr	s15, [r3]
		idy = (debug_pos_x - 0.44) 			* chessboard_angular_velocity ;
 80031fa:	4b7a      	ldr	r3, [pc, #488]	; (80033e4 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003204:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8003380 <HAL_TIM_PeriodElapsedCallback+0x588>
 8003208:	ee37 6b46 	vsub.f64	d6, d7, d6
 800320c:	4b73      	ldr	r3, [pc, #460]	; (80033dc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 800320e:	edd3 7a00 	vldr	s15, [r3]
 8003212:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003216:	ee26 7b07 	vmul.f64	d7, d6, d7
 800321a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800321e:	4b74      	ldr	r3, [pc, #464]	; (80033f0 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8003220:	edc3 7a00 	vstr	s15, [r3]

		findchessbot_joint_state = find_IK(debug_pos_x, debug_pos_y, 0, 0);
 8003224:	4b6f      	ldr	r3, [pc, #444]	; (80033e4 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8003226:	edd3 7a00 	vldr	s15, [r3]
 800322a:	4b6f      	ldr	r3, [pc, #444]	; (80033e8 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 800322c:	ed93 7a00 	vldr	s14, [r3]
 8003230:	eddf 1a70 	vldr	s3, [pc, #448]	; 80033f4 <HAL_TIM_PeriodElapsedCallback+0x5fc>
 8003234:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 80033f4 <HAL_TIM_PeriodElapsedCallback+0x5fc>
 8003238:	eef0 0a47 	vmov.f32	s1, s14
 800323c:	eeb0 0a67 	vmov.f32	s0, s15
 8003240:	f7ff fcd0 	bl	8002be4 <_Z7find_IKffff>
 8003244:	eeb0 6a40 	vmov.f32	s12, s0
 8003248:	eef0 6a60 	vmov.f32	s13, s1
 800324c:	eeb0 7a41 	vmov.f32	s14, s2
 8003250:	eef0 7a61 	vmov.f32	s15, s3
 8003254:	ed87 6a25 	vstr	s12, [r7, #148]	; 0x94
 8003258:	edc7 6a26 	vstr	s13, [r7, #152]	; 0x98
 800325c:	ed87 7a27 	vstr	s14, [r7, #156]	; 0x9c
 8003260:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
		Update_ivk(fcb_joint1.Encoder / 2609.0 , 0, fcb_joint3.Encoder / 2609.0, 0, idx, idy, 0.0, 0.0);
 8003264:	4b58      	ldr	r3, [pc, #352]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8003266:	881b      	ldrh	r3, [r3, #0]
 8003268:	b21b      	sxth	r3, r3
 800326a:	ee07 3a90 	vmov	s15, r3
 800326e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003272:	ed9f 5b47 	vldr	d5, [pc, #284]	; 8003390 <HAL_TIM_PeriodElapsedCallback+0x598>
 8003276:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800327a:	eef7 4bc7 	vcvt.f32.f64	s9, d7
 800327e:	4b55      	ldr	r3, [pc, #340]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8003280:	881b      	ldrh	r3, [r3, #0]
 8003282:	b21b      	sxth	r3, r3
 8003284:	ee07 3a90 	vmov	s15, r3
 8003288:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800328c:	ed9f 5b40 	vldr	d5, [pc, #256]	; 8003390 <HAL_TIM_PeriodElapsedCallback+0x598>
 8003290:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8003294:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003298:	4b54      	ldr	r3, [pc, #336]	; (80033ec <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 800329a:	ed93 7a00 	vldr	s14, [r3]
 800329e:	4b54      	ldr	r3, [pc, #336]	; (80033f0 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 80032a0:	edd3 6a00 	vldr	s13, [r3]
 80032a4:	eddf 3a53 	vldr	s7, [pc, #332]	; 80033f4 <HAL_TIM_PeriodElapsedCallback+0x5fc>
 80032a8:	ed9f 3a52 	vldr	s6, [pc, #328]	; 80033f4 <HAL_TIM_PeriodElapsedCallback+0x5fc>
 80032ac:	eef0 2a66 	vmov.f32	s5, s13
 80032b0:	eeb0 2a47 	vmov.f32	s4, s14
 80032b4:	eddf 1a4f 	vldr	s3, [pc, #316]	; 80033f4 <HAL_TIM_PeriodElapsedCallback+0x5fc>
 80032b8:	eeb0 1a67 	vmov.f32	s2, s15
 80032bc:	eddf 0a4d 	vldr	s1, [pc, #308]	; 80033f4 <HAL_TIM_PeriodElapsedCallback+0x5fc>
 80032c0:	eeb0 0a64 	vmov.f32	s0, s9
 80032c4:	f7fe ff7e 	bl	80021c4 <_Z10Update_ivkffffffff>
//		fcb_joint3.Goal_Position = sin(chess_board_ang) * 2500.0;

//		setpointJ1 = Goal_velocity_q1;
//		setpointJ3 = Goal_velocity_q3;

		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 80032c8:	4b3f      	ldr	r3, [pc, #252]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80032ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80032ce:	4b3e      	ldr	r3, [pc, #248]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b21b      	sxth	r3, r3
 80032d4:	ee07 3a90 	vmov	s15, r3
 80032d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e0:	4b39      	ldr	r3, [pc, #228]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 80032e2:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 80032e6:	4b3b      	ldr	r3, [pc, #236]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80032e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80032ec:	4b39      	ldr	r3, [pc, #228]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	b21b      	sxth	r3, r3
 80032f2:	ee07 3a90 	vmov	s15, r3
 80032f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032fe:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8003300:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8003304:	4b30      	ldr	r3, [pc, #192]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8003306:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800330a:	4b2f      	ldr	r3, [pc, #188]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800330c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003310:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003314:	4b2c      	ldr	r3, [pc, #176]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8003316:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 800331a:	4b2e      	ldr	r3, [pc, #184]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800331c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8003320:	4b2c      	ldr	r3, [pc, #176]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8003322:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8003326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332a:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800332c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

		fcb_joint1.Kp_p = 0.0;
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8003332:	f04f 0200 	mov.w	r2, #0
 8003336:	61da      	str	r2, [r3, #28]
		fcb_joint1.Ki_p = 0.0;
 8003338:	4b23      	ldr	r3, [pc, #140]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	621a      	str	r2, [r3, #32]
		fcb_joint1.Kd_p = 0.0;
 8003340:	4b21      	ldr	r3, [pc, #132]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint1.Kp_v = 0.0;
 8003348:	4b1f      	ldr	r3, [pc, #124]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint1.Ki_v = 0.0;
 8003350:	4b1d      	ldr	r3, [pc, #116]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8003352:	f04f 0200 	mov.w	r2, #0
 8003356:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint1.Kd_v = 0.0;
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	631a      	str	r2, [r3, #48]	; 0x30

		fcb_joint3.Kp_p = 0.0;
 8003360:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8003362:	f04f 0200 	mov.w	r2, #0
 8003366:	61da      	str	r2, [r3, #28]
		fcb_joint3.Ki_p = 0.0;
 8003368:	4b1a      	ldr	r3, [pc, #104]	; (80033d4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	621a      	str	r2, [r3, #32]
 8003370:	e042      	b.n	80033f8 <HAL_TIM_PeriodElapsedCallback+0x600>
 8003372:	bf00      	nop
 8003374:	f3af 8000 	nop.w
 8003378:	2bd3c361 	.word	0x2bd3c361
 800337c:	3fd21965 	.word	0x3fd21965
 8003380:	c28f5c29 	.word	0xc28f5c29
 8003384:	3fdc28f5 	.word	0x3fdc28f5
 8003388:	84437119 	.word	0x84437119
 800338c:	3f437466 	.word	0x3f437466
 8003390:	00000000 	.word	0x00000000
 8003394:	40a46200 	.word	0x40a46200
 8003398:	240003d0 	.word	0x240003d0
 800339c:	24000038 	.word	0x24000038
 80033a0:	24000270 	.word	0x24000270
 80033a4:	240003d4 	.word	0x240003d4
 80033a8:	24000298 	.word	0x24000298
 80033ac:	240003d8 	.word	0x240003d8
 80033b0:	240002c0 	.word	0x240002c0
 80033b4:	240003dc 	.word	0x240003dc
 80033b8:	240002e8 	.word	0x240002e8
 80033bc:	24000b88 	.word	0x24000b88
 80033c0:	24000238 	.word	0x24000238
 80033c4:	2400032c 	.word	0x2400032c
 80033c8:	240005c8 	.word	0x240005c8
 80033cc:	24000254 	.word	0x24000254
 80033d0:	2400032d 	.word	0x2400032d
 80033d4:	240006d0 	.word	0x240006d0
 80033d8:	2400038c 	.word	0x2400038c
 80033dc:	24000030 	.word	0x24000030
 80033e0:	24000380 	.word	0x24000380
 80033e4:	24000384 	.word	0x24000384
 80033e8:	24000388 	.word	0x24000388
 80033ec:	240005c0 	.word	0x240005c0
 80033f0:	240005c4 	.word	0x240005c4
 80033f4:	00000000 	.word	0x00000000
		fcb_joint3.Kd_p = 0.0;
 80033f8:	4b4d      	ldr	r3, [pc, #308]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x738>)
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint3.Kp_v = 0.0;
 8003400:	4b4b      	ldr	r3, [pc, #300]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint3.Ki_v = 0.0;
 8003408:	4b49      	ldr	r3, [pc, #292]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x738>)
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint3.Kd_v = 0.0;
 8003410:	4b47      	ldr	r3, [pc, #284]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	631a      	str	r2, [r3, #48]	; 0x30

//		KalmanFilter(float theta_k,float kalman_pos,float kalman_velo,float P11,float P12,float P21,float P22);
//		KalmanFilter(fcb_joint1.Encoder/ 2609.0 , X11, X21, p11, p12, p21, p22, fcb_joint1);

		fcb_joint1 = KalmanFilter(fcb_joint1.Encoder / 2609.0, fcb_joint1);
 8003418:	4b46      	ldr	r3, [pc, #280]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	b21b      	sxth	r3, r3
 800341e:	ee07 3a90 	vmov	s15, r3
 8003422:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003426:	ed9f 5b40 	vldr	d5, [pc, #256]	; 8003528 <HAL_TIM_PeriodElapsedCallback+0x730>
 800342a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800342e:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 8003432:	4e40      	ldr	r6, [pc, #256]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8003434:	463d      	mov	r5, r7
 8003436:	4c3f      	ldr	r4, [pc, #252]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8003438:	4668      	mov	r0, sp
 800343a:	f104 030c 	add.w	r3, r4, #12
 800343e:	2278      	movs	r2, #120	; 0x78
 8003440:	4619      	mov	r1, r3
 8003442:	f00c fc83 	bl	800fd4c <memcpy>
 8003446:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800344a:	eeb0 0a48 	vmov.f32	s0, s16
 800344e:	4628      	mov	r0, r5
 8003450:	f7fe ffaa 	bl	80023a8 <_Z12KalmanFilterf11robot_joint>
 8003454:	4630      	mov	r0, r6
 8003456:	463b      	mov	r3, r7
 8003458:	2284      	movs	r2, #132	; 0x84
 800345a:	4619      	mov	r1, r3
 800345c:	f00c fc76 	bl	800fd4c <memcpy>
//		fcb_joint3.Output_Stepper_Frequency = (fcb_joint3.Kp_p * fcb_joint3.Error_p);

//		fcb_joint1.Output_Stepper_Frequency = fcb_joint1.Goal_Position;
//		fcb_joint3.Output_Stepper_Frequency = fcb_joint3.Goal_Position;

		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 8003460:	4b34      	ldr	r3, [pc, #208]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8003462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003464:	4a33      	ldr	r2, [pc, #204]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8003466:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 8003468:	4b31      	ldr	r3, [pc, #196]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x738>)
 800346a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346c:	4a30      	ldr	r2, [pc, #192]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x738>)
 800346e:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint1.Old_p = fcb_joint1.Encoder;
 8003470:	4b30      	ldr	r3, [pc, #192]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8003472:	881b      	ldrh	r3, [r3, #0]
 8003474:	b21b      	sxth	r3, r3
 8003476:	ee07 3a90 	vmov	s15, r3
 800347a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800347e:	4b2d      	ldr	r3, [pc, #180]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8003480:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 8003484:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8003486:	881b      	ldrh	r3, [r3, #0]
 8003488:	b21b      	sxth	r3, r3
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003492:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_TIM_PeriodElapsedCallback+0x738>)
 8003494:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
#ifdef __cplusplus
//		stepperJ1.StepperSetFrequency(300.0f);

//		stepperJ3.StepperSetFrequency(0.0f);

		stepperJ1.StepperOpenLoopSpeed(-1.0 * w_q1);
 8003498:	4b27      	ldr	r3, [pc, #156]	; (8003538 <HAL_TIM_PeriodElapsedCallback+0x740>)
 800349a:	edd3 7a00 	vldr	s15, [r3]
 800349e:	eef1 7a67 	vneg.f32	s15, s15
 80034a2:	eeb0 0a67 	vmov.f32	s0, s15
 80034a6:	4825      	ldr	r0, [pc, #148]	; (800353c <HAL_TIM_PeriodElapsedCallback+0x744>)
 80034a8:	f7fe f93a 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
		stepperJ3.StepperOpenLoopSpeed(w_q3);
 80034ac:	4b24      	ldr	r3, [pc, #144]	; (8003540 <HAL_TIM_PeriodElapsedCallback+0x748>)
 80034ae:	edd3 7a00 	vldr	s15, [r3]
 80034b2:	eeb0 0a67 	vmov.f32	s0, s15
 80034b6:	4823      	ldr	r0, [pc, #140]	; (8003544 <HAL_TIM_PeriodElapsedCallback+0x74c>)
 80034b8:	f7fe f932 	bl	8001720 <_ZN7Stepper20StepperOpenLoopSpeedEf>
//		stepperJ1.StepperOpenLoopSpeed(w_q1);
//		stepperJ3.StepperOpenLoopSpeed(w_q3);

#endif

		t = t + (sample_time_1000);
 80034bc:	4b22      	ldr	r3, [pc, #136]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x750>)
 80034be:	ed93 7a00 	vldr	s14, [r3]
 80034c2:	4b22      	ldr	r3, [pc, #136]	; (800354c <HAL_TIM_PeriodElapsedCallback+0x754>)
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034cc:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x750>)
 80034ce:	edc3 7a00 	vstr	s15, [r3]
//			t = 0.0;
//			direction_traj ^= 1;
//			unwrap_pose = fcb_joint1.Goal_Position;
//		}

		if (t >= Time_circle)
 80034d2:	4b1d      	ldr	r3, [pc, #116]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x750>)
 80034d4:	ed93 7a00 	vldr	s14, [r3]
 80034d8:	4b1d      	ldr	r3, [pc, #116]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x758>)
 80034da:	edd3 7a00 	vldr	s15, [r3]
 80034de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e6:	bfac      	ite	ge
 80034e8:	2301      	movge	r3, #1
 80034ea:	2300      	movlt	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d011      	beq.n	8003516 <HAL_TIM_PeriodElapsedCallback+0x71e>
				{
					t = 0.0;
 80034f2:	4b15      	ldr	r3, [pc, #84]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x750>)
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	601a      	str	r2, [r3, #0]
					chess_board_ang = 0.0;
 80034fa:	4b16      	ldr	r3, [pc, #88]	; (8003554 <HAL_TIM_PeriodElapsedCallback+0x75c>)
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
					direction_traj ^= 1;
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x760>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f083 0301 	eor.w	r3, r3, #1
 800350a:	4a13      	ldr	r2, [pc, #76]	; (8003558 <HAL_TIM_PeriodElapsedCallback+0x760>)
 800350c:	6013      	str	r3, [r2, #0]
					unwrap_pose =  fcb_joint1.Goal_Position;
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_TIM_PeriodElapsedCallback+0x73c>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4a12      	ldr	r2, [pc, #72]	; (800355c <HAL_TIM_PeriodElapsedCallback+0x764>)
 8003514:	6013      	str	r3, [r2, #0]
				}

	}
}
 8003516:	bf00      	nop
 8003518:	37b4      	adds	r7, #180	; 0xb4
 800351a:	46bd      	mov	sp, r7
 800351c:	ecbd 8b02 	vpop	{d8}
 8003520:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003522:	bf00      	nop
 8003524:	f3af 8000 	nop.w
 8003528:	00000000 	.word	0x00000000
 800352c:	40a46200 	.word	0x40a46200
 8003530:	240006d0 	.word	0x240006d0
 8003534:	240005c8 	.word	0x240005c8
 8003538:	240003c0 	.word	0x240003c0
 800353c:	24000270 	.word	0x24000270
 8003540:	240003c8 	.word	0x240003c8
 8003544:	240002c0 	.word	0x240002c0
 8003548:	2400038c 	.word	0x2400038c
 800354c:	24000028 	.word	0x24000028
 8003550:	2400002c 	.word	0x2400002c
 8003554:	24000380 	.word	0x24000380
 8003558:	2400037c 	.word	0x2400037c
 800355c:	240003bc 	.word	0x240003bc

08003560 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003566:	f002 f81f 	bl	80055a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800356a:	f000 f99f 	bl	80038ac <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800356e:	f7fe f9a3 	bl	80018b8 <MX_GPIO_Init>
	MX_DMA_Init();
 8003572:	f7fe f961 	bl	8001838 <MX_DMA_Init>
	MX_USART3_UART_Init();
 8003576:	f001 fd6b 	bl	8005050 <MX_USART3_UART_Init>
	MX_TIM2_Init();
 800357a:	f000 ff6f 	bl	800445c <MX_TIM2_Init>
	MX_UART4_Init();
 800357e:	f001 fcc5 	bl	8004f0c <MX_UART4_Init>
	MX_TIM4_Init();
 8003582:	f001 f85b 	bl	800463c <MX_TIM4_Init>
	MX_SPI3_Init();
 8003586:	f000 fbbd 	bl	8003d04 <MX_SPI3_Init>
	MX_TIM1_Init();
 800358a:	f000 feb9 	bl	8004300 <MX_TIM1_Init>
	MX_TIM3_Init();
 800358e:	f000 ffdd 	bl	800454c <MX_TIM3_Init>
	MX_TIM5_Init();
 8003592:	f001 f8cb 	bl	800472c <MX_TIM5_Init>
	MX_TIM15_Init();
 8003596:	f001 fa05 	bl	80049a4 <MX_TIM15_Init>
	MX_CRC_Init();
 800359a:	f7fe f8fd 	bl	8001798 <MX_CRC_Init>
	MX_UART7_Init();
 800359e:	f001 fd09 	bl	8004fb4 <MX_UART7_Init>
	MX_TIM6_Init();
 80035a2:	f001 f911 	bl	80047c8 <MX_TIM6_Init>
	MX_TIM7_Init();
 80035a6:	f001 f945 	bl	8004834 <MX_TIM7_Init>
	MX_TIM12_Init();
 80035aa:	f001 f979 	bl	80048a0 <MX_TIM12_Init>
	MX_TIM13_Init();
 80035ae:	f001 f9b1 	bl	8004914 <MX_TIM13_Init>
	MX_TIM14_Init();
 80035b2:	f001 f9d3 	bl	800495c <MX_TIM14_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 80035b6:	2201      	movs	r2, #1
 80035b8:	2101      	movs	r1, #1
 80035ba:	4897      	ldr	r0, [pc, #604]	; (8003818 <main+0x2b8>)
 80035bc:	f005 fb96 	bl	8008cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80035c0:	2201      	movs	r2, #1
 80035c2:	2102      	movs	r1, #2
 80035c4:	4895      	ldr	r0, [pc, #596]	; (800381c <main+0x2bc>)
 80035c6:	f005 fb91 	bl	8008cec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80035ca:	2200      	movs	r2, #0
 80035cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035d0:	4891      	ldr	r0, [pc, #580]	; (8003818 <main+0x2b8>)
 80035d2:	f005 fb8b 	bl	8008cec <HAL_GPIO_WritePin>

	#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 80035d6:	ed9f 0a92 	vldr	s0, [pc, #584]	; 8003820 <main+0x2c0>
 80035da:	4892      	ldr	r0, [pc, #584]	; (8003824 <main+0x2c4>)
 80035dc:	f7fd fdec 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(4);
 80035e0:	2104      	movs	r1, #4
 80035e2:	4890      	ldr	r0, [pc, #576]	; (8003824 <main+0x2c4>)
 80035e4:	f7fe f884 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(42);
 80035e8:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8003828 <main+0x2c8>
 80035ec:	488d      	ldr	r0, [pc, #564]	; (8003824 <main+0x2c4>)
 80035ee:	f7fe f85b 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 80035f2:	488c      	ldr	r0, [pc, #560]	; (8003824 <main+0x2c4>)
 80035f4:	f7fd fdcf 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	stepperJ2.StepperSetFrequency(0.0f);
 80035f8:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8003820 <main+0x2c0>
 80035fc:	488b      	ldr	r0, [pc, #556]	; (800382c <main+0x2cc>)
 80035fe:	f7fd fddb 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ2.StepperSetMicrostep(8);
 8003602:	2108      	movs	r1, #8
 8003604:	4889      	ldr	r0, [pc, #548]	; (800382c <main+0x2cc>)
 8003606:	f7fe f873 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(3);
 800360a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800360e:	4887      	ldr	r0, [pc, #540]	; (800382c <main+0x2cc>)
 8003610:	f7fe f84a 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ2.StepperEnable();
 8003614:	4885      	ldr	r0, [pc, #532]	; (800382c <main+0x2cc>)
 8003616:	f7fd fdbe 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	stepperJ3.StepperSetFrequency(0.0f);
 800361a:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8003820 <main+0x2c0>
 800361e:	4884      	ldr	r0, [pc, #528]	; (8003830 <main+0x2d0>)
 8003620:	f7fd fdca 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(8);
 8003624:	2108      	movs	r1, #8
 8003626:	4882      	ldr	r0, [pc, #520]	; (8003830 <main+0x2d0>)
 8003628:	f7fe f862 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 800362c:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 8003630:	487f      	ldr	r0, [pc, #508]	; (8003830 <main+0x2d0>)
 8003632:	f7fe f839 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 8003636:	487e      	ldr	r0, [pc, #504]	; (8003830 <main+0x2d0>)
 8003638:	f7fd fdad 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	stepperJ4.StepperSetFrequency(0.0f);
 800363c:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8003820 <main+0x2c0>
 8003640:	487c      	ldr	r0, [pc, #496]	; (8003834 <main+0x2d4>)
 8003642:	f7fd fdb9 	bl	80011b8 <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ4.StepperSetMicrostep(8);
 8003646:	2108      	movs	r1, #8
 8003648:	487a      	ldr	r0, [pc, #488]	; (8003834 <main+0x2d4>)
 800364a:	f7fe f851 	bl	80016f0 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(3);
 800364e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8003652:	4878      	ldr	r0, [pc, #480]	; (8003834 <main+0x2d4>)
 8003654:	f7fe f828 	bl	80016a8 <_ZN7Stepper15StepperSetRatioEf>
	stepperJ4.StepperEnable();
 8003658:	4876      	ldr	r0, [pc, #472]	; (8003834 <main+0x2d4>)
 800365a:	f7fd fd9c 	bl	8001196 <_ZN7Stepper13StepperEnableEv>

	//	stepperJ4.StepperSetMicrostep(1);
	//	stepperJ4.StepperSetRatio(1);

	gripper.setDegreeGripperClose(65);
 800365e:	2141      	movs	r1, #65	; 0x41
 8003660:	4875      	ldr	r0, [pc, #468]	; (8003838 <main+0x2d8>)
 8003662:	f7fd fce0 	bl	8001026 <_ZN10ServoMotor21setDegreeGripperCloseEl>
	gripper.setDegreeGripperOpen(0);
 8003666:	2100      	movs	r1, #0
 8003668:	4873      	ldr	r0, [pc, #460]	; (8003838 <main+0x2d8>)
 800366a:	f7fd fccb 	bl	8001004 <_ZN10ServoMotor20setDegreeGripperOpenEl>
	//	gripper.ServoRotateDegree(90);
	gripper.ServoEnable();
 800366e:	4872      	ldr	r0, [pc, #456]	; (8003838 <main+0x2d8>)
 8003670:	f7fd faf4 	bl	8000c5c <_ZN10ServoMotor11ServoEnableEv>
	#endif

//		HAL_TIM_Base_Start_IT(&htim5); // Jog 100 Hz
	//	HAL_TIM_Base_Start_IT(&htim6); // 200 Hz
		HAL_TIM_Base_Start_IT(&htim7); // Control 1000 Hz
 8003674:	4871      	ldr	r0, [pc, #452]	; (800383c <main+0x2dc>)
 8003676:	f008 f839 	bl	800b6ec <HAL_TIM_Base_Start_IT>
	//	HAL_TIM_Base_Start_IT(&htim12); // 2000 Hz
	//	HAL_TIM_Base_Start_IT(&htim14); // 500Hz

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 800367a:	2214      	movs	r2, #20
 800367c:	4970      	ldr	r1, [pc, #448]	; (8003840 <main+0x2e0>)
 800367e:	4871      	ldr	r0, [pc, #452]	; (8003844 <main+0x2e4>)
 8003680:	f00b fbdb 	bl	800ee3a <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8003684:	4b70      	ldr	r3, [pc, #448]	; (8003848 <main+0x2e8>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a70      	ldr	r2, [pc, #448]	; (800384c <main+0x2ec>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d04a      	beq.n	8003724 <main+0x1c4>
 800368e:	4b6e      	ldr	r3, [pc, #440]	; (8003848 <main+0x2e8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a6f      	ldr	r2, [pc, #444]	; (8003850 <main+0x2f0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d045      	beq.n	8003724 <main+0x1c4>
 8003698:	4b6b      	ldr	r3, [pc, #428]	; (8003848 <main+0x2e8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a6d      	ldr	r2, [pc, #436]	; (8003854 <main+0x2f4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d040      	beq.n	8003724 <main+0x1c4>
 80036a2:	4b69      	ldr	r3, [pc, #420]	; (8003848 <main+0x2e8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a6c      	ldr	r2, [pc, #432]	; (8003858 <main+0x2f8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d03b      	beq.n	8003724 <main+0x1c4>
 80036ac:	4b66      	ldr	r3, [pc, #408]	; (8003848 <main+0x2e8>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a6a      	ldr	r2, [pc, #424]	; (800385c <main+0x2fc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d036      	beq.n	8003724 <main+0x1c4>
 80036b6:	4b64      	ldr	r3, [pc, #400]	; (8003848 <main+0x2e8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a69      	ldr	r2, [pc, #420]	; (8003860 <main+0x300>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d031      	beq.n	8003724 <main+0x1c4>
 80036c0:	4b61      	ldr	r3, [pc, #388]	; (8003848 <main+0x2e8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a67      	ldr	r2, [pc, #412]	; (8003864 <main+0x304>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d02c      	beq.n	8003724 <main+0x1c4>
 80036ca:	4b5f      	ldr	r3, [pc, #380]	; (8003848 <main+0x2e8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a66      	ldr	r2, [pc, #408]	; (8003868 <main+0x308>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d027      	beq.n	8003724 <main+0x1c4>
 80036d4:	4b5c      	ldr	r3, [pc, #368]	; (8003848 <main+0x2e8>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a64      	ldr	r2, [pc, #400]	; (800386c <main+0x30c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d022      	beq.n	8003724 <main+0x1c4>
 80036de:	4b5a      	ldr	r3, [pc, #360]	; (8003848 <main+0x2e8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a63      	ldr	r2, [pc, #396]	; (8003870 <main+0x310>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d01d      	beq.n	8003724 <main+0x1c4>
 80036e8:	4b57      	ldr	r3, [pc, #348]	; (8003848 <main+0x2e8>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a61      	ldr	r2, [pc, #388]	; (8003874 <main+0x314>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d018      	beq.n	8003724 <main+0x1c4>
 80036f2:	4b55      	ldr	r3, [pc, #340]	; (8003848 <main+0x2e8>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a60      	ldr	r2, [pc, #384]	; (8003878 <main+0x318>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d013      	beq.n	8003724 <main+0x1c4>
 80036fc:	4b52      	ldr	r3, [pc, #328]	; (8003848 <main+0x2e8>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a5e      	ldr	r2, [pc, #376]	; (800387c <main+0x31c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00e      	beq.n	8003724 <main+0x1c4>
 8003706:	4b50      	ldr	r3, [pc, #320]	; (8003848 <main+0x2e8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a5d      	ldr	r2, [pc, #372]	; (8003880 <main+0x320>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d009      	beq.n	8003724 <main+0x1c4>
 8003710:	4b4d      	ldr	r3, [pc, #308]	; (8003848 <main+0x2e8>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a5b      	ldr	r2, [pc, #364]	; (8003884 <main+0x324>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <main+0x1c4>
 800371a:	4b4b      	ldr	r3, [pc, #300]	; (8003848 <main+0x2e8>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a5a      	ldr	r2, [pc, #360]	; (8003888 <main+0x328>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d108      	bne.n	8003736 <main+0x1d6>
 8003724:	4b48      	ldr	r3, [pc, #288]	; (8003848 <main+0x2e8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	4b47      	ldr	r3, [pc, #284]	; (8003848 <main+0x2e8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0208 	bic.w	r2, r2, #8
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	e007      	b.n	8003746 <main+0x1e6>
 8003736:	4b44      	ldr	r3, [pc, #272]	; (8003848 <main+0x2e8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4b42      	ldr	r3, [pc, #264]	; (8003848 <main+0x2e8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0204 	bic.w	r2, r2, #4
 8003744:	601a      	str	r2, [r3, #0]
	//	stepperJ1.StepperOpenLoopSpeed(1.00f);

	// Backup
	fcb_joint1.Kp_p = 0.0;
 8003746:	4b51      	ldr	r3, [pc, #324]	; (800388c <main+0x32c>)
 8003748:	f04f 0200 	mov.w	r2, #0
 800374c:	61da      	str	r2, [r3, #28]
	fcb_joint1.Kp_v = 0.0;
 800374e:	4b4f      	ldr	r3, [pc, #316]	; (800388c <main+0x32c>)
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint1.Ki_p = 0.0;
 8003756:	4b4d      	ldr	r3, [pc, #308]	; (800388c <main+0x32c>)
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	621a      	str	r2, [r3, #32]
	fcb_joint1.Ki_v = 0.0;
 800375e:	4b4b      	ldr	r3, [pc, #300]	; (800388c <main+0x32c>)
 8003760:	f04f 0200 	mov.w	r2, #0
 8003764:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint1.Kd_p = 0.0;
 8003766:	4b49      	ldr	r3, [pc, #292]	; (800388c <main+0x32c>)
 8003768:	f04f 0200 	mov.w	r2, #0
 800376c:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint1.Kd_p = 0.0;
 800376e:	4b47      	ldr	r3, [pc, #284]	; (800388c <main+0x32c>)
 8003770:	f04f 0200 	mov.w	r2, #0
 8003774:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint2.Kp_p = 0.0;
 8003776:	4b46      	ldr	r3, [pc, #280]	; (8003890 <main+0x330>)
 8003778:	f04f 0200 	mov.w	r2, #0
 800377c:	61da      	str	r2, [r3, #28]
	fcb_joint2.Kp_v = 0.0;
 800377e:	4b44      	ldr	r3, [pc, #272]	; (8003890 <main+0x330>)
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint2.Ki_p = 0.0;
 8003786:	4b42      	ldr	r3, [pc, #264]	; (8003890 <main+0x330>)
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	621a      	str	r2, [r3, #32]
	fcb_joint2.Ki_v = 0.0;
 800378e:	4b40      	ldr	r3, [pc, #256]	; (8003890 <main+0x330>)
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint2.Kd_p = 0.0;
 8003796:	4b3e      	ldr	r3, [pc, #248]	; (8003890 <main+0x330>)
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint2.Kd_p = 0.0;
 800379e:	4b3c      	ldr	r3, [pc, #240]	; (8003890 <main+0x330>)
 80037a0:	f04f 0200 	mov.w	r2, #0
 80037a4:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint3.Kp_p = 0.0;
 80037a6:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <main+0x334>)
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	61da      	str	r2, [r3, #28]
	fcb_joint3.Kp_v = 0.0;
 80037ae:	4b39      	ldr	r3, [pc, #228]	; (8003894 <main+0x334>)
 80037b0:	f04f 0200 	mov.w	r2, #0
 80037b4:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint3.Ki_p = 0.0;
 80037b6:	4b37      	ldr	r3, [pc, #220]	; (8003894 <main+0x334>)
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	621a      	str	r2, [r3, #32]
	fcb_joint3.Ki_v = 0.0;
 80037be:	4b35      	ldr	r3, [pc, #212]	; (8003894 <main+0x334>)
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint3.Kd_p = 0.0;
 80037c6:	4b33      	ldr	r3, [pc, #204]	; (8003894 <main+0x334>)
 80037c8:	f04f 0200 	mov.w	r2, #0
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint3.Kd_p = 0.0;
 80037ce:	4b31      	ldr	r3, [pc, #196]	; (8003894 <main+0x334>)
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint4.Kp_p = 0.0;
 80037d6:	4b30      	ldr	r3, [pc, #192]	; (8003898 <main+0x338>)
 80037d8:	f04f 0200 	mov.w	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
	fcb_joint4.Kp_v = 0.0;
 80037de:	4b2e      	ldr	r3, [pc, #184]	; (8003898 <main+0x338>)
 80037e0:	f04f 0200 	mov.w	r2, #0
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint4.Ki_p = 0.0;
 80037e6:	4b2c      	ldr	r3, [pc, #176]	; (8003898 <main+0x338>)
 80037e8:	f04f 0200 	mov.w	r2, #0
 80037ec:	621a      	str	r2, [r3, #32]
	fcb_joint4.Ki_v = 0.0;
 80037ee:	4b2a      	ldr	r3, [pc, #168]	; (8003898 <main+0x338>)
 80037f0:	f04f 0200 	mov.w	r2, #0
 80037f4:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint4.Kd_p = 0.0;
 80037f6:	4b28      	ldr	r3, [pc, #160]	; (8003898 <main+0x338>)
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint4.Kd_p = 0.0;
 80037fe:	4b26      	ldr	r3, [pc, #152]	; (8003898 <main+0x338>)
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	625a      	str	r2, [r3, #36]	; 0x24

	// (0,0) Chessboard Pose
	float sethome_q1 = -0.7897;
 8003806:	4b25      	ldr	r3, [pc, #148]	; (800389c <main+0x33c>)
 8003808:	60fb      	str	r3, [r7, #12]
	float sethome_q2 = 0.1;
 800380a:	4b25      	ldr	r3, [pc, #148]	; (80038a0 <main+0x340>)
 800380c:	60bb      	str	r3, [r7, #8]
	float sethome_q3 = 1.8365;
 800380e:	4b25      	ldr	r3, [pc, #148]	; (80038a4 <main+0x344>)
 8003810:	607b      	str	r3, [r7, #4]
	float sethome_yaw = -1.0468;
 8003812:	4b25      	ldr	r3, [pc, #148]	; (80038a8 <main+0x348>)
 8003814:	603b      	str	r3, [r7, #0]

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8003816:	e7fe      	b.n	8003816 <main+0x2b6>
 8003818:	58020400 	.word	0x58020400
 800381c:	58021000 	.word	0x58021000
 8003820:	00000000 	.word	0x00000000
 8003824:	24000270 	.word	0x24000270
 8003828:	42280000 	.word	0x42280000
 800382c:	24000298 	.word	0x24000298
 8003830:	240002c0 	.word	0x240002c0
 8003834:	240002e8 	.word	0x240002e8
 8003838:	24000310 	.word	0x24000310
 800383c:	24000b88 	.word	0x24000b88
 8003840:	24000364 	.word	0x24000364
 8003844:	24000d54 	.word	0x24000d54
 8003848:	24000cdc 	.word	0x24000cdc
 800384c:	40020010 	.word	0x40020010
 8003850:	40020028 	.word	0x40020028
 8003854:	40020040 	.word	0x40020040
 8003858:	40020058 	.word	0x40020058
 800385c:	40020070 	.word	0x40020070
 8003860:	40020088 	.word	0x40020088
 8003864:	400200a0 	.word	0x400200a0
 8003868:	400200b8 	.word	0x400200b8
 800386c:	40020410 	.word	0x40020410
 8003870:	40020428 	.word	0x40020428
 8003874:	40020440 	.word	0x40020440
 8003878:	40020458 	.word	0x40020458
 800387c:	40020470 	.word	0x40020470
 8003880:	40020488 	.word	0x40020488
 8003884:	400204a0 	.word	0x400204a0
 8003888:	400204b8 	.word	0x400204b8
 800388c:	240005c8 	.word	0x240005c8
 8003890:	2400064c 	.word	0x2400064c
 8003894:	240006d0 	.word	0x240006d0
 8003898:	24000754 	.word	0x24000754
 800389c:	bf4a29c7 	.word	0xbf4a29c7
 80038a0:	3dcccccd 	.word	0x3dcccccd
 80038a4:	3feb126f 	.word	0x3feb126f
 80038a8:	bf85fd8b 	.word	0xbf85fd8b

080038ac <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b09c      	sub	sp, #112	; 0x70
 80038b0:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038b6:	224c      	movs	r2, #76	; 0x4c
 80038b8:	2100      	movs	r1, #0
 80038ba:	4618      	mov	r0, r3
 80038bc:	f00c fa54 	bl	800fd68 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	2220      	movs	r2, #32
 80038c4:	2100      	movs	r1, #0
 80038c6:	4618      	mov	r0, r3
 80038c8:	f00c fa4e 	bl	800fd68 <memset>

/** Supply configuration update enable
 */
HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80038cc:	2002      	movs	r0, #2
 80038ce:	f005 fa41 	bl	8008d54 <HAL_PWREx_ConfigSupply>
/** Configure the main internal regulator output voltage
 */
__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80038d2:	2300      	movs	r3, #0
 80038d4:	603b      	str	r3, [r7, #0]
 80038d6:	4b38      	ldr	r3, [pc, #224]	; (80039b8 <_Z18SystemClock_Configv+0x10c>)
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	4a37      	ldr	r2, [pc, #220]	; (80039b8 <_Z18SystemClock_Configv+0x10c>)
 80038dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038e0:	6193      	str	r3, [r2, #24]
 80038e2:	4b35      	ldr	r3, [pc, #212]	; (80039b8 <_Z18SystemClock_Configv+0x10c>)
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	4b33      	ldr	r3, [pc, #204]	; (80039bc <_Z18SystemClock_Configv+0x110>)
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	4a32      	ldr	r2, [pc, #200]	; (80039bc <_Z18SystemClock_Configv+0x110>)
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80038f8:	4b30      	ldr	r3, [pc, #192]	; (80039bc <_Z18SystemClock_Configv+0x110>)
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	f003 0301 	and.w	r3, r3, #1
 8003900:	603b      	str	r3, [r7, #0]
 8003902:	683b      	ldr	r3, [r7, #0]

while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003904:	4b2c      	ldr	r3, [pc, #176]	; (80039b8 <_Z18SystemClock_Configv+0x10c>)
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800390c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003910:	bf14      	ite	ne
 8003912:	2301      	movne	r3, #1
 8003914:	2300      	moveq	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b00      	cmp	r3, #0
 800391a:	d000      	beq.n	800391e <_Z18SystemClock_Configv+0x72>
 800391c:	e7f2      	b.n	8003904 <_Z18SystemClock_Configv+0x58>
/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800391e:	2302      	movs	r3, #2
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8003922:	2301      	movs	r3, #1
 8003924:	633b      	str	r3, [r7, #48]	; 0x30
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003926:	2340      	movs	r3, #64	; 0x40
 8003928:	637b      	str	r3, [r7, #52]	; 0x34
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800392a:	2302      	movs	r3, #2
 800392c:	64bb      	str	r3, [r7, #72]	; 0x48
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800392e:	2300      	movs	r3, #0
 8003930:	64fb      	str	r3, [r7, #76]	; 0x4c
RCC_OscInitStruct.PLL.PLLM = 4;
 8003932:	2304      	movs	r3, #4
 8003934:	653b      	str	r3, [r7, #80]	; 0x50
RCC_OscInitStruct.PLL.PLLN = 60;
 8003936:	233c      	movs	r3, #60	; 0x3c
 8003938:	657b      	str	r3, [r7, #84]	; 0x54
RCC_OscInitStruct.PLL.PLLP = 2;
 800393a:	2302      	movs	r3, #2
 800393c:	65bb      	str	r3, [r7, #88]	; 0x58
RCC_OscInitStruct.PLL.PLLQ = 6;
 800393e:	2306      	movs	r3, #6
 8003940:	65fb      	str	r3, [r7, #92]	; 0x5c
RCC_OscInitStruct.PLL.PLLR = 2;
 8003942:	2302      	movs	r3, #2
 8003944:	663b      	str	r3, [r7, #96]	; 0x60
RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003946:	230c      	movs	r3, #12
 8003948:	667b      	str	r3, [r7, #100]	; 0x64
RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800394a:	2300      	movs	r3, #0
 800394c:	66bb      	str	r3, [r7, #104]	; 0x68
RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	66fb      	str	r3, [r7, #108]	; 0x6c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003956:	4618      	mov	r0, r3
 8003958:	f005 fa36 	bl	8008dc8 <HAL_RCC_OscConfig>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	bf14      	ite	ne
 8003962:	2301      	movne	r3, #1
 8003964:	2300      	moveq	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <_Z18SystemClock_Configv+0xc4>
{
	Error_Handler();
 800396c:	f000 f83e 	bl	80039ec <Error_Handler>
}
/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003970:	233f      	movs	r3, #63	; 0x3f
 8003972:	607b      	str	r3, [r7, #4]
|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003974:	2303      	movs	r3, #3
 8003976:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003978:	2300      	movs	r3, #0
 800397a:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800397c:	2308      	movs	r3, #8
 800397e:	613b      	str	r3, [r7, #16]
RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003980:	2340      	movs	r3, #64	; 0x40
 8003982:	617b      	str	r3, [r7, #20]
RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003984:	2340      	movs	r3, #64	; 0x40
 8003986:	61bb      	str	r3, [r7, #24]
RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800398c:	61fb      	str	r3, [r7, #28]
RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800398e:	2340      	movs	r3, #64	; 0x40
 8003990:	623b      	str	r3, [r7, #32]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003992:	1d3b      	adds	r3, r7, #4
 8003994:	2104      	movs	r1, #4
 8003996:	4618      	mov	r0, r3
 8003998:	f005 fe42 	bl	8009620 <HAL_RCC_ClockConfig>
 800399c:	4603      	mov	r3, r0
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf14      	ite	ne
 80039a2:	2301      	movne	r3, #1
 80039a4:	2300      	moveq	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <_Z18SystemClock_Configv+0x104>
{
	Error_Handler();
 80039ac:	f000 f81e 	bl	80039ec <Error_Handler>
}
}
 80039b0:	bf00      	nop
 80039b2:	3770      	adds	r7, #112	; 0x70
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}
 80039b8:	58024800 	.word	0x58024800
 80039bc:	58000400 	.word	0x58000400

080039c0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]

}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	4603      	mov	r3, r0
 80039dc:	80fb      	strh	r3, [r7, #6]

}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
	...

080039ec <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Error_Handler_Debug */
HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80039f0:	2200      	movs	r2, #0
 80039f2:	2101      	movs	r1, #1
 80039f4:	4808      	ldr	r0, [pc, #32]	; (8003a18 <Error_Handler+0x2c>)
 80039f6:	f005 f979 	bl	8008cec <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80039fa:	2200      	movs	r2, #0
 80039fc:	2102      	movs	r1, #2
 80039fe:	4807      	ldr	r0, [pc, #28]	; (8003a1c <Error_Handler+0x30>)
 8003a00:	f005 f974 	bl	8008cec <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003a04:	2201      	movs	r2, #1
 8003a06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a0a:	4803      	ldr	r0, [pc, #12]	; (8003a18 <Error_Handler+0x2c>)
 8003a0c:	f005 f96e 	bl	8008cec <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a10:	b672      	cpsid	i
}
 8003a12:	bf00      	nop
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8003a14:	e7fe      	b.n	8003a14 <Error_Handler+0x28>
 8003a16:	bf00      	nop
 8003a18:	58020400 	.word	0x58020400
 8003a1c:	58021000 	.word	0x58021000

08003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	ed87 0a01 	vstr	s0, [r7, #4]
 8003a2a:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8003a2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a30:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	ee06 3a90 	vmov	s13, r3
 8003a3a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003a3e:	eeb0 1b46 	vmov.f64	d1, d6
 8003a42:	eeb0 0b47 	vmov.f64	d0, d7
 8003a46:	f00b fbb3 	bl	800f1b0 <pow>
 8003a4a:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8003a4e:	eeb0 0b47 	vmov.f64	d0, d7
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <_Z41__static_initialization_and_destruction_0ii>:
}
/* USER CODE END Error_Handler_Debug */
}
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	f040 80df 	bne.w	8003c28 <_Z41__static_initialization_and_destruction_0ii+0x1d0>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a70:	4293      	cmp	r3, r2
 8003a72:	f040 80d9 	bne.w	8003c28 <_Z41__static_initialization_and_destruction_0ii+0x1d0>
AMT21 encoderJ1(&huart4, 0xD4);
 8003a76:	22d4      	movs	r2, #212	; 0xd4
 8003a78:	497c      	ldr	r1, [pc, #496]	; (8003c6c <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003a7a:	487d      	ldr	r0, [pc, #500]	; (8003c70 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003a7c:	f7fc ffc0 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ3(&huart4, 0xC4);
 8003a80:	22c4      	movs	r2, #196	; 0xc4
 8003a82:	497a      	ldr	r1, [pc, #488]	; (8003c6c <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8003a84:	487b      	ldr	r0, [pc, #492]	; (8003c74 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003a86:	f7fc ffbb 	bl	8000a00 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8003a8a:	2320      	movs	r3, #32
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	4b7a      	ldr	r3, [pc, #488]	; (8003c78 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	497a      	ldr	r1, [pc, #488]	; (8003c7c <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8003a94:	487a      	ldr	r0, [pc, #488]	; (8003c80 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8003a96:	f7fd fb2f 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8003a9a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	4b78      	ldr	r3, [pc, #480]	; (8003c84 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	4978      	ldr	r1, [pc, #480]	; (8003c88 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8003aa6:	4879      	ldr	r0, [pc, #484]	; (8003c8c <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003aa8:	f7fd fb26 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8003aac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	4b74      	ldr	r3, [pc, #464]	; (8003c84 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	4976      	ldr	r1, [pc, #472]	; (8003c90 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8003ab8:	4876      	ldr	r0, [pc, #472]	; (8003c94 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003aba:	f7fd fb1d 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8003abe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	4b6c      	ldr	r3, [pc, #432]	; (8003c78 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8003ac6:	2208      	movs	r2, #8
 8003ac8:	4973      	ldr	r1, [pc, #460]	; (8003c98 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8003aca:	4874      	ldr	r0, [pc, #464]	; (8003c9c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003acc:	f7fd fb14 	bl	80010f8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8003ad0:	2208      	movs	r2, #8
 8003ad2:	4973      	ldr	r1, [pc, #460]	; (8003ca0 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8003ad4:	4873      	ldr	r0, [pc, #460]	; (8003ca4 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8003ad6:	f7fd f886 	bl	8000be6 <_ZN10ServoMotorC1EP17TIM_HandleTypeDefm>
volatile const float C2_q1 = (3.0 * C0_q1) / (Time * Time);
 8003ada:	4b73      	ldr	r3, [pc, #460]	; (8003ca8 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8003adc:	edd3 7a00 	vldr	s15, [r3]
 8003ae0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003ae4:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003ae8:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003aec:	4b6f      	ldr	r3, [pc, #444]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003aee:	ed93 7a00 	vldr	s14, [r3]
 8003af2:	4b6e      	ldr	r3, [pc, #440]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003af4:	edd3 7a00 	vldr	s15, [r3]
 8003af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b00:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003b04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b08:	4b69      	ldr	r3, [pc, #420]	; (8003cb0 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8003b0a:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = (2.0 * C0_q1) / (Time * Time * Time);
 8003b0e:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8003b10:	edd3 7a00 	vldr	s15, [r3]
 8003b14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b18:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003b1c:	4b63      	ldr	r3, [pc, #396]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003b1e:	ed93 7a00 	vldr	s14, [r3]
 8003b22:	4b62      	ldr	r3, [pc, #392]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003b24:	edd3 7a00 	vldr	s15, [r3]
 8003b28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b2c:	4b5f      	ldr	r3, [pc, #380]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003b2e:	edd3 7a00 	vldr	s15, [r3]
 8003b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b36:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b3a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003b3e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b42:	4b5c      	ldr	r3, [pc, #368]	; (8003cb4 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8003b44:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = (3.0 * C0_q3) / (Time * Time);
 8003b48:	4b5b      	ldr	r3, [pc, #364]	; (8003cb8 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8003b4a:	edd3 7a00 	vldr	s15, [r3]
 8003b4e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b52:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8003b56:	ee27 5b06 	vmul.f64	d5, d7, d6
 8003b5a:	4b54      	ldr	r3, [pc, #336]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003b5c:	ed93 7a00 	vldr	s14, [r3]
 8003b60:	4b52      	ldr	r3, [pc, #328]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003b62:	edd3 7a00 	vldr	s15, [r3]
 8003b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003b6e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003b72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003b76:	4b51      	ldr	r3, [pc, #324]	; (8003cbc <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8003b78:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = (2.0 * C0_q3) / (Time * Time * Time);
 8003b7c:	4b4e      	ldr	r3, [pc, #312]	; (8003cb8 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8003b7e:	edd3 7a00 	vldr	s15, [r3]
 8003b82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8003b86:	ee37 5b07 	vadd.f64	d5, d7, d7
 8003b8a:	4b48      	ldr	r3, [pc, #288]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003b8c:	ed93 7a00 	vldr	s14, [r3]
 8003b90:	4b46      	ldr	r3, [pc, #280]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003b92:	edd3 7a00 	vldr	s15, [r3]
 8003b96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b9a:	4b44      	ldr	r3, [pc, #272]	; (8003cac <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8003b9c:	edd3 7a00 	vldr	s15, [r3]
 8003ba0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba4:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003ba8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003bac:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003bb0:	4b43      	ldr	r3, [pc, #268]	; (8003cc0 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8003bb2:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt2 = pow(dt, 2);
 8003bb6:	4b43      	ldr	r3, [pc, #268]	; (8003cc4 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8003bb8:	edd3 7a00 	vldr	s15, [r3]
 8003bbc:	2002      	movs	r0, #2
 8003bbe:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc2:	f7ff ff2d 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003bc6:	eeb0 7b40 	vmov.f64	d7, d0
 8003bca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003bce:	4b3e      	ldr	r3, [pc, #248]	; (8003cc8 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8003bd0:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt3 = pow(dt, 3);
 8003bd4:	4b3b      	ldr	r3, [pc, #236]	; (8003cc4 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8003bd6:	edd3 7a00 	vldr	s15, [r3]
 8003bda:	2003      	movs	r0, #3
 8003bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8003be0:	f7ff ff1e 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003be4:	eeb0 7b40 	vmov.f64	d7, d0
 8003be8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003bec:	4b37      	ldr	r3, [pc, #220]	; (8003ccc <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8003bee:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt4 = pow(dt, 4);
 8003bf2:	4b34      	ldr	r3, [pc, #208]	; (8003cc4 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8003bf4:	edd3 7a00 	vldr	s15, [r3]
 8003bf8:	2004      	movs	r0, #4
 8003bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfe:	f7ff ff0f 	bl	8003a20 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8003c02:	eeb0 7b40 	vmov.f64	d7, d0
 8003c06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8003c0a:	4b31      	ldr	r3, [pc, #196]	; (8003cd0 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8003c0c:	edc3 7a00 	vstr	s15, [r3]
fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;
 8003c10:	4830      	ldr	r0, [pc, #192]	; (8003cd4 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8003c12:	f7fe faa1 	bl	8002158 <_ZN11robot_jointC1Ev>
 8003c16:	4830      	ldr	r0, [pc, #192]	; (8003cd8 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8003c18:	f7fe fa9e 	bl	8002158 <_ZN11robot_jointC1Ev>
 8003c1c:	482f      	ldr	r0, [pc, #188]	; (8003cdc <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8003c1e:	f7fe fa9b 	bl	8002158 <_ZN11robot_jointC1Ev>
 8003c22:	482f      	ldr	r0, [pc, #188]	; (8003ce0 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8003c24:	f7fe fa98 	bl	8002158 <_ZN11robot_jointC1Ev>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d119      	bne.n	8003c62 <_Z41__static_initialization_and_destruction_0ii+0x20a>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d114      	bne.n	8003c62 <_Z41__static_initialization_and_destruction_0ii+0x20a>
ServoMotor gripper(&htim4, TIM_CHANNEL_3);
 8003c38:	481a      	ldr	r0, [pc, #104]	; (8003ca4 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8003c3a:	f7fd f804 	bl	8000c46 <_ZN10ServoMotorD1Ev>
Stepper stepperJ4(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8003c3e:	4817      	ldr	r0, [pc, #92]	; (8003c9c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8003c40:	f7fd fa9e 	bl	8001180 <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8003c44:	4813      	ldr	r0, [pc, #76]	; (8003c94 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8003c46:	f7fd fa9b 	bl	8001180 <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8003c4a:	4810      	ldr	r0, [pc, #64]	; (8003c8c <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8003c4c:	f7fd fa98 	bl	8001180 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8003c50:	480b      	ldr	r0, [pc, #44]	; (8003c80 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8003c52:	f7fd fa95 	bl	8001180 <_ZN7StepperD1Ev>
AMT21 encoderJ3(&huart4, 0xC4);
 8003c56:	4807      	ldr	r0, [pc, #28]	; (8003c74 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8003c58:	f7fc fee6 	bl	8000a28 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8003c5c:	4804      	ldr	r0, [pc, #16]	; (8003c70 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8003c5e:	f7fc fee3 	bl	8000a28 <_ZN5AMT21D1Ev>
}
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	24000ed4 	.word	0x24000ed4
 8003c70:	24000238 	.word	0x24000238
 8003c74:	24000254 	.word	0x24000254
 8003c78:	58020400 	.word	0x58020400
 8003c7c:	24000974 	.word	0x24000974
 8003c80:	24000270 	.word	0x24000270
 8003c84:	58021000 	.word	0x58021000
 8003c88:	24000a58 	.word	0x24000a58
 8003c8c:	24000298 	.word	0x24000298
 8003c90:	240008dc 	.word	0x240008dc
 8003c94:	240002c0 	.word	0x240002c0
 8003c98:	24000aa4 	.word	0x24000aa4
 8003c9c:	240002e8 	.word	0x240002e8
 8003ca0:	24000890 	.word	0x24000890
 8003ca4:	24000310 	.word	0x24000310
 8003ca8:	24000020 	.word	0x24000020
 8003cac:	2400001c 	.word	0x2400001c
 8003cb0:	24000390 	.word	0x24000390
 8003cb4:	24000394 	.word	0x24000394
 8003cb8:	24000024 	.word	0x24000024
 8003cbc:	24000398 	.word	0x24000398
 8003cc0:	2400039c 	.word	0x2400039c
 8003cc4:	24000034 	.word	0x24000034
 8003cc8:	240003b0 	.word	0x240003b0
 8003ccc:	240003b4 	.word	0x240003b4
 8003cd0:	240003b8 	.word	0x240003b8
 8003cd4:	240005c8 	.word	0x240005c8
 8003cd8:	2400064c 	.word	0x2400064c
 8003cdc:	240006d0 	.word	0x240006d0
 8003ce0:	24000754 	.word	0x24000754

08003ce4 <_GLOBAL__sub_I_TIM_MS>:
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003cec:	2001      	movs	r0, #1
 8003cee:	f7ff feb3 	bl	8003a58 <_Z41__static_initialization_and_destruction_0ii>
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <_GLOBAL__sub_D_TIM_MS>:
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	f7ff feab 	bl	8003a58 <_Z41__static_initialization_and_destruction_0ii>
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8003d08:	4b27      	ldr	r3, [pc, #156]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d0a:	4a28      	ldr	r2, [pc, #160]	; (8003dac <MX_SPI3_Init+0xa8>)
 8003d0c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003d0e:	4b26      	ldr	r3, [pc, #152]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d10:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003d14:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003d16:	4b24      	ldr	r3, [pc, #144]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d18:	2200      	movs	r2, #0
 8003d1a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003d1c:	4b22      	ldr	r3, [pc, #136]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d1e:	2203      	movs	r2, #3
 8003d20:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d22:	4b21      	ldr	r3, [pc, #132]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d28:	4b1f      	ldr	r3, [pc, #124]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003d2e:	4b1e      	ldr	r3, [pc, #120]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d30:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003d34:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d36:	4b1c      	ldr	r3, [pc, #112]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d3c:	4b1a      	ldr	r3, [pc, #104]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d42:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d48:	4b17      	ldr	r3, [pc, #92]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8003d4e:	4b16      	ldr	r3, [pc, #88]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003d54:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003d5a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003d5c:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003d62:	4b11      	ldr	r3, [pc, #68]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003d68:	4b0f      	ldr	r3, [pc, #60]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003d6e:	4b0e      	ldr	r3, [pc, #56]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003d74:	4b0c      	ldr	r3, [pc, #48]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003d80:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8003d86:	4b08      	ldr	r3, [pc, #32]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003d8c:	4b06      	ldr	r3, [pc, #24]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003d92:	4805      	ldr	r0, [pc, #20]	; (8003da8 <MX_SPI3_Init+0xa4>)
 8003d94:	f007 fb32 	bl	800b3fc <HAL_SPI_Init>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8003d9e:	f7ff fe25 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	24000808 	.word	0x24000808
 8003dac:	40003c00 	.word	0x40003c00

08003db0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b0b8      	sub	sp, #224	; 0xe0
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	605a      	str	r2, [r3, #4]
 8003dc2:	609a      	str	r2, [r3, #8]
 8003dc4:	60da      	str	r2, [r3, #12]
 8003dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dc8:	f107 0310 	add.w	r3, r7, #16
 8003dcc:	22bc      	movs	r2, #188	; 0xbc
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f00b ffc9 	bl	800fd68 <memset>
  if(spiHandle->Instance==SPI3)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a25      	ldr	r2, [pc, #148]	; (8003e70 <HAL_SPI_MspInit+0xc0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d142      	bne.n	8003e66 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8003de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003de4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dea:	f107 0310 	add.w	r3, r7, #16
 8003dee:	4618      	mov	r0, r3
 8003df0:	f005 ffa2 	bl	8009d38 <HAL_RCCEx_PeriphCLKConfig>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8003dfa:	f7ff fdf7 	bl	80039ec <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003dfe:	4b1d      	ldr	r3, [pc, #116]	; (8003e74 <HAL_SPI_MspInit+0xc4>)
 8003e00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e04:	4a1b      	ldr	r2, [pc, #108]	; (8003e74 <HAL_SPI_MspInit+0xc4>)
 8003e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003e0e:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <HAL_SPI_MspInit+0xc4>)
 8003e10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003e14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e18:	60fb      	str	r3, [r7, #12]
 8003e1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e1c:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <HAL_SPI_MspInit+0xc4>)
 8003e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e22:	4a14      	ldr	r2, [pc, #80]	; (8003e74 <HAL_SPI_MspInit+0xc4>)
 8003e24:	f043 0304 	orr.w	r3, r3, #4
 8003e28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e2c:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <HAL_SPI_MspInit+0xc4>)
 8003e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003e3a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003e3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e42:	2302      	movs	r3, #2
 8003e44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003e54:	2306      	movs	r3, #6
 8003e56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e5a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4805      	ldr	r0, [pc, #20]	; (8003e78 <HAL_SPI_MspInit+0xc8>)
 8003e62:	f004 fd93 	bl	800898c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8003e66:	bf00      	nop
 8003e68:	37e0      	adds	r7, #224	; 0xe0
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40003c00 	.word	0x40003c00
 8003e74:	58024400 	.word	0x58024400
 8003e78:	58020800 	.word	0x58020800

08003e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e82:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <HAL_MspInit+0x30>)
 8003e84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e88:	4a08      	ldr	r2, [pc, #32]	; (8003eac <HAL_MspInit+0x30>)
 8003e8a:	f043 0302 	orr.w	r3, r3, #2
 8003e8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_MspInit+0x30>)
 8003e94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003e98:	f003 0302 	and.w	r3, r3, #2
 8003e9c:	607b      	str	r3, [r7, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	58024400 	.word	0x58024400

08003eb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003eb4:	e7fe      	b.n	8003eb4 <NMI_Handler+0x4>

08003eb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003eba:	e7fe      	b.n	8003eba <HardFault_Handler+0x4>

08003ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ec0:	e7fe      	b.n	8003ec0 <MemManage_Handler+0x4>

08003ec2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ec6:	e7fe      	b.n	8003ec6 <BusFault_Handler+0x4>

08003ec8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ecc:	e7fe      	b.n	8003ecc <UsageFault_Handler+0x4>

08003ece <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eea:	b480      	push	{r7}
 8003eec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003eee:	bf00      	nop
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003efc:	f001 fbc6 	bl	800568c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8003f00:	f001 fcff 	bl	8005902 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8003f04:	bf00      	nop
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8003f0c:	4802      	ldr	r0, [pc, #8]	; (8003f18 <DMA1_Stream0_IRQHandler+0x10>)
 8003f0e:	f003 fa2b 	bl	8007368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	24000e5c 	.word	0x24000e5c

08003f1c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003f20:	4802      	ldr	r0, [pc, #8]	; (8003f2c <DMA1_Stream1_IRQHandler+0x10>)
 8003f22:	f003 fa21 	bl	8007368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	24000cdc 	.word	0x24000cdc

08003f30 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003f34:	4802      	ldr	r0, [pc, #8]	; (8003f40 <DMA1_Stream2_IRQHandler+0x10>)
 8003f36:	f003 fa17 	bl	8007368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	24000de4 	.word	0x24000de4

08003f44 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003f48:	4802      	ldr	r0, [pc, #8]	; (8003f54 <DMA1_Stream3_IRQHandler+0x10>)
 8003f4a:	f003 fa0d 	bl	8007368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	24000bd4 	.word	0x24000bd4

08003f58 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8003f5c:	4802      	ldr	r0, [pc, #8]	; (8003f68 <DMA1_Stream4_IRQHandler+0x10>)
 8003f5e:	f003 fa03 	bl	8007368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	24000f64 	.word	0x24000f64

08003f6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8003f70:	2040      	movs	r0, #64	; 0x40
 8003f72:	f004 fed4 	bl	8008d1e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 8003f76:	2080      	movs	r0, #128	; 0x80
 8003f78:	f004 fed1 	bl	8008d1e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003f7c:	bf00      	nop
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003f84:	4802      	ldr	r0, [pc, #8]	; (8003f90 <USART3_IRQHandler+0x10>)
 8003f86:	f009 f897 	bl	800d0b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	24000d54 	.word	0x24000d54

08003f94 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8003f98:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003f9c:	f004 febf 	bl	8008d1e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8003fa0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003fa4:	f004 febb 	bl	8008d1e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8003fa8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003fac:	f004 feb7 	bl	8008d1e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8003fb0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003fb4:	f004 feb3 	bl	8008d1e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003fb8:	bf00      	nop
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003fc0:	4802      	ldr	r0, [pc, #8]	; (8003fcc <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8003fc2:	f007 fd7b 	bl	800babc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8003fc6:	bf00      	nop
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	24000b3c 	.word	0x24000b3c

08003fd0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8003fd4:	4802      	ldr	r0, [pc, #8]	; (8003fe0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8003fd6:	f007 fd71 	bl	800babc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8003fda:	bf00      	nop
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	240009c0 	.word	0x240009c0

08003fe4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003fe8:	4802      	ldr	r0, [pc, #8]	; (8003ff4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003fea:	f007 fd67 	bl	800babc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003fee:	bf00      	nop
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	24000af0 	.word	0x24000af0

08003ff8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003ffc:	4802      	ldr	r0, [pc, #8]	; (8004008 <TIM5_IRQHandler+0x10>)
 8003ffe:	f007 fd5d 	bl	800babc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	24000928 	.word	0x24000928

0800400c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8004010:	4802      	ldr	r0, [pc, #8]	; (800401c <UART4_IRQHandler+0x10>)
 8004012:	f009 f851 	bl	800d0b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8004016:	bf00      	nop
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	24000ed4 	.word	0x24000ed4

08004020 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004024:	4802      	ldr	r0, [pc, #8]	; (8004030 <TIM6_DAC_IRQHandler+0x10>)
 8004026:	f007 fd49 	bl	800babc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800402a:	bf00      	nop
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	24000a0c 	.word	0x24000a0c

08004034 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004038:	4802      	ldr	r0, [pc, #8]	; (8004044 <TIM7_IRQHandler+0x10>)
 800403a:	f007 fd3f 	bl	800babc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800403e:	bf00      	nop
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	24000b88 	.word	0x24000b88

08004048 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800404c:	4802      	ldr	r0, [pc, #8]	; (8004058 <UART7_IRQHandler+0x10>)
 800404e:	f009 f833 	bl	800d0b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	24000c4c 	.word	0x24000c4c

0800405c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
	return 1;
 8004060:	2301      	movs	r3, #1
}
 8004062:	4618      	mov	r0, r3
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr

0800406c <_kill>:

int _kill(int pid, int sig)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004076:	f00b fe3f 	bl	800fcf8 <__errno>
 800407a:	4603      	mov	r3, r0
 800407c:	2216      	movs	r2, #22
 800407e:	601a      	str	r2, [r3, #0]
	return -1;
 8004080:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004084:	4618      	mov	r0, r3
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <_exit>:

void _exit (int status)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004094:	f04f 31ff 	mov.w	r1, #4294967295
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff ffe7 	bl	800406c <_kill>
	while (1) {}		/* Make sure we hang here */
 800409e:	e7fe      	b.n	800409e <_exit+0x12>

080040a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	e00a      	b.n	80040c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80040b2:	f3af 8000 	nop.w
 80040b6:	4601      	mov	r1, r0
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	1c5a      	adds	r2, r3, #1
 80040bc:	60ba      	str	r2, [r7, #8]
 80040be:	b2ca      	uxtb	r2, r1
 80040c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	3301      	adds	r3, #1
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	dbf0      	blt.n	80040b2 <_read+0x12>
	}

return len;
 80040d0:	687b      	ldr	r3, [r7, #4]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b086      	sub	sp, #24
 80040de:	af00      	add	r7, sp, #0
 80040e0:	60f8      	str	r0, [r7, #12]
 80040e2:	60b9      	str	r1, [r7, #8]
 80040e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	e009      	b.n	8004100 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	60ba      	str	r2, [r7, #8]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	3301      	adds	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	429a      	cmp	r2, r3
 8004106:	dbf1      	blt.n	80040ec <_write+0x12>
	}
	return len;
 8004108:	687b      	ldr	r3, [r7, #4]
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <_close>:

int _close(int file)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
	return -1;
 800411a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800413a:	605a      	str	r2, [r3, #4]
	return 0;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <_isatty>:

int _isatty(int file)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
	return 1;
 8004152:	2301      	movs	r3, #1
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
	return 0;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
	...

0800417c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004184:	4a14      	ldr	r2, [pc, #80]	; (80041d8 <_sbrk+0x5c>)
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <_sbrk+0x60>)
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004190:	4b13      	ldr	r3, [pc, #76]	; (80041e0 <_sbrk+0x64>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d102      	bne.n	800419e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004198:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <_sbrk+0x64>)
 800419a:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <_sbrk+0x68>)
 800419c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800419e:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <_sbrk+0x64>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4413      	add	r3, r2
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d207      	bcs.n	80041bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041ac:	f00b fda4 	bl	800fcf8 <__errno>
 80041b0:	4603      	mov	r3, r0
 80041b2:	220c      	movs	r2, #12
 80041b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041b6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ba:	e009      	b.n	80041d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041bc:	4b08      	ldr	r3, [pc, #32]	; (80041e0 <_sbrk+0x64>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <_sbrk+0x64>)
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4413      	add	r3, r2
 80041ca:	4a05      	ldr	r2, [pc, #20]	; (80041e0 <_sbrk+0x64>)
 80041cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041ce:	68fb      	ldr	r3, [r7, #12]
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	240015f0 	.word	0x240015f0
 80041dc:	00000400 	.word	0x00000400
 80041e0:	240007d8 	.word	0x240007d8
 80041e4:	24000ff0 	.word	0x24000ff0

080041e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80041ec:	4b39      	ldr	r3, [pc, #228]	; (80042d4 <SystemInit+0xec>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f2:	4a38      	ldr	r2, [pc, #224]	; (80042d4 <SystemInit+0xec>)
 80041f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80041fc:	4b36      	ldr	r3, [pc, #216]	; (80042d8 <SystemInit+0xf0>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	2b06      	cmp	r3, #6
 8004206:	d807      	bhi.n	8004218 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004208:	4b33      	ldr	r3, [pc, #204]	; (80042d8 <SystemInit+0xf0>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f023 030f 	bic.w	r3, r3, #15
 8004210:	4a31      	ldr	r2, [pc, #196]	; (80042d8 <SystemInit+0xf0>)
 8004212:	f043 0307 	orr.w	r3, r3, #7
 8004216:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004218:	4b30      	ldr	r3, [pc, #192]	; (80042dc <SystemInit+0xf4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a2f      	ldr	r2, [pc, #188]	; (80042dc <SystemInit+0xf4>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004224:	4b2d      	ldr	r3, [pc, #180]	; (80042dc <SystemInit+0xf4>)
 8004226:	2200      	movs	r2, #0
 8004228:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800422a:	4b2c      	ldr	r3, [pc, #176]	; (80042dc <SystemInit+0xf4>)
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	492b      	ldr	r1, [pc, #172]	; (80042dc <SystemInit+0xf4>)
 8004230:	4b2b      	ldr	r3, [pc, #172]	; (80042e0 <SystemInit+0xf8>)
 8004232:	4013      	ands	r3, r2
 8004234:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004236:	4b28      	ldr	r3, [pc, #160]	; (80042d8 <SystemInit+0xf0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0308 	and.w	r3, r3, #8
 800423e:	2b00      	cmp	r3, #0
 8004240:	d007      	beq.n	8004252 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004242:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <SystemInit+0xf0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 030f 	bic.w	r3, r3, #15
 800424a:	4a23      	ldr	r2, [pc, #140]	; (80042d8 <SystemInit+0xf0>)
 800424c:	f043 0307 	orr.w	r3, r3, #7
 8004250:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004252:	4b22      	ldr	r3, [pc, #136]	; (80042dc <SystemInit+0xf4>)
 8004254:	2200      	movs	r2, #0
 8004256:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004258:	4b20      	ldr	r3, [pc, #128]	; (80042dc <SystemInit+0xf4>)
 800425a:	2200      	movs	r2, #0
 800425c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800425e:	4b1f      	ldr	r3, [pc, #124]	; (80042dc <SystemInit+0xf4>)
 8004260:	2200      	movs	r2, #0
 8004262:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004264:	4b1d      	ldr	r3, [pc, #116]	; (80042dc <SystemInit+0xf4>)
 8004266:	4a1f      	ldr	r2, [pc, #124]	; (80042e4 <SystemInit+0xfc>)
 8004268:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800426a:	4b1c      	ldr	r3, [pc, #112]	; (80042dc <SystemInit+0xf4>)
 800426c:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <SystemInit+0x100>)
 800426e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004270:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <SystemInit+0xf4>)
 8004272:	4a1e      	ldr	r2, [pc, #120]	; (80042ec <SystemInit+0x104>)
 8004274:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004276:	4b19      	ldr	r3, [pc, #100]	; (80042dc <SystemInit+0xf4>)
 8004278:	2200      	movs	r2, #0
 800427a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800427c:	4b17      	ldr	r3, [pc, #92]	; (80042dc <SystemInit+0xf4>)
 800427e:	4a1b      	ldr	r2, [pc, #108]	; (80042ec <SystemInit+0x104>)
 8004280:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004282:	4b16      	ldr	r3, [pc, #88]	; (80042dc <SystemInit+0xf4>)
 8004284:	2200      	movs	r2, #0
 8004286:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004288:	4b14      	ldr	r3, [pc, #80]	; (80042dc <SystemInit+0xf4>)
 800428a:	4a18      	ldr	r2, [pc, #96]	; (80042ec <SystemInit+0x104>)
 800428c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800428e:	4b13      	ldr	r3, [pc, #76]	; (80042dc <SystemInit+0xf4>)
 8004290:	2200      	movs	r2, #0
 8004292:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004294:	4b11      	ldr	r3, [pc, #68]	; (80042dc <SystemInit+0xf4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a10      	ldr	r2, [pc, #64]	; (80042dc <SystemInit+0xf4>)
 800429a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800429e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80042a0:	4b0e      	ldr	r3, [pc, #56]	; (80042dc <SystemInit+0xf4>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80042a6:	4b12      	ldr	r3, [pc, #72]	; (80042f0 <SystemInit+0x108>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <SystemInit+0x10c>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042b2:	d202      	bcs.n	80042ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80042b4:	4b10      	ldr	r3, [pc, #64]	; (80042f8 <SystemInit+0x110>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80042ba:	4b10      	ldr	r3, [pc, #64]	; (80042fc <SystemInit+0x114>)
 80042bc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80042c0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80042c2:	4b04      	ldr	r3, [pc, #16]	; (80042d4 <SystemInit+0xec>)
 80042c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80042c8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80042ca:	bf00      	nop
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	e000ed00 	.word	0xe000ed00
 80042d8:	52002000 	.word	0x52002000
 80042dc:	58024400 	.word	0x58024400
 80042e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80042e4:	02020200 	.word	0x02020200
 80042e8:	01ff0000 	.word	0x01ff0000
 80042ec:	01010280 	.word	0x01010280
 80042f0:	5c001000 	.word	0x5c001000
 80042f4:	ffff0000 	.word	0xffff0000
 80042f8:	51008108 	.word	0x51008108
 80042fc:	52004000 	.word	0x52004000

08004300 <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b09a      	sub	sp, #104	; 0x68
 8004304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004306:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	605a      	str	r2, [r3, #4]
 8004310:	609a      	str	r2, [r3, #8]
 8004312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004314:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	605a      	str	r2, [r3, #4]
 800431e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004320:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	60da      	str	r2, [r3, #12]
 800432e:	611a      	str	r2, [r3, #16]
 8004330:	615a      	str	r2, [r3, #20]
 8004332:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004334:	1d3b      	adds	r3, r7, #4
 8004336:	222c      	movs	r2, #44	; 0x2c
 8004338:	2100      	movs	r1, #0
 800433a:	4618      	mov	r0, r3
 800433c:	f00b fd14 	bl	800fd68 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004340:	4b44      	ldr	r3, [pc, #272]	; (8004454 <MX_TIM1_Init+0x154>)
 8004342:	4a45      	ldr	r2, [pc, #276]	; (8004458 <MX_TIM1_Init+0x158>)
 8004344:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8004346:	4b43      	ldr	r3, [pc, #268]	; (8004454 <MX_TIM1_Init+0x154>)
 8004348:	22c7      	movs	r2, #199	; 0xc7
 800434a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800434c:	4b41      	ldr	r3, [pc, #260]	; (8004454 <MX_TIM1_Init+0x154>)
 800434e:	2200      	movs	r2, #0
 8004350:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8004352:	4b40      	ldr	r3, [pc, #256]	; (8004454 <MX_TIM1_Init+0x154>)
 8004354:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8004358:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800435a:	4b3e      	ldr	r3, [pc, #248]	; (8004454 <MX_TIM1_Init+0x154>)
 800435c:	2200      	movs	r2, #0
 800435e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004360:	4b3c      	ldr	r3, [pc, #240]	; (8004454 <MX_TIM1_Init+0x154>)
 8004362:	2200      	movs	r2, #0
 8004364:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004366:	4b3b      	ldr	r3, [pc, #236]	; (8004454 <MX_TIM1_Init+0x154>)
 8004368:	2280      	movs	r2, #128	; 0x80
 800436a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800436c:	4839      	ldr	r0, [pc, #228]	; (8004454 <MX_TIM1_Init+0x154>)
 800436e:	f007 f966 	bl	800b63e <HAL_TIM_Base_Init>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004378:	f7ff fb38 	bl	80039ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800437c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004380:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004382:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004386:	4619      	mov	r1, r3
 8004388:	4832      	ldr	r0, [pc, #200]	; (8004454 <MX_TIM1_Init+0x154>)
 800438a:	f007 fdcb 	bl	800bf24 <HAL_TIM_ConfigClockSource>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004394:	f7ff fb2a 	bl	80039ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004398:	482e      	ldr	r0, [pc, #184]	; (8004454 <MX_TIM1_Init+0x154>)
 800439a:	f007 fa1f 	bl	800b7dc <HAL_TIM_PWM_Init>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80043a4:	f7ff fb22 	bl	80039ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043a8:	2300      	movs	r3, #0
 80043aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80043ac:	2300      	movs	r3, #0
 80043ae:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043b0:	2300      	movs	r3, #0
 80043b2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80043b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80043b8:	4619      	mov	r1, r3
 80043ba:	4826      	ldr	r0, [pc, #152]	; (8004454 <MX_TIM1_Init+0x154>)
 80043bc:	f008 fb06 	bl	800c9cc <HAL_TIMEx_MasterConfigSynchronization>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d001      	beq.n	80043ca <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80043c6:	f7ff fb11 	bl	80039ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80043ca:	2360      	movs	r3, #96	; 0x60
 80043cc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80043ce:	f240 1339 	movw	r3, #313	; 0x139
 80043d2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80043d4:	2300      	movs	r3, #0
 80043d6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80043d8:	2300      	movs	r3, #0
 80043da:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80043dc:	2300      	movs	r3, #0
 80043de:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80043e0:	2300      	movs	r3, #0
 80043e2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80043e4:	2300      	movs	r3, #0
 80043e6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80043e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80043ec:	2204      	movs	r2, #4
 80043ee:	4619      	mov	r1, r3
 80043f0:	4818      	ldr	r0, [pc, #96]	; (8004454 <MX_TIM1_Init+0x154>)
 80043f2:	f007 fc83 	bl	800bcfc <HAL_TIM_PWM_ConfigChannel>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80043fc:	f7ff faf6 	bl	80039ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004400:	2300      	movs	r3, #0
 8004402:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004404:	2300      	movs	r3, #0
 8004406:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004414:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004418:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800441e:	2300      	movs	r3, #0
 8004420:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004426:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004428:	2300      	movs	r3, #0
 800442a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800442c:	2300      	movs	r3, #0
 800442e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004430:	1d3b      	adds	r3, r7, #4
 8004432:	4619      	mov	r1, r3
 8004434:	4807      	ldr	r0, [pc, #28]	; (8004454 <MX_TIM1_Init+0x154>)
 8004436:	f008 fb57 	bl	800cae8 <HAL_TIMEx_ConfigBreakDeadTime>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8004440:	f7ff fad4 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004444:	4803      	ldr	r0, [pc, #12]	; (8004454 <MX_TIM1_Init+0x154>)
 8004446:	f000 fc85 	bl	8004d54 <HAL_TIM_MspPostInit>

}
 800444a:	bf00      	nop
 800444c:	3768      	adds	r7, #104	; 0x68
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	24000a58 	.word	0x24000a58
 8004458:	40010000 	.word	0x40010000

0800445c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08e      	sub	sp, #56	; 0x38
 8004460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	605a      	str	r2, [r3, #4]
 800446c:	609a      	str	r2, [r3, #8]
 800446e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004470:	f107 031c 	add.w	r3, r7, #28
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800447c:	463b      	mov	r3, r7
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	605a      	str	r2, [r3, #4]
 8004484:	609a      	str	r2, [r3, #8]
 8004486:	60da      	str	r2, [r3, #12]
 8004488:	611a      	str	r2, [r3, #16]
 800448a:	615a      	str	r2, [r3, #20]
 800448c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800448e:	4b2e      	ldr	r3, [pc, #184]	; (8004548 <MX_TIM2_Init+0xec>)
 8004490:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004494:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8004496:	4b2c      	ldr	r3, [pc, #176]	; (8004548 <MX_TIM2_Init+0xec>)
 8004498:	22c7      	movs	r2, #199	; 0xc7
 800449a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800449c:	4b2a      	ldr	r3, [pc, #168]	; (8004548 <MX_TIM2_Init+0xec>)
 800449e:	2200      	movs	r2, #0
 80044a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 80044a2:	4b29      	ldr	r3, [pc, #164]	; (8004548 <MX_TIM2_Init+0xec>)
 80044a4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80044a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044aa:	4b27      	ldr	r3, [pc, #156]	; (8004548 <MX_TIM2_Init+0xec>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80044b0:	4b25      	ldr	r3, [pc, #148]	; (8004548 <MX_TIM2_Init+0xec>)
 80044b2:	2280      	movs	r2, #128	; 0x80
 80044b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80044b6:	4824      	ldr	r0, [pc, #144]	; (8004548 <MX_TIM2_Init+0xec>)
 80044b8:	f007 f8c1 	bl	800b63e <HAL_TIM_Base_Init>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80044c2:	f7ff fa93 	bl	80039ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80044cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044d0:	4619      	mov	r1, r3
 80044d2:	481d      	ldr	r0, [pc, #116]	; (8004548 <MX_TIM2_Init+0xec>)
 80044d4:	f007 fd26 	bl	800bf24 <HAL_TIM_ConfigClockSource>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80044de:	f7ff fa85 	bl	80039ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80044e2:	4819      	ldr	r0, [pc, #100]	; (8004548 <MX_TIM2_Init+0xec>)
 80044e4:	f007 f97a 	bl	800b7dc <HAL_TIM_PWM_Init>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80044ee:	f7ff fa7d 	bl	80039ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044fa:	f107 031c 	add.w	r3, r7, #28
 80044fe:	4619      	mov	r1, r3
 8004500:	4811      	ldr	r0, [pc, #68]	; (8004548 <MX_TIM2_Init+0xec>)
 8004502:	f008 fa63 	bl	800c9cc <HAL_TIMEx_MasterConfigSynchronization>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800450c:	f7ff fa6e 	bl	80039ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004510:	2360      	movs	r3, #96	; 0x60
 8004512:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8004514:	f240 1339 	movw	r3, #313	; 0x139
 8004518:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800451a:	2300      	movs	r3, #0
 800451c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800451e:	2300      	movs	r3, #0
 8004520:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004522:	463b      	mov	r3, r7
 8004524:	2208      	movs	r2, #8
 8004526:	4619      	mov	r1, r3
 8004528:	4807      	ldr	r0, [pc, #28]	; (8004548 <MX_TIM2_Init+0xec>)
 800452a:	f007 fbe7 	bl	800bcfc <HAL_TIM_PWM_ConfigChannel>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8004534:	f7ff fa5a 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004538:	4803      	ldr	r0, [pc, #12]	; (8004548 <MX_TIM2_Init+0xec>)
 800453a:	f000 fc0b 	bl	8004d54 <HAL_TIM_MspPostInit>

}
 800453e:	bf00      	nop
 8004540:	3738      	adds	r7, #56	; 0x38
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	24000aa4 	.word	0x24000aa4

0800454c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08e      	sub	sp, #56	; 0x38
 8004550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]
 800455a:	605a      	str	r2, [r3, #4]
 800455c:	609a      	str	r2, [r3, #8]
 800455e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004560:	f107 031c 	add.w	r3, r7, #28
 8004564:	2200      	movs	r2, #0
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	605a      	str	r2, [r3, #4]
 800456a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800456c:	463b      	mov	r3, r7
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	605a      	str	r2, [r3, #4]
 8004574:	609a      	str	r2, [r3, #8]
 8004576:	60da      	str	r2, [r3, #12]
 8004578:	611a      	str	r2, [r3, #16]
 800457a:	615a      	str	r2, [r3, #20]
 800457c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800457e:	4b2d      	ldr	r3, [pc, #180]	; (8004634 <MX_TIM3_Init+0xe8>)
 8004580:	4a2d      	ldr	r2, [pc, #180]	; (8004638 <MX_TIM3_Init+0xec>)
 8004582:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8004584:	4b2b      	ldr	r3, [pc, #172]	; (8004634 <MX_TIM3_Init+0xe8>)
 8004586:	22c7      	movs	r2, #199	; 0xc7
 8004588:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800458a:	4b2a      	ldr	r3, [pc, #168]	; (8004634 <MX_TIM3_Init+0xe8>)
 800458c:	2200      	movs	r2, #0
 800458e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 8004590:	4b28      	ldr	r3, [pc, #160]	; (8004634 <MX_TIM3_Init+0xe8>)
 8004592:	f640 125f 	movw	r2, #2399	; 0x95f
 8004596:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004598:	4b26      	ldr	r3, [pc, #152]	; (8004634 <MX_TIM3_Init+0xe8>)
 800459a:	2200      	movs	r2, #0
 800459c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800459e:	4b25      	ldr	r3, [pc, #148]	; (8004634 <MX_TIM3_Init+0xe8>)
 80045a0:	2280      	movs	r2, #128	; 0x80
 80045a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80045a4:	4823      	ldr	r0, [pc, #140]	; (8004634 <MX_TIM3_Init+0xe8>)
 80045a6:	f007 f84a 	bl	800b63e <HAL_TIM_Base_Init>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80045b0:	f7ff fa1c 	bl	80039ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80045ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045be:	4619      	mov	r1, r3
 80045c0:	481c      	ldr	r0, [pc, #112]	; (8004634 <MX_TIM3_Init+0xe8>)
 80045c2:	f007 fcaf 	bl	800bf24 <HAL_TIM_ConfigClockSource>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80045cc:	f7ff fa0e 	bl	80039ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80045d0:	4818      	ldr	r0, [pc, #96]	; (8004634 <MX_TIM3_Init+0xe8>)
 80045d2:	f007 f903 	bl	800b7dc <HAL_TIM_PWM_Init>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80045dc:	f7ff fa06 	bl	80039ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80045e4:	2300      	movs	r3, #0
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80045e8:	f107 031c 	add.w	r3, r7, #28
 80045ec:	4619      	mov	r1, r3
 80045ee:	4811      	ldr	r0, [pc, #68]	; (8004634 <MX_TIM3_Init+0xe8>)
 80045f0:	f008 f9ec 	bl	800c9cc <HAL_TIMEx_MasterConfigSynchronization>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80045fa:	f7ff f9f7 	bl	80039ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80045fe:	2360      	movs	r3, #96	; 0x60
 8004600:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004606:	2300      	movs	r3, #0
 8004608:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800460a:	2300      	movs	r3, #0
 800460c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800460e:	463b      	mov	r3, r7
 8004610:	2200      	movs	r2, #0
 8004612:	4619      	mov	r1, r3
 8004614:	4807      	ldr	r0, [pc, #28]	; (8004634 <MX_TIM3_Init+0xe8>)
 8004616:	f007 fb71 	bl	800bcfc <HAL_TIM_PWM_ConfigChannel>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8004620:	f7ff f9e4 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004624:	4803      	ldr	r0, [pc, #12]	; (8004634 <MX_TIM3_Init+0xe8>)
 8004626:	f000 fb95 	bl	8004d54 <HAL_TIM_MspPostInit>

}
 800462a:	bf00      	nop
 800462c:	3738      	adds	r7, #56	; 0x38
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	24000974 	.word	0x24000974
 8004638:	40000400 	.word	0x40000400

0800463c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08e      	sub	sp, #56	; 0x38
 8004640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
 800464a:	605a      	str	r2, [r3, #4]
 800464c:	609a      	str	r2, [r3, #8]
 800464e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004650:	f107 031c 	add.w	r3, r7, #28
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	605a      	str	r2, [r3, #4]
 800465a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800465c:	463b      	mov	r3, r7
 800465e:	2200      	movs	r2, #0
 8004660:	601a      	str	r2, [r3, #0]
 8004662:	605a      	str	r2, [r3, #4]
 8004664:	609a      	str	r2, [r3, #8]
 8004666:	60da      	str	r2, [r3, #12]
 8004668:	611a      	str	r2, [r3, #16]
 800466a:	615a      	str	r2, [r3, #20]
 800466c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800466e:	4b2d      	ldr	r3, [pc, #180]	; (8004724 <MX_TIM4_Init+0xe8>)
 8004670:	4a2d      	ldr	r2, [pc, #180]	; (8004728 <MX_TIM4_Init+0xec>)
 8004672:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8004674:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <MX_TIM4_Init+0xe8>)
 8004676:	22ef      	movs	r2, #239	; 0xef
 8004678:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800467a:	4b2a      	ldr	r3, [pc, #168]	; (8004724 <MX_TIM4_Init+0xe8>)
 800467c:	2200      	movs	r2, #0
 800467e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8004680:	4b28      	ldr	r3, [pc, #160]	; (8004724 <MX_TIM4_Init+0xe8>)
 8004682:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004686:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004688:	4b26      	ldr	r3, [pc, #152]	; (8004724 <MX_TIM4_Init+0xe8>)
 800468a:	2200      	movs	r2, #0
 800468c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800468e:	4b25      	ldr	r3, [pc, #148]	; (8004724 <MX_TIM4_Init+0xe8>)
 8004690:	2280      	movs	r2, #128	; 0x80
 8004692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004694:	4823      	ldr	r0, [pc, #140]	; (8004724 <MX_TIM4_Init+0xe8>)
 8004696:	f006 ffd2 	bl	800b63e <HAL_TIM_Base_Init>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80046a0:	f7ff f9a4 	bl	80039ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80046aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046ae:	4619      	mov	r1, r3
 80046b0:	481c      	ldr	r0, [pc, #112]	; (8004724 <MX_TIM4_Init+0xe8>)
 80046b2:	f007 fc37 	bl	800bf24 <HAL_TIM_ConfigClockSource>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d001      	beq.n	80046c0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80046bc:	f7ff f996 	bl	80039ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80046c0:	4818      	ldr	r0, [pc, #96]	; (8004724 <MX_TIM4_Init+0xe8>)
 80046c2:	f007 f88b 	bl	800b7dc <HAL_TIM_PWM_Init>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80046cc:	f7ff f98e 	bl	80039ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80046d8:	f107 031c 	add.w	r3, r7, #28
 80046dc:	4619      	mov	r1, r3
 80046de:	4811      	ldr	r0, [pc, #68]	; (8004724 <MX_TIM4_Init+0xe8>)
 80046e0:	f008 f974 	bl	800c9cc <HAL_TIMEx_MasterConfigSynchronization>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80046ea:	f7ff f97f 	bl	80039ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046ee:	2360      	movs	r3, #96	; 0x60
 80046f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046fa:	2300      	movs	r3, #0
 80046fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80046fe:	463b      	mov	r3, r7
 8004700:	2208      	movs	r2, #8
 8004702:	4619      	mov	r1, r3
 8004704:	4807      	ldr	r0, [pc, #28]	; (8004724 <MX_TIM4_Init+0xe8>)
 8004706:	f007 faf9 	bl	800bcfc <HAL_TIM_PWM_ConfigChannel>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004710:	f7ff f96c 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004714:	4803      	ldr	r0, [pc, #12]	; (8004724 <MX_TIM4_Init+0xe8>)
 8004716:	f000 fb1d 	bl	8004d54 <HAL_TIM_MspPostInit>

}
 800471a:	bf00      	nop
 800471c:	3738      	adds	r7, #56	; 0x38
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	24000890 	.word	0x24000890
 8004728:	40000800 	.word	0x40000800

0800472c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004732:	f107 0310 	add.w	r3, r7, #16
 8004736:	2200      	movs	r2, #0
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	605a      	str	r2, [r3, #4]
 800473c:	609a      	str	r2, [r3, #8]
 800473e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004740:	1d3b      	adds	r3, r7, #4
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	605a      	str	r2, [r3, #4]
 8004748:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800474a:	4b1d      	ldr	r3, [pc, #116]	; (80047c0 <MX_TIM5_Init+0x94>)
 800474c:	4a1d      	ldr	r2, [pc, #116]	; (80047c4 <MX_TIM5_Init+0x98>)
 800474e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8004750:	4b1b      	ldr	r3, [pc, #108]	; (80047c0 <MX_TIM5_Init+0x94>)
 8004752:	22c7      	movs	r2, #199	; 0xc7
 8004754:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004756:	4b1a      	ldr	r3, [pc, #104]	; (80047c0 <MX_TIM5_Init+0x94>)
 8004758:	2200      	movs	r2, #0
 800475a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 800475c:	4b18      	ldr	r3, [pc, #96]	; (80047c0 <MX_TIM5_Init+0x94>)
 800475e:	f642 62df 	movw	r2, #11999	; 0x2edf
 8004762:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004764:	4b16      	ldr	r3, [pc, #88]	; (80047c0 <MX_TIM5_Init+0x94>)
 8004766:	2200      	movs	r2, #0
 8004768:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800476a:	4b15      	ldr	r3, [pc, #84]	; (80047c0 <MX_TIM5_Init+0x94>)
 800476c:	2280      	movs	r2, #128	; 0x80
 800476e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004770:	4813      	ldr	r0, [pc, #76]	; (80047c0 <MX_TIM5_Init+0x94>)
 8004772:	f006 ff64 	bl	800b63e <HAL_TIM_Base_Init>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d001      	beq.n	8004780 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800477c:	f7ff f936 	bl	80039ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004784:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004786:	f107 0310 	add.w	r3, r7, #16
 800478a:	4619      	mov	r1, r3
 800478c:	480c      	ldr	r0, [pc, #48]	; (80047c0 <MX_TIM5_Init+0x94>)
 800478e:	f007 fbc9 	bl	800bf24 <HAL_TIM_ConfigClockSource>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004798:	f7ff f928 	bl	80039ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800479c:	2300      	movs	r3, #0
 800479e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80047a4:	1d3b      	adds	r3, r7, #4
 80047a6:	4619      	mov	r1, r3
 80047a8:	4805      	ldr	r0, [pc, #20]	; (80047c0 <MX_TIM5_Init+0x94>)
 80047aa:	f008 f90f 	bl	800c9cc <HAL_TIMEx_MasterConfigSynchronization>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80047b4:	f7ff f91a 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80047b8:	bf00      	nop
 80047ba:	3720      	adds	r7, #32
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	24000928 	.word	0x24000928
 80047c4:	40000c00 	.word	0x40000c00

080047c8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047ce:	1d3b      	adds	r3, r7, #4
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80047d8:	4b14      	ldr	r3, [pc, #80]	; (800482c <MX_TIM6_Init+0x64>)
 80047da:	4a15      	ldr	r2, [pc, #84]	; (8004830 <MX_TIM6_Init+0x68>)
 80047dc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 80047de:	4b13      	ldr	r3, [pc, #76]	; (800482c <MX_TIM6_Init+0x64>)
 80047e0:	22c7      	movs	r2, #199	; 0xc7
 80047e2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047e4:	4b11      	ldr	r3, [pc, #68]	; (800482c <MX_TIM6_Init+0x64>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 80047ea:	4b10      	ldr	r3, [pc, #64]	; (800482c <MX_TIM6_Init+0x64>)
 80047ec:	f241 726f 	movw	r2, #5999	; 0x176f
 80047f0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047f2:	4b0e      	ldr	r3, [pc, #56]	; (800482c <MX_TIM6_Init+0x64>)
 80047f4:	2280      	movs	r2, #128	; 0x80
 80047f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80047f8:	480c      	ldr	r0, [pc, #48]	; (800482c <MX_TIM6_Init+0x64>)
 80047fa:	f006 ff20 	bl	800b63e <HAL_TIM_Base_Init>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8004804:	f7ff f8f2 	bl	80039ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004808:	2300      	movs	r3, #0
 800480a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004810:	1d3b      	adds	r3, r7, #4
 8004812:	4619      	mov	r1, r3
 8004814:	4805      	ldr	r0, [pc, #20]	; (800482c <MX_TIM6_Init+0x64>)
 8004816:	f008 f8d9 	bl	800c9cc <HAL_TIMEx_MasterConfigSynchronization>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8004820:	f7ff f8e4 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004824:	bf00      	nop
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	24000a0c 	.word	0x24000a0c
 8004830:	40001000 	.word	0x40001000

08004834 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800483a:	1d3b      	adds	r3, r7, #4
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004844:	4b14      	ldr	r3, [pc, #80]	; (8004898 <MX_TIM7_Init+0x64>)
 8004846:	4a15      	ldr	r2, [pc, #84]	; (800489c <MX_TIM7_Init+0x68>)
 8004848:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 800484a:	4b13      	ldr	r3, [pc, #76]	; (8004898 <MX_TIM7_Init+0x64>)
 800484c:	22c7      	movs	r2, #199	; 0xc7
 800484e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004850:	4b11      	ldr	r3, [pc, #68]	; (8004898 <MX_TIM7_Init+0x64>)
 8004852:	2200      	movs	r2, #0
 8004854:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <MX_TIM7_Init+0x64>)
 8004858:	f240 42af 	movw	r2, #1199	; 0x4af
 800485c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800485e:	4b0e      	ldr	r3, [pc, #56]	; (8004898 <MX_TIM7_Init+0x64>)
 8004860:	2280      	movs	r2, #128	; 0x80
 8004862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004864:	480c      	ldr	r0, [pc, #48]	; (8004898 <MX_TIM7_Init+0x64>)
 8004866:	f006 feea 	bl	800b63e <HAL_TIM_Base_Init>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004870:	f7ff f8bc 	bl	80039ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004874:	2300      	movs	r3, #0
 8004876:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800487c:	1d3b      	adds	r3, r7, #4
 800487e:	4619      	mov	r1, r3
 8004880:	4805      	ldr	r0, [pc, #20]	; (8004898 <MX_TIM7_Init+0x64>)
 8004882:	f008 f8a3 	bl	800c9cc <HAL_TIMEx_MasterConfigSynchronization>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d001      	beq.n	8004890 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800488c:	f7ff f8ae 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004890:	bf00      	nop
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	24000b88 	.word	0x24000b88
 800489c:	40001400 	.word	0x40001400

080048a0 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048a6:	463b      	mov	r3, r7
 80048a8:	2200      	movs	r2, #0
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	605a      	str	r2, [r3, #4]
 80048ae:	609a      	str	r2, [r3, #8]
 80048b0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80048b2:	4b16      	ldr	r3, [pc, #88]	; (800490c <MX_TIM12_Init+0x6c>)
 80048b4:	4a16      	ldr	r2, [pc, #88]	; (8004910 <MX_TIM12_Init+0x70>)
 80048b6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 80048b8:	4b14      	ldr	r3, [pc, #80]	; (800490c <MX_TIM12_Init+0x6c>)
 80048ba:	22c7      	movs	r2, #199	; 0xc7
 80048bc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048be:	4b13      	ldr	r3, [pc, #76]	; (800490c <MX_TIM12_Init+0x6c>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 80048c4:	4b11      	ldr	r3, [pc, #68]	; (800490c <MX_TIM12_Init+0x6c>)
 80048c6:	f240 2257 	movw	r2, #599	; 0x257
 80048ca:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048cc:	4b0f      	ldr	r3, [pc, #60]	; (800490c <MX_TIM12_Init+0x6c>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048d2:	4b0e      	ldr	r3, [pc, #56]	; (800490c <MX_TIM12_Init+0x6c>)
 80048d4:	2280      	movs	r2, #128	; 0x80
 80048d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80048d8:	480c      	ldr	r0, [pc, #48]	; (800490c <MX_TIM12_Init+0x6c>)
 80048da:	f006 feb0 	bl	800b63e <HAL_TIM_Base_Init>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80048e4:	f7ff f882 	bl	80039ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048ec:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80048ee:	463b      	mov	r3, r7
 80048f0:	4619      	mov	r1, r3
 80048f2:	4806      	ldr	r0, [pc, #24]	; (800490c <MX_TIM12_Init+0x6c>)
 80048f4:	f007 fb16 	bl	800bf24 <HAL_TIM_ConfigClockSource>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80048fe:	f7ff f875 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8004902:	bf00      	nop
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	24000b3c 	.word	0x24000b3c
 8004910:	40001800 	.word	0x40001800

08004914 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004918:	4b0e      	ldr	r3, [pc, #56]	; (8004954 <MX_TIM13_Init+0x40>)
 800491a:	4a0f      	ldr	r2, [pc, #60]	; (8004958 <MX_TIM13_Init+0x44>)
 800491c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 800491e:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <MX_TIM13_Init+0x40>)
 8004920:	22c7      	movs	r2, #199	; 0xc7
 8004922:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004924:	4b0b      	ldr	r3, [pc, #44]	; (8004954 <MX_TIM13_Init+0x40>)
 8004926:	2200      	movs	r2, #0
 8004928:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 800492a:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <MX_TIM13_Init+0x40>)
 800492c:	f240 2257 	movw	r2, #599	; 0x257
 8004930:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004932:	4b08      	ldr	r3, [pc, #32]	; (8004954 <MX_TIM13_Init+0x40>)
 8004934:	2200      	movs	r2, #0
 8004936:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004938:	4b06      	ldr	r3, [pc, #24]	; (8004954 <MX_TIM13_Init+0x40>)
 800493a:	2280      	movs	r2, #128	; 0x80
 800493c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800493e:	4805      	ldr	r0, [pc, #20]	; (8004954 <MX_TIM13_Init+0x40>)
 8004940:	f006 fe7d 	bl	800b63e <HAL_TIM_Base_Init>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800494a:	f7ff f84f 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800494e:	bf00      	nop
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	240009c0 	.word	0x240009c0
 8004958:	40001c00 	.word	0x40001c00

0800495c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8004960:	4b0e      	ldr	r3, [pc, #56]	; (800499c <MX_TIM14_Init+0x40>)
 8004962:	4a0f      	ldr	r2, [pc, #60]	; (80049a0 <MX_TIM14_Init+0x44>)
 8004964:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8004966:	4b0d      	ldr	r3, [pc, #52]	; (800499c <MX_TIM14_Init+0x40>)
 8004968:	22c7      	movs	r2, #199	; 0xc7
 800496a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800496c:	4b0b      	ldr	r3, [pc, #44]	; (800499c <MX_TIM14_Init+0x40>)
 800496e:	2200      	movs	r2, #0
 8004970:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 8004972:	4b0a      	ldr	r3, [pc, #40]	; (800499c <MX_TIM14_Init+0x40>)
 8004974:	f640 125f 	movw	r2, #2399	; 0x95f
 8004978:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800497a:	4b08      	ldr	r3, [pc, #32]	; (800499c <MX_TIM14_Init+0x40>)
 800497c:	2200      	movs	r2, #0
 800497e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004980:	4b06      	ldr	r3, [pc, #24]	; (800499c <MX_TIM14_Init+0x40>)
 8004982:	2280      	movs	r2, #128	; 0x80
 8004984:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004986:	4805      	ldr	r0, [pc, #20]	; (800499c <MX_TIM14_Init+0x40>)
 8004988:	f006 fe59 	bl	800b63e <HAL_TIM_Base_Init>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8004992:	f7ff f82b 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004996:	bf00      	nop
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	24000af0 	.word	0x24000af0
 80049a0:	40002000 	.word	0x40002000

080049a4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b09a      	sub	sp, #104	; 0x68
 80049a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80049aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80049ae:	2200      	movs	r2, #0
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	605a      	str	r2, [r3, #4]
 80049b4:	609a      	str	r2, [r3, #8]
 80049b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049b8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	605a      	str	r2, [r3, #4]
 80049c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	609a      	str	r2, [r3, #8]
 80049d0:	60da      	str	r2, [r3, #12]
 80049d2:	611a      	str	r2, [r3, #16]
 80049d4:	615a      	str	r2, [r3, #20]
 80049d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80049d8:	1d3b      	adds	r3, r7, #4
 80049da:	222c      	movs	r2, #44	; 0x2c
 80049dc:	2100      	movs	r1, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	f00b f9c2 	bl	800fd68 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80049e4:	4b3f      	ldr	r3, [pc, #252]	; (8004ae4 <MX_TIM15_Init+0x140>)
 80049e6:	4a40      	ldr	r2, [pc, #256]	; (8004ae8 <MX_TIM15_Init+0x144>)
 80049e8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 80049ea:	4b3e      	ldr	r3, [pc, #248]	; (8004ae4 <MX_TIM15_Init+0x140>)
 80049ec:	22ef      	movs	r2, #239	; 0xef
 80049ee:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049f0:	4b3c      	ldr	r3, [pc, #240]	; (8004ae4 <MX_TIM15_Init+0x140>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 80049f6:	4b3b      	ldr	r3, [pc, #236]	; (8004ae4 <MX_TIM15_Init+0x140>)
 80049f8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80049fc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049fe:	4b39      	ldr	r3, [pc, #228]	; (8004ae4 <MX_TIM15_Init+0x140>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8004a04:	4b37      	ldr	r3, [pc, #220]	; (8004ae4 <MX_TIM15_Init+0x140>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a0a:	4b36      	ldr	r3, [pc, #216]	; (8004ae4 <MX_TIM15_Init+0x140>)
 8004a0c:	2280      	movs	r2, #128	; 0x80
 8004a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004a10:	4834      	ldr	r0, [pc, #208]	; (8004ae4 <MX_TIM15_Init+0x140>)
 8004a12:	f006 fe14 	bl	800b63e <HAL_TIM_Base_Init>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8004a1c:	f7fe ffe6 	bl	80039ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a24:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004a26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	482d      	ldr	r0, [pc, #180]	; (8004ae4 <MX_TIM15_Init+0x140>)
 8004a2e:	f007 fa79 	bl	800bf24 <HAL_TIM_ConfigClockSource>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8004a38:	f7fe ffd8 	bl	80039ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004a3c:	4829      	ldr	r0, [pc, #164]	; (8004ae4 <MX_TIM15_Init+0x140>)
 8004a3e:	f006 fecd 	bl	800b7dc <HAL_TIM_PWM_Init>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8004a48:	f7fe ffd0 	bl	80039ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a50:	2300      	movs	r3, #0
 8004a52:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8004a54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4822      	ldr	r0, [pc, #136]	; (8004ae4 <MX_TIM15_Init+0x140>)
 8004a5c:	f007 ffb6 	bl	800c9cc <HAL_TIMEx_MasterConfigSynchronization>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8004a66:	f7fe ffc1 	bl	80039ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a6a:	2360      	movs	r3, #96	; 0x60
 8004a6c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8004a6e:	f240 1339 	movw	r3, #313	; 0x139
 8004a72:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a74:	2300      	movs	r3, #0
 8004a76:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a80:	2300      	movs	r3, #0
 8004a82:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a84:	2300      	movs	r3, #0
 8004a86:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4814      	ldr	r0, [pc, #80]	; (8004ae4 <MX_TIM15_Init+0x140>)
 8004a92:	f007 f933 	bl	800bcfc <HAL_TIM_PWM_ConfigChannel>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d001      	beq.n	8004aa0 <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8004a9c:	f7fe ffa6 	bl	80039ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004aac:	2300      	movs	r3, #0
 8004aae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ab8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004ac2:	1d3b      	adds	r3, r7, #4
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4807      	ldr	r0, [pc, #28]	; (8004ae4 <MX_TIM15_Init+0x140>)
 8004ac8:	f008 f80e 	bl	800cae8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8004ad2:	f7fe ff8b 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004ad6:	4803      	ldr	r0, [pc, #12]	; (8004ae4 <MX_TIM15_Init+0x140>)
 8004ad8:	f000 f93c 	bl	8004d54 <HAL_TIM_MspPostInit>

}
 8004adc:	bf00      	nop
 8004ade:	3768      	adds	r7, #104	; 0x68
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	240008dc 	.word	0x240008dc
 8004ae8:	40014000 	.word	0x40014000

08004aec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08e      	sub	sp, #56	; 0x38
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a8b      	ldr	r2, [pc, #556]	; (8004d28 <HAL_TIM_Base_MspInit+0x23c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d10f      	bne.n	8004b1e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004afe:	4b8b      	ldr	r3, [pc, #556]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004b00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b04:	4a89      	ldr	r2, [pc, #548]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004b06:	f043 0301 	orr.w	r3, r3, #1
 8004b0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004b0e:	4b87      	ldr	r3, [pc, #540]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004b10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004b14:	f003 0301 	and.w	r3, r3, #1
 8004b18:	637b      	str	r3, [r7, #52]	; 0x34
 8004b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8004b1c:	e100      	b.n	8004d20 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM2)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b26:	d10f      	bne.n	8004b48 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b28:	4b80      	ldr	r3, [pc, #512]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004b2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b2e:	4a7f      	ldr	r2, [pc, #508]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b38:	4b7c      	ldr	r3, [pc, #496]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004b3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	633b      	str	r3, [r7, #48]	; 0x30
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004b46:	e0eb      	b.n	8004d20 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM3)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a78      	ldr	r2, [pc, #480]	; (8004d30 <HAL_TIM_Base_MspInit+0x244>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d10f      	bne.n	8004b72 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b52:	4b76      	ldr	r3, [pc, #472]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004b54:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b58:	4a74      	ldr	r2, [pc, #464]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004b5a:	f043 0302 	orr.w	r3, r3, #2
 8004b5e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b62:	4b72      	ldr	r3, [pc, #456]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004b64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004b70:	e0d6      	b.n	8004d20 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM4)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a6f      	ldr	r2, [pc, #444]	; (8004d34 <HAL_TIM_Base_MspInit+0x248>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d10f      	bne.n	8004b9c <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b7c:	4b6b      	ldr	r3, [pc, #428]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004b7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b82:	4a6a      	ldr	r2, [pc, #424]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004b84:	f043 0304 	orr.w	r3, r3, #4
 8004b88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004b8c:	4b67      	ldr	r3, [pc, #412]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004b8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8004b9a:	e0c1      	b.n	8004d20 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM5)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a65      	ldr	r2, [pc, #404]	; (8004d38 <HAL_TIM_Base_MspInit+0x24c>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d117      	bne.n	8004bd6 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004ba6:	4b61      	ldr	r3, [pc, #388]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bac:	4a5f      	ldr	r2, [pc, #380]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004bae:	f043 0308 	orr.w	r3, r3, #8
 8004bb2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004bb6:	4b5d      	ldr	r3, [pc, #372]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004bb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	2032      	movs	r0, #50	; 0x32
 8004bca:	f000 fe66 	bl	800589a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004bce:	2032      	movs	r0, #50	; 0x32
 8004bd0:	f000 fe7d 	bl	80058ce <HAL_NVIC_EnableIRQ>
}
 8004bd4:	e0a4      	b.n	8004d20 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM6)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a58      	ldr	r2, [pc, #352]	; (8004d3c <HAL_TIM_Base_MspInit+0x250>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d117      	bne.n	8004c10 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004be0:	4b52      	ldr	r3, [pc, #328]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004be2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004be6:	4a51      	ldr	r2, [pc, #324]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004be8:	f043 0310 	orr.w	r3, r3, #16
 8004bec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004bf0:	4b4e      	ldr	r3, [pc, #312]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004bf2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bf6:	f003 0310 	and.w	r3, r3, #16
 8004bfa:	623b      	str	r3, [r7, #32]
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004bfe:	2200      	movs	r2, #0
 8004c00:	2100      	movs	r1, #0
 8004c02:	2036      	movs	r0, #54	; 0x36
 8004c04:	f000 fe49 	bl	800589a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004c08:	2036      	movs	r0, #54	; 0x36
 8004c0a:	f000 fe60 	bl	80058ce <HAL_NVIC_EnableIRQ>
}
 8004c0e:	e087      	b.n	8004d20 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM7)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a4a      	ldr	r2, [pc, #296]	; (8004d40 <HAL_TIM_Base_MspInit+0x254>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d117      	bne.n	8004c4a <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004c1a:	4b44      	ldr	r3, [pc, #272]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004c1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c20:	4a42      	ldr	r2, [pc, #264]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004c22:	f043 0320 	orr.w	r3, r3, #32
 8004c26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c2a:	4b40      	ldr	r3, [pc, #256]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004c2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004c38:	2200      	movs	r2, #0
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	2037      	movs	r0, #55	; 0x37
 8004c3e:	f000 fe2c 	bl	800589a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004c42:	2037      	movs	r0, #55	; 0x37
 8004c44:	f000 fe43 	bl	80058ce <HAL_NVIC_EnableIRQ>
}
 8004c48:	e06a      	b.n	8004d20 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM12)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a3d      	ldr	r2, [pc, #244]	; (8004d44 <HAL_TIM_Base_MspInit+0x258>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d117      	bne.n	8004c84 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8004c54:	4b35      	ldr	r3, [pc, #212]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004c56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c5a:	4a34      	ldr	r2, [pc, #208]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c60:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c64:	4b31      	ldr	r3, [pc, #196]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004c66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8004c72:	2200      	movs	r2, #0
 8004c74:	2100      	movs	r1, #0
 8004c76:	202b      	movs	r0, #43	; 0x2b
 8004c78:	f000 fe0f 	bl	800589a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8004c7c:	202b      	movs	r0, #43	; 0x2b
 8004c7e:	f000 fe26 	bl	80058ce <HAL_NVIC_EnableIRQ>
}
 8004c82:	e04d      	b.n	8004d20 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM13)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a2f      	ldr	r2, [pc, #188]	; (8004d48 <HAL_TIM_Base_MspInit+0x25c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d117      	bne.n	8004cbe <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004c8e:	4b27      	ldr	r3, [pc, #156]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004c90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004c94:	4a25      	ldr	r2, [pc, #148]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c9a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004c9e:	4b23      	ldr	r3, [pc, #140]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004cac:	2200      	movs	r2, #0
 8004cae:	2100      	movs	r1, #0
 8004cb0:	202c      	movs	r0, #44	; 0x2c
 8004cb2:	f000 fdf2 	bl	800589a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004cb6:	202c      	movs	r0, #44	; 0x2c
 8004cb8:	f000 fe09 	bl	80058ce <HAL_NVIC_EnableIRQ>
}
 8004cbc:	e030      	b.n	8004d20 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM14)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a22      	ldr	r2, [pc, #136]	; (8004d4c <HAL_TIM_Base_MspInit+0x260>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d117      	bne.n	8004cf8 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004cc8:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004cca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cce:	4a17      	ldr	r2, [pc, #92]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004cd8:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004cda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce2:	613b      	str	r3, [r7, #16]
 8004ce4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	2100      	movs	r1, #0
 8004cea:	202d      	movs	r0, #45	; 0x2d
 8004cec:	f000 fdd5 	bl	800589a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004cf0:	202d      	movs	r0, #45	; 0x2d
 8004cf2:	f000 fdec 	bl	80058ce <HAL_NVIC_EnableIRQ>
}
 8004cf6:	e013      	b.n	8004d20 <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM15)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a14      	ldr	r2, [pc, #80]	; (8004d50 <HAL_TIM_Base_MspInit+0x264>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d10e      	bne.n	8004d20 <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004d02:	4b0a      	ldr	r3, [pc, #40]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d08:	4a08      	ldr	r2, [pc, #32]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d0e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004d12:	4b06      	ldr	r3, [pc, #24]	; (8004d2c <HAL_TIM_Base_MspInit+0x240>)
 8004d14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
}
 8004d20:	bf00      	nop
 8004d22:	3738      	adds	r7, #56	; 0x38
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40010000 	.word	0x40010000
 8004d2c:	58024400 	.word	0x58024400
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800
 8004d38:	40000c00 	.word	0x40000c00
 8004d3c:	40001000 	.word	0x40001000
 8004d40:	40001400 	.word	0x40001400
 8004d44:	40001800 	.word	0x40001800
 8004d48:	40001c00 	.word	0x40001c00
 8004d4c:	40002000 	.word	0x40002000
 8004d50:	40014000 	.word	0x40014000

08004d54 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b08c      	sub	sp, #48	; 0x30
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d5c:	f107 031c 	add.w	r3, r7, #28
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	605a      	str	r2, [r3, #4]
 8004d66:	609a      	str	r2, [r3, #8]
 8004d68:	60da      	str	r2, [r3, #12]
 8004d6a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a5e      	ldr	r2, [pc, #376]	; (8004eec <HAL_TIM_MspPostInit+0x198>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d120      	bne.n	8004db8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004d76:	4b5e      	ldr	r3, [pc, #376]	; (8004ef0 <HAL_TIM_MspPostInit+0x19c>)
 8004d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d7c:	4a5c      	ldr	r2, [pc, #368]	; (8004ef0 <HAL_TIM_MspPostInit+0x19c>)
 8004d7e:	f043 0310 	orr.w	r3, r3, #16
 8004d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004d86:	4b5a      	ldr	r3, [pc, #360]	; (8004ef0 <HAL_TIM_MspPostInit+0x19c>)
 8004d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8004d94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004da2:	2300      	movs	r3, #0
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004da6:	2301      	movs	r3, #1
 8004da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8004daa:	f107 031c 	add.w	r3, r7, #28
 8004dae:	4619      	mov	r1, r3
 8004db0:	4850      	ldr	r0, [pc, #320]	; (8004ef4 <HAL_TIM_MspPostInit+0x1a0>)
 8004db2:	f003 fdeb 	bl	800898c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004db6:	e094      	b.n	8004ee2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc0:	d120      	bne.n	8004e04 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dc2:	4b4b      	ldr	r3, [pc, #300]	; (8004ef0 <HAL_TIM_MspPostInit+0x19c>)
 8004dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dc8:	4a49      	ldr	r2, [pc, #292]	; (8004ef0 <HAL_TIM_MspPostInit+0x19c>)
 8004dca:	f043 0302 	orr.w	r3, r3, #2
 8004dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004dd2:	4b47      	ldr	r3, [pc, #284]	; (8004ef0 <HAL_TIM_MspPostInit+0x19c>)
 8004dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8004de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004de4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de6:	2302      	movs	r3, #2
 8004de8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dee:	2300      	movs	r3, #0
 8004df0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004df2:	2301      	movs	r3, #1
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8004df6:	f107 031c 	add.w	r3, r7, #28
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	483e      	ldr	r0, [pc, #248]	; (8004ef8 <HAL_TIM_MspPostInit+0x1a4>)
 8004dfe:	f003 fdc5 	bl	800898c <HAL_GPIO_Init>
}
 8004e02:	e06e      	b.n	8004ee2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a3c      	ldr	r2, [pc, #240]	; (8004efc <HAL_TIM_MspPostInit+0x1a8>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d11f      	bne.n	8004e4e <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e0e:	4b38      	ldr	r3, [pc, #224]	; (8004ef0 <HAL_TIM_MspPostInit+0x19c>)
 8004e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e14:	4a36      	ldr	r2, [pc, #216]	; (8004ef0 <HAL_TIM_MspPostInit+0x19c>)
 8004e16:	f043 0301 	orr.w	r3, r3, #1
 8004e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e1e:	4b34      	ldr	r3, [pc, #208]	; (8004ef0 <HAL_TIM_MspPostInit+0x19c>)
 8004e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e24:	f003 0301 	and.w	r3, r3, #1
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8004e2c:	2340      	movs	r3, #64	; 0x40
 8004e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e30:	2302      	movs	r3, #2
 8004e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8004e40:	f107 031c 	add.w	r3, r7, #28
 8004e44:	4619      	mov	r1, r3
 8004e46:	482e      	ldr	r0, [pc, #184]	; (8004f00 <HAL_TIM_MspPostInit+0x1ac>)
 8004e48:	f003 fda0 	bl	800898c <HAL_GPIO_Init>
}
 8004e4c:	e049      	b.n	8004ee2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a2c      	ldr	r2, [pc, #176]	; (8004f04 <HAL_TIM_MspPostInit+0x1b0>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d120      	bne.n	8004e9a <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e58:	4b25      	ldr	r3, [pc, #148]	; (8004ef0 <HAL_TIM_MspPostInit+0x19c>)
 8004e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e5e:	4a24      	ldr	r2, [pc, #144]	; (8004ef0 <HAL_TIM_MspPostInit+0x19c>)
 8004e60:	f043 0302 	orr.w	r3, r3, #2
 8004e64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e68:	4b21      	ldr	r3, [pc, #132]	; (8004ef0 <HAL_TIM_MspPostInit+0x19c>)
 8004e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	60fb      	str	r3, [r7, #12]
 8004e74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8004e76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e80:	2300      	movs	r3, #0
 8004e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e84:	2300      	movs	r3, #0
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004e88:	2302      	movs	r3, #2
 8004e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8004e8c:	f107 031c 	add.w	r3, r7, #28
 8004e90:	4619      	mov	r1, r3
 8004e92:	4819      	ldr	r0, [pc, #100]	; (8004ef8 <HAL_TIM_MspPostInit+0x1a4>)
 8004e94:	f003 fd7a 	bl	800898c <HAL_GPIO_Init>
}
 8004e98:	e023      	b.n	8004ee2 <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1a      	ldr	r2, [pc, #104]	; (8004f08 <HAL_TIM_MspPostInit+0x1b4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d11e      	bne.n	8004ee2 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ea4:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <HAL_TIM_MspPostInit+0x19c>)
 8004ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eaa:	4a11      	ldr	r2, [pc, #68]	; (8004ef0 <HAL_TIM_MspPostInit+0x19c>)
 8004eac:	f043 0310 	orr.w	r3, r3, #16
 8004eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <HAL_TIM_MspPostInit+0x19c>)
 8004eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eba:	f003 0310 	and.w	r3, r3, #16
 8004ebe:	60bb      	str	r3, [r7, #8]
 8004ec0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8004ec2:	2340      	movs	r3, #64	; 0x40
 8004ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec6:	2302      	movs	r3, #2
 8004ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8004ed2:	2304      	movs	r3, #4
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8004ed6:	f107 031c 	add.w	r3, r7, #28
 8004eda:	4619      	mov	r1, r3
 8004edc:	4805      	ldr	r0, [pc, #20]	; (8004ef4 <HAL_TIM_MspPostInit+0x1a0>)
 8004ede:	f003 fd55 	bl	800898c <HAL_GPIO_Init>
}
 8004ee2:	bf00      	nop
 8004ee4:	3730      	adds	r7, #48	; 0x30
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	58021000 	.word	0x58021000
 8004ef8:	58020400 	.word	0x58020400
 8004efc:	40000400 	.word	0x40000400
 8004f00:	58020000 	.word	0x58020000
 8004f04:	40000800 	.word	0x40000800
 8004f08:	40014000 	.word	0x40014000

08004f0c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004f10:	4b25      	ldr	r3, [pc, #148]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f12:	4a26      	ldr	r2, [pc, #152]	; (8004fac <MX_UART4_Init+0xa0>)
 8004f14:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8004f16:	4b24      	ldr	r3, [pc, #144]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f18:	4a25      	ldr	r2, [pc, #148]	; (8004fb0 <MX_UART4_Init+0xa4>)
 8004f1a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004f1c:	4b22      	ldr	r3, [pc, #136]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004f22:	4b21      	ldr	r3, [pc, #132]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f24:	2200      	movs	r2, #0
 8004f26:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004f28:	4b1f      	ldr	r3, [pc, #124]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004f2e:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f30:	220c      	movs	r2, #12
 8004f32:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004f34:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f40:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004f46:	4b18      	ldr	r3, [pc, #96]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8004f4c:	4b16      	ldr	r3, [pc, #88]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f4e:	2208      	movs	r2, #8
 8004f50:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8004f52:	4b15      	ldr	r3, [pc, #84]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004f58:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004f5a:	4813      	ldr	r0, [pc, #76]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f5c:	f007 fe60 	bl	800cc20 <HAL_UART_Init>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d001      	beq.n	8004f6a <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8004f66:	f7fe fd41 	bl	80039ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004f6a:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8004f6e:	480e      	ldr	r0, [pc, #56]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f70:	f009 fee7 	bl	800ed42 <HAL_UARTEx_SetTxFifoThreshold>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8004f7a:	f7fe fd37 	bl	80039ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004f7e:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8004f82:	4809      	ldr	r0, [pc, #36]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f84:	f009 ff1b 	bl	800edbe <HAL_UARTEx_SetRxFifoThreshold>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8004f8e:	f7fe fd2d 	bl	80039ec <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8004f92:	4805      	ldr	r0, [pc, #20]	; (8004fa8 <MX_UART4_Init+0x9c>)
 8004f94:	f009 fe61 	bl	800ec5a <HAL_UARTEx_EnableFifoMode>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8004f9e:	f7fe fd25 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004fa2:	bf00      	nop
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	24000ed4 	.word	0x24000ed4
 8004fac:	40004c00 	.word	0x40004c00
 8004fb0:	001e8480 	.word	0x001e8480

08004fb4 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004fb8:	4b23      	ldr	r3, [pc, #140]	; (8005048 <MX_UART7_Init+0x94>)
 8004fba:	4a24      	ldr	r2, [pc, #144]	; (800504c <MX_UART7_Init+0x98>)
 8004fbc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004fbe:	4b22      	ldr	r3, [pc, #136]	; (8005048 <MX_UART7_Init+0x94>)
 8004fc0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004fc4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004fc6:	4b20      	ldr	r3, [pc, #128]	; (8005048 <MX_UART7_Init+0x94>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004fcc:	4b1e      	ldr	r3, [pc, #120]	; (8005048 <MX_UART7_Init+0x94>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004fd2:	4b1d      	ldr	r3, [pc, #116]	; (8005048 <MX_UART7_Init+0x94>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004fd8:	4b1b      	ldr	r3, [pc, #108]	; (8005048 <MX_UART7_Init+0x94>)
 8004fda:	220c      	movs	r2, #12
 8004fdc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004fde:	4b1a      	ldr	r3, [pc, #104]	; (8005048 <MX_UART7_Init+0x94>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004fe4:	4b18      	ldr	r3, [pc, #96]	; (8005048 <MX_UART7_Init+0x94>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004fea:	4b17      	ldr	r3, [pc, #92]	; (8005048 <MX_UART7_Init+0x94>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ff0:	4b15      	ldr	r3, [pc, #84]	; (8005048 <MX_UART7_Init+0x94>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ff6:	4b14      	ldr	r3, [pc, #80]	; (8005048 <MX_UART7_Init+0x94>)
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004ffc:	4812      	ldr	r0, [pc, #72]	; (8005048 <MX_UART7_Init+0x94>)
 8004ffe:	f007 fe0f 	bl	800cc20 <HAL_UART_Init>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8005008:	f7fe fcf0 	bl	80039ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800500c:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8005010:	480d      	ldr	r0, [pc, #52]	; (8005048 <MX_UART7_Init+0x94>)
 8005012:	f009 fe96 	bl	800ed42 <HAL_UARTEx_SetTxFifoThreshold>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 800501c:	f7fe fce6 	bl	80039ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8005020:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8005024:	4808      	ldr	r0, [pc, #32]	; (8005048 <MX_UART7_Init+0x94>)
 8005026:	f009 feca 	bl	800edbe <HAL_UARTEx_SetRxFifoThreshold>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 8005030:	f7fe fcdc 	bl	80039ec <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8005034:	4804      	ldr	r0, [pc, #16]	; (8005048 <MX_UART7_Init+0x94>)
 8005036:	f009 fe10 	bl	800ec5a <HAL_UARTEx_EnableFifoMode>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 8005040:	f7fe fcd4 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8005044:	bf00      	nop
 8005046:	bd80      	pop	{r7, pc}
 8005048:	24000c4c 	.word	0x24000c4c
 800504c:	40007800 	.word	0x40007800

08005050 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005054:	4b22      	ldr	r3, [pc, #136]	; (80050e0 <MX_USART3_UART_Init+0x90>)
 8005056:	4a23      	ldr	r2, [pc, #140]	; (80050e4 <MX_USART3_UART_Init+0x94>)
 8005058:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800505a:	4b21      	ldr	r3, [pc, #132]	; (80050e0 <MX_USART3_UART_Init+0x90>)
 800505c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005060:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005062:	4b1f      	ldr	r3, [pc, #124]	; (80050e0 <MX_USART3_UART_Init+0x90>)
 8005064:	2200      	movs	r2, #0
 8005066:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005068:	4b1d      	ldr	r3, [pc, #116]	; (80050e0 <MX_USART3_UART_Init+0x90>)
 800506a:	2200      	movs	r2, #0
 800506c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800506e:	4b1c      	ldr	r3, [pc, #112]	; (80050e0 <MX_USART3_UART_Init+0x90>)
 8005070:	2200      	movs	r2, #0
 8005072:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005074:	4b1a      	ldr	r3, [pc, #104]	; (80050e0 <MX_USART3_UART_Init+0x90>)
 8005076:	220c      	movs	r2, #12
 8005078:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800507a:	4b19      	ldr	r3, [pc, #100]	; (80050e0 <MX_USART3_UART_Init+0x90>)
 800507c:	2200      	movs	r2, #0
 800507e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005080:	4b17      	ldr	r3, [pc, #92]	; (80050e0 <MX_USART3_UART_Init+0x90>)
 8005082:	2200      	movs	r2, #0
 8005084:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005086:	4b16      	ldr	r3, [pc, #88]	; (80050e0 <MX_USART3_UART_Init+0x90>)
 8005088:	2200      	movs	r2, #0
 800508a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800508c:	4b14      	ldr	r3, [pc, #80]	; (80050e0 <MX_USART3_UART_Init+0x90>)
 800508e:	2200      	movs	r2, #0
 8005090:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005092:	4b13      	ldr	r3, [pc, #76]	; (80050e0 <MX_USART3_UART_Init+0x90>)
 8005094:	2200      	movs	r2, #0
 8005096:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005098:	4811      	ldr	r0, [pc, #68]	; (80050e0 <MX_USART3_UART_Init+0x90>)
 800509a:	f007 fdc1 	bl	800cc20 <HAL_UART_Init>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80050a4:	f7fe fca2 	bl	80039ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050a8:	2100      	movs	r1, #0
 80050aa:	480d      	ldr	r0, [pc, #52]	; (80050e0 <MX_USART3_UART_Init+0x90>)
 80050ac:	f009 fe49 	bl	800ed42 <HAL_UARTEx_SetTxFifoThreshold>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80050b6:	f7fe fc99 	bl	80039ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80050ba:	2100      	movs	r1, #0
 80050bc:	4808      	ldr	r0, [pc, #32]	; (80050e0 <MX_USART3_UART_Init+0x90>)
 80050be:	f009 fe7e 	bl	800edbe <HAL_UARTEx_SetRxFifoThreshold>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80050c8:	f7fe fc90 	bl	80039ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80050cc:	4804      	ldr	r0, [pc, #16]	; (80050e0 <MX_USART3_UART_Init+0x90>)
 80050ce:	f009 fdff 	bl	800ecd0 <HAL_UARTEx_DisableFifoMode>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80050d8:	f7fe fc88 	bl	80039ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80050dc:	bf00      	nop
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	24000d54 	.word	0x24000d54
 80050e4:	40004800 	.word	0x40004800

080050e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b0bc      	sub	sp, #240	; 0xf0
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050f0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	605a      	str	r2, [r3, #4]
 80050fa:	609a      	str	r2, [r3, #8]
 80050fc:	60da      	str	r2, [r3, #12]
 80050fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005100:	f107 0320 	add.w	r3, r7, #32
 8005104:	22bc      	movs	r2, #188	; 0xbc
 8005106:	2100      	movs	r1, #0
 8005108:	4618      	mov	r0, r3
 800510a:	f00a fe2d 	bl	800fd68 <memset>
  if(uartHandle->Instance==UART4)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4aa1      	ldr	r2, [pc, #644]	; (8005398 <HAL_UART_MspInit+0x2b0>)
 8005114:	4293      	cmp	r3, r2
 8005116:	f040 80b7 	bne.w	8005288 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800511a:	2302      	movs	r3, #2
 800511c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800511e:	2300      	movs	r3, #0
 8005120:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005124:	f107 0320 	add.w	r3, r7, #32
 8005128:	4618      	mov	r0, r3
 800512a:	f004 fe05 	bl	8009d38 <HAL_RCCEx_PeriphCLKConfig>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005134:	f7fe fc5a 	bl	80039ec <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8005138:	4b98      	ldr	r3, [pc, #608]	; (800539c <HAL_UART_MspInit+0x2b4>)
 800513a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800513e:	4a97      	ldr	r2, [pc, #604]	; (800539c <HAL_UART_MspInit+0x2b4>)
 8005140:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005144:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005148:	4b94      	ldr	r3, [pc, #592]	; (800539c <HAL_UART_MspInit+0x2b4>)
 800514a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800514e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005156:	4b91      	ldr	r3, [pc, #580]	; (800539c <HAL_UART_MspInit+0x2b4>)
 8005158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800515c:	4a8f      	ldr	r2, [pc, #572]	; (800539c <HAL_UART_MspInit+0x2b4>)
 800515e:	f043 0308 	orr.w	r3, r3, #8
 8005162:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005166:	4b8d      	ldr	r3, [pc, #564]	; (800539c <HAL_UART_MspInit+0x2b4>)
 8005168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005174:	2303      	movs	r3, #3
 8005176:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800517a:	2302      	movs	r3, #2
 800517c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005180:	2300      	movs	r3, #0
 8005182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005186:	2300      	movs	r3, #0
 8005188:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800518c:	2308      	movs	r3, #8
 800518e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005192:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005196:	4619      	mov	r1, r3
 8005198:	4881      	ldr	r0, [pc, #516]	; (80053a0 <HAL_UART_MspInit+0x2b8>)
 800519a:	f003 fbf7 	bl	800898c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 800519e:	4b81      	ldr	r3, [pc, #516]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 80051a0:	4a81      	ldr	r2, [pc, #516]	; (80053a8 <HAL_UART_MspInit+0x2c0>)
 80051a2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80051a4:	4b7f      	ldr	r3, [pc, #508]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 80051a6:	223f      	movs	r2, #63	; 0x3f
 80051a8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051aa:	4b7e      	ldr	r3, [pc, #504]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051b0:	4b7c      	ldr	r3, [pc, #496]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80051b6:	4b7b      	ldr	r3, [pc, #492]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 80051b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051bc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051be:	4b79      	ldr	r3, [pc, #484]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051c4:	4b77      	ldr	r3, [pc, #476]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80051ca:	4b76      	ldr	r3, [pc, #472]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 80051cc:	2200      	movs	r2, #0
 80051ce:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80051d0:	4b74      	ldr	r3, [pc, #464]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80051d6:	4b73      	ldr	r3, [pc, #460]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 80051d8:	2204      	movs	r2, #4
 80051da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80051dc:	4b71      	ldr	r3, [pc, #452]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 80051de:	2203      	movs	r2, #3
 80051e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80051e2:	4b70      	ldr	r3, [pc, #448]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80051e8:	4b6e      	ldr	r3, [pc, #440]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80051ee:	486d      	ldr	r0, [pc, #436]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 80051f0:	f000 fd92 	bl	8005d18 <HAL_DMA_Init>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80051fa:	f7fe fbf7 	bl	80039ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a68      	ldr	r2, [pc, #416]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 8005202:	67da      	str	r2, [r3, #124]	; 0x7c
 8005204:	4a67      	ldr	r2, [pc, #412]	; (80053a4 <HAL_UART_MspInit+0x2bc>)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 800520a:	4b68      	ldr	r3, [pc, #416]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 800520c:	4a68      	ldr	r2, [pc, #416]	; (80053b0 <HAL_UART_MspInit+0x2c8>)
 800520e:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8005210:	4b66      	ldr	r3, [pc, #408]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 8005212:	2240      	movs	r2, #64	; 0x40
 8005214:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005216:	4b65      	ldr	r3, [pc, #404]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 8005218:	2240      	movs	r2, #64	; 0x40
 800521a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800521c:	4b63      	ldr	r3, [pc, #396]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 800521e:	2200      	movs	r2, #0
 8005220:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005222:	4b62      	ldr	r3, [pc, #392]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 8005224:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005228:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800522a:	4b60      	ldr	r3, [pc, #384]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 800522c:	2200      	movs	r2, #0
 800522e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005230:	4b5e      	ldr	r3, [pc, #376]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 8005232:	2200      	movs	r2, #0
 8005234:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8005236:	4b5d      	ldr	r3, [pc, #372]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 8005238:	2200      	movs	r2, #0
 800523a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800523c:	4b5b      	ldr	r3, [pc, #364]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 800523e:	2200      	movs	r2, #0
 8005240:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005242:	4b5a      	ldr	r3, [pc, #360]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 8005244:	2204      	movs	r2, #4
 8005246:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005248:	4b58      	ldr	r3, [pc, #352]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 800524a:	2203      	movs	r2, #3
 800524c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800524e:	4b57      	ldr	r3, [pc, #348]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 8005250:	2200      	movs	r2, #0
 8005252:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005254:	4b55      	ldr	r3, [pc, #340]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 8005256:	2200      	movs	r2, #0
 8005258:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800525a:	4854      	ldr	r0, [pc, #336]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 800525c:	f000 fd5c 	bl	8005d18 <HAL_DMA_Init>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 8005266:	f7fe fbc1 	bl	80039ec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a4f      	ldr	r2, [pc, #316]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 800526e:	679a      	str	r2, [r3, #120]	; 0x78
 8005270:	4a4e      	ldr	r2, [pc, #312]	; (80053ac <HAL_UART_MspInit+0x2c4>)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8005276:	2200      	movs	r2, #0
 8005278:	2100      	movs	r1, #0
 800527a:	2034      	movs	r0, #52	; 0x34
 800527c:	f000 fb0d 	bl	800589a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8005280:	2034      	movs	r0, #52	; 0x34
 8005282:	f000 fb24 	bl	80058ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8005286:	e153      	b.n	8005530 <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART7)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a49      	ldr	r2, [pc, #292]	; (80053b4 <HAL_UART_MspInit+0x2cc>)
 800528e:	4293      	cmp	r3, r2
 8005290:	f040 8098 	bne.w	80053c4 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005294:	2302      	movs	r3, #2
 8005296:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005298:	2300      	movs	r3, #0
 800529a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800529e:	f107 0320 	add.w	r3, r7, #32
 80052a2:	4618      	mov	r0, r3
 80052a4:	f004 fd48 	bl	8009d38 <HAL_RCCEx_PeriphCLKConfig>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d001      	beq.n	80052b2 <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80052ae:	f7fe fb9d 	bl	80039ec <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80052b2:	4b3a      	ldr	r3, [pc, #232]	; (800539c <HAL_UART_MspInit+0x2b4>)
 80052b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052b8:	4a38      	ldr	r2, [pc, #224]	; (800539c <HAL_UART_MspInit+0x2b4>)
 80052ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80052c2:	4b36      	ldr	r3, [pc, #216]	; (800539c <HAL_UART_MspInit+0x2b4>)
 80052c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80052c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80052d0:	4b32      	ldr	r3, [pc, #200]	; (800539c <HAL_UART_MspInit+0x2b4>)
 80052d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052d6:	4a31      	ldr	r2, [pc, #196]	; (800539c <HAL_UART_MspInit+0x2b4>)
 80052d8:	f043 0310 	orr.w	r3, r3, #16
 80052dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80052e0:	4b2e      	ldr	r3, [pc, #184]	; (800539c <HAL_UART_MspInit+0x2b4>)
 80052e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80052e6:	f003 0310 	and.w	r3, r3, #16
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80052ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80052f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f6:	2302      	movs	r3, #2
 80052f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005302:	2300      	movs	r3, #0
 8005304:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8005308:	2307      	movs	r3, #7
 800530a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800530e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005312:	4619      	mov	r1, r3
 8005314:	4828      	ldr	r0, [pc, #160]	; (80053b8 <HAL_UART_MspInit+0x2d0>)
 8005316:	f003 fb39 	bl	800898c <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 800531a:	4b28      	ldr	r3, [pc, #160]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 800531c:	4a28      	ldr	r2, [pc, #160]	; (80053c0 <HAL_UART_MspInit+0x2d8>)
 800531e:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8005320:	4b26      	ldr	r3, [pc, #152]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 8005322:	2250      	movs	r2, #80	; 0x50
 8005324:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005326:	4b25      	ldr	r3, [pc, #148]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 8005328:	2240      	movs	r2, #64	; 0x40
 800532a:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800532c:	4b23      	ldr	r3, [pc, #140]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 800532e:	2200      	movs	r2, #0
 8005330:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005332:	4b22      	ldr	r3, [pc, #136]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 8005334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005338:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800533a:	4b20      	ldr	r3, [pc, #128]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 800533c:	2200      	movs	r2, #0
 800533e:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005340:	4b1e      	ldr	r3, [pc, #120]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 8005342:	2200      	movs	r2, #0
 8005344:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8005346:	4b1d      	ldr	r3, [pc, #116]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 8005348:	2200      	movs	r2, #0
 800534a:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 800534c:	4b1b      	ldr	r3, [pc, #108]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 800534e:	2200      	movs	r2, #0
 8005350:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005352:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 8005354:	2204      	movs	r2, #4
 8005356:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005358:	4b18      	ldr	r3, [pc, #96]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 800535a:	2203      	movs	r2, #3
 800535c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800535e:	4b17      	ldr	r3, [pc, #92]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 8005360:	2200      	movs	r2, #0
 8005362:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005364:	4b15      	ldr	r3, [pc, #84]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 8005366:	2200      	movs	r2, #0
 8005368:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 800536a:	4814      	ldr	r0, [pc, #80]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 800536c:	f000 fcd4 	bl	8005d18 <HAL_DMA_Init>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <HAL_UART_MspInit+0x292>
      Error_Handler();
 8005376:	f7fe fb39 	bl	80039ec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a0f      	ldr	r2, [pc, #60]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 800537e:	679a      	str	r2, [r3, #120]	; 0x78
 8005380:	4a0e      	ldr	r2, [pc, #56]	; (80053bc <HAL_UART_MspInit+0x2d4>)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8005386:	2200      	movs	r2, #0
 8005388:	2100      	movs	r1, #0
 800538a:	2052      	movs	r0, #82	; 0x52
 800538c:	f000 fa85 	bl	800589a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8005390:	2052      	movs	r0, #82	; 0x52
 8005392:	f000 fa9c 	bl	80058ce <HAL_NVIC_EnableIRQ>
}
 8005396:	e0cb      	b.n	8005530 <HAL_UART_MspInit+0x448>
 8005398:	40004c00 	.word	0x40004c00
 800539c:	58024400 	.word	0x58024400
 80053a0:	58020c00 	.word	0x58020c00
 80053a4:	24000bd4 	.word	0x24000bd4
 80053a8:	40020058 	.word	0x40020058
 80053ac:	24000f64 	.word	0x24000f64
 80053b0:	40020070 	.word	0x40020070
 80053b4:	40007800 	.word	0x40007800
 80053b8:	58021000 	.word	0x58021000
 80053bc:	24000e5c 	.word	0x24000e5c
 80053c0:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a5b      	ldr	r2, [pc, #364]	; (8005538 <HAL_UART_MspInit+0x450>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	f040 80b0 	bne.w	8005530 <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80053d0:	2302      	movs	r3, #2
 80053d2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80053d4:	2300      	movs	r3, #0
 80053d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80053da:	f107 0320 	add.w	r3, r7, #32
 80053de:	4618      	mov	r0, r3
 80053e0:	f004 fcaa 	bl	8009d38 <HAL_RCCEx_PeriphCLKConfig>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <HAL_UART_MspInit+0x306>
      Error_Handler();
 80053ea:	f7fe faff 	bl	80039ec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80053ee:	4b53      	ldr	r3, [pc, #332]	; (800553c <HAL_UART_MspInit+0x454>)
 80053f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80053f4:	4a51      	ldr	r2, [pc, #324]	; (800553c <HAL_UART_MspInit+0x454>)
 80053f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80053fe:	4b4f      	ldr	r3, [pc, #316]	; (800553c <HAL_UART_MspInit+0x454>)
 8005400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800540c:	4b4b      	ldr	r3, [pc, #300]	; (800553c <HAL_UART_MspInit+0x454>)
 800540e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005412:	4a4a      	ldr	r2, [pc, #296]	; (800553c <HAL_UART_MspInit+0x454>)
 8005414:	f043 0308 	orr.w	r3, r3, #8
 8005418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800541c:	4b47      	ldr	r3, [pc, #284]	; (800553c <HAL_UART_MspInit+0x454>)
 800541e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	60bb      	str	r3, [r7, #8]
 8005428:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800542a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800542e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005432:	2302      	movs	r3, #2
 8005434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005438:	2300      	movs	r3, #0
 800543a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800543e:	2300      	movs	r3, #0
 8005440:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005444:	2307      	movs	r3, #7
 8005446:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800544a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800544e:	4619      	mov	r1, r3
 8005450:	483b      	ldr	r0, [pc, #236]	; (8005540 <HAL_UART_MspInit+0x458>)
 8005452:	f003 fa9b 	bl	800898c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005456:	4b3b      	ldr	r3, [pc, #236]	; (8005544 <HAL_UART_MspInit+0x45c>)
 8005458:	4a3b      	ldr	r2, [pc, #236]	; (8005548 <HAL_UART_MspInit+0x460>)
 800545a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800545c:	4b39      	ldr	r3, [pc, #228]	; (8005544 <HAL_UART_MspInit+0x45c>)
 800545e:	222d      	movs	r2, #45	; 0x2d
 8005460:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005462:	4b38      	ldr	r3, [pc, #224]	; (8005544 <HAL_UART_MspInit+0x45c>)
 8005464:	2200      	movs	r2, #0
 8005466:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005468:	4b36      	ldr	r3, [pc, #216]	; (8005544 <HAL_UART_MspInit+0x45c>)
 800546a:	2200      	movs	r2, #0
 800546c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800546e:	4b35      	ldr	r3, [pc, #212]	; (8005544 <HAL_UART_MspInit+0x45c>)
 8005470:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005474:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005476:	4b33      	ldr	r3, [pc, #204]	; (8005544 <HAL_UART_MspInit+0x45c>)
 8005478:	2200      	movs	r2, #0
 800547a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800547c:	4b31      	ldr	r3, [pc, #196]	; (8005544 <HAL_UART_MspInit+0x45c>)
 800547e:	2200      	movs	r2, #0
 8005480:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005482:	4b30      	ldr	r3, [pc, #192]	; (8005544 <HAL_UART_MspInit+0x45c>)
 8005484:	2200      	movs	r2, #0
 8005486:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005488:	4b2e      	ldr	r3, [pc, #184]	; (8005544 <HAL_UART_MspInit+0x45c>)
 800548a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800548e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005490:	4b2c      	ldr	r3, [pc, #176]	; (8005544 <HAL_UART_MspInit+0x45c>)
 8005492:	2200      	movs	r2, #0
 8005494:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005496:	482b      	ldr	r0, [pc, #172]	; (8005544 <HAL_UART_MspInit+0x45c>)
 8005498:	f000 fc3e 	bl	8005d18 <HAL_DMA_Init>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_UART_MspInit+0x3be>
      Error_Handler();
 80054a2:	f7fe faa3 	bl	80039ec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a26      	ldr	r2, [pc, #152]	; (8005544 <HAL_UART_MspInit+0x45c>)
 80054aa:	67da      	str	r2, [r3, #124]	; 0x7c
 80054ac:	4a25      	ldr	r2, [pc, #148]	; (8005544 <HAL_UART_MspInit+0x45c>)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80054b2:	4b26      	ldr	r3, [pc, #152]	; (800554c <HAL_UART_MspInit+0x464>)
 80054b4:	4a26      	ldr	r2, [pc, #152]	; (8005550 <HAL_UART_MspInit+0x468>)
 80054b6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80054b8:	4b24      	ldr	r3, [pc, #144]	; (800554c <HAL_UART_MspInit+0x464>)
 80054ba:	222e      	movs	r2, #46	; 0x2e
 80054bc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80054be:	4b23      	ldr	r3, [pc, #140]	; (800554c <HAL_UART_MspInit+0x464>)
 80054c0:	2240      	movs	r2, #64	; 0x40
 80054c2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054c4:	4b21      	ldr	r3, [pc, #132]	; (800554c <HAL_UART_MspInit+0x464>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80054ca:	4b20      	ldr	r3, [pc, #128]	; (800554c <HAL_UART_MspInit+0x464>)
 80054cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054d0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054d2:	4b1e      	ldr	r3, [pc, #120]	; (800554c <HAL_UART_MspInit+0x464>)
 80054d4:	2200      	movs	r2, #0
 80054d6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054d8:	4b1c      	ldr	r3, [pc, #112]	; (800554c <HAL_UART_MspInit+0x464>)
 80054da:	2200      	movs	r2, #0
 80054dc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80054de:	4b1b      	ldr	r3, [pc, #108]	; (800554c <HAL_UART_MspInit+0x464>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80054e4:	4b19      	ldr	r3, [pc, #100]	; (800554c <HAL_UART_MspInit+0x464>)
 80054e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80054ea:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80054ec:	4b17      	ldr	r3, [pc, #92]	; (800554c <HAL_UART_MspInit+0x464>)
 80054ee:	2204      	movs	r2, #4
 80054f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80054f2:	4b16      	ldr	r3, [pc, #88]	; (800554c <HAL_UART_MspInit+0x464>)
 80054f4:	2203      	movs	r2, #3
 80054f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80054f8:	4b14      	ldr	r3, [pc, #80]	; (800554c <HAL_UART_MspInit+0x464>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80054fe:	4b13      	ldr	r3, [pc, #76]	; (800554c <HAL_UART_MspInit+0x464>)
 8005500:	2200      	movs	r2, #0
 8005502:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005504:	4811      	ldr	r0, [pc, #68]	; (800554c <HAL_UART_MspInit+0x464>)
 8005506:	f000 fc07 	bl	8005d18 <HAL_DMA_Init>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 8005510:	f7fe fa6c 	bl	80039ec <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a0d      	ldr	r2, [pc, #52]	; (800554c <HAL_UART_MspInit+0x464>)
 8005518:	679a      	str	r2, [r3, #120]	; 0x78
 800551a:	4a0c      	ldr	r2, [pc, #48]	; (800554c <HAL_UART_MspInit+0x464>)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005520:	2200      	movs	r2, #0
 8005522:	2100      	movs	r1, #0
 8005524:	2027      	movs	r0, #39	; 0x27
 8005526:	f000 f9b8 	bl	800589a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800552a:	2027      	movs	r0, #39	; 0x27
 800552c:	f000 f9cf 	bl	80058ce <HAL_NVIC_EnableIRQ>
}
 8005530:	bf00      	nop
 8005532:	37f0      	adds	r7, #240	; 0xf0
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40004800 	.word	0x40004800
 800553c:	58024400 	.word	0x58024400
 8005540:	58020c00 	.word	0x58020c00
 8005544:	24000cdc 	.word	0x24000cdc
 8005548:	40020028 	.word	0x40020028
 800554c:	24000de4 	.word	0x24000de4
 8005550:	40020040 	.word	0x40020040

08005554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
ldr   sp, =_estack      /* set stack pointer */
 8005554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800558c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005558:	f7fe fe46 	bl	80041e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800555c:	480c      	ldr	r0, [pc, #48]	; (8005590 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800555e:	490d      	ldr	r1, [pc, #52]	; (8005594 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005560:	4a0d      	ldr	r2, [pc, #52]	; (8005598 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005562:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005564:	e002      	b.n	800556c <LoopCopyDataInit>

08005566 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005566:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005568:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800556a:	3304      	adds	r3, #4

0800556c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800556c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800556e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005570:	d3f9      	bcc.n	8005566 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005572:	4a0a      	ldr	r2, [pc, #40]	; (800559c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005574:	4c0a      	ldr	r4, [pc, #40]	; (80055a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005576:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005578:	e001      	b.n	800557e <LoopFillZerobss>

0800557a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800557a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800557c:	3204      	adds	r2, #4

0800557e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800557e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005580:	d3fb      	bcc.n	800557a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005582:	f00a fbbf 	bl	800fd04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005586:	f7fd ffeb 	bl	8003560 <main>
  bx  lr
 800558a:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 800558c:	240015f0 	.word	0x240015f0
  ldr r0, =_sdata
 8005590:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005594:	2400021c 	.word	0x2400021c
  ldr r2, =_sidata
 8005598:	0801448c 	.word	0x0801448c
  ldr r2, =_sbss
 800559c:	2400021c 	.word	0x2400021c
  ldr r4, =_ebss
 80055a0:	24000ff0 	.word	0x24000ff0

080055a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80055a4:	e7fe      	b.n	80055a4 <ADC3_IRQHandler>
	...

080055a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055ae:	2003      	movs	r0, #3
 80055b0:	f000 f968 	bl	8005884 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80055b4:	f004 f9ea 	bl	800998c <HAL_RCC_GetSysClockFreq>
 80055b8:	4602      	mov	r2, r0
 80055ba:	4b15      	ldr	r3, [pc, #84]	; (8005610 <HAL_Init+0x68>)
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	4913      	ldr	r1, [pc, #76]	; (8005614 <HAL_Init+0x6c>)
 80055c6:	5ccb      	ldrb	r3, [r1, r3]
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	fa22 f303 	lsr.w	r3, r2, r3
 80055d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055d2:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <HAL_Init+0x68>)
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	f003 030f 	and.w	r3, r3, #15
 80055da:	4a0e      	ldr	r2, [pc, #56]	; (8005614 <HAL_Init+0x6c>)
 80055dc:	5cd3      	ldrb	r3, [r2, r3]
 80055de:	f003 031f 	and.w	r3, r3, #31
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	fa22 f303 	lsr.w	r3, r2, r3
 80055e8:	4a0b      	ldr	r2, [pc, #44]	; (8005618 <HAL_Init+0x70>)
 80055ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055ec:	4a0b      	ldr	r2, [pc, #44]	; (800561c <HAL_Init+0x74>)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055f2:	2000      	movs	r0, #0
 80055f4:	f000 f814 	bl	8005620 <HAL_InitTick>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e002      	b.n	8005608 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005602:	f7fe fc3b 	bl	8003e7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	58024400 	.word	0x58024400
 8005614:	08012620 	.word	0x08012620
 8005618:	24000040 	.word	0x24000040
 800561c:	2400003c 	.word	0x2400003c

08005620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8005628:	4b15      	ldr	r3, [pc, #84]	; (8005680 <HAL_InitTick+0x60>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e021      	b.n	8005678 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8005634:	4b13      	ldr	r3, [pc, #76]	; (8005684 <HAL_InitTick+0x64>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	4b11      	ldr	r3, [pc, #68]	; (8005680 <HAL_InitTick+0x60>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	4619      	mov	r1, r3
 800563e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005642:	fbb3 f3f1 	udiv	r3, r3, r1
 8005646:	fbb2 f3f3 	udiv	r3, r2, r3
 800564a:	4618      	mov	r0, r3
 800564c:	f000 f94d 	bl	80058ea <HAL_SYSTICK_Config>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e00e      	b.n	8005678 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2b0f      	cmp	r3, #15
 800565e:	d80a      	bhi.n	8005676 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005660:	2200      	movs	r2, #0
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	f04f 30ff 	mov.w	r0, #4294967295
 8005668:	f000 f917 	bl	800589a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800566c:	4a06      	ldr	r2, [pc, #24]	; (8005688 <HAL_InitTick+0x68>)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	e000      	b.n	8005678 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	24000048 	.word	0x24000048
 8005684:	2400003c 	.word	0x2400003c
 8005688:	24000044 	.word	0x24000044

0800568c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800568c:	b480      	push	{r7}
 800568e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005690:	4b06      	ldr	r3, [pc, #24]	; (80056ac <HAL_IncTick+0x20>)
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <HAL_IncTick+0x24>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4413      	add	r3, r2
 800569c:	4a04      	ldr	r2, [pc, #16]	; (80056b0 <HAL_IncTick+0x24>)
 800569e:	6013      	str	r3, [r2, #0]
}
 80056a0:	bf00      	nop
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	24000048 	.word	0x24000048
 80056b0:	24000fdc 	.word	0x24000fdc

080056b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056b4:	b480      	push	{r7}
 80056b6:	af00      	add	r7, sp, #0
  return uwTick;
 80056b8:	4b03      	ldr	r3, [pc, #12]	; (80056c8 <HAL_GetTick+0x14>)
 80056ba:	681b      	ldr	r3, [r3, #0]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	24000fdc 	.word	0x24000fdc

080056cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80056d0:	4b03      	ldr	r3, [pc, #12]	; (80056e0 <HAL_GetREVID+0x14>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	0c1b      	lsrs	r3, r3, #16
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	5c001000 	.word	0x5c001000

080056e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <__NVIC_SetPriorityGrouping+0x40>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005700:	4013      	ands	r3, r2
 8005702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <__NVIC_SetPriorityGrouping+0x44>)
 800570e:	4313      	orrs	r3, r2
 8005710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005712:	4a04      	ldr	r2, [pc, #16]	; (8005724 <__NVIC_SetPriorityGrouping+0x40>)
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	60d3      	str	r3, [r2, #12]
}
 8005718:	bf00      	nop
 800571a:	3714      	adds	r7, #20
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr
 8005724:	e000ed00 	.word	0xe000ed00
 8005728:	05fa0000 	.word	0x05fa0000

0800572c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800572c:	b480      	push	{r7}
 800572e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005730:	4b04      	ldr	r3, [pc, #16]	; (8005744 <__NVIC_GetPriorityGrouping+0x18>)
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	0a1b      	lsrs	r3, r3, #8
 8005736:	f003 0307 	and.w	r3, r3, #7
}
 800573a:	4618      	mov	r0, r3
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	e000ed00 	.word	0xe000ed00

08005748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	4603      	mov	r3, r0
 8005750:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005756:	2b00      	cmp	r3, #0
 8005758:	db0b      	blt.n	8005772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800575a:	88fb      	ldrh	r3, [r7, #6]
 800575c:	f003 021f 	and.w	r2, r3, #31
 8005760:	4907      	ldr	r1, [pc, #28]	; (8005780 <__NVIC_EnableIRQ+0x38>)
 8005762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	2001      	movs	r0, #1
 800576a:	fa00 f202 	lsl.w	r2, r0, r2
 800576e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005772:	bf00      	nop
 8005774:	370c      	adds	r7, #12
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	e000e100 	.word	0xe000e100

08005784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	4603      	mov	r3, r0
 800578c:	6039      	str	r1, [r7, #0]
 800578e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005790:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005794:	2b00      	cmp	r3, #0
 8005796:	db0a      	blt.n	80057ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	b2da      	uxtb	r2, r3
 800579c:	490c      	ldr	r1, [pc, #48]	; (80057d0 <__NVIC_SetPriority+0x4c>)
 800579e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057a2:	0112      	lsls	r2, r2, #4
 80057a4:	b2d2      	uxtb	r2, r2
 80057a6:	440b      	add	r3, r1
 80057a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057ac:	e00a      	b.n	80057c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	b2da      	uxtb	r2, r3
 80057b2:	4908      	ldr	r1, [pc, #32]	; (80057d4 <__NVIC_SetPriority+0x50>)
 80057b4:	88fb      	ldrh	r3, [r7, #6]
 80057b6:	f003 030f 	and.w	r3, r3, #15
 80057ba:	3b04      	subs	r3, #4
 80057bc:	0112      	lsls	r2, r2, #4
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	440b      	add	r3, r1
 80057c2:	761a      	strb	r2, [r3, #24]
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	e000e100 	.word	0xe000e100
 80057d4:	e000ed00 	.word	0xe000ed00

080057d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057d8:	b480      	push	{r7}
 80057da:	b089      	sub	sp, #36	; 0x24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f003 0307 	and.w	r3, r3, #7
 80057ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f1c3 0307 	rsb	r3, r3, #7
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	bf28      	it	cs
 80057f6:	2304      	movcs	r3, #4
 80057f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	3304      	adds	r3, #4
 80057fe:	2b06      	cmp	r3, #6
 8005800:	d902      	bls.n	8005808 <NVIC_EncodePriority+0x30>
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	3b03      	subs	r3, #3
 8005806:	e000      	b.n	800580a <NVIC_EncodePriority+0x32>
 8005808:	2300      	movs	r3, #0
 800580a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800580c:	f04f 32ff 	mov.w	r2, #4294967295
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	fa02 f303 	lsl.w	r3, r2, r3
 8005816:	43da      	mvns	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	401a      	ands	r2, r3
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005820:	f04f 31ff 	mov.w	r1, #4294967295
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	fa01 f303 	lsl.w	r3, r1, r3
 800582a:	43d9      	mvns	r1, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005830:	4313      	orrs	r3, r2
         );
}
 8005832:	4618      	mov	r0, r3
 8005834:	3724      	adds	r7, #36	; 0x24
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
	...

08005840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3b01      	subs	r3, #1
 800584c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005850:	d301      	bcc.n	8005856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005852:	2301      	movs	r3, #1
 8005854:	e00f      	b.n	8005876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005856:	4a0a      	ldr	r2, [pc, #40]	; (8005880 <SysTick_Config+0x40>)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3b01      	subs	r3, #1
 800585c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800585e:	210f      	movs	r1, #15
 8005860:	f04f 30ff 	mov.w	r0, #4294967295
 8005864:	f7ff ff8e 	bl	8005784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005868:	4b05      	ldr	r3, [pc, #20]	; (8005880 <SysTick_Config+0x40>)
 800586a:	2200      	movs	r2, #0
 800586c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800586e:	4b04      	ldr	r3, [pc, #16]	; (8005880 <SysTick_Config+0x40>)
 8005870:	2207      	movs	r2, #7
 8005872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3708      	adds	r7, #8
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	e000e010 	.word	0xe000e010

08005884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff ff29 	bl	80056e4 <__NVIC_SetPriorityGrouping>
}
 8005892:	bf00      	nop
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b086      	sub	sp, #24
 800589e:	af00      	add	r7, sp, #0
 80058a0:	4603      	mov	r3, r0
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80058a8:	f7ff ff40 	bl	800572c <__NVIC_GetPriorityGrouping>
 80058ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	6978      	ldr	r0, [r7, #20]
 80058b4:	f7ff ff90 	bl	80057d8 <NVIC_EncodePriority>
 80058b8:	4602      	mov	r2, r0
 80058ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058be:	4611      	mov	r1, r2
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff ff5f 	bl	8005784 <__NVIC_SetPriority>
}
 80058c6:	bf00      	nop
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b082      	sub	sp, #8
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	4603      	mov	r3, r0
 80058d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80058d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80058dc:	4618      	mov	r0, r3
 80058de:	f7ff ff33 	bl	8005748 <__NVIC_EnableIRQ>
}
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b082      	sub	sp, #8
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f7ff ffa4 	bl	8005840 <SysTick_Config>
 80058f8:	4603      	mov	r3, r0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8005906:	f000 f802 	bl	800590e <HAL_SYSTICK_Callback>
}
 800590a:	bf00      	nop
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800590e:	b480      	push	{r7}
 8005910:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8005912:	bf00      	nop
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b082      	sub	sp, #8
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	e054      	b.n	80059d8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	7f5b      	ldrb	r3, [r3, #29]
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b00      	cmp	r3, #0
 8005936:	d105      	bne.n	8005944 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fb ff58 	bl	80017f4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2202      	movs	r2, #2
 8005948:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	791b      	ldrb	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10c      	bne.n	800596c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a22      	ldr	r2, [pc, #136]	; (80059e0 <HAL_CRC_Init+0xc4>)
 8005958:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 0218 	bic.w	r2, r2, #24
 8005968:	609a      	str	r2, [r3, #8]
 800596a:	e00c      	b.n	8005986 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6899      	ldr	r1, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	461a      	mov	r2, r3
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f948 	bl	8005c0c <HAL_CRCEx_Polynomial_Set>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d001      	beq.n	8005986 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e028      	b.n	80059d8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	795b      	ldrb	r3, [r3, #5]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d105      	bne.n	800599a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f04f 32ff 	mov.w	r2, #4294967295
 8005996:	611a      	str	r2, [r3, #16]
 8005998:	e004      	b.n	80059a4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6912      	ldr	r2, [r2, #16]
 80059a2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695a      	ldr	r2, [r3, #20]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	699a      	ldr	r2, [r3, #24]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3708      	adds	r7, #8
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	04c11db7 	.word	0x04c11db7

080059e4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80059f0:	2300      	movs	r3, #0
 80059f2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2202      	movs	r2, #2
 80059f8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0201 	orr.w	r2, r2, #1
 8005a08:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d006      	beq.n	8005a20 <HAL_CRC_Calculate+0x3c>
 8005a12:	2b03      	cmp	r3, #3
 8005a14:	d829      	bhi.n	8005a6a <HAL_CRC_Calculate+0x86>
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d019      	beq.n	8005a4e <HAL_CRC_Calculate+0x6a>
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d01e      	beq.n	8005a5c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8005a1e:	e024      	b.n	8005a6a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	e00a      	b.n	8005a3c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	441a      	add	r2, r3
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d3f0      	bcc.n	8005a26 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	613b      	str	r3, [r7, #16]
      break;
 8005a4c:	e00e      	b.n	8005a6c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	68b9      	ldr	r1, [r7, #8]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f812 	bl	8005a7c <CRC_Handle_8>
 8005a58:	6138      	str	r0, [r7, #16]
      break;
 8005a5a:	e007      	b.n	8005a6c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	68b9      	ldr	r1, [r7, #8]
 8005a60:	68f8      	ldr	r0, [r7, #12]
 8005a62:	f000 f899 	bl	8005b98 <CRC_Handle_16>
 8005a66:	6138      	str	r0, [r7, #16]
      break;
 8005a68:	e000      	b.n	8005a6c <HAL_CRC_Calculate+0x88>
      break;
 8005a6a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005a72:	693b      	ldr	r3, [r7, #16]
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3718      	adds	r7, #24
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	bd80      	pop	{r7, pc}

08005a7c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b089      	sub	sp, #36	; 0x24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	e023      	b.n	8005ad6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	4413      	add	r3, r2
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	68b9      	ldr	r1, [r7, #8]
 8005aa2:	440b      	add	r3, r1
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005aa8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	3302      	adds	r3, #2
 8005ab0:	68b9      	ldr	r1, [r7, #8]
 8005ab2:	440b      	add	r3, r1
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005ab8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	3303      	adds	r3, #3
 8005ac0:	68b9      	ldr	r1, [r7, #8]
 8005ac2:	440b      	add	r3, r1
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8005acc:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005ace:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	089b      	lsrs	r3, r3, #2
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d3d6      	bcc.n	8005a8e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d04d      	beq.n	8005b86 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f003 0303 	and.w	r3, r3, #3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d107      	bne.n	8005b04 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	4413      	add	r3, r2
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	6812      	ldr	r2, [r2, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d116      	bne.n	8005b3c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	4413      	add	r3, r2
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	021b      	lsls	r3, r3, #8
 8005b1a:	b21a      	sxth	r2, r3
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	3301      	adds	r3, #1
 8005b22:	68b9      	ldr	r1, [r7, #8]
 8005b24:	440b      	add	r3, r1
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	b21b      	sxth	r3, r3
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	b21b      	sxth	r3, r3
 8005b2e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	8b7a      	ldrh	r2, [r7, #26]
 8005b3a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f003 0303 	and.w	r3, r3, #3
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d11f      	bne.n	8005b86 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005b46:	69fb      	ldr	r3, [r7, #28]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	b21a      	sxth	r2, r3
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	3301      	adds	r3, #1
 8005b5a:	68b9      	ldr	r1, [r7, #8]
 8005b5c:	440b      	add	r3, r1
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	b21b      	sxth	r3, r3
 8005b62:	4313      	orrs	r3, r2
 8005b64:	b21b      	sxth	r3, r3
 8005b66:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	8b7a      	ldrh	r2, [r7, #26]
 8005b72:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	3302      	adds	r3, #2
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	6812      	ldr	r2, [r2, #0]
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3724      	adds	r7, #36	; 0x24
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	617b      	str	r3, [r7, #20]
 8005ba8:	e013      	b.n	8005bd2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	041a      	lsls	r2, r3, #16
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	3302      	adds	r3, #2
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	440b      	add	r3, r1
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	430a      	orrs	r2, r1
 8005bca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	617b      	str	r3, [r7, #20]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	085b      	lsrs	r3, r3, #1
 8005bd6:	697a      	ldr	r2, [r7, #20]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d3e6      	bcc.n	8005baa <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d009      	beq.n	8005bfa <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	881a      	ldrh	r2, [r3, #0]
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b087      	sub	sp, #28
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005c1c:	231f      	movs	r3, #31
 8005c1e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005c20:	bf00      	nop
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1e5a      	subs	r2, r3, #1
 8005c26:	613a      	str	r2, [r7, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d009      	beq.n	8005c40 <HAL_CRCEx_Polynomial_Set+0x34>
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	f003 031f 	and.w	r3, r3, #31
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	fa22 f303 	lsr.w	r3, r2, r3
 8005c38:	f003 0301 	and.w	r3, r3, #1
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d0f0      	beq.n	8005c22 <HAL_CRCEx_Polynomial_Set+0x16>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b18      	cmp	r3, #24
 8005c44:	d846      	bhi.n	8005cd4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005c46:	a201      	add	r2, pc, #4	; (adr r2, 8005c4c <HAL_CRCEx_Polynomial_Set+0x40>)
 8005c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4c:	08005cdb 	.word	0x08005cdb
 8005c50:	08005cd5 	.word	0x08005cd5
 8005c54:	08005cd5 	.word	0x08005cd5
 8005c58:	08005cd5 	.word	0x08005cd5
 8005c5c:	08005cd5 	.word	0x08005cd5
 8005c60:	08005cd5 	.word	0x08005cd5
 8005c64:	08005cd5 	.word	0x08005cd5
 8005c68:	08005cd5 	.word	0x08005cd5
 8005c6c:	08005cc9 	.word	0x08005cc9
 8005c70:	08005cd5 	.word	0x08005cd5
 8005c74:	08005cd5 	.word	0x08005cd5
 8005c78:	08005cd5 	.word	0x08005cd5
 8005c7c:	08005cd5 	.word	0x08005cd5
 8005c80:	08005cd5 	.word	0x08005cd5
 8005c84:	08005cd5 	.word	0x08005cd5
 8005c88:	08005cd5 	.word	0x08005cd5
 8005c8c:	08005cbd 	.word	0x08005cbd
 8005c90:	08005cd5 	.word	0x08005cd5
 8005c94:	08005cd5 	.word	0x08005cd5
 8005c98:	08005cd5 	.word	0x08005cd5
 8005c9c:	08005cd5 	.word	0x08005cd5
 8005ca0:	08005cd5 	.word	0x08005cd5
 8005ca4:	08005cd5 	.word	0x08005cd5
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005cb1 	.word	0x08005cb1
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	2b06      	cmp	r3, #6
 8005cb4:	d913      	bls.n	8005cde <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005cba:	e010      	b.n	8005cde <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	2b07      	cmp	r3, #7
 8005cc0:	d90f      	bls.n	8005ce2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005cc6:	e00c      	b.n	8005ce2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	2b0f      	cmp	r3, #15
 8005ccc:	d90b      	bls.n	8005ce6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8005cd2:	e008      	b.n	8005ce6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd8:	e006      	b.n	8005ce8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005cda:	bf00      	nop
 8005cdc:	e004      	b.n	8005ce8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005cde:	bf00      	nop
 8005ce0:	e002      	b.n	8005ce8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005ce2:	bf00      	nop
 8005ce4:	e000      	b.n	8005ce8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8005ce6:	bf00      	nop
  }
  if (status == HAL_OK)
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10d      	bne.n	8005d0a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f023 0118 	bic.w	r1, r3, #24
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005d20:	f7ff fcc8 	bl	80056b4 <HAL_GetTick>
 8005d24:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e316      	b.n	800635e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a66      	ldr	r2, [pc, #408]	; (8005ed0 <HAL_DMA_Init+0x1b8>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d04a      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a65      	ldr	r2, [pc, #404]	; (8005ed4 <HAL_DMA_Init+0x1bc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d045      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a63      	ldr	r2, [pc, #396]	; (8005ed8 <HAL_DMA_Init+0x1c0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d040      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a62      	ldr	r2, [pc, #392]	; (8005edc <HAL_DMA_Init+0x1c4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d03b      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a60      	ldr	r2, [pc, #384]	; (8005ee0 <HAL_DMA_Init+0x1c8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d036      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a5f      	ldr	r2, [pc, #380]	; (8005ee4 <HAL_DMA_Init+0x1cc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d031      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a5d      	ldr	r2, [pc, #372]	; (8005ee8 <HAL_DMA_Init+0x1d0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d02c      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a5c      	ldr	r2, [pc, #368]	; (8005eec <HAL_DMA_Init+0x1d4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d027      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a5a      	ldr	r2, [pc, #360]	; (8005ef0 <HAL_DMA_Init+0x1d8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d022      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a59      	ldr	r2, [pc, #356]	; (8005ef4 <HAL_DMA_Init+0x1dc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d01d      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a57      	ldr	r2, [pc, #348]	; (8005ef8 <HAL_DMA_Init+0x1e0>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d018      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a56      	ldr	r2, [pc, #344]	; (8005efc <HAL_DMA_Init+0x1e4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d013      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a54      	ldr	r2, [pc, #336]	; (8005f00 <HAL_DMA_Init+0x1e8>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00e      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a53      	ldr	r2, [pc, #332]	; (8005f04 <HAL_DMA_Init+0x1ec>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d009      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a51      	ldr	r2, [pc, #324]	; (8005f08 <HAL_DMA_Init+0x1f0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d004      	beq.n	8005dd0 <HAL_DMA_Init+0xb8>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a50      	ldr	r2, [pc, #320]	; (8005f0c <HAL_DMA_Init+0x1f4>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d101      	bne.n	8005dd4 <HAL_DMA_Init+0xbc>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e000      	b.n	8005dd6 <HAL_DMA_Init+0xbe>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f000 813b 	beq.w	8006052 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2202      	movs	r2, #2
 8005de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a37      	ldr	r2, [pc, #220]	; (8005ed0 <HAL_DMA_Init+0x1b8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d04a      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a36      	ldr	r2, [pc, #216]	; (8005ed4 <HAL_DMA_Init+0x1bc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d045      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a34      	ldr	r2, [pc, #208]	; (8005ed8 <HAL_DMA_Init+0x1c0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d040      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a33      	ldr	r2, [pc, #204]	; (8005edc <HAL_DMA_Init+0x1c4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d03b      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a31      	ldr	r2, [pc, #196]	; (8005ee0 <HAL_DMA_Init+0x1c8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d036      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a30      	ldr	r2, [pc, #192]	; (8005ee4 <HAL_DMA_Init+0x1cc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d031      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a2e      	ldr	r2, [pc, #184]	; (8005ee8 <HAL_DMA_Init+0x1d0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d02c      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a2d      	ldr	r2, [pc, #180]	; (8005eec <HAL_DMA_Init+0x1d4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d027      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a2b      	ldr	r2, [pc, #172]	; (8005ef0 <HAL_DMA_Init+0x1d8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d022      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a2a      	ldr	r2, [pc, #168]	; (8005ef4 <HAL_DMA_Init+0x1dc>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d01d      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a28      	ldr	r2, [pc, #160]	; (8005ef8 <HAL_DMA_Init+0x1e0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d018      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a27      	ldr	r2, [pc, #156]	; (8005efc <HAL_DMA_Init+0x1e4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d013      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a25      	ldr	r2, [pc, #148]	; (8005f00 <HAL_DMA_Init+0x1e8>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00e      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a24      	ldr	r2, [pc, #144]	; (8005f04 <HAL_DMA_Init+0x1ec>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d009      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a22      	ldr	r2, [pc, #136]	; (8005f08 <HAL_DMA_Init+0x1f0>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d004      	beq.n	8005e8c <HAL_DMA_Init+0x174>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a21      	ldr	r2, [pc, #132]	; (8005f0c <HAL_DMA_Init+0x1f4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d108      	bne.n	8005e9e <HAL_DMA_Init+0x186>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0201 	bic.w	r2, r2, #1
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	e007      	b.n	8005eae <HAL_DMA_Init+0x196>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005eae:	e02f      	b.n	8005f10 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005eb0:	f7ff fc00 	bl	80056b4 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b05      	cmp	r3, #5
 8005ebc:	d928      	bls.n	8005f10 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2220      	movs	r2, #32
 8005ec2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2203      	movs	r2, #3
 8005ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e246      	b.n	800635e <HAL_DMA_Init+0x646>
 8005ed0:	40020010 	.word	0x40020010
 8005ed4:	40020028 	.word	0x40020028
 8005ed8:	40020040 	.word	0x40020040
 8005edc:	40020058 	.word	0x40020058
 8005ee0:	40020070 	.word	0x40020070
 8005ee4:	40020088 	.word	0x40020088
 8005ee8:	400200a0 	.word	0x400200a0
 8005eec:	400200b8 	.word	0x400200b8
 8005ef0:	40020410 	.word	0x40020410
 8005ef4:	40020428 	.word	0x40020428
 8005ef8:	40020440 	.word	0x40020440
 8005efc:	40020458 	.word	0x40020458
 8005f00:	40020470 	.word	0x40020470
 8005f04:	40020488 	.word	0x40020488
 8005f08:	400204a0 	.word	0x400204a0
 8005f0c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1c8      	bne.n	8005eb0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4b83      	ldr	r3, [pc, #524]	; (8006138 <HAL_DMA_Init+0x420>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005f36:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f42:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	699b      	ldr	r3, [r3, #24]
 8005f48:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f4e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a1b      	ldr	r3, [r3, #32]
 8005f54:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d107      	bne.n	8005f74 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005f74:	4b71      	ldr	r3, [pc, #452]	; (800613c <HAL_DMA_Init+0x424>)
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	4b71      	ldr	r3, [pc, #452]	; (8006140 <HAL_DMA_Init+0x428>)
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f80:	d328      	bcc.n	8005fd4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	2b28      	cmp	r3, #40	; 0x28
 8005f88:	d903      	bls.n	8005f92 <HAL_DMA_Init+0x27a>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005f90:	d917      	bls.n	8005fc2 <HAL_DMA_Init+0x2aa>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b3e      	cmp	r3, #62	; 0x3e
 8005f98:	d903      	bls.n	8005fa2 <HAL_DMA_Init+0x28a>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b42      	cmp	r3, #66	; 0x42
 8005fa0:	d90f      	bls.n	8005fc2 <HAL_DMA_Init+0x2aa>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b46      	cmp	r3, #70	; 0x46
 8005fa8:	d903      	bls.n	8005fb2 <HAL_DMA_Init+0x29a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2b48      	cmp	r3, #72	; 0x48
 8005fb0:	d907      	bls.n	8005fc2 <HAL_DMA_Init+0x2aa>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b4e      	cmp	r3, #78	; 0x4e
 8005fb8:	d905      	bls.n	8005fc6 <HAL_DMA_Init+0x2ae>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b52      	cmp	r3, #82	; 0x52
 8005fc0:	d801      	bhi.n	8005fc6 <HAL_DMA_Init+0x2ae>
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e000      	b.n	8005fc8 <HAL_DMA_Init+0x2b0>
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d003      	beq.n	8005fd4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fd2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f023 0307 	bic.w	r3, r3, #7
 8005fea:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d117      	bne.n	800602e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00e      	beq.n	800602e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f002 fb31 	bl	8008678 <DMA_CheckFifoParam>
 8006016:	4603      	mov	r3, r0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d008      	beq.n	800602e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2240      	movs	r2, #64	; 0x40
 8006020:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e197      	b.n	800635e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f002 fa6c 	bl	8008514 <DMA_CalcBaseAndBitshift>
 800603c:	4603      	mov	r3, r0
 800603e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006044:	f003 031f 	and.w	r3, r3, #31
 8006048:	223f      	movs	r2, #63	; 0x3f
 800604a:	409a      	lsls	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	609a      	str	r2, [r3, #8]
 8006050:	e0cd      	b.n	80061ee <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a3b      	ldr	r2, [pc, #236]	; (8006144 <HAL_DMA_Init+0x42c>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d022      	beq.n	80060a2 <HAL_DMA_Init+0x38a>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a39      	ldr	r2, [pc, #228]	; (8006148 <HAL_DMA_Init+0x430>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d01d      	beq.n	80060a2 <HAL_DMA_Init+0x38a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a38      	ldr	r2, [pc, #224]	; (800614c <HAL_DMA_Init+0x434>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d018      	beq.n	80060a2 <HAL_DMA_Init+0x38a>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a36      	ldr	r2, [pc, #216]	; (8006150 <HAL_DMA_Init+0x438>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <HAL_DMA_Init+0x38a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4a35      	ldr	r2, [pc, #212]	; (8006154 <HAL_DMA_Init+0x43c>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00e      	beq.n	80060a2 <HAL_DMA_Init+0x38a>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a33      	ldr	r2, [pc, #204]	; (8006158 <HAL_DMA_Init+0x440>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d009      	beq.n	80060a2 <HAL_DMA_Init+0x38a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a32      	ldr	r2, [pc, #200]	; (800615c <HAL_DMA_Init+0x444>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d004      	beq.n	80060a2 <HAL_DMA_Init+0x38a>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a30      	ldr	r2, [pc, #192]	; (8006160 <HAL_DMA_Init+0x448>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d101      	bne.n	80060a6 <HAL_DMA_Init+0x38e>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <HAL_DMA_Init+0x390>
 80060a6:	2300      	movs	r3, #0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 8097 	beq.w	80061dc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a24      	ldr	r2, [pc, #144]	; (8006144 <HAL_DMA_Init+0x42c>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d021      	beq.n	80060fc <HAL_DMA_Init+0x3e4>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a22      	ldr	r2, [pc, #136]	; (8006148 <HAL_DMA_Init+0x430>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d01c      	beq.n	80060fc <HAL_DMA_Init+0x3e4>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a21      	ldr	r2, [pc, #132]	; (800614c <HAL_DMA_Init+0x434>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d017      	beq.n	80060fc <HAL_DMA_Init+0x3e4>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a1f      	ldr	r2, [pc, #124]	; (8006150 <HAL_DMA_Init+0x438>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d012      	beq.n	80060fc <HAL_DMA_Init+0x3e4>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a1e      	ldr	r2, [pc, #120]	; (8006154 <HAL_DMA_Init+0x43c>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d00d      	beq.n	80060fc <HAL_DMA_Init+0x3e4>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a1c      	ldr	r2, [pc, #112]	; (8006158 <HAL_DMA_Init+0x440>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d008      	beq.n	80060fc <HAL_DMA_Init+0x3e4>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a1b      	ldr	r2, [pc, #108]	; (800615c <HAL_DMA_Init+0x444>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <HAL_DMA_Init+0x3e4>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a19      	ldr	r2, [pc, #100]	; (8006160 <HAL_DMA_Init+0x448>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2202      	movs	r2, #2
 8006102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	4b12      	ldr	r3, [pc, #72]	; (8006164 <HAL_DMA_Init+0x44c>)
 800611a:	4013      	ands	r3, r2
 800611c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2b40      	cmp	r3, #64	; 0x40
 8006124:	d020      	beq.n	8006168 <HAL_DMA_Init+0x450>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	2b80      	cmp	r3, #128	; 0x80
 800612c:	d102      	bne.n	8006134 <HAL_DMA_Init+0x41c>
 800612e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006132:	e01a      	b.n	800616a <HAL_DMA_Init+0x452>
 8006134:	2300      	movs	r3, #0
 8006136:	e018      	b.n	800616a <HAL_DMA_Init+0x452>
 8006138:	fe10803f 	.word	0xfe10803f
 800613c:	5c001000 	.word	0x5c001000
 8006140:	ffff0000 	.word	0xffff0000
 8006144:	58025408 	.word	0x58025408
 8006148:	5802541c 	.word	0x5802541c
 800614c:	58025430 	.word	0x58025430
 8006150:	58025444 	.word	0x58025444
 8006154:	58025458 	.word	0x58025458
 8006158:	5802546c 	.word	0x5802546c
 800615c:	58025480 	.word	0x58025480
 8006160:	58025494 	.word	0x58025494
 8006164:	fffe000f 	.word	0xfffe000f
 8006168:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	68d2      	ldr	r2, [r2, #12]
 800616e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006170:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006178:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006180:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006188:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006190:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006198:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	461a      	mov	r2, r3
 80061ae:	4b6e      	ldr	r3, [pc, #440]	; (8006368 <HAL_DMA_Init+0x650>)
 80061b0:	4413      	add	r3, r2
 80061b2:	4a6e      	ldr	r2, [pc, #440]	; (800636c <HAL_DMA_Init+0x654>)
 80061b4:	fba2 2303 	umull	r2, r3, r2, r3
 80061b8:	091b      	lsrs	r3, r3, #4
 80061ba:	009a      	lsls	r2, r3, #2
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f002 f9a7 	bl	8008514 <DMA_CalcBaseAndBitshift>
 80061c6:	4603      	mov	r3, r0
 80061c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061ce:	f003 031f 	and.w	r3, r3, #31
 80061d2:	2201      	movs	r2, #1
 80061d4:	409a      	lsls	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	605a      	str	r2, [r3, #4]
 80061da:	e008      	b.n	80061ee <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2240      	movs	r2, #64	; 0x40
 80061e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2203      	movs	r2, #3
 80061e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e0b7      	b.n	800635e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a5f      	ldr	r2, [pc, #380]	; (8006370 <HAL_DMA_Init+0x658>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d072      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a5d      	ldr	r2, [pc, #372]	; (8006374 <HAL_DMA_Init+0x65c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d06d      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a5c      	ldr	r2, [pc, #368]	; (8006378 <HAL_DMA_Init+0x660>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d068      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a5a      	ldr	r2, [pc, #360]	; (800637c <HAL_DMA_Init+0x664>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d063      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a59      	ldr	r2, [pc, #356]	; (8006380 <HAL_DMA_Init+0x668>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d05e      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a57      	ldr	r2, [pc, #348]	; (8006384 <HAL_DMA_Init+0x66c>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d059      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a56      	ldr	r2, [pc, #344]	; (8006388 <HAL_DMA_Init+0x670>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d054      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a54      	ldr	r2, [pc, #336]	; (800638c <HAL_DMA_Init+0x674>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d04f      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a53      	ldr	r2, [pc, #332]	; (8006390 <HAL_DMA_Init+0x678>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d04a      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a51      	ldr	r2, [pc, #324]	; (8006394 <HAL_DMA_Init+0x67c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d045      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a50      	ldr	r2, [pc, #320]	; (8006398 <HAL_DMA_Init+0x680>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d040      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a4e      	ldr	r2, [pc, #312]	; (800639c <HAL_DMA_Init+0x684>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d03b      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a4d      	ldr	r2, [pc, #308]	; (80063a0 <HAL_DMA_Init+0x688>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d036      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a4b      	ldr	r2, [pc, #300]	; (80063a4 <HAL_DMA_Init+0x68c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d031      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a4a      	ldr	r2, [pc, #296]	; (80063a8 <HAL_DMA_Init+0x690>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d02c      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a48      	ldr	r2, [pc, #288]	; (80063ac <HAL_DMA_Init+0x694>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d027      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a47      	ldr	r2, [pc, #284]	; (80063b0 <HAL_DMA_Init+0x698>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d022      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a45      	ldr	r2, [pc, #276]	; (80063b4 <HAL_DMA_Init+0x69c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d01d      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a44      	ldr	r2, [pc, #272]	; (80063b8 <HAL_DMA_Init+0x6a0>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d018      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a42      	ldr	r2, [pc, #264]	; (80063bc <HAL_DMA_Init+0x6a4>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d013      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a41      	ldr	r2, [pc, #260]	; (80063c0 <HAL_DMA_Init+0x6a8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00e      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a3f      	ldr	r2, [pc, #252]	; (80063c4 <HAL_DMA_Init+0x6ac>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d009      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a3e      	ldr	r2, [pc, #248]	; (80063c8 <HAL_DMA_Init+0x6b0>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d004      	beq.n	80062de <HAL_DMA_Init+0x5c6>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a3c      	ldr	r2, [pc, #240]	; (80063cc <HAL_DMA_Init+0x6b4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d101      	bne.n	80062e2 <HAL_DMA_Init+0x5ca>
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <HAL_DMA_Init+0x5cc>
 80062e2:	2300      	movs	r3, #0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d032      	beq.n	800634e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f002 fa41 	bl	8008770 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2b80      	cmp	r3, #128	; 0x80
 80062f4:	d102      	bne.n	80062fc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006304:	b2d2      	uxtb	r2, r2
 8006306:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006310:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d010      	beq.n	800633c <HAL_DMA_Init+0x624>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	2b08      	cmp	r3, #8
 8006320:	d80c      	bhi.n	800633c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f002 fabe 	bl	80088a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800632c:	2200      	movs	r2, #0
 800632e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006338:	605a      	str	r2, [r3, #4]
 800633a:	e008      	b.n	800634e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	a7fdabf8 	.word	0xa7fdabf8
 800636c:	cccccccd 	.word	0xcccccccd
 8006370:	40020010 	.word	0x40020010
 8006374:	40020028 	.word	0x40020028
 8006378:	40020040 	.word	0x40020040
 800637c:	40020058 	.word	0x40020058
 8006380:	40020070 	.word	0x40020070
 8006384:	40020088 	.word	0x40020088
 8006388:	400200a0 	.word	0x400200a0
 800638c:	400200b8 	.word	0x400200b8
 8006390:	40020410 	.word	0x40020410
 8006394:	40020428 	.word	0x40020428
 8006398:	40020440 	.word	0x40020440
 800639c:	40020458 	.word	0x40020458
 80063a0:	40020470 	.word	0x40020470
 80063a4:	40020488 	.word	0x40020488
 80063a8:	400204a0 	.word	0x400204a0
 80063ac:	400204b8 	.word	0x400204b8
 80063b0:	58025408 	.word	0x58025408
 80063b4:	5802541c 	.word	0x5802541c
 80063b8:	58025430 	.word	0x58025430
 80063bc:	58025444 	.word	0x58025444
 80063c0:	58025458 	.word	0x58025458
 80063c4:	5802546c 	.word	0x5802546c
 80063c8:	58025480 	.word	0x58025480
 80063cc:	58025494 	.word	0x58025494

080063d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e226      	b.n	800683a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d101      	bne.n	80063fa <HAL_DMA_Start_IT+0x2a>
 80063f6:	2302      	movs	r3, #2
 80063f8:	e21f      	b.n	800683a <HAL_DMA_Start_IT+0x46a>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b01      	cmp	r3, #1
 800640c:	f040 820a 	bne.w	8006824 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a68      	ldr	r2, [pc, #416]	; (80065c4 <HAL_DMA_Start_IT+0x1f4>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d04a      	beq.n	80064be <HAL_DMA_Start_IT+0xee>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a66      	ldr	r2, [pc, #408]	; (80065c8 <HAL_DMA_Start_IT+0x1f8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d045      	beq.n	80064be <HAL_DMA_Start_IT+0xee>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a65      	ldr	r2, [pc, #404]	; (80065cc <HAL_DMA_Start_IT+0x1fc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d040      	beq.n	80064be <HAL_DMA_Start_IT+0xee>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a63      	ldr	r2, [pc, #396]	; (80065d0 <HAL_DMA_Start_IT+0x200>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d03b      	beq.n	80064be <HAL_DMA_Start_IT+0xee>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a62      	ldr	r2, [pc, #392]	; (80065d4 <HAL_DMA_Start_IT+0x204>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d036      	beq.n	80064be <HAL_DMA_Start_IT+0xee>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a60      	ldr	r2, [pc, #384]	; (80065d8 <HAL_DMA_Start_IT+0x208>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d031      	beq.n	80064be <HAL_DMA_Start_IT+0xee>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a5f      	ldr	r2, [pc, #380]	; (80065dc <HAL_DMA_Start_IT+0x20c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d02c      	beq.n	80064be <HAL_DMA_Start_IT+0xee>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a5d      	ldr	r2, [pc, #372]	; (80065e0 <HAL_DMA_Start_IT+0x210>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d027      	beq.n	80064be <HAL_DMA_Start_IT+0xee>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a5c      	ldr	r2, [pc, #368]	; (80065e4 <HAL_DMA_Start_IT+0x214>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d022      	beq.n	80064be <HAL_DMA_Start_IT+0xee>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a5a      	ldr	r2, [pc, #360]	; (80065e8 <HAL_DMA_Start_IT+0x218>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d01d      	beq.n	80064be <HAL_DMA_Start_IT+0xee>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a59      	ldr	r2, [pc, #356]	; (80065ec <HAL_DMA_Start_IT+0x21c>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d018      	beq.n	80064be <HAL_DMA_Start_IT+0xee>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a57      	ldr	r2, [pc, #348]	; (80065f0 <HAL_DMA_Start_IT+0x220>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d013      	beq.n	80064be <HAL_DMA_Start_IT+0xee>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a56      	ldr	r2, [pc, #344]	; (80065f4 <HAL_DMA_Start_IT+0x224>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00e      	beq.n	80064be <HAL_DMA_Start_IT+0xee>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a54      	ldr	r2, [pc, #336]	; (80065f8 <HAL_DMA_Start_IT+0x228>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d009      	beq.n	80064be <HAL_DMA_Start_IT+0xee>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a53      	ldr	r2, [pc, #332]	; (80065fc <HAL_DMA_Start_IT+0x22c>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d004      	beq.n	80064be <HAL_DMA_Start_IT+0xee>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a51      	ldr	r2, [pc, #324]	; (8006600 <HAL_DMA_Start_IT+0x230>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d108      	bne.n	80064d0 <HAL_DMA_Start_IT+0x100>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f022 0201 	bic.w	r2, r2, #1
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	e007      	b.n	80064e0 <HAL_DMA_Start_IT+0x110>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0201 	bic.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f001 fe68 	bl	80081bc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a34      	ldr	r2, [pc, #208]	; (80065c4 <HAL_DMA_Start_IT+0x1f4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d04a      	beq.n	800658c <HAL_DMA_Start_IT+0x1bc>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a33      	ldr	r2, [pc, #204]	; (80065c8 <HAL_DMA_Start_IT+0x1f8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d045      	beq.n	800658c <HAL_DMA_Start_IT+0x1bc>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a31      	ldr	r2, [pc, #196]	; (80065cc <HAL_DMA_Start_IT+0x1fc>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d040      	beq.n	800658c <HAL_DMA_Start_IT+0x1bc>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a30      	ldr	r2, [pc, #192]	; (80065d0 <HAL_DMA_Start_IT+0x200>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d03b      	beq.n	800658c <HAL_DMA_Start_IT+0x1bc>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a2e      	ldr	r2, [pc, #184]	; (80065d4 <HAL_DMA_Start_IT+0x204>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d036      	beq.n	800658c <HAL_DMA_Start_IT+0x1bc>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a2d      	ldr	r2, [pc, #180]	; (80065d8 <HAL_DMA_Start_IT+0x208>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d031      	beq.n	800658c <HAL_DMA_Start_IT+0x1bc>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a2b      	ldr	r2, [pc, #172]	; (80065dc <HAL_DMA_Start_IT+0x20c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d02c      	beq.n	800658c <HAL_DMA_Start_IT+0x1bc>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a2a      	ldr	r2, [pc, #168]	; (80065e0 <HAL_DMA_Start_IT+0x210>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d027      	beq.n	800658c <HAL_DMA_Start_IT+0x1bc>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a28      	ldr	r2, [pc, #160]	; (80065e4 <HAL_DMA_Start_IT+0x214>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d022      	beq.n	800658c <HAL_DMA_Start_IT+0x1bc>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a27      	ldr	r2, [pc, #156]	; (80065e8 <HAL_DMA_Start_IT+0x218>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d01d      	beq.n	800658c <HAL_DMA_Start_IT+0x1bc>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a25      	ldr	r2, [pc, #148]	; (80065ec <HAL_DMA_Start_IT+0x21c>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d018      	beq.n	800658c <HAL_DMA_Start_IT+0x1bc>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a24      	ldr	r2, [pc, #144]	; (80065f0 <HAL_DMA_Start_IT+0x220>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d013      	beq.n	800658c <HAL_DMA_Start_IT+0x1bc>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a22      	ldr	r2, [pc, #136]	; (80065f4 <HAL_DMA_Start_IT+0x224>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d00e      	beq.n	800658c <HAL_DMA_Start_IT+0x1bc>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a21      	ldr	r2, [pc, #132]	; (80065f8 <HAL_DMA_Start_IT+0x228>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d009      	beq.n	800658c <HAL_DMA_Start_IT+0x1bc>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a1f      	ldr	r2, [pc, #124]	; (80065fc <HAL_DMA_Start_IT+0x22c>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d004      	beq.n	800658c <HAL_DMA_Start_IT+0x1bc>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1e      	ldr	r2, [pc, #120]	; (8006600 <HAL_DMA_Start_IT+0x230>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d101      	bne.n	8006590 <HAL_DMA_Start_IT+0x1c0>
 800658c:	2301      	movs	r3, #1
 800658e:	e000      	b.n	8006592 <HAL_DMA_Start_IT+0x1c2>
 8006590:	2300      	movs	r3, #0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d036      	beq.n	8006604 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f023 021e 	bic.w	r2, r3, #30
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f042 0216 	orr.w	r2, r2, #22
 80065a8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d03e      	beq.n	8006630 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f042 0208 	orr.w	r2, r2, #8
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	e035      	b.n	8006630 <HAL_DMA_Start_IT+0x260>
 80065c4:	40020010 	.word	0x40020010
 80065c8:	40020028 	.word	0x40020028
 80065cc:	40020040 	.word	0x40020040
 80065d0:	40020058 	.word	0x40020058
 80065d4:	40020070 	.word	0x40020070
 80065d8:	40020088 	.word	0x40020088
 80065dc:	400200a0 	.word	0x400200a0
 80065e0:	400200b8 	.word	0x400200b8
 80065e4:	40020410 	.word	0x40020410
 80065e8:	40020428 	.word	0x40020428
 80065ec:	40020440 	.word	0x40020440
 80065f0:	40020458 	.word	0x40020458
 80065f4:	40020470 	.word	0x40020470
 80065f8:	40020488 	.word	0x40020488
 80065fc:	400204a0 	.word	0x400204a0
 8006600:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f023 020e 	bic.w	r2, r3, #14
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f042 020a 	orr.w	r2, r2, #10
 8006616:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0204 	orr.w	r2, r2, #4
 800662e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a83      	ldr	r2, [pc, #524]	; (8006844 <HAL_DMA_Start_IT+0x474>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d072      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a82      	ldr	r2, [pc, #520]	; (8006848 <HAL_DMA_Start_IT+0x478>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d06d      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a80      	ldr	r2, [pc, #512]	; (800684c <HAL_DMA_Start_IT+0x47c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d068      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a7f      	ldr	r2, [pc, #508]	; (8006850 <HAL_DMA_Start_IT+0x480>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d063      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a7d      	ldr	r2, [pc, #500]	; (8006854 <HAL_DMA_Start_IT+0x484>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d05e      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a7c      	ldr	r2, [pc, #496]	; (8006858 <HAL_DMA_Start_IT+0x488>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d059      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a7a      	ldr	r2, [pc, #488]	; (800685c <HAL_DMA_Start_IT+0x48c>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d054      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a79      	ldr	r2, [pc, #484]	; (8006860 <HAL_DMA_Start_IT+0x490>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d04f      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a77      	ldr	r2, [pc, #476]	; (8006864 <HAL_DMA_Start_IT+0x494>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d04a      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a76      	ldr	r2, [pc, #472]	; (8006868 <HAL_DMA_Start_IT+0x498>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d045      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a74      	ldr	r2, [pc, #464]	; (800686c <HAL_DMA_Start_IT+0x49c>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d040      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a73      	ldr	r2, [pc, #460]	; (8006870 <HAL_DMA_Start_IT+0x4a0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d03b      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a71      	ldr	r2, [pc, #452]	; (8006874 <HAL_DMA_Start_IT+0x4a4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d036      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a70      	ldr	r2, [pc, #448]	; (8006878 <HAL_DMA_Start_IT+0x4a8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d031      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a6e      	ldr	r2, [pc, #440]	; (800687c <HAL_DMA_Start_IT+0x4ac>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d02c      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a6d      	ldr	r2, [pc, #436]	; (8006880 <HAL_DMA_Start_IT+0x4b0>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d027      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a6b      	ldr	r2, [pc, #428]	; (8006884 <HAL_DMA_Start_IT+0x4b4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d022      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a6a      	ldr	r2, [pc, #424]	; (8006888 <HAL_DMA_Start_IT+0x4b8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d01d      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a68      	ldr	r2, [pc, #416]	; (800688c <HAL_DMA_Start_IT+0x4bc>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d018      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a67      	ldr	r2, [pc, #412]	; (8006890 <HAL_DMA_Start_IT+0x4c0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d013      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a65      	ldr	r2, [pc, #404]	; (8006894 <HAL_DMA_Start_IT+0x4c4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d00e      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a64      	ldr	r2, [pc, #400]	; (8006898 <HAL_DMA_Start_IT+0x4c8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d009      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a62      	ldr	r2, [pc, #392]	; (800689c <HAL_DMA_Start_IT+0x4cc>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d004      	beq.n	8006720 <HAL_DMA_Start_IT+0x350>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a61      	ldr	r2, [pc, #388]	; (80068a0 <HAL_DMA_Start_IT+0x4d0>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d101      	bne.n	8006724 <HAL_DMA_Start_IT+0x354>
 8006720:	2301      	movs	r3, #1
 8006722:	e000      	b.n	8006726 <HAL_DMA_Start_IT+0x356>
 8006724:	2300      	movs	r3, #0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d01a      	beq.n	8006760 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006746:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d007      	beq.n	8006760 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800675a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800675e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a37      	ldr	r2, [pc, #220]	; (8006844 <HAL_DMA_Start_IT+0x474>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d04a      	beq.n	8006800 <HAL_DMA_Start_IT+0x430>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a36      	ldr	r2, [pc, #216]	; (8006848 <HAL_DMA_Start_IT+0x478>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d045      	beq.n	8006800 <HAL_DMA_Start_IT+0x430>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a34      	ldr	r2, [pc, #208]	; (800684c <HAL_DMA_Start_IT+0x47c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d040      	beq.n	8006800 <HAL_DMA_Start_IT+0x430>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a33      	ldr	r2, [pc, #204]	; (8006850 <HAL_DMA_Start_IT+0x480>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d03b      	beq.n	8006800 <HAL_DMA_Start_IT+0x430>
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a31      	ldr	r2, [pc, #196]	; (8006854 <HAL_DMA_Start_IT+0x484>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d036      	beq.n	8006800 <HAL_DMA_Start_IT+0x430>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a30      	ldr	r2, [pc, #192]	; (8006858 <HAL_DMA_Start_IT+0x488>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d031      	beq.n	8006800 <HAL_DMA_Start_IT+0x430>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a2e      	ldr	r2, [pc, #184]	; (800685c <HAL_DMA_Start_IT+0x48c>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d02c      	beq.n	8006800 <HAL_DMA_Start_IT+0x430>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a2d      	ldr	r2, [pc, #180]	; (8006860 <HAL_DMA_Start_IT+0x490>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d027      	beq.n	8006800 <HAL_DMA_Start_IT+0x430>
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a2b      	ldr	r2, [pc, #172]	; (8006864 <HAL_DMA_Start_IT+0x494>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d022      	beq.n	8006800 <HAL_DMA_Start_IT+0x430>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a2a      	ldr	r2, [pc, #168]	; (8006868 <HAL_DMA_Start_IT+0x498>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d01d      	beq.n	8006800 <HAL_DMA_Start_IT+0x430>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a28      	ldr	r2, [pc, #160]	; (800686c <HAL_DMA_Start_IT+0x49c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d018      	beq.n	8006800 <HAL_DMA_Start_IT+0x430>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a27      	ldr	r2, [pc, #156]	; (8006870 <HAL_DMA_Start_IT+0x4a0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d013      	beq.n	8006800 <HAL_DMA_Start_IT+0x430>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a25      	ldr	r2, [pc, #148]	; (8006874 <HAL_DMA_Start_IT+0x4a4>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d00e      	beq.n	8006800 <HAL_DMA_Start_IT+0x430>
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a24      	ldr	r2, [pc, #144]	; (8006878 <HAL_DMA_Start_IT+0x4a8>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d009      	beq.n	8006800 <HAL_DMA_Start_IT+0x430>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a22      	ldr	r2, [pc, #136]	; (800687c <HAL_DMA_Start_IT+0x4ac>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d004      	beq.n	8006800 <HAL_DMA_Start_IT+0x430>
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a21      	ldr	r2, [pc, #132]	; (8006880 <HAL_DMA_Start_IT+0x4b0>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d108      	bne.n	8006812 <HAL_DMA_Start_IT+0x442>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0201 	orr.w	r2, r2, #1
 800680e:	601a      	str	r2, [r3, #0]
 8006810:	e012      	b.n	8006838 <HAL_DMA_Start_IT+0x468>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0201 	orr.w	r2, r2, #1
 8006820:	601a      	str	r2, [r3, #0]
 8006822:	e009      	b.n	8006838 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800682a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006838:	7dfb      	ldrb	r3, [r7, #23]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	40020010 	.word	0x40020010
 8006848:	40020028 	.word	0x40020028
 800684c:	40020040 	.word	0x40020040
 8006850:	40020058 	.word	0x40020058
 8006854:	40020070 	.word	0x40020070
 8006858:	40020088 	.word	0x40020088
 800685c:	400200a0 	.word	0x400200a0
 8006860:	400200b8 	.word	0x400200b8
 8006864:	40020410 	.word	0x40020410
 8006868:	40020428 	.word	0x40020428
 800686c:	40020440 	.word	0x40020440
 8006870:	40020458 	.word	0x40020458
 8006874:	40020470 	.word	0x40020470
 8006878:	40020488 	.word	0x40020488
 800687c:	400204a0 	.word	0x400204a0
 8006880:	400204b8 	.word	0x400204b8
 8006884:	58025408 	.word	0x58025408
 8006888:	5802541c 	.word	0x5802541c
 800688c:	58025430 	.word	0x58025430
 8006890:	58025444 	.word	0x58025444
 8006894:	58025458 	.word	0x58025458
 8006898:	5802546c 	.word	0x5802546c
 800689c:	58025480 	.word	0x58025480
 80068a0:	58025494 	.word	0x58025494

080068a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80068ac:	f7fe ff02 	bl	80056b4 <HAL_GetTick>
 80068b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e2dc      	b.n	8006e76 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d008      	beq.n	80068da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2280      	movs	r2, #128	; 0x80
 80068cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e2cd      	b.n	8006e76 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a76      	ldr	r2, [pc, #472]	; (8006ab8 <HAL_DMA_Abort+0x214>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d04a      	beq.n	800697a <HAL_DMA_Abort+0xd6>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a74      	ldr	r2, [pc, #464]	; (8006abc <HAL_DMA_Abort+0x218>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d045      	beq.n	800697a <HAL_DMA_Abort+0xd6>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a73      	ldr	r2, [pc, #460]	; (8006ac0 <HAL_DMA_Abort+0x21c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d040      	beq.n	800697a <HAL_DMA_Abort+0xd6>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a71      	ldr	r2, [pc, #452]	; (8006ac4 <HAL_DMA_Abort+0x220>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d03b      	beq.n	800697a <HAL_DMA_Abort+0xd6>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a70      	ldr	r2, [pc, #448]	; (8006ac8 <HAL_DMA_Abort+0x224>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d036      	beq.n	800697a <HAL_DMA_Abort+0xd6>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a6e      	ldr	r2, [pc, #440]	; (8006acc <HAL_DMA_Abort+0x228>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d031      	beq.n	800697a <HAL_DMA_Abort+0xd6>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a6d      	ldr	r2, [pc, #436]	; (8006ad0 <HAL_DMA_Abort+0x22c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d02c      	beq.n	800697a <HAL_DMA_Abort+0xd6>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a6b      	ldr	r2, [pc, #428]	; (8006ad4 <HAL_DMA_Abort+0x230>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d027      	beq.n	800697a <HAL_DMA_Abort+0xd6>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a6a      	ldr	r2, [pc, #424]	; (8006ad8 <HAL_DMA_Abort+0x234>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d022      	beq.n	800697a <HAL_DMA_Abort+0xd6>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a68      	ldr	r2, [pc, #416]	; (8006adc <HAL_DMA_Abort+0x238>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d01d      	beq.n	800697a <HAL_DMA_Abort+0xd6>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a67      	ldr	r2, [pc, #412]	; (8006ae0 <HAL_DMA_Abort+0x23c>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d018      	beq.n	800697a <HAL_DMA_Abort+0xd6>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a65      	ldr	r2, [pc, #404]	; (8006ae4 <HAL_DMA_Abort+0x240>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d013      	beq.n	800697a <HAL_DMA_Abort+0xd6>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a64      	ldr	r2, [pc, #400]	; (8006ae8 <HAL_DMA_Abort+0x244>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d00e      	beq.n	800697a <HAL_DMA_Abort+0xd6>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a62      	ldr	r2, [pc, #392]	; (8006aec <HAL_DMA_Abort+0x248>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d009      	beq.n	800697a <HAL_DMA_Abort+0xd6>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a61      	ldr	r2, [pc, #388]	; (8006af0 <HAL_DMA_Abort+0x24c>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d004      	beq.n	800697a <HAL_DMA_Abort+0xd6>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a5f      	ldr	r2, [pc, #380]	; (8006af4 <HAL_DMA_Abort+0x250>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d101      	bne.n	800697e <HAL_DMA_Abort+0xda>
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <HAL_DMA_Abort+0xdc>
 800697e:	2300      	movs	r3, #0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d013      	beq.n	80069ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 021e 	bic.w	r2, r2, #30
 8006992:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	695a      	ldr	r2, [r3, #20]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	e00a      	b.n	80069c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 020e 	bic.w	r2, r2, #14
 80069ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a3c      	ldr	r2, [pc, #240]	; (8006ab8 <HAL_DMA_Abort+0x214>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d072      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a3a      	ldr	r2, [pc, #232]	; (8006abc <HAL_DMA_Abort+0x218>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d06d      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a39      	ldr	r2, [pc, #228]	; (8006ac0 <HAL_DMA_Abort+0x21c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d068      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a37      	ldr	r2, [pc, #220]	; (8006ac4 <HAL_DMA_Abort+0x220>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d063      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a36      	ldr	r2, [pc, #216]	; (8006ac8 <HAL_DMA_Abort+0x224>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d05e      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a34      	ldr	r2, [pc, #208]	; (8006acc <HAL_DMA_Abort+0x228>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d059      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4a33      	ldr	r2, [pc, #204]	; (8006ad0 <HAL_DMA_Abort+0x22c>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d054      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a31      	ldr	r2, [pc, #196]	; (8006ad4 <HAL_DMA_Abort+0x230>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d04f      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a30      	ldr	r2, [pc, #192]	; (8006ad8 <HAL_DMA_Abort+0x234>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d04a      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a2e      	ldr	r2, [pc, #184]	; (8006adc <HAL_DMA_Abort+0x238>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d045      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a2d      	ldr	r2, [pc, #180]	; (8006ae0 <HAL_DMA_Abort+0x23c>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d040      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a2b      	ldr	r2, [pc, #172]	; (8006ae4 <HAL_DMA_Abort+0x240>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d03b      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a2a      	ldr	r2, [pc, #168]	; (8006ae8 <HAL_DMA_Abort+0x244>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d036      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a28      	ldr	r2, [pc, #160]	; (8006aec <HAL_DMA_Abort+0x248>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d031      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a27      	ldr	r2, [pc, #156]	; (8006af0 <HAL_DMA_Abort+0x24c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d02c      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a25      	ldr	r2, [pc, #148]	; (8006af4 <HAL_DMA_Abort+0x250>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d027      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a24      	ldr	r2, [pc, #144]	; (8006af8 <HAL_DMA_Abort+0x254>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d022      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a22      	ldr	r2, [pc, #136]	; (8006afc <HAL_DMA_Abort+0x258>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d01d      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a21      	ldr	r2, [pc, #132]	; (8006b00 <HAL_DMA_Abort+0x25c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d018      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1f      	ldr	r2, [pc, #124]	; (8006b04 <HAL_DMA_Abort+0x260>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d013      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1e      	ldr	r2, [pc, #120]	; (8006b08 <HAL_DMA_Abort+0x264>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00e      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a1c      	ldr	r2, [pc, #112]	; (8006b0c <HAL_DMA_Abort+0x268>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d009      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a1b      	ldr	r2, [pc, #108]	; (8006b10 <HAL_DMA_Abort+0x26c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d004      	beq.n	8006ab2 <HAL_DMA_Abort+0x20e>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a19      	ldr	r2, [pc, #100]	; (8006b14 <HAL_DMA_Abort+0x270>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d132      	bne.n	8006b18 <HAL_DMA_Abort+0x274>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e031      	b.n	8006b1a <HAL_DMA_Abort+0x276>
 8006ab6:	bf00      	nop
 8006ab8:	40020010 	.word	0x40020010
 8006abc:	40020028 	.word	0x40020028
 8006ac0:	40020040 	.word	0x40020040
 8006ac4:	40020058 	.word	0x40020058
 8006ac8:	40020070 	.word	0x40020070
 8006acc:	40020088 	.word	0x40020088
 8006ad0:	400200a0 	.word	0x400200a0
 8006ad4:	400200b8 	.word	0x400200b8
 8006ad8:	40020410 	.word	0x40020410
 8006adc:	40020428 	.word	0x40020428
 8006ae0:	40020440 	.word	0x40020440
 8006ae4:	40020458 	.word	0x40020458
 8006ae8:	40020470 	.word	0x40020470
 8006aec:	40020488 	.word	0x40020488
 8006af0:	400204a0 	.word	0x400204a0
 8006af4:	400204b8 	.word	0x400204b8
 8006af8:	58025408 	.word	0x58025408
 8006afc:	5802541c 	.word	0x5802541c
 8006b00:	58025430 	.word	0x58025430
 8006b04:	58025444 	.word	0x58025444
 8006b08:	58025458 	.word	0x58025458
 8006b0c:	5802546c 	.word	0x5802546c
 8006b10:	58025480 	.word	0x58025480
 8006b14:	58025494 	.word	0x58025494
 8006b18:	2300      	movs	r3, #0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d007      	beq.n	8006b2e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a6d      	ldr	r2, [pc, #436]	; (8006ce8 <HAL_DMA_Abort+0x444>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d04a      	beq.n	8006bce <HAL_DMA_Abort+0x32a>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a6b      	ldr	r2, [pc, #428]	; (8006cec <HAL_DMA_Abort+0x448>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d045      	beq.n	8006bce <HAL_DMA_Abort+0x32a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a6a      	ldr	r2, [pc, #424]	; (8006cf0 <HAL_DMA_Abort+0x44c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d040      	beq.n	8006bce <HAL_DMA_Abort+0x32a>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a68      	ldr	r2, [pc, #416]	; (8006cf4 <HAL_DMA_Abort+0x450>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d03b      	beq.n	8006bce <HAL_DMA_Abort+0x32a>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a67      	ldr	r2, [pc, #412]	; (8006cf8 <HAL_DMA_Abort+0x454>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d036      	beq.n	8006bce <HAL_DMA_Abort+0x32a>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a65      	ldr	r2, [pc, #404]	; (8006cfc <HAL_DMA_Abort+0x458>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d031      	beq.n	8006bce <HAL_DMA_Abort+0x32a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a64      	ldr	r2, [pc, #400]	; (8006d00 <HAL_DMA_Abort+0x45c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d02c      	beq.n	8006bce <HAL_DMA_Abort+0x32a>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a62      	ldr	r2, [pc, #392]	; (8006d04 <HAL_DMA_Abort+0x460>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d027      	beq.n	8006bce <HAL_DMA_Abort+0x32a>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a61      	ldr	r2, [pc, #388]	; (8006d08 <HAL_DMA_Abort+0x464>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d022      	beq.n	8006bce <HAL_DMA_Abort+0x32a>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4a5f      	ldr	r2, [pc, #380]	; (8006d0c <HAL_DMA_Abort+0x468>)
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d01d      	beq.n	8006bce <HAL_DMA_Abort+0x32a>
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a5e      	ldr	r2, [pc, #376]	; (8006d10 <HAL_DMA_Abort+0x46c>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d018      	beq.n	8006bce <HAL_DMA_Abort+0x32a>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a5c      	ldr	r2, [pc, #368]	; (8006d14 <HAL_DMA_Abort+0x470>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d013      	beq.n	8006bce <HAL_DMA_Abort+0x32a>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a5b      	ldr	r2, [pc, #364]	; (8006d18 <HAL_DMA_Abort+0x474>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d00e      	beq.n	8006bce <HAL_DMA_Abort+0x32a>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a59      	ldr	r2, [pc, #356]	; (8006d1c <HAL_DMA_Abort+0x478>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d009      	beq.n	8006bce <HAL_DMA_Abort+0x32a>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a58      	ldr	r2, [pc, #352]	; (8006d20 <HAL_DMA_Abort+0x47c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d004      	beq.n	8006bce <HAL_DMA_Abort+0x32a>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a56      	ldr	r2, [pc, #344]	; (8006d24 <HAL_DMA_Abort+0x480>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d108      	bne.n	8006be0 <HAL_DMA_Abort+0x33c>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0201 	bic.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	e007      	b.n	8006bf0 <HAL_DMA_Abort+0x34c>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0201 	bic.w	r2, r2, #1
 8006bee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006bf0:	e013      	b.n	8006c1a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006bf2:	f7fe fd5f 	bl	80056b4 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b05      	cmp	r3, #5
 8006bfe:	d90c      	bls.n	8006c1a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2220      	movs	r2, #32
 8006c04:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2203      	movs	r2, #3
 8006c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e12d      	b.n	8006e76 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 0301 	and.w	r3, r3, #1
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1e5      	bne.n	8006bf2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a2f      	ldr	r2, [pc, #188]	; (8006ce8 <HAL_DMA_Abort+0x444>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d04a      	beq.n	8006cc6 <HAL_DMA_Abort+0x422>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a2d      	ldr	r2, [pc, #180]	; (8006cec <HAL_DMA_Abort+0x448>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d045      	beq.n	8006cc6 <HAL_DMA_Abort+0x422>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a2c      	ldr	r2, [pc, #176]	; (8006cf0 <HAL_DMA_Abort+0x44c>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d040      	beq.n	8006cc6 <HAL_DMA_Abort+0x422>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a2a      	ldr	r2, [pc, #168]	; (8006cf4 <HAL_DMA_Abort+0x450>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d03b      	beq.n	8006cc6 <HAL_DMA_Abort+0x422>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a29      	ldr	r2, [pc, #164]	; (8006cf8 <HAL_DMA_Abort+0x454>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d036      	beq.n	8006cc6 <HAL_DMA_Abort+0x422>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a27      	ldr	r2, [pc, #156]	; (8006cfc <HAL_DMA_Abort+0x458>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d031      	beq.n	8006cc6 <HAL_DMA_Abort+0x422>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a26      	ldr	r2, [pc, #152]	; (8006d00 <HAL_DMA_Abort+0x45c>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d02c      	beq.n	8006cc6 <HAL_DMA_Abort+0x422>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a24      	ldr	r2, [pc, #144]	; (8006d04 <HAL_DMA_Abort+0x460>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d027      	beq.n	8006cc6 <HAL_DMA_Abort+0x422>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a23      	ldr	r2, [pc, #140]	; (8006d08 <HAL_DMA_Abort+0x464>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d022      	beq.n	8006cc6 <HAL_DMA_Abort+0x422>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a21      	ldr	r2, [pc, #132]	; (8006d0c <HAL_DMA_Abort+0x468>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d01d      	beq.n	8006cc6 <HAL_DMA_Abort+0x422>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a20      	ldr	r2, [pc, #128]	; (8006d10 <HAL_DMA_Abort+0x46c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d018      	beq.n	8006cc6 <HAL_DMA_Abort+0x422>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a1e      	ldr	r2, [pc, #120]	; (8006d14 <HAL_DMA_Abort+0x470>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d013      	beq.n	8006cc6 <HAL_DMA_Abort+0x422>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a1d      	ldr	r2, [pc, #116]	; (8006d18 <HAL_DMA_Abort+0x474>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d00e      	beq.n	8006cc6 <HAL_DMA_Abort+0x422>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a1b      	ldr	r2, [pc, #108]	; (8006d1c <HAL_DMA_Abort+0x478>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d009      	beq.n	8006cc6 <HAL_DMA_Abort+0x422>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a1a      	ldr	r2, [pc, #104]	; (8006d20 <HAL_DMA_Abort+0x47c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d004      	beq.n	8006cc6 <HAL_DMA_Abort+0x422>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a18      	ldr	r2, [pc, #96]	; (8006d24 <HAL_DMA_Abort+0x480>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d101      	bne.n	8006cca <HAL_DMA_Abort+0x426>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e000      	b.n	8006ccc <HAL_DMA_Abort+0x428>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d02b      	beq.n	8006d28 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cda:	f003 031f 	and.w	r3, r3, #31
 8006cde:	223f      	movs	r2, #63	; 0x3f
 8006ce0:	409a      	lsls	r2, r3
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	609a      	str	r2, [r3, #8]
 8006ce6:	e02a      	b.n	8006d3e <HAL_DMA_Abort+0x49a>
 8006ce8:	40020010 	.word	0x40020010
 8006cec:	40020028 	.word	0x40020028
 8006cf0:	40020040 	.word	0x40020040
 8006cf4:	40020058 	.word	0x40020058
 8006cf8:	40020070 	.word	0x40020070
 8006cfc:	40020088 	.word	0x40020088
 8006d00:	400200a0 	.word	0x400200a0
 8006d04:	400200b8 	.word	0x400200b8
 8006d08:	40020410 	.word	0x40020410
 8006d0c:	40020428 	.word	0x40020428
 8006d10:	40020440 	.word	0x40020440
 8006d14:	40020458 	.word	0x40020458
 8006d18:	40020470 	.word	0x40020470
 8006d1c:	40020488 	.word	0x40020488
 8006d20:	400204a0 	.word	0x400204a0
 8006d24:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d32:	f003 031f 	and.w	r3, r3, #31
 8006d36:	2201      	movs	r2, #1
 8006d38:	409a      	lsls	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a4f      	ldr	r2, [pc, #316]	; (8006e80 <HAL_DMA_Abort+0x5dc>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d072      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a4d      	ldr	r2, [pc, #308]	; (8006e84 <HAL_DMA_Abort+0x5e0>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d06d      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a4c      	ldr	r2, [pc, #304]	; (8006e88 <HAL_DMA_Abort+0x5e4>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d068      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a4a      	ldr	r2, [pc, #296]	; (8006e8c <HAL_DMA_Abort+0x5e8>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d063      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a49      	ldr	r2, [pc, #292]	; (8006e90 <HAL_DMA_Abort+0x5ec>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d05e      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a47      	ldr	r2, [pc, #284]	; (8006e94 <HAL_DMA_Abort+0x5f0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d059      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a46      	ldr	r2, [pc, #280]	; (8006e98 <HAL_DMA_Abort+0x5f4>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d054      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a44      	ldr	r2, [pc, #272]	; (8006e9c <HAL_DMA_Abort+0x5f8>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d04f      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a43      	ldr	r2, [pc, #268]	; (8006ea0 <HAL_DMA_Abort+0x5fc>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d04a      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a41      	ldr	r2, [pc, #260]	; (8006ea4 <HAL_DMA_Abort+0x600>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d045      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a40      	ldr	r2, [pc, #256]	; (8006ea8 <HAL_DMA_Abort+0x604>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d040      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a3e      	ldr	r2, [pc, #248]	; (8006eac <HAL_DMA_Abort+0x608>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d03b      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a3d      	ldr	r2, [pc, #244]	; (8006eb0 <HAL_DMA_Abort+0x60c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d036      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a3b      	ldr	r2, [pc, #236]	; (8006eb4 <HAL_DMA_Abort+0x610>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d031      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a3a      	ldr	r2, [pc, #232]	; (8006eb8 <HAL_DMA_Abort+0x614>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d02c      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a38      	ldr	r2, [pc, #224]	; (8006ebc <HAL_DMA_Abort+0x618>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d027      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a37      	ldr	r2, [pc, #220]	; (8006ec0 <HAL_DMA_Abort+0x61c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d022      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a35      	ldr	r2, [pc, #212]	; (8006ec4 <HAL_DMA_Abort+0x620>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d01d      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a34      	ldr	r2, [pc, #208]	; (8006ec8 <HAL_DMA_Abort+0x624>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d018      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a32      	ldr	r2, [pc, #200]	; (8006ecc <HAL_DMA_Abort+0x628>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d013      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a31      	ldr	r2, [pc, #196]	; (8006ed0 <HAL_DMA_Abort+0x62c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d00e      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a2f      	ldr	r2, [pc, #188]	; (8006ed4 <HAL_DMA_Abort+0x630>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d009      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a2e      	ldr	r2, [pc, #184]	; (8006ed8 <HAL_DMA_Abort+0x634>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d004      	beq.n	8006e2e <HAL_DMA_Abort+0x58a>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a2c      	ldr	r2, [pc, #176]	; (8006edc <HAL_DMA_Abort+0x638>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d101      	bne.n	8006e32 <HAL_DMA_Abort+0x58e>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <HAL_DMA_Abort+0x590>
 8006e32:	2300      	movs	r3, #0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d015      	beq.n	8006e64 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e40:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00c      	beq.n	8006e64 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e58:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e62:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3718      	adds	r7, #24
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	40020010 	.word	0x40020010
 8006e84:	40020028 	.word	0x40020028
 8006e88:	40020040 	.word	0x40020040
 8006e8c:	40020058 	.word	0x40020058
 8006e90:	40020070 	.word	0x40020070
 8006e94:	40020088 	.word	0x40020088
 8006e98:	400200a0 	.word	0x400200a0
 8006e9c:	400200b8 	.word	0x400200b8
 8006ea0:	40020410 	.word	0x40020410
 8006ea4:	40020428 	.word	0x40020428
 8006ea8:	40020440 	.word	0x40020440
 8006eac:	40020458 	.word	0x40020458
 8006eb0:	40020470 	.word	0x40020470
 8006eb4:	40020488 	.word	0x40020488
 8006eb8:	400204a0 	.word	0x400204a0
 8006ebc:	400204b8 	.word	0x400204b8
 8006ec0:	58025408 	.word	0x58025408
 8006ec4:	5802541c 	.word	0x5802541c
 8006ec8:	58025430 	.word	0x58025430
 8006ecc:	58025444 	.word	0x58025444
 8006ed0:	58025458 	.word	0x58025458
 8006ed4:	5802546c 	.word	0x5802546c
 8006ed8:	58025480 	.word	0x58025480
 8006edc:	58025494 	.word	0x58025494

08006ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b084      	sub	sp, #16
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e205      	b.n	80072fe <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d004      	beq.n	8006f08 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2280      	movs	r2, #128	; 0x80
 8006f02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e1fa      	b.n	80072fe <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a8c      	ldr	r2, [pc, #560]	; (8007140 <HAL_DMA_Abort_IT+0x260>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d04a      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0xc8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a8b      	ldr	r2, [pc, #556]	; (8007144 <HAL_DMA_Abort_IT+0x264>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d045      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0xc8>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a89      	ldr	r2, [pc, #548]	; (8007148 <HAL_DMA_Abort_IT+0x268>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d040      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0xc8>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a88      	ldr	r2, [pc, #544]	; (800714c <HAL_DMA_Abort_IT+0x26c>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d03b      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0xc8>
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a86      	ldr	r2, [pc, #536]	; (8007150 <HAL_DMA_Abort_IT+0x270>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d036      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0xc8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a85      	ldr	r2, [pc, #532]	; (8007154 <HAL_DMA_Abort_IT+0x274>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d031      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0xc8>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a83      	ldr	r2, [pc, #524]	; (8007158 <HAL_DMA_Abort_IT+0x278>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d02c      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0xc8>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a82      	ldr	r2, [pc, #520]	; (800715c <HAL_DMA_Abort_IT+0x27c>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d027      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0xc8>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a80      	ldr	r2, [pc, #512]	; (8007160 <HAL_DMA_Abort_IT+0x280>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d022      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0xc8>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a7f      	ldr	r2, [pc, #508]	; (8007164 <HAL_DMA_Abort_IT+0x284>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d01d      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0xc8>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a7d      	ldr	r2, [pc, #500]	; (8007168 <HAL_DMA_Abort_IT+0x288>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d018      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0xc8>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a7c      	ldr	r2, [pc, #496]	; (800716c <HAL_DMA_Abort_IT+0x28c>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d013      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0xc8>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a7a      	ldr	r2, [pc, #488]	; (8007170 <HAL_DMA_Abort_IT+0x290>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d00e      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0xc8>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a79      	ldr	r2, [pc, #484]	; (8007174 <HAL_DMA_Abort_IT+0x294>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d009      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0xc8>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a77      	ldr	r2, [pc, #476]	; (8007178 <HAL_DMA_Abort_IT+0x298>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d004      	beq.n	8006fa8 <HAL_DMA_Abort_IT+0xc8>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a76      	ldr	r2, [pc, #472]	; (800717c <HAL_DMA_Abort_IT+0x29c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d101      	bne.n	8006fac <HAL_DMA_Abort_IT+0xcc>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e000      	b.n	8006fae <HAL_DMA_Abort_IT+0xce>
 8006fac:	2300      	movs	r3, #0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d065      	beq.n	800707e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2204      	movs	r2, #4
 8006fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a60      	ldr	r2, [pc, #384]	; (8007140 <HAL_DMA_Abort_IT+0x260>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d04a      	beq.n	800705a <HAL_DMA_Abort_IT+0x17a>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a5e      	ldr	r2, [pc, #376]	; (8007144 <HAL_DMA_Abort_IT+0x264>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d045      	beq.n	800705a <HAL_DMA_Abort_IT+0x17a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a5d      	ldr	r2, [pc, #372]	; (8007148 <HAL_DMA_Abort_IT+0x268>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d040      	beq.n	800705a <HAL_DMA_Abort_IT+0x17a>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a5b      	ldr	r2, [pc, #364]	; (800714c <HAL_DMA_Abort_IT+0x26c>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d03b      	beq.n	800705a <HAL_DMA_Abort_IT+0x17a>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a5a      	ldr	r2, [pc, #360]	; (8007150 <HAL_DMA_Abort_IT+0x270>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d036      	beq.n	800705a <HAL_DMA_Abort_IT+0x17a>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a58      	ldr	r2, [pc, #352]	; (8007154 <HAL_DMA_Abort_IT+0x274>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d031      	beq.n	800705a <HAL_DMA_Abort_IT+0x17a>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a57      	ldr	r2, [pc, #348]	; (8007158 <HAL_DMA_Abort_IT+0x278>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d02c      	beq.n	800705a <HAL_DMA_Abort_IT+0x17a>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a55      	ldr	r2, [pc, #340]	; (800715c <HAL_DMA_Abort_IT+0x27c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d027      	beq.n	800705a <HAL_DMA_Abort_IT+0x17a>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a54      	ldr	r2, [pc, #336]	; (8007160 <HAL_DMA_Abort_IT+0x280>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d022      	beq.n	800705a <HAL_DMA_Abort_IT+0x17a>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a52      	ldr	r2, [pc, #328]	; (8007164 <HAL_DMA_Abort_IT+0x284>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d01d      	beq.n	800705a <HAL_DMA_Abort_IT+0x17a>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a51      	ldr	r2, [pc, #324]	; (8007168 <HAL_DMA_Abort_IT+0x288>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d018      	beq.n	800705a <HAL_DMA_Abort_IT+0x17a>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a4f      	ldr	r2, [pc, #316]	; (800716c <HAL_DMA_Abort_IT+0x28c>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d013      	beq.n	800705a <HAL_DMA_Abort_IT+0x17a>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a4e      	ldr	r2, [pc, #312]	; (8007170 <HAL_DMA_Abort_IT+0x290>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00e      	beq.n	800705a <HAL_DMA_Abort_IT+0x17a>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a4c      	ldr	r2, [pc, #304]	; (8007174 <HAL_DMA_Abort_IT+0x294>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d009      	beq.n	800705a <HAL_DMA_Abort_IT+0x17a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a4b      	ldr	r2, [pc, #300]	; (8007178 <HAL_DMA_Abort_IT+0x298>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d004      	beq.n	800705a <HAL_DMA_Abort_IT+0x17a>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a49      	ldr	r2, [pc, #292]	; (800717c <HAL_DMA_Abort_IT+0x29c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d108      	bne.n	800706c <HAL_DMA_Abort_IT+0x18c>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0201 	bic.w	r2, r2, #1
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e147      	b.n	80072fc <HAL_DMA_Abort_IT+0x41c>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f022 0201 	bic.w	r2, r2, #1
 800707a:	601a      	str	r2, [r3, #0]
 800707c:	e13e      	b.n	80072fc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f022 020e 	bic.w	r2, r2, #14
 800708c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a2b      	ldr	r2, [pc, #172]	; (8007140 <HAL_DMA_Abort_IT+0x260>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d04a      	beq.n	800712e <HAL_DMA_Abort_IT+0x24e>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a29      	ldr	r2, [pc, #164]	; (8007144 <HAL_DMA_Abort_IT+0x264>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d045      	beq.n	800712e <HAL_DMA_Abort_IT+0x24e>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a28      	ldr	r2, [pc, #160]	; (8007148 <HAL_DMA_Abort_IT+0x268>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d040      	beq.n	800712e <HAL_DMA_Abort_IT+0x24e>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a26      	ldr	r2, [pc, #152]	; (800714c <HAL_DMA_Abort_IT+0x26c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d03b      	beq.n	800712e <HAL_DMA_Abort_IT+0x24e>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a25      	ldr	r2, [pc, #148]	; (8007150 <HAL_DMA_Abort_IT+0x270>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d036      	beq.n	800712e <HAL_DMA_Abort_IT+0x24e>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a23      	ldr	r2, [pc, #140]	; (8007154 <HAL_DMA_Abort_IT+0x274>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d031      	beq.n	800712e <HAL_DMA_Abort_IT+0x24e>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a22      	ldr	r2, [pc, #136]	; (8007158 <HAL_DMA_Abort_IT+0x278>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d02c      	beq.n	800712e <HAL_DMA_Abort_IT+0x24e>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a20      	ldr	r2, [pc, #128]	; (800715c <HAL_DMA_Abort_IT+0x27c>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d027      	beq.n	800712e <HAL_DMA_Abort_IT+0x24e>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1f      	ldr	r2, [pc, #124]	; (8007160 <HAL_DMA_Abort_IT+0x280>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d022      	beq.n	800712e <HAL_DMA_Abort_IT+0x24e>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a1d      	ldr	r2, [pc, #116]	; (8007164 <HAL_DMA_Abort_IT+0x284>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d01d      	beq.n	800712e <HAL_DMA_Abort_IT+0x24e>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a1c      	ldr	r2, [pc, #112]	; (8007168 <HAL_DMA_Abort_IT+0x288>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d018      	beq.n	800712e <HAL_DMA_Abort_IT+0x24e>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a1a      	ldr	r2, [pc, #104]	; (800716c <HAL_DMA_Abort_IT+0x28c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d013      	beq.n	800712e <HAL_DMA_Abort_IT+0x24e>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a19      	ldr	r2, [pc, #100]	; (8007170 <HAL_DMA_Abort_IT+0x290>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d00e      	beq.n	800712e <HAL_DMA_Abort_IT+0x24e>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a17      	ldr	r2, [pc, #92]	; (8007174 <HAL_DMA_Abort_IT+0x294>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d009      	beq.n	800712e <HAL_DMA_Abort_IT+0x24e>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a16      	ldr	r2, [pc, #88]	; (8007178 <HAL_DMA_Abort_IT+0x298>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d004      	beq.n	800712e <HAL_DMA_Abort_IT+0x24e>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a14      	ldr	r2, [pc, #80]	; (800717c <HAL_DMA_Abort_IT+0x29c>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d128      	bne.n	8007180 <HAL_DMA_Abort_IT+0x2a0>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0201 	bic.w	r2, r2, #1
 800713c:	601a      	str	r2, [r3, #0]
 800713e:	e027      	b.n	8007190 <HAL_DMA_Abort_IT+0x2b0>
 8007140:	40020010 	.word	0x40020010
 8007144:	40020028 	.word	0x40020028
 8007148:	40020040 	.word	0x40020040
 800714c:	40020058 	.word	0x40020058
 8007150:	40020070 	.word	0x40020070
 8007154:	40020088 	.word	0x40020088
 8007158:	400200a0 	.word	0x400200a0
 800715c:	400200b8 	.word	0x400200b8
 8007160:	40020410 	.word	0x40020410
 8007164:	40020428 	.word	0x40020428
 8007168:	40020440 	.word	0x40020440
 800716c:	40020458 	.word	0x40020458
 8007170:	40020470 	.word	0x40020470
 8007174:	40020488 	.word	0x40020488
 8007178:	400204a0 	.word	0x400204a0
 800717c:	400204b8 	.word	0x400204b8
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0201 	bic.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a5c      	ldr	r2, [pc, #368]	; (8007308 <HAL_DMA_Abort_IT+0x428>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d072      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a5b      	ldr	r2, [pc, #364]	; (800730c <HAL_DMA_Abort_IT+0x42c>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d06d      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a59      	ldr	r2, [pc, #356]	; (8007310 <HAL_DMA_Abort_IT+0x430>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d068      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a58      	ldr	r2, [pc, #352]	; (8007314 <HAL_DMA_Abort_IT+0x434>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d063      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a56      	ldr	r2, [pc, #344]	; (8007318 <HAL_DMA_Abort_IT+0x438>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d05e      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a55      	ldr	r2, [pc, #340]	; (800731c <HAL_DMA_Abort_IT+0x43c>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d059      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a53      	ldr	r2, [pc, #332]	; (8007320 <HAL_DMA_Abort_IT+0x440>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d054      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a52      	ldr	r2, [pc, #328]	; (8007324 <HAL_DMA_Abort_IT+0x444>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d04f      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a50      	ldr	r2, [pc, #320]	; (8007328 <HAL_DMA_Abort_IT+0x448>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d04a      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a4f      	ldr	r2, [pc, #316]	; (800732c <HAL_DMA_Abort_IT+0x44c>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d045      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a4d      	ldr	r2, [pc, #308]	; (8007330 <HAL_DMA_Abort_IT+0x450>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d040      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a4c      	ldr	r2, [pc, #304]	; (8007334 <HAL_DMA_Abort_IT+0x454>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d03b      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a4a      	ldr	r2, [pc, #296]	; (8007338 <HAL_DMA_Abort_IT+0x458>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d036      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a49      	ldr	r2, [pc, #292]	; (800733c <HAL_DMA_Abort_IT+0x45c>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d031      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a47      	ldr	r2, [pc, #284]	; (8007340 <HAL_DMA_Abort_IT+0x460>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d02c      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a46      	ldr	r2, [pc, #280]	; (8007344 <HAL_DMA_Abort_IT+0x464>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d027      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a44      	ldr	r2, [pc, #272]	; (8007348 <HAL_DMA_Abort_IT+0x468>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d022      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a43      	ldr	r2, [pc, #268]	; (800734c <HAL_DMA_Abort_IT+0x46c>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d01d      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a41      	ldr	r2, [pc, #260]	; (8007350 <HAL_DMA_Abort_IT+0x470>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d018      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a40      	ldr	r2, [pc, #256]	; (8007354 <HAL_DMA_Abort_IT+0x474>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d013      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a3e      	ldr	r2, [pc, #248]	; (8007358 <HAL_DMA_Abort_IT+0x478>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00e      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a3d      	ldr	r2, [pc, #244]	; (800735c <HAL_DMA_Abort_IT+0x47c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d009      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a3b      	ldr	r2, [pc, #236]	; (8007360 <HAL_DMA_Abort_IT+0x480>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d004      	beq.n	8007280 <HAL_DMA_Abort_IT+0x3a0>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a3a      	ldr	r2, [pc, #232]	; (8007364 <HAL_DMA_Abort_IT+0x484>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d101      	bne.n	8007284 <HAL_DMA_Abort_IT+0x3a4>
 8007280:	2301      	movs	r3, #1
 8007282:	e000      	b.n	8007286 <HAL_DMA_Abort_IT+0x3a6>
 8007284:	2300      	movs	r3, #0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d028      	beq.n	80072dc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007298:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a4:	f003 031f 	and.w	r3, r3, #31
 80072a8:	2201      	movs	r2, #1
 80072aa:	409a      	lsls	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072b8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00c      	beq.n	80072dc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072d0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072da:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	40020010 	.word	0x40020010
 800730c:	40020028 	.word	0x40020028
 8007310:	40020040 	.word	0x40020040
 8007314:	40020058 	.word	0x40020058
 8007318:	40020070 	.word	0x40020070
 800731c:	40020088 	.word	0x40020088
 8007320:	400200a0 	.word	0x400200a0
 8007324:	400200b8 	.word	0x400200b8
 8007328:	40020410 	.word	0x40020410
 800732c:	40020428 	.word	0x40020428
 8007330:	40020440 	.word	0x40020440
 8007334:	40020458 	.word	0x40020458
 8007338:	40020470 	.word	0x40020470
 800733c:	40020488 	.word	0x40020488
 8007340:	400204a0 	.word	0x400204a0
 8007344:	400204b8 	.word	0x400204b8
 8007348:	58025408 	.word	0x58025408
 800734c:	5802541c 	.word	0x5802541c
 8007350:	58025430 	.word	0x58025430
 8007354:	58025444 	.word	0x58025444
 8007358:	58025458 	.word	0x58025458
 800735c:	5802546c 	.word	0x5802546c
 8007360:	58025480 	.word	0x58025480
 8007364:	58025494 	.word	0x58025494

08007368 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	; 0x28
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007374:	4b67      	ldr	r3, [pc, #412]	; (8007514 <HAL_DMA_IRQHandler+0x1ac>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a67      	ldr	r2, [pc, #412]	; (8007518 <HAL_DMA_IRQHandler+0x1b0>)
 800737a:	fba2 2303 	umull	r2, r3, r2, r3
 800737e:	0a9b      	lsrs	r3, r3, #10
 8007380:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007386:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800738c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a5f      	ldr	r2, [pc, #380]	; (800751c <HAL_DMA_IRQHandler+0x1b4>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d04a      	beq.n	800743a <HAL_DMA_IRQHandler+0xd2>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a5d      	ldr	r2, [pc, #372]	; (8007520 <HAL_DMA_IRQHandler+0x1b8>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d045      	beq.n	800743a <HAL_DMA_IRQHandler+0xd2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a5c      	ldr	r2, [pc, #368]	; (8007524 <HAL_DMA_IRQHandler+0x1bc>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d040      	beq.n	800743a <HAL_DMA_IRQHandler+0xd2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a5a      	ldr	r2, [pc, #360]	; (8007528 <HAL_DMA_IRQHandler+0x1c0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d03b      	beq.n	800743a <HAL_DMA_IRQHandler+0xd2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a59      	ldr	r2, [pc, #356]	; (800752c <HAL_DMA_IRQHandler+0x1c4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d036      	beq.n	800743a <HAL_DMA_IRQHandler+0xd2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a57      	ldr	r2, [pc, #348]	; (8007530 <HAL_DMA_IRQHandler+0x1c8>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d031      	beq.n	800743a <HAL_DMA_IRQHandler+0xd2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a56      	ldr	r2, [pc, #344]	; (8007534 <HAL_DMA_IRQHandler+0x1cc>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d02c      	beq.n	800743a <HAL_DMA_IRQHandler+0xd2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a54      	ldr	r2, [pc, #336]	; (8007538 <HAL_DMA_IRQHandler+0x1d0>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d027      	beq.n	800743a <HAL_DMA_IRQHandler+0xd2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a53      	ldr	r2, [pc, #332]	; (800753c <HAL_DMA_IRQHandler+0x1d4>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d022      	beq.n	800743a <HAL_DMA_IRQHandler+0xd2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a51      	ldr	r2, [pc, #324]	; (8007540 <HAL_DMA_IRQHandler+0x1d8>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d01d      	beq.n	800743a <HAL_DMA_IRQHandler+0xd2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a50      	ldr	r2, [pc, #320]	; (8007544 <HAL_DMA_IRQHandler+0x1dc>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d018      	beq.n	800743a <HAL_DMA_IRQHandler+0xd2>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a4e      	ldr	r2, [pc, #312]	; (8007548 <HAL_DMA_IRQHandler+0x1e0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d013      	beq.n	800743a <HAL_DMA_IRQHandler+0xd2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a4d      	ldr	r2, [pc, #308]	; (800754c <HAL_DMA_IRQHandler+0x1e4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00e      	beq.n	800743a <HAL_DMA_IRQHandler+0xd2>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a4b      	ldr	r2, [pc, #300]	; (8007550 <HAL_DMA_IRQHandler+0x1e8>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d009      	beq.n	800743a <HAL_DMA_IRQHandler+0xd2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a4a      	ldr	r2, [pc, #296]	; (8007554 <HAL_DMA_IRQHandler+0x1ec>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d004      	beq.n	800743a <HAL_DMA_IRQHandler+0xd2>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a48      	ldr	r2, [pc, #288]	; (8007558 <HAL_DMA_IRQHandler+0x1f0>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d101      	bne.n	800743e <HAL_DMA_IRQHandler+0xd6>
 800743a:	2301      	movs	r3, #1
 800743c:	e000      	b.n	8007440 <HAL_DMA_IRQHandler+0xd8>
 800743e:	2300      	movs	r3, #0
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 842b 	beq.w	8007c9c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800744a:	f003 031f 	and.w	r3, r3, #31
 800744e:	2208      	movs	r2, #8
 8007450:	409a      	lsls	r2, r3
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	4013      	ands	r3, r2
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 80a2 	beq.w	80075a0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a2e      	ldr	r2, [pc, #184]	; (800751c <HAL_DMA_IRQHandler+0x1b4>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d04a      	beq.n	80074fc <HAL_DMA_IRQHandler+0x194>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a2d      	ldr	r2, [pc, #180]	; (8007520 <HAL_DMA_IRQHandler+0x1b8>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d045      	beq.n	80074fc <HAL_DMA_IRQHandler+0x194>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a2b      	ldr	r2, [pc, #172]	; (8007524 <HAL_DMA_IRQHandler+0x1bc>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d040      	beq.n	80074fc <HAL_DMA_IRQHandler+0x194>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a2a      	ldr	r2, [pc, #168]	; (8007528 <HAL_DMA_IRQHandler+0x1c0>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d03b      	beq.n	80074fc <HAL_DMA_IRQHandler+0x194>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a28      	ldr	r2, [pc, #160]	; (800752c <HAL_DMA_IRQHandler+0x1c4>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d036      	beq.n	80074fc <HAL_DMA_IRQHandler+0x194>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a27      	ldr	r2, [pc, #156]	; (8007530 <HAL_DMA_IRQHandler+0x1c8>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d031      	beq.n	80074fc <HAL_DMA_IRQHandler+0x194>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a25      	ldr	r2, [pc, #148]	; (8007534 <HAL_DMA_IRQHandler+0x1cc>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d02c      	beq.n	80074fc <HAL_DMA_IRQHandler+0x194>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a24      	ldr	r2, [pc, #144]	; (8007538 <HAL_DMA_IRQHandler+0x1d0>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d027      	beq.n	80074fc <HAL_DMA_IRQHandler+0x194>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a22      	ldr	r2, [pc, #136]	; (800753c <HAL_DMA_IRQHandler+0x1d4>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d022      	beq.n	80074fc <HAL_DMA_IRQHandler+0x194>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a21      	ldr	r2, [pc, #132]	; (8007540 <HAL_DMA_IRQHandler+0x1d8>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d01d      	beq.n	80074fc <HAL_DMA_IRQHandler+0x194>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a1f      	ldr	r2, [pc, #124]	; (8007544 <HAL_DMA_IRQHandler+0x1dc>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d018      	beq.n	80074fc <HAL_DMA_IRQHandler+0x194>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a1e      	ldr	r2, [pc, #120]	; (8007548 <HAL_DMA_IRQHandler+0x1e0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d013      	beq.n	80074fc <HAL_DMA_IRQHandler+0x194>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a1c      	ldr	r2, [pc, #112]	; (800754c <HAL_DMA_IRQHandler+0x1e4>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d00e      	beq.n	80074fc <HAL_DMA_IRQHandler+0x194>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a1b      	ldr	r2, [pc, #108]	; (8007550 <HAL_DMA_IRQHandler+0x1e8>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d009      	beq.n	80074fc <HAL_DMA_IRQHandler+0x194>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a19      	ldr	r2, [pc, #100]	; (8007554 <HAL_DMA_IRQHandler+0x1ec>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d004      	beq.n	80074fc <HAL_DMA_IRQHandler+0x194>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a18      	ldr	r2, [pc, #96]	; (8007558 <HAL_DMA_IRQHandler+0x1f0>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d12f      	bne.n	800755c <HAL_DMA_IRQHandler+0x1f4>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0304 	and.w	r3, r3, #4
 8007506:	2b00      	cmp	r3, #0
 8007508:	bf14      	ite	ne
 800750a:	2301      	movne	r3, #1
 800750c:	2300      	moveq	r3, #0
 800750e:	b2db      	uxtb	r3, r3
 8007510:	e02e      	b.n	8007570 <HAL_DMA_IRQHandler+0x208>
 8007512:	bf00      	nop
 8007514:	2400003c 	.word	0x2400003c
 8007518:	1b4e81b5 	.word	0x1b4e81b5
 800751c:	40020010 	.word	0x40020010
 8007520:	40020028 	.word	0x40020028
 8007524:	40020040 	.word	0x40020040
 8007528:	40020058 	.word	0x40020058
 800752c:	40020070 	.word	0x40020070
 8007530:	40020088 	.word	0x40020088
 8007534:	400200a0 	.word	0x400200a0
 8007538:	400200b8 	.word	0x400200b8
 800753c:	40020410 	.word	0x40020410
 8007540:	40020428 	.word	0x40020428
 8007544:	40020440 	.word	0x40020440
 8007548:	40020458 	.word	0x40020458
 800754c:	40020470 	.word	0x40020470
 8007550:	40020488 	.word	0x40020488
 8007554:	400204a0 	.word	0x400204a0
 8007558:	400204b8 	.word	0x400204b8
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 0308 	and.w	r3, r3, #8
 8007566:	2b00      	cmp	r3, #0
 8007568:	bf14      	ite	ne
 800756a:	2301      	movne	r3, #1
 800756c:	2300      	moveq	r3, #0
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d015      	beq.n	80075a0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 0204 	bic.w	r2, r2, #4
 8007582:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007588:	f003 031f 	and.w	r3, r3, #31
 800758c:	2208      	movs	r2, #8
 800758e:	409a      	lsls	r2, r3
 8007590:	6a3b      	ldr	r3, [r7, #32]
 8007592:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007598:	f043 0201 	orr.w	r2, r3, #1
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075a4:	f003 031f 	and.w	r3, r3, #31
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	fa22 f303 	lsr.w	r3, r2, r3
 80075ae:	f003 0301 	and.w	r3, r3, #1
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d06e      	beq.n	8007694 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a69      	ldr	r2, [pc, #420]	; (8007760 <HAL_DMA_IRQHandler+0x3f8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d04a      	beq.n	8007656 <HAL_DMA_IRQHandler+0x2ee>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a67      	ldr	r2, [pc, #412]	; (8007764 <HAL_DMA_IRQHandler+0x3fc>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d045      	beq.n	8007656 <HAL_DMA_IRQHandler+0x2ee>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a66      	ldr	r2, [pc, #408]	; (8007768 <HAL_DMA_IRQHandler+0x400>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d040      	beq.n	8007656 <HAL_DMA_IRQHandler+0x2ee>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a64      	ldr	r2, [pc, #400]	; (800776c <HAL_DMA_IRQHandler+0x404>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d03b      	beq.n	8007656 <HAL_DMA_IRQHandler+0x2ee>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a63      	ldr	r2, [pc, #396]	; (8007770 <HAL_DMA_IRQHandler+0x408>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d036      	beq.n	8007656 <HAL_DMA_IRQHandler+0x2ee>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a61      	ldr	r2, [pc, #388]	; (8007774 <HAL_DMA_IRQHandler+0x40c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d031      	beq.n	8007656 <HAL_DMA_IRQHandler+0x2ee>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a60      	ldr	r2, [pc, #384]	; (8007778 <HAL_DMA_IRQHandler+0x410>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d02c      	beq.n	8007656 <HAL_DMA_IRQHandler+0x2ee>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a5e      	ldr	r2, [pc, #376]	; (800777c <HAL_DMA_IRQHandler+0x414>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d027      	beq.n	8007656 <HAL_DMA_IRQHandler+0x2ee>
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4a5d      	ldr	r2, [pc, #372]	; (8007780 <HAL_DMA_IRQHandler+0x418>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d022      	beq.n	8007656 <HAL_DMA_IRQHandler+0x2ee>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a5b      	ldr	r2, [pc, #364]	; (8007784 <HAL_DMA_IRQHandler+0x41c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d01d      	beq.n	8007656 <HAL_DMA_IRQHandler+0x2ee>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	4a5a      	ldr	r2, [pc, #360]	; (8007788 <HAL_DMA_IRQHandler+0x420>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d018      	beq.n	8007656 <HAL_DMA_IRQHandler+0x2ee>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a58      	ldr	r2, [pc, #352]	; (800778c <HAL_DMA_IRQHandler+0x424>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d013      	beq.n	8007656 <HAL_DMA_IRQHandler+0x2ee>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a57      	ldr	r2, [pc, #348]	; (8007790 <HAL_DMA_IRQHandler+0x428>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00e      	beq.n	8007656 <HAL_DMA_IRQHandler+0x2ee>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a55      	ldr	r2, [pc, #340]	; (8007794 <HAL_DMA_IRQHandler+0x42c>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d009      	beq.n	8007656 <HAL_DMA_IRQHandler+0x2ee>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a54      	ldr	r2, [pc, #336]	; (8007798 <HAL_DMA_IRQHandler+0x430>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d004      	beq.n	8007656 <HAL_DMA_IRQHandler+0x2ee>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a52      	ldr	r2, [pc, #328]	; (800779c <HAL_DMA_IRQHandler+0x434>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d10a      	bne.n	800766c <HAL_DMA_IRQHandler+0x304>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	695b      	ldr	r3, [r3, #20]
 800765c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007660:	2b00      	cmp	r3, #0
 8007662:	bf14      	ite	ne
 8007664:	2301      	movne	r3, #1
 8007666:	2300      	moveq	r3, #0
 8007668:	b2db      	uxtb	r3, r3
 800766a:	e003      	b.n	8007674 <HAL_DMA_IRQHandler+0x30c>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2300      	movs	r3, #0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00d      	beq.n	8007694 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800767c:	f003 031f 	and.w	r3, r3, #31
 8007680:	2201      	movs	r2, #1
 8007682:	409a      	lsls	r2, r3
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800768c:	f043 0202 	orr.w	r2, r3, #2
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007698:	f003 031f 	and.w	r3, r3, #31
 800769c:	2204      	movs	r2, #4
 800769e:	409a      	lsls	r2, r3
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	4013      	ands	r3, r2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 808f 	beq.w	80077c8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a2c      	ldr	r2, [pc, #176]	; (8007760 <HAL_DMA_IRQHandler+0x3f8>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d04a      	beq.n	800774a <HAL_DMA_IRQHandler+0x3e2>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a2a      	ldr	r2, [pc, #168]	; (8007764 <HAL_DMA_IRQHandler+0x3fc>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d045      	beq.n	800774a <HAL_DMA_IRQHandler+0x3e2>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a29      	ldr	r2, [pc, #164]	; (8007768 <HAL_DMA_IRQHandler+0x400>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d040      	beq.n	800774a <HAL_DMA_IRQHandler+0x3e2>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a27      	ldr	r2, [pc, #156]	; (800776c <HAL_DMA_IRQHandler+0x404>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d03b      	beq.n	800774a <HAL_DMA_IRQHandler+0x3e2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a26      	ldr	r2, [pc, #152]	; (8007770 <HAL_DMA_IRQHandler+0x408>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d036      	beq.n	800774a <HAL_DMA_IRQHandler+0x3e2>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a24      	ldr	r2, [pc, #144]	; (8007774 <HAL_DMA_IRQHandler+0x40c>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d031      	beq.n	800774a <HAL_DMA_IRQHandler+0x3e2>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a23      	ldr	r2, [pc, #140]	; (8007778 <HAL_DMA_IRQHandler+0x410>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d02c      	beq.n	800774a <HAL_DMA_IRQHandler+0x3e2>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a21      	ldr	r2, [pc, #132]	; (800777c <HAL_DMA_IRQHandler+0x414>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d027      	beq.n	800774a <HAL_DMA_IRQHandler+0x3e2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4a20      	ldr	r2, [pc, #128]	; (8007780 <HAL_DMA_IRQHandler+0x418>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d022      	beq.n	800774a <HAL_DMA_IRQHandler+0x3e2>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a1e      	ldr	r2, [pc, #120]	; (8007784 <HAL_DMA_IRQHandler+0x41c>)
 800770a:	4293      	cmp	r3, r2
 800770c:	d01d      	beq.n	800774a <HAL_DMA_IRQHandler+0x3e2>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4a1d      	ldr	r2, [pc, #116]	; (8007788 <HAL_DMA_IRQHandler+0x420>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d018      	beq.n	800774a <HAL_DMA_IRQHandler+0x3e2>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a1b      	ldr	r2, [pc, #108]	; (800778c <HAL_DMA_IRQHandler+0x424>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d013      	beq.n	800774a <HAL_DMA_IRQHandler+0x3e2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a1a      	ldr	r2, [pc, #104]	; (8007790 <HAL_DMA_IRQHandler+0x428>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d00e      	beq.n	800774a <HAL_DMA_IRQHandler+0x3e2>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a18      	ldr	r2, [pc, #96]	; (8007794 <HAL_DMA_IRQHandler+0x42c>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d009      	beq.n	800774a <HAL_DMA_IRQHandler+0x3e2>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a17      	ldr	r2, [pc, #92]	; (8007798 <HAL_DMA_IRQHandler+0x430>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d004      	beq.n	800774a <HAL_DMA_IRQHandler+0x3e2>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a15      	ldr	r2, [pc, #84]	; (800779c <HAL_DMA_IRQHandler+0x434>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d12a      	bne.n	80077a0 <HAL_DMA_IRQHandler+0x438>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b00      	cmp	r3, #0
 8007756:	bf14      	ite	ne
 8007758:	2301      	movne	r3, #1
 800775a:	2300      	moveq	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	e023      	b.n	80077a8 <HAL_DMA_IRQHandler+0x440>
 8007760:	40020010 	.word	0x40020010
 8007764:	40020028 	.word	0x40020028
 8007768:	40020040 	.word	0x40020040
 800776c:	40020058 	.word	0x40020058
 8007770:	40020070 	.word	0x40020070
 8007774:	40020088 	.word	0x40020088
 8007778:	400200a0 	.word	0x400200a0
 800777c:	400200b8 	.word	0x400200b8
 8007780:	40020410 	.word	0x40020410
 8007784:	40020428 	.word	0x40020428
 8007788:	40020440 	.word	0x40020440
 800778c:	40020458 	.word	0x40020458
 8007790:	40020470 	.word	0x40020470
 8007794:	40020488 	.word	0x40020488
 8007798:	400204a0 	.word	0x400204a0
 800779c:	400204b8 	.word	0x400204b8
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2300      	movs	r3, #0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00d      	beq.n	80077c8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077b0:	f003 031f 	and.w	r3, r3, #31
 80077b4:	2204      	movs	r2, #4
 80077b6:	409a      	lsls	r2, r3
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c0:	f043 0204 	orr.w	r2, r3, #4
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077cc:	f003 031f 	and.w	r3, r3, #31
 80077d0:	2210      	movs	r2, #16
 80077d2:	409a      	lsls	r2, r3
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	4013      	ands	r3, r2
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 80a6 	beq.w	800792a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a85      	ldr	r2, [pc, #532]	; (80079f8 <HAL_DMA_IRQHandler+0x690>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d04a      	beq.n	800787e <HAL_DMA_IRQHandler+0x516>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a83      	ldr	r2, [pc, #524]	; (80079fc <HAL_DMA_IRQHandler+0x694>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d045      	beq.n	800787e <HAL_DMA_IRQHandler+0x516>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a82      	ldr	r2, [pc, #520]	; (8007a00 <HAL_DMA_IRQHandler+0x698>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d040      	beq.n	800787e <HAL_DMA_IRQHandler+0x516>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a80      	ldr	r2, [pc, #512]	; (8007a04 <HAL_DMA_IRQHandler+0x69c>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d03b      	beq.n	800787e <HAL_DMA_IRQHandler+0x516>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a7f      	ldr	r2, [pc, #508]	; (8007a08 <HAL_DMA_IRQHandler+0x6a0>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d036      	beq.n	800787e <HAL_DMA_IRQHandler+0x516>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a7d      	ldr	r2, [pc, #500]	; (8007a0c <HAL_DMA_IRQHandler+0x6a4>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d031      	beq.n	800787e <HAL_DMA_IRQHandler+0x516>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a7c      	ldr	r2, [pc, #496]	; (8007a10 <HAL_DMA_IRQHandler+0x6a8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d02c      	beq.n	800787e <HAL_DMA_IRQHandler+0x516>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a7a      	ldr	r2, [pc, #488]	; (8007a14 <HAL_DMA_IRQHandler+0x6ac>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d027      	beq.n	800787e <HAL_DMA_IRQHandler+0x516>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a79      	ldr	r2, [pc, #484]	; (8007a18 <HAL_DMA_IRQHandler+0x6b0>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d022      	beq.n	800787e <HAL_DMA_IRQHandler+0x516>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a77      	ldr	r2, [pc, #476]	; (8007a1c <HAL_DMA_IRQHandler+0x6b4>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d01d      	beq.n	800787e <HAL_DMA_IRQHandler+0x516>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a76      	ldr	r2, [pc, #472]	; (8007a20 <HAL_DMA_IRQHandler+0x6b8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d018      	beq.n	800787e <HAL_DMA_IRQHandler+0x516>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a74      	ldr	r2, [pc, #464]	; (8007a24 <HAL_DMA_IRQHandler+0x6bc>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d013      	beq.n	800787e <HAL_DMA_IRQHandler+0x516>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a73      	ldr	r2, [pc, #460]	; (8007a28 <HAL_DMA_IRQHandler+0x6c0>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d00e      	beq.n	800787e <HAL_DMA_IRQHandler+0x516>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a71      	ldr	r2, [pc, #452]	; (8007a2c <HAL_DMA_IRQHandler+0x6c4>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d009      	beq.n	800787e <HAL_DMA_IRQHandler+0x516>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a70      	ldr	r2, [pc, #448]	; (8007a30 <HAL_DMA_IRQHandler+0x6c8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d004      	beq.n	800787e <HAL_DMA_IRQHandler+0x516>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a6e      	ldr	r2, [pc, #440]	; (8007a34 <HAL_DMA_IRQHandler+0x6cc>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d10a      	bne.n	8007894 <HAL_DMA_IRQHandler+0x52c>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0308 	and.w	r3, r3, #8
 8007888:	2b00      	cmp	r3, #0
 800788a:	bf14      	ite	ne
 800788c:	2301      	movne	r3, #1
 800788e:	2300      	moveq	r3, #0
 8007890:	b2db      	uxtb	r3, r3
 8007892:	e009      	b.n	80078a8 <HAL_DMA_IRQHandler+0x540>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0304 	and.w	r3, r3, #4
 800789e:	2b00      	cmp	r3, #0
 80078a0:	bf14      	ite	ne
 80078a2:	2301      	movne	r3, #1
 80078a4:	2300      	moveq	r3, #0
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d03e      	beq.n	800792a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078b0:	f003 031f 	and.w	r3, r3, #31
 80078b4:	2210      	movs	r2, #16
 80078b6:	409a      	lsls	r2, r3
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d018      	beq.n	80078fc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d108      	bne.n	80078ea <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d024      	beq.n	800792a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	4798      	blx	r3
 80078e8:	e01f      	b.n	800792a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d01b      	beq.n	800792a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	4798      	blx	r3
 80078fa:	e016      	b.n	800792a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007906:	2b00      	cmp	r3, #0
 8007908:	d107      	bne.n	800791a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 0208 	bic.w	r2, r2, #8
 8007918:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791e:	2b00      	cmp	r3, #0
 8007920:	d003      	beq.n	800792a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792e:	f003 031f 	and.w	r3, r3, #31
 8007932:	2220      	movs	r2, #32
 8007934:	409a      	lsls	r2, r3
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	4013      	ands	r3, r2
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 8110 	beq.w	8007b60 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a2c      	ldr	r2, [pc, #176]	; (80079f8 <HAL_DMA_IRQHandler+0x690>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d04a      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x678>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a2b      	ldr	r2, [pc, #172]	; (80079fc <HAL_DMA_IRQHandler+0x694>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d045      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x678>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a29      	ldr	r2, [pc, #164]	; (8007a00 <HAL_DMA_IRQHandler+0x698>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d040      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x678>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a28      	ldr	r2, [pc, #160]	; (8007a04 <HAL_DMA_IRQHandler+0x69c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d03b      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x678>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a26      	ldr	r2, [pc, #152]	; (8007a08 <HAL_DMA_IRQHandler+0x6a0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d036      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x678>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a25      	ldr	r2, [pc, #148]	; (8007a0c <HAL_DMA_IRQHandler+0x6a4>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d031      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x678>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a23      	ldr	r2, [pc, #140]	; (8007a10 <HAL_DMA_IRQHandler+0x6a8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d02c      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x678>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a22      	ldr	r2, [pc, #136]	; (8007a14 <HAL_DMA_IRQHandler+0x6ac>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d027      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x678>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a20      	ldr	r2, [pc, #128]	; (8007a18 <HAL_DMA_IRQHandler+0x6b0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d022      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x678>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a1f      	ldr	r2, [pc, #124]	; (8007a1c <HAL_DMA_IRQHandler+0x6b4>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d01d      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x678>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a1d      	ldr	r2, [pc, #116]	; (8007a20 <HAL_DMA_IRQHandler+0x6b8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d018      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x678>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a1c      	ldr	r2, [pc, #112]	; (8007a24 <HAL_DMA_IRQHandler+0x6bc>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d013      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x678>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a1a      	ldr	r2, [pc, #104]	; (8007a28 <HAL_DMA_IRQHandler+0x6c0>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00e      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x678>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a19      	ldr	r2, [pc, #100]	; (8007a2c <HAL_DMA_IRQHandler+0x6c4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d009      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x678>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a17      	ldr	r2, [pc, #92]	; (8007a30 <HAL_DMA_IRQHandler+0x6c8>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d004      	beq.n	80079e0 <HAL_DMA_IRQHandler+0x678>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a16      	ldr	r2, [pc, #88]	; (8007a34 <HAL_DMA_IRQHandler+0x6cc>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d12b      	bne.n	8007a38 <HAL_DMA_IRQHandler+0x6d0>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f003 0310 	and.w	r3, r3, #16
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	bf14      	ite	ne
 80079ee:	2301      	movne	r3, #1
 80079f0:	2300      	moveq	r3, #0
 80079f2:	b2db      	uxtb	r3, r3
 80079f4:	e02a      	b.n	8007a4c <HAL_DMA_IRQHandler+0x6e4>
 80079f6:	bf00      	nop
 80079f8:	40020010 	.word	0x40020010
 80079fc:	40020028 	.word	0x40020028
 8007a00:	40020040 	.word	0x40020040
 8007a04:	40020058 	.word	0x40020058
 8007a08:	40020070 	.word	0x40020070
 8007a0c:	40020088 	.word	0x40020088
 8007a10:	400200a0 	.word	0x400200a0
 8007a14:	400200b8 	.word	0x400200b8
 8007a18:	40020410 	.word	0x40020410
 8007a1c:	40020428 	.word	0x40020428
 8007a20:	40020440 	.word	0x40020440
 8007a24:	40020458 	.word	0x40020458
 8007a28:	40020470 	.word	0x40020470
 8007a2c:	40020488 	.word	0x40020488
 8007a30:	400204a0 	.word	0x400204a0
 8007a34:	400204b8 	.word	0x400204b8
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0302 	and.w	r3, r3, #2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	bf14      	ite	ne
 8007a46:	2301      	movne	r3, #1
 8007a48:	2300      	moveq	r3, #0
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 8087 	beq.w	8007b60 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a56:	f003 031f 	and.w	r3, r3, #31
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	409a      	lsls	r2, r3
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b04      	cmp	r3, #4
 8007a6c:	d139      	bne.n	8007ae2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f022 0216 	bic.w	r2, r2, #22
 8007a7c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	695a      	ldr	r2, [r3, #20]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a8c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d103      	bne.n	8007a9e <HAL_DMA_IRQHandler+0x736>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d007      	beq.n	8007aae <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	681a      	ldr	r2, [r3, #0]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f022 0208 	bic.w	r2, r2, #8
 8007aac:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ab2:	f003 031f 	and.w	r3, r3, #31
 8007ab6:	223f      	movs	r2, #63	; 0x3f
 8007ab8:	409a      	lsls	r2, r3
 8007aba:	6a3b      	ldr	r3, [r7, #32]
 8007abc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 834a 	beq.w	800816c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	4798      	blx	r3
          }
          return;
 8007ae0:	e344      	b.n	800816c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d018      	beq.n	8007b22 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d108      	bne.n	8007b10 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d02c      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	4798      	blx	r3
 8007b0e:	e027      	b.n	8007b60 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d023      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	4798      	blx	r3
 8007b20:	e01e      	b.n	8007b60 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10f      	bne.n	8007b50 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f022 0210 	bic.w	r2, r2, #16
 8007b3e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d003      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 8306 	beq.w	8008176 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 8088 	beq.w	8007c88 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2204      	movs	r2, #4
 8007b7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a7a      	ldr	r2, [pc, #488]	; (8007d70 <HAL_DMA_IRQHandler+0xa08>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d04a      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x8b8>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a79      	ldr	r2, [pc, #484]	; (8007d74 <HAL_DMA_IRQHandler+0xa0c>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d045      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x8b8>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a77      	ldr	r2, [pc, #476]	; (8007d78 <HAL_DMA_IRQHandler+0xa10>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d040      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x8b8>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a76      	ldr	r2, [pc, #472]	; (8007d7c <HAL_DMA_IRQHandler+0xa14>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d03b      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x8b8>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a74      	ldr	r2, [pc, #464]	; (8007d80 <HAL_DMA_IRQHandler+0xa18>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d036      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x8b8>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a73      	ldr	r2, [pc, #460]	; (8007d84 <HAL_DMA_IRQHandler+0xa1c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d031      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x8b8>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a71      	ldr	r2, [pc, #452]	; (8007d88 <HAL_DMA_IRQHandler+0xa20>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d02c      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x8b8>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a70      	ldr	r2, [pc, #448]	; (8007d8c <HAL_DMA_IRQHandler+0xa24>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d027      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x8b8>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a6e      	ldr	r2, [pc, #440]	; (8007d90 <HAL_DMA_IRQHandler+0xa28>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d022      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x8b8>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a6d      	ldr	r2, [pc, #436]	; (8007d94 <HAL_DMA_IRQHandler+0xa2c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d01d      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x8b8>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4a6b      	ldr	r2, [pc, #428]	; (8007d98 <HAL_DMA_IRQHandler+0xa30>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d018      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x8b8>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a6a      	ldr	r2, [pc, #424]	; (8007d9c <HAL_DMA_IRQHandler+0xa34>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d013      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x8b8>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a68      	ldr	r2, [pc, #416]	; (8007da0 <HAL_DMA_IRQHandler+0xa38>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d00e      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x8b8>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a67      	ldr	r2, [pc, #412]	; (8007da4 <HAL_DMA_IRQHandler+0xa3c>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d009      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x8b8>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a65      	ldr	r2, [pc, #404]	; (8007da8 <HAL_DMA_IRQHandler+0xa40>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d004      	beq.n	8007c20 <HAL_DMA_IRQHandler+0x8b8>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a64      	ldr	r2, [pc, #400]	; (8007dac <HAL_DMA_IRQHandler+0xa44>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d108      	bne.n	8007c32 <HAL_DMA_IRQHandler+0x8ca>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0201 	bic.w	r2, r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
 8007c30:	e007      	b.n	8007c42 <HAL_DMA_IRQHandler+0x8da>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f022 0201 	bic.w	r2, r2, #1
 8007c40:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	3301      	adds	r3, #1
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d307      	bcc.n	8007c5e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1f2      	bne.n	8007c42 <HAL_DMA_IRQHandler+0x8da>
 8007c5c:	e000      	b.n	8007c60 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007c5e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d004      	beq.n	8007c78 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2203      	movs	r2, #3
 8007c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007c76:	e003      	b.n	8007c80 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 8272 	beq.w	8008176 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	4798      	blx	r3
 8007c9a:	e26c      	b.n	8008176 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a43      	ldr	r2, [pc, #268]	; (8007db0 <HAL_DMA_IRQHandler+0xa48>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d022      	beq.n	8007cec <HAL_DMA_IRQHandler+0x984>
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a42      	ldr	r2, [pc, #264]	; (8007db4 <HAL_DMA_IRQHandler+0xa4c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d01d      	beq.n	8007cec <HAL_DMA_IRQHandler+0x984>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a40      	ldr	r2, [pc, #256]	; (8007db8 <HAL_DMA_IRQHandler+0xa50>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d018      	beq.n	8007cec <HAL_DMA_IRQHandler+0x984>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a3f      	ldr	r2, [pc, #252]	; (8007dbc <HAL_DMA_IRQHandler+0xa54>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d013      	beq.n	8007cec <HAL_DMA_IRQHandler+0x984>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a3d      	ldr	r2, [pc, #244]	; (8007dc0 <HAL_DMA_IRQHandler+0xa58>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d00e      	beq.n	8007cec <HAL_DMA_IRQHandler+0x984>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a3c      	ldr	r2, [pc, #240]	; (8007dc4 <HAL_DMA_IRQHandler+0xa5c>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d009      	beq.n	8007cec <HAL_DMA_IRQHandler+0x984>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4a3a      	ldr	r2, [pc, #232]	; (8007dc8 <HAL_DMA_IRQHandler+0xa60>)
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d004      	beq.n	8007cec <HAL_DMA_IRQHandler+0x984>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a39      	ldr	r2, [pc, #228]	; (8007dcc <HAL_DMA_IRQHandler+0xa64>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d101      	bne.n	8007cf0 <HAL_DMA_IRQHandler+0x988>
 8007cec:	2301      	movs	r3, #1
 8007cee:	e000      	b.n	8007cf2 <HAL_DMA_IRQHandler+0x98a>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 823f 	beq.w	8008176 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d04:	f003 031f 	and.w	r3, r3, #31
 8007d08:	2204      	movs	r2, #4
 8007d0a:	409a      	lsls	r2, r3
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	4013      	ands	r3, r2
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	f000 80cd 	beq.w	8007eb0 <HAL_DMA_IRQHandler+0xb48>
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	f000 80c7 	beq.w	8007eb0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d26:	f003 031f 	and.w	r3, r3, #31
 8007d2a:	2204      	movs	r2, #4
 8007d2c:	409a      	lsls	r2, r3
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d049      	beq.n	8007dd0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d109      	bne.n	8007d5a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 8210 	beq.w	8008170 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d58:	e20a      	b.n	8008170 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	f000 8206 	beq.w	8008170 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d6c:	e200      	b.n	8008170 <HAL_DMA_IRQHandler+0xe08>
 8007d6e:	bf00      	nop
 8007d70:	40020010 	.word	0x40020010
 8007d74:	40020028 	.word	0x40020028
 8007d78:	40020040 	.word	0x40020040
 8007d7c:	40020058 	.word	0x40020058
 8007d80:	40020070 	.word	0x40020070
 8007d84:	40020088 	.word	0x40020088
 8007d88:	400200a0 	.word	0x400200a0
 8007d8c:	400200b8 	.word	0x400200b8
 8007d90:	40020410 	.word	0x40020410
 8007d94:	40020428 	.word	0x40020428
 8007d98:	40020440 	.word	0x40020440
 8007d9c:	40020458 	.word	0x40020458
 8007da0:	40020470 	.word	0x40020470
 8007da4:	40020488 	.word	0x40020488
 8007da8:	400204a0 	.word	0x400204a0
 8007dac:	400204b8 	.word	0x400204b8
 8007db0:	58025408 	.word	0x58025408
 8007db4:	5802541c 	.word	0x5802541c
 8007db8:	58025430 	.word	0x58025430
 8007dbc:	58025444 	.word	0x58025444
 8007dc0:	58025458 	.word	0x58025458
 8007dc4:	5802546c 	.word	0x5802546c
 8007dc8:	58025480 	.word	0x58025480
 8007dcc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f003 0320 	and.w	r3, r3, #32
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d160      	bne.n	8007e9c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a8c      	ldr	r2, [pc, #560]	; (8008010 <HAL_DMA_IRQHandler+0xca8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d04a      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xb12>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a8a      	ldr	r2, [pc, #552]	; (8008014 <HAL_DMA_IRQHandler+0xcac>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d045      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xb12>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a89      	ldr	r2, [pc, #548]	; (8008018 <HAL_DMA_IRQHandler+0xcb0>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d040      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xb12>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a87      	ldr	r2, [pc, #540]	; (800801c <HAL_DMA_IRQHandler+0xcb4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d03b      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xb12>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a86      	ldr	r2, [pc, #536]	; (8008020 <HAL_DMA_IRQHandler+0xcb8>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d036      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xb12>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a84      	ldr	r2, [pc, #528]	; (8008024 <HAL_DMA_IRQHandler+0xcbc>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d031      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xb12>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a83      	ldr	r2, [pc, #524]	; (8008028 <HAL_DMA_IRQHandler+0xcc0>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d02c      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xb12>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a81      	ldr	r2, [pc, #516]	; (800802c <HAL_DMA_IRQHandler+0xcc4>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d027      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xb12>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a80      	ldr	r2, [pc, #512]	; (8008030 <HAL_DMA_IRQHandler+0xcc8>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d022      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xb12>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a7e      	ldr	r2, [pc, #504]	; (8008034 <HAL_DMA_IRQHandler+0xccc>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d01d      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xb12>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a7d      	ldr	r2, [pc, #500]	; (8008038 <HAL_DMA_IRQHandler+0xcd0>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d018      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xb12>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a7b      	ldr	r2, [pc, #492]	; (800803c <HAL_DMA_IRQHandler+0xcd4>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d013      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xb12>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a7a      	ldr	r2, [pc, #488]	; (8008040 <HAL_DMA_IRQHandler+0xcd8>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d00e      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xb12>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a78      	ldr	r2, [pc, #480]	; (8008044 <HAL_DMA_IRQHandler+0xcdc>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d009      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xb12>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a77      	ldr	r2, [pc, #476]	; (8008048 <HAL_DMA_IRQHandler+0xce0>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d004      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xb12>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a75      	ldr	r2, [pc, #468]	; (800804c <HAL_DMA_IRQHandler+0xce4>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d108      	bne.n	8007e8c <HAL_DMA_IRQHandler+0xb24>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f022 0208 	bic.w	r2, r2, #8
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	e007      	b.n	8007e9c <HAL_DMA_IRQHandler+0xb34>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0204 	bic.w	r2, r2, #4
 8007e9a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	f000 8165 	beq.w	8008170 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007eae:	e15f      	b.n	8008170 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb4:	f003 031f 	and.w	r3, r3, #31
 8007eb8:	2202      	movs	r2, #2
 8007eba:	409a      	lsls	r2, r3
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80c5 	beq.w	8008050 <HAL_DMA_IRQHandler+0xce8>
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	f000 80bf 	beq.w	8008050 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed6:	f003 031f 	and.w	r3, r3, #31
 8007eda:	2202      	movs	r2, #2
 8007edc:	409a      	lsls	r2, r3
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d018      	beq.n	8007f1e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d109      	bne.n	8007f0a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 813a 	beq.w	8008174 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f08:	e134      	b.n	8008174 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	f000 8130 	beq.w	8008174 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f1c:	e12a      	b.n	8008174 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f003 0320 	and.w	r3, r3, #32
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d168      	bne.n	8007ffa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a38      	ldr	r2, [pc, #224]	; (8008010 <HAL_DMA_IRQHandler+0xca8>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d04a      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xc60>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a37      	ldr	r2, [pc, #220]	; (8008014 <HAL_DMA_IRQHandler+0xcac>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d045      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xc60>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a35      	ldr	r2, [pc, #212]	; (8008018 <HAL_DMA_IRQHandler+0xcb0>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d040      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xc60>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a34      	ldr	r2, [pc, #208]	; (800801c <HAL_DMA_IRQHandler+0xcb4>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d03b      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xc60>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a32      	ldr	r2, [pc, #200]	; (8008020 <HAL_DMA_IRQHandler+0xcb8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d036      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xc60>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a31      	ldr	r2, [pc, #196]	; (8008024 <HAL_DMA_IRQHandler+0xcbc>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d031      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xc60>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a2f      	ldr	r2, [pc, #188]	; (8008028 <HAL_DMA_IRQHandler+0xcc0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d02c      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xc60>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a2e      	ldr	r2, [pc, #184]	; (800802c <HAL_DMA_IRQHandler+0xcc4>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d027      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xc60>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a2c      	ldr	r2, [pc, #176]	; (8008030 <HAL_DMA_IRQHandler+0xcc8>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d022      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xc60>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a2b      	ldr	r2, [pc, #172]	; (8008034 <HAL_DMA_IRQHandler+0xccc>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d01d      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xc60>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a29      	ldr	r2, [pc, #164]	; (8008038 <HAL_DMA_IRQHandler+0xcd0>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d018      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xc60>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a28      	ldr	r2, [pc, #160]	; (800803c <HAL_DMA_IRQHandler+0xcd4>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d013      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xc60>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a26      	ldr	r2, [pc, #152]	; (8008040 <HAL_DMA_IRQHandler+0xcd8>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00e      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xc60>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a25      	ldr	r2, [pc, #148]	; (8008044 <HAL_DMA_IRQHandler+0xcdc>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d009      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xc60>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a23      	ldr	r2, [pc, #140]	; (8008048 <HAL_DMA_IRQHandler+0xce0>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d004      	beq.n	8007fc8 <HAL_DMA_IRQHandler+0xc60>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a22      	ldr	r2, [pc, #136]	; (800804c <HAL_DMA_IRQHandler+0xce4>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d108      	bne.n	8007fda <HAL_DMA_IRQHandler+0xc72>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f022 0214 	bic.w	r2, r2, #20
 8007fd6:	601a      	str	r2, [r3, #0]
 8007fd8:	e007      	b.n	8007fea <HAL_DMA_IRQHandler+0xc82>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f022 020a 	bic.w	r2, r2, #10
 8007fe8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f000 80b8 	beq.w	8008174 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800800c:	e0b2      	b.n	8008174 <HAL_DMA_IRQHandler+0xe0c>
 800800e:	bf00      	nop
 8008010:	40020010 	.word	0x40020010
 8008014:	40020028 	.word	0x40020028
 8008018:	40020040 	.word	0x40020040
 800801c:	40020058 	.word	0x40020058
 8008020:	40020070 	.word	0x40020070
 8008024:	40020088 	.word	0x40020088
 8008028:	400200a0 	.word	0x400200a0
 800802c:	400200b8 	.word	0x400200b8
 8008030:	40020410 	.word	0x40020410
 8008034:	40020428 	.word	0x40020428
 8008038:	40020440 	.word	0x40020440
 800803c:	40020458 	.word	0x40020458
 8008040:	40020470 	.word	0x40020470
 8008044:	40020488 	.word	0x40020488
 8008048:	400204a0 	.word	0x400204a0
 800804c:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008054:	f003 031f 	and.w	r3, r3, #31
 8008058:	2208      	movs	r2, #8
 800805a:	409a      	lsls	r2, r3
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	4013      	ands	r3, r2
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 8088 	beq.w	8008176 <HAL_DMA_IRQHandler+0xe0e>
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	f003 0308 	and.w	r3, r3, #8
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 8082 	beq.w	8008176 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a41      	ldr	r2, [pc, #260]	; (800817c <HAL_DMA_IRQHandler+0xe14>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d04a      	beq.n	8008112 <HAL_DMA_IRQHandler+0xdaa>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a3f      	ldr	r2, [pc, #252]	; (8008180 <HAL_DMA_IRQHandler+0xe18>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d045      	beq.n	8008112 <HAL_DMA_IRQHandler+0xdaa>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a3e      	ldr	r2, [pc, #248]	; (8008184 <HAL_DMA_IRQHandler+0xe1c>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d040      	beq.n	8008112 <HAL_DMA_IRQHandler+0xdaa>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a3c      	ldr	r2, [pc, #240]	; (8008188 <HAL_DMA_IRQHandler+0xe20>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d03b      	beq.n	8008112 <HAL_DMA_IRQHandler+0xdaa>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a3b      	ldr	r2, [pc, #236]	; (800818c <HAL_DMA_IRQHandler+0xe24>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d036      	beq.n	8008112 <HAL_DMA_IRQHandler+0xdaa>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a39      	ldr	r2, [pc, #228]	; (8008190 <HAL_DMA_IRQHandler+0xe28>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d031      	beq.n	8008112 <HAL_DMA_IRQHandler+0xdaa>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a38      	ldr	r2, [pc, #224]	; (8008194 <HAL_DMA_IRQHandler+0xe2c>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d02c      	beq.n	8008112 <HAL_DMA_IRQHandler+0xdaa>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a36      	ldr	r2, [pc, #216]	; (8008198 <HAL_DMA_IRQHandler+0xe30>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d027      	beq.n	8008112 <HAL_DMA_IRQHandler+0xdaa>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a35      	ldr	r2, [pc, #212]	; (800819c <HAL_DMA_IRQHandler+0xe34>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d022      	beq.n	8008112 <HAL_DMA_IRQHandler+0xdaa>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a33      	ldr	r2, [pc, #204]	; (80081a0 <HAL_DMA_IRQHandler+0xe38>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d01d      	beq.n	8008112 <HAL_DMA_IRQHandler+0xdaa>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a32      	ldr	r2, [pc, #200]	; (80081a4 <HAL_DMA_IRQHandler+0xe3c>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d018      	beq.n	8008112 <HAL_DMA_IRQHandler+0xdaa>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a30      	ldr	r2, [pc, #192]	; (80081a8 <HAL_DMA_IRQHandler+0xe40>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d013      	beq.n	8008112 <HAL_DMA_IRQHandler+0xdaa>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a2f      	ldr	r2, [pc, #188]	; (80081ac <HAL_DMA_IRQHandler+0xe44>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d00e      	beq.n	8008112 <HAL_DMA_IRQHandler+0xdaa>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a2d      	ldr	r2, [pc, #180]	; (80081b0 <HAL_DMA_IRQHandler+0xe48>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d009      	beq.n	8008112 <HAL_DMA_IRQHandler+0xdaa>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a2c      	ldr	r2, [pc, #176]	; (80081b4 <HAL_DMA_IRQHandler+0xe4c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d004      	beq.n	8008112 <HAL_DMA_IRQHandler+0xdaa>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a2a      	ldr	r2, [pc, #168]	; (80081b8 <HAL_DMA_IRQHandler+0xe50>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d108      	bne.n	8008124 <HAL_DMA_IRQHandler+0xdbc>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	681a      	ldr	r2, [r3, #0]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f022 021c 	bic.w	r2, r2, #28
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	e007      	b.n	8008134 <HAL_DMA_IRQHandler+0xdcc>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f022 020e 	bic.w	r2, r2, #14
 8008132:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008138:	f003 031f 	and.w	r3, r3, #31
 800813c:	2201      	movs	r2, #1
 800813e:	409a      	lsls	r2, r3
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800815e:	2b00      	cmp	r3, #0
 8008160:	d009      	beq.n	8008176 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	4798      	blx	r3
 800816a:	e004      	b.n	8008176 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800816c:	bf00      	nop
 800816e:	e002      	b.n	8008176 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008170:	bf00      	nop
 8008172:	e000      	b.n	8008176 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008174:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008176:	3728      	adds	r7, #40	; 0x28
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	40020010 	.word	0x40020010
 8008180:	40020028 	.word	0x40020028
 8008184:	40020040 	.word	0x40020040
 8008188:	40020058 	.word	0x40020058
 800818c:	40020070 	.word	0x40020070
 8008190:	40020088 	.word	0x40020088
 8008194:	400200a0 	.word	0x400200a0
 8008198:	400200b8 	.word	0x400200b8
 800819c:	40020410 	.word	0x40020410
 80081a0:	40020428 	.word	0x40020428
 80081a4:	40020440 	.word	0x40020440
 80081a8:	40020458 	.word	0x40020458
 80081ac:	40020470 	.word	0x40020470
 80081b0:	40020488 	.word	0x40020488
 80081b4:	400204a0 	.word	0x400204a0
 80081b8:	400204b8 	.word	0x400204b8

080081bc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081bc:	b480      	push	{r7}
 80081be:	b087      	sub	sp, #28
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ce:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a84      	ldr	r2, [pc, #528]	; (80083ec <DMA_SetConfig+0x230>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d072      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a82      	ldr	r2, [pc, #520]	; (80083f0 <DMA_SetConfig+0x234>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d06d      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a81      	ldr	r2, [pc, #516]	; (80083f4 <DMA_SetConfig+0x238>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d068      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a7f      	ldr	r2, [pc, #508]	; (80083f8 <DMA_SetConfig+0x23c>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d063      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a7e      	ldr	r2, [pc, #504]	; (80083fc <DMA_SetConfig+0x240>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d05e      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a7c      	ldr	r2, [pc, #496]	; (8008400 <DMA_SetConfig+0x244>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d059      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a7b      	ldr	r2, [pc, #492]	; (8008404 <DMA_SetConfig+0x248>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d054      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a79      	ldr	r2, [pc, #484]	; (8008408 <DMA_SetConfig+0x24c>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d04f      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a78      	ldr	r2, [pc, #480]	; (800840c <DMA_SetConfig+0x250>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d04a      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a76      	ldr	r2, [pc, #472]	; (8008410 <DMA_SetConfig+0x254>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d045      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a75      	ldr	r2, [pc, #468]	; (8008414 <DMA_SetConfig+0x258>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d040      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a73      	ldr	r2, [pc, #460]	; (8008418 <DMA_SetConfig+0x25c>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d03b      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a72      	ldr	r2, [pc, #456]	; (800841c <DMA_SetConfig+0x260>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d036      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a70      	ldr	r2, [pc, #448]	; (8008420 <DMA_SetConfig+0x264>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d031      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a6f      	ldr	r2, [pc, #444]	; (8008424 <DMA_SetConfig+0x268>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d02c      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a6d      	ldr	r2, [pc, #436]	; (8008428 <DMA_SetConfig+0x26c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d027      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a6c      	ldr	r2, [pc, #432]	; (800842c <DMA_SetConfig+0x270>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d022      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a6a      	ldr	r2, [pc, #424]	; (8008430 <DMA_SetConfig+0x274>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d01d      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a69      	ldr	r2, [pc, #420]	; (8008434 <DMA_SetConfig+0x278>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d018      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a67      	ldr	r2, [pc, #412]	; (8008438 <DMA_SetConfig+0x27c>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d013      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a66      	ldr	r2, [pc, #408]	; (800843c <DMA_SetConfig+0x280>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d00e      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a64      	ldr	r2, [pc, #400]	; (8008440 <DMA_SetConfig+0x284>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d009      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a63      	ldr	r2, [pc, #396]	; (8008444 <DMA_SetConfig+0x288>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d004      	beq.n	80082c6 <DMA_SetConfig+0x10a>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a61      	ldr	r2, [pc, #388]	; (8008448 <DMA_SetConfig+0x28c>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d101      	bne.n	80082ca <DMA_SetConfig+0x10e>
 80082c6:	2301      	movs	r3, #1
 80082c8:	e000      	b.n	80082cc <DMA_SetConfig+0x110>
 80082ca:	2300      	movs	r3, #0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00d      	beq.n	80082ec <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80082d8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d004      	beq.n	80082ec <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80082ea:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a3e      	ldr	r2, [pc, #248]	; (80083ec <DMA_SetConfig+0x230>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d04a      	beq.n	800838c <DMA_SetConfig+0x1d0>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a3d      	ldr	r2, [pc, #244]	; (80083f0 <DMA_SetConfig+0x234>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d045      	beq.n	800838c <DMA_SetConfig+0x1d0>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a3b      	ldr	r2, [pc, #236]	; (80083f4 <DMA_SetConfig+0x238>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d040      	beq.n	800838c <DMA_SetConfig+0x1d0>
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a3a      	ldr	r2, [pc, #232]	; (80083f8 <DMA_SetConfig+0x23c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d03b      	beq.n	800838c <DMA_SetConfig+0x1d0>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a38      	ldr	r2, [pc, #224]	; (80083fc <DMA_SetConfig+0x240>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d036      	beq.n	800838c <DMA_SetConfig+0x1d0>
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a37      	ldr	r2, [pc, #220]	; (8008400 <DMA_SetConfig+0x244>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d031      	beq.n	800838c <DMA_SetConfig+0x1d0>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a35      	ldr	r2, [pc, #212]	; (8008404 <DMA_SetConfig+0x248>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d02c      	beq.n	800838c <DMA_SetConfig+0x1d0>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a34      	ldr	r2, [pc, #208]	; (8008408 <DMA_SetConfig+0x24c>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d027      	beq.n	800838c <DMA_SetConfig+0x1d0>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a32      	ldr	r2, [pc, #200]	; (800840c <DMA_SetConfig+0x250>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d022      	beq.n	800838c <DMA_SetConfig+0x1d0>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a31      	ldr	r2, [pc, #196]	; (8008410 <DMA_SetConfig+0x254>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d01d      	beq.n	800838c <DMA_SetConfig+0x1d0>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a2f      	ldr	r2, [pc, #188]	; (8008414 <DMA_SetConfig+0x258>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d018      	beq.n	800838c <DMA_SetConfig+0x1d0>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a2e      	ldr	r2, [pc, #184]	; (8008418 <DMA_SetConfig+0x25c>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d013      	beq.n	800838c <DMA_SetConfig+0x1d0>
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a2c      	ldr	r2, [pc, #176]	; (800841c <DMA_SetConfig+0x260>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d00e      	beq.n	800838c <DMA_SetConfig+0x1d0>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a2b      	ldr	r2, [pc, #172]	; (8008420 <DMA_SetConfig+0x264>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d009      	beq.n	800838c <DMA_SetConfig+0x1d0>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a29      	ldr	r2, [pc, #164]	; (8008424 <DMA_SetConfig+0x268>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d004      	beq.n	800838c <DMA_SetConfig+0x1d0>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a28      	ldr	r2, [pc, #160]	; (8008428 <DMA_SetConfig+0x26c>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d101      	bne.n	8008390 <DMA_SetConfig+0x1d4>
 800838c:	2301      	movs	r3, #1
 800838e:	e000      	b.n	8008392 <DMA_SetConfig+0x1d6>
 8008390:	2300      	movs	r3, #0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d05a      	beq.n	800844c <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839a:	f003 031f 	and.w	r3, r3, #31
 800839e:	223f      	movs	r2, #63	; 0x3f
 80083a0:	409a      	lsls	r2, r3
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80083b4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	683a      	ldr	r2, [r7, #0]
 80083bc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	689b      	ldr	r3, [r3, #8]
 80083c2:	2b40      	cmp	r3, #64	; 0x40
 80083c4:	d108      	bne.n	80083d8 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80083d6:	e087      	b.n	80084e8 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	60da      	str	r2, [r3, #12]
}
 80083e8:	e07e      	b.n	80084e8 <DMA_SetConfig+0x32c>
 80083ea:	bf00      	nop
 80083ec:	40020010 	.word	0x40020010
 80083f0:	40020028 	.word	0x40020028
 80083f4:	40020040 	.word	0x40020040
 80083f8:	40020058 	.word	0x40020058
 80083fc:	40020070 	.word	0x40020070
 8008400:	40020088 	.word	0x40020088
 8008404:	400200a0 	.word	0x400200a0
 8008408:	400200b8 	.word	0x400200b8
 800840c:	40020410 	.word	0x40020410
 8008410:	40020428 	.word	0x40020428
 8008414:	40020440 	.word	0x40020440
 8008418:	40020458 	.word	0x40020458
 800841c:	40020470 	.word	0x40020470
 8008420:	40020488 	.word	0x40020488
 8008424:	400204a0 	.word	0x400204a0
 8008428:	400204b8 	.word	0x400204b8
 800842c:	58025408 	.word	0x58025408
 8008430:	5802541c 	.word	0x5802541c
 8008434:	58025430 	.word	0x58025430
 8008438:	58025444 	.word	0x58025444
 800843c:	58025458 	.word	0x58025458
 8008440:	5802546c 	.word	0x5802546c
 8008444:	58025480 	.word	0x58025480
 8008448:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a28      	ldr	r2, [pc, #160]	; (80084f4 <DMA_SetConfig+0x338>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d022      	beq.n	800849c <DMA_SetConfig+0x2e0>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a27      	ldr	r2, [pc, #156]	; (80084f8 <DMA_SetConfig+0x33c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d01d      	beq.n	800849c <DMA_SetConfig+0x2e0>
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a25      	ldr	r2, [pc, #148]	; (80084fc <DMA_SetConfig+0x340>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d018      	beq.n	800849c <DMA_SetConfig+0x2e0>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a24      	ldr	r2, [pc, #144]	; (8008500 <DMA_SetConfig+0x344>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d013      	beq.n	800849c <DMA_SetConfig+0x2e0>
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a22      	ldr	r2, [pc, #136]	; (8008504 <DMA_SetConfig+0x348>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d00e      	beq.n	800849c <DMA_SetConfig+0x2e0>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a21      	ldr	r2, [pc, #132]	; (8008508 <DMA_SetConfig+0x34c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d009      	beq.n	800849c <DMA_SetConfig+0x2e0>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a1f      	ldr	r2, [pc, #124]	; (800850c <DMA_SetConfig+0x350>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d004      	beq.n	800849c <DMA_SetConfig+0x2e0>
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a1e      	ldr	r2, [pc, #120]	; (8008510 <DMA_SetConfig+0x354>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d101      	bne.n	80084a0 <DMA_SetConfig+0x2e4>
 800849c:	2301      	movs	r3, #1
 800849e:	e000      	b.n	80084a2 <DMA_SetConfig+0x2e6>
 80084a0:	2300      	movs	r3, #0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d020      	beq.n	80084e8 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084aa:	f003 031f 	and.w	r3, r3, #31
 80084ae:	2201      	movs	r2, #1
 80084b0:	409a      	lsls	r2, r3
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	2b40      	cmp	r3, #64	; 0x40
 80084c4:	d108      	bne.n	80084d8 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	60da      	str	r2, [r3, #12]
}
 80084d6:	e007      	b.n	80084e8 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	60da      	str	r2, [r3, #12]
}
 80084e8:	bf00      	nop
 80084ea:	371c      	adds	r7, #28
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	58025408 	.word	0x58025408
 80084f8:	5802541c 	.word	0x5802541c
 80084fc:	58025430 	.word	0x58025430
 8008500:	58025444 	.word	0x58025444
 8008504:	58025458 	.word	0x58025458
 8008508:	5802546c 	.word	0x5802546c
 800850c:	58025480 	.word	0x58025480
 8008510:	58025494 	.word	0x58025494

08008514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a42      	ldr	r2, [pc, #264]	; (800862c <DMA_CalcBaseAndBitshift+0x118>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d04a      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xa8>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a41      	ldr	r2, [pc, #260]	; (8008630 <DMA_CalcBaseAndBitshift+0x11c>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d045      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xa8>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a3f      	ldr	r2, [pc, #252]	; (8008634 <DMA_CalcBaseAndBitshift+0x120>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d040      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xa8>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a3e      	ldr	r2, [pc, #248]	; (8008638 <DMA_CalcBaseAndBitshift+0x124>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d03b      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xa8>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a3c      	ldr	r2, [pc, #240]	; (800863c <DMA_CalcBaseAndBitshift+0x128>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d036      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xa8>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a3b      	ldr	r2, [pc, #236]	; (8008640 <DMA_CalcBaseAndBitshift+0x12c>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d031      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xa8>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a39      	ldr	r2, [pc, #228]	; (8008644 <DMA_CalcBaseAndBitshift+0x130>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d02c      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xa8>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a38      	ldr	r2, [pc, #224]	; (8008648 <DMA_CalcBaseAndBitshift+0x134>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d027      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xa8>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a36      	ldr	r2, [pc, #216]	; (800864c <DMA_CalcBaseAndBitshift+0x138>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d022      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xa8>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a35      	ldr	r2, [pc, #212]	; (8008650 <DMA_CalcBaseAndBitshift+0x13c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d01d      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xa8>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a33      	ldr	r2, [pc, #204]	; (8008654 <DMA_CalcBaseAndBitshift+0x140>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d018      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xa8>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a32      	ldr	r2, [pc, #200]	; (8008658 <DMA_CalcBaseAndBitshift+0x144>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d013      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xa8>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a30      	ldr	r2, [pc, #192]	; (800865c <DMA_CalcBaseAndBitshift+0x148>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d00e      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xa8>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a2f      	ldr	r2, [pc, #188]	; (8008660 <DMA_CalcBaseAndBitshift+0x14c>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d009      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xa8>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a2d      	ldr	r2, [pc, #180]	; (8008664 <DMA_CalcBaseAndBitshift+0x150>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d004      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xa8>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a2c      	ldr	r2, [pc, #176]	; (8008668 <DMA_CalcBaseAndBitshift+0x154>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d101      	bne.n	80085c0 <DMA_CalcBaseAndBitshift+0xac>
 80085bc:	2301      	movs	r3, #1
 80085be:	e000      	b.n	80085c2 <DMA_CalcBaseAndBitshift+0xae>
 80085c0:	2300      	movs	r3, #0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d024      	beq.n	8008610 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	3b10      	subs	r3, #16
 80085ce:	4a27      	ldr	r2, [pc, #156]	; (800866c <DMA_CalcBaseAndBitshift+0x158>)
 80085d0:	fba2 2303 	umull	r2, r3, r2, r3
 80085d4:	091b      	lsrs	r3, r3, #4
 80085d6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f003 0307 	and.w	r3, r3, #7
 80085de:	4a24      	ldr	r2, [pc, #144]	; (8008670 <DMA_CalcBaseAndBitshift+0x15c>)
 80085e0:	5cd3      	ldrb	r3, [r2, r3]
 80085e2:	461a      	mov	r2, r3
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2b03      	cmp	r3, #3
 80085ec:	d908      	bls.n	8008600 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	461a      	mov	r2, r3
 80085f4:	4b1f      	ldr	r3, [pc, #124]	; (8008674 <DMA_CalcBaseAndBitshift+0x160>)
 80085f6:	4013      	ands	r3, r2
 80085f8:	1d1a      	adds	r2, r3, #4
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	659a      	str	r2, [r3, #88]	; 0x58
 80085fe:	e00d      	b.n	800861c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	4b1b      	ldr	r3, [pc, #108]	; (8008674 <DMA_CalcBaseAndBitshift+0x160>)
 8008608:	4013      	ands	r3, r2
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	6593      	str	r3, [r2, #88]	; 0x58
 800860e:	e005      	b.n	800861c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	40020010 	.word	0x40020010
 8008630:	40020028 	.word	0x40020028
 8008634:	40020040 	.word	0x40020040
 8008638:	40020058 	.word	0x40020058
 800863c:	40020070 	.word	0x40020070
 8008640:	40020088 	.word	0x40020088
 8008644:	400200a0 	.word	0x400200a0
 8008648:	400200b8 	.word	0x400200b8
 800864c:	40020410 	.word	0x40020410
 8008650:	40020428 	.word	0x40020428
 8008654:	40020440 	.word	0x40020440
 8008658:	40020458 	.word	0x40020458
 800865c:	40020470 	.word	0x40020470
 8008660:	40020488 	.word	0x40020488
 8008664:	400204a0 	.word	0x400204a0
 8008668:	400204b8 	.word	0x400204b8
 800866c:	aaaaaaab 	.word	0xaaaaaaab
 8008670:	08012630 	.word	0x08012630
 8008674:	fffffc00 	.word	0xfffffc00

08008678 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008680:	2300      	movs	r3, #0
 8008682:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d120      	bne.n	80086ce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008690:	2b03      	cmp	r3, #3
 8008692:	d858      	bhi.n	8008746 <DMA_CheckFifoParam+0xce>
 8008694:	a201      	add	r2, pc, #4	; (adr r2, 800869c <DMA_CheckFifoParam+0x24>)
 8008696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869a:	bf00      	nop
 800869c:	080086ad 	.word	0x080086ad
 80086a0:	080086bf 	.word	0x080086bf
 80086a4:	080086ad 	.word	0x080086ad
 80086a8:	08008747 	.word	0x08008747
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d048      	beq.n	800874a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086bc:	e045      	b.n	800874a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086c6:	d142      	bne.n	800874e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086cc:	e03f      	b.n	800874e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	699b      	ldr	r3, [r3, #24]
 80086d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086d6:	d123      	bne.n	8008720 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086dc:	2b03      	cmp	r3, #3
 80086de:	d838      	bhi.n	8008752 <DMA_CheckFifoParam+0xda>
 80086e0:	a201      	add	r2, pc, #4	; (adr r2, 80086e8 <DMA_CheckFifoParam+0x70>)
 80086e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e6:	bf00      	nop
 80086e8:	080086f9 	.word	0x080086f9
 80086ec:	080086ff 	.word	0x080086ff
 80086f0:	080086f9 	.word	0x080086f9
 80086f4:	08008711 	.word	0x08008711
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	73fb      	strb	r3, [r7, #15]
        break;
 80086fc:	e030      	b.n	8008760 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008706:	2b00      	cmp	r3, #0
 8008708:	d025      	beq.n	8008756 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800870e:	e022      	b.n	8008756 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008714:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008718:	d11f      	bne.n	800875a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800871a:	2301      	movs	r3, #1
 800871c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800871e:	e01c      	b.n	800875a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008724:	2b02      	cmp	r3, #2
 8008726:	d902      	bls.n	800872e <DMA_CheckFifoParam+0xb6>
 8008728:	2b03      	cmp	r3, #3
 800872a:	d003      	beq.n	8008734 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800872c:	e018      	b.n	8008760 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	73fb      	strb	r3, [r7, #15]
        break;
 8008732:	e015      	b.n	8008760 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d00e      	beq.n	800875e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008740:	2301      	movs	r3, #1
 8008742:	73fb      	strb	r3, [r7, #15]
    break;
 8008744:	e00b      	b.n	800875e <DMA_CheckFifoParam+0xe6>
        break;
 8008746:	bf00      	nop
 8008748:	e00a      	b.n	8008760 <DMA_CheckFifoParam+0xe8>
        break;
 800874a:	bf00      	nop
 800874c:	e008      	b.n	8008760 <DMA_CheckFifoParam+0xe8>
        break;
 800874e:	bf00      	nop
 8008750:	e006      	b.n	8008760 <DMA_CheckFifoParam+0xe8>
        break;
 8008752:	bf00      	nop
 8008754:	e004      	b.n	8008760 <DMA_CheckFifoParam+0xe8>
        break;
 8008756:	bf00      	nop
 8008758:	e002      	b.n	8008760 <DMA_CheckFifoParam+0xe8>
        break;
 800875a:	bf00      	nop
 800875c:	e000      	b.n	8008760 <DMA_CheckFifoParam+0xe8>
    break;
 800875e:	bf00      	nop
    }
  }

  return status;
 8008760:	7bfb      	ldrb	r3, [r7, #15]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop

08008770 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a38      	ldr	r2, [pc, #224]	; (8008864 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d022      	beq.n	80087ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a36      	ldr	r2, [pc, #216]	; (8008868 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d01d      	beq.n	80087ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4a35      	ldr	r2, [pc, #212]	; (800886c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d018      	beq.n	80087ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	4a33      	ldr	r2, [pc, #204]	; (8008870 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d013      	beq.n	80087ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a32      	ldr	r2, [pc, #200]	; (8008874 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d00e      	beq.n	80087ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a30      	ldr	r2, [pc, #192]	; (8008878 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d009      	beq.n	80087ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a2f      	ldr	r2, [pc, #188]	; (800887c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d004      	beq.n	80087ce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a2d      	ldr	r2, [pc, #180]	; (8008880 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d101      	bne.n	80087d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80087ce:	2301      	movs	r3, #1
 80087d0:	e000      	b.n	80087d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80087d2:	2300      	movs	r3, #0
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01a      	beq.n	800880e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	3b08      	subs	r3, #8
 80087e0:	4a28      	ldr	r2, [pc, #160]	; (8008884 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80087e2:	fba2 2303 	umull	r2, r3, r2, r3
 80087e6:	091b      	lsrs	r3, r3, #4
 80087e8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	4b26      	ldr	r3, [pc, #152]	; (8008888 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	461a      	mov	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a24      	ldr	r2, [pc, #144]	; (800888c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80087fc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f003 031f 	and.w	r3, r3, #31
 8008804:	2201      	movs	r2, #1
 8008806:	409a      	lsls	r2, r3
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800880c:	e024      	b.n	8008858 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	b2db      	uxtb	r3, r3
 8008814:	3b10      	subs	r3, #16
 8008816:	4a1e      	ldr	r2, [pc, #120]	; (8008890 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008818:	fba2 2303 	umull	r2, r3, r2, r3
 800881c:	091b      	lsrs	r3, r3, #4
 800881e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	4a1c      	ldr	r2, [pc, #112]	; (8008894 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d806      	bhi.n	8008836 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	4a1b      	ldr	r2, [pc, #108]	; (8008898 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d902      	bls.n	8008836 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3308      	adds	r3, #8
 8008834:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008836:	68fa      	ldr	r2, [r7, #12]
 8008838:	4b18      	ldr	r3, [pc, #96]	; (800889c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800883a:	4413      	add	r3, r2
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	461a      	mov	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a16      	ldr	r2, [pc, #88]	; (80088a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008848:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f003 031f 	and.w	r3, r3, #31
 8008850:	2201      	movs	r2, #1
 8008852:	409a      	lsls	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008858:	bf00      	nop
 800885a:	3714      	adds	r7, #20
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	58025408 	.word	0x58025408
 8008868:	5802541c 	.word	0x5802541c
 800886c:	58025430 	.word	0x58025430
 8008870:	58025444 	.word	0x58025444
 8008874:	58025458 	.word	0x58025458
 8008878:	5802546c 	.word	0x5802546c
 800887c:	58025480 	.word	0x58025480
 8008880:	58025494 	.word	0x58025494
 8008884:	cccccccd 	.word	0xcccccccd
 8008888:	16009600 	.word	0x16009600
 800888c:	58025880 	.word	0x58025880
 8008890:	aaaaaaab 	.word	0xaaaaaaab
 8008894:	400204b8 	.word	0x400204b8
 8008898:	4002040f 	.word	0x4002040f
 800889c:	10008200 	.word	0x10008200
 80088a0:	40020880 	.word	0x40020880

080088a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d04a      	beq.n	8008950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2b08      	cmp	r3, #8
 80088be:	d847      	bhi.n	8008950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a25      	ldr	r2, [pc, #148]	; (800895c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d022      	beq.n	8008910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a24      	ldr	r2, [pc, #144]	; (8008960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d01d      	beq.n	8008910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a22      	ldr	r2, [pc, #136]	; (8008964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d018      	beq.n	8008910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a21      	ldr	r2, [pc, #132]	; (8008968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d013      	beq.n	8008910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a1f      	ldr	r2, [pc, #124]	; (800896c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d00e      	beq.n	8008910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a1e      	ldr	r2, [pc, #120]	; (8008970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d009      	beq.n	8008910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a1c      	ldr	r2, [pc, #112]	; (8008974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d004      	beq.n	8008910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a1b      	ldr	r2, [pc, #108]	; (8008978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d101      	bne.n	8008914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008910:	2301      	movs	r3, #1
 8008912:	e000      	b.n	8008916 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008914:	2300      	movs	r3, #0
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00a      	beq.n	8008930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	4b17      	ldr	r3, [pc, #92]	; (800897c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800891e:	4413      	add	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	461a      	mov	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a15      	ldr	r2, [pc, #84]	; (8008980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800892c:	671a      	str	r2, [r3, #112]	; 0x70
 800892e:	e009      	b.n	8008944 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	4b14      	ldr	r3, [pc, #80]	; (8008984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008934:	4413      	add	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	461a      	mov	r2, r3
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a11      	ldr	r2, [pc, #68]	; (8008988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008942:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	3b01      	subs	r3, #1
 8008948:	2201      	movs	r2, #1
 800894a:	409a      	lsls	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008950:	bf00      	nop
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	58025408 	.word	0x58025408
 8008960:	5802541c 	.word	0x5802541c
 8008964:	58025430 	.word	0x58025430
 8008968:	58025444 	.word	0x58025444
 800896c:	58025458 	.word	0x58025458
 8008970:	5802546c 	.word	0x5802546c
 8008974:	58025480 	.word	0x58025480
 8008978:	58025494 	.word	0x58025494
 800897c:	1600963f 	.word	0x1600963f
 8008980:	58025940 	.word	0x58025940
 8008984:	1000823f 	.word	0x1000823f
 8008988:	40020940 	.word	0x40020940

0800898c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800898c:	b480      	push	{r7}
 800898e:	b089      	sub	sp, #36	; 0x24
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008996:	2300      	movs	r3, #0
 8008998:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800899a:	4b89      	ldr	r3, [pc, #548]	; (8008bc0 <HAL_GPIO_Init+0x234>)
 800899c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800899e:	e194      	b.n	8008cca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	2101      	movs	r1, #1
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	fa01 f303 	lsl.w	r3, r1, r3
 80089ac:	4013      	ands	r3, r2
 80089ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80089b0:	693b      	ldr	r3, [r7, #16]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 8186 	beq.w	8008cc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f003 0303 	and.w	r3, r3, #3
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d005      	beq.n	80089d0 <HAL_GPIO_Init+0x44>
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f003 0303 	and.w	r3, r3, #3
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d130      	bne.n	8008a32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	2203      	movs	r2, #3
 80089dc:	fa02 f303 	lsl.w	r3, r2, r3
 80089e0:	43db      	mvns	r3, r3
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	4013      	ands	r3, r2
 80089e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	68da      	ldr	r2, [r3, #12]
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	005b      	lsls	r3, r3, #1
 80089f0:	fa02 f303 	lsl.w	r3, r2, r3
 80089f4:	69ba      	ldr	r2, [r7, #24]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a06:	2201      	movs	r2, #1
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0e:	43db      	mvns	r3, r3
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	4013      	ands	r3, r2
 8008a14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	091b      	lsrs	r3, r3, #4
 8008a1c:	f003 0201 	and.w	r2, r3, #1
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	fa02 f303 	lsl.w	r3, r2, r3
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	69ba      	ldr	r2, [r7, #24]
 8008a30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f003 0303 	and.w	r3, r3, #3
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d017      	beq.n	8008a6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	2203      	movs	r2, #3
 8008a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4e:	43db      	mvns	r3, r3
 8008a50:	69ba      	ldr	r2, [r7, #24]
 8008a52:	4013      	ands	r3, r2
 8008a54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	689a      	ldr	r2, [r3, #8]
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a62:	69ba      	ldr	r2, [r7, #24]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	69ba      	ldr	r2, [r7, #24]
 8008a6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f003 0303 	and.w	r3, r3, #3
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d123      	bne.n	8008ac2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	08da      	lsrs	r2, r3, #3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	3208      	adds	r2, #8
 8008a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a88:	69fb      	ldr	r3, [r7, #28]
 8008a8a:	f003 0307 	and.w	r3, r3, #7
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	220f      	movs	r2, #15
 8008a92:	fa02 f303 	lsl.w	r3, r2, r3
 8008a96:	43db      	mvns	r3, r3
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	691a      	ldr	r2, [r3, #16]
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008aae:	69ba      	ldr	r2, [r7, #24]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	08da      	lsrs	r2, r3, #3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	3208      	adds	r2, #8
 8008abc:	69b9      	ldr	r1, [r7, #24]
 8008abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	2203      	movs	r2, #3
 8008ace:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad2:	43db      	mvns	r3, r3
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f003 0203 	and.w	r2, r3, #3
 8008ae2:	69fb      	ldr	r3, [r7, #28]
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 80e0 	beq.w	8008cc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b04:	4b2f      	ldr	r3, [pc, #188]	; (8008bc4 <HAL_GPIO_Init+0x238>)
 8008b06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b0a:	4a2e      	ldr	r2, [pc, #184]	; (8008bc4 <HAL_GPIO_Init+0x238>)
 8008b0c:	f043 0302 	orr.w	r3, r3, #2
 8008b10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008b14:	4b2b      	ldr	r3, [pc, #172]	; (8008bc4 <HAL_GPIO_Init+0x238>)
 8008b16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b1a:	f003 0302 	and.w	r3, r3, #2
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b22:	4a29      	ldr	r2, [pc, #164]	; (8008bc8 <HAL_GPIO_Init+0x23c>)
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	089b      	lsrs	r3, r3, #2
 8008b28:	3302      	adds	r3, #2
 8008b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	f003 0303 	and.w	r3, r3, #3
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	220f      	movs	r2, #15
 8008b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3e:	43db      	mvns	r3, r3
 8008b40:	69ba      	ldr	r2, [r7, #24]
 8008b42:	4013      	ands	r3, r2
 8008b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a20      	ldr	r2, [pc, #128]	; (8008bcc <HAL_GPIO_Init+0x240>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d052      	beq.n	8008bf4 <HAL_GPIO_Init+0x268>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a1f      	ldr	r2, [pc, #124]	; (8008bd0 <HAL_GPIO_Init+0x244>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d031      	beq.n	8008bba <HAL_GPIO_Init+0x22e>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a1e      	ldr	r2, [pc, #120]	; (8008bd4 <HAL_GPIO_Init+0x248>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d02b      	beq.n	8008bb6 <HAL_GPIO_Init+0x22a>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a1d      	ldr	r2, [pc, #116]	; (8008bd8 <HAL_GPIO_Init+0x24c>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d025      	beq.n	8008bb2 <HAL_GPIO_Init+0x226>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a1c      	ldr	r2, [pc, #112]	; (8008bdc <HAL_GPIO_Init+0x250>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d01f      	beq.n	8008bae <HAL_GPIO_Init+0x222>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a1b      	ldr	r2, [pc, #108]	; (8008be0 <HAL_GPIO_Init+0x254>)
 8008b72:	4293      	cmp	r3, r2
 8008b74:	d019      	beq.n	8008baa <HAL_GPIO_Init+0x21e>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	4a1a      	ldr	r2, [pc, #104]	; (8008be4 <HAL_GPIO_Init+0x258>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d013      	beq.n	8008ba6 <HAL_GPIO_Init+0x21a>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a19      	ldr	r2, [pc, #100]	; (8008be8 <HAL_GPIO_Init+0x25c>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d00d      	beq.n	8008ba2 <HAL_GPIO_Init+0x216>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a18      	ldr	r2, [pc, #96]	; (8008bec <HAL_GPIO_Init+0x260>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d007      	beq.n	8008b9e <HAL_GPIO_Init+0x212>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a17      	ldr	r2, [pc, #92]	; (8008bf0 <HAL_GPIO_Init+0x264>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d101      	bne.n	8008b9a <HAL_GPIO_Init+0x20e>
 8008b96:	2309      	movs	r3, #9
 8008b98:	e02d      	b.n	8008bf6 <HAL_GPIO_Init+0x26a>
 8008b9a:	230a      	movs	r3, #10
 8008b9c:	e02b      	b.n	8008bf6 <HAL_GPIO_Init+0x26a>
 8008b9e:	2308      	movs	r3, #8
 8008ba0:	e029      	b.n	8008bf6 <HAL_GPIO_Init+0x26a>
 8008ba2:	2307      	movs	r3, #7
 8008ba4:	e027      	b.n	8008bf6 <HAL_GPIO_Init+0x26a>
 8008ba6:	2306      	movs	r3, #6
 8008ba8:	e025      	b.n	8008bf6 <HAL_GPIO_Init+0x26a>
 8008baa:	2305      	movs	r3, #5
 8008bac:	e023      	b.n	8008bf6 <HAL_GPIO_Init+0x26a>
 8008bae:	2304      	movs	r3, #4
 8008bb0:	e021      	b.n	8008bf6 <HAL_GPIO_Init+0x26a>
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e01f      	b.n	8008bf6 <HAL_GPIO_Init+0x26a>
 8008bb6:	2302      	movs	r3, #2
 8008bb8:	e01d      	b.n	8008bf6 <HAL_GPIO_Init+0x26a>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e01b      	b.n	8008bf6 <HAL_GPIO_Init+0x26a>
 8008bbe:	bf00      	nop
 8008bc0:	58000080 	.word	0x58000080
 8008bc4:	58024400 	.word	0x58024400
 8008bc8:	58000400 	.word	0x58000400
 8008bcc:	58020000 	.word	0x58020000
 8008bd0:	58020400 	.word	0x58020400
 8008bd4:	58020800 	.word	0x58020800
 8008bd8:	58020c00 	.word	0x58020c00
 8008bdc:	58021000 	.word	0x58021000
 8008be0:	58021400 	.word	0x58021400
 8008be4:	58021800 	.word	0x58021800
 8008be8:	58021c00 	.word	0x58021c00
 8008bec:	58022000 	.word	0x58022000
 8008bf0:	58022400 	.word	0x58022400
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	69fa      	ldr	r2, [r7, #28]
 8008bf8:	f002 0203 	and.w	r2, r2, #3
 8008bfc:	0092      	lsls	r2, r2, #2
 8008bfe:	4093      	lsls	r3, r2
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c06:	4938      	ldr	r1, [pc, #224]	; (8008ce8 <HAL_GPIO_Init+0x35c>)
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	089b      	lsrs	r3, r3, #2
 8008c0c:	3302      	adds	r3, #2
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	43db      	mvns	r3, r3
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	4013      	ands	r3, r2
 8008c24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d003      	beq.n	8008c3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008c32:	69ba      	ldr	r2, [r7, #24]
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008c3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008c42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	43db      	mvns	r3, r3
 8008c4e:	69ba      	ldr	r2, [r7, #24]
 8008c50:	4013      	ands	r3, r2
 8008c52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d003      	beq.n	8008c68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c6c:	69bb      	ldr	r3, [r7, #24]
 8008c6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	43db      	mvns	r3, r3
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d003      	beq.n	8008c94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	4313      	orrs	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	69ba      	ldr	r2, [r7, #24]
 8008c98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	43db      	mvns	r3, r3
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	69ba      	ldr	r2, [r7, #24]
 8008cc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	69fb      	ldr	r3, [r7, #28]
 8008cd0:	fa22 f303 	lsr.w	r3, r2, r3
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f47f ae63 	bne.w	80089a0 <HAL_GPIO_Init+0x14>
  }
}
 8008cda:	bf00      	nop
 8008cdc:	bf00      	nop
 8008cde:	3724      	adds	r7, #36	; 0x24
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr
 8008ce8:	58000400 	.word	0x58000400

08008cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	807b      	strh	r3, [r7, #2]
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008cfc:	787b      	ldrb	r3, [r7, #1]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d003      	beq.n	8008d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d02:	887a      	ldrh	r2, [r7, #2]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008d08:	e003      	b.n	8008d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008d0a:	887b      	ldrh	r3, [r7, #2]
 8008d0c:	041a      	lsls	r2, r3, #16
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	619a      	str	r2, [r3, #24]
}
 8008d12:	bf00      	nop
 8008d14:	370c      	adds	r7, #12
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008d1e:	b580      	push	{r7, lr}
 8008d20:	b082      	sub	sp, #8
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	4603      	mov	r3, r0
 8008d26:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d2c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008d30:	88fb      	ldrh	r3, [r7, #6]
 8008d32:	4013      	ands	r3, r2
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d008      	beq.n	8008d4a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008d38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d3c:	88fb      	ldrh	r3, [r7, #6]
 8008d3e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	4618      	mov	r0, r3
 8008d46:	f7fa fe45 	bl	80039d4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008d4a:	bf00      	nop
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
	...

08008d54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b084      	sub	sp, #16
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008d5c:	4b19      	ldr	r3, [pc, #100]	; (8008dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	f003 0304 	and.w	r3, r3, #4
 8008d64:	2b04      	cmp	r3, #4
 8008d66:	d00a      	beq.n	8008d7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008d68:	4b16      	ldr	r3, [pc, #88]	; (8008dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f003 0307 	and.w	r3, r3, #7
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d001      	beq.n	8008d7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e01f      	b.n	8008dba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	e01d      	b.n	8008dba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008d7e:	4b11      	ldr	r3, [pc, #68]	; (8008dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f023 0207 	bic.w	r2, r3, #7
 8008d86:	490f      	ldr	r1, [pc, #60]	; (8008dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008d8e:	f7fc fc91 	bl	80056b4 <HAL_GetTick>
 8008d92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008d94:	e009      	b.n	8008daa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008d96:	f7fc fc8d 	bl	80056b4 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008da4:	d901      	bls.n	8008daa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e007      	b.n	8008dba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008daa:	4b06      	ldr	r3, [pc, #24]	; (8008dc4 <HAL_PWREx_ConfigSupply+0x70>)
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008db2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008db6:	d1ee      	bne.n	8008d96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	58024800 	.word	0x58024800

08008dc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08c      	sub	sp, #48	; 0x30
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d102      	bne.n	8008ddc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	f000 bc1c 	b.w	8009614 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 0301 	and.w	r3, r3, #1
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	f000 8087 	beq.w	8008ef8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008dea:	4b9e      	ldr	r3, [pc, #632]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008df4:	4b9b      	ldr	r3, [pc, #620]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008df8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dfc:	2b10      	cmp	r3, #16
 8008dfe:	d007      	beq.n	8008e10 <HAL_RCC_OscConfig+0x48>
 8008e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e02:	2b18      	cmp	r3, #24
 8008e04:	d110      	bne.n	8008e28 <HAL_RCC_OscConfig+0x60>
 8008e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e08:	f003 0303 	and.w	r3, r3, #3
 8008e0c:	2b02      	cmp	r3, #2
 8008e0e:	d10b      	bne.n	8008e28 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e10:	4b94      	ldr	r3, [pc, #592]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d06c      	beq.n	8008ef6 <HAL_RCC_OscConfig+0x12e>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d168      	bne.n	8008ef6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008e24:	2301      	movs	r3, #1
 8008e26:	e3f5      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685b      	ldr	r3, [r3, #4]
 8008e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e30:	d106      	bne.n	8008e40 <HAL_RCC_OscConfig+0x78>
 8008e32:	4b8c      	ldr	r3, [pc, #560]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a8b      	ldr	r2, [pc, #556]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e3c:	6013      	str	r3, [r2, #0]
 8008e3e:	e02e      	b.n	8008e9e <HAL_RCC_OscConfig+0xd6>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d10c      	bne.n	8008e62 <HAL_RCC_OscConfig+0x9a>
 8008e48:	4b86      	ldr	r3, [pc, #536]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a85      	ldr	r2, [pc, #532]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e52:	6013      	str	r3, [r2, #0]
 8008e54:	4b83      	ldr	r3, [pc, #524]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a82      	ldr	r2, [pc, #520]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	e01d      	b.n	8008e9e <HAL_RCC_OscConfig+0xd6>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e6a:	d10c      	bne.n	8008e86 <HAL_RCC_OscConfig+0xbe>
 8008e6c:	4b7d      	ldr	r3, [pc, #500]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a7c      	ldr	r2, [pc, #496]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008e72:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	4b7a      	ldr	r3, [pc, #488]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a79      	ldr	r2, [pc, #484]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e82:	6013      	str	r3, [r2, #0]
 8008e84:	e00b      	b.n	8008e9e <HAL_RCC_OscConfig+0xd6>
 8008e86:	4b77      	ldr	r3, [pc, #476]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a76      	ldr	r2, [pc, #472]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e90:	6013      	str	r3, [r2, #0]
 8008e92:	4b74      	ldr	r3, [pc, #464]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a73      	ldr	r2, [pc, #460]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e9c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d013      	beq.n	8008ece <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ea6:	f7fc fc05 	bl	80056b4 <HAL_GetTick>
 8008eaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008eac:	e008      	b.n	8008ec0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008eae:	f7fc fc01 	bl	80056b4 <HAL_GetTick>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	1ad3      	subs	r3, r2, r3
 8008eb8:	2b64      	cmp	r3, #100	; 0x64
 8008eba:	d901      	bls.n	8008ec0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	e3a9      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ec0:	4b68      	ldr	r3, [pc, #416]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d0f0      	beq.n	8008eae <HAL_RCC_OscConfig+0xe6>
 8008ecc:	e014      	b.n	8008ef8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ece:	f7fc fbf1 	bl	80056b4 <HAL_GetTick>
 8008ed2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ed4:	e008      	b.n	8008ee8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ed6:	f7fc fbed 	bl	80056b4 <HAL_GetTick>
 8008eda:	4602      	mov	r2, r0
 8008edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	2b64      	cmp	r3, #100	; 0x64
 8008ee2:	d901      	bls.n	8008ee8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e395      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ee8:	4b5e      	ldr	r3, [pc, #376]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1f0      	bne.n	8008ed6 <HAL_RCC_OscConfig+0x10e>
 8008ef4:	e000      	b.n	8008ef8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ef6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0302 	and.w	r3, r3, #2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 80ca 	beq.w	800909a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f06:	4b57      	ldr	r3, [pc, #348]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f0e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f10:	4b54      	ldr	r3, [pc, #336]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f14:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008f16:	6a3b      	ldr	r3, [r7, #32]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <HAL_RCC_OscConfig+0x164>
 8008f1c:	6a3b      	ldr	r3, [r7, #32]
 8008f1e:	2b18      	cmp	r3, #24
 8008f20:	d156      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x208>
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	f003 0303 	and.w	r3, r3, #3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d151      	bne.n	8008fd0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008f2c:	4b4d      	ldr	r3, [pc, #308]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 0304 	and.w	r3, r3, #4
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d005      	beq.n	8008f44 <HAL_RCC_OscConfig+0x17c>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d101      	bne.n	8008f44 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e367      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f44:	4b47      	ldr	r3, [pc, #284]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f023 0219 	bic.w	r2, r3, #25
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	4944      	ldr	r1, [pc, #272]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008f52:	4313      	orrs	r3, r2
 8008f54:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008f56:	f7fc fbad 	bl	80056b4 <HAL_GetTick>
 8008f5a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f5c:	e008      	b.n	8008f70 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f5e:	f7fc fba9 	bl	80056b4 <HAL_GetTick>
 8008f62:	4602      	mov	r2, r0
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	d901      	bls.n	8008f70 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	e351      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f70:	4b3c      	ldr	r3, [pc, #240]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f003 0304 	and.w	r3, r3, #4
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d0f0      	beq.n	8008f5e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f7c:	f7fc fba6 	bl	80056cc <HAL_GetREVID>
 8008f80:	4603      	mov	r3, r0
 8008f82:	f241 0203 	movw	r2, #4099	; 0x1003
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d817      	bhi.n	8008fba <HAL_RCC_OscConfig+0x1f2>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	2b40      	cmp	r3, #64	; 0x40
 8008f90:	d108      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x1dc>
 8008f92:	4b34      	ldr	r3, [pc, #208]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008f9a:	4a32      	ldr	r2, [pc, #200]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fa0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fa2:	e07a      	b.n	800909a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fa4:	4b2f      	ldr	r3, [pc, #188]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008fa6:	685b      	ldr	r3, [r3, #4]
 8008fa8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	691b      	ldr	r3, [r3, #16]
 8008fb0:	031b      	lsls	r3, r3, #12
 8008fb2:	492c      	ldr	r1, [pc, #176]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fb8:	e06f      	b.n	800909a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fba:	4b2a      	ldr	r3, [pc, #168]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	691b      	ldr	r3, [r3, #16]
 8008fc6:	061b      	lsls	r3, r3, #24
 8008fc8:	4926      	ldr	r1, [pc, #152]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fce:	e064      	b.n	800909a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d047      	beq.n	8009068 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008fd8:	4b22      	ldr	r3, [pc, #136]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f023 0219 	bic.w	r2, r3, #25
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	491f      	ldr	r1, [pc, #124]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fea:	f7fc fb63 	bl	80056b4 <HAL_GetTick>
 8008fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ff0:	e008      	b.n	8009004 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ff2:	f7fc fb5f 	bl	80056b4 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d901      	bls.n	8009004 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e307      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009004:	4b17      	ldr	r3, [pc, #92]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0f0      	beq.n	8008ff2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009010:	f7fc fb5c 	bl	80056cc <HAL_GetREVID>
 8009014:	4603      	mov	r3, r0
 8009016:	f241 0203 	movw	r2, #4099	; 0x1003
 800901a:	4293      	cmp	r3, r2
 800901c:	d817      	bhi.n	800904e <HAL_RCC_OscConfig+0x286>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	2b40      	cmp	r3, #64	; 0x40
 8009024:	d108      	bne.n	8009038 <HAL_RCC_OscConfig+0x270>
 8009026:	4b0f      	ldr	r3, [pc, #60]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800902e:	4a0d      	ldr	r2, [pc, #52]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8009030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009034:	6053      	str	r3, [r2, #4]
 8009036:	e030      	b.n	800909a <HAL_RCC_OscConfig+0x2d2>
 8009038:	4b0a      	ldr	r3, [pc, #40]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	031b      	lsls	r3, r3, #12
 8009046:	4907      	ldr	r1, [pc, #28]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8009048:	4313      	orrs	r3, r2
 800904a:	604b      	str	r3, [r1, #4]
 800904c:	e025      	b.n	800909a <HAL_RCC_OscConfig+0x2d2>
 800904e:	4b05      	ldr	r3, [pc, #20]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	691b      	ldr	r3, [r3, #16]
 800905a:	061b      	lsls	r3, r3, #24
 800905c:	4901      	ldr	r1, [pc, #4]	; (8009064 <HAL_RCC_OscConfig+0x29c>)
 800905e:	4313      	orrs	r3, r2
 8009060:	604b      	str	r3, [r1, #4]
 8009062:	e01a      	b.n	800909a <HAL_RCC_OscConfig+0x2d2>
 8009064:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009068:	4b9e      	ldr	r3, [pc, #632]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a9d      	ldr	r2, [pc, #628]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 800906e:	f023 0301 	bic.w	r3, r3, #1
 8009072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009074:	f7fc fb1e 	bl	80056b4 <HAL_GetTick>
 8009078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800907a:	e008      	b.n	800908e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800907c:	f7fc fb1a 	bl	80056b4 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b02      	cmp	r3, #2
 8009088:	d901      	bls.n	800908e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e2c2      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800908e:	4b95      	ldr	r3, [pc, #596]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f003 0304 	and.w	r3, r3, #4
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1f0      	bne.n	800907c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0310 	and.w	r3, r3, #16
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	f000 80a9 	beq.w	80091fa <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090a8:	4b8e      	ldr	r3, [pc, #568]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 80090aa:	691b      	ldr	r3, [r3, #16]
 80090ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090b0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80090b2:	4b8c      	ldr	r3, [pc, #560]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 80090b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b6:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	2b08      	cmp	r3, #8
 80090bc:	d007      	beq.n	80090ce <HAL_RCC_OscConfig+0x306>
 80090be:	69bb      	ldr	r3, [r7, #24]
 80090c0:	2b18      	cmp	r3, #24
 80090c2:	d13a      	bne.n	800913a <HAL_RCC_OscConfig+0x372>
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	f003 0303 	and.w	r3, r3, #3
 80090ca:	2b01      	cmp	r3, #1
 80090cc:	d135      	bne.n	800913a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80090ce:	4b85      	ldr	r3, [pc, #532]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d005      	beq.n	80090e6 <HAL_RCC_OscConfig+0x31e>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	2b80      	cmp	r3, #128	; 0x80
 80090e0:	d001      	beq.n	80090e6 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	e296      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80090e6:	f7fc faf1 	bl	80056cc <HAL_GetREVID>
 80090ea:	4603      	mov	r3, r0
 80090ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d817      	bhi.n	8009124 <HAL_RCC_OscConfig+0x35c>
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	2b20      	cmp	r3, #32
 80090fa:	d108      	bne.n	800910e <HAL_RCC_OscConfig+0x346>
 80090fc:	4b79      	ldr	r3, [pc, #484]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009104:	4a77      	ldr	r2, [pc, #476]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 8009106:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800910a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800910c:	e075      	b.n	80091fa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800910e:	4b75      	ldr	r3, [pc, #468]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a1b      	ldr	r3, [r3, #32]
 800911a:	069b      	lsls	r3, r3, #26
 800911c:	4971      	ldr	r1, [pc, #452]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 800911e:	4313      	orrs	r3, r2
 8009120:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009122:	e06a      	b.n	80091fa <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009124:	4b6f      	ldr	r3, [pc, #444]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a1b      	ldr	r3, [r3, #32]
 8009130:	061b      	lsls	r3, r3, #24
 8009132:	496c      	ldr	r1, [pc, #432]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 8009134:	4313      	orrs	r3, r2
 8009136:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009138:	e05f      	b.n	80091fa <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d042      	beq.n	80091c8 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009142:	4b68      	ldr	r3, [pc, #416]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a67      	ldr	r2, [pc, #412]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 8009148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800914c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800914e:	f7fc fab1 	bl	80056b4 <HAL_GetTick>
 8009152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009154:	e008      	b.n	8009168 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009156:	f7fc faad 	bl	80056b4 <HAL_GetTick>
 800915a:	4602      	mov	r2, r0
 800915c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915e:	1ad3      	subs	r3, r2, r3
 8009160:	2b02      	cmp	r3, #2
 8009162:	d901      	bls.n	8009168 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8009164:	2303      	movs	r3, #3
 8009166:	e255      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009168:	4b5e      	ldr	r3, [pc, #376]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009170:	2b00      	cmp	r3, #0
 8009172:	d0f0      	beq.n	8009156 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009174:	f7fc faaa 	bl	80056cc <HAL_GetREVID>
 8009178:	4603      	mov	r3, r0
 800917a:	f241 0203 	movw	r2, #4099	; 0x1003
 800917e:	4293      	cmp	r3, r2
 8009180:	d817      	bhi.n	80091b2 <HAL_RCC_OscConfig+0x3ea>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	2b20      	cmp	r3, #32
 8009188:	d108      	bne.n	800919c <HAL_RCC_OscConfig+0x3d4>
 800918a:	4b56      	ldr	r3, [pc, #344]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009192:	4a54      	ldr	r2, [pc, #336]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 8009194:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009198:	6053      	str	r3, [r2, #4]
 800919a:	e02e      	b.n	80091fa <HAL_RCC_OscConfig+0x432>
 800919c:	4b51      	ldr	r3, [pc, #324]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a1b      	ldr	r3, [r3, #32]
 80091a8:	069b      	lsls	r3, r3, #26
 80091aa:	494e      	ldr	r1, [pc, #312]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 80091ac:	4313      	orrs	r3, r2
 80091ae:	604b      	str	r3, [r1, #4]
 80091b0:	e023      	b.n	80091fa <HAL_RCC_OscConfig+0x432>
 80091b2:	4b4c      	ldr	r3, [pc, #304]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	061b      	lsls	r3, r3, #24
 80091c0:	4948      	ldr	r1, [pc, #288]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60cb      	str	r3, [r1, #12]
 80091c6:	e018      	b.n	80091fa <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80091c8:	4b46      	ldr	r3, [pc, #280]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a45      	ldr	r2, [pc, #276]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 80091ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d4:	f7fc fa6e 	bl	80056b4 <HAL_GetTick>
 80091d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091da:	e008      	b.n	80091ee <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80091dc:	f7fc fa6a 	bl	80056b4 <HAL_GetTick>
 80091e0:	4602      	mov	r2, r0
 80091e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e4:	1ad3      	subs	r3, r2, r3
 80091e6:	2b02      	cmp	r3, #2
 80091e8:	d901      	bls.n	80091ee <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80091ea:	2303      	movs	r3, #3
 80091ec:	e212      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80091ee:	4b3d      	ldr	r3, [pc, #244]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1f0      	bne.n	80091dc <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0308 	and.w	r3, r3, #8
 8009202:	2b00      	cmp	r3, #0
 8009204:	d036      	beq.n	8009274 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d019      	beq.n	8009242 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800920e:	4b35      	ldr	r3, [pc, #212]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 8009210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009212:	4a34      	ldr	r2, [pc, #208]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 8009214:	f043 0301 	orr.w	r3, r3, #1
 8009218:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800921a:	f7fc fa4b 	bl	80056b4 <HAL_GetTick>
 800921e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009220:	e008      	b.n	8009234 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009222:	f7fc fa47 	bl	80056b4 <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	2b02      	cmp	r3, #2
 800922e:	d901      	bls.n	8009234 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009230:	2303      	movs	r3, #3
 8009232:	e1ef      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009234:	4b2b      	ldr	r3, [pc, #172]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 8009236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009238:	f003 0302 	and.w	r3, r3, #2
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0f0      	beq.n	8009222 <HAL_RCC_OscConfig+0x45a>
 8009240:	e018      	b.n	8009274 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009242:	4b28      	ldr	r3, [pc, #160]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 8009244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009246:	4a27      	ldr	r2, [pc, #156]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 8009248:	f023 0301 	bic.w	r3, r3, #1
 800924c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800924e:	f7fc fa31 	bl	80056b4 <HAL_GetTick>
 8009252:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009254:	e008      	b.n	8009268 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009256:	f7fc fa2d 	bl	80056b4 <HAL_GetTick>
 800925a:	4602      	mov	r2, r0
 800925c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925e:	1ad3      	subs	r3, r2, r3
 8009260:	2b02      	cmp	r3, #2
 8009262:	d901      	bls.n	8009268 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8009264:	2303      	movs	r3, #3
 8009266:	e1d5      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009268:	4b1e      	ldr	r3, [pc, #120]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 800926a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800926c:	f003 0302 	and.w	r3, r3, #2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1f0      	bne.n	8009256 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f003 0320 	and.w	r3, r3, #32
 800927c:	2b00      	cmp	r3, #0
 800927e:	d039      	beq.n	80092f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d019      	beq.n	80092bc <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009288:	4b16      	ldr	r3, [pc, #88]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a15      	ldr	r2, [pc, #84]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 800928e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009292:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009294:	f7fc fa0e 	bl	80056b4 <HAL_GetTick>
 8009298:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800929a:	e008      	b.n	80092ae <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800929c:	f7fc fa0a 	bl	80056b4 <HAL_GetTick>
 80092a0:	4602      	mov	r2, r0
 80092a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a4:	1ad3      	subs	r3, r2, r3
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	d901      	bls.n	80092ae <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80092aa:	2303      	movs	r3, #3
 80092ac:	e1b2      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80092ae:	4b0d      	ldr	r3, [pc, #52]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d0f0      	beq.n	800929c <HAL_RCC_OscConfig+0x4d4>
 80092ba:	e01b      	b.n	80092f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092bc:	4b09      	ldr	r3, [pc, #36]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a08      	ldr	r2, [pc, #32]	; (80092e4 <HAL_RCC_OscConfig+0x51c>)
 80092c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092c6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80092c8:	f7fc f9f4 	bl	80056b4 <HAL_GetTick>
 80092cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092ce:	e00b      	b.n	80092e8 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80092d0:	f7fc f9f0 	bl	80056b4 <HAL_GetTick>
 80092d4:	4602      	mov	r2, r0
 80092d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d904      	bls.n	80092e8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80092de:	2303      	movs	r3, #3
 80092e0:	e198      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
 80092e2:	bf00      	nop
 80092e4:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80092e8:	4ba3      	ldr	r3, [pc, #652]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d1ed      	bne.n	80092d0 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	f000 8081 	beq.w	8009404 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009302:	4b9e      	ldr	r3, [pc, #632]	; (800957c <HAL_RCC_OscConfig+0x7b4>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a9d      	ldr	r2, [pc, #628]	; (800957c <HAL_RCC_OscConfig+0x7b4>)
 8009308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800930c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800930e:	f7fc f9d1 	bl	80056b4 <HAL_GetTick>
 8009312:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009314:	e008      	b.n	8009328 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009316:	f7fc f9cd 	bl	80056b4 <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b64      	cmp	r3, #100	; 0x64
 8009322:	d901      	bls.n	8009328 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e175      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009328:	4b94      	ldr	r3, [pc, #592]	; (800957c <HAL_RCC_OscConfig+0x7b4>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0f0      	beq.n	8009316 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d106      	bne.n	800934a <HAL_RCC_OscConfig+0x582>
 800933c:	4b8e      	ldr	r3, [pc, #568]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 800933e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009340:	4a8d      	ldr	r2, [pc, #564]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009342:	f043 0301 	orr.w	r3, r3, #1
 8009346:	6713      	str	r3, [r2, #112]	; 0x70
 8009348:	e02d      	b.n	80093a6 <HAL_RCC_OscConfig+0x5de>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d10c      	bne.n	800936c <HAL_RCC_OscConfig+0x5a4>
 8009352:	4b89      	ldr	r3, [pc, #548]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009356:	4a88      	ldr	r2, [pc, #544]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009358:	f023 0301 	bic.w	r3, r3, #1
 800935c:	6713      	str	r3, [r2, #112]	; 0x70
 800935e:	4b86      	ldr	r3, [pc, #536]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009362:	4a85      	ldr	r2, [pc, #532]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009364:	f023 0304 	bic.w	r3, r3, #4
 8009368:	6713      	str	r3, [r2, #112]	; 0x70
 800936a:	e01c      	b.n	80093a6 <HAL_RCC_OscConfig+0x5de>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	2b05      	cmp	r3, #5
 8009372:	d10c      	bne.n	800938e <HAL_RCC_OscConfig+0x5c6>
 8009374:	4b80      	ldr	r3, [pc, #512]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009378:	4a7f      	ldr	r2, [pc, #508]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 800937a:	f043 0304 	orr.w	r3, r3, #4
 800937e:	6713      	str	r3, [r2, #112]	; 0x70
 8009380:	4b7d      	ldr	r3, [pc, #500]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009384:	4a7c      	ldr	r2, [pc, #496]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009386:	f043 0301 	orr.w	r3, r3, #1
 800938a:	6713      	str	r3, [r2, #112]	; 0x70
 800938c:	e00b      	b.n	80093a6 <HAL_RCC_OscConfig+0x5de>
 800938e:	4b7a      	ldr	r3, [pc, #488]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009392:	4a79      	ldr	r2, [pc, #484]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009394:	f023 0301 	bic.w	r3, r3, #1
 8009398:	6713      	str	r3, [r2, #112]	; 0x70
 800939a:	4b77      	ldr	r3, [pc, #476]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 800939c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800939e:	4a76      	ldr	r2, [pc, #472]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80093a0:	f023 0304 	bic.w	r3, r3, #4
 80093a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d015      	beq.n	80093da <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ae:	f7fc f981 	bl	80056b4 <HAL_GetTick>
 80093b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093b4:	e00a      	b.n	80093cc <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093b6:	f7fc f97d 	bl	80056b4 <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d901      	bls.n	80093cc <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80093c8:	2303      	movs	r3, #3
 80093ca:	e123      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093cc:	4b6a      	ldr	r3, [pc, #424]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80093ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d0:	f003 0302 	and.w	r3, r3, #2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d0ee      	beq.n	80093b6 <HAL_RCC_OscConfig+0x5ee>
 80093d8:	e014      	b.n	8009404 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093da:	f7fc f96b 	bl	80056b4 <HAL_GetTick>
 80093de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093e0:	e00a      	b.n	80093f8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80093e2:	f7fc f967 	bl	80056b4 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d901      	bls.n	80093f8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	e10d      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80093f8:	4b5f      	ldr	r3, [pc, #380]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80093fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fc:	f003 0302 	and.w	r3, r3, #2
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1ee      	bne.n	80093e2 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009408:	2b00      	cmp	r3, #0
 800940a:	f000 8102 	beq.w	8009612 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800940e:	4b5a      	ldr	r3, [pc, #360]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009416:	2b18      	cmp	r3, #24
 8009418:	f000 80bd 	beq.w	8009596 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009420:	2b02      	cmp	r3, #2
 8009422:	f040 8095 	bne.w	8009550 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009426:	4b54      	ldr	r3, [pc, #336]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a53      	ldr	r2, [pc, #332]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 800942c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009432:	f7fc f93f 	bl	80056b4 <HAL_GetTick>
 8009436:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009438:	e008      	b.n	800944c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800943a:	f7fc f93b 	bl	80056b4 <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	2b02      	cmp	r3, #2
 8009446:	d901      	bls.n	800944c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e0e3      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800944c:	4b4a      	ldr	r3, [pc, #296]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1f0      	bne.n	800943a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009458:	4b47      	ldr	r3, [pc, #284]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 800945a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800945c:	4b48      	ldr	r3, [pc, #288]	; (8009580 <HAL_RCC_OscConfig+0x7b8>)
 800945e:	4013      	ands	r3, r2
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009468:	0112      	lsls	r2, r2, #4
 800946a:	430a      	orrs	r2, r1
 800946c:	4942      	ldr	r1, [pc, #264]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 800946e:	4313      	orrs	r3, r2
 8009470:	628b      	str	r3, [r1, #40]	; 0x28
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009476:	3b01      	subs	r3, #1
 8009478:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009480:	3b01      	subs	r3, #1
 8009482:	025b      	lsls	r3, r3, #9
 8009484:	b29b      	uxth	r3, r3
 8009486:	431a      	orrs	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948c:	3b01      	subs	r3, #1
 800948e:	041b      	lsls	r3, r3, #16
 8009490:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009494:	431a      	orrs	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949a:	3b01      	subs	r3, #1
 800949c:	061b      	lsls	r3, r3, #24
 800949e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80094a2:	4935      	ldr	r1, [pc, #212]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80094a4:	4313      	orrs	r3, r2
 80094a6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80094a8:	4b33      	ldr	r3, [pc, #204]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80094aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ac:	4a32      	ldr	r2, [pc, #200]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80094ae:	f023 0301 	bic.w	r3, r3, #1
 80094b2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80094b4:	4b30      	ldr	r3, [pc, #192]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80094b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094b8:	4b32      	ldr	r3, [pc, #200]	; (8009584 <HAL_RCC_OscConfig+0x7bc>)
 80094ba:	4013      	ands	r3, r2
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80094c0:	00d2      	lsls	r2, r2, #3
 80094c2:	492d      	ldr	r1, [pc, #180]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80094c4:	4313      	orrs	r3, r2
 80094c6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80094c8:	4b2b      	ldr	r3, [pc, #172]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80094ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094cc:	f023 020c 	bic.w	r2, r3, #12
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d4:	4928      	ldr	r1, [pc, #160]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80094d6:	4313      	orrs	r3, r2
 80094d8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80094da:	4b27      	ldr	r3, [pc, #156]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80094dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094de:	f023 0202 	bic.w	r2, r3, #2
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094e6:	4924      	ldr	r1, [pc, #144]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80094e8:	4313      	orrs	r3, r2
 80094ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80094ec:	4b22      	ldr	r3, [pc, #136]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80094ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f0:	4a21      	ldr	r2, [pc, #132]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80094f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80094f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094f8:	4b1f      	ldr	r3, [pc, #124]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80094fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fc:	4a1e      	ldr	r2, [pc, #120]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 80094fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009502:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009504:	4b1c      	ldr	r3, [pc, #112]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009508:	4a1b      	ldr	r2, [pc, #108]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 800950a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800950e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009510:	4b19      	ldr	r3, [pc, #100]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009514:	4a18      	ldr	r2, [pc, #96]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009516:	f043 0301 	orr.w	r3, r3, #1
 800951a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800951c:	4b16      	ldr	r3, [pc, #88]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a15      	ldr	r2, [pc, #84]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009522:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009528:	f7fc f8c4 	bl	80056b4 <HAL_GetTick>
 800952c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800952e:	e008      	b.n	8009542 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009530:	f7fc f8c0 	bl	80056b4 <HAL_GetTick>
 8009534:	4602      	mov	r2, r0
 8009536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	2b02      	cmp	r3, #2
 800953c:	d901      	bls.n	8009542 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800953e:	2303      	movs	r3, #3
 8009540:	e068      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009542:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800954a:	2b00      	cmp	r3, #0
 800954c:	d0f0      	beq.n	8009530 <HAL_RCC_OscConfig+0x768>
 800954e:	e060      	b.n	8009612 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009550:	4b09      	ldr	r3, [pc, #36]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a08      	ldr	r2, [pc, #32]	; (8009578 <HAL_RCC_OscConfig+0x7b0>)
 8009556:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800955a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800955c:	f7fc f8aa 	bl	80056b4 <HAL_GetTick>
 8009560:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009562:	e011      	b.n	8009588 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009564:	f7fc f8a6 	bl	80056b4 <HAL_GetTick>
 8009568:	4602      	mov	r2, r0
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	2b02      	cmp	r3, #2
 8009570:	d90a      	bls.n	8009588 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8009572:	2303      	movs	r3, #3
 8009574:	e04e      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
 8009576:	bf00      	nop
 8009578:	58024400 	.word	0x58024400
 800957c:	58024800 	.word	0x58024800
 8009580:	fffffc0c 	.word	0xfffffc0c
 8009584:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009588:	4b24      	ldr	r3, [pc, #144]	; (800961c <HAL_RCC_OscConfig+0x854>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1e7      	bne.n	8009564 <HAL_RCC_OscConfig+0x79c>
 8009594:	e03d      	b.n	8009612 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009596:	4b21      	ldr	r3, [pc, #132]	; (800961c <HAL_RCC_OscConfig+0x854>)
 8009598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800959a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800959c:	4b1f      	ldr	r3, [pc, #124]	; (800961c <HAL_RCC_OscConfig+0x854>)
 800959e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a0:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a6:	2b01      	cmp	r3, #1
 80095a8:	d031      	beq.n	800960e <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f003 0203 	and.w	r2, r3, #3
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d12a      	bne.n	800960e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	091b      	lsrs	r3, r3, #4
 80095bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095c4:	429a      	cmp	r2, r3
 80095c6:	d122      	bne.n	800960e <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d11a      	bne.n	800960e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	0a5b      	lsrs	r3, r3, #9
 80095dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d111      	bne.n	800960e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	0c1b      	lsrs	r3, r3, #16
 80095ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d108      	bne.n	800960e <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	0e1b      	lsrs	r3, r3, #24
 8009600:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009608:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800960a:	429a      	cmp	r2, r3
 800960c:	d001      	beq.n	8009612 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	e000      	b.n	8009614 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3730      	adds	r7, #48	; 0x30
 8009618:	46bd      	mov	sp, r7
 800961a:	bd80      	pop	{r7, pc}
 800961c:	58024400 	.word	0x58024400

08009620 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d101      	bne.n	8009634 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	e19c      	b.n	800996e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009634:	4b8a      	ldr	r3, [pc, #552]	; (8009860 <HAL_RCC_ClockConfig+0x240>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f003 030f 	and.w	r3, r3, #15
 800963c:	683a      	ldr	r2, [r7, #0]
 800963e:	429a      	cmp	r2, r3
 8009640:	d910      	bls.n	8009664 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009642:	4b87      	ldr	r3, [pc, #540]	; (8009860 <HAL_RCC_ClockConfig+0x240>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f023 020f 	bic.w	r2, r3, #15
 800964a:	4985      	ldr	r1, [pc, #532]	; (8009860 <HAL_RCC_ClockConfig+0x240>)
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	4313      	orrs	r3, r2
 8009650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009652:	4b83      	ldr	r3, [pc, #524]	; (8009860 <HAL_RCC_ClockConfig+0x240>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f003 030f 	and.w	r3, r3, #15
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	429a      	cmp	r2, r3
 800965e:	d001      	beq.n	8009664 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	e184      	b.n	800996e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 0304 	and.w	r3, r3, #4
 800966c:	2b00      	cmp	r3, #0
 800966e:	d010      	beq.n	8009692 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	691a      	ldr	r2, [r3, #16]
 8009674:	4b7b      	ldr	r3, [pc, #492]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 8009676:	699b      	ldr	r3, [r3, #24]
 8009678:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800967c:	429a      	cmp	r2, r3
 800967e:	d908      	bls.n	8009692 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009680:	4b78      	ldr	r3, [pc, #480]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	4975      	ldr	r1, [pc, #468]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 800968e:	4313      	orrs	r3, r2
 8009690:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f003 0308 	and.w	r3, r3, #8
 800969a:	2b00      	cmp	r3, #0
 800969c:	d010      	beq.n	80096c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	695a      	ldr	r2, [r3, #20]
 80096a2:	4b70      	ldr	r3, [pc, #448]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 80096a4:	69db      	ldr	r3, [r3, #28]
 80096a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d908      	bls.n	80096c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80096ae:	4b6d      	ldr	r3, [pc, #436]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	496a      	ldr	r1, [pc, #424]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 80096bc:	4313      	orrs	r3, r2
 80096be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0310 	and.w	r3, r3, #16
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d010      	beq.n	80096ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	699a      	ldr	r2, [r3, #24]
 80096d0:	4b64      	ldr	r3, [pc, #400]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 80096d2:	69db      	ldr	r3, [r3, #28]
 80096d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80096d8:	429a      	cmp	r2, r3
 80096da:	d908      	bls.n	80096ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80096dc:	4b61      	ldr	r3, [pc, #388]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 80096de:	69db      	ldr	r3, [r3, #28]
 80096e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	699b      	ldr	r3, [r3, #24]
 80096e8:	495e      	ldr	r1, [pc, #376]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 80096ea:	4313      	orrs	r3, r2
 80096ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 0320 	and.w	r3, r3, #32
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d010      	beq.n	800971c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	69da      	ldr	r2, [r3, #28]
 80096fe:	4b59      	ldr	r3, [pc, #356]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 8009700:	6a1b      	ldr	r3, [r3, #32]
 8009702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009706:	429a      	cmp	r2, r3
 8009708:	d908      	bls.n	800971c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800970a:	4b56      	ldr	r3, [pc, #344]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	69db      	ldr	r3, [r3, #28]
 8009716:	4953      	ldr	r1, [pc, #332]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 8009718:	4313      	orrs	r3, r2
 800971a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f003 0302 	and.w	r3, r3, #2
 8009724:	2b00      	cmp	r3, #0
 8009726:	d010      	beq.n	800974a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68da      	ldr	r2, [r3, #12]
 800972c:	4b4d      	ldr	r3, [pc, #308]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	f003 030f 	and.w	r3, r3, #15
 8009734:	429a      	cmp	r2, r3
 8009736:	d908      	bls.n	800974a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009738:	4b4a      	ldr	r3, [pc, #296]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	f023 020f 	bic.w	r2, r3, #15
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	4947      	ldr	r1, [pc, #284]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 8009746:	4313      	orrs	r3, r2
 8009748:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	2b00      	cmp	r3, #0
 8009754:	d055      	beq.n	8009802 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009756:	4b43      	ldr	r3, [pc, #268]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	4940      	ldr	r1, [pc, #256]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 8009764:	4313      	orrs	r3, r2
 8009766:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	2b02      	cmp	r3, #2
 800976e:	d107      	bne.n	8009780 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009770:	4b3c      	ldr	r3, [pc, #240]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d121      	bne.n	80097c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e0f6      	b.n	800996e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	2b03      	cmp	r3, #3
 8009786:	d107      	bne.n	8009798 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009788:	4b36      	ldr	r3, [pc, #216]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d115      	bne.n	80097c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e0ea      	b.n	800996e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	2b01      	cmp	r3, #1
 800979e:	d107      	bne.n	80097b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80097a0:	4b30      	ldr	r3, [pc, #192]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d109      	bne.n	80097c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80097ac:	2301      	movs	r3, #1
 80097ae:	e0de      	b.n	800996e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80097b0:	4b2c      	ldr	r3, [pc, #176]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 0304 	and.w	r3, r3, #4
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e0d6      	b.n	800996e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80097c0:	4b28      	ldr	r3, [pc, #160]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 80097c2:	691b      	ldr	r3, [r3, #16]
 80097c4:	f023 0207 	bic.w	r2, r3, #7
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	4925      	ldr	r1, [pc, #148]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80097d2:	f7fb ff6f 	bl	80056b4 <HAL_GetTick>
 80097d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097d8:	e00a      	b.n	80097f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097da:	f7fb ff6b 	bl	80056b4 <HAL_GetTick>
 80097de:	4602      	mov	r2, r0
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	1ad3      	subs	r3, r2, r3
 80097e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d901      	bls.n	80097f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e0be      	b.n	800996e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80097f0:	4b1c      	ldr	r3, [pc, #112]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	00db      	lsls	r3, r3, #3
 80097fe:	429a      	cmp	r2, r3
 8009800:	d1eb      	bne.n	80097da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f003 0302 	and.w	r3, r3, #2
 800980a:	2b00      	cmp	r3, #0
 800980c:	d010      	beq.n	8009830 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	68da      	ldr	r2, [r3, #12]
 8009812:	4b14      	ldr	r3, [pc, #80]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	f003 030f 	and.w	r3, r3, #15
 800981a:	429a      	cmp	r2, r3
 800981c:	d208      	bcs.n	8009830 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800981e:	4b11      	ldr	r3, [pc, #68]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	f023 020f 	bic.w	r2, r3, #15
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	490e      	ldr	r1, [pc, #56]	; (8009864 <HAL_RCC_ClockConfig+0x244>)
 800982c:	4313      	orrs	r3, r2
 800982e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009830:	4b0b      	ldr	r3, [pc, #44]	; (8009860 <HAL_RCC_ClockConfig+0x240>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 030f 	and.w	r3, r3, #15
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	429a      	cmp	r2, r3
 800983c:	d214      	bcs.n	8009868 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800983e:	4b08      	ldr	r3, [pc, #32]	; (8009860 <HAL_RCC_ClockConfig+0x240>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f023 020f 	bic.w	r2, r3, #15
 8009846:	4906      	ldr	r1, [pc, #24]	; (8009860 <HAL_RCC_ClockConfig+0x240>)
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	4313      	orrs	r3, r2
 800984c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800984e:	4b04      	ldr	r3, [pc, #16]	; (8009860 <HAL_RCC_ClockConfig+0x240>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 030f 	and.w	r3, r3, #15
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	429a      	cmp	r2, r3
 800985a:	d005      	beq.n	8009868 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800985c:	2301      	movs	r3, #1
 800985e:	e086      	b.n	800996e <HAL_RCC_ClockConfig+0x34e>
 8009860:	52002000 	.word	0x52002000
 8009864:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f003 0304 	and.w	r3, r3, #4
 8009870:	2b00      	cmp	r3, #0
 8009872:	d010      	beq.n	8009896 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	691a      	ldr	r2, [r3, #16]
 8009878:	4b3f      	ldr	r3, [pc, #252]	; (8009978 <HAL_RCC_ClockConfig+0x358>)
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009880:	429a      	cmp	r2, r3
 8009882:	d208      	bcs.n	8009896 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009884:	4b3c      	ldr	r3, [pc, #240]	; (8009978 <HAL_RCC_ClockConfig+0x358>)
 8009886:	699b      	ldr	r3, [r3, #24]
 8009888:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	4939      	ldr	r1, [pc, #228]	; (8009978 <HAL_RCC_ClockConfig+0x358>)
 8009892:	4313      	orrs	r3, r2
 8009894:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 0308 	and.w	r3, r3, #8
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d010      	beq.n	80098c4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	695a      	ldr	r2, [r3, #20]
 80098a6:	4b34      	ldr	r3, [pc, #208]	; (8009978 <HAL_RCC_ClockConfig+0x358>)
 80098a8:	69db      	ldr	r3, [r3, #28]
 80098aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d208      	bcs.n	80098c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80098b2:	4b31      	ldr	r3, [pc, #196]	; (8009978 <HAL_RCC_ClockConfig+0x358>)
 80098b4:	69db      	ldr	r3, [r3, #28]
 80098b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	492e      	ldr	r1, [pc, #184]	; (8009978 <HAL_RCC_ClockConfig+0x358>)
 80098c0:	4313      	orrs	r3, r2
 80098c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0310 	and.w	r3, r3, #16
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d010      	beq.n	80098f2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	699a      	ldr	r2, [r3, #24]
 80098d4:	4b28      	ldr	r3, [pc, #160]	; (8009978 <HAL_RCC_ClockConfig+0x358>)
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80098dc:	429a      	cmp	r2, r3
 80098de:	d208      	bcs.n	80098f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80098e0:	4b25      	ldr	r3, [pc, #148]	; (8009978 <HAL_RCC_ClockConfig+0x358>)
 80098e2:	69db      	ldr	r3, [r3, #28]
 80098e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	699b      	ldr	r3, [r3, #24]
 80098ec:	4922      	ldr	r1, [pc, #136]	; (8009978 <HAL_RCC_ClockConfig+0x358>)
 80098ee:	4313      	orrs	r3, r2
 80098f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 0320 	and.w	r3, r3, #32
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d010      	beq.n	8009920 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	69da      	ldr	r2, [r3, #28]
 8009902:	4b1d      	ldr	r3, [pc, #116]	; (8009978 <HAL_RCC_ClockConfig+0x358>)
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800990a:	429a      	cmp	r2, r3
 800990c:	d208      	bcs.n	8009920 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800990e:	4b1a      	ldr	r3, [pc, #104]	; (8009978 <HAL_RCC_ClockConfig+0x358>)
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	69db      	ldr	r3, [r3, #28]
 800991a:	4917      	ldr	r1, [pc, #92]	; (8009978 <HAL_RCC_ClockConfig+0x358>)
 800991c:	4313      	orrs	r3, r2
 800991e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009920:	f000 f834 	bl	800998c <HAL_RCC_GetSysClockFreq>
 8009924:	4602      	mov	r2, r0
 8009926:	4b14      	ldr	r3, [pc, #80]	; (8009978 <HAL_RCC_ClockConfig+0x358>)
 8009928:	699b      	ldr	r3, [r3, #24]
 800992a:	0a1b      	lsrs	r3, r3, #8
 800992c:	f003 030f 	and.w	r3, r3, #15
 8009930:	4912      	ldr	r1, [pc, #72]	; (800997c <HAL_RCC_ClockConfig+0x35c>)
 8009932:	5ccb      	ldrb	r3, [r1, r3]
 8009934:	f003 031f 	and.w	r3, r3, #31
 8009938:	fa22 f303 	lsr.w	r3, r2, r3
 800993c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800993e:	4b0e      	ldr	r3, [pc, #56]	; (8009978 <HAL_RCC_ClockConfig+0x358>)
 8009940:	699b      	ldr	r3, [r3, #24]
 8009942:	f003 030f 	and.w	r3, r3, #15
 8009946:	4a0d      	ldr	r2, [pc, #52]	; (800997c <HAL_RCC_ClockConfig+0x35c>)
 8009948:	5cd3      	ldrb	r3, [r2, r3]
 800994a:	f003 031f 	and.w	r3, r3, #31
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	fa22 f303 	lsr.w	r3, r2, r3
 8009954:	4a0a      	ldr	r2, [pc, #40]	; (8009980 <HAL_RCC_ClockConfig+0x360>)
 8009956:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009958:	4a0a      	ldr	r2, [pc, #40]	; (8009984 <HAL_RCC_ClockConfig+0x364>)
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800995e:	4b0a      	ldr	r3, [pc, #40]	; (8009988 <HAL_RCC_ClockConfig+0x368>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4618      	mov	r0, r3
 8009964:	f7fb fe5c 	bl	8005620 <HAL_InitTick>
 8009968:	4603      	mov	r3, r0
 800996a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800996c:	7bfb      	ldrb	r3, [r7, #15]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3718      	adds	r7, #24
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	58024400 	.word	0x58024400
 800997c:	08012620 	.word	0x08012620
 8009980:	24000040 	.word	0x24000040
 8009984:	2400003c 	.word	0x2400003c
 8009988:	24000044 	.word	0x24000044

0800998c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800998c:	b480      	push	{r7}
 800998e:	b089      	sub	sp, #36	; 0x24
 8009990:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009992:	4bb3      	ldr	r3, [pc, #716]	; (8009c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800999a:	2b18      	cmp	r3, #24
 800999c:	f200 8155 	bhi.w	8009c4a <HAL_RCC_GetSysClockFreq+0x2be>
 80099a0:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80099a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a6:	bf00      	nop
 80099a8:	08009a0d 	.word	0x08009a0d
 80099ac:	08009c4b 	.word	0x08009c4b
 80099b0:	08009c4b 	.word	0x08009c4b
 80099b4:	08009c4b 	.word	0x08009c4b
 80099b8:	08009c4b 	.word	0x08009c4b
 80099bc:	08009c4b 	.word	0x08009c4b
 80099c0:	08009c4b 	.word	0x08009c4b
 80099c4:	08009c4b 	.word	0x08009c4b
 80099c8:	08009a33 	.word	0x08009a33
 80099cc:	08009c4b 	.word	0x08009c4b
 80099d0:	08009c4b 	.word	0x08009c4b
 80099d4:	08009c4b 	.word	0x08009c4b
 80099d8:	08009c4b 	.word	0x08009c4b
 80099dc:	08009c4b 	.word	0x08009c4b
 80099e0:	08009c4b 	.word	0x08009c4b
 80099e4:	08009c4b 	.word	0x08009c4b
 80099e8:	08009a39 	.word	0x08009a39
 80099ec:	08009c4b 	.word	0x08009c4b
 80099f0:	08009c4b 	.word	0x08009c4b
 80099f4:	08009c4b 	.word	0x08009c4b
 80099f8:	08009c4b 	.word	0x08009c4b
 80099fc:	08009c4b 	.word	0x08009c4b
 8009a00:	08009c4b 	.word	0x08009c4b
 8009a04:	08009c4b 	.word	0x08009c4b
 8009a08:	08009a3f 	.word	0x08009a3f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a0c:	4b94      	ldr	r3, [pc, #592]	; (8009c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0320 	and.w	r3, r3, #32
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d009      	beq.n	8009a2c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009a18:	4b91      	ldr	r3, [pc, #580]	; (8009c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	08db      	lsrs	r3, r3, #3
 8009a1e:	f003 0303 	and.w	r3, r3, #3
 8009a22:	4a90      	ldr	r2, [pc, #576]	; (8009c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a24:	fa22 f303 	lsr.w	r3, r2, r3
 8009a28:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009a2a:	e111      	b.n	8009c50 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009a2c:	4b8d      	ldr	r3, [pc, #564]	; (8009c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a2e:	61bb      	str	r3, [r7, #24]
    break;
 8009a30:	e10e      	b.n	8009c50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8009a32:	4b8d      	ldr	r3, [pc, #564]	; (8009c68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a34:	61bb      	str	r3, [r7, #24]
    break;
 8009a36:	e10b      	b.n	8009c50 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009a38:	4b8c      	ldr	r3, [pc, #560]	; (8009c6c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009a3a:	61bb      	str	r3, [r7, #24]
    break;
 8009a3c:	e108      	b.n	8009c50 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a3e:	4b88      	ldr	r3, [pc, #544]	; (8009c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a42:	f003 0303 	and.w	r3, r3, #3
 8009a46:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009a48:	4b85      	ldr	r3, [pc, #532]	; (8009c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4c:	091b      	lsrs	r3, r3, #4
 8009a4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a52:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a54:	4b82      	ldr	r3, [pc, #520]	; (8009c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a58:	f003 0301 	and.w	r3, r3, #1
 8009a5c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009a5e:	4b80      	ldr	r3, [pc, #512]	; (8009c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a62:	08db      	lsrs	r3, r3, #3
 8009a64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	fb02 f303 	mul.w	r3, r2, r3
 8009a6e:	ee07 3a90 	vmov	s15, r3
 8009a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a76:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 80e1 	beq.w	8009c44 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	f000 8083 	beq.w	8009b90 <HAL_RCC_GetSysClockFreq+0x204>
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	2b02      	cmp	r3, #2
 8009a8e:	f200 80a1 	bhi.w	8009bd4 <HAL_RCC_GetSysClockFreq+0x248>
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d003      	beq.n	8009aa0 <HAL_RCC_GetSysClockFreq+0x114>
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	2b01      	cmp	r3, #1
 8009a9c:	d056      	beq.n	8009b4c <HAL_RCC_GetSysClockFreq+0x1c0>
 8009a9e:	e099      	b.n	8009bd4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009aa0:	4b6f      	ldr	r3, [pc, #444]	; (8009c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0320 	and.w	r3, r3, #32
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d02d      	beq.n	8009b08 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009aac:	4b6c      	ldr	r3, [pc, #432]	; (8009c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	08db      	lsrs	r3, r3, #3
 8009ab2:	f003 0303 	and.w	r3, r3, #3
 8009ab6:	4a6b      	ldr	r2, [pc, #428]	; (8009c64 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8009abc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	ee07 3a90 	vmov	s15, r3
 8009ac4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	ee07 3a90 	vmov	s15, r3
 8009ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ad6:	4b62      	ldr	r3, [pc, #392]	; (8009c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ade:	ee07 3a90 	vmov	s15, r3
 8009ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009aea:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8009b06:	e087      	b.n	8009c18 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b08:	693b      	ldr	r3, [r7, #16]
 8009b0a:	ee07 3a90 	vmov	s15, r3
 8009b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b12:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009c74 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b1a:	4b51      	ldr	r3, [pc, #324]	; (8009c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b22:	ee07 3a90 	vmov	s15, r3
 8009b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b2e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b4a:	e065      	b.n	8009c18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	ee07 3a90 	vmov	s15, r3
 8009b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b56:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009c78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b5e:	4b40      	ldr	r3, [pc, #256]	; (8009c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b66:	ee07 3a90 	vmov	s15, r3
 8009b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b72:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009b8e:	e043      	b.n	8009c18 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009b90:	693b      	ldr	r3, [r7, #16]
 8009b92:	ee07 3a90 	vmov	s15, r3
 8009b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b9a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009c7c <HAL_RCC_GetSysClockFreq+0x2f0>
 8009b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ba2:	4b2f      	ldr	r3, [pc, #188]	; (8009c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009baa:	ee07 3a90 	vmov	s15, r3
 8009bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bb6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009bd2:	e021      	b.n	8009c18 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	ee07 3a90 	vmov	s15, r3
 8009bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bde:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009c78 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009be6:	4b1e      	ldr	r3, [pc, #120]	; (8009c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009bee:	ee07 3a90 	vmov	s15, r3
 8009bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bfa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009c70 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009c16:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009c18:	4b11      	ldr	r3, [pc, #68]	; (8009c60 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c1c:	0a5b      	lsrs	r3, r3, #9
 8009c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c22:	3301      	adds	r3, #1
 8009c24:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	ee07 3a90 	vmov	s15, r3
 8009c2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c30:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c3c:	ee17 3a90 	vmov	r3, s15
 8009c40:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8009c42:	e005      	b.n	8009c50 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8009c44:	2300      	movs	r3, #0
 8009c46:	61bb      	str	r3, [r7, #24]
    break;
 8009c48:	e002      	b.n	8009c50 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009c4a:	4b07      	ldr	r3, [pc, #28]	; (8009c68 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c4c:	61bb      	str	r3, [r7, #24]
    break;
 8009c4e:	bf00      	nop
  }

  return sysclockfreq;
 8009c50:	69bb      	ldr	r3, [r7, #24]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3724      	adds	r7, #36	; 0x24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	58024400 	.word	0x58024400
 8009c64:	03d09000 	.word	0x03d09000
 8009c68:	003d0900 	.word	0x003d0900
 8009c6c:	02dc6c00 	.word	0x02dc6c00
 8009c70:	46000000 	.word	0x46000000
 8009c74:	4c742400 	.word	0x4c742400
 8009c78:	4a742400 	.word	0x4a742400
 8009c7c:	4c371b00 	.word	0x4c371b00

08009c80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b082      	sub	sp, #8
 8009c84:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009c86:	f7ff fe81 	bl	800998c <HAL_RCC_GetSysClockFreq>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	4b10      	ldr	r3, [pc, #64]	; (8009cd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	0a1b      	lsrs	r3, r3, #8
 8009c92:	f003 030f 	and.w	r3, r3, #15
 8009c96:	490f      	ldr	r1, [pc, #60]	; (8009cd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009c98:	5ccb      	ldrb	r3, [r1, r3]
 8009c9a:	f003 031f 	and.w	r3, r3, #31
 8009c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009ca2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009ca4:	4b0a      	ldr	r3, [pc, #40]	; (8009cd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	f003 030f 	and.w	r3, r3, #15
 8009cac:	4a09      	ldr	r2, [pc, #36]	; (8009cd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8009cae:	5cd3      	ldrb	r3, [r2, r3]
 8009cb0:	f003 031f 	and.w	r3, r3, #31
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cba:	4a07      	ldr	r2, [pc, #28]	; (8009cd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009cbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cbe:	4a07      	ldr	r2, [pc, #28]	; (8009cdc <HAL_RCC_GetHCLKFreq+0x5c>)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009cc4:	4b04      	ldr	r3, [pc, #16]	; (8009cd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8009cc6:	681b      	ldr	r3, [r3, #0]
}
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}
 8009cd0:	58024400 	.word	0x58024400
 8009cd4:	08012620 	.word	0x08012620
 8009cd8:	24000040 	.word	0x24000040
 8009cdc:	2400003c 	.word	0x2400003c

08009ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009ce4:	f7ff ffcc 	bl	8009c80 <HAL_RCC_GetHCLKFreq>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	4b06      	ldr	r3, [pc, #24]	; (8009d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009cec:	69db      	ldr	r3, [r3, #28]
 8009cee:	091b      	lsrs	r3, r3, #4
 8009cf0:	f003 0307 	and.w	r3, r3, #7
 8009cf4:	4904      	ldr	r1, [pc, #16]	; (8009d08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009cf6:	5ccb      	ldrb	r3, [r1, r3]
 8009cf8:	f003 031f 	and.w	r3, r3, #31
 8009cfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	bd80      	pop	{r7, pc}
 8009d04:	58024400 	.word	0x58024400
 8009d08:	08012620 	.word	0x08012620

08009d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009d10:	f7ff ffb6 	bl	8009c80 <HAL_RCC_GetHCLKFreq>
 8009d14:	4602      	mov	r2, r0
 8009d16:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d18:	69db      	ldr	r3, [r3, #28]
 8009d1a:	0a1b      	lsrs	r3, r3, #8
 8009d1c:	f003 0307 	and.w	r3, r3, #7
 8009d20:	4904      	ldr	r1, [pc, #16]	; (8009d34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009d22:	5ccb      	ldrb	r3, [r1, r3]
 8009d24:	f003 031f 	and.w	r3, r3, #31
 8009d28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	bd80      	pop	{r7, pc}
 8009d30:	58024400 	.word	0x58024400
 8009d34:	08012620 	.word	0x08012620

08009d38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b086      	sub	sp, #24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d40:	2300      	movs	r3, #0
 8009d42:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d44:	2300      	movs	r3, #0
 8009d46:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d03f      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d5c:	d02a      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009d5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d62:	d824      	bhi.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009d64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d68:	d018      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009d6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d6e:	d81e      	bhi.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d003      	beq.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d78:	d007      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009d7a:	e018      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d7c:	4bab      	ldr	r3, [pc, #684]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d80:	4aaa      	ldr	r2, [pc, #680]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009d88:	e015      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	2102      	movs	r1, #2
 8009d90:	4618      	mov	r0, r3
 8009d92:	f001 f9cf 	bl	800b134 <RCCEx_PLL2_Config>
 8009d96:	4603      	mov	r3, r0
 8009d98:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009d9a:	e00c      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	3324      	adds	r3, #36	; 0x24
 8009da0:	2102      	movs	r1, #2
 8009da2:	4618      	mov	r0, r3
 8009da4:	f001 fa78 	bl	800b298 <RCCEx_PLL3_Config>
 8009da8:	4603      	mov	r3, r0
 8009daa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8009dac:	e003      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	75fb      	strb	r3, [r7, #23]
      break;
 8009db2:	e000      	b.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8009db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009db6:	7dfb      	ldrb	r3, [r7, #23]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d109      	bne.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009dbc:	4b9b      	ldr	r3, [pc, #620]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dc8:	4998      	ldr	r1, [pc, #608]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	650b      	str	r3, [r1, #80]	; 0x50
 8009dce:	e001      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd0:	7dfb      	ldrb	r3, [r7, #23]
 8009dd2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d03d      	beq.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de4:	2b04      	cmp	r3, #4
 8009de6:	d826      	bhi.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009de8:	a201      	add	r2, pc, #4	; (adr r2, 8009df0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dee:	bf00      	nop
 8009df0:	08009e05 	.word	0x08009e05
 8009df4:	08009e13 	.word	0x08009e13
 8009df8:	08009e25 	.word	0x08009e25
 8009dfc:	08009e3d 	.word	0x08009e3d
 8009e00:	08009e3d 	.word	0x08009e3d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e04:	4b89      	ldr	r3, [pc, #548]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e08:	4a88      	ldr	r2, [pc, #544]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e10:	e015      	b.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	3304      	adds	r3, #4
 8009e16:	2100      	movs	r1, #0
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f001 f98b 	bl	800b134 <RCCEx_PLL2_Config>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e22:	e00c      	b.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	3324      	adds	r3, #36	; 0x24
 8009e28:	2100      	movs	r1, #0
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f001 fa34 	bl	800b298 <RCCEx_PLL3_Config>
 8009e30:	4603      	mov	r3, r0
 8009e32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009e34:	e003      	b.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	75fb      	strb	r3, [r7, #23]
      break;
 8009e3a:	e000      	b.n	8009e3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e3e:	7dfb      	ldrb	r3, [r7, #23]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d109      	bne.n	8009e58 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e44:	4b79      	ldr	r3, [pc, #484]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e48:	f023 0207 	bic.w	r2, r3, #7
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e50:	4976      	ldr	r1, [pc, #472]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e52:	4313      	orrs	r3, r2
 8009e54:	650b      	str	r3, [r1, #80]	; 0x50
 8009e56:	e001      	b.n	8009e5c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e58:	7dfb      	ldrb	r3, [r7, #23]
 8009e5a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d042      	beq.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e70:	d02b      	beq.n	8009eca <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009e72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e76:	d825      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009e78:	2bc0      	cmp	r3, #192	; 0xc0
 8009e7a:	d028      	beq.n	8009ece <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009e7c:	2bc0      	cmp	r3, #192	; 0xc0
 8009e7e:	d821      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009e80:	2b80      	cmp	r3, #128	; 0x80
 8009e82:	d016      	beq.n	8009eb2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009e84:	2b80      	cmp	r3, #128	; 0x80
 8009e86:	d81d      	bhi.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d002      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009e8c:	2b40      	cmp	r3, #64	; 0x40
 8009e8e:	d007      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009e90:	e018      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e92:	4b66      	ldr	r3, [pc, #408]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e96:	4a65      	ldr	r2, [pc, #404]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009e9e:	e017      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f001 f944 	bl	800b134 <RCCEx_PLL2_Config>
 8009eac:	4603      	mov	r3, r0
 8009eae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009eb0:	e00e      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	3324      	adds	r3, #36	; 0x24
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f001 f9ed 	bl	800b298 <RCCEx_PLL3_Config>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009ec2:	e005      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8009ec8:	e002      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009eca:	bf00      	nop
 8009ecc:	e000      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009ece:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ed0:	7dfb      	ldrb	r3, [r7, #23]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d109      	bne.n	8009eea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009ed6:	4b55      	ldr	r3, [pc, #340]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eda:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ee2:	4952      	ldr	r1, [pc, #328]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	650b      	str	r3, [r1, #80]	; 0x50
 8009ee8:	e001      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
 8009eec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d049      	beq.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f04:	d030      	beq.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009f06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f0a:	d82a      	bhi.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009f0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009f10:	d02c      	beq.n	8009f6c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009f12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009f16:	d824      	bhi.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f1c:	d018      	beq.n	8009f50 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f22:	d81e      	bhi.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d003      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009f28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f2c:	d007      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009f2e:	e018      	b.n	8009f62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f30:	4b3e      	ldr	r3, [pc, #248]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f34:	4a3d      	ldr	r2, [pc, #244]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f3c:	e017      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	3304      	adds	r3, #4
 8009f42:	2100      	movs	r1, #0
 8009f44:	4618      	mov	r0, r3
 8009f46:	f001 f8f5 	bl	800b134 <RCCEx_PLL2_Config>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009f4e:	e00e      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3324      	adds	r3, #36	; 0x24
 8009f54:	2100      	movs	r1, #0
 8009f56:	4618      	mov	r0, r3
 8009f58:	f001 f99e 	bl	800b298 <RCCEx_PLL3_Config>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009f60:	e005      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	75fb      	strb	r3, [r7, #23]
      break;
 8009f66:	e002      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009f68:	bf00      	nop
 8009f6a:	e000      	b.n	8009f6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f6e:	7dfb      	ldrb	r3, [r7, #23]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10a      	bne.n	8009f8a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009f74:	4b2d      	ldr	r3, [pc, #180]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f78:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009f82:	492a      	ldr	r1, [pc, #168]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	658b      	str	r3, [r1, #88]	; 0x58
 8009f88:	e001      	b.n	8009f8e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f8a:	7dfb      	ldrb	r3, [r7, #23]
 8009f8c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d04c      	beq.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009fa4:	d030      	beq.n	800a008 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009fa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009faa:	d82a      	bhi.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009fac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009fb0:	d02c      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8009fb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009fb6:	d824      	bhi.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009fb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fbc:	d018      	beq.n	8009ff0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009fbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009fc2:	d81e      	bhi.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009fcc:	d007      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009fce:	e018      	b.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fd0:	4b16      	ldr	r3, [pc, #88]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	4a15      	ldr	r2, [pc, #84]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009fdc:	e017      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	2100      	movs	r1, #0
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f001 f8a5 	bl	800b134 <RCCEx_PLL2_Config>
 8009fea:	4603      	mov	r3, r0
 8009fec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009fee:	e00e      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	3324      	adds	r3, #36	; 0x24
 8009ff4:	2100      	movs	r1, #0
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f001 f94e 	bl	800b298 <RCCEx_PLL3_Config>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a000:	e005      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	75fb      	strb	r3, [r7, #23]
      break;
 800a006:	e002      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a008:	bf00      	nop
 800a00a:	e000      	b.n	800a00e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800a00c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10d      	bne.n	800a030 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a014:	4b05      	ldr	r3, [pc, #20]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a018:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a022:	4902      	ldr	r1, [pc, #8]	; (800a02c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800a024:	4313      	orrs	r3, r2
 800a026:	658b      	str	r3, [r1, #88]	; 0x58
 800a028:	e004      	b.n	800a034 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800a02a:	bf00      	nop
 800a02c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a030:	7dfb      	ldrb	r3, [r7, #23]
 800a032:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d032      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a044:	2b30      	cmp	r3, #48	; 0x30
 800a046:	d01c      	beq.n	800a082 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800a048:	2b30      	cmp	r3, #48	; 0x30
 800a04a:	d817      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a04c:	2b20      	cmp	r3, #32
 800a04e:	d00c      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800a050:	2b20      	cmp	r3, #32
 800a052:	d813      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800a054:	2b00      	cmp	r3, #0
 800a056:	d016      	beq.n	800a086 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800a058:	2b10      	cmp	r3, #16
 800a05a:	d10f      	bne.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a05c:	4baf      	ldr	r3, [pc, #700]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a060:	4aae      	ldr	r2, [pc, #696]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a066:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a068:	e00e      	b.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	3304      	adds	r3, #4
 800a06e:	2102      	movs	r1, #2
 800a070:	4618      	mov	r0, r3
 800a072:	f001 f85f 	bl	800b134 <RCCEx_PLL2_Config>
 800a076:	4603      	mov	r3, r0
 800a078:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a07a:	e005      	b.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	75fb      	strb	r3, [r7, #23]
      break;
 800a080:	e002      	b.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a082:	bf00      	nop
 800a084:	e000      	b.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800a086:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a088:	7dfb      	ldrb	r3, [r7, #23]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d109      	bne.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a08e:	4ba3      	ldr	r3, [pc, #652]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a092:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a09a:	49a0      	ldr	r1, [pc, #640]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a09c:	4313      	orrs	r3, r2
 800a09e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a0a0:	e001      	b.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0a2:	7dfb      	ldrb	r3, [r7, #23]
 800a0a4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d047      	beq.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0ba:	d030      	beq.n	800a11e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 800a0bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a0c0:	d82a      	bhi.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a0c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0c6:	d02c      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800a0c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a0cc:	d824      	bhi.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a0ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0d2:	d018      	beq.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a0d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a0d8:	d81e      	bhi.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d003      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800a0de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e2:	d007      	beq.n	800a0f4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a0e4:	e018      	b.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0e6:	4b8d      	ldr	r3, [pc, #564]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ea:	4a8c      	ldr	r2, [pc, #560]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a0ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a0f2:	e017      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f001 f81a 	bl	800b134 <RCCEx_PLL2_Config>
 800a100:	4603      	mov	r3, r0
 800a102:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a104:	e00e      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	3324      	adds	r3, #36	; 0x24
 800a10a:	2100      	movs	r1, #0
 800a10c:	4618      	mov	r0, r3
 800a10e:	f001 f8c3 	bl	800b298 <RCCEx_PLL3_Config>
 800a112:	4603      	mov	r3, r0
 800a114:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800a116:	e005      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	75fb      	strb	r3, [r7, #23]
      break;
 800a11c:	e002      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a11e:	bf00      	nop
 800a120:	e000      	b.n	800a124 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800a122:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a124:	7dfb      	ldrb	r3, [r7, #23]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d109      	bne.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a12a:	4b7c      	ldr	r3, [pc, #496]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a12c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a12e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a136:	4979      	ldr	r1, [pc, #484]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a138:	4313      	orrs	r3, r2
 800a13a:	650b      	str	r3, [r1, #80]	; 0x50
 800a13c:	e001      	b.n	800a142 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a13e:	7dfb      	ldrb	r3, [r7, #23]
 800a140:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d049      	beq.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a152:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a156:	d02e      	beq.n	800a1b6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800a158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a15c:	d828      	bhi.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a15e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a162:	d02a      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x482>
 800a164:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a168:	d822      	bhi.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a16a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a16e:	d026      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x486>
 800a170:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a174:	d81c      	bhi.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a176:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a17a:	d010      	beq.n	800a19e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800a17c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a180:	d816      	bhi.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800a182:	2b00      	cmp	r3, #0
 800a184:	d01d      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800a186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a18a:	d111      	bne.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	3304      	adds	r3, #4
 800a190:	2101      	movs	r1, #1
 800a192:	4618      	mov	r0, r3
 800a194:	f000 ffce 	bl	800b134 <RCCEx_PLL2_Config>
 800a198:	4603      	mov	r3, r0
 800a19a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a19c:	e012      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3324      	adds	r3, #36	; 0x24
 800a1a2:	2101      	movs	r1, #1
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f001 f877 	bl	800b298 <RCCEx_PLL3_Config>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800a1ae:	e009      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	75fb      	strb	r3, [r7, #23]
      break;
 800a1b4:	e006      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a1b6:	bf00      	nop
 800a1b8:	e004      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a1ba:	bf00      	nop
 800a1bc:	e002      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a1be:	bf00      	nop
 800a1c0:	e000      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800a1c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a1c4:	7dfb      	ldrb	r3, [r7, #23]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d109      	bne.n	800a1de <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a1ca:	4b54      	ldr	r3, [pc, #336]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a1cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ce:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1d6:	4951      	ldr	r1, [pc, #324]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	650b      	str	r3, [r1, #80]	; 0x50
 800a1dc:	e001      	b.n	800a1e2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1de:	7dfb      	ldrb	r3, [r7, #23]
 800a1e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d04b      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a1f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1f8:	d02e      	beq.n	800a258 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800a1fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1fe:	d828      	bhi.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a204:	d02a      	beq.n	800a25c <HAL_RCCEx_PeriphCLKConfig+0x524>
 800a206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a20a:	d822      	bhi.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a20c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a210:	d026      	beq.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800a212:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a216:	d81c      	bhi.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a21c:	d010      	beq.n	800a240 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800a21e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a222:	d816      	bhi.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800a224:	2b00      	cmp	r3, #0
 800a226:	d01d      	beq.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800a228:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a22c:	d111      	bne.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	3304      	adds	r3, #4
 800a232:	2101      	movs	r1, #1
 800a234:	4618      	mov	r0, r3
 800a236:	f000 ff7d 	bl	800b134 <RCCEx_PLL2_Config>
 800a23a:	4603      	mov	r3, r0
 800a23c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a23e:	e012      	b.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	3324      	adds	r3, #36	; 0x24
 800a244:	2101      	movs	r1, #1
 800a246:	4618      	mov	r0, r3
 800a248:	f001 f826 	bl	800b298 <RCCEx_PLL3_Config>
 800a24c:	4603      	mov	r3, r0
 800a24e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800a250:	e009      	b.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	75fb      	strb	r3, [r7, #23]
      break;
 800a256:	e006      	b.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a258:	bf00      	nop
 800a25a:	e004      	b.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a25c:	bf00      	nop
 800a25e:	e002      	b.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a260:	bf00      	nop
 800a262:	e000      	b.n	800a266 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800a264:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a266:	7dfb      	ldrb	r3, [r7, #23]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10a      	bne.n	800a282 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a26c:	4b2b      	ldr	r3, [pc, #172]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a26e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a270:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a27a:	4928      	ldr	r1, [pc, #160]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a27c:	4313      	orrs	r3, r2
 800a27e:	658b      	str	r3, [r1, #88]	; 0x58
 800a280:	e001      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a282:	7dfb      	ldrb	r3, [r7, #23]
 800a284:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d02f      	beq.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a29a:	d00e      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x582>
 800a29c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2a0:	d814      	bhi.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x594>
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d015      	beq.n	800a2d2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800a2a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2aa:	d10f      	bne.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2ac:	4b1b      	ldr	r3, [pc, #108]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2b0:	4a1a      	ldr	r2, [pc, #104]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a2b8:	e00c      	b.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	3304      	adds	r3, #4
 800a2be:	2101      	movs	r1, #1
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f000 ff37 	bl	800b134 <RCCEx_PLL2_Config>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800a2ca:	e003      	b.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	75fb      	strb	r3, [r7, #23]
      break;
 800a2d0:	e000      	b.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800a2d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a2d4:	7dfb      	ldrb	r3, [r7, #23]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d109      	bne.n	800a2ee <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a2da:	4b10      	ldr	r3, [pc, #64]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2e6:	490d      	ldr	r1, [pc, #52]	; (800a31c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	650b      	str	r3, [r1, #80]	; 0x50
 800a2ec:	e001      	b.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ee:	7dfb      	ldrb	r3, [r7, #23]
 800a2f0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d033      	beq.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a302:	2b03      	cmp	r3, #3
 800a304:	d81c      	bhi.n	800a340 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800a306:	a201      	add	r2, pc, #4	; (adr r2, 800a30c <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800a308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30c:	0800a347 	.word	0x0800a347
 800a310:	0800a321 	.word	0x0800a321
 800a314:	0800a32f 	.word	0x0800a32f
 800a318:	0800a347 	.word	0x0800a347
 800a31c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a320:	4bb8      	ldr	r3, [pc, #736]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a324:	4ab7      	ldr	r2, [pc, #732]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a32a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a32c:	e00c      	b.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	3304      	adds	r3, #4
 800a332:	2102      	movs	r1, #2
 800a334:	4618      	mov	r0, r3
 800a336:	f000 fefd 	bl	800b134 <RCCEx_PLL2_Config>
 800a33a:	4603      	mov	r3, r0
 800a33c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800a33e:	e003      	b.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a340:	2301      	movs	r3, #1
 800a342:	75fb      	strb	r3, [r7, #23]
      break;
 800a344:	e000      	b.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800a346:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a348:	7dfb      	ldrb	r3, [r7, #23]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d109      	bne.n	800a362 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a34e:	4bad      	ldr	r3, [pc, #692]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a352:	f023 0203 	bic.w	r2, r3, #3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a35a:	49aa      	ldr	r1, [pc, #680]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a35c:	4313      	orrs	r3, r2
 800a35e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a360:	e001      	b.n	800a366 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a362:	7dfb      	ldrb	r3, [r7, #23]
 800a364:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a36e:	2b00      	cmp	r3, #0
 800a370:	f000 8086 	beq.w	800a480 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a374:	4ba4      	ldr	r3, [pc, #656]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4aa3      	ldr	r2, [pc, #652]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a37a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a37e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a380:	f7fb f998 	bl	80056b4 <HAL_GetTick>
 800a384:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a386:	e009      	b.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a388:	f7fb f994 	bl	80056b4 <HAL_GetTick>
 800a38c:	4602      	mov	r2, r0
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	1ad3      	subs	r3, r2, r3
 800a392:	2b64      	cmp	r3, #100	; 0x64
 800a394:	d902      	bls.n	800a39c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800a396:	2303      	movs	r3, #3
 800a398:	75fb      	strb	r3, [r7, #23]
        break;
 800a39a:	e005      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a39c:	4b9a      	ldr	r3, [pc, #616]	; (800a608 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d0ef      	beq.n	800a388 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d166      	bne.n	800a47c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a3ae:	4b95      	ldr	r3, [pc, #596]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a3b8:	4053      	eors	r3, r2
 800a3ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d013      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a3c2:	4b90      	ldr	r3, [pc, #576]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a3ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a3cc:	4b8d      	ldr	r3, [pc, #564]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3d0:	4a8c      	ldr	r2, [pc, #560]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a3d8:	4b8a      	ldr	r3, [pc, #552]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3dc:	4a89      	ldr	r2, [pc, #548]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a3e4:	4a87      	ldr	r2, [pc, #540]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a3f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3f4:	d115      	bne.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3f6:	f7fb f95d 	bl	80056b4 <HAL_GetTick>
 800a3fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3fc:	e00b      	b.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3fe:	f7fb f959 	bl	80056b4 <HAL_GetTick>
 800a402:	4602      	mov	r2, r0
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	1ad3      	subs	r3, r2, r3
 800a408:	f241 3288 	movw	r2, #5000	; 0x1388
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d902      	bls.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a410:	2303      	movs	r3, #3
 800a412:	75fb      	strb	r3, [r7, #23]
            break;
 800a414:	e005      	b.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a416:	4b7b      	ldr	r3, [pc, #492]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a41a:	f003 0302 	and.w	r3, r3, #2
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d0ed      	beq.n	800a3fe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a422:	7dfb      	ldrb	r3, [r7, #23]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d126      	bne.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a42e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a436:	d10d      	bne.n	800a454 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a438:	4b72      	ldr	r3, [pc, #456]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a43a:	691b      	ldr	r3, [r3, #16]
 800a43c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a446:	0919      	lsrs	r1, r3, #4
 800a448:	4b70      	ldr	r3, [pc, #448]	; (800a60c <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800a44a:	400b      	ands	r3, r1
 800a44c:	496d      	ldr	r1, [pc, #436]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a44e:	4313      	orrs	r3, r2
 800a450:	610b      	str	r3, [r1, #16]
 800a452:	e005      	b.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a454:	4b6b      	ldr	r3, [pc, #428]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	4a6a      	ldr	r2, [pc, #424]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a45a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a45e:	6113      	str	r3, [r2, #16]
 800a460:	4b68      	ldr	r3, [pc, #416]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a462:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a46a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a46e:	4965      	ldr	r1, [pc, #404]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a470:	4313      	orrs	r3, r2
 800a472:	670b      	str	r3, [r1, #112]	; 0x70
 800a474:	e004      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a476:	7dfb      	ldrb	r3, [r7, #23]
 800a478:	75bb      	strb	r3, [r7, #22]
 800a47a:	e001      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
 800a47e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 0301 	and.w	r3, r3, #1
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d07e      	beq.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a490:	2b28      	cmp	r3, #40	; 0x28
 800a492:	d867      	bhi.n	800a564 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a494:	a201      	add	r2, pc, #4	; (adr r2, 800a49c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a49a:	bf00      	nop
 800a49c:	0800a56b 	.word	0x0800a56b
 800a4a0:	0800a565 	.word	0x0800a565
 800a4a4:	0800a565 	.word	0x0800a565
 800a4a8:	0800a565 	.word	0x0800a565
 800a4ac:	0800a565 	.word	0x0800a565
 800a4b0:	0800a565 	.word	0x0800a565
 800a4b4:	0800a565 	.word	0x0800a565
 800a4b8:	0800a565 	.word	0x0800a565
 800a4bc:	0800a541 	.word	0x0800a541
 800a4c0:	0800a565 	.word	0x0800a565
 800a4c4:	0800a565 	.word	0x0800a565
 800a4c8:	0800a565 	.word	0x0800a565
 800a4cc:	0800a565 	.word	0x0800a565
 800a4d0:	0800a565 	.word	0x0800a565
 800a4d4:	0800a565 	.word	0x0800a565
 800a4d8:	0800a565 	.word	0x0800a565
 800a4dc:	0800a553 	.word	0x0800a553
 800a4e0:	0800a565 	.word	0x0800a565
 800a4e4:	0800a565 	.word	0x0800a565
 800a4e8:	0800a565 	.word	0x0800a565
 800a4ec:	0800a565 	.word	0x0800a565
 800a4f0:	0800a565 	.word	0x0800a565
 800a4f4:	0800a565 	.word	0x0800a565
 800a4f8:	0800a565 	.word	0x0800a565
 800a4fc:	0800a56b 	.word	0x0800a56b
 800a500:	0800a565 	.word	0x0800a565
 800a504:	0800a565 	.word	0x0800a565
 800a508:	0800a565 	.word	0x0800a565
 800a50c:	0800a565 	.word	0x0800a565
 800a510:	0800a565 	.word	0x0800a565
 800a514:	0800a565 	.word	0x0800a565
 800a518:	0800a565 	.word	0x0800a565
 800a51c:	0800a56b 	.word	0x0800a56b
 800a520:	0800a565 	.word	0x0800a565
 800a524:	0800a565 	.word	0x0800a565
 800a528:	0800a565 	.word	0x0800a565
 800a52c:	0800a565 	.word	0x0800a565
 800a530:	0800a565 	.word	0x0800a565
 800a534:	0800a565 	.word	0x0800a565
 800a538:	0800a565 	.word	0x0800a565
 800a53c:	0800a56b 	.word	0x0800a56b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3304      	adds	r3, #4
 800a544:	2101      	movs	r1, #1
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fdf4 	bl	800b134 <RCCEx_PLL2_Config>
 800a54c:	4603      	mov	r3, r0
 800a54e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a550:	e00c      	b.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	3324      	adds	r3, #36	; 0x24
 800a556:	2101      	movs	r1, #1
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 fe9d 	bl	800b298 <RCCEx_PLL3_Config>
 800a55e:	4603      	mov	r3, r0
 800a560:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a562:	e003      	b.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a564:	2301      	movs	r3, #1
 800a566:	75fb      	strb	r3, [r7, #23]
      break;
 800a568:	e000      	b.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800a56a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a56c:	7dfb      	ldrb	r3, [r7, #23]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d109      	bne.n	800a586 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a572:	4b24      	ldr	r3, [pc, #144]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a576:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a57e:	4921      	ldr	r1, [pc, #132]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a580:	4313      	orrs	r3, r2
 800a582:	654b      	str	r3, [r1, #84]	; 0x54
 800a584:	e001      	b.n	800a58a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a586:	7dfb      	ldrb	r3, [r7, #23]
 800a588:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d03e      	beq.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a59a:	2b05      	cmp	r3, #5
 800a59c:	d820      	bhi.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800a59e:	a201      	add	r2, pc, #4	; (adr r2, 800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a4:	0800a5e7 	.word	0x0800a5e7
 800a5a8:	0800a5bd 	.word	0x0800a5bd
 800a5ac:	0800a5cf 	.word	0x0800a5cf
 800a5b0:	0800a5e7 	.word	0x0800a5e7
 800a5b4:	0800a5e7 	.word	0x0800a5e7
 800a5b8:	0800a5e7 	.word	0x0800a5e7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	3304      	adds	r3, #4
 800a5c0:	2101      	movs	r1, #1
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 fdb6 	bl	800b134 <RCCEx_PLL2_Config>
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a5cc:	e00c      	b.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	3324      	adds	r3, #36	; 0x24
 800a5d2:	2101      	movs	r1, #1
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 fe5f 	bl	800b298 <RCCEx_PLL3_Config>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a5de:	e003      	b.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	75fb      	strb	r3, [r7, #23]
      break;
 800a5e4:	e000      	b.n	800a5e8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800a5e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5e8:	7dfb      	ldrb	r3, [r7, #23]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d110      	bne.n	800a610 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a5ee:	4b05      	ldr	r3, [pc, #20]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a5f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5f2:	f023 0207 	bic.w	r2, r3, #7
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a5fa:	4902      	ldr	r1, [pc, #8]	; (800a604 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	654b      	str	r3, [r1, #84]	; 0x54
 800a600:	e008      	b.n	800a614 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800a602:	bf00      	nop
 800a604:	58024400 	.word	0x58024400
 800a608:	58024800 	.word	0x58024800
 800a60c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a610:	7dfb      	ldrb	r3, [r7, #23]
 800a612:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f003 0304 	and.w	r3, r3, #4
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d039      	beq.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a626:	2b05      	cmp	r3, #5
 800a628:	d820      	bhi.n	800a66c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800a62a:	a201      	add	r2, pc, #4	; (adr r2, 800a630 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800a62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a630:	0800a673 	.word	0x0800a673
 800a634:	0800a649 	.word	0x0800a649
 800a638:	0800a65b 	.word	0x0800a65b
 800a63c:	0800a673 	.word	0x0800a673
 800a640:	0800a673 	.word	0x0800a673
 800a644:	0800a673 	.word	0x0800a673
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	3304      	adds	r3, #4
 800a64c:	2101      	movs	r1, #1
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 fd70 	bl	800b134 <RCCEx_PLL2_Config>
 800a654:	4603      	mov	r3, r0
 800a656:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a658:	e00c      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	3324      	adds	r3, #36	; 0x24
 800a65e:	2101      	movs	r1, #1
 800a660:	4618      	mov	r0, r3
 800a662:	f000 fe19 	bl	800b298 <RCCEx_PLL3_Config>
 800a666:	4603      	mov	r3, r0
 800a668:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a66a:	e003      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	75fb      	strb	r3, [r7, #23]
      break;
 800a670:	e000      	b.n	800a674 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800a672:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a674:	7dfb      	ldrb	r3, [r7, #23]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d10a      	bne.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a67a:	4bb7      	ldr	r3, [pc, #732]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a67c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a67e:	f023 0207 	bic.w	r2, r3, #7
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a688:	49b3      	ldr	r1, [pc, #716]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a68a:	4313      	orrs	r3, r2
 800a68c:	658b      	str	r3, [r1, #88]	; 0x58
 800a68e:	e001      	b.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a690:	7dfb      	ldrb	r3, [r7, #23]
 800a692:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0320 	and.w	r3, r3, #32
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d04b      	beq.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a6a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6aa:	d02e      	beq.n	800a70a <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800a6ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6b0:	d828      	bhi.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a6b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6b6:	d02a      	beq.n	800a70e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a6b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6bc:	d822      	bhi.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a6be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6c2:	d026      	beq.n	800a712 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a6c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a6c8:	d81c      	bhi.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a6ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6ce:	d010      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 800a6d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6d4:	d816      	bhi.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d01d      	beq.n	800a716 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a6da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6de:	d111      	bne.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	3304      	adds	r3, #4
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 fd24 	bl	800b134 <RCCEx_PLL2_Config>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a6f0:	e012      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	3324      	adds	r3, #36	; 0x24
 800a6f6:	2102      	movs	r1, #2
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 fdcd 	bl	800b298 <RCCEx_PLL3_Config>
 800a6fe:	4603      	mov	r3, r0
 800a700:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a702:	e009      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	75fb      	strb	r3, [r7, #23]
      break;
 800a708:	e006      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a70a:	bf00      	nop
 800a70c:	e004      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a70e:	bf00      	nop
 800a710:	e002      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a712:	bf00      	nop
 800a714:	e000      	b.n	800a718 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800a716:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a718:	7dfb      	ldrb	r3, [r7, #23]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d10a      	bne.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a71e:	4b8e      	ldr	r3, [pc, #568]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a722:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a72c:	498a      	ldr	r1, [pc, #552]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a72e:	4313      	orrs	r3, r2
 800a730:	654b      	str	r3, [r1, #84]	; 0x54
 800a732:	e001      	b.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a734:	7dfb      	ldrb	r3, [r7, #23]
 800a736:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a740:	2b00      	cmp	r3, #0
 800a742:	d04b      	beq.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a74a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a74e:	d02e      	beq.n	800a7ae <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800a750:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a754:	d828      	bhi.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a75a:	d02a      	beq.n	800a7b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a75c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a760:	d822      	bhi.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a766:	d026      	beq.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a76c:	d81c      	bhi.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a76e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a772:	d010      	beq.n	800a796 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800a774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a778:	d816      	bhi.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d01d      	beq.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a77e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a782:	d111      	bne.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	3304      	adds	r3, #4
 800a788:	2100      	movs	r1, #0
 800a78a:	4618      	mov	r0, r3
 800a78c:	f000 fcd2 	bl	800b134 <RCCEx_PLL2_Config>
 800a790:	4603      	mov	r3, r0
 800a792:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a794:	e012      	b.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	3324      	adds	r3, #36	; 0x24
 800a79a:	2102      	movs	r1, #2
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 fd7b 	bl	800b298 <RCCEx_PLL3_Config>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a7a6:	e009      	b.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	75fb      	strb	r3, [r7, #23]
      break;
 800a7ac:	e006      	b.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a7ae:	bf00      	nop
 800a7b0:	e004      	b.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a7b2:	bf00      	nop
 800a7b4:	e002      	b.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a7b6:	bf00      	nop
 800a7b8:	e000      	b.n	800a7bc <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800a7ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7bc:	7dfb      	ldrb	r3, [r7, #23]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d10a      	bne.n	800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a7c2:	4b65      	ldr	r3, [pc, #404]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a7c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7c6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a7d0:	4961      	ldr	r1, [pc, #388]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	658b      	str	r3, [r1, #88]	; 0x58
 800a7d6:	e001      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7d8:	7dfb      	ldrb	r3, [r7, #23]
 800a7da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d04b      	beq.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a7ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a7f2:	d02e      	beq.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 800a7f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a7f8:	d828      	bhi.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a7fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a7fe:	d02a      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 800a800:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a804:	d822      	bhi.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a806:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a80a:	d026      	beq.n	800a85a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a80c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a810:	d81c      	bhi.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a812:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a816:	d010      	beq.n	800a83a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800a818:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a81c:	d816      	bhi.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d01d      	beq.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a826:	d111      	bne.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	3304      	adds	r3, #4
 800a82c:	2100      	movs	r1, #0
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 fc80 	bl	800b134 <RCCEx_PLL2_Config>
 800a834:	4603      	mov	r3, r0
 800a836:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a838:	e012      	b.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	3324      	adds	r3, #36	; 0x24
 800a83e:	2102      	movs	r1, #2
 800a840:	4618      	mov	r0, r3
 800a842:	f000 fd29 	bl	800b298 <RCCEx_PLL3_Config>
 800a846:	4603      	mov	r3, r0
 800a848:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a84a:	e009      	b.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	75fb      	strb	r3, [r7, #23]
      break;
 800a850:	e006      	b.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a852:	bf00      	nop
 800a854:	e004      	b.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a856:	bf00      	nop
 800a858:	e002      	b.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a85a:	bf00      	nop
 800a85c:	e000      	b.n	800a860 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800a85e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a860:	7dfb      	ldrb	r3, [r7, #23]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10a      	bne.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a866:	4b3c      	ldr	r3, [pc, #240]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a86a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a874:	4938      	ldr	r1, [pc, #224]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a876:	4313      	orrs	r3, r2
 800a878:	658b      	str	r3, [r1, #88]	; 0x58
 800a87a:	e001      	b.n	800a880 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a87c:	7dfb      	ldrb	r3, [r7, #23]
 800a87e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0308 	and.w	r3, r3, #8
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d01a      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a896:	d10a      	bne.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	3324      	adds	r3, #36	; 0x24
 800a89c:	2102      	movs	r1, #2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 fcfa 	bl	800b298 <RCCEx_PLL3_Config>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d001      	beq.n	800a8ae <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a8ae:	4b2a      	ldr	r3, [pc, #168]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a8bc:	4926      	ldr	r1, [pc, #152]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 0310 	and.w	r3, r3, #16
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d01a      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8d8:	d10a      	bne.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	3324      	adds	r3, #36	; 0x24
 800a8de:	2102      	movs	r1, #2
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f000 fcd9 	bl	800b298 <RCCEx_PLL3_Config>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d001      	beq.n	800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a8f0:	4b19      	ldr	r3, [pc, #100]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a8f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8fe:	4916      	ldr	r1, [pc, #88]	; (800a958 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800a900:	4313      	orrs	r3, r2
 800a902:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d036      	beq.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a916:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a91a:	d01f      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800a91c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a920:	d817      	bhi.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800a922:	2b00      	cmp	r3, #0
 800a924:	d003      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800a926:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a92a:	d009      	beq.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800a92c:	e011      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	3304      	adds	r3, #4
 800a932:	2100      	movs	r1, #0
 800a934:	4618      	mov	r0, r3
 800a936:	f000 fbfd 	bl	800b134 <RCCEx_PLL2_Config>
 800a93a:	4603      	mov	r3, r0
 800a93c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a93e:	e00e      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	3324      	adds	r3, #36	; 0x24
 800a944:	2102      	movs	r1, #2
 800a946:	4618      	mov	r0, r3
 800a948:	f000 fca6 	bl	800b298 <RCCEx_PLL3_Config>
 800a94c:	4603      	mov	r3, r0
 800a94e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a950:	e005      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	75fb      	strb	r3, [r7, #23]
      break;
 800a956:	e002      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800a958:	58024400 	.word	0x58024400
      break;
 800a95c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a95e:	7dfb      	ldrb	r3, [r7, #23]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10a      	bne.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a964:	4b93      	ldr	r3, [pc, #588]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a968:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a972:	4990      	ldr	r1, [pc, #576]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a974:	4313      	orrs	r3, r2
 800a976:	658b      	str	r3, [r1, #88]	; 0x58
 800a978:	e001      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a97a:	7dfb      	ldrb	r3, [r7, #23]
 800a97c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a986:	2b00      	cmp	r3, #0
 800a988:	d033      	beq.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a990:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a994:	d01c      	beq.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 800a996:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a99a:	d816      	bhi.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800a99c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9a0:	d003      	beq.n	800a9aa <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800a9a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9a6:	d007      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 800a9a8:	e00f      	b.n	800a9ca <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9aa:	4b82      	ldr	r3, [pc, #520]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a9ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ae:	4a81      	ldr	r2, [pc, #516]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a9b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a9b6:	e00c      	b.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	3324      	adds	r3, #36	; 0x24
 800a9bc:	2101      	movs	r1, #1
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 fc6a 	bl	800b298 <RCCEx_PLL3_Config>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a9c8:	e003      	b.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	75fb      	strb	r3, [r7, #23]
      break;
 800a9ce:	e000      	b.n	800a9d2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 800a9d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9d2:	7dfb      	ldrb	r3, [r7, #23]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10a      	bne.n	800a9ee <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a9d8:	4b76      	ldr	r3, [pc, #472]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a9da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9e6:	4973      	ldr	r1, [pc, #460]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800a9e8:	4313      	orrs	r3, r2
 800a9ea:	654b      	str	r3, [r1, #84]	; 0x54
 800a9ec:	e001      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9ee:	7dfb      	ldrb	r3, [r7, #23]
 800a9f0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d029      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d003      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 800aa06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa0a:	d007      	beq.n	800aa1c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 800aa0c:	e00f      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa0e:	4b69      	ldr	r3, [pc, #420]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa12:	4a68      	ldr	r2, [pc, #416]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa18:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800aa1a:	e00b      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	3304      	adds	r3, #4
 800aa20:	2102      	movs	r1, #2
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 fb86 	bl	800b134 <RCCEx_PLL2_Config>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800aa2c:	e002      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	75fb      	strb	r3, [r7, #23]
      break;
 800aa32:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa34:	7dfb      	ldrb	r3, [r7, #23]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d109      	bne.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aa3a:	4b5e      	ldr	r3, [pc, #376]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa46:	495b      	ldr	r1, [pc, #364]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aa4c:	e001      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa4e:	7dfb      	ldrb	r3, [r7, #23]
 800aa50:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00a      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	3324      	adds	r3, #36	; 0x24
 800aa62:	2102      	movs	r1, #2
 800aa64:	4618      	mov	r0, r3
 800aa66:	f000 fc17 	bl	800b298 <RCCEx_PLL3_Config>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d001      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d030      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa88:	d017      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800aa8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa8e:	d811      	bhi.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800aa90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa94:	d013      	beq.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800aa96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa9a:	d80b      	bhi.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d010      	beq.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800aaa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aaa4:	d106      	bne.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aaa6:	4b43      	ldr	r3, [pc, #268]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aaa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaaa:	4a42      	ldr	r2, [pc, #264]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aaac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aab0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800aab2:	e007      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	75fb      	strb	r3, [r7, #23]
      break;
 800aab8:	e004      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800aaba:	bf00      	nop
 800aabc:	e002      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800aabe:	bf00      	nop
 800aac0:	e000      	b.n	800aac4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800aac2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aac4:	7dfb      	ldrb	r3, [r7, #23]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d109      	bne.n	800aade <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aaca:	4b3a      	ldr	r3, [pc, #232]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aacc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aace:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aad6:	4937      	ldr	r1, [pc, #220]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aad8:	4313      	orrs	r3, r2
 800aada:	654b      	str	r3, [r1, #84]	; 0x54
 800aadc:	e001      	b.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aade:	7dfb      	ldrb	r3, [r7, #23]
 800aae0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d008      	beq.n	800ab00 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800aaee:	4b31      	ldr	r3, [pc, #196]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aaf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aaf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafa:	492e      	ldr	r1, [pc, #184]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800aafc:	4313      	orrs	r3, r2
 800aafe:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d009      	beq.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ab0c:	4b29      	ldr	r3, [pc, #164]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab0e:	691b      	ldr	r3, [r3, #16]
 800ab10:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ab1a:	4926      	ldr	r1, [pc, #152]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab1c:	4313      	orrs	r3, r2
 800ab1e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d008      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ab2c:	4b21      	ldr	r3, [pc, #132]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab38:	491e      	ldr	r1, [pc, #120]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00d      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ab4a:	4b1a      	ldr	r3, [pc, #104]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	4a19      	ldr	r2, [pc, #100]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab50:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab54:	6113      	str	r3, [r2, #16]
 800ab56:	4b17      	ldr	r3, [pc, #92]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab58:	691a      	ldr	r2, [r3, #16]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ab60:	4914      	ldr	r1, [pc, #80]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab62:	4313      	orrs	r3, r2
 800ab64:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	da08      	bge.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ab6e:	4b11      	ldr	r3, [pc, #68]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab72:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab7a:	490e      	ldr	r1, [pc, #56]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d009      	beq.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ab8c:	4b09      	ldr	r3, [pc, #36]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab9a:	4906      	ldr	r1, [pc, #24]	; (800abb4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800aba0:	7dbb      	ldrb	r3, [r7, #22]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d101      	bne.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	e000      	b.n	800abac <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
}
 800abac:	4618      	mov	r0, r3
 800abae:	3718      	adds	r7, #24
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}
 800abb4:	58024400 	.word	0x58024400

0800abb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800abbc:	f7ff f860 	bl	8009c80 <HAL_RCC_GetHCLKFreq>
 800abc0:	4602      	mov	r2, r0
 800abc2:	4b06      	ldr	r3, [pc, #24]	; (800abdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800abc4:	6a1b      	ldr	r3, [r3, #32]
 800abc6:	091b      	lsrs	r3, r3, #4
 800abc8:	f003 0307 	and.w	r3, r3, #7
 800abcc:	4904      	ldr	r1, [pc, #16]	; (800abe0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800abce:	5ccb      	ldrb	r3, [r1, r3]
 800abd0:	f003 031f 	and.w	r3, r3, #31
 800abd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800abd8:	4618      	mov	r0, r3
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	58024400 	.word	0x58024400
 800abe0:	08012620 	.word	0x08012620

0800abe4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b089      	sub	sp, #36	; 0x24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abec:	4ba1      	ldr	r3, [pc, #644]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf0:	f003 0303 	and.w	r3, r3, #3
 800abf4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800abf6:	4b9f      	ldr	r3, [pc, #636]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abfa:	0b1b      	lsrs	r3, r3, #12
 800abfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ac02:	4b9c      	ldr	r3, [pc, #624]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac06:	091b      	lsrs	r3, r3, #4
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800ac0e:	4b99      	ldr	r3, [pc, #612]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac12:	08db      	lsrs	r3, r3, #3
 800ac14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	fb02 f303 	mul.w	r3, r2, r3
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f000 8111 	beq.w	800ae54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	f000 8083 	beq.w	800ad40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	f200 80a1 	bhi.w	800ad84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d003      	beq.n	800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d056      	beq.n	800acfc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ac4e:	e099      	b.n	800ad84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac50:	4b88      	ldr	r3, [pc, #544]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 0320 	and.w	r3, r3, #32
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d02d      	beq.n	800acb8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac5c:	4b85      	ldr	r3, [pc, #532]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	08db      	lsrs	r3, r3, #3
 800ac62:	f003 0303 	and.w	r3, r3, #3
 800ac66:	4a84      	ldr	r2, [pc, #528]	; (800ae78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ac68:	fa22 f303 	lsr.w	r3, r2, r3
 800ac6c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	ee07 3a90 	vmov	s15, r3
 800ac74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	ee07 3a90 	vmov	s15, r3
 800ac7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac86:	4b7b      	ldr	r3, [pc, #492]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ae7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ac9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800acb6:	e087      	b.n	800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	ee07 3a90 	vmov	s15, r3
 800acbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ae80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800acc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acca:	4b6a      	ldr	r3, [pc, #424]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800accc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acda:	ed97 6a03 	vldr	s12, [r7, #12]
 800acde:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ae7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ace2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ace6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800acfa:	e065      	b.n	800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad06:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ae84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad0e:	4b59      	ldr	r3, [pc, #356]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad16:	ee07 3a90 	vmov	s15, r3
 800ad1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad22:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ae7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad3e:	e043      	b.n	800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	ee07 3a90 	vmov	s15, r3
 800ad46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad4a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ae88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ad4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad52:	4b48      	ldr	r3, [pc, #288]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad5a:	ee07 3a90 	vmov	s15, r3
 800ad5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad66:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ae7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ad6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ad82:	e021      	b.n	800adc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	ee07 3a90 	vmov	s15, r3
 800ad8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ae84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ad92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad96:	4b37      	ldr	r3, [pc, #220]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9e:	ee07 3a90 	vmov	s15, r3
 800ada2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adaa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ae7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800adc6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800adc8:	4b2a      	ldr	r3, [pc, #168]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adcc:	0a5b      	lsrs	r3, r3, #9
 800adce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800adde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ade2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ade6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adee:	ee17 2a90 	vmov	r2, s15
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800adf6:	4b1f      	ldr	r3, [pc, #124]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfa:	0c1b      	lsrs	r3, r3, #16
 800adfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae00:	ee07 3a90 	vmov	s15, r3
 800ae04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae10:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae1c:	ee17 2a90 	vmov	r2, s15
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ae24:	4b13      	ldr	r3, [pc, #76]	; (800ae74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae28:	0e1b      	lsrs	r3, r3, #24
 800ae2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae2e:	ee07 3a90 	vmov	s15, r3
 800ae32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae4a:	ee17 2a90 	vmov	r2, s15
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ae52:	e008      	b.n	800ae66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	609a      	str	r2, [r3, #8]
}
 800ae66:	bf00      	nop
 800ae68:	3724      	adds	r7, #36	; 0x24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	58024400 	.word	0x58024400
 800ae78:	03d09000 	.word	0x03d09000
 800ae7c:	46000000 	.word	0x46000000
 800ae80:	4c742400 	.word	0x4c742400
 800ae84:	4a742400 	.word	0x4a742400
 800ae88:	4c371b00 	.word	0x4c371b00

0800ae8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b089      	sub	sp, #36	; 0x24
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae94:	4ba1      	ldr	r3, [pc, #644]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae98:	f003 0303 	and.w	r3, r3, #3
 800ae9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ae9e:	4b9f      	ldr	r3, [pc, #636]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea2:	0d1b      	lsrs	r3, r3, #20
 800aea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aea8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aeaa:	4b9c      	ldr	r3, [pc, #624]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeae:	0a1b      	lsrs	r3, r3, #8
 800aeb0:	f003 0301 	and.w	r3, r3, #1
 800aeb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800aeb6:	4b99      	ldr	r3, [pc, #612]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aeb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeba:	08db      	lsrs	r3, r3, #3
 800aebc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aec0:	693a      	ldr	r2, [r7, #16]
 800aec2:	fb02 f303 	mul.w	r3, r2, r3
 800aec6:	ee07 3a90 	vmov	s15, r3
 800aeca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aece:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f000 8111 	beq.w	800b0fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	2b02      	cmp	r3, #2
 800aede:	f000 8083 	beq.w	800afe8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aee2:	69bb      	ldr	r3, [r7, #24]
 800aee4:	2b02      	cmp	r3, #2
 800aee6:	f200 80a1 	bhi.w	800b02c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d003      	beq.n	800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d056      	beq.n	800afa4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aef6:	e099      	b.n	800b02c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aef8:	4b88      	ldr	r3, [pc, #544]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0320 	and.w	r3, r3, #32
 800af00:	2b00      	cmp	r3, #0
 800af02:	d02d      	beq.n	800af60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800af04:	4b85      	ldr	r3, [pc, #532]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	08db      	lsrs	r3, r3, #3
 800af0a:	f003 0303 	and.w	r3, r3, #3
 800af0e:	4a84      	ldr	r2, [pc, #528]	; (800b120 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800af10:	fa22 f303 	lsr.w	r3, r2, r3
 800af14:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	ee07 3a90 	vmov	s15, r3
 800af1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	ee07 3a90 	vmov	s15, r3
 800af26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af2e:	4b7b      	ldr	r3, [pc, #492]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af36:	ee07 3a90 	vmov	s15, r3
 800af3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af42:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800af5e:	e087      	b.n	800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	ee07 3a90 	vmov	s15, r3
 800af66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b128 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800af6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af72:	4b6a      	ldr	r3, [pc, #424]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800af74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af7a:	ee07 3a90 	vmov	s15, r3
 800af7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af82:	ed97 6a03 	vldr	s12, [r7, #12]
 800af86:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800af8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afa2:	e065      	b.n	800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800afa4:	697b      	ldr	r3, [r7, #20]
 800afa6:	ee07 3a90 	vmov	s15, r3
 800afaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b12c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800afb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afb6:	4b59      	ldr	r3, [pc, #356]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afbe:	ee07 3a90 	vmov	s15, r3
 800afc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800afca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800afce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800afe6:	e043      	b.n	800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	ee07 3a90 	vmov	s15, r3
 800afee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b130 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800aff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800affa:	4b48      	ldr	r3, [pc, #288]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800affc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800affe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b002:	ee07 3a90 	vmov	s15, r3
 800b006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b00a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b00e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b02a:	e021      	b.n	800b070 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	ee07 3a90 	vmov	s15, r3
 800b032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b036:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b12c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b03e:	4b37      	ldr	r3, [pc, #220]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b04e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b052:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b124 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b05e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b06a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b06e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b070:	4b2a      	ldr	r3, [pc, #168]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b074:	0a5b      	lsrs	r3, r3, #9
 800b076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b07a:	ee07 3a90 	vmov	s15, r3
 800b07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b086:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b08a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b08e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b096:	ee17 2a90 	vmov	r2, s15
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b09e:	4b1f      	ldr	r3, [pc, #124]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a2:	0c1b      	lsrs	r3, r3, #16
 800b0a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0a8:	ee07 3a90 	vmov	s15, r3
 800b0ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0c4:	ee17 2a90 	vmov	r2, s15
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b0cc:	4b13      	ldr	r3, [pc, #76]	; (800b11c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d0:	0e1b      	lsrs	r3, r3, #24
 800b0d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0d6:	ee07 3a90 	vmov	s15, r3
 800b0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0f2:	ee17 2a90 	vmov	r2, s15
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b0fa:	e008      	b.n	800b10e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	609a      	str	r2, [r3, #8]
}
 800b10e:	bf00      	nop
 800b110:	3724      	adds	r7, #36	; 0x24
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr
 800b11a:	bf00      	nop
 800b11c:	58024400 	.word	0x58024400
 800b120:	03d09000 	.word	0x03d09000
 800b124:	46000000 	.word	0x46000000
 800b128:	4c742400 	.word	0x4c742400
 800b12c:	4a742400 	.word	0x4a742400
 800b130:	4c371b00 	.word	0x4c371b00

0800b134 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b142:	4b53      	ldr	r3, [pc, #332]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b146:	f003 0303 	and.w	r3, r3, #3
 800b14a:	2b03      	cmp	r3, #3
 800b14c:	d101      	bne.n	800b152 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	e099      	b.n	800b286 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b152:	4b4f      	ldr	r3, [pc, #316]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a4e      	ldr	r2, [pc, #312]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b158:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b15c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b15e:	f7fa faa9 	bl	80056b4 <HAL_GetTick>
 800b162:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b164:	e008      	b.n	800b178 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b166:	f7fa faa5 	bl	80056b4 <HAL_GetTick>
 800b16a:	4602      	mov	r2, r0
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	1ad3      	subs	r3, r2, r3
 800b170:	2b02      	cmp	r3, #2
 800b172:	d901      	bls.n	800b178 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b174:	2303      	movs	r3, #3
 800b176:	e086      	b.n	800b286 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b178:	4b45      	ldr	r3, [pc, #276]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b180:	2b00      	cmp	r3, #0
 800b182:	d1f0      	bne.n	800b166 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b184:	4b42      	ldr	r3, [pc, #264]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b188:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	031b      	lsls	r3, r3, #12
 800b192:	493f      	ldr	r1, [pc, #252]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b194:	4313      	orrs	r3, r2
 800b196:	628b      	str	r3, [r1, #40]	; 0x28
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	3b01      	subs	r3, #1
 800b19e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	025b      	lsls	r3, r3, #9
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	431a      	orrs	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	041b      	lsls	r3, r3, #16
 800b1b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b1ba:	431a      	orrs	r2, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	061b      	lsls	r3, r3, #24
 800b1c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b1c8:	4931      	ldr	r1, [pc, #196]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b1ce:	4b30      	ldr	r3, [pc, #192]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	695b      	ldr	r3, [r3, #20]
 800b1da:	492d      	ldr	r1, [pc, #180]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b1dc:	4313      	orrs	r3, r2
 800b1de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b1e0:	4b2b      	ldr	r3, [pc, #172]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1e4:	f023 0220 	bic.w	r2, r3, #32
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	699b      	ldr	r3, [r3, #24]
 800b1ec:	4928      	ldr	r1, [pc, #160]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b1f2:	4b27      	ldr	r3, [pc, #156]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f6:	4a26      	ldr	r2, [pc, #152]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b1f8:	f023 0310 	bic.w	r3, r3, #16
 800b1fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b1fe:	4b24      	ldr	r3, [pc, #144]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b202:	4b24      	ldr	r3, [pc, #144]	; (800b294 <RCCEx_PLL2_Config+0x160>)
 800b204:	4013      	ands	r3, r2
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	69d2      	ldr	r2, [r2, #28]
 800b20a:	00d2      	lsls	r2, r2, #3
 800b20c:	4920      	ldr	r1, [pc, #128]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b20e:	4313      	orrs	r3, r2
 800b210:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b212:	4b1f      	ldr	r3, [pc, #124]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b216:	4a1e      	ldr	r2, [pc, #120]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b218:	f043 0310 	orr.w	r3, r3, #16
 800b21c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d106      	bne.n	800b232 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b224:	4b1a      	ldr	r3, [pc, #104]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b228:	4a19      	ldr	r2, [pc, #100]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b22a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b22e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b230:	e00f      	b.n	800b252 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	2b01      	cmp	r3, #1
 800b236:	d106      	bne.n	800b246 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b238:	4b15      	ldr	r3, [pc, #84]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23c:	4a14      	ldr	r2, [pc, #80]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b23e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b242:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b244:	e005      	b.n	800b252 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b246:	4b12      	ldr	r3, [pc, #72]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b24a:	4a11      	ldr	r2, [pc, #68]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b24c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b250:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b252:	4b0f      	ldr	r3, [pc, #60]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a0e      	ldr	r2, [pc, #56]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b258:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b25c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b25e:	f7fa fa29 	bl	80056b4 <HAL_GetTick>
 800b262:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b264:	e008      	b.n	800b278 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b266:	f7fa fa25 	bl	80056b4 <HAL_GetTick>
 800b26a:	4602      	mov	r2, r0
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	1ad3      	subs	r3, r2, r3
 800b270:	2b02      	cmp	r3, #2
 800b272:	d901      	bls.n	800b278 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b274:	2303      	movs	r3, #3
 800b276:	e006      	b.n	800b286 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b278:	4b05      	ldr	r3, [pc, #20]	; (800b290 <RCCEx_PLL2_Config+0x15c>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b280:	2b00      	cmp	r3, #0
 800b282:	d0f0      	beq.n	800b266 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b284:	7bfb      	ldrb	r3, [r7, #15]
}
 800b286:	4618      	mov	r0, r3
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	58024400 	.word	0x58024400
 800b294:	ffff0007 	.word	0xffff0007

0800b298 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2a6:	4b53      	ldr	r3, [pc, #332]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2aa:	f003 0303 	and.w	r3, r3, #3
 800b2ae:	2b03      	cmp	r3, #3
 800b2b0:	d101      	bne.n	800b2b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	e099      	b.n	800b3ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b2b6:	4b4f      	ldr	r3, [pc, #316]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a4e      	ldr	r2, [pc, #312]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b2bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b2c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2c2:	f7fa f9f7 	bl	80056b4 <HAL_GetTick>
 800b2c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2c8:	e008      	b.n	800b2dc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b2ca:	f7fa f9f3 	bl	80056b4 <HAL_GetTick>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	1ad3      	subs	r3, r2, r3
 800b2d4:	2b02      	cmp	r3, #2
 800b2d6:	d901      	bls.n	800b2dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b2d8:	2303      	movs	r3, #3
 800b2da:	e086      	b.n	800b3ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2dc:	4b45      	ldr	r3, [pc, #276]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d1f0      	bne.n	800b2ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b2e8:	4b42      	ldr	r3, [pc, #264]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	051b      	lsls	r3, r3, #20
 800b2f6:	493f      	ldr	r1, [pc, #252]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	628b      	str	r3, [r1, #40]	; 0x28
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	3b01      	subs	r3, #1
 800b302:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	689b      	ldr	r3, [r3, #8]
 800b30a:	3b01      	subs	r3, #1
 800b30c:	025b      	lsls	r3, r3, #9
 800b30e:	b29b      	uxth	r3, r3
 800b310:	431a      	orrs	r2, r3
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	3b01      	subs	r3, #1
 800b318:	041b      	lsls	r3, r3, #16
 800b31a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b31e:	431a      	orrs	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	3b01      	subs	r3, #1
 800b326:	061b      	lsls	r3, r3, #24
 800b328:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b32c:	4931      	ldr	r1, [pc, #196]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b32e:	4313      	orrs	r3, r2
 800b330:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b332:	4b30      	ldr	r3, [pc, #192]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b336:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	695b      	ldr	r3, [r3, #20]
 800b33e:	492d      	ldr	r1, [pc, #180]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b340:	4313      	orrs	r3, r2
 800b342:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b344:	4b2b      	ldr	r3, [pc, #172]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b348:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	699b      	ldr	r3, [r3, #24]
 800b350:	4928      	ldr	r1, [pc, #160]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b352:	4313      	orrs	r3, r2
 800b354:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b356:	4b27      	ldr	r3, [pc, #156]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b35a:	4a26      	ldr	r2, [pc, #152]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b35c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b360:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b362:	4b24      	ldr	r3, [pc, #144]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b366:	4b24      	ldr	r3, [pc, #144]	; (800b3f8 <RCCEx_PLL3_Config+0x160>)
 800b368:	4013      	ands	r3, r2
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	69d2      	ldr	r2, [r2, #28]
 800b36e:	00d2      	lsls	r2, r2, #3
 800b370:	4920      	ldr	r1, [pc, #128]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b372:	4313      	orrs	r3, r2
 800b374:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b376:	4b1f      	ldr	r3, [pc, #124]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37a:	4a1e      	ldr	r2, [pc, #120]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b37c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b380:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d106      	bne.n	800b396 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b388:	4b1a      	ldr	r3, [pc, #104]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b38c:	4a19      	ldr	r2, [pc, #100]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b38e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b392:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b394:	e00f      	b.n	800b3b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d106      	bne.n	800b3aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b39c:	4b15      	ldr	r3, [pc, #84]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a0:	4a14      	ldr	r2, [pc, #80]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b3a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b3a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b3a8:	e005      	b.n	800b3b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b3aa:	4b12      	ldr	r3, [pc, #72]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3ae:	4a11      	ldr	r2, [pc, #68]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b3b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b3b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b3b6:	4b0f      	ldr	r3, [pc, #60]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a0e      	ldr	r2, [pc, #56]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b3bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3c2:	f7fa f977 	bl	80056b4 <HAL_GetTick>
 800b3c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3c8:	e008      	b.n	800b3dc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800b3ca:	f7fa f973 	bl	80056b4 <HAL_GetTick>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	2b02      	cmp	r3, #2
 800b3d6:	d901      	bls.n	800b3dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	e006      	b.n	800b3ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3dc:	4b05      	ldr	r3, [pc, #20]	; (800b3f4 <RCCEx_PLL3_Config+0x15c>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d0f0      	beq.n	800b3ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3710      	adds	r7, #16
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}
 800b3f2:	bf00      	nop
 800b3f4:	58024400 	.word	0x58024400
 800b3f8:	ffff0007 	.word	0xffff0007

0800b3fc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d101      	bne.n	800b40e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e0f1      	b.n	800b5f2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2200      	movs	r2, #0
 800b412:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	4a78      	ldr	r2, [pc, #480]	; (800b5fc <HAL_SPI_Init+0x200>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d00f      	beq.n	800b43e <HAL_SPI_Init+0x42>
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	4a77      	ldr	r2, [pc, #476]	; (800b600 <HAL_SPI_Init+0x204>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d00a      	beq.n	800b43e <HAL_SPI_Init+0x42>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4a75      	ldr	r2, [pc, #468]	; (800b604 <HAL_SPI_Init+0x208>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d005      	beq.n	800b43e <HAL_SPI_Init+0x42>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	2b0f      	cmp	r3, #15
 800b438:	d901      	bls.n	800b43e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e0d9      	b.n	800b5f2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 f8e2 	bl	800b608 <SPI_GetPacketSize>
 800b444:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a6c      	ldr	r2, [pc, #432]	; (800b5fc <HAL_SPI_Init+0x200>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d00c      	beq.n	800b46a <HAL_SPI_Init+0x6e>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	4a6a      	ldr	r2, [pc, #424]	; (800b600 <HAL_SPI_Init+0x204>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d007      	beq.n	800b46a <HAL_SPI_Init+0x6e>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a69      	ldr	r2, [pc, #420]	; (800b604 <HAL_SPI_Init+0x208>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d002      	beq.n	800b46a <HAL_SPI_Init+0x6e>
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2b08      	cmp	r3, #8
 800b468:	d811      	bhi.n	800b48e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800b46e:	4a63      	ldr	r2, [pc, #396]	; (800b5fc <HAL_SPI_Init+0x200>)
 800b470:	4293      	cmp	r3, r2
 800b472:	d009      	beq.n	800b488 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a61      	ldr	r2, [pc, #388]	; (800b600 <HAL_SPI_Init+0x204>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d004      	beq.n	800b488 <HAL_SPI_Init+0x8c>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a60      	ldr	r2, [pc, #384]	; (800b604 <HAL_SPI_Init+0x208>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d104      	bne.n	800b492 <HAL_SPI_Init+0x96>
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2b10      	cmp	r3, #16
 800b48c:	d901      	bls.n	800b492 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	e0af      	b.n	800b5f2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d106      	bne.n	800b4ac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7f8 fc82 	bl	8003db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2202      	movs	r2, #2
 800b4b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f022 0201 	bic.w	r2, r2, #1
 800b4c2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800b4ce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4d8:	d119      	bne.n	800b50e <HAL_SPI_Init+0x112>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b4e2:	d103      	bne.n	800b4ec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d008      	beq.n	800b4fe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10c      	bne.n	800b50e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800b4f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4fc:	d107      	bne.n	800b50e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b50c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	69da      	ldr	r2, [r3, #28]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b516:	431a      	orrs	r2, r3
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	431a      	orrs	r2, r3
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b520:	ea42 0103 	orr.w	r1, r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	68da      	ldr	r2, [r3, #12]
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	430a      	orrs	r2, r1
 800b52e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b538:	431a      	orrs	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53e:	431a      	orrs	r2, r3
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	699b      	ldr	r3, [r3, #24]
 800b544:	431a      	orrs	r2, r3
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	431a      	orrs	r2, r3
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	695b      	ldr	r3, [r3, #20]
 800b550:	431a      	orrs	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6a1b      	ldr	r3, [r3, #32]
 800b556:	431a      	orrs	r2, r3
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	431a      	orrs	r2, r3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b562:	431a      	orrs	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	431a      	orrs	r2, r3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b56e:	ea42 0103 	orr.w	r1, r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	430a      	orrs	r2, r1
 800b57c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d113      	bne.n	800b5ae <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b598:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	689b      	ldr	r3, [r3, #8]
 800b5a0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b5ac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f022 0201 	bic.w	r2, r2, #1
 800b5bc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00a      	beq.n	800b5e0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	430a      	orrs	r2, r1
 800b5de:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2201      	movs	r2, #1
 800b5ec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	40013000 	.word	0x40013000
 800b600:	40003800 	.word	0x40003800
 800b604:	40003c00 	.word	0x40003c00

0800b608 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b614:	095b      	lsrs	r3, r3, #5
 800b616:	3301      	adds	r3, #1
 800b618:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	3301      	adds	r3, #1
 800b620:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	3307      	adds	r3, #7
 800b626:	08db      	lsrs	r3, r3, #3
 800b628:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	68fa      	ldr	r2, [r7, #12]
 800b62e:	fb02 f303 	mul.w	r3, r2, r3
}
 800b632:	4618      	mov	r0, r3
 800b634:	3714      	adds	r7, #20
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr

0800b63e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b082      	sub	sp, #8
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d101      	bne.n	800b650 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b64c:	2301      	movs	r3, #1
 800b64e:	e049      	b.n	800b6e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b656:	b2db      	uxtb	r3, r3
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d106      	bne.n	800b66a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2200      	movs	r2, #0
 800b660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7f9 fa41 	bl	8004aec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2202      	movs	r2, #2
 800b66e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	3304      	adds	r3, #4
 800b67a:	4619      	mov	r1, r3
 800b67c:	4610      	mov	r0, r2
 800b67e:	f000 fd71 	bl	800c164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2201      	movs	r2, #1
 800b686:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	2201      	movs	r2, #1
 800b68e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3708      	adds	r7, #8
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}

0800b6ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b085      	sub	sp, #20
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d001      	beq.n	800b704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b700:	2301      	movs	r3, #1
 800b702:	e054      	b.n	800b7ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2202      	movs	r2, #2
 800b708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	68da      	ldr	r2, [r3, #12]
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f042 0201 	orr.w	r2, r2, #1
 800b71a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	4a26      	ldr	r2, [pc, #152]	; (800b7bc <HAL_TIM_Base_Start_IT+0xd0>)
 800b722:	4293      	cmp	r3, r2
 800b724:	d022      	beq.n	800b76c <HAL_TIM_Base_Start_IT+0x80>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b72e:	d01d      	beq.n	800b76c <HAL_TIM_Base_Start_IT+0x80>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4a22      	ldr	r2, [pc, #136]	; (800b7c0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d018      	beq.n	800b76c <HAL_TIM_Base_Start_IT+0x80>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	4a21      	ldr	r2, [pc, #132]	; (800b7c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d013      	beq.n	800b76c <HAL_TIM_Base_Start_IT+0x80>
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a1f      	ldr	r2, [pc, #124]	; (800b7c8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d00e      	beq.n	800b76c <HAL_TIM_Base_Start_IT+0x80>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	4a1e      	ldr	r2, [pc, #120]	; (800b7cc <HAL_TIM_Base_Start_IT+0xe0>)
 800b754:	4293      	cmp	r3, r2
 800b756:	d009      	beq.n	800b76c <HAL_TIM_Base_Start_IT+0x80>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a1c      	ldr	r2, [pc, #112]	; (800b7d0 <HAL_TIM_Base_Start_IT+0xe4>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d004      	beq.n	800b76c <HAL_TIM_Base_Start_IT+0x80>
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	4a1b      	ldr	r2, [pc, #108]	; (800b7d4 <HAL_TIM_Base_Start_IT+0xe8>)
 800b768:	4293      	cmp	r3, r2
 800b76a:	d115      	bne.n	800b798 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	689a      	ldr	r2, [r3, #8]
 800b772:	4b19      	ldr	r3, [pc, #100]	; (800b7d8 <HAL_TIM_Base_Start_IT+0xec>)
 800b774:	4013      	ands	r3, r2
 800b776:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b06      	cmp	r3, #6
 800b77c:	d015      	beq.n	800b7aa <HAL_TIM_Base_Start_IT+0xbe>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b784:	d011      	beq.n	800b7aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f042 0201 	orr.w	r2, r2, #1
 800b794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b796:	e008      	b.n	800b7aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f042 0201 	orr.w	r2, r2, #1
 800b7a6:	601a      	str	r2, [r3, #0]
 800b7a8:	e000      	b.n	800b7ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3714      	adds	r7, #20
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	40010000 	.word	0x40010000
 800b7c0:	40000400 	.word	0x40000400
 800b7c4:	40000800 	.word	0x40000800
 800b7c8:	40000c00 	.word	0x40000c00
 800b7cc:	40010400 	.word	0x40010400
 800b7d0:	40001800 	.word	0x40001800
 800b7d4:	40014000 	.word	0x40014000
 800b7d8:	00010007 	.word	0x00010007

0800b7dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d101      	bne.n	800b7ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e049      	b.n	800b882 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d106      	bne.n	800b808 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 f841 	bl	800b88a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2202      	movs	r2, #2
 800b80c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681a      	ldr	r2, [r3, #0]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	3304      	adds	r3, #4
 800b818:	4619      	mov	r1, r3
 800b81a:	4610      	mov	r0, r2
 800b81c:	f000 fca2 	bl	800c164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2201      	movs	r2, #1
 800b86c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b88a:	b480      	push	{r7}
 800b88c:	b083      	sub	sp, #12
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b892:	bf00      	nop
 800b894:	370c      	adds	r7, #12
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr
	...

0800b8a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d109      	bne.n	800b8c4 <HAL_TIM_PWM_Start+0x24>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	bf14      	ite	ne
 800b8bc:	2301      	movne	r3, #1
 800b8be:	2300      	moveq	r3, #0
 800b8c0:	b2db      	uxtb	r3, r3
 800b8c2:	e03c      	b.n	800b93e <HAL_TIM_PWM_Start+0x9e>
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	2b04      	cmp	r3, #4
 800b8c8:	d109      	bne.n	800b8de <HAL_TIM_PWM_Start+0x3e>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b8d0:	b2db      	uxtb	r3, r3
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	bf14      	ite	ne
 800b8d6:	2301      	movne	r3, #1
 800b8d8:	2300      	moveq	r3, #0
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	e02f      	b.n	800b93e <HAL_TIM_PWM_Start+0x9e>
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2b08      	cmp	r3, #8
 800b8e2:	d109      	bne.n	800b8f8 <HAL_TIM_PWM_Start+0x58>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b8ea:	b2db      	uxtb	r3, r3
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	bf14      	ite	ne
 800b8f0:	2301      	movne	r3, #1
 800b8f2:	2300      	moveq	r3, #0
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	e022      	b.n	800b93e <HAL_TIM_PWM_Start+0x9e>
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	2b0c      	cmp	r3, #12
 800b8fc:	d109      	bne.n	800b912 <HAL_TIM_PWM_Start+0x72>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b01      	cmp	r3, #1
 800b908:	bf14      	ite	ne
 800b90a:	2301      	movne	r3, #1
 800b90c:	2300      	moveq	r3, #0
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	e015      	b.n	800b93e <HAL_TIM_PWM_Start+0x9e>
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	2b10      	cmp	r3, #16
 800b916:	d109      	bne.n	800b92c <HAL_TIM_PWM_Start+0x8c>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	2b01      	cmp	r3, #1
 800b922:	bf14      	ite	ne
 800b924:	2301      	movne	r3, #1
 800b926:	2300      	moveq	r3, #0
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	e008      	b.n	800b93e <HAL_TIM_PWM_Start+0x9e>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b932:	b2db      	uxtb	r3, r3
 800b934:	2b01      	cmp	r3, #1
 800b936:	bf14      	ite	ne
 800b938:	2301      	movne	r3, #1
 800b93a:	2300      	moveq	r3, #0
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d001      	beq.n	800b946 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e0a1      	b.n	800ba8a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d104      	bne.n	800b956 <HAL_TIM_PWM_Start+0xb6>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2202      	movs	r2, #2
 800b950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b954:	e023      	b.n	800b99e <HAL_TIM_PWM_Start+0xfe>
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	2b04      	cmp	r3, #4
 800b95a:	d104      	bne.n	800b966 <HAL_TIM_PWM_Start+0xc6>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2202      	movs	r2, #2
 800b960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b964:	e01b      	b.n	800b99e <HAL_TIM_PWM_Start+0xfe>
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	2b08      	cmp	r3, #8
 800b96a:	d104      	bne.n	800b976 <HAL_TIM_PWM_Start+0xd6>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2202      	movs	r2, #2
 800b970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b974:	e013      	b.n	800b99e <HAL_TIM_PWM_Start+0xfe>
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	2b0c      	cmp	r3, #12
 800b97a:	d104      	bne.n	800b986 <HAL_TIM_PWM_Start+0xe6>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2202      	movs	r2, #2
 800b980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b984:	e00b      	b.n	800b99e <HAL_TIM_PWM_Start+0xfe>
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	2b10      	cmp	r3, #16
 800b98a:	d104      	bne.n	800b996 <HAL_TIM_PWM_Start+0xf6>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2202      	movs	r2, #2
 800b990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b994:	e003      	b.n	800b99e <HAL_TIM_PWM_Start+0xfe>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2202      	movs	r2, #2
 800b99a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	6839      	ldr	r1, [r7, #0]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 ffea 	bl	800c980 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a38      	ldr	r2, [pc, #224]	; (800ba94 <HAL_TIM_PWM_Start+0x1f4>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d013      	beq.n	800b9de <HAL_TIM_PWM_Start+0x13e>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4a37      	ldr	r2, [pc, #220]	; (800ba98 <HAL_TIM_PWM_Start+0x1f8>)
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	d00e      	beq.n	800b9de <HAL_TIM_PWM_Start+0x13e>
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a35      	ldr	r2, [pc, #212]	; (800ba9c <HAL_TIM_PWM_Start+0x1fc>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d009      	beq.n	800b9de <HAL_TIM_PWM_Start+0x13e>
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	4a34      	ldr	r2, [pc, #208]	; (800baa0 <HAL_TIM_PWM_Start+0x200>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	d004      	beq.n	800b9de <HAL_TIM_PWM_Start+0x13e>
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a32      	ldr	r2, [pc, #200]	; (800baa4 <HAL_TIM_PWM_Start+0x204>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d101      	bne.n	800b9e2 <HAL_TIM_PWM_Start+0x142>
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e000      	b.n	800b9e4 <HAL_TIM_PWM_Start+0x144>
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d007      	beq.n	800b9f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b9f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a25      	ldr	r2, [pc, #148]	; (800ba94 <HAL_TIM_PWM_Start+0x1f4>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d022      	beq.n	800ba48 <HAL_TIM_PWM_Start+0x1a8>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba0a:	d01d      	beq.n	800ba48 <HAL_TIM_PWM_Start+0x1a8>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a25      	ldr	r2, [pc, #148]	; (800baa8 <HAL_TIM_PWM_Start+0x208>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d018      	beq.n	800ba48 <HAL_TIM_PWM_Start+0x1a8>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a24      	ldr	r2, [pc, #144]	; (800baac <HAL_TIM_PWM_Start+0x20c>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d013      	beq.n	800ba48 <HAL_TIM_PWM_Start+0x1a8>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a22      	ldr	r2, [pc, #136]	; (800bab0 <HAL_TIM_PWM_Start+0x210>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d00e      	beq.n	800ba48 <HAL_TIM_PWM_Start+0x1a8>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a1a      	ldr	r2, [pc, #104]	; (800ba98 <HAL_TIM_PWM_Start+0x1f8>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d009      	beq.n	800ba48 <HAL_TIM_PWM_Start+0x1a8>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a1e      	ldr	r2, [pc, #120]	; (800bab4 <HAL_TIM_PWM_Start+0x214>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d004      	beq.n	800ba48 <HAL_TIM_PWM_Start+0x1a8>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a16      	ldr	r2, [pc, #88]	; (800ba9c <HAL_TIM_PWM_Start+0x1fc>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d115      	bne.n	800ba74 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	689a      	ldr	r2, [r3, #8]
 800ba4e:	4b1a      	ldr	r3, [pc, #104]	; (800bab8 <HAL_TIM_PWM_Start+0x218>)
 800ba50:	4013      	ands	r3, r2
 800ba52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b06      	cmp	r3, #6
 800ba58:	d015      	beq.n	800ba86 <HAL_TIM_PWM_Start+0x1e6>
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba60:	d011      	beq.n	800ba86 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	681a      	ldr	r2, [r3, #0]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f042 0201 	orr.w	r2, r2, #1
 800ba70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba72:	e008      	b.n	800ba86 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f042 0201 	orr.w	r2, r2, #1
 800ba82:	601a      	str	r2, [r3, #0]
 800ba84:	e000      	b.n	800ba88 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	40010000 	.word	0x40010000
 800ba98:	40010400 	.word	0x40010400
 800ba9c:	40014000 	.word	0x40014000
 800baa0:	40014400 	.word	0x40014400
 800baa4:	40014800 	.word	0x40014800
 800baa8:	40000400 	.word	0x40000400
 800baac:	40000800 	.word	0x40000800
 800bab0:	40000c00 	.word	0x40000c00
 800bab4:	40001800 	.word	0x40001800
 800bab8:	00010007 	.word	0x00010007

0800babc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	f003 0302 	and.w	r3, r3, #2
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d122      	bne.n	800bb18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	f003 0302 	and.w	r3, r3, #2
 800badc:	2b02      	cmp	r3, #2
 800bade:	d11b      	bne.n	800bb18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f06f 0202 	mvn.w	r2, #2
 800bae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2201      	movs	r2, #1
 800baee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	f003 0303 	and.w	r3, r3, #3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d003      	beq.n	800bb06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 fb12 	bl	800c128 <HAL_TIM_IC_CaptureCallback>
 800bb04:	e005      	b.n	800bb12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fb04 	bl	800c114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 fb15 	bl	800c13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	f003 0304 	and.w	r3, r3, #4
 800bb22:	2b04      	cmp	r3, #4
 800bb24:	d122      	bne.n	800bb6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	f003 0304 	and.w	r3, r3, #4
 800bb30:	2b04      	cmp	r3, #4
 800bb32:	d11b      	bne.n	800bb6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f06f 0204 	mvn.w	r2, #4
 800bb3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2202      	movs	r2, #2
 800bb42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	699b      	ldr	r3, [r3, #24]
 800bb4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d003      	beq.n	800bb5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 fae8 	bl	800c128 <HAL_TIM_IC_CaptureCallback>
 800bb58:	e005      	b.n	800bb66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 fada 	bl	800c114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 faeb 	bl	800c13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	f003 0308 	and.w	r3, r3, #8
 800bb76:	2b08      	cmp	r3, #8
 800bb78:	d122      	bne.n	800bbc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	f003 0308 	and.w	r3, r3, #8
 800bb84:	2b08      	cmp	r3, #8
 800bb86:	d11b      	bne.n	800bbc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f06f 0208 	mvn.w	r2, #8
 800bb90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2204      	movs	r2, #4
 800bb96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	69db      	ldr	r3, [r3, #28]
 800bb9e:	f003 0303 	and.w	r3, r3, #3
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d003      	beq.n	800bbae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 fabe 	bl	800c128 <HAL_TIM_IC_CaptureCallback>
 800bbac:	e005      	b.n	800bbba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 fab0 	bl	800c114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 fac1 	bl	800c13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	f003 0310 	and.w	r3, r3, #16
 800bbca:	2b10      	cmp	r3, #16
 800bbcc:	d122      	bne.n	800bc14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	f003 0310 	and.w	r3, r3, #16
 800bbd8:	2b10      	cmp	r3, #16
 800bbda:	d11b      	bne.n	800bc14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f06f 0210 	mvn.w	r2, #16
 800bbe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2208      	movs	r2, #8
 800bbea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	69db      	ldr	r3, [r3, #28]
 800bbf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d003      	beq.n	800bc02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fa94 	bl	800c128 <HAL_TIM_IC_CaptureCallback>
 800bc00:	e005      	b.n	800bc0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 fa86 	bl	800c114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 fa97 	bl	800c13c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	f003 0301 	and.w	r3, r3, #1
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d10e      	bne.n	800bc40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	f003 0301 	and.w	r3, r3, #1
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d107      	bne.n	800bc40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f06f 0201 	mvn.w	r2, #1
 800bc38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7f7 f8dc 	bl	8002df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc4a:	2b80      	cmp	r3, #128	; 0x80
 800bc4c:	d10e      	bne.n	800bc6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc58:	2b80      	cmp	r3, #128	; 0x80
 800bc5a:	d107      	bne.n	800bc6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 ffc6 	bl	800cbf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc7a:	d10e      	bne.n	800bc9a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	68db      	ldr	r3, [r3, #12]
 800bc82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc86:	2b80      	cmp	r3, #128	; 0x80
 800bc88:	d107      	bne.n	800bc9a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bc92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 ffb9 	bl	800cc0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca4:	2b40      	cmp	r3, #64	; 0x40
 800bca6:	d10e      	bne.n	800bcc6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	68db      	ldr	r3, [r3, #12]
 800bcae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb2:	2b40      	cmp	r3, #64	; 0x40
 800bcb4:	d107      	bne.n	800bcc6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bcbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f000 fa45 	bl	800c150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	f003 0320 	and.w	r3, r3, #32
 800bcd0:	2b20      	cmp	r3, #32
 800bcd2:	d10e      	bne.n	800bcf2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	f003 0320 	and.w	r3, r3, #32
 800bcde:	2b20      	cmp	r3, #32
 800bce0:	d107      	bne.n	800bcf2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f06f 0220 	mvn.w	r2, #32
 800bcea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 ff79 	bl	800cbe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcf2:	bf00      	nop
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}
	...

0800bcfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b086      	sub	sp, #24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd12:	2b01      	cmp	r3, #1
 800bd14:	d101      	bne.n	800bd1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bd16:	2302      	movs	r3, #2
 800bd18:	e0ff      	b.n	800bf1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b14      	cmp	r3, #20
 800bd26:	f200 80f0 	bhi.w	800bf0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bd2a:	a201      	add	r2, pc, #4	; (adr r2, 800bd30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd30:	0800bd85 	.word	0x0800bd85
 800bd34:	0800bf0b 	.word	0x0800bf0b
 800bd38:	0800bf0b 	.word	0x0800bf0b
 800bd3c:	0800bf0b 	.word	0x0800bf0b
 800bd40:	0800bdc5 	.word	0x0800bdc5
 800bd44:	0800bf0b 	.word	0x0800bf0b
 800bd48:	0800bf0b 	.word	0x0800bf0b
 800bd4c:	0800bf0b 	.word	0x0800bf0b
 800bd50:	0800be07 	.word	0x0800be07
 800bd54:	0800bf0b 	.word	0x0800bf0b
 800bd58:	0800bf0b 	.word	0x0800bf0b
 800bd5c:	0800bf0b 	.word	0x0800bf0b
 800bd60:	0800be47 	.word	0x0800be47
 800bd64:	0800bf0b 	.word	0x0800bf0b
 800bd68:	0800bf0b 	.word	0x0800bf0b
 800bd6c:	0800bf0b 	.word	0x0800bf0b
 800bd70:	0800be89 	.word	0x0800be89
 800bd74:	0800bf0b 	.word	0x0800bf0b
 800bd78:	0800bf0b 	.word	0x0800bf0b
 800bd7c:	0800bf0b 	.word	0x0800bf0b
 800bd80:	0800bec9 	.word	0x0800bec9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68b9      	ldr	r1, [r7, #8]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f000 fa84 	bl	800c298 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	699a      	ldr	r2, [r3, #24]
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f042 0208 	orr.w	r2, r2, #8
 800bd9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	699a      	ldr	r2, [r3, #24]
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f022 0204 	bic.w	r2, r2, #4
 800bdae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6999      	ldr	r1, [r3, #24]
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	691a      	ldr	r2, [r3, #16]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	430a      	orrs	r2, r1
 800bdc0:	619a      	str	r2, [r3, #24]
      break;
 800bdc2:	e0a5      	b.n	800bf10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	68b9      	ldr	r1, [r7, #8]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f000 faf4 	bl	800c3b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	699a      	ldr	r2, [r3, #24]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bdde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	699a      	ldr	r2, [r3, #24]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bdee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	6999      	ldr	r1, [r3, #24]
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	021a      	lsls	r2, r3, #8
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	430a      	orrs	r2, r1
 800be02:	619a      	str	r2, [r3, #24]
      break;
 800be04:	e084      	b.n	800bf10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	68b9      	ldr	r1, [r7, #8]
 800be0c:	4618      	mov	r0, r3
 800be0e:	f000 fb5d 	bl	800c4cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	69da      	ldr	r2, [r3, #28]
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	f042 0208 	orr.w	r2, r2, #8
 800be20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	69da      	ldr	r2, [r3, #28]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f022 0204 	bic.w	r2, r2, #4
 800be30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	69d9      	ldr	r1, [r3, #28]
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	691a      	ldr	r2, [r3, #16]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	430a      	orrs	r2, r1
 800be42:	61da      	str	r2, [r3, #28]
      break;
 800be44:	e064      	b.n	800bf10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68b9      	ldr	r1, [r7, #8]
 800be4c:	4618      	mov	r0, r3
 800be4e:	f000 fbc5 	bl	800c5dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	69da      	ldr	r2, [r3, #28]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800be60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	69da      	ldr	r2, [r3, #28]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800be70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	69d9      	ldr	r1, [r3, #28]
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	691b      	ldr	r3, [r3, #16]
 800be7c:	021a      	lsls	r2, r3, #8
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	430a      	orrs	r2, r1
 800be84:	61da      	str	r2, [r3, #28]
      break;
 800be86:	e043      	b.n	800bf10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	68b9      	ldr	r1, [r7, #8]
 800be8e:	4618      	mov	r0, r3
 800be90:	f000 fc0e 	bl	800c6b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f042 0208 	orr.w	r2, r2, #8
 800bea2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f022 0204 	bic.w	r2, r2, #4
 800beb2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	691a      	ldr	r2, [r3, #16]
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	430a      	orrs	r2, r1
 800bec4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bec6:	e023      	b.n	800bf10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	68b9      	ldr	r1, [r7, #8]
 800bece:	4618      	mov	r0, r3
 800bed0:	f000 fc52 	bl	800c778 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bee2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bef2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800befa:	68bb      	ldr	r3, [r7, #8]
 800befc:	691b      	ldr	r3, [r3, #16]
 800befe:	021a      	lsls	r2, r3, #8
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	430a      	orrs	r2, r1
 800bf06:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800bf08:	e002      	b.n	800bf10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	75fb      	strb	r3, [r7, #23]
      break;
 800bf0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	2200      	movs	r2, #0
 800bf14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bf18:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3718      	adds	r7, #24
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop

0800bf24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b084      	sub	sp, #16
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
 800bf2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d101      	bne.n	800bf40 <HAL_TIM_ConfigClockSource+0x1c>
 800bf3c:	2302      	movs	r3, #2
 800bf3e:	e0dc      	b.n	800c0fa <HAL_TIM_ConfigClockSource+0x1d6>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2201      	movs	r2, #1
 800bf44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2202      	movs	r2, #2
 800bf4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	689b      	ldr	r3, [r3, #8]
 800bf56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf58:	68ba      	ldr	r2, [r7, #8]
 800bf5a:	4b6a      	ldr	r3, [pc, #424]	; (800c104 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bf5c:	4013      	ands	r3, r2
 800bf5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	68ba      	ldr	r2, [r7, #8]
 800bf6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	4a64      	ldr	r2, [pc, #400]	; (800c108 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	f000 80a9 	beq.w	800c0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800bf7c:	4a62      	ldr	r2, [pc, #392]	; (800c108 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	f200 80ae 	bhi.w	800c0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf84:	4a61      	ldr	r2, [pc, #388]	; (800c10c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	f000 80a1 	beq.w	800c0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800bf8c:	4a5f      	ldr	r2, [pc, #380]	; (800c10c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	f200 80a6 	bhi.w	800c0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf94:	4a5e      	ldr	r2, [pc, #376]	; (800c110 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	f000 8099 	beq.w	800c0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800bf9c:	4a5c      	ldr	r2, [pc, #368]	; (800c110 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	f200 809e 	bhi.w	800c0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfa4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bfa8:	f000 8091 	beq.w	800c0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800bfac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bfb0:	f200 8096 	bhi.w	800c0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfb8:	f000 8089 	beq.w	800c0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800bfbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bfc0:	f200 808e 	bhi.w	800c0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfc8:	d03e      	beq.n	800c048 <HAL_TIM_ConfigClockSource+0x124>
 800bfca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfce:	f200 8087 	bhi.w	800c0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfd6:	f000 8086 	beq.w	800c0e6 <HAL_TIM_ConfigClockSource+0x1c2>
 800bfda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfde:	d87f      	bhi.n	800c0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfe0:	2b70      	cmp	r3, #112	; 0x70
 800bfe2:	d01a      	beq.n	800c01a <HAL_TIM_ConfigClockSource+0xf6>
 800bfe4:	2b70      	cmp	r3, #112	; 0x70
 800bfe6:	d87b      	bhi.n	800c0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfe8:	2b60      	cmp	r3, #96	; 0x60
 800bfea:	d050      	beq.n	800c08e <HAL_TIM_ConfigClockSource+0x16a>
 800bfec:	2b60      	cmp	r3, #96	; 0x60
 800bfee:	d877      	bhi.n	800c0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bff0:	2b50      	cmp	r3, #80	; 0x50
 800bff2:	d03c      	beq.n	800c06e <HAL_TIM_ConfigClockSource+0x14a>
 800bff4:	2b50      	cmp	r3, #80	; 0x50
 800bff6:	d873      	bhi.n	800c0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800bff8:	2b40      	cmp	r3, #64	; 0x40
 800bffa:	d058      	beq.n	800c0ae <HAL_TIM_ConfigClockSource+0x18a>
 800bffc:	2b40      	cmp	r3, #64	; 0x40
 800bffe:	d86f      	bhi.n	800c0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c000:	2b30      	cmp	r3, #48	; 0x30
 800c002:	d064      	beq.n	800c0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c004:	2b30      	cmp	r3, #48	; 0x30
 800c006:	d86b      	bhi.n	800c0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c008:	2b20      	cmp	r3, #32
 800c00a:	d060      	beq.n	800c0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c00c:	2b20      	cmp	r3, #32
 800c00e:	d867      	bhi.n	800c0e0 <HAL_TIM_ConfigClockSource+0x1bc>
 800c010:	2b00      	cmp	r3, #0
 800c012:	d05c      	beq.n	800c0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c014:	2b10      	cmp	r3, #16
 800c016:	d05a      	beq.n	800c0ce <HAL_TIM_ConfigClockSource+0x1aa>
 800c018:	e062      	b.n	800c0e0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	6818      	ldr	r0, [r3, #0]
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	6899      	ldr	r1, [r3, #8]
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	685a      	ldr	r2, [r3, #4]
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	68db      	ldr	r3, [r3, #12]
 800c02a:	f000 fc89 	bl	800c940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	689b      	ldr	r3, [r3, #8]
 800c034:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c03c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	609a      	str	r2, [r3, #8]
      break;
 800c046:	e04f      	b.n	800c0e8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6818      	ldr	r0, [r3, #0]
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	6899      	ldr	r1, [r3, #8]
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	685a      	ldr	r2, [r3, #4]
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	f000 fc72 	bl	800c940 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	689a      	ldr	r2, [r3, #8]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c06a:	609a      	str	r2, [r3, #8]
      break;
 800c06c:	e03c      	b.n	800c0e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6818      	ldr	r0, [r3, #0]
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	6859      	ldr	r1, [r3, #4]
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	68db      	ldr	r3, [r3, #12]
 800c07a:	461a      	mov	r2, r3
 800c07c:	f000 fbe2 	bl	800c844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	2150      	movs	r1, #80	; 0x50
 800c086:	4618      	mov	r0, r3
 800c088:	f000 fc3c 	bl	800c904 <TIM_ITRx_SetConfig>
      break;
 800c08c:	e02c      	b.n	800c0e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6818      	ldr	r0, [r3, #0]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	6859      	ldr	r1, [r3, #4]
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	68db      	ldr	r3, [r3, #12]
 800c09a:	461a      	mov	r2, r3
 800c09c:	f000 fc01 	bl	800c8a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	2160      	movs	r1, #96	; 0x60
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	f000 fc2c 	bl	800c904 <TIM_ITRx_SetConfig>
      break;
 800c0ac:	e01c      	b.n	800c0e8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6818      	ldr	r0, [r3, #0]
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	6859      	ldr	r1, [r3, #4]
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	f000 fbc2 	bl	800c844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2140      	movs	r1, #64	; 0x40
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	f000 fc1c 	bl	800c904 <TIM_ITRx_SetConfig>
      break;
 800c0cc:	e00c      	b.n	800c0e8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681a      	ldr	r2, [r3, #0]
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4619      	mov	r1, r3
 800c0d8:	4610      	mov	r0, r2
 800c0da:	f000 fc13 	bl	800c904 <TIM_ITRx_SetConfig>
      break;
 800c0de:	e003      	b.n	800c0e8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	73fb      	strb	r3, [r7, #15]
      break;
 800c0e4:	e000      	b.n	800c0e8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c0e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3710      	adds	r7, #16
 800c0fe:	46bd      	mov	sp, r7
 800c100:	bd80      	pop	{r7, pc}
 800c102:	bf00      	nop
 800c104:	ffceff88 	.word	0xffceff88
 800c108:	00100040 	.word	0x00100040
 800c10c:	00100030 	.word	0x00100030
 800c110:	00100020 	.word	0x00100020

0800c114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c114:	b480      	push	{r7}
 800c116:	b083      	sub	sp, #12
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c11c:	bf00      	nop
 800c11e:	370c      	adds	r7, #12
 800c120:	46bd      	mov	sp, r7
 800c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c126:	4770      	bx	lr

0800c128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c128:	b480      	push	{r7}
 800c12a:	b083      	sub	sp, #12
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c130:	bf00      	nop
 800c132:	370c      	adds	r7, #12
 800c134:	46bd      	mov	sp, r7
 800c136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13a:	4770      	bx	lr

0800c13c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c144:	bf00      	nop
 800c146:	370c      	adds	r7, #12
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c158:	bf00      	nop
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c164:	b480      	push	{r7}
 800c166:	b085      	sub	sp, #20
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	4a40      	ldr	r2, [pc, #256]	; (800c278 <TIM_Base_SetConfig+0x114>)
 800c178:	4293      	cmp	r3, r2
 800c17a:	d013      	beq.n	800c1a4 <TIM_Base_SetConfig+0x40>
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c182:	d00f      	beq.n	800c1a4 <TIM_Base_SetConfig+0x40>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a3d      	ldr	r2, [pc, #244]	; (800c27c <TIM_Base_SetConfig+0x118>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d00b      	beq.n	800c1a4 <TIM_Base_SetConfig+0x40>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4a3c      	ldr	r2, [pc, #240]	; (800c280 <TIM_Base_SetConfig+0x11c>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d007      	beq.n	800c1a4 <TIM_Base_SetConfig+0x40>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	4a3b      	ldr	r2, [pc, #236]	; (800c284 <TIM_Base_SetConfig+0x120>)
 800c198:	4293      	cmp	r3, r2
 800c19a:	d003      	beq.n	800c1a4 <TIM_Base_SetConfig+0x40>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	4a3a      	ldr	r2, [pc, #232]	; (800c288 <TIM_Base_SetConfig+0x124>)
 800c1a0:	4293      	cmp	r3, r2
 800c1a2:	d108      	bne.n	800c1b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	68fa      	ldr	r2, [r7, #12]
 800c1b2:	4313      	orrs	r3, r2
 800c1b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4a2f      	ldr	r2, [pc, #188]	; (800c278 <TIM_Base_SetConfig+0x114>)
 800c1ba:	4293      	cmp	r3, r2
 800c1bc:	d01f      	beq.n	800c1fe <TIM_Base_SetConfig+0x9a>
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1c4:	d01b      	beq.n	800c1fe <TIM_Base_SetConfig+0x9a>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	4a2c      	ldr	r2, [pc, #176]	; (800c27c <TIM_Base_SetConfig+0x118>)
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	d017      	beq.n	800c1fe <TIM_Base_SetConfig+0x9a>
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	4a2b      	ldr	r2, [pc, #172]	; (800c280 <TIM_Base_SetConfig+0x11c>)
 800c1d2:	4293      	cmp	r3, r2
 800c1d4:	d013      	beq.n	800c1fe <TIM_Base_SetConfig+0x9a>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	4a2a      	ldr	r2, [pc, #168]	; (800c284 <TIM_Base_SetConfig+0x120>)
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d00f      	beq.n	800c1fe <TIM_Base_SetConfig+0x9a>
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	4a29      	ldr	r2, [pc, #164]	; (800c288 <TIM_Base_SetConfig+0x124>)
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d00b      	beq.n	800c1fe <TIM_Base_SetConfig+0x9a>
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a28      	ldr	r2, [pc, #160]	; (800c28c <TIM_Base_SetConfig+0x128>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d007      	beq.n	800c1fe <TIM_Base_SetConfig+0x9a>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a27      	ldr	r2, [pc, #156]	; (800c290 <TIM_Base_SetConfig+0x12c>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d003      	beq.n	800c1fe <TIM_Base_SetConfig+0x9a>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	4a26      	ldr	r2, [pc, #152]	; (800c294 <TIM_Base_SetConfig+0x130>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d108      	bne.n	800c210 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	68db      	ldr	r3, [r3, #12]
 800c20a:	68fa      	ldr	r2, [r7, #12]
 800c20c:	4313      	orrs	r3, r2
 800c20e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	695b      	ldr	r3, [r3, #20]
 800c21a:	4313      	orrs	r3, r2
 800c21c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	689a      	ldr	r2, [r3, #8]
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4a10      	ldr	r2, [pc, #64]	; (800c278 <TIM_Base_SetConfig+0x114>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d00f      	beq.n	800c25c <TIM_Base_SetConfig+0xf8>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a12      	ldr	r2, [pc, #72]	; (800c288 <TIM_Base_SetConfig+0x124>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d00b      	beq.n	800c25c <TIM_Base_SetConfig+0xf8>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a11      	ldr	r2, [pc, #68]	; (800c28c <TIM_Base_SetConfig+0x128>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d007      	beq.n	800c25c <TIM_Base_SetConfig+0xf8>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a10      	ldr	r2, [pc, #64]	; (800c290 <TIM_Base_SetConfig+0x12c>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d003      	beq.n	800c25c <TIM_Base_SetConfig+0xf8>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a0f      	ldr	r2, [pc, #60]	; (800c294 <TIM_Base_SetConfig+0x130>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d103      	bne.n	800c264 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	691a      	ldr	r2, [r3, #16]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2201      	movs	r2, #1
 800c268:	615a      	str	r2, [r3, #20]
}
 800c26a:	bf00      	nop
 800c26c:	3714      	adds	r7, #20
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop
 800c278:	40010000 	.word	0x40010000
 800c27c:	40000400 	.word	0x40000400
 800c280:	40000800 	.word	0x40000800
 800c284:	40000c00 	.word	0x40000c00
 800c288:	40010400 	.word	0x40010400
 800c28c:	40014000 	.word	0x40014000
 800c290:	40014400 	.word	0x40014400
 800c294:	40014800 	.word	0x40014800

0800c298 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c298:	b480      	push	{r7}
 800c29a:	b087      	sub	sp, #28
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6a1b      	ldr	r3, [r3, #32]
 800c2a6:	f023 0201 	bic.w	r2, r3, #1
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a1b      	ldr	r3, [r3, #32]
 800c2b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c2c0:	68fa      	ldr	r2, [r7, #12]
 800c2c2:	4b37      	ldr	r3, [pc, #220]	; (800c3a0 <TIM_OC1_SetConfig+0x108>)
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f023 0303 	bic.w	r3, r3, #3
 800c2ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	f023 0302 	bic.w	r3, r3, #2
 800c2e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4a2d      	ldr	r2, [pc, #180]	; (800c3a4 <TIM_OC1_SetConfig+0x10c>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d00f      	beq.n	800c314 <TIM_OC1_SetConfig+0x7c>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	4a2c      	ldr	r2, [pc, #176]	; (800c3a8 <TIM_OC1_SetConfig+0x110>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d00b      	beq.n	800c314 <TIM_OC1_SetConfig+0x7c>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4a2b      	ldr	r2, [pc, #172]	; (800c3ac <TIM_OC1_SetConfig+0x114>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d007      	beq.n	800c314 <TIM_OC1_SetConfig+0x7c>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a2a      	ldr	r2, [pc, #168]	; (800c3b0 <TIM_OC1_SetConfig+0x118>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d003      	beq.n	800c314 <TIM_OC1_SetConfig+0x7c>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4a29      	ldr	r2, [pc, #164]	; (800c3b4 <TIM_OC1_SetConfig+0x11c>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d10c      	bne.n	800c32e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	f023 0308 	bic.w	r3, r3, #8
 800c31a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	4313      	orrs	r3, r2
 800c324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c326:	697b      	ldr	r3, [r7, #20]
 800c328:	f023 0304 	bic.w	r3, r3, #4
 800c32c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4a1c      	ldr	r2, [pc, #112]	; (800c3a4 <TIM_OC1_SetConfig+0x10c>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d00f      	beq.n	800c356 <TIM_OC1_SetConfig+0xbe>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4a1b      	ldr	r2, [pc, #108]	; (800c3a8 <TIM_OC1_SetConfig+0x110>)
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d00b      	beq.n	800c356 <TIM_OC1_SetConfig+0xbe>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	4a1a      	ldr	r2, [pc, #104]	; (800c3ac <TIM_OC1_SetConfig+0x114>)
 800c342:	4293      	cmp	r3, r2
 800c344:	d007      	beq.n	800c356 <TIM_OC1_SetConfig+0xbe>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	4a19      	ldr	r2, [pc, #100]	; (800c3b0 <TIM_OC1_SetConfig+0x118>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d003      	beq.n	800c356 <TIM_OC1_SetConfig+0xbe>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4a18      	ldr	r2, [pc, #96]	; (800c3b4 <TIM_OC1_SetConfig+0x11c>)
 800c352:	4293      	cmp	r3, r2
 800c354:	d111      	bne.n	800c37a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c35c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	695b      	ldr	r3, [r3, #20]
 800c36a:	693a      	ldr	r2, [r7, #16]
 800c36c:	4313      	orrs	r3, r2
 800c36e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	699b      	ldr	r3, [r3, #24]
 800c374:	693a      	ldr	r2, [r7, #16]
 800c376:	4313      	orrs	r3, r2
 800c378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	693a      	ldr	r2, [r7, #16]
 800c37e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	68fa      	ldr	r2, [r7, #12]
 800c384:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	685a      	ldr	r2, [r3, #4]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	697a      	ldr	r2, [r7, #20]
 800c392:	621a      	str	r2, [r3, #32]
}
 800c394:	bf00      	nop
 800c396:	371c      	adds	r7, #28
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	fffeff8f 	.word	0xfffeff8f
 800c3a4:	40010000 	.word	0x40010000
 800c3a8:	40010400 	.word	0x40010400
 800c3ac:	40014000 	.word	0x40014000
 800c3b0:	40014400 	.word	0x40014400
 800c3b4:	40014800 	.word	0x40014800

0800c3b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b087      	sub	sp, #28
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	6a1b      	ldr	r3, [r3, #32]
 800c3c6:	f023 0210 	bic.w	r2, r3, #16
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	6a1b      	ldr	r3, [r3, #32]
 800c3d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	699b      	ldr	r3, [r3, #24]
 800c3de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	4b34      	ldr	r3, [pc, #208]	; (800c4b4 <TIM_OC2_SetConfig+0xfc>)
 800c3e4:	4013      	ands	r3, r2
 800c3e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c3ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	021b      	lsls	r3, r3, #8
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	f023 0320 	bic.w	r3, r3, #32
 800c402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	689b      	ldr	r3, [r3, #8]
 800c408:	011b      	lsls	r3, r3, #4
 800c40a:	697a      	ldr	r2, [r7, #20]
 800c40c:	4313      	orrs	r3, r2
 800c40e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	4a29      	ldr	r2, [pc, #164]	; (800c4b8 <TIM_OC2_SetConfig+0x100>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d003      	beq.n	800c420 <TIM_OC2_SetConfig+0x68>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	4a28      	ldr	r2, [pc, #160]	; (800c4bc <TIM_OC2_SetConfig+0x104>)
 800c41c:	4293      	cmp	r3, r2
 800c41e:	d10d      	bne.n	800c43c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	68db      	ldr	r3, [r3, #12]
 800c42c:	011b      	lsls	r3, r3, #4
 800c42e:	697a      	ldr	r2, [r7, #20]
 800c430:	4313      	orrs	r3, r2
 800c432:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c43a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a1e      	ldr	r2, [pc, #120]	; (800c4b8 <TIM_OC2_SetConfig+0x100>)
 800c440:	4293      	cmp	r3, r2
 800c442:	d00f      	beq.n	800c464 <TIM_OC2_SetConfig+0xac>
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	4a1d      	ldr	r2, [pc, #116]	; (800c4bc <TIM_OC2_SetConfig+0x104>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d00b      	beq.n	800c464 <TIM_OC2_SetConfig+0xac>
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	4a1c      	ldr	r2, [pc, #112]	; (800c4c0 <TIM_OC2_SetConfig+0x108>)
 800c450:	4293      	cmp	r3, r2
 800c452:	d007      	beq.n	800c464 <TIM_OC2_SetConfig+0xac>
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	4a1b      	ldr	r2, [pc, #108]	; (800c4c4 <TIM_OC2_SetConfig+0x10c>)
 800c458:	4293      	cmp	r3, r2
 800c45a:	d003      	beq.n	800c464 <TIM_OC2_SetConfig+0xac>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	4a1a      	ldr	r2, [pc, #104]	; (800c4c8 <TIM_OC2_SetConfig+0x110>)
 800c460:	4293      	cmp	r3, r2
 800c462:	d113      	bne.n	800c48c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c46a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c46c:	693b      	ldr	r3, [r7, #16]
 800c46e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c472:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	695b      	ldr	r3, [r3, #20]
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	693a      	ldr	r2, [r7, #16]
 800c47c:	4313      	orrs	r3, r2
 800c47e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	699b      	ldr	r3, [r3, #24]
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	693a      	ldr	r2, [r7, #16]
 800c488:	4313      	orrs	r3, r2
 800c48a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	693a      	ldr	r2, [r7, #16]
 800c490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	68fa      	ldr	r2, [r7, #12]
 800c496:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	685a      	ldr	r2, [r3, #4]
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	697a      	ldr	r2, [r7, #20]
 800c4a4:	621a      	str	r2, [r3, #32]
}
 800c4a6:	bf00      	nop
 800c4a8:	371c      	adds	r7, #28
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b0:	4770      	bx	lr
 800c4b2:	bf00      	nop
 800c4b4:	feff8fff 	.word	0xfeff8fff
 800c4b8:	40010000 	.word	0x40010000
 800c4bc:	40010400 	.word	0x40010400
 800c4c0:	40014000 	.word	0x40014000
 800c4c4:	40014400 	.word	0x40014400
 800c4c8:	40014800 	.word	0x40014800

0800c4cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b087      	sub	sp, #28
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6a1b      	ldr	r3, [r3, #32]
 800c4da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	6a1b      	ldr	r3, [r3, #32]
 800c4e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	69db      	ldr	r3, [r3, #28]
 800c4f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	4b33      	ldr	r3, [pc, #204]	; (800c5c4 <TIM_OC3_SetConfig+0xf8>)
 800c4f8:	4013      	ands	r3, r2
 800c4fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f023 0303 	bic.w	r3, r3, #3
 800c502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	4313      	orrs	r3, r2
 800c50c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	689b      	ldr	r3, [r3, #8]
 800c51a:	021b      	lsls	r3, r3, #8
 800c51c:	697a      	ldr	r2, [r7, #20]
 800c51e:	4313      	orrs	r3, r2
 800c520:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4a28      	ldr	r2, [pc, #160]	; (800c5c8 <TIM_OC3_SetConfig+0xfc>)
 800c526:	4293      	cmp	r3, r2
 800c528:	d003      	beq.n	800c532 <TIM_OC3_SetConfig+0x66>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4a27      	ldr	r2, [pc, #156]	; (800c5cc <TIM_OC3_SetConfig+0x100>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d10d      	bne.n	800c54e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	68db      	ldr	r3, [r3, #12]
 800c53e:	021b      	lsls	r3, r3, #8
 800c540:	697a      	ldr	r2, [r7, #20]
 800c542:	4313      	orrs	r3, r2
 800c544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c54c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	4a1d      	ldr	r2, [pc, #116]	; (800c5c8 <TIM_OC3_SetConfig+0xfc>)
 800c552:	4293      	cmp	r3, r2
 800c554:	d00f      	beq.n	800c576 <TIM_OC3_SetConfig+0xaa>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	4a1c      	ldr	r2, [pc, #112]	; (800c5cc <TIM_OC3_SetConfig+0x100>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d00b      	beq.n	800c576 <TIM_OC3_SetConfig+0xaa>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	4a1b      	ldr	r2, [pc, #108]	; (800c5d0 <TIM_OC3_SetConfig+0x104>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d007      	beq.n	800c576 <TIM_OC3_SetConfig+0xaa>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	4a1a      	ldr	r2, [pc, #104]	; (800c5d4 <TIM_OC3_SetConfig+0x108>)
 800c56a:	4293      	cmp	r3, r2
 800c56c:	d003      	beq.n	800c576 <TIM_OC3_SetConfig+0xaa>
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	4a19      	ldr	r2, [pc, #100]	; (800c5d8 <TIM_OC3_SetConfig+0x10c>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d113      	bne.n	800c59e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c576:	693b      	ldr	r3, [r7, #16]
 800c578:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c57c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c584:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	695b      	ldr	r3, [r3, #20]
 800c58a:	011b      	lsls	r3, r3, #4
 800c58c:	693a      	ldr	r2, [r7, #16]
 800c58e:	4313      	orrs	r3, r2
 800c590:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	699b      	ldr	r3, [r3, #24]
 800c596:	011b      	lsls	r3, r3, #4
 800c598:	693a      	ldr	r2, [r7, #16]
 800c59a:	4313      	orrs	r3, r2
 800c59c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	693a      	ldr	r2, [r7, #16]
 800c5a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	685a      	ldr	r2, [r3, #4]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	697a      	ldr	r2, [r7, #20]
 800c5b6:	621a      	str	r2, [r3, #32]
}
 800c5b8:	bf00      	nop
 800c5ba:	371c      	adds	r7, #28
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr
 800c5c4:	fffeff8f 	.word	0xfffeff8f
 800c5c8:	40010000 	.word	0x40010000
 800c5cc:	40010400 	.word	0x40010400
 800c5d0:	40014000 	.word	0x40014000
 800c5d4:	40014400 	.word	0x40014400
 800c5d8:	40014800 	.word	0x40014800

0800c5dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c5dc:	b480      	push	{r7}
 800c5de:	b087      	sub	sp, #28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	6078      	str	r0, [r7, #4]
 800c5e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6a1b      	ldr	r3, [r3, #32]
 800c5ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	685b      	ldr	r3, [r3, #4]
 800c5fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	69db      	ldr	r3, [r3, #28]
 800c602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c604:	68fa      	ldr	r2, [r7, #12]
 800c606:	4b24      	ldr	r3, [pc, #144]	; (800c698 <TIM_OC4_SetConfig+0xbc>)
 800c608:	4013      	ands	r3, r2
 800c60a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c612:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	021b      	lsls	r3, r3, #8
 800c61a:	68fa      	ldr	r2, [r7, #12]
 800c61c:	4313      	orrs	r3, r2
 800c61e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c626:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	031b      	lsls	r3, r3, #12
 800c62e:	693a      	ldr	r2, [r7, #16]
 800c630:	4313      	orrs	r3, r2
 800c632:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	4a19      	ldr	r2, [pc, #100]	; (800c69c <TIM_OC4_SetConfig+0xc0>)
 800c638:	4293      	cmp	r3, r2
 800c63a:	d00f      	beq.n	800c65c <TIM_OC4_SetConfig+0x80>
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a18      	ldr	r2, [pc, #96]	; (800c6a0 <TIM_OC4_SetConfig+0xc4>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d00b      	beq.n	800c65c <TIM_OC4_SetConfig+0x80>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4a17      	ldr	r2, [pc, #92]	; (800c6a4 <TIM_OC4_SetConfig+0xc8>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d007      	beq.n	800c65c <TIM_OC4_SetConfig+0x80>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	4a16      	ldr	r2, [pc, #88]	; (800c6a8 <TIM_OC4_SetConfig+0xcc>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d003      	beq.n	800c65c <TIM_OC4_SetConfig+0x80>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4a15      	ldr	r2, [pc, #84]	; (800c6ac <TIM_OC4_SetConfig+0xd0>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d109      	bne.n	800c670 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c662:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	695b      	ldr	r3, [r3, #20]
 800c668:	019b      	lsls	r3, r3, #6
 800c66a:	697a      	ldr	r2, [r7, #20]
 800c66c:	4313      	orrs	r3, r2
 800c66e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	697a      	ldr	r2, [r7, #20]
 800c674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	68fa      	ldr	r2, [r7, #12]
 800c67a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	685a      	ldr	r2, [r3, #4]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	693a      	ldr	r2, [r7, #16]
 800c688:	621a      	str	r2, [r3, #32]
}
 800c68a:	bf00      	nop
 800c68c:	371c      	adds	r7, #28
 800c68e:	46bd      	mov	sp, r7
 800c690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c694:	4770      	bx	lr
 800c696:	bf00      	nop
 800c698:	feff8fff 	.word	0xfeff8fff
 800c69c:	40010000 	.word	0x40010000
 800c6a0:	40010400 	.word	0x40010400
 800c6a4:	40014000 	.word	0x40014000
 800c6a8:	40014400 	.word	0x40014400
 800c6ac:	40014800 	.word	0x40014800

0800c6b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b087      	sub	sp, #28
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6a1b      	ldr	r3, [r3, #32]
 800c6be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6a1b      	ldr	r3, [r3, #32]
 800c6ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	4b21      	ldr	r3, [pc, #132]	; (800c760 <TIM_OC5_SetConfig+0xb0>)
 800c6dc:	4013      	ands	r3, r2
 800c6de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c6ea:	693b      	ldr	r3, [r7, #16]
 800c6ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c6f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	689b      	ldr	r3, [r3, #8]
 800c6f6:	041b      	lsls	r3, r3, #16
 800c6f8:	693a      	ldr	r2, [r7, #16]
 800c6fa:	4313      	orrs	r3, r2
 800c6fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a18      	ldr	r2, [pc, #96]	; (800c764 <TIM_OC5_SetConfig+0xb4>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d00f      	beq.n	800c726 <TIM_OC5_SetConfig+0x76>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a17      	ldr	r2, [pc, #92]	; (800c768 <TIM_OC5_SetConfig+0xb8>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d00b      	beq.n	800c726 <TIM_OC5_SetConfig+0x76>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a16      	ldr	r2, [pc, #88]	; (800c76c <TIM_OC5_SetConfig+0xbc>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d007      	beq.n	800c726 <TIM_OC5_SetConfig+0x76>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a15      	ldr	r2, [pc, #84]	; (800c770 <TIM_OC5_SetConfig+0xc0>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d003      	beq.n	800c726 <TIM_OC5_SetConfig+0x76>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4a14      	ldr	r2, [pc, #80]	; (800c774 <TIM_OC5_SetConfig+0xc4>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d109      	bne.n	800c73a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c72c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	695b      	ldr	r3, [r3, #20]
 800c732:	021b      	lsls	r3, r3, #8
 800c734:	697a      	ldr	r2, [r7, #20]
 800c736:	4313      	orrs	r3, r2
 800c738:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	697a      	ldr	r2, [r7, #20]
 800c73e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	68fa      	ldr	r2, [r7, #12]
 800c744:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	685a      	ldr	r2, [r3, #4]
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	693a      	ldr	r2, [r7, #16]
 800c752:	621a      	str	r2, [r3, #32]
}
 800c754:	bf00      	nop
 800c756:	371c      	adds	r7, #28
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	fffeff8f 	.word	0xfffeff8f
 800c764:	40010000 	.word	0x40010000
 800c768:	40010400 	.word	0x40010400
 800c76c:	40014000 	.word	0x40014000
 800c770:	40014400 	.word	0x40014400
 800c774:	40014800 	.word	0x40014800

0800c778 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c778:	b480      	push	{r7}
 800c77a:	b087      	sub	sp, #28
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	6078      	str	r0, [r7, #4]
 800c780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6a1b      	ldr	r3, [r3, #32]
 800c786:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6a1b      	ldr	r3, [r3, #32]
 800c792:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	685b      	ldr	r3, [r3, #4]
 800c798:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	4b22      	ldr	r3, [pc, #136]	; (800c82c <TIM_OC6_SetConfig+0xb4>)
 800c7a4:	4013      	ands	r3, r2
 800c7a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	021b      	lsls	r3, r3, #8
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c7ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	689b      	ldr	r3, [r3, #8]
 800c7c0:	051b      	lsls	r3, r3, #20
 800c7c2:	693a      	ldr	r2, [r7, #16]
 800c7c4:	4313      	orrs	r3, r2
 800c7c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4a19      	ldr	r2, [pc, #100]	; (800c830 <TIM_OC6_SetConfig+0xb8>)
 800c7cc:	4293      	cmp	r3, r2
 800c7ce:	d00f      	beq.n	800c7f0 <TIM_OC6_SetConfig+0x78>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4a18      	ldr	r2, [pc, #96]	; (800c834 <TIM_OC6_SetConfig+0xbc>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d00b      	beq.n	800c7f0 <TIM_OC6_SetConfig+0x78>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a17      	ldr	r2, [pc, #92]	; (800c838 <TIM_OC6_SetConfig+0xc0>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d007      	beq.n	800c7f0 <TIM_OC6_SetConfig+0x78>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a16      	ldr	r2, [pc, #88]	; (800c83c <TIM_OC6_SetConfig+0xc4>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d003      	beq.n	800c7f0 <TIM_OC6_SetConfig+0x78>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a15      	ldr	r2, [pc, #84]	; (800c840 <TIM_OC6_SetConfig+0xc8>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d109      	bne.n	800c804 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c7f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	695b      	ldr	r3, [r3, #20]
 800c7fc:	029b      	lsls	r3, r3, #10
 800c7fe:	697a      	ldr	r2, [r7, #20]
 800c800:	4313      	orrs	r3, r2
 800c802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	697a      	ldr	r2, [r7, #20]
 800c808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	685a      	ldr	r2, [r3, #4]
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	693a      	ldr	r2, [r7, #16]
 800c81c:	621a      	str	r2, [r3, #32]
}
 800c81e:	bf00      	nop
 800c820:	371c      	adds	r7, #28
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	feff8fff 	.word	0xfeff8fff
 800c830:	40010000 	.word	0x40010000
 800c834:	40010400 	.word	0x40010400
 800c838:	40014000 	.word	0x40014000
 800c83c:	40014400 	.word	0x40014400
 800c840:	40014800 	.word	0x40014800

0800c844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c844:	b480      	push	{r7}
 800c846:	b087      	sub	sp, #28
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	6a1b      	ldr	r3, [r3, #32]
 800c854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	6a1b      	ldr	r3, [r3, #32]
 800c85a:	f023 0201 	bic.w	r2, r3, #1
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c86e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	011b      	lsls	r3, r3, #4
 800c874:	693a      	ldr	r2, [r7, #16]
 800c876:	4313      	orrs	r3, r2
 800c878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	f023 030a 	bic.w	r3, r3, #10
 800c880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c882:	697a      	ldr	r2, [r7, #20]
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	4313      	orrs	r3, r2
 800c888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	693a      	ldr	r2, [r7, #16]
 800c88e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	697a      	ldr	r2, [r7, #20]
 800c894:	621a      	str	r2, [r3, #32]
}
 800c896:	bf00      	nop
 800c898:	371c      	adds	r7, #28
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr

0800c8a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8a2:	b480      	push	{r7}
 800c8a4:	b087      	sub	sp, #28
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	60f8      	str	r0, [r7, #12]
 800c8aa:	60b9      	str	r1, [r7, #8]
 800c8ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6a1b      	ldr	r3, [r3, #32]
 800c8b2:	f023 0210 	bic.w	r2, r3, #16
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	699b      	ldr	r3, [r3, #24]
 800c8be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	6a1b      	ldr	r3, [r3, #32]
 800c8c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c8cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	031b      	lsls	r3, r3, #12
 800c8d2:	697a      	ldr	r2, [r7, #20]
 800c8d4:	4313      	orrs	r3, r2
 800c8d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c8de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	011b      	lsls	r3, r3, #4
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	697a      	ldr	r2, [r7, #20]
 800c8ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	693a      	ldr	r2, [r7, #16]
 800c8f4:	621a      	str	r2, [r3, #32]
}
 800c8f6:	bf00      	nop
 800c8f8:	371c      	adds	r7, #28
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
	...

0800c904 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c904:	b480      	push	{r7}
 800c906:	b085      	sub	sp, #20
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c914:	68fa      	ldr	r2, [r7, #12]
 800c916:	4b09      	ldr	r3, [pc, #36]	; (800c93c <TIM_ITRx_SetConfig+0x38>)
 800c918:	4013      	ands	r3, r2
 800c91a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c91c:	683a      	ldr	r2, [r7, #0]
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	4313      	orrs	r3, r2
 800c922:	f043 0307 	orr.w	r3, r3, #7
 800c926:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	68fa      	ldr	r2, [r7, #12]
 800c92c:	609a      	str	r2, [r3, #8]
}
 800c92e:	bf00      	nop
 800c930:	3714      	adds	r7, #20
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
 800c93a:	bf00      	nop
 800c93c:	ffcfff8f 	.word	0xffcfff8f

0800c940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c940:	b480      	push	{r7}
 800c942:	b087      	sub	sp, #28
 800c944:	af00      	add	r7, sp, #0
 800c946:	60f8      	str	r0, [r7, #12]
 800c948:	60b9      	str	r1, [r7, #8]
 800c94a:	607a      	str	r2, [r7, #4]
 800c94c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c95a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	021a      	lsls	r2, r3, #8
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	431a      	orrs	r2, r3
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	4313      	orrs	r3, r2
 800c968:	697a      	ldr	r2, [r7, #20]
 800c96a:	4313      	orrs	r3, r2
 800c96c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	697a      	ldr	r2, [r7, #20]
 800c972:	609a      	str	r2, [r3, #8]
}
 800c974:	bf00      	nop
 800c976:	371c      	adds	r7, #28
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr

0800c980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c980:	b480      	push	{r7}
 800c982:	b087      	sub	sp, #28
 800c984:	af00      	add	r7, sp, #0
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	f003 031f 	and.w	r3, r3, #31
 800c992:	2201      	movs	r2, #1
 800c994:	fa02 f303 	lsl.w	r3, r2, r3
 800c998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	6a1a      	ldr	r2, [r3, #32]
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	43db      	mvns	r3, r3
 800c9a2:	401a      	ands	r2, r3
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	6a1a      	ldr	r2, [r3, #32]
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	f003 031f 	and.w	r3, r3, #31
 800c9b2:	6879      	ldr	r1, [r7, #4]
 800c9b4:	fa01 f303 	lsl.w	r3, r1, r3
 800c9b8:	431a      	orrs	r2, r3
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	621a      	str	r2, [r3, #32]
}
 800c9be:	bf00      	nop
 800c9c0:	371c      	adds	r7, #28
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
	...

0800c9cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d101      	bne.n	800c9e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	e06d      	b.n	800cac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2202      	movs	r2, #2
 800c9f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	4a30      	ldr	r2, [pc, #192]	; (800cacc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d004      	beq.n	800ca18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4a2f      	ldr	r2, [pc, #188]	; (800cad0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d108      	bne.n	800ca2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ca1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	4313      	orrs	r3, r2
 800ca28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	68fa      	ldr	r2, [r7, #12]
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	68fa      	ldr	r2, [r7, #12]
 800ca42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	4a20      	ldr	r2, [pc, #128]	; (800cacc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d022      	beq.n	800ca94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca56:	d01d      	beq.n	800ca94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4a1d      	ldr	r2, [pc, #116]	; (800cad4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d018      	beq.n	800ca94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4a1c      	ldr	r2, [pc, #112]	; (800cad8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d013      	beq.n	800ca94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4a1a      	ldr	r2, [pc, #104]	; (800cadc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ca72:	4293      	cmp	r3, r2
 800ca74:	d00e      	beq.n	800ca94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	4a15      	ldr	r2, [pc, #84]	; (800cad0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d009      	beq.n	800ca94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a16      	ldr	r2, [pc, #88]	; (800cae0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d004      	beq.n	800ca94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a15      	ldr	r2, [pc, #84]	; (800cae4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d10c      	bne.n	800caae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ca9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	68ba      	ldr	r2, [r7, #8]
 800caa2:	4313      	orrs	r3, r2
 800caa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	2201      	movs	r2, #1
 800cab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2200      	movs	r2, #0
 800caba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cabe:	2300      	movs	r3, #0
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr
 800cacc:	40010000 	.word	0x40010000
 800cad0:	40010400 	.word	0x40010400
 800cad4:	40000400 	.word	0x40000400
 800cad8:	40000800 	.word	0x40000800
 800cadc:	40000c00 	.word	0x40000c00
 800cae0:	40001800 	.word	0x40001800
 800cae4:	40014000 	.word	0x40014000

0800cae8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800caf2:	2300      	movs	r3, #0
 800caf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cafc:	2b01      	cmp	r3, #1
 800cafe:	d101      	bne.n	800cb04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cb00:	2302      	movs	r3, #2
 800cb02:	e065      	b.n	800cbd0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	2201      	movs	r2, #1
 800cb08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	689b      	ldr	r3, [r3, #8]
 800cb24:	4313      	orrs	r3, r2
 800cb26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4313      	orrs	r3, r2
 800cb42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	695b      	ldr	r3, [r3, #20]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	699b      	ldr	r3, [r3, #24]
 800cb78:	041b      	lsls	r3, r3, #16
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	4a16      	ldr	r2, [pc, #88]	; (800cbdc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d004      	beq.n	800cb92 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	4a14      	ldr	r2, [pc, #80]	; (800cbe0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cb8e:	4293      	cmp	r3, r2
 800cb90:	d115      	bne.n	800cbbe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb9c:	051b      	lsls	r3, r3, #20
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	69db      	ldr	r3, [r3, #28]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	6a1b      	ldr	r3, [r3, #32]
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	68fa      	ldr	r2, [r7, #12]
 800cbc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cbce:	2300      	movs	r3, #0
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3714      	adds	r7, #20
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr
 800cbdc:	40010000 	.word	0x40010000
 800cbe0:	40010400 	.word	0x40010400

0800cbe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cbec:	bf00      	nop
 800cbee:	370c      	adds	r7, #12
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc00:	bf00      	nop
 800cc02:	370c      	adds	r7, #12
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cc14:	bf00      	nop
 800cc16:	370c      	adds	r7, #12
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1e:	4770      	bx	lr

0800cc20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d101      	bne.n	800cc32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e042      	b.n	800ccb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d106      	bne.n	800cc4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f7f8 fa4f 	bl	80050e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2224      	movs	r2, #36	; 0x24
 800cc4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f022 0201 	bic.w	r2, r2, #1
 800cc60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 fdee 	bl	800d844 <UART_SetConfig>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d101      	bne.n	800cc72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cc6e:	2301      	movs	r3, #1
 800cc70:	e022      	b.n	800ccb8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d002      	beq.n	800cc80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f001 fb42 	bl	800e304 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	685a      	ldr	r2, [r3, #4]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cc8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	689a      	ldr	r2, [r3, #8]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cc9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	f042 0201 	orr.w	r2, r2, #1
 800ccae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	f001 fbc9 	bl	800e448 <UART_CheckIdleState>
 800ccb6:	4603      	mov	r3, r0
}
 800ccb8:	4618      	mov	r0, r3
 800ccba:	3708      	adds	r7, #8
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b08a      	sub	sp, #40	; 0x28
 800ccc4:	af02      	add	r7, sp, #8
 800ccc6:	60f8      	str	r0, [r7, #12]
 800ccc8:	60b9      	str	r1, [r7, #8]
 800ccca:	603b      	str	r3, [r7, #0]
 800cccc:	4613      	mov	r3, r2
 800ccce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccd6:	2b20      	cmp	r3, #32
 800ccd8:	f040 8083 	bne.w	800cde2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d002      	beq.n	800cce8 <HAL_UART_Transmit+0x28>
 800cce2:	88fb      	ldrh	r3, [r7, #6]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d101      	bne.n	800ccec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cce8:	2301      	movs	r3, #1
 800ccea:	e07b      	b.n	800cde4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	d101      	bne.n	800ccfa <HAL_UART_Transmit+0x3a>
 800ccf6:	2302      	movs	r3, #2
 800ccf8:	e074      	b.n	800cde4 <HAL_UART_Transmit+0x124>
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	2200      	movs	r2, #0
 800cd06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2221      	movs	r2, #33	; 0x21
 800cd0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cd12:	f7f8 fccf 	bl	80056b4 <HAL_GetTick>
 800cd16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	88fa      	ldrh	r2, [r7, #6]
 800cd1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	88fa      	ldrh	r2, [r7, #6]
 800cd24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd30:	d108      	bne.n	800cd44 <HAL_UART_Transmit+0x84>
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	691b      	ldr	r3, [r3, #16]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d104      	bne.n	800cd44 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	61bb      	str	r3, [r7, #24]
 800cd42:	e003      	b.n	800cd4c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800cd54:	e02c      	b.n	800cdb0 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	9300      	str	r3, [sp, #0]
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	2200      	movs	r2, #0
 800cd5e:	2180      	movs	r1, #128	; 0x80
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f001 fbbc 	bl	800e4de <UART_WaitOnFlagUntilTimeout>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d001      	beq.n	800cd70 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800cd6c:	2303      	movs	r3, #3
 800cd6e:	e039      	b.n	800cde4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800cd70:	69fb      	ldr	r3, [r7, #28]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d10b      	bne.n	800cd8e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	881b      	ldrh	r3, [r3, #0]
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800cd86:	69bb      	ldr	r3, [r7, #24]
 800cd88:	3302      	adds	r3, #2
 800cd8a:	61bb      	str	r3, [r7, #24]
 800cd8c:	e007      	b.n	800cd9e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cd8e:	69fb      	ldr	r3, [r7, #28]
 800cd90:	781a      	ldrb	r2, [r3, #0]
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800cd98:	69fb      	ldr	r3, [r7, #28]
 800cd9a:	3301      	adds	r3, #1
 800cd9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cda4:	b29b      	uxth	r3, r3
 800cda6:	3b01      	subs	r3, #1
 800cda8:	b29a      	uxth	r2, r3
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d1cc      	bne.n	800cd56 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	2140      	movs	r1, #64	; 0x40
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f001 fb89 	bl	800e4de <UART_WaitOnFlagUntilTimeout>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d001      	beq.n	800cdd6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800cdd2:	2303      	movs	r3, #3
 800cdd4:	e006      	b.n	800cde4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2220      	movs	r2, #32
 800cdda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	e000      	b.n	800cde4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800cde2:	2302      	movs	r3, #2
  }
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3720      	adds	r7, #32
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b08a      	sub	sp, #40	; 0x28
 800cdf0:	af02      	add	r7, sp, #8
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	603b      	str	r3, [r7, #0]
 800cdf8:	4613      	mov	r3, r2
 800cdfa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce02:	2b20      	cmp	r3, #32
 800ce04:	f040 80c0 	bne.w	800cf88 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d002      	beq.n	800ce14 <HAL_UART_Receive+0x28>
 800ce0e:	88fb      	ldrh	r3, [r7, #6]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d101      	bne.n	800ce18 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800ce14:	2301      	movs	r3, #1
 800ce16:	e0b8      	b.n	800cf8a <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d101      	bne.n	800ce26 <HAL_UART_Receive+0x3a>
 800ce22:	2302      	movs	r3, #2
 800ce24:	e0b1      	b.n	800cf8a <HAL_UART_Receive+0x19e>
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2200      	movs	r2, #0
 800ce32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	2222      	movs	r2, #34	; 0x22
 800ce3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2200      	movs	r2, #0
 800ce42:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ce44:	f7f8 fc36 	bl	80056b4 <HAL_GetTick>
 800ce48:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	88fa      	ldrh	r2, [r7, #6]
 800ce4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	88fa      	ldrh	r2, [r7, #6]
 800ce56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce62:	d10e      	bne.n	800ce82 <HAL_UART_Receive+0x96>
 800ce64:	68fb      	ldr	r3, [r7, #12]
 800ce66:	691b      	ldr	r3, [r3, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d105      	bne.n	800ce78 <HAL_UART_Receive+0x8c>
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ce72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce76:	e02d      	b.n	800ced4 <HAL_UART_Receive+0xe8>
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	22ff      	movs	r2, #255	; 0xff
 800ce7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce80:	e028      	b.n	800ced4 <HAL_UART_Receive+0xe8>
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d10d      	bne.n	800cea6 <HAL_UART_Receive+0xba>
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	691b      	ldr	r3, [r3, #16]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d104      	bne.n	800ce9c <HAL_UART_Receive+0xb0>
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	22ff      	movs	r2, #255	; 0xff
 800ce96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ce9a:	e01b      	b.n	800ced4 <HAL_UART_Receive+0xe8>
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	227f      	movs	r2, #127	; 0x7f
 800cea0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cea4:	e016      	b.n	800ced4 <HAL_UART_Receive+0xe8>
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ceae:	d10d      	bne.n	800cecc <HAL_UART_Receive+0xe0>
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	691b      	ldr	r3, [r3, #16]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d104      	bne.n	800cec2 <HAL_UART_Receive+0xd6>
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	227f      	movs	r2, #127	; 0x7f
 800cebc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800cec0:	e008      	b.n	800ced4 <HAL_UART_Receive+0xe8>
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	223f      	movs	r2, #63	; 0x3f
 800cec6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ceca:	e003      	b.n	800ced4 <HAL_UART_Receive+0xe8>
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ceda:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	689b      	ldr	r3, [r3, #8]
 800cee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cee4:	d108      	bne.n	800cef8 <HAL_UART_Receive+0x10c>
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	691b      	ldr	r3, [r3, #16]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d104      	bne.n	800cef8 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800ceee:	2300      	movs	r3, #0
 800cef0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	61bb      	str	r3, [r7, #24]
 800cef6:	e003      	b.n	800cf00 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cefc:	2300      	movs	r3, #0
 800cefe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2200      	movs	r2, #0
 800cf04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800cf08:	e032      	b.n	800cf70 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	9300      	str	r3, [sp, #0]
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	2200      	movs	r2, #0
 800cf12:	2120      	movs	r1, #32
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	f001 fae2 	bl	800e4de <UART_WaitOnFlagUntilTimeout>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d001      	beq.n	800cf24 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800cf20:	2303      	movs	r3, #3
 800cf22:	e032      	b.n	800cf8a <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d10c      	bne.n	800cf44 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf30:	b29a      	uxth	r2, r3
 800cf32:	8a7b      	ldrh	r3, [r7, #18]
 800cf34:	4013      	ands	r3, r2
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800cf3c:	69bb      	ldr	r3, [r7, #24]
 800cf3e:	3302      	adds	r3, #2
 800cf40:	61bb      	str	r3, [r7, #24]
 800cf42:	e00c      	b.n	800cf5e <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4a:	b2da      	uxtb	r2, r3
 800cf4c:	8a7b      	ldrh	r3, [r7, #18]
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	4013      	ands	r3, r2
 800cf52:	b2da      	uxtb	r2, r3
 800cf54:	69fb      	ldr	r3, [r7, #28]
 800cf56:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	3b01      	subs	r3, #1
 800cf68:	b29a      	uxth	r2, r3
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d1c6      	bne.n	800cf0a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2220      	movs	r2, #32
 800cf80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800cf84:	2300      	movs	r3, #0
 800cf86:	e000      	b.n	800cf8a <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800cf88:	2302      	movs	r3, #2
  }
}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3720      	adds	r7, #32
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
	...

0800cf94 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b08a      	sub	sp, #40	; 0x28
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	4613      	mov	r3, r2
 800cfa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfa8:	2b20      	cmp	r3, #32
 800cfaa:	d17a      	bne.n	800d0a2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d002      	beq.n	800cfb8 <HAL_UART_Transmit_DMA+0x24>
 800cfb2:	88fb      	ldrh	r3, [r7, #6]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d101      	bne.n	800cfbc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800cfb8:	2301      	movs	r3, #1
 800cfba:	e073      	b.n	800d0a4 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d101      	bne.n	800cfca <HAL_UART_Transmit_DMA+0x36>
 800cfc6:	2302      	movs	r3, #2
 800cfc8:	e06c      	b.n	800d0a4 <HAL_UART_Transmit_DMA+0x110>
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2201      	movs	r2, #1
 800cfce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	88fa      	ldrh	r2, [r7, #6]
 800cfdc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	88fa      	ldrh	r2, [r7, #6]
 800cfe4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2200      	movs	r2, #0
 800cfec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	2221      	movs	r2, #33	; 0x21
 800cff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d02c      	beq.n	800d05a <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d004:	4a29      	ldr	r2, [pc, #164]	; (800d0ac <HAL_UART_Transmit_DMA+0x118>)
 800d006:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d00c:	4a28      	ldr	r2, [pc, #160]	; (800d0b0 <HAL_UART_Transmit_DMA+0x11c>)
 800d00e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d014:	4a27      	ldr	r2, [pc, #156]	; (800d0b4 <HAL_UART_Transmit_DMA+0x120>)
 800d016:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d01c:	2200      	movs	r2, #0
 800d01e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d028:	4619      	mov	r1, r3
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	3328      	adds	r3, #40	; 0x28
 800d030:	461a      	mov	r2, r3
 800d032:	88fb      	ldrh	r3, [r7, #6]
 800d034:	f7f9 f9cc 	bl	80063d0 <HAL_DMA_Start_IT>
 800d038:	4603      	mov	r3, r0
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00d      	beq.n	800d05a <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	2210      	movs	r2, #16
 800d042:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2200      	movs	r2, #0
 800d04a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2220      	movs	r2, #32
 800d052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800d056:	2301      	movs	r3, #1
 800d058:	e024      	b.n	800d0a4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2240      	movs	r2, #64	; 0x40
 800d060:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2200      	movs	r2, #0
 800d066:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	3308      	adds	r3, #8
 800d070:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	e853 3f00 	ldrex	r3, [r3]
 800d078:	613b      	str	r3, [r7, #16]
   return(result);
 800d07a:	693b      	ldr	r3, [r7, #16]
 800d07c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d080:	627b      	str	r3, [r7, #36]	; 0x24
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	3308      	adds	r3, #8
 800d088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d08a:	623a      	str	r2, [r7, #32]
 800d08c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d08e:	69f9      	ldr	r1, [r7, #28]
 800d090:	6a3a      	ldr	r2, [r7, #32]
 800d092:	e841 2300 	strex	r3, r2, [r1]
 800d096:	61bb      	str	r3, [r7, #24]
   return(result);
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d1e5      	bne.n	800d06a <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	e000      	b.n	800d0a4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800d0a2:	2302      	movs	r3, #2
  }
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3728      	adds	r7, #40	; 0x28
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	0800e911 	.word	0x0800e911
 800d0b0:	0800e9a7 	.word	0x0800e9a7
 800d0b4:	0800eb1d 	.word	0x0800eb1d

0800d0b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b0ba      	sub	sp, #232	; 0xe8
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	69db      	ldr	r3, [r3, #28]
 800d0c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	689b      	ldr	r3, [r3, #8]
 800d0da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d0de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800d0e2:	f640 030f 	movw	r3, #2063	; 0x80f
 800d0e6:	4013      	ands	r3, r2
 800d0e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800d0ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d11b      	bne.n	800d12c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d0f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d0f8:	f003 0320 	and.w	r3, r3, #32
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d015      	beq.n	800d12c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d104:	f003 0320 	and.w	r3, r3, #32
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d105      	bne.n	800d118 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d10c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d114:	2b00      	cmp	r3, #0
 800d116:	d009      	beq.n	800d12c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	f000 835a 	beq.w	800d7d6 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	4798      	blx	r3
      }
      return;
 800d12a:	e354      	b.n	800d7d6 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d12c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d130:	2b00      	cmp	r3, #0
 800d132:	f000 811f 	beq.w	800d374 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800d136:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d13a:	4b8b      	ldr	r3, [pc, #556]	; (800d368 <HAL_UART_IRQHandler+0x2b0>)
 800d13c:	4013      	ands	r3, r2
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d106      	bne.n	800d150 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800d142:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800d146:	4b89      	ldr	r3, [pc, #548]	; (800d36c <HAL_UART_IRQHandler+0x2b4>)
 800d148:	4013      	ands	r3, r2
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	f000 8112 	beq.w	800d374 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d154:	f003 0301 	and.w	r3, r3, #1
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d011      	beq.n	800d180 <HAL_UART_IRQHandler+0xc8>
 800d15c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d164:	2b00      	cmp	r3, #0
 800d166:	d00b      	beq.n	800d180 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2201      	movs	r2, #1
 800d16e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d176:	f043 0201 	orr.w	r2, r3, #1
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d184:	f003 0302 	and.w	r3, r3, #2
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d011      	beq.n	800d1b0 <HAL_UART_IRQHandler+0xf8>
 800d18c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d190:	f003 0301 	and.w	r3, r3, #1
 800d194:	2b00      	cmp	r3, #0
 800d196:	d00b      	beq.n	800d1b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2202      	movs	r2, #2
 800d19e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1a6:	f043 0204 	orr.w	r2, r3, #4
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d1b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1b4:	f003 0304 	and.w	r3, r3, #4
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d011      	beq.n	800d1e0 <HAL_UART_IRQHandler+0x128>
 800d1bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d1c0:	f003 0301 	and.w	r3, r3, #1
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d00b      	beq.n	800d1e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2204      	movs	r2, #4
 800d1ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d1d6:	f043 0202 	orr.w	r2, r3, #2
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d1e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d1e4:	f003 0308 	and.w	r3, r3, #8
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d017      	beq.n	800d21c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d1ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d1f0:	f003 0320 	and.w	r3, r3, #32
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d105      	bne.n	800d204 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800d1f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800d1fc:	4b5a      	ldr	r3, [pc, #360]	; (800d368 <HAL_UART_IRQHandler+0x2b0>)
 800d1fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800d200:	2b00      	cmp	r3, #0
 800d202:	d00b      	beq.n	800d21c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	2208      	movs	r2, #8
 800d20a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d212:	f043 0208 	orr.w	r2, r3, #8
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d21c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d224:	2b00      	cmp	r3, #0
 800d226:	d012      	beq.n	800d24e <HAL_UART_IRQHandler+0x196>
 800d228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d22c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d230:	2b00      	cmp	r3, #0
 800d232:	d00c      	beq.n	800d24e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d23c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d244:	f043 0220 	orr.w	r2, r3, #32
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d254:	2b00      	cmp	r3, #0
 800d256:	f000 82c0 	beq.w	800d7da <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800d25a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d25e:	f003 0320 	and.w	r3, r3, #32
 800d262:	2b00      	cmp	r3, #0
 800d264:	d013      	beq.n	800d28e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800d266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d26a:	f003 0320 	and.w	r3, r3, #32
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d105      	bne.n	800d27e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800d272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d007      	beq.n	800d28e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d282:	2b00      	cmp	r3, #0
 800d284:	d003      	beq.n	800d28e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d294:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2a2:	2b40      	cmp	r3, #64	; 0x40
 800d2a4:	d005      	beq.n	800d2b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d2a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d2aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d04f      	beq.n	800d352 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f001 fac6 	bl	800e844 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	689b      	ldr	r3, [r3, #8]
 800d2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2c2:	2b40      	cmp	r3, #64	; 0x40
 800d2c4:	d141      	bne.n	800d34a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	3308      	adds	r3, #8
 800d2cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d2d4:	e853 3f00 	ldrex	r3, [r3]
 800d2d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d2dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d2e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d2e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	3308      	adds	r3, #8
 800d2ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d2f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d2f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d2fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d302:	e841 2300 	strex	r3, r2, [r1]
 800d306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d30a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d1d9      	bne.n	800d2c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d316:	2b00      	cmp	r3, #0
 800d318:	d013      	beq.n	800d342 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d31e:	4a14      	ldr	r2, [pc, #80]	; (800d370 <HAL_UART_IRQHandler+0x2b8>)
 800d320:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d326:	4618      	mov	r0, r3
 800d328:	f7f9 fdda 	bl	8006ee0 <HAL_DMA_Abort_IT>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d017      	beq.n	800d362 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800d33c:	4610      	mov	r0, r2
 800d33e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d340:	e00f      	b.n	800d362 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 fa74 	bl	800d830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d348:	e00b      	b.n	800d362 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f000 fa70 	bl	800d830 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d350:	e007      	b.n	800d362 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 fa6c 	bl	800d830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d360:	e23b      	b.n	800d7da <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d362:	bf00      	nop
    return;
 800d364:	e239      	b.n	800d7da <HAL_UART_IRQHandler+0x722>
 800d366:	bf00      	nop
 800d368:	10000001 	.word	0x10000001
 800d36c:	04000120 	.word	0x04000120
 800d370:	0800eb9d 	.word	0x0800eb9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d378:	2b01      	cmp	r3, #1
 800d37a:	f040 81ce 	bne.w	800d71a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d37e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d382:	f003 0310 	and.w	r3, r3, #16
 800d386:	2b00      	cmp	r3, #0
 800d388:	f000 81c7 	beq.w	800d71a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d38c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d390:	f003 0310 	and.w	r3, r3, #16
 800d394:	2b00      	cmp	r3, #0
 800d396:	f000 81c0 	beq.w	800d71a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2210      	movs	r2, #16
 800d3a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	689b      	ldr	r3, [r3, #8]
 800d3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ac:	2b40      	cmp	r3, #64	; 0x40
 800d3ae:	f040 813b 	bne.w	800d628 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a8b      	ldr	r2, [pc, #556]	; (800d5e8 <HAL_UART_IRQHandler+0x530>)
 800d3ba:	4293      	cmp	r3, r2
 800d3bc:	d059      	beq.n	800d472 <HAL_UART_IRQHandler+0x3ba>
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4a89      	ldr	r2, [pc, #548]	; (800d5ec <HAL_UART_IRQHandler+0x534>)
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d053      	beq.n	800d472 <HAL_UART_IRQHandler+0x3ba>
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	4a87      	ldr	r2, [pc, #540]	; (800d5f0 <HAL_UART_IRQHandler+0x538>)
 800d3d2:	4293      	cmp	r3, r2
 800d3d4:	d04d      	beq.n	800d472 <HAL_UART_IRQHandler+0x3ba>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	4a85      	ldr	r2, [pc, #532]	; (800d5f4 <HAL_UART_IRQHandler+0x53c>)
 800d3de:	4293      	cmp	r3, r2
 800d3e0:	d047      	beq.n	800d472 <HAL_UART_IRQHandler+0x3ba>
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	4a83      	ldr	r2, [pc, #524]	; (800d5f8 <HAL_UART_IRQHandler+0x540>)
 800d3ea:	4293      	cmp	r3, r2
 800d3ec:	d041      	beq.n	800d472 <HAL_UART_IRQHandler+0x3ba>
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4a81      	ldr	r2, [pc, #516]	; (800d5fc <HAL_UART_IRQHandler+0x544>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d03b      	beq.n	800d472 <HAL_UART_IRQHandler+0x3ba>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	4a7f      	ldr	r2, [pc, #508]	; (800d600 <HAL_UART_IRQHandler+0x548>)
 800d402:	4293      	cmp	r3, r2
 800d404:	d035      	beq.n	800d472 <HAL_UART_IRQHandler+0x3ba>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4a7d      	ldr	r2, [pc, #500]	; (800d604 <HAL_UART_IRQHandler+0x54c>)
 800d40e:	4293      	cmp	r3, r2
 800d410:	d02f      	beq.n	800d472 <HAL_UART_IRQHandler+0x3ba>
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a7b      	ldr	r2, [pc, #492]	; (800d608 <HAL_UART_IRQHandler+0x550>)
 800d41a:	4293      	cmp	r3, r2
 800d41c:	d029      	beq.n	800d472 <HAL_UART_IRQHandler+0x3ba>
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	4a79      	ldr	r2, [pc, #484]	; (800d60c <HAL_UART_IRQHandler+0x554>)
 800d426:	4293      	cmp	r3, r2
 800d428:	d023      	beq.n	800d472 <HAL_UART_IRQHandler+0x3ba>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a77      	ldr	r2, [pc, #476]	; (800d610 <HAL_UART_IRQHandler+0x558>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d01d      	beq.n	800d472 <HAL_UART_IRQHandler+0x3ba>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	4a75      	ldr	r2, [pc, #468]	; (800d614 <HAL_UART_IRQHandler+0x55c>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d017      	beq.n	800d472 <HAL_UART_IRQHandler+0x3ba>
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	4a73      	ldr	r2, [pc, #460]	; (800d618 <HAL_UART_IRQHandler+0x560>)
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d011      	beq.n	800d472 <HAL_UART_IRQHandler+0x3ba>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a71      	ldr	r2, [pc, #452]	; (800d61c <HAL_UART_IRQHandler+0x564>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d00b      	beq.n	800d472 <HAL_UART_IRQHandler+0x3ba>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a6f      	ldr	r2, [pc, #444]	; (800d620 <HAL_UART_IRQHandler+0x568>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d005      	beq.n	800d472 <HAL_UART_IRQHandler+0x3ba>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	4a6d      	ldr	r2, [pc, #436]	; (800d624 <HAL_UART_IRQHandler+0x56c>)
 800d46e:	4293      	cmp	r3, r2
 800d470:	d105      	bne.n	800d47e <HAL_UART_IRQHandler+0x3c6>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	b29b      	uxth	r3, r3
 800d47c:	e004      	b.n	800d488 <HAL_UART_IRQHandler+0x3d0>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	685b      	ldr	r3, [r3, #4]
 800d486:	b29b      	uxth	r3, r3
 800d488:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d48c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d490:	2b00      	cmp	r3, #0
 800d492:	f000 81a4 	beq.w	800d7de <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d49c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	f080 819c 	bcs.w	800d7de <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d4ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d4b4:	69db      	ldr	r3, [r3, #28]
 800d4b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d4ba:	f000 8086 	beq.w	800d5ca <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d4ca:	e853 3f00 	ldrex	r3, [r3]
 800d4ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d4d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d4d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d4da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d4e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d4ec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d4f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d4f8:	e841 2300 	strex	r3, r2, [r1]
 800d4fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d500:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d504:	2b00      	cmp	r3, #0
 800d506:	d1da      	bne.n	800d4be <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	3308      	adds	r3, #8
 800d50e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d510:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d512:	e853 3f00 	ldrex	r3, [r3]
 800d516:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d518:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d51a:	f023 0301 	bic.w	r3, r3, #1
 800d51e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	3308      	adds	r3, #8
 800d528:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d52c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d530:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d532:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d534:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d538:	e841 2300 	strex	r3, r2, [r1]
 800d53c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d53e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d540:	2b00      	cmp	r3, #0
 800d542:	d1e1      	bne.n	800d508 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	3308      	adds	r3, #8
 800d54a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d54c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d54e:	e853 3f00 	ldrex	r3, [r3]
 800d552:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d554:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d556:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d55a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	3308      	adds	r3, #8
 800d564:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d568:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d56a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d56c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d56e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d570:	e841 2300 	strex	r3, r2, [r1]
 800d574:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d576:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d1e3      	bne.n	800d544 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2220      	movs	r2, #32
 800d580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2200      	movs	r2, #0
 800d588:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d592:	e853 3f00 	ldrex	r3, [r3]
 800d596:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d598:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d59a:	f023 0310 	bic.w	r3, r3, #16
 800d59e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	461a      	mov	r2, r3
 800d5a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d5ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800d5ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d5b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d5b4:	e841 2300 	strex	r3, r2, [r1]
 800d5b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d5ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d1e4      	bne.n	800d58a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7f9 f96d 	bl	80068a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5d6:	b29b      	uxth	r3, r3
 800d5d8:	1ad3      	subs	r3, r2, r3
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	4619      	mov	r1, r3
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f7f4 fae4 	bl	8001bac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d5e4:	e0fb      	b.n	800d7de <HAL_UART_IRQHandler+0x726>
 800d5e6:	bf00      	nop
 800d5e8:	40020010 	.word	0x40020010
 800d5ec:	40020028 	.word	0x40020028
 800d5f0:	40020040 	.word	0x40020040
 800d5f4:	40020058 	.word	0x40020058
 800d5f8:	40020070 	.word	0x40020070
 800d5fc:	40020088 	.word	0x40020088
 800d600:	400200a0 	.word	0x400200a0
 800d604:	400200b8 	.word	0x400200b8
 800d608:	40020410 	.word	0x40020410
 800d60c:	40020428 	.word	0x40020428
 800d610:	40020440 	.word	0x40020440
 800d614:	40020458 	.word	0x40020458
 800d618:	40020470 	.word	0x40020470
 800d61c:	40020488 	.word	0x40020488
 800d620:	400204a0 	.word	0x400204a0
 800d624:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d634:	b29b      	uxth	r3, r3
 800d636:	1ad3      	subs	r3, r2, r3
 800d638:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d642:	b29b      	uxth	r3, r3
 800d644:	2b00      	cmp	r3, #0
 800d646:	f000 80cc 	beq.w	800d7e2 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d64a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d64e:	2b00      	cmp	r3, #0
 800d650:	f000 80c7 	beq.w	800d7e2 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65c:	e853 3f00 	ldrex	r3, [r3]
 800d660:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d664:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d668:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	461a      	mov	r2, r3
 800d672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d676:	647b      	str	r3, [r7, #68]	; 0x44
 800d678:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d67a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d67c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d67e:	e841 2300 	strex	r3, r2, [r1]
 800d682:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d686:	2b00      	cmp	r3, #0
 800d688:	d1e4      	bne.n	800d654 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	3308      	adds	r3, #8
 800d690:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d694:	e853 3f00 	ldrex	r3, [r3]
 800d698:	623b      	str	r3, [r7, #32]
   return(result);
 800d69a:	6a3a      	ldr	r2, [r7, #32]
 800d69c:	4b54      	ldr	r3, [pc, #336]	; (800d7f0 <HAL_UART_IRQHandler+0x738>)
 800d69e:	4013      	ands	r3, r2
 800d6a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	3308      	adds	r3, #8
 800d6aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d6ae:	633a      	str	r2, [r7, #48]	; 0x30
 800d6b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d6b6:	e841 2300 	strex	r3, r2, [r1]
 800d6ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d1e3      	bne.n	800d68a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2220      	movs	r2, #32
 800d6c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	e853 3f00 	ldrex	r3, [r3]
 800d6e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f023 0310 	bic.w	r3, r3, #16
 800d6ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d6f8:	61fb      	str	r3, [r7, #28]
 800d6fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fc:	69b9      	ldr	r1, [r7, #24]
 800d6fe:	69fa      	ldr	r2, [r7, #28]
 800d700:	e841 2300 	strex	r3, r2, [r1]
 800d704:	617b      	str	r3, [r7, #20]
   return(result);
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1e4      	bne.n	800d6d6 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d70c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d710:	4619      	mov	r1, r3
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f7f4 fa4a 	bl	8001bac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d718:	e063      	b.n	800d7e2 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d71a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d71e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d722:	2b00      	cmp	r3, #0
 800d724:	d00e      	beq.n	800d744 <HAL_UART_IRQHandler+0x68c>
 800d726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d72a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d008      	beq.n	800d744 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d73a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f001 fa6e 	bl	800ec1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d742:	e051      	b.n	800d7e8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d014      	beq.n	800d77a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d105      	bne.n	800d768 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d75c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d760:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d764:	2b00      	cmp	r3, #0
 800d766:	d008      	beq.n	800d77a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d03a      	beq.n	800d7e6 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	4798      	blx	r3
    }
    return;
 800d778:	e035      	b.n	800d7e6 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d77a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d77e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d782:	2b00      	cmp	r3, #0
 800d784:	d009      	beq.n	800d79a <HAL_UART_IRQHandler+0x6e2>
 800d786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d78a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d003      	beq.n	800d79a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f001 fa18 	bl	800ebc8 <UART_EndTransmit_IT>
    return;
 800d798:	e026      	b.n	800d7e8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d79a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d79e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d009      	beq.n	800d7ba <HAL_UART_IRQHandler+0x702>
 800d7a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d003      	beq.n	800d7ba <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f001 fa47 	bl	800ec46 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7b8:	e016      	b.n	800d7e8 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d7ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d7be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d010      	beq.n	800d7e8 <HAL_UART_IRQHandler+0x730>
 800d7c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	da0c      	bge.n	800d7e8 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f001 fa2f 	bl	800ec32 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7d4:	e008      	b.n	800d7e8 <HAL_UART_IRQHandler+0x730>
      return;
 800d7d6:	bf00      	nop
 800d7d8:	e006      	b.n	800d7e8 <HAL_UART_IRQHandler+0x730>
    return;
 800d7da:	bf00      	nop
 800d7dc:	e004      	b.n	800d7e8 <HAL_UART_IRQHandler+0x730>
      return;
 800d7de:	bf00      	nop
 800d7e0:	e002      	b.n	800d7e8 <HAL_UART_IRQHandler+0x730>
      return;
 800d7e2:	bf00      	nop
 800d7e4:	e000      	b.n	800d7e8 <HAL_UART_IRQHandler+0x730>
    return;
 800d7e6:	bf00      	nop
  }
}
 800d7e8:	37e8      	adds	r7, #232	; 0xe8
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}
 800d7ee:	bf00      	nop
 800d7f0:	effffffe 	.word	0xeffffffe

0800d7f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d7fc:	bf00      	nop
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d810:	bf00      	nop
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d824:	bf00      	nop
 800d826:	370c      	adds	r7, #12
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr

0800d830 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d838:	bf00      	nop
 800d83a:	370c      	adds	r7, #12
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d844:	b5b0      	push	{r4, r5, r7, lr}
 800d846:	b08e      	sub	sp, #56	; 0x38
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d84c:	2300      	movs	r3, #0
 800d84e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	689a      	ldr	r2, [r3, #8]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	691b      	ldr	r3, [r3, #16]
 800d85a:	431a      	orrs	r2, r3
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	695b      	ldr	r3, [r3, #20]
 800d860:	431a      	orrs	r2, r3
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	69db      	ldr	r3, [r3, #28]
 800d866:	4313      	orrs	r3, r2
 800d868:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	4bbf      	ldr	r3, [pc, #764]	; (800db70 <UART_SetConfig+0x32c>)
 800d872:	4013      	ands	r3, r2
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	6812      	ldr	r2, [r2, #0]
 800d878:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d87a:	430b      	orrs	r3, r1
 800d87c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	68da      	ldr	r2, [r3, #12]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	430a      	orrs	r2, r1
 800d892:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	699b      	ldr	r3, [r3, #24]
 800d898:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	4ab5      	ldr	r2, [pc, #724]	; (800db74 <UART_SetConfig+0x330>)
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d004      	beq.n	800d8ae <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6a1b      	ldr	r3, [r3, #32]
 800d8a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	689a      	ldr	r2, [r3, #8]
 800d8b4:	4bb0      	ldr	r3, [pc, #704]	; (800db78 <UART_SetConfig+0x334>)
 800d8b6:	4013      	ands	r3, r2
 800d8b8:	687a      	ldr	r2, [r7, #4]
 800d8ba:	6812      	ldr	r2, [r2, #0]
 800d8bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d8be:	430b      	orrs	r3, r1
 800d8c0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c8:	f023 010f 	bic.w	r1, r3, #15
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	430a      	orrs	r2, r1
 800d8d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4aa7      	ldr	r2, [pc, #668]	; (800db7c <UART_SetConfig+0x338>)
 800d8de:	4293      	cmp	r3, r2
 800d8e0:	d176      	bne.n	800d9d0 <UART_SetConfig+0x18c>
 800d8e2:	4ba7      	ldr	r3, [pc, #668]	; (800db80 <UART_SetConfig+0x33c>)
 800d8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d8ea:	2b28      	cmp	r3, #40	; 0x28
 800d8ec:	d86c      	bhi.n	800d9c8 <UART_SetConfig+0x184>
 800d8ee:	a201      	add	r2, pc, #4	; (adr r2, 800d8f4 <UART_SetConfig+0xb0>)
 800d8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f4:	0800d999 	.word	0x0800d999
 800d8f8:	0800d9c9 	.word	0x0800d9c9
 800d8fc:	0800d9c9 	.word	0x0800d9c9
 800d900:	0800d9c9 	.word	0x0800d9c9
 800d904:	0800d9c9 	.word	0x0800d9c9
 800d908:	0800d9c9 	.word	0x0800d9c9
 800d90c:	0800d9c9 	.word	0x0800d9c9
 800d910:	0800d9c9 	.word	0x0800d9c9
 800d914:	0800d9a1 	.word	0x0800d9a1
 800d918:	0800d9c9 	.word	0x0800d9c9
 800d91c:	0800d9c9 	.word	0x0800d9c9
 800d920:	0800d9c9 	.word	0x0800d9c9
 800d924:	0800d9c9 	.word	0x0800d9c9
 800d928:	0800d9c9 	.word	0x0800d9c9
 800d92c:	0800d9c9 	.word	0x0800d9c9
 800d930:	0800d9c9 	.word	0x0800d9c9
 800d934:	0800d9a9 	.word	0x0800d9a9
 800d938:	0800d9c9 	.word	0x0800d9c9
 800d93c:	0800d9c9 	.word	0x0800d9c9
 800d940:	0800d9c9 	.word	0x0800d9c9
 800d944:	0800d9c9 	.word	0x0800d9c9
 800d948:	0800d9c9 	.word	0x0800d9c9
 800d94c:	0800d9c9 	.word	0x0800d9c9
 800d950:	0800d9c9 	.word	0x0800d9c9
 800d954:	0800d9b1 	.word	0x0800d9b1
 800d958:	0800d9c9 	.word	0x0800d9c9
 800d95c:	0800d9c9 	.word	0x0800d9c9
 800d960:	0800d9c9 	.word	0x0800d9c9
 800d964:	0800d9c9 	.word	0x0800d9c9
 800d968:	0800d9c9 	.word	0x0800d9c9
 800d96c:	0800d9c9 	.word	0x0800d9c9
 800d970:	0800d9c9 	.word	0x0800d9c9
 800d974:	0800d9b9 	.word	0x0800d9b9
 800d978:	0800d9c9 	.word	0x0800d9c9
 800d97c:	0800d9c9 	.word	0x0800d9c9
 800d980:	0800d9c9 	.word	0x0800d9c9
 800d984:	0800d9c9 	.word	0x0800d9c9
 800d988:	0800d9c9 	.word	0x0800d9c9
 800d98c:	0800d9c9 	.word	0x0800d9c9
 800d990:	0800d9c9 	.word	0x0800d9c9
 800d994:	0800d9c1 	.word	0x0800d9c1
 800d998:	2301      	movs	r3, #1
 800d99a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d99e:	e222      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800d9a0:	2304      	movs	r3, #4
 800d9a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9a6:	e21e      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800d9a8:	2308      	movs	r3, #8
 800d9aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9ae:	e21a      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800d9b0:	2310      	movs	r3, #16
 800d9b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9b6:	e216      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800d9b8:	2320      	movs	r3, #32
 800d9ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9be:	e212      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800d9c0:	2340      	movs	r3, #64	; 0x40
 800d9c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9c6:	e20e      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800d9c8:	2380      	movs	r3, #128	; 0x80
 800d9ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9ce:	e20a      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	4a6b      	ldr	r2, [pc, #428]	; (800db84 <UART_SetConfig+0x340>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d130      	bne.n	800da3c <UART_SetConfig+0x1f8>
 800d9da:	4b69      	ldr	r3, [pc, #420]	; (800db80 <UART_SetConfig+0x33c>)
 800d9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9de:	f003 0307 	and.w	r3, r3, #7
 800d9e2:	2b05      	cmp	r3, #5
 800d9e4:	d826      	bhi.n	800da34 <UART_SetConfig+0x1f0>
 800d9e6:	a201      	add	r2, pc, #4	; (adr r2, 800d9ec <UART_SetConfig+0x1a8>)
 800d9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ec:	0800da05 	.word	0x0800da05
 800d9f0:	0800da0d 	.word	0x0800da0d
 800d9f4:	0800da15 	.word	0x0800da15
 800d9f8:	0800da1d 	.word	0x0800da1d
 800d9fc:	0800da25 	.word	0x0800da25
 800da00:	0800da2d 	.word	0x0800da2d
 800da04:	2300      	movs	r3, #0
 800da06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da0a:	e1ec      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800da0c:	2304      	movs	r3, #4
 800da0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da12:	e1e8      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800da14:	2308      	movs	r3, #8
 800da16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da1a:	e1e4      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800da1c:	2310      	movs	r3, #16
 800da1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da22:	e1e0      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800da24:	2320      	movs	r3, #32
 800da26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da2a:	e1dc      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800da2c:	2340      	movs	r3, #64	; 0x40
 800da2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da32:	e1d8      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800da34:	2380      	movs	r3, #128	; 0x80
 800da36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da3a:	e1d4      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	4a51      	ldr	r2, [pc, #324]	; (800db88 <UART_SetConfig+0x344>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d130      	bne.n	800daa8 <UART_SetConfig+0x264>
 800da46:	4b4e      	ldr	r3, [pc, #312]	; (800db80 <UART_SetConfig+0x33c>)
 800da48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da4a:	f003 0307 	and.w	r3, r3, #7
 800da4e:	2b05      	cmp	r3, #5
 800da50:	d826      	bhi.n	800daa0 <UART_SetConfig+0x25c>
 800da52:	a201      	add	r2, pc, #4	; (adr r2, 800da58 <UART_SetConfig+0x214>)
 800da54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da58:	0800da71 	.word	0x0800da71
 800da5c:	0800da79 	.word	0x0800da79
 800da60:	0800da81 	.word	0x0800da81
 800da64:	0800da89 	.word	0x0800da89
 800da68:	0800da91 	.word	0x0800da91
 800da6c:	0800da99 	.word	0x0800da99
 800da70:	2300      	movs	r3, #0
 800da72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da76:	e1b6      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800da78:	2304      	movs	r3, #4
 800da7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da7e:	e1b2      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800da80:	2308      	movs	r3, #8
 800da82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da86:	e1ae      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800da88:	2310      	movs	r3, #16
 800da8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da8e:	e1aa      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800da90:	2320      	movs	r3, #32
 800da92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da96:	e1a6      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800da98:	2340      	movs	r3, #64	; 0x40
 800da9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800da9e:	e1a2      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800daa0:	2380      	movs	r3, #128	; 0x80
 800daa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daa6:	e19e      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a37      	ldr	r2, [pc, #220]	; (800db8c <UART_SetConfig+0x348>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d130      	bne.n	800db14 <UART_SetConfig+0x2d0>
 800dab2:	4b33      	ldr	r3, [pc, #204]	; (800db80 <UART_SetConfig+0x33c>)
 800dab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dab6:	f003 0307 	and.w	r3, r3, #7
 800daba:	2b05      	cmp	r3, #5
 800dabc:	d826      	bhi.n	800db0c <UART_SetConfig+0x2c8>
 800dabe:	a201      	add	r2, pc, #4	; (adr r2, 800dac4 <UART_SetConfig+0x280>)
 800dac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dac4:	0800dadd 	.word	0x0800dadd
 800dac8:	0800dae5 	.word	0x0800dae5
 800dacc:	0800daed 	.word	0x0800daed
 800dad0:	0800daf5 	.word	0x0800daf5
 800dad4:	0800dafd 	.word	0x0800dafd
 800dad8:	0800db05 	.word	0x0800db05
 800dadc:	2300      	movs	r3, #0
 800dade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dae2:	e180      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dae4:	2304      	movs	r3, #4
 800dae6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daea:	e17c      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800daec:	2308      	movs	r3, #8
 800daee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800daf2:	e178      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800daf4:	2310      	movs	r3, #16
 800daf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dafa:	e174      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dafc:	2320      	movs	r3, #32
 800dafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db02:	e170      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800db04:	2340      	movs	r3, #64	; 0x40
 800db06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db0a:	e16c      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800db0c:	2380      	movs	r3, #128	; 0x80
 800db0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db12:	e168      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	4a1d      	ldr	r2, [pc, #116]	; (800db90 <UART_SetConfig+0x34c>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d142      	bne.n	800dba4 <UART_SetConfig+0x360>
 800db1e:	4b18      	ldr	r3, [pc, #96]	; (800db80 <UART_SetConfig+0x33c>)
 800db20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db22:	f003 0307 	and.w	r3, r3, #7
 800db26:	2b05      	cmp	r3, #5
 800db28:	d838      	bhi.n	800db9c <UART_SetConfig+0x358>
 800db2a:	a201      	add	r2, pc, #4	; (adr r2, 800db30 <UART_SetConfig+0x2ec>)
 800db2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db30:	0800db49 	.word	0x0800db49
 800db34:	0800db51 	.word	0x0800db51
 800db38:	0800db59 	.word	0x0800db59
 800db3c:	0800db61 	.word	0x0800db61
 800db40:	0800db69 	.word	0x0800db69
 800db44:	0800db95 	.word	0x0800db95
 800db48:	2300      	movs	r3, #0
 800db4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db4e:	e14a      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800db50:	2304      	movs	r3, #4
 800db52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db56:	e146      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800db58:	2308      	movs	r3, #8
 800db5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db5e:	e142      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800db60:	2310      	movs	r3, #16
 800db62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db66:	e13e      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800db68:	2320      	movs	r3, #32
 800db6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db6e:	e13a      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800db70:	cfff69f3 	.word	0xcfff69f3
 800db74:	58000c00 	.word	0x58000c00
 800db78:	11fff4ff 	.word	0x11fff4ff
 800db7c:	40011000 	.word	0x40011000
 800db80:	58024400 	.word	0x58024400
 800db84:	40004400 	.word	0x40004400
 800db88:	40004800 	.word	0x40004800
 800db8c:	40004c00 	.word	0x40004c00
 800db90:	40005000 	.word	0x40005000
 800db94:	2340      	movs	r3, #64	; 0x40
 800db96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800db9a:	e124      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800db9c:	2380      	movs	r3, #128	; 0x80
 800db9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dba2:	e120      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4acc      	ldr	r2, [pc, #816]	; (800dedc <UART_SetConfig+0x698>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d176      	bne.n	800dc9c <UART_SetConfig+0x458>
 800dbae:	4bcc      	ldr	r3, [pc, #816]	; (800dee0 <UART_SetConfig+0x69c>)
 800dbb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800dbb6:	2b28      	cmp	r3, #40	; 0x28
 800dbb8:	d86c      	bhi.n	800dc94 <UART_SetConfig+0x450>
 800dbba:	a201      	add	r2, pc, #4	; (adr r2, 800dbc0 <UART_SetConfig+0x37c>)
 800dbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbc0:	0800dc65 	.word	0x0800dc65
 800dbc4:	0800dc95 	.word	0x0800dc95
 800dbc8:	0800dc95 	.word	0x0800dc95
 800dbcc:	0800dc95 	.word	0x0800dc95
 800dbd0:	0800dc95 	.word	0x0800dc95
 800dbd4:	0800dc95 	.word	0x0800dc95
 800dbd8:	0800dc95 	.word	0x0800dc95
 800dbdc:	0800dc95 	.word	0x0800dc95
 800dbe0:	0800dc6d 	.word	0x0800dc6d
 800dbe4:	0800dc95 	.word	0x0800dc95
 800dbe8:	0800dc95 	.word	0x0800dc95
 800dbec:	0800dc95 	.word	0x0800dc95
 800dbf0:	0800dc95 	.word	0x0800dc95
 800dbf4:	0800dc95 	.word	0x0800dc95
 800dbf8:	0800dc95 	.word	0x0800dc95
 800dbfc:	0800dc95 	.word	0x0800dc95
 800dc00:	0800dc75 	.word	0x0800dc75
 800dc04:	0800dc95 	.word	0x0800dc95
 800dc08:	0800dc95 	.word	0x0800dc95
 800dc0c:	0800dc95 	.word	0x0800dc95
 800dc10:	0800dc95 	.word	0x0800dc95
 800dc14:	0800dc95 	.word	0x0800dc95
 800dc18:	0800dc95 	.word	0x0800dc95
 800dc1c:	0800dc95 	.word	0x0800dc95
 800dc20:	0800dc7d 	.word	0x0800dc7d
 800dc24:	0800dc95 	.word	0x0800dc95
 800dc28:	0800dc95 	.word	0x0800dc95
 800dc2c:	0800dc95 	.word	0x0800dc95
 800dc30:	0800dc95 	.word	0x0800dc95
 800dc34:	0800dc95 	.word	0x0800dc95
 800dc38:	0800dc95 	.word	0x0800dc95
 800dc3c:	0800dc95 	.word	0x0800dc95
 800dc40:	0800dc85 	.word	0x0800dc85
 800dc44:	0800dc95 	.word	0x0800dc95
 800dc48:	0800dc95 	.word	0x0800dc95
 800dc4c:	0800dc95 	.word	0x0800dc95
 800dc50:	0800dc95 	.word	0x0800dc95
 800dc54:	0800dc95 	.word	0x0800dc95
 800dc58:	0800dc95 	.word	0x0800dc95
 800dc5c:	0800dc95 	.word	0x0800dc95
 800dc60:	0800dc8d 	.word	0x0800dc8d
 800dc64:	2301      	movs	r3, #1
 800dc66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc6a:	e0bc      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dc6c:	2304      	movs	r3, #4
 800dc6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc72:	e0b8      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dc74:	2308      	movs	r3, #8
 800dc76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc7a:	e0b4      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dc7c:	2310      	movs	r3, #16
 800dc7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc82:	e0b0      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dc84:	2320      	movs	r3, #32
 800dc86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc8a:	e0ac      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dc8c:	2340      	movs	r3, #64	; 0x40
 800dc8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc92:	e0a8      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dc94:	2380      	movs	r3, #128	; 0x80
 800dc96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dc9a:	e0a4      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4a90      	ldr	r2, [pc, #576]	; (800dee4 <UART_SetConfig+0x6a0>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d130      	bne.n	800dd08 <UART_SetConfig+0x4c4>
 800dca6:	4b8e      	ldr	r3, [pc, #568]	; (800dee0 <UART_SetConfig+0x69c>)
 800dca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcaa:	f003 0307 	and.w	r3, r3, #7
 800dcae:	2b05      	cmp	r3, #5
 800dcb0:	d826      	bhi.n	800dd00 <UART_SetConfig+0x4bc>
 800dcb2:	a201      	add	r2, pc, #4	; (adr r2, 800dcb8 <UART_SetConfig+0x474>)
 800dcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb8:	0800dcd1 	.word	0x0800dcd1
 800dcbc:	0800dcd9 	.word	0x0800dcd9
 800dcc0:	0800dce1 	.word	0x0800dce1
 800dcc4:	0800dce9 	.word	0x0800dce9
 800dcc8:	0800dcf1 	.word	0x0800dcf1
 800dccc:	0800dcf9 	.word	0x0800dcf9
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcd6:	e086      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dcd8:	2304      	movs	r3, #4
 800dcda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcde:	e082      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dce0:	2308      	movs	r3, #8
 800dce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dce6:	e07e      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dce8:	2310      	movs	r3, #16
 800dcea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcee:	e07a      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dcf0:	2320      	movs	r3, #32
 800dcf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcf6:	e076      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dcf8:	2340      	movs	r3, #64	; 0x40
 800dcfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dcfe:	e072      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dd00:	2380      	movs	r3, #128	; 0x80
 800dd02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd06:	e06e      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	4a76      	ldr	r2, [pc, #472]	; (800dee8 <UART_SetConfig+0x6a4>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d130      	bne.n	800dd74 <UART_SetConfig+0x530>
 800dd12:	4b73      	ldr	r3, [pc, #460]	; (800dee0 <UART_SetConfig+0x69c>)
 800dd14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd16:	f003 0307 	and.w	r3, r3, #7
 800dd1a:	2b05      	cmp	r3, #5
 800dd1c:	d826      	bhi.n	800dd6c <UART_SetConfig+0x528>
 800dd1e:	a201      	add	r2, pc, #4	; (adr r2, 800dd24 <UART_SetConfig+0x4e0>)
 800dd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd24:	0800dd3d 	.word	0x0800dd3d
 800dd28:	0800dd45 	.word	0x0800dd45
 800dd2c:	0800dd4d 	.word	0x0800dd4d
 800dd30:	0800dd55 	.word	0x0800dd55
 800dd34:	0800dd5d 	.word	0x0800dd5d
 800dd38:	0800dd65 	.word	0x0800dd65
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd42:	e050      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dd44:	2304      	movs	r3, #4
 800dd46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd4a:	e04c      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dd4c:	2308      	movs	r3, #8
 800dd4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd52:	e048      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dd54:	2310      	movs	r3, #16
 800dd56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd5a:	e044      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dd5c:	2320      	movs	r3, #32
 800dd5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd62:	e040      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dd64:	2340      	movs	r3, #64	; 0x40
 800dd66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd6a:	e03c      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dd6c:	2380      	movs	r3, #128	; 0x80
 800dd6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800dd72:	e038      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a5c      	ldr	r2, [pc, #368]	; (800deec <UART_SetConfig+0x6a8>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d130      	bne.n	800dde0 <UART_SetConfig+0x59c>
 800dd7e:	4b58      	ldr	r3, [pc, #352]	; (800dee0 <UART_SetConfig+0x69c>)
 800dd80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd82:	f003 0307 	and.w	r3, r3, #7
 800dd86:	2b05      	cmp	r3, #5
 800dd88:	d826      	bhi.n	800ddd8 <UART_SetConfig+0x594>
 800dd8a:	a201      	add	r2, pc, #4	; (adr r2, 800dd90 <UART_SetConfig+0x54c>)
 800dd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd90:	0800dda9 	.word	0x0800dda9
 800dd94:	0800ddb1 	.word	0x0800ddb1
 800dd98:	0800ddb9 	.word	0x0800ddb9
 800dd9c:	0800ddc1 	.word	0x0800ddc1
 800dda0:	0800ddc9 	.word	0x0800ddc9
 800dda4:	0800ddd1 	.word	0x0800ddd1
 800dda8:	2302      	movs	r3, #2
 800ddaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddae:	e01a      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800ddb0:	2304      	movs	r3, #4
 800ddb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddb6:	e016      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800ddb8:	2308      	movs	r3, #8
 800ddba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddbe:	e012      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800ddc0:	2310      	movs	r3, #16
 800ddc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddc6:	e00e      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800ddc8:	2320      	movs	r3, #32
 800ddca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddce:	e00a      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800ddd0:	2340      	movs	r3, #64	; 0x40
 800ddd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddd6:	e006      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800ddd8:	2380      	movs	r3, #128	; 0x80
 800ddda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ddde:	e002      	b.n	800dde6 <UART_SetConfig+0x5a2>
 800dde0:	2380      	movs	r3, #128	; 0x80
 800dde2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	4a40      	ldr	r2, [pc, #256]	; (800deec <UART_SetConfig+0x6a8>)
 800ddec:	4293      	cmp	r3, r2
 800ddee:	f040 80ef 	bne.w	800dfd0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ddf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ddf6:	2b20      	cmp	r3, #32
 800ddf8:	dc46      	bgt.n	800de88 <UART_SetConfig+0x644>
 800ddfa:	2b02      	cmp	r3, #2
 800ddfc:	f2c0 8081 	blt.w	800df02 <UART_SetConfig+0x6be>
 800de00:	3b02      	subs	r3, #2
 800de02:	2b1e      	cmp	r3, #30
 800de04:	d87d      	bhi.n	800df02 <UART_SetConfig+0x6be>
 800de06:	a201      	add	r2, pc, #4	; (adr r2, 800de0c <UART_SetConfig+0x5c8>)
 800de08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de0c:	0800de8f 	.word	0x0800de8f
 800de10:	0800df03 	.word	0x0800df03
 800de14:	0800de97 	.word	0x0800de97
 800de18:	0800df03 	.word	0x0800df03
 800de1c:	0800df03 	.word	0x0800df03
 800de20:	0800df03 	.word	0x0800df03
 800de24:	0800dea7 	.word	0x0800dea7
 800de28:	0800df03 	.word	0x0800df03
 800de2c:	0800df03 	.word	0x0800df03
 800de30:	0800df03 	.word	0x0800df03
 800de34:	0800df03 	.word	0x0800df03
 800de38:	0800df03 	.word	0x0800df03
 800de3c:	0800df03 	.word	0x0800df03
 800de40:	0800df03 	.word	0x0800df03
 800de44:	0800deb7 	.word	0x0800deb7
 800de48:	0800df03 	.word	0x0800df03
 800de4c:	0800df03 	.word	0x0800df03
 800de50:	0800df03 	.word	0x0800df03
 800de54:	0800df03 	.word	0x0800df03
 800de58:	0800df03 	.word	0x0800df03
 800de5c:	0800df03 	.word	0x0800df03
 800de60:	0800df03 	.word	0x0800df03
 800de64:	0800df03 	.word	0x0800df03
 800de68:	0800df03 	.word	0x0800df03
 800de6c:	0800df03 	.word	0x0800df03
 800de70:	0800df03 	.word	0x0800df03
 800de74:	0800df03 	.word	0x0800df03
 800de78:	0800df03 	.word	0x0800df03
 800de7c:	0800df03 	.word	0x0800df03
 800de80:	0800df03 	.word	0x0800df03
 800de84:	0800def5 	.word	0x0800def5
 800de88:	2b40      	cmp	r3, #64	; 0x40
 800de8a:	d036      	beq.n	800defa <UART_SetConfig+0x6b6>
 800de8c:	e039      	b.n	800df02 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800de8e:	f7fc fe93 	bl	800abb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800de92:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800de94:	e03b      	b.n	800df0e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de96:	f107 0314 	add.w	r3, r7, #20
 800de9a:	4618      	mov	r0, r3
 800de9c:	f7fc fea2 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dea0:	69bb      	ldr	r3, [r7, #24]
 800dea2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dea4:	e033      	b.n	800df0e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dea6:	f107 0308 	add.w	r3, r7, #8
 800deaa:	4618      	mov	r0, r3
 800deac:	f7fc ffee 	bl	800ae8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800deb4:	e02b      	b.n	800df0e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800deb6:	4b0a      	ldr	r3, [pc, #40]	; (800dee0 <UART_SetConfig+0x69c>)
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f003 0320 	and.w	r3, r3, #32
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d009      	beq.n	800ded6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dec2:	4b07      	ldr	r3, [pc, #28]	; (800dee0 <UART_SetConfig+0x69c>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	08db      	lsrs	r3, r3, #3
 800dec8:	f003 0303 	and.w	r3, r3, #3
 800decc:	4a08      	ldr	r2, [pc, #32]	; (800def0 <UART_SetConfig+0x6ac>)
 800dece:	fa22 f303 	lsr.w	r3, r2, r3
 800ded2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ded4:	e01b      	b.n	800df0e <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ded6:	4b06      	ldr	r3, [pc, #24]	; (800def0 <UART_SetConfig+0x6ac>)
 800ded8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800deda:	e018      	b.n	800df0e <UART_SetConfig+0x6ca>
 800dedc:	40011400 	.word	0x40011400
 800dee0:	58024400 	.word	0x58024400
 800dee4:	40007800 	.word	0x40007800
 800dee8:	40007c00 	.word	0x40007c00
 800deec:	58000c00 	.word	0x58000c00
 800def0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800def4:	4bc4      	ldr	r3, [pc, #784]	; (800e208 <UART_SetConfig+0x9c4>)
 800def6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800def8:	e009      	b.n	800df0e <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800defa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800defe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800df00:	e005      	b.n	800df0e <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800df02:	2300      	movs	r3, #0
 800df04:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800df06:	2301      	movs	r3, #1
 800df08:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800df0c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800df0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df10:	2b00      	cmp	r3, #0
 800df12:	f000 81da 	beq.w	800e2ca <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df1a:	4abc      	ldr	r2, [pc, #752]	; (800e20c <UART_SetConfig+0x9c8>)
 800df1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df20:	461a      	mov	r2, r3
 800df22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df24:	fbb3 f3f2 	udiv	r3, r3, r2
 800df28:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	685a      	ldr	r2, [r3, #4]
 800df2e:	4613      	mov	r3, r2
 800df30:	005b      	lsls	r3, r3, #1
 800df32:	4413      	add	r3, r2
 800df34:	6a3a      	ldr	r2, [r7, #32]
 800df36:	429a      	cmp	r2, r3
 800df38:	d305      	bcc.n	800df46 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800df40:	6a3a      	ldr	r2, [r7, #32]
 800df42:	429a      	cmp	r2, r3
 800df44:	d903      	bls.n	800df4e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800df46:	2301      	movs	r3, #1
 800df48:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800df4c:	e1bd      	b.n	800e2ca <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df50:	4618      	mov	r0, r3
 800df52:	f04f 0100 	mov.w	r1, #0
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df5a:	4aac      	ldr	r2, [pc, #688]	; (800e20c <UART_SetConfig+0x9c8>)
 800df5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df60:	b29a      	uxth	r2, r3
 800df62:	f04f 0300 	mov.w	r3, #0
 800df66:	f7f2 fbcf 	bl	8000708 <__aeabi_uldivmod>
 800df6a:	4602      	mov	r2, r0
 800df6c:	460b      	mov	r3, r1
 800df6e:	4610      	mov	r0, r2
 800df70:	4619      	mov	r1, r3
 800df72:	f04f 0200 	mov.w	r2, #0
 800df76:	f04f 0300 	mov.w	r3, #0
 800df7a:	020b      	lsls	r3, r1, #8
 800df7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800df80:	0202      	lsls	r2, r0, #8
 800df82:	6879      	ldr	r1, [r7, #4]
 800df84:	6849      	ldr	r1, [r1, #4]
 800df86:	0849      	lsrs	r1, r1, #1
 800df88:	4608      	mov	r0, r1
 800df8a:	f04f 0100 	mov.w	r1, #0
 800df8e:	1814      	adds	r4, r2, r0
 800df90:	eb43 0501 	adc.w	r5, r3, r1
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	461a      	mov	r2, r3
 800df9a:	f04f 0300 	mov.w	r3, #0
 800df9e:	4620      	mov	r0, r4
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	f7f2 fbb1 	bl	8000708 <__aeabi_uldivmod>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	4613      	mov	r3, r2
 800dfac:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dfb4:	d308      	bcc.n	800dfc8 <UART_SetConfig+0x784>
 800dfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfbc:	d204      	bcs.n	800dfc8 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfc4:	60da      	str	r2, [r3, #12]
 800dfc6:	e180      	b.n	800e2ca <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800dfc8:	2301      	movs	r3, #1
 800dfca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800dfce:	e17c      	b.n	800e2ca <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	69db      	ldr	r3, [r3, #28]
 800dfd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dfd8:	f040 80be 	bne.w	800e158 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800dfdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800dfe0:	2b20      	cmp	r3, #32
 800dfe2:	dc49      	bgt.n	800e078 <UART_SetConfig+0x834>
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	db7c      	blt.n	800e0e2 <UART_SetConfig+0x89e>
 800dfe8:	2b20      	cmp	r3, #32
 800dfea:	d87a      	bhi.n	800e0e2 <UART_SetConfig+0x89e>
 800dfec:	a201      	add	r2, pc, #4	; (adr r2, 800dff4 <UART_SetConfig+0x7b0>)
 800dfee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dff2:	bf00      	nop
 800dff4:	0800e07f 	.word	0x0800e07f
 800dff8:	0800e087 	.word	0x0800e087
 800dffc:	0800e0e3 	.word	0x0800e0e3
 800e000:	0800e0e3 	.word	0x0800e0e3
 800e004:	0800e08f 	.word	0x0800e08f
 800e008:	0800e0e3 	.word	0x0800e0e3
 800e00c:	0800e0e3 	.word	0x0800e0e3
 800e010:	0800e0e3 	.word	0x0800e0e3
 800e014:	0800e09f 	.word	0x0800e09f
 800e018:	0800e0e3 	.word	0x0800e0e3
 800e01c:	0800e0e3 	.word	0x0800e0e3
 800e020:	0800e0e3 	.word	0x0800e0e3
 800e024:	0800e0e3 	.word	0x0800e0e3
 800e028:	0800e0e3 	.word	0x0800e0e3
 800e02c:	0800e0e3 	.word	0x0800e0e3
 800e030:	0800e0e3 	.word	0x0800e0e3
 800e034:	0800e0af 	.word	0x0800e0af
 800e038:	0800e0e3 	.word	0x0800e0e3
 800e03c:	0800e0e3 	.word	0x0800e0e3
 800e040:	0800e0e3 	.word	0x0800e0e3
 800e044:	0800e0e3 	.word	0x0800e0e3
 800e048:	0800e0e3 	.word	0x0800e0e3
 800e04c:	0800e0e3 	.word	0x0800e0e3
 800e050:	0800e0e3 	.word	0x0800e0e3
 800e054:	0800e0e3 	.word	0x0800e0e3
 800e058:	0800e0e3 	.word	0x0800e0e3
 800e05c:	0800e0e3 	.word	0x0800e0e3
 800e060:	0800e0e3 	.word	0x0800e0e3
 800e064:	0800e0e3 	.word	0x0800e0e3
 800e068:	0800e0e3 	.word	0x0800e0e3
 800e06c:	0800e0e3 	.word	0x0800e0e3
 800e070:	0800e0e3 	.word	0x0800e0e3
 800e074:	0800e0d5 	.word	0x0800e0d5
 800e078:	2b40      	cmp	r3, #64	; 0x40
 800e07a:	d02e      	beq.n	800e0da <UART_SetConfig+0x896>
 800e07c:	e031      	b.n	800e0e2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e07e:	f7fb fe2f 	bl	8009ce0 <HAL_RCC_GetPCLK1Freq>
 800e082:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e084:	e033      	b.n	800e0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e086:	f7fb fe41 	bl	8009d0c <HAL_RCC_GetPCLK2Freq>
 800e08a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e08c:	e02f      	b.n	800e0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e08e:	f107 0314 	add.w	r3, r7, #20
 800e092:	4618      	mov	r0, r3
 800e094:	f7fc fda6 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e098:	69bb      	ldr	r3, [r7, #24]
 800e09a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e09c:	e027      	b.n	800e0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e09e:	f107 0308 	add.w	r3, r7, #8
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	f7fc fef2 	bl	800ae8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e0ac:	e01f      	b.n	800e0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e0ae:	4b58      	ldr	r3, [pc, #352]	; (800e210 <UART_SetConfig+0x9cc>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f003 0320 	and.w	r3, r3, #32
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d009      	beq.n	800e0ce <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e0ba:	4b55      	ldr	r3, [pc, #340]	; (800e210 <UART_SetConfig+0x9cc>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	08db      	lsrs	r3, r3, #3
 800e0c0:	f003 0303 	and.w	r3, r3, #3
 800e0c4:	4a53      	ldr	r2, [pc, #332]	; (800e214 <UART_SetConfig+0x9d0>)
 800e0c6:	fa22 f303 	lsr.w	r3, r2, r3
 800e0ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e0cc:	e00f      	b.n	800e0ee <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800e0ce:	4b51      	ldr	r3, [pc, #324]	; (800e214 <UART_SetConfig+0x9d0>)
 800e0d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e0d2:	e00c      	b.n	800e0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e0d4:	4b4c      	ldr	r3, [pc, #304]	; (800e208 <UART_SetConfig+0x9c4>)
 800e0d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e0d8:	e009      	b.n	800e0ee <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e0da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e0de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e0e0:	e005      	b.n	800e0ee <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e0e6:	2301      	movs	r3, #1
 800e0e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e0ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	f000 80ea 	beq.w	800e2ca <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0fa:	4a44      	ldr	r2, [pc, #272]	; (800e20c <UART_SetConfig+0x9c8>)
 800e0fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e100:	461a      	mov	r2, r3
 800e102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e104:	fbb3 f3f2 	udiv	r3, r3, r2
 800e108:	005a      	lsls	r2, r3, #1
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	085b      	lsrs	r3, r3, #1
 800e110:	441a      	add	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	685b      	ldr	r3, [r3, #4]
 800e116:	fbb2 f3f3 	udiv	r3, r2, r3
 800e11a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e11e:	2b0f      	cmp	r3, #15
 800e120:	d916      	bls.n	800e150 <UART_SetConfig+0x90c>
 800e122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e128:	d212      	bcs.n	800e150 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	f023 030f 	bic.w	r3, r3, #15
 800e132:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e136:	085b      	lsrs	r3, r3, #1
 800e138:	b29b      	uxth	r3, r3
 800e13a:	f003 0307 	and.w	r3, r3, #7
 800e13e:	b29a      	uxth	r2, r3
 800e140:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e142:	4313      	orrs	r3, r2
 800e144:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e14c:	60da      	str	r2, [r3, #12]
 800e14e:	e0bc      	b.n	800e2ca <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e150:	2301      	movs	r3, #1
 800e152:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800e156:	e0b8      	b.n	800e2ca <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e158:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e15c:	2b20      	cmp	r3, #32
 800e15e:	dc4b      	bgt.n	800e1f8 <UART_SetConfig+0x9b4>
 800e160:	2b00      	cmp	r3, #0
 800e162:	f2c0 8087 	blt.w	800e274 <UART_SetConfig+0xa30>
 800e166:	2b20      	cmp	r3, #32
 800e168:	f200 8084 	bhi.w	800e274 <UART_SetConfig+0xa30>
 800e16c:	a201      	add	r2, pc, #4	; (adr r2, 800e174 <UART_SetConfig+0x930>)
 800e16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e172:	bf00      	nop
 800e174:	0800e1ff 	.word	0x0800e1ff
 800e178:	0800e219 	.word	0x0800e219
 800e17c:	0800e275 	.word	0x0800e275
 800e180:	0800e275 	.word	0x0800e275
 800e184:	0800e221 	.word	0x0800e221
 800e188:	0800e275 	.word	0x0800e275
 800e18c:	0800e275 	.word	0x0800e275
 800e190:	0800e275 	.word	0x0800e275
 800e194:	0800e231 	.word	0x0800e231
 800e198:	0800e275 	.word	0x0800e275
 800e19c:	0800e275 	.word	0x0800e275
 800e1a0:	0800e275 	.word	0x0800e275
 800e1a4:	0800e275 	.word	0x0800e275
 800e1a8:	0800e275 	.word	0x0800e275
 800e1ac:	0800e275 	.word	0x0800e275
 800e1b0:	0800e275 	.word	0x0800e275
 800e1b4:	0800e241 	.word	0x0800e241
 800e1b8:	0800e275 	.word	0x0800e275
 800e1bc:	0800e275 	.word	0x0800e275
 800e1c0:	0800e275 	.word	0x0800e275
 800e1c4:	0800e275 	.word	0x0800e275
 800e1c8:	0800e275 	.word	0x0800e275
 800e1cc:	0800e275 	.word	0x0800e275
 800e1d0:	0800e275 	.word	0x0800e275
 800e1d4:	0800e275 	.word	0x0800e275
 800e1d8:	0800e275 	.word	0x0800e275
 800e1dc:	0800e275 	.word	0x0800e275
 800e1e0:	0800e275 	.word	0x0800e275
 800e1e4:	0800e275 	.word	0x0800e275
 800e1e8:	0800e275 	.word	0x0800e275
 800e1ec:	0800e275 	.word	0x0800e275
 800e1f0:	0800e275 	.word	0x0800e275
 800e1f4:	0800e267 	.word	0x0800e267
 800e1f8:	2b40      	cmp	r3, #64	; 0x40
 800e1fa:	d037      	beq.n	800e26c <UART_SetConfig+0xa28>
 800e1fc:	e03a      	b.n	800e274 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e1fe:	f7fb fd6f 	bl	8009ce0 <HAL_RCC_GetPCLK1Freq>
 800e202:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e204:	e03c      	b.n	800e280 <UART_SetConfig+0xa3c>
 800e206:	bf00      	nop
 800e208:	003d0900 	.word	0x003d0900
 800e20c:	08012638 	.word	0x08012638
 800e210:	58024400 	.word	0x58024400
 800e214:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e218:	f7fb fd78 	bl	8009d0c <HAL_RCC_GetPCLK2Freq>
 800e21c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800e21e:	e02f      	b.n	800e280 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e220:	f107 0314 	add.w	r3, r7, #20
 800e224:	4618      	mov	r0, r3
 800e226:	f7fc fcdd 	bl	800abe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e22e:	e027      	b.n	800e280 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e230:	f107 0308 	add.w	r3, r7, #8
 800e234:	4618      	mov	r0, r3
 800e236:	f7fc fe29 	bl	800ae8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e23e:	e01f      	b.n	800e280 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e240:	4b2c      	ldr	r3, [pc, #176]	; (800e2f4 <UART_SetConfig+0xab0>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f003 0320 	and.w	r3, r3, #32
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d009      	beq.n	800e260 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e24c:	4b29      	ldr	r3, [pc, #164]	; (800e2f4 <UART_SetConfig+0xab0>)
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	08db      	lsrs	r3, r3, #3
 800e252:	f003 0303 	and.w	r3, r3, #3
 800e256:	4a28      	ldr	r2, [pc, #160]	; (800e2f8 <UART_SetConfig+0xab4>)
 800e258:	fa22 f303 	lsr.w	r3, r2, r3
 800e25c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e25e:	e00f      	b.n	800e280 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800e260:	4b25      	ldr	r3, [pc, #148]	; (800e2f8 <UART_SetConfig+0xab4>)
 800e262:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e264:	e00c      	b.n	800e280 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e266:	4b25      	ldr	r3, [pc, #148]	; (800e2fc <UART_SetConfig+0xab8>)
 800e268:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e26a:	e009      	b.n	800e280 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e26c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e270:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800e272:	e005      	b.n	800e280 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800e274:	2300      	movs	r3, #0
 800e276:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800e278:	2301      	movs	r3, #1
 800e27a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800e27e:	bf00      	nop
    }

    if (pclk != 0U)
 800e280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e282:	2b00      	cmp	r3, #0
 800e284:	d021      	beq.n	800e2ca <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28a:	4a1d      	ldr	r2, [pc, #116]	; (800e300 <UART_SetConfig+0xabc>)
 800e28c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e290:	461a      	mov	r2, r3
 800e292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e294:	fbb3 f2f2 	udiv	r2, r3, r2
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	085b      	lsrs	r3, r3, #1
 800e29e:	441a      	add	r2, r3
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2a8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ac:	2b0f      	cmp	r3, #15
 800e2ae:	d909      	bls.n	800e2c4 <UART_SetConfig+0xa80>
 800e2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2b6:	d205      	bcs.n	800e2c4 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	60da      	str	r2, [r3, #12]
 800e2c2:	e002      	b.n	800e2ca <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800e2e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	3738      	adds	r7, #56	; 0x38
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bdb0      	pop	{r4, r5, r7, pc}
 800e2f2:	bf00      	nop
 800e2f4:	58024400 	.word	0x58024400
 800e2f8:	03d09000 	.word	0x03d09000
 800e2fc:	003d0900 	.word	0x003d0900
 800e300:	08012638 	.word	0x08012638

0800e304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e310:	f003 0301 	and.w	r3, r3, #1
 800e314:	2b00      	cmp	r3, #0
 800e316:	d00a      	beq.n	800e32e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	430a      	orrs	r2, r1
 800e32c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e332:	f003 0302 	and.w	r3, r3, #2
 800e336:	2b00      	cmp	r3, #0
 800e338:	d00a      	beq.n	800e350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	430a      	orrs	r2, r1
 800e34e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e354:	f003 0304 	and.w	r3, r3, #4
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d00a      	beq.n	800e372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	685b      	ldr	r3, [r3, #4]
 800e362:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	430a      	orrs	r2, r1
 800e370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e376:	f003 0308 	and.w	r3, r3, #8
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d00a      	beq.n	800e394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	685b      	ldr	r3, [r3, #4]
 800e384:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	430a      	orrs	r2, r1
 800e392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e398:	f003 0310 	and.w	r3, r3, #16
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d00a      	beq.n	800e3b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	689b      	ldr	r3, [r3, #8]
 800e3a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	430a      	orrs	r2, r1
 800e3b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3ba:	f003 0320 	and.w	r3, r3, #32
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d00a      	beq.n	800e3d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	430a      	orrs	r2, r1
 800e3d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d01a      	beq.n	800e41a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	685b      	ldr	r3, [r3, #4]
 800e3ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	430a      	orrs	r2, r1
 800e3f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e402:	d10a      	bne.n	800e41a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	430a      	orrs	r2, r1
 800e418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e41e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00a      	beq.n	800e43c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	430a      	orrs	r2, r1
 800e43a:	605a      	str	r2, [r3, #4]
  }
}
 800e43c:	bf00      	nop
 800e43e:	370c      	adds	r7, #12
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr

0800e448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b086      	sub	sp, #24
 800e44c:	af02      	add	r7, sp, #8
 800e44e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2200      	movs	r2, #0
 800e454:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e458:	f7f7 f92c 	bl	80056b4 <HAL_GetTick>
 800e45c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f003 0308 	and.w	r3, r3, #8
 800e468:	2b08      	cmp	r3, #8
 800e46a:	d10e      	bne.n	800e48a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e46c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e470:	9300      	str	r3, [sp, #0]
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2200      	movs	r2, #0
 800e476:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f000 f82f 	bl	800e4de <UART_WaitOnFlagUntilTimeout>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d001      	beq.n	800e48a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e486:	2303      	movs	r3, #3
 800e488:	e025      	b.n	800e4d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	f003 0304 	and.w	r3, r3, #4
 800e494:	2b04      	cmp	r3, #4
 800e496:	d10e      	bne.n	800e4b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e498:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f000 f819 	bl	800e4de <UART_WaitOnFlagUntilTimeout>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d001      	beq.n	800e4b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e4b2:	2303      	movs	r3, #3
 800e4b4:	e00f      	b.n	800e4d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2220      	movs	r2, #32
 800e4ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2220      	movs	r2, #32
 800e4c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e4d4:	2300      	movs	r3, #0
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3710      	adds	r7, #16
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}

0800e4de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e4de:	b580      	push	{r7, lr}
 800e4e0:	b09c      	sub	sp, #112	; 0x70
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	60f8      	str	r0, [r7, #12]
 800e4e6:	60b9      	str	r1, [r7, #8]
 800e4e8:	603b      	str	r3, [r7, #0]
 800e4ea:	4613      	mov	r3, r2
 800e4ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e4ee:	e0a9      	b.n	800e644 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e4f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4f6:	f000 80a5 	beq.w	800e644 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e4fa:	f7f7 f8db 	bl	80056b4 <HAL_GetTick>
 800e4fe:	4602      	mov	r2, r0
 800e500:	683b      	ldr	r3, [r7, #0]
 800e502:	1ad3      	subs	r3, r2, r3
 800e504:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e506:	429a      	cmp	r2, r3
 800e508:	d302      	bcc.n	800e510 <UART_WaitOnFlagUntilTimeout+0x32>
 800e50a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d140      	bne.n	800e592 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e518:	e853 3f00 	ldrex	r3, [r3]
 800e51c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e51e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e520:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e524:	667b      	str	r3, [r7, #100]	; 0x64
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	461a      	mov	r2, r3
 800e52c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e52e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e530:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e532:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e534:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e536:	e841 2300 	strex	r3, r2, [r1]
 800e53a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e53c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d1e6      	bne.n	800e510 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	3308      	adds	r3, #8
 800e548:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e54c:	e853 3f00 	ldrex	r3, [r3]
 800e550:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e554:	f023 0301 	bic.w	r3, r3, #1
 800e558:	663b      	str	r3, [r7, #96]	; 0x60
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	3308      	adds	r3, #8
 800e560:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e562:	64ba      	str	r2, [r7, #72]	; 0x48
 800e564:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e566:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e56a:	e841 2300 	strex	r3, r2, [r1]
 800e56e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e572:	2b00      	cmp	r3, #0
 800e574:	d1e5      	bne.n	800e542 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	2220      	movs	r2, #32
 800e57a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2220      	movs	r2, #32
 800e582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	2200      	movs	r2, #0
 800e58a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e58e:	2303      	movs	r3, #3
 800e590:	e069      	b.n	800e666 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f003 0304 	and.w	r3, r3, #4
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d051      	beq.n	800e644 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	69db      	ldr	r3, [r3, #28]
 800e5a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e5aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5ae:	d149      	bne.n	800e644 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c2:	e853 3f00 	ldrex	r3, [r3]
 800e5c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e5ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e5d8:	637b      	str	r3, [r7, #52]	; 0x34
 800e5da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e5dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e5de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5e0:	e841 2300 	strex	r3, r2, [r1]
 800e5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d1e6      	bne.n	800e5ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	3308      	adds	r3, #8
 800e5f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	e853 3f00 	ldrex	r3, [r3]
 800e5fa:	613b      	str	r3, [r7, #16]
   return(result);
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	f023 0301 	bic.w	r3, r3, #1
 800e602:	66bb      	str	r3, [r7, #104]	; 0x68
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	3308      	adds	r3, #8
 800e60a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e60c:	623a      	str	r2, [r7, #32]
 800e60e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e610:	69f9      	ldr	r1, [r7, #28]
 800e612:	6a3a      	ldr	r2, [r7, #32]
 800e614:	e841 2300 	strex	r3, r2, [r1]
 800e618:	61bb      	str	r3, [r7, #24]
   return(result);
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d1e5      	bne.n	800e5ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2220      	movs	r2, #32
 800e624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	2220      	movs	r2, #32
 800e62c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2220      	movs	r2, #32
 800e634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2200      	movs	r2, #0
 800e63c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e640:	2303      	movs	r3, #3
 800e642:	e010      	b.n	800e666 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	69da      	ldr	r2, [r3, #28]
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	4013      	ands	r3, r2
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	429a      	cmp	r2, r3
 800e652:	bf0c      	ite	eq
 800e654:	2301      	moveq	r3, #1
 800e656:	2300      	movne	r3, #0
 800e658:	b2db      	uxtb	r3, r3
 800e65a:	461a      	mov	r2, r3
 800e65c:	79fb      	ldrb	r3, [r7, #7]
 800e65e:	429a      	cmp	r2, r3
 800e660:	f43f af46 	beq.w	800e4f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e664:	2300      	movs	r3, #0
}
 800e666:	4618      	mov	r0, r3
 800e668:	3770      	adds	r7, #112	; 0x70
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
	...

0800e670 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b096      	sub	sp, #88	; 0x58
 800e674:	af00      	add	r7, sp, #0
 800e676:	60f8      	str	r0, [r7, #12]
 800e678:	60b9      	str	r1, [r7, #8]
 800e67a:	4613      	mov	r3, r2
 800e67c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	68ba      	ldr	r2, [r7, #8]
 800e682:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	88fa      	ldrh	r2, [r7, #6]
 800e688:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2200      	movs	r2, #0
 800e690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	2222      	movs	r2, #34	; 0x22
 800e698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d02c      	beq.n	800e6fe <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6a8:	4a42      	ldr	r2, [pc, #264]	; (800e7b4 <UART_Start_Receive_DMA+0x144>)
 800e6aa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6b0:	4a41      	ldr	r2, [pc, #260]	; (800e7b8 <UART_Start_Receive_DMA+0x148>)
 800e6b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6b8:	4a40      	ldr	r2, [pc, #256]	; (800e7bc <UART_Start_Receive_DMA+0x14c>)
 800e6ba:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	3324      	adds	r3, #36	; 0x24
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6d4:	461a      	mov	r2, r3
 800e6d6:	88fb      	ldrh	r3, [r7, #6]
 800e6d8:	f7f7 fe7a 	bl	80063d0 <HAL_DMA_Start_IT>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d00d      	beq.n	800e6fe <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2210      	movs	r2, #16
 800e6e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	2220      	movs	r2, #32
 800e6f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	e055      	b.n	800e7aa <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2200      	movs	r2, #0
 800e702:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	691b      	ldr	r3, [r3, #16]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d018      	beq.n	800e740 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e716:	e853 3f00 	ldrex	r3, [r3]
 800e71a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e722:	657b      	str	r3, [r7, #84]	; 0x54
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	461a      	mov	r2, r3
 800e72a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e72c:	64bb      	str	r3, [r7, #72]	; 0x48
 800e72e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e730:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e734:	e841 2300 	strex	r3, r2, [r1]
 800e738:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e73a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d1e6      	bne.n	800e70e <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	3308      	adds	r3, #8
 800e746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74a:	e853 3f00 	ldrex	r3, [r3]
 800e74e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e752:	f043 0301 	orr.w	r3, r3, #1
 800e756:	653b      	str	r3, [r7, #80]	; 0x50
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	3308      	adds	r3, #8
 800e75e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e760:	637a      	str	r2, [r7, #52]	; 0x34
 800e762:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e768:	e841 2300 	strex	r3, r2, [r1]
 800e76c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e770:	2b00      	cmp	r3, #0
 800e772:	d1e5      	bne.n	800e740 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	3308      	adds	r3, #8
 800e77a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	e853 3f00 	ldrex	r3, [r3]
 800e782:	613b      	str	r3, [r7, #16]
   return(result);
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e78a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	3308      	adds	r3, #8
 800e792:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e794:	623a      	str	r2, [r7, #32]
 800e796:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e798:	69f9      	ldr	r1, [r7, #28]
 800e79a:	6a3a      	ldr	r2, [r7, #32]
 800e79c:	e841 2300 	strex	r3, r2, [r1]
 800e7a0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e7a2:	69bb      	ldr	r3, [r7, #24]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d1e5      	bne.n	800e774 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800e7a8:	2300      	movs	r3, #0
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3758      	adds	r7, #88	; 0x58
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	bf00      	nop
 800e7b4:	0800e9c3 	.word	0x0800e9c3
 800e7b8:	0800eae5 	.word	0x0800eae5
 800e7bc:	0800eb1d 	.word	0x0800eb1d

0800e7c0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e7c0:	b480      	push	{r7}
 800e7c2:	b08f      	sub	sp, #60	; 0x3c
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7ce:	6a3b      	ldr	r3, [r7, #32]
 800e7d0:	e853 3f00 	ldrex	r3, [r3]
 800e7d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800e7d6:	69fb      	ldr	r3, [r7, #28]
 800e7d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800e7dc:	637b      	str	r3, [r7, #52]	; 0x34
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e7e8:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e7ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e7ee:	e841 2300 	strex	r3, r2, [r1]
 800e7f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d1e6      	bne.n	800e7c8 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	3308      	adds	r3, #8
 800e800:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	e853 3f00 	ldrex	r3, [r3]
 800e808:	60bb      	str	r3, [r7, #8]
   return(result);
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e810:	633b      	str	r3, [r7, #48]	; 0x30
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	3308      	adds	r3, #8
 800e818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e81a:	61ba      	str	r2, [r7, #24]
 800e81c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e81e:	6979      	ldr	r1, [r7, #20]
 800e820:	69ba      	ldr	r2, [r7, #24]
 800e822:	e841 2300 	strex	r3, r2, [r1]
 800e826:	613b      	str	r3, [r7, #16]
   return(result);
 800e828:	693b      	ldr	r3, [r7, #16]
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d1e5      	bne.n	800e7fa <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2220      	movs	r2, #32
 800e832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800e836:	bf00      	nop
 800e838:	373c      	adds	r7, #60	; 0x3c
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr
	...

0800e844 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e844:	b480      	push	{r7}
 800e846:	b095      	sub	sp, #84	; 0x54
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e854:	e853 3f00 	ldrex	r3, [r3]
 800e858:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e85c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e860:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	461a      	mov	r2, r3
 800e868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e86a:	643b      	str	r3, [r7, #64]	; 0x40
 800e86c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e86e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e870:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e872:	e841 2300 	strex	r3, r2, [r1]
 800e876:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d1e6      	bne.n	800e84c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	3308      	adds	r3, #8
 800e884:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e886:	6a3b      	ldr	r3, [r7, #32]
 800e888:	e853 3f00 	ldrex	r3, [r3]
 800e88c:	61fb      	str	r3, [r7, #28]
   return(result);
 800e88e:	69fa      	ldr	r2, [r7, #28]
 800e890:	4b1e      	ldr	r3, [pc, #120]	; (800e90c <UART_EndRxTransfer+0xc8>)
 800e892:	4013      	ands	r3, r2
 800e894:	64bb      	str	r3, [r7, #72]	; 0x48
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	3308      	adds	r3, #8
 800e89c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e89e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e8a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8a6:	e841 2300 	strex	r3, r2, [r1]
 800e8aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d1e5      	bne.n	800e87e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8b6:	2b01      	cmp	r3, #1
 800e8b8:	d118      	bne.n	800e8ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	e853 3f00 	ldrex	r3, [r3]
 800e8c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	f023 0310 	bic.w	r3, r3, #16
 800e8ce:	647b      	str	r3, [r7, #68]	; 0x44
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e8d8:	61bb      	str	r3, [r7, #24]
 800e8da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8dc:	6979      	ldr	r1, [r7, #20]
 800e8de:	69ba      	ldr	r2, [r7, #24]
 800e8e0:	e841 2300 	strex	r3, r2, [r1]
 800e8e4:	613b      	str	r3, [r7, #16]
   return(result);
 800e8e6:	693b      	ldr	r3, [r7, #16]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d1e6      	bne.n	800e8ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2220      	movs	r2, #32
 800e8f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e900:	bf00      	nop
 800e902:	3754      	adds	r7, #84	; 0x54
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr
 800e90c:	effffffe 	.word	0xeffffffe

0800e910 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b090      	sub	sp, #64	; 0x40
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e91c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	69db      	ldr	r3, [r3, #28]
 800e922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e926:	d037      	beq.n	800e998 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800e928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e92a:	2200      	movs	r2, #0
 800e92c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	3308      	adds	r3, #8
 800e936:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93a:	e853 3f00 	ldrex	r3, [r3]
 800e93e:	623b      	str	r3, [r7, #32]
   return(result);
 800e940:	6a3b      	ldr	r3, [r7, #32]
 800e942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e946:	63bb      	str	r3, [r7, #56]	; 0x38
 800e948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	3308      	adds	r3, #8
 800e94e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e950:	633a      	str	r2, [r7, #48]	; 0x30
 800e952:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e954:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e958:	e841 2300 	strex	r3, r2, [r1]
 800e95c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e960:	2b00      	cmp	r3, #0
 800e962:	d1e5      	bne.n	800e930 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	e853 3f00 	ldrex	r3, [r3]
 800e970:	60fb      	str	r3, [r7, #12]
   return(result);
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e978:	637b      	str	r3, [r7, #52]	; 0x34
 800e97a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	461a      	mov	r2, r3
 800e980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e982:	61fb      	str	r3, [r7, #28]
 800e984:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e986:	69b9      	ldr	r1, [r7, #24]
 800e988:	69fa      	ldr	r2, [r7, #28]
 800e98a:	e841 2300 	strex	r3, r2, [r1]
 800e98e:	617b      	str	r3, [r7, #20]
   return(result);
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d1e6      	bne.n	800e964 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e996:	e002      	b.n	800e99e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800e998:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800e99a:	f7fe ff2b 	bl	800d7f4 <HAL_UART_TxCpltCallback>
}
 800e99e:	bf00      	nop
 800e9a0:	3740      	adds	r7, #64	; 0x40
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}

0800e9a6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e9a6:	b580      	push	{r7, lr}
 800e9a8:	b084      	sub	sp, #16
 800e9aa:	af00      	add	r7, sp, #0
 800e9ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800e9b4:	68f8      	ldr	r0, [r7, #12]
 800e9b6:	f7fe ff27 	bl	800d808 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e9ba:	bf00      	nop
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b09c      	sub	sp, #112	; 0x70
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ce:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	69db      	ldr	r3, [r3, #28]
 800e9d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e9d8:	d071      	beq.n	800eabe <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800e9da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9dc:	2200      	movs	r2, #0
 800e9de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e9e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9ea:	e853 3f00 	ldrex	r3, [r3]
 800e9ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e9f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e9f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800e9f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	461a      	mov	r2, r3
 800e9fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ea00:	65bb      	str	r3, [r7, #88]	; 0x58
 800ea02:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ea06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ea08:	e841 2300 	strex	r3, r2, [r1]
 800ea0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ea0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d1e6      	bne.n	800e9e2 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	3308      	adds	r3, #8
 800ea1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1e:	e853 3f00 	ldrex	r3, [r3]
 800ea22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ea24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea26:	f023 0301 	bic.w	r3, r3, #1
 800ea2a:	667b      	str	r3, [r7, #100]	; 0x64
 800ea2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	3308      	adds	r3, #8
 800ea32:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ea34:	647a      	str	r2, [r7, #68]	; 0x44
 800ea36:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea3c:	e841 2300 	strex	r3, r2, [r1]
 800ea40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d1e5      	bne.n	800ea14 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	3308      	adds	r3, #8
 800ea4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea52:	e853 3f00 	ldrex	r3, [r3]
 800ea56:	623b      	str	r3, [r7, #32]
   return(result);
 800ea58:	6a3b      	ldr	r3, [r7, #32]
 800ea5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea5e:	663b      	str	r3, [r7, #96]	; 0x60
 800ea60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	3308      	adds	r3, #8
 800ea66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ea68:	633a      	str	r2, [r7, #48]	; 0x30
 800ea6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea70:	e841 2300 	strex	r3, r2, [r1]
 800ea74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d1e5      	bne.n	800ea48 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ea7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea7e:	2220      	movs	r2, #32
 800ea80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ea84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea88:	2b01      	cmp	r3, #1
 800ea8a:	d118      	bne.n	800eabe <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	e853 3f00 	ldrex	r3, [r3]
 800ea98:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f023 0310 	bic.w	r3, r3, #16
 800eaa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800eaa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800eaaa:	61fb      	str	r3, [r7, #28]
 800eaac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eaae:	69b9      	ldr	r1, [r7, #24]
 800eab0:	69fa      	ldr	r2, [r7, #28]
 800eab2:	e841 2300 	strex	r3, r2, [r1]
 800eab6:	617b      	str	r3, [r7, #20]
   return(result);
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d1e6      	bne.n	800ea8c <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eabe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eac0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eac2:	2b01      	cmp	r3, #1
 800eac4:	d107      	bne.n	800ead6 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800eac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eac8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eacc:	4619      	mov	r1, r3
 800eace:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ead0:	f7f3 f86c 	bl	8001bac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ead4:	e002      	b.n	800eadc <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800ead6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ead8:	f7f4 ff72 	bl	80039c0 <HAL_UART_RxCpltCallback>
}
 800eadc:	bf00      	nop
 800eade:	3770      	adds	r7, #112	; 0x70
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b084      	sub	sp, #16
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaf0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eaf6:	2b01      	cmp	r3, #1
 800eaf8:	d109      	bne.n	800eb0e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800eb00:	085b      	lsrs	r3, r3, #1
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	4619      	mov	r1, r3
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	f7f3 f850 	bl	8001bac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800eb0c:	e002      	b.n	800eb14 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800eb0e:	68f8      	ldr	r0, [r7, #12]
 800eb10:	f7fe fe84 	bl	800d81c <HAL_UART_RxHalfCpltCallback>
}
 800eb14:	bf00      	nop
 800eb16:	3710      	adds	r7, #16
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b086      	sub	sp, #24
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb28:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb30:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb38:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	689b      	ldr	r3, [r3, #8]
 800eb40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb44:	2b80      	cmp	r3, #128	; 0x80
 800eb46:	d109      	bne.n	800eb5c <UART_DMAError+0x40>
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	2b21      	cmp	r3, #33	; 0x21
 800eb4c:	d106      	bne.n	800eb5c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	2200      	movs	r2, #0
 800eb52:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800eb56:	6978      	ldr	r0, [r7, #20]
 800eb58:	f7ff fe32 	bl	800e7c0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	689b      	ldr	r3, [r3, #8]
 800eb62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb66:	2b40      	cmp	r3, #64	; 0x40
 800eb68:	d109      	bne.n	800eb7e <UART_DMAError+0x62>
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	2b22      	cmp	r3, #34	; 0x22
 800eb6e:	d106      	bne.n	800eb7e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	2200      	movs	r2, #0
 800eb74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800eb78:	6978      	ldr	r0, [r7, #20]
 800eb7a:	f7ff fe63 	bl	800e844 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb84:	f043 0210 	orr.w	r2, r3, #16
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb8e:	6978      	ldr	r0, [r7, #20]
 800eb90:	f7fe fe4e 	bl	800d830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb94:	bf00      	nop
 800eb96:	3718      	adds	r7, #24
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b084      	sub	sp, #16
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eba8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2200      	movs	r2, #0
 800ebae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ebba:	68f8      	ldr	r0, [r7, #12]
 800ebbc:	f7fe fe38 	bl	800d830 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebc0:	bf00      	nop
 800ebc2:	3710      	adds	r7, #16
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b088      	sub	sp, #32
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	e853 3f00 	ldrex	r3, [r3]
 800ebdc:	60bb      	str	r3, [r7, #8]
   return(result);
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebe4:	61fb      	str	r3, [r7, #28]
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	461a      	mov	r2, r3
 800ebec:	69fb      	ldr	r3, [r7, #28]
 800ebee:	61bb      	str	r3, [r7, #24]
 800ebf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ebf2:	6979      	ldr	r1, [r7, #20]
 800ebf4:	69ba      	ldr	r2, [r7, #24]
 800ebf6:	e841 2300 	strex	r3, r2, [r1]
 800ebfa:	613b      	str	r3, [r7, #16]
   return(result);
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d1e6      	bne.n	800ebd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2220      	movs	r2, #32
 800ec06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f7fe fdef 	bl	800d7f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec16:	bf00      	nop
 800ec18:	3720      	adds	r7, #32
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ec1e:	b480      	push	{r7}
 800ec20:	b083      	sub	sp, #12
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ec26:	bf00      	nop
 800ec28:	370c      	adds	r7, #12
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr

0800ec32 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ec32:	b480      	push	{r7}
 800ec34:	b083      	sub	sp, #12
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ec3a:	bf00      	nop
 800ec3c:	370c      	adds	r7, #12
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr

0800ec46 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ec46:	b480      	push	{r7}
 800ec48:	b083      	sub	sp, #12
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ec4e:	bf00      	nop
 800ec50:	370c      	adds	r7, #12
 800ec52:	46bd      	mov	sp, r7
 800ec54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec58:	4770      	bx	lr

0800ec5a <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b084      	sub	sp, #16
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	d101      	bne.n	800ec70 <HAL_UARTEx_EnableFifoMode+0x16>
 800ec6c:	2302      	movs	r3, #2
 800ec6e:	e02b      	b.n	800ecc8 <HAL_UARTEx_EnableFifoMode+0x6e>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2201      	movs	r2, #1
 800ec74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2224      	movs	r2, #36	; 0x24
 800ec7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	681a      	ldr	r2, [r3, #0]
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f022 0201 	bic.w	r2, r2, #1
 800ec96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ec9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800eca6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 f91f 	bl	800eef4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2220      	movs	r2, #32
 800ecba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ecc6:	2300      	movs	r3, #0
}
 800ecc8:	4618      	mov	r0, r3
 800ecca:	3710      	adds	r7, #16
 800eccc:	46bd      	mov	sp, r7
 800ecce:	bd80      	pop	{r7, pc}

0800ecd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ecd0:	b480      	push	{r7}
 800ecd2:	b085      	sub	sp, #20
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d101      	bne.n	800ece6 <HAL_UARTEx_DisableFifoMode+0x16>
 800ece2:	2302      	movs	r3, #2
 800ece4:	e027      	b.n	800ed36 <HAL_UARTEx_DisableFifoMode+0x66>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2201      	movs	r2, #1
 800ecea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2224      	movs	r2, #36	; 0x24
 800ecf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	681a      	ldr	r2, [r3, #0]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	f022 0201 	bic.w	r2, r2, #1
 800ed0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ed14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	68fa      	ldr	r2, [r7, #12]
 800ed22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2220      	movs	r2, #32
 800ed28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed34:	2300      	movs	r3, #0
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3714      	adds	r7, #20
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr

0800ed42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ed42:	b580      	push	{r7, lr}
 800ed44:	b084      	sub	sp, #16
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
 800ed4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ed52:	2b01      	cmp	r3, #1
 800ed54:	d101      	bne.n	800ed5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ed56:	2302      	movs	r3, #2
 800ed58:	e02d      	b.n	800edb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2224      	movs	r2, #36	; 0x24
 800ed66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f022 0201 	bic.w	r2, r2, #1
 800ed80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	689b      	ldr	r3, [r3, #8]
 800ed88:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	683a      	ldr	r2, [r7, #0]
 800ed92:	430a      	orrs	r2, r1
 800ed94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 f8ac 	bl	800eef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	68fa      	ldr	r2, [r7, #12]
 800eda2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2220      	movs	r2, #32
 800eda8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800edb4:	2300      	movs	r3, #0
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	3710      	adds	r7, #16
 800edba:	46bd      	mov	sp, r7
 800edbc:	bd80      	pop	{r7, pc}

0800edbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800edbe:	b580      	push	{r7, lr}
 800edc0:	b084      	sub	sp, #16
 800edc2:	af00      	add	r7, sp, #0
 800edc4:	6078      	str	r0, [r7, #4]
 800edc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800edce:	2b01      	cmp	r3, #1
 800edd0:	d101      	bne.n	800edd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800edd2:	2302      	movs	r3, #2
 800edd4:	e02d      	b.n	800ee32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2201      	movs	r2, #1
 800edda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2224      	movs	r2, #36	; 0x24
 800ede2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	f022 0201 	bic.w	r2, r2, #1
 800edfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	689b      	ldr	r3, [r3, #8]
 800ee04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	683a      	ldr	r2, [r7, #0]
 800ee0e:	430a      	orrs	r2, r1
 800ee10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f000 f86e 	bl	800eef4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	68fa      	ldr	r2, [r7, #12]
 800ee1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2220      	movs	r2, #32
 800ee24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ee30:	2300      	movs	r3, #0
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3710      	adds	r7, #16
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}

0800ee3a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ee3a:	b580      	push	{r7, lr}
 800ee3c:	b08c      	sub	sp, #48	; 0x30
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	60f8      	str	r0, [r7, #12]
 800ee42:	60b9      	str	r1, [r7, #8]
 800ee44:	4613      	mov	r3, r2
 800ee46:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee4e:	2b20      	cmp	r3, #32
 800ee50:	d14a      	bne.n	800eee8 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d002      	beq.n	800ee5e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800ee58:	88fb      	ldrh	r3, [r7, #6]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d101      	bne.n	800ee62 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800ee5e:	2301      	movs	r3, #1
 800ee60:	e043      	b.n	800eeea <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d101      	bne.n	800ee70 <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800ee6c:	2302      	movs	r3, #2
 800ee6e:	e03c      	b.n	800eeea <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2201      	movs	r2, #1
 800ee74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ee7e:	88fb      	ldrh	r3, [r7, #6]
 800ee80:	461a      	mov	r2, r3
 800ee82:	68b9      	ldr	r1, [r7, #8]
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	f7ff fbf3 	bl	800e670 <UART_Start_Receive_DMA>
 800ee8a:	4603      	mov	r3, r0
 800ee8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800ee90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d124      	bne.n	800eee2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d11d      	bne.n	800eedc <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	2210      	movs	r2, #16
 800eea6:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	e853 3f00 	ldrex	r3, [r3]
 800eeb4:	617b      	str	r3, [r7, #20]
   return(result);
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	f043 0310 	orr.w	r3, r3, #16
 800eebc:	62bb      	str	r3, [r7, #40]	; 0x28
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	461a      	mov	r2, r3
 800eec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec6:	627b      	str	r3, [r7, #36]	; 0x24
 800eec8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800eeca:	6a39      	ldr	r1, [r7, #32]
 800eecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eece:	e841 2300 	strex	r3, r2, [r1]
 800eed2:	61fb      	str	r3, [r7, #28]
   return(result);
 800eed4:	69fb      	ldr	r3, [r7, #28]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d1e6      	bne.n	800eea8 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800eeda:	e002      	b.n	800eee2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800eedc:	2301      	movs	r3, #1
 800eede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800eee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eee6:	e000      	b.n	800eeea <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800eee8:	2302      	movs	r3, #2
  }
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3730      	adds	r7, #48	; 0x30
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
	...

0800eef4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800eef4:	b480      	push	{r7}
 800eef6:	b085      	sub	sp, #20
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d108      	bne.n	800ef16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	2201      	movs	r2, #1
 800ef08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2201      	movs	r2, #1
 800ef10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ef14:	e031      	b.n	800ef7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ef16:	2310      	movs	r3, #16
 800ef18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ef1a:	2310      	movs	r3, #16
 800ef1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	689b      	ldr	r3, [r3, #8]
 800ef24:	0e5b      	lsrs	r3, r3, #25
 800ef26:	b2db      	uxtb	r3, r3
 800ef28:	f003 0307 	and.w	r3, r3, #7
 800ef2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	689b      	ldr	r3, [r3, #8]
 800ef34:	0f5b      	lsrs	r3, r3, #29
 800ef36:	b2db      	uxtb	r3, r3
 800ef38:	f003 0307 	and.w	r3, r3, #7
 800ef3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ef3e:	7bbb      	ldrb	r3, [r7, #14]
 800ef40:	7b3a      	ldrb	r2, [r7, #12]
 800ef42:	4911      	ldr	r1, [pc, #68]	; (800ef88 <UARTEx_SetNbDataToProcess+0x94>)
 800ef44:	5c8a      	ldrb	r2, [r1, r2]
 800ef46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ef4a:	7b3a      	ldrb	r2, [r7, #12]
 800ef4c:	490f      	ldr	r1, [pc, #60]	; (800ef8c <UARTEx_SetNbDataToProcess+0x98>)
 800ef4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ef50:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef54:	b29a      	uxth	r2, r3
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ef5c:	7bfb      	ldrb	r3, [r7, #15]
 800ef5e:	7b7a      	ldrb	r2, [r7, #13]
 800ef60:	4909      	ldr	r1, [pc, #36]	; (800ef88 <UARTEx_SetNbDataToProcess+0x94>)
 800ef62:	5c8a      	ldrb	r2, [r1, r2]
 800ef64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ef68:	7b7a      	ldrb	r2, [r7, #13]
 800ef6a:	4908      	ldr	r1, [pc, #32]	; (800ef8c <UARTEx_SetNbDataToProcess+0x98>)
 800ef6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ef6e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ef72:	b29a      	uxth	r2, r3
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ef7a:	bf00      	nop
 800ef7c:	3714      	adds	r7, #20
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef84:	4770      	bx	lr
 800ef86:	bf00      	nop
 800ef88:	08012650 	.word	0x08012650
 800ef8c:	08012658 	.word	0x08012658

0800ef90 <sinf_poly>:
 800ef90:	07cb      	lsls	r3, r1, #31
 800ef92:	d412      	bmi.n	800efba <sinf_poly+0x2a>
 800ef94:	ee21 6b00 	vmul.f64	d6, d1, d0
 800ef98:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800ef9c:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800efa0:	eea5 7b01 	vfma.f64	d7, d5, d1
 800efa4:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800efa8:	ee21 1b06 	vmul.f64	d1, d1, d6
 800efac:	eea5 0b06 	vfma.f64	d0, d5, d6
 800efb0:	eea7 0b01 	vfma.f64	d0, d7, d1
 800efb4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800efb8:	4770      	bx	lr
 800efba:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800efbe:	ee21 6b01 	vmul.f64	d6, d1, d1
 800efc2:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800efc6:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800efca:	eea1 7b05 	vfma.f64	d7, d1, d5
 800efce:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800efd2:	eea1 0b05 	vfma.f64	d0, d1, d5
 800efd6:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800efda:	ee21 1b06 	vmul.f64	d1, d1, d6
 800efde:	eea6 0b05 	vfma.f64	d0, d6, d5
 800efe2:	e7e5      	b.n	800efb0 <sinf_poly+0x20>
 800efe4:	0000      	movs	r0, r0
	...

0800efe8 <cosf>:
 800efe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efea:	ee10 4a10 	vmov	r4, s0
 800efee:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800eff2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800eff6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800effa:	d20c      	bcs.n	800f016 <cosf+0x2e>
 800effc:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f000:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800f004:	d378      	bcc.n	800f0f8 <cosf+0x110>
 800f006:	eeb0 0b46 	vmov.f64	d0, d6
 800f00a:	483f      	ldr	r0, [pc, #252]	; (800f108 <cosf+0x120>)
 800f00c:	2101      	movs	r1, #1
 800f00e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f012:	f7ff bfbd 	b.w	800ef90 <sinf_poly>
 800f016:	f240 422e 	movw	r2, #1070	; 0x42e
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d826      	bhi.n	800f06c <cosf+0x84>
 800f01e:	4b3a      	ldr	r3, [pc, #232]	; (800f108 <cosf+0x120>)
 800f020:	ed93 7b08 	vldr	d7, [r3, #32]
 800f024:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f028:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f02c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800f030:	ee17 1a90 	vmov	r1, s15
 800f034:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800f038:	1609      	asrs	r1, r1, #24
 800f03a:	ee07 1a90 	vmov	s15, r1
 800f03e:	f001 0203 	and.w	r2, r1, #3
 800f042:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f046:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800f04a:	ed92 0b00 	vldr	d0, [r2]
 800f04e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800f052:	f011 0f02 	tst.w	r1, #2
 800f056:	eea5 6b47 	vfms.f64	d6, d5, d7
 800f05a:	f081 0101 	eor.w	r1, r1, #1
 800f05e:	bf08      	it	eq
 800f060:	4618      	moveq	r0, r3
 800f062:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f066:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f06a:	e7d0      	b.n	800f00e <cosf+0x26>
 800f06c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800f070:	d23e      	bcs.n	800f0f0 <cosf+0x108>
 800f072:	4b26      	ldr	r3, [pc, #152]	; (800f10c <cosf+0x124>)
 800f074:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800f078:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800f07c:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800f080:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800f084:	6a06      	ldr	r6, [r0, #32]
 800f086:	6900      	ldr	r0, [r0, #16]
 800f088:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800f08c:	40a9      	lsls	r1, r5
 800f08e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f092:	fba1 6706 	umull	r6, r7, r1, r6
 800f096:	fb05 f301 	mul.w	r3, r5, r1
 800f09a:	463a      	mov	r2, r7
 800f09c:	fbe0 2301 	umlal	r2, r3, r0, r1
 800f0a0:	1c11      	adds	r1, r2, #0
 800f0a2:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	1a10      	subs	r0, r2, r0
 800f0aa:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800f0ae:	eb63 0101 	sbc.w	r1, r3, r1
 800f0b2:	f7f1 fafb 	bl	80006ac <__aeabi_l2d>
 800f0b6:	0fb5      	lsrs	r5, r6, #30
 800f0b8:	4b13      	ldr	r3, [pc, #76]	; (800f108 <cosf+0x120>)
 800f0ba:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800f0be:	ed9f 0b10 	vldr	d0, [pc, #64]	; 800f100 <cosf+0x118>
 800f0c2:	ec41 0b17 	vmov	d7, r0, r1
 800f0c6:	f004 0203 	and.w	r2, r4, #3
 800f0ca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f0ce:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f0d2:	ed92 7b00 	vldr	d7, [r2]
 800f0d6:	ee20 1b00 	vmul.f64	d1, d0, d0
 800f0da:	f014 0f02 	tst.w	r4, #2
 800f0de:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800f0e2:	f085 0101 	eor.w	r1, r5, #1
 800f0e6:	bf08      	it	eq
 800f0e8:	4618      	moveq	r0, r3
 800f0ea:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f0ee:	e78e      	b.n	800f00e <cosf+0x26>
 800f0f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f0f4:	f000 b817 	b.w	800f126 <__math_invalidf>
 800f0f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f0fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f0fe:	bf00      	nop
 800f100:	54442d18 	.word	0x54442d18
 800f104:	3c1921fb 	.word	0x3c1921fb
 800f108:	08013708 	.word	0x08013708
 800f10c:	080136a8 	.word	0x080136a8

0800f110 <with_errnof>:
 800f110:	b513      	push	{r0, r1, r4, lr}
 800f112:	4604      	mov	r4, r0
 800f114:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f118:	f000 fdee 	bl	800fcf8 <__errno>
 800f11c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800f120:	6004      	str	r4, [r0, #0]
 800f122:	b002      	add	sp, #8
 800f124:	bd10      	pop	{r4, pc}

0800f126 <__math_invalidf>:
 800f126:	eef0 7a40 	vmov.f32	s15, s0
 800f12a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f12e:	eef4 7a67 	vcmp.f32	s15, s15
 800f132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f136:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800f13a:	d602      	bvs.n	800f142 <__math_invalidf+0x1c>
 800f13c:	2021      	movs	r0, #33	; 0x21
 800f13e:	f7ff bfe7 	b.w	800f110 <with_errnof>
 800f142:	4770      	bx	lr

0800f144 <checkint>:
 800f144:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f148:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800f14c:	429a      	cmp	r2, r3
 800f14e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f150:	dd2b      	ble.n	800f1aa <checkint+0x66>
 800f152:	f240 4333 	movw	r3, #1075	; 0x433
 800f156:	429a      	cmp	r2, r3
 800f158:	dc25      	bgt.n	800f1a6 <checkint+0x62>
 800f15a:	1a9b      	subs	r3, r3, r2
 800f15c:	f1a3 0620 	sub.w	r6, r3, #32
 800f160:	f04f 32ff 	mov.w	r2, #4294967295
 800f164:	fa02 f606 	lsl.w	r6, r2, r6
 800f168:	fa02 f403 	lsl.w	r4, r2, r3
 800f16c:	f1c3 0520 	rsb	r5, r3, #32
 800f170:	4334      	orrs	r4, r6
 800f172:	fa22 f505 	lsr.w	r5, r2, r5
 800f176:	432c      	orrs	r4, r5
 800f178:	409a      	lsls	r2, r3
 800f17a:	ea20 0602 	bic.w	r6, r0, r2
 800f17e:	ea21 0704 	bic.w	r7, r1, r4
 800f182:	ea56 0207 	orrs.w	r2, r6, r7
 800f186:	f1a3 0420 	sub.w	r4, r3, #32
 800f18a:	f1c3 0220 	rsb	r2, r3, #32
 800f18e:	d10c      	bne.n	800f1aa <checkint+0x66>
 800f190:	40d8      	lsrs	r0, r3
 800f192:	fa01 f302 	lsl.w	r3, r1, r2
 800f196:	4318      	orrs	r0, r3
 800f198:	40e1      	lsrs	r1, r4
 800f19a:	4308      	orrs	r0, r1
 800f19c:	f000 0301 	and.w	r3, r0, #1
 800f1a0:	f1c3 0002 	rsb	r0, r3, #2
 800f1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f1a6:	2002      	movs	r0, #2
 800f1a8:	e7fc      	b.n	800f1a4 <checkint+0x60>
 800f1aa:	2000      	movs	r0, #0
 800f1ac:	e7fa      	b.n	800f1a4 <checkint+0x60>
	...

0800f1b0 <pow>:
 800f1b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1b4:	ed2d 8b0a 	vpush	{d8-d12}
 800f1b8:	b09b      	sub	sp, #108	; 0x6c
 800f1ba:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f1be:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f1c2:	ed8d 1b00 	vstr	d1, [sp]
 800f1c6:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800f1ca:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f1ce:	f109 30ff 	add.w	r0, r9, #4294967295
 800f1d2:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800f1d6:	4288      	cmp	r0, r1
 800f1d8:	46cc      	mov	ip, r9
 800f1da:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800f1de:	d806      	bhi.n	800f1ee <pow+0x3e>
 800f1e0:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800f1e4:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800f1e8:	297f      	cmp	r1, #127	; 0x7f
 800f1ea:	f240 81ab 	bls.w	800f544 <pow+0x394>
 800f1ee:	19b1      	adds	r1, r6, r6
 800f1f0:	9104      	str	r1, [sp, #16]
 800f1f2:	eb47 0107 	adc.w	r1, r7, r7
 800f1f6:	9105      	str	r1, [sp, #20]
 800f1f8:	9904      	ldr	r1, [sp, #16]
 800f1fa:	f111 31ff 	adds.w	r1, r1, #4294967295
 800f1fe:	460a      	mov	r2, r1
 800f200:	9905      	ldr	r1, [sp, #20]
 800f202:	f141 31ff 	adc.w	r1, r1, #4294967295
 800f206:	460b      	mov	r3, r1
 800f208:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800f20c:	f06f 0001 	mvn.w	r0, #1
 800f210:	4299      	cmp	r1, r3
 800f212:	bf08      	it	eq
 800f214:	4290      	cmpeq	r0, r2
 800f216:	d260      	bcs.n	800f2da <pow+0x12a>
 800f218:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f21c:	4313      	orrs	r3, r2
 800f21e:	d11a      	bne.n	800f256 <pow+0xa6>
 800f220:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800f224:	1923      	adds	r3, r4, r4
 800f226:	930c      	str	r3, [sp, #48]	; 0x30
 800f228:	eb42 0302 	adc.w	r3, r2, r2
 800f22c:	930d      	str	r3, [sp, #52]	; 0x34
 800f22e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f232:	4bcf      	ldr	r3, [pc, #828]	; (800f570 <pow+0x3c0>)
 800f234:	2200      	movs	r2, #0
 800f236:	428b      	cmp	r3, r1
 800f238:	bf08      	it	eq
 800f23a:	4282      	cmpeq	r2, r0
 800f23c:	f080 8265 	bcs.w	800f70a <pow+0x55a>
 800f240:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f244:	ed9d 6b00 	vldr	d6, [sp]
 800f248:	ee37 0b06 	vadd.f64	d0, d7, d6
 800f24c:	b01b      	add	sp, #108	; 0x6c
 800f24e:	ecbd 8b0a 	vpop	{d8-d12}
 800f252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f256:	49c7      	ldr	r1, [pc, #796]	; (800f574 <pow+0x3c4>)
 800f258:	2000      	movs	r0, #0
 800f25a:	428d      	cmp	r5, r1
 800f25c:	bf08      	it	eq
 800f25e:	4284      	cmpeq	r4, r0
 800f260:	d10b      	bne.n	800f27a <pow+0xca>
 800f262:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f266:	19b3      	adds	r3, r6, r6
 800f268:	930e      	str	r3, [sp, #56]	; 0x38
 800f26a:	eb42 0302 	adc.w	r3, r2, r2
 800f26e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f270:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800f274:	4bbe      	ldr	r3, [pc, #760]	; (800f570 <pow+0x3c0>)
 800f276:	2200      	movs	r2, #0
 800f278:	e7dd      	b.n	800f236 <pow+0x86>
 800f27a:	1921      	adds	r1, r4, r4
 800f27c:	9106      	str	r1, [sp, #24]
 800f27e:	eb45 0105 	adc.w	r1, r5, r5
 800f282:	9107      	str	r1, [sp, #28]
 800f284:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f288:	49bb      	ldr	r1, [pc, #748]	; (800f578 <pow+0x3c8>)
 800f28a:	2000      	movs	r0, #0
 800f28c:	42a1      	cmp	r1, r4
 800f28e:	bf08      	it	eq
 800f290:	4298      	cmpeq	r0, r3
 800f292:	d3d5      	bcc.n	800f240 <pow+0x90>
 800f294:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800f298:	428c      	cmp	r4, r1
 800f29a:	bf08      	it	eq
 800f29c:	4283      	cmpeq	r3, r0
 800f29e:	d1cf      	bne.n	800f240 <pow+0x90>
 800f2a0:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800f2a4:	49b5      	ldr	r1, [pc, #724]	; (800f57c <pow+0x3cc>)
 800f2a6:	2000      	movs	r0, #0
 800f2a8:	428c      	cmp	r4, r1
 800f2aa:	bf08      	it	eq
 800f2ac:	4283      	cmpeq	r3, r0
 800f2ae:	f000 822c 	beq.w	800f70a <pow+0x55a>
 800f2b2:	49b3      	ldr	r1, [pc, #716]	; (800f580 <pow+0x3d0>)
 800f2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2b8:	42a1      	cmp	r1, r4
 800f2ba:	bf08      	it	eq
 800f2bc:	4298      	cmpeq	r0, r3
 800f2be:	ea6f 0307 	mvn.w	r3, r7
 800f2c2:	bf34      	ite	cc
 800f2c4:	2201      	movcc	r2, #1
 800f2c6:	2200      	movcs	r2, #0
 800f2c8:	0fdb      	lsrs	r3, r3, #31
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	f040 821a 	bne.w	800f704 <pow+0x554>
 800f2d0:	ed9d 7b00 	vldr	d7, [sp]
 800f2d4:	ee27 0b07 	vmul.f64	d0, d7, d7
 800f2d8:	e7b8      	b.n	800f24c <pow+0x9c>
 800f2da:	1923      	adds	r3, r4, r4
 800f2dc:	9308      	str	r3, [sp, #32]
 800f2de:	eb45 0305 	adc.w	r3, r5, r5
 800f2e2:	9309      	str	r3, [sp, #36]	; 0x24
 800f2e4:	9b08      	ldr	r3, [sp, #32]
 800f2e6:	f113 33ff 	adds.w	r3, r3, #4294967295
 800f2ea:	9310      	str	r3, [sp, #64]	; 0x40
 800f2ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2ee:	f143 33ff 	adc.w	r3, r3, #4294967295
 800f2f2:	9311      	str	r3, [sp, #68]	; 0x44
 800f2f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f2f8:	4299      	cmp	r1, r3
 800f2fa:	bf08      	it	eq
 800f2fc:	4290      	cmpeq	r0, r2
 800f2fe:	d22d      	bcs.n	800f35c <pow+0x1ac>
 800f300:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f304:	2c00      	cmp	r4, #0
 800f306:	f175 0300 	sbcs.w	r3, r5, #0
 800f30a:	ee27 0b07 	vmul.f64	d0, d7, d7
 800f30e:	da16      	bge.n	800f33e <pow+0x18e>
 800f310:	4630      	mov	r0, r6
 800f312:	4639      	mov	r1, r7
 800f314:	f7ff ff16 	bl	800f144 <checkint>
 800f318:	2801      	cmp	r0, #1
 800f31a:	d110      	bne.n	800f33e <pow+0x18e>
 800f31c:	eeb1 0b40 	vneg.f64	d0, d0
 800f320:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800f324:	4323      	orrs	r3, r4
 800f326:	d10c      	bne.n	800f342 <pow+0x192>
 800f328:	2e00      	cmp	r6, #0
 800f32a:	f177 0300 	sbcs.w	r3, r7, #0
 800f32e:	da8d      	bge.n	800f24c <pow+0x9c>
 800f330:	b01b      	add	sp, #108	; 0x6c
 800f332:	ecbd 8b0a 	vpop	{d8-d12}
 800f336:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f33a:	f000 bbbd 	b.w	800fab8 <__math_divzero>
 800f33e:	2000      	movs	r0, #0
 800f340:	e7ee      	b.n	800f320 <pow+0x170>
 800f342:	2e00      	cmp	r6, #0
 800f344:	f177 0300 	sbcs.w	r3, r7, #0
 800f348:	da80      	bge.n	800f24c <pow+0x9c>
 800f34a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f34e:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800f352:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800f356:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800f35a:	e777      	b.n	800f24c <pow+0x9c>
 800f35c:	2c00      	cmp	r4, #0
 800f35e:	f175 0300 	sbcs.w	r3, r5, #0
 800f362:	da35      	bge.n	800f3d0 <pow+0x220>
 800f364:	4630      	mov	r0, r6
 800f366:	4639      	mov	r1, r7
 800f368:	f7ff feec 	bl	800f144 <checkint>
 800f36c:	b940      	cbnz	r0, 800f380 <pow+0x1d0>
 800f36e:	ed9d 0b02 	vldr	d0, [sp, #8]
 800f372:	b01b      	add	sp, #108	; 0x6c
 800f374:	ecbd 8b0a 	vpop	{d8-d12}
 800f378:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f37c:	f000 bbb4 	b.w	800fae8 <__math_invalid>
 800f380:	2801      	cmp	r0, #1
 800f382:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f386:	bf14      	ite	ne
 800f388:	2000      	movne	r0, #0
 800f38a:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800f38e:	461d      	mov	r5, r3
 800f390:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800f394:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800f398:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800f39c:	2a7f      	cmp	r2, #127	; 0x7f
 800f39e:	d933      	bls.n	800f408 <pow+0x258>
 800f3a0:	4974      	ldr	r1, [pc, #464]	; (800f574 <pow+0x3c4>)
 800f3a2:	2000      	movs	r0, #0
 800f3a4:	428d      	cmp	r5, r1
 800f3a6:	bf08      	it	eq
 800f3a8:	4284      	cmpeq	r4, r0
 800f3aa:	f000 81ae 	beq.w	800f70a <pow+0x55a>
 800f3ae:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d80e      	bhi.n	800f3d4 <pow+0x224>
 800f3b6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f3ba:	ed9d 7b00 	vldr	d7, [sp]
 800f3be:	42a9      	cmp	r1, r5
 800f3c0:	bf08      	it	eq
 800f3c2:	42a0      	cmpeq	r0, r4
 800f3c4:	bf34      	ite	cc
 800f3c6:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800f3ca:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800f3ce:	e73d      	b.n	800f24c <pow+0x9c>
 800f3d0:	2000      	movs	r0, #0
 800f3d2:	e7df      	b.n	800f394 <pow+0x1e4>
 800f3d4:	42a9      	cmp	r1, r5
 800f3d6:	bf08      	it	eq
 800f3d8:	42a0      	cmpeq	r0, r4
 800f3da:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f3de:	bf2c      	ite	cs
 800f3e0:	2301      	movcs	r3, #1
 800f3e2:	2300      	movcc	r3, #0
 800f3e4:	4590      	cmp	r8, r2
 800f3e6:	bf8c      	ite	hi
 800f3e8:	f04f 0800 	movhi.w	r8, #0
 800f3ec:	f04f 0801 	movls.w	r8, #1
 800f3f0:	4543      	cmp	r3, r8
 800f3f2:	f04f 0000 	mov.w	r0, #0
 800f3f6:	f000 80af 	beq.w	800f558 <pow+0x3a8>
 800f3fa:	b01b      	add	sp, #108	; 0x6c
 800f3fc:	ecbd 8b0a 	vpop	{d8-d12}
 800f400:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f404:	f000 bb50 	b.w	800faa8 <__math_oflow>
 800f408:	f1bc 0f00 	cmp.w	ip, #0
 800f40c:	d10e      	bne.n	800f42c <pow+0x27c>
 800f40e:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800f568 <pow+0x3b8>
 800f412:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f416:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f41a:	ec57 6b17 	vmov	r6, r7, d7
 800f41e:	4b59      	ldr	r3, [pc, #356]	; (800f584 <pow+0x3d4>)
 800f420:	2100      	movs	r1, #0
 800f422:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800f426:	1874      	adds	r4, r6, r1
 800f428:	eb42 0503 	adc.w	r5, r2, r3
 800f42c:	2300      	movs	r3, #0
 800f42e:	18e3      	adds	r3, r4, r3
 800f430:	4b55      	ldr	r3, [pc, #340]	; (800f588 <pow+0x3d8>)
 800f432:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800f436:	eb45 0303 	adc.w	r3, r5, r3
 800f43a:	1519      	asrs	r1, r3, #20
 800f43c:	ee03 1a10 	vmov	s6, r1
 800f440:	0d1e      	lsrs	r6, r3, #20
 800f442:	2100      	movs	r1, #0
 800f444:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800f448:	0536      	lsls	r6, r6, #20
 800f44a:	1a63      	subs	r3, r4, r1
 800f44c:	9312      	str	r3, [sp, #72]	; 0x48
 800f44e:	eb65 0306 	sbc.w	r3, r5, r6
 800f452:	9313      	str	r3, [sp, #76]	; 0x4c
 800f454:	4b4d      	ldr	r3, [pc, #308]	; (800f58c <pow+0x3dc>)
 800f456:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800f45a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800f45e:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800f462:	eea5 6b07 	vfma.f64	d6, d5, d7
 800f466:	ed93 7b00 	vldr	d7, [r3]
 800f46a:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800f46e:	ed93 4b02 	vldr	d4, [r3, #8]
 800f472:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800f476:	eea3 5b07 	vfma.f64	d5, d3, d7
 800f47a:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800f47e:	ee36 9b05 	vadd.f64	d9, d6, d5
 800f482:	ee35 5b49 	vsub.f64	d5, d5, d9
 800f486:	eea3 7b04 	vfma.f64	d7, d3, d4
 800f48a:	ed93 4b04 	vldr	d4, [r3, #16]
 800f48e:	ee35 5b06 	vadd.f64	d5, d5, d6
 800f492:	ee37 7b05 	vadd.f64	d7, d7, d5
 800f496:	ee26 4b04 	vmul.f64	d4, d6, d4
 800f49a:	ed93 3b08 	vldr	d3, [r3, #32]
 800f49e:	ee26 0b04 	vmul.f64	d0, d6, d4
 800f4a2:	eeb0 8b40 	vmov.f64	d8, d0
 800f4a6:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800f4aa:	ed93 4b06 	vldr	d4, [r3, #24]
 800f4ae:	ee26 ab00 	vmul.f64	d10, d6, d0
 800f4b2:	ee39 1b00 	vadd.f64	d1, d9, d0
 800f4b6:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800f4ba:	eea6 4b03 	vfma.f64	d4, d6, d3
 800f4be:	ee39 9b41 	vsub.f64	d9, d9, d1
 800f4c2:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800f4c6:	ee37 8b08 	vadd.f64	d8, d7, d8
 800f4ca:	ee39 9b00 	vadd.f64	d9, d9, d0
 800f4ce:	eea6 3b02 	vfma.f64	d3, d6, d2
 800f4d2:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800f4d6:	ee38 9b09 	vadd.f64	d9, d8, d9
 800f4da:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800f4de:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800f4e2:	ed9d 6b00 	vldr	d6, [sp]
 800f4e6:	eea0 3b02 	vfma.f64	d3, d0, d2
 800f4ea:	eea0 4b03 	vfma.f64	d4, d0, d3
 800f4ee:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800f4f2:	ee31 7b09 	vadd.f64	d7, d1, d9
 800f4f6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f4fa:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f4fe:	eeb0 3b46 	vmov.f64	d3, d6
 800f502:	ee31 1b47 	vsub.f64	d1, d1, d7
 800f506:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f50a:	ee31 9b09 	vadd.f64	d9, d1, d9
 800f50e:	ed9d 6b00 	vldr	d6, [sp]
 800f512:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800f516:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800f51a:	193c      	adds	r4, r7, r4
 800f51c:	2c3e      	cmp	r4, #62	; 0x3e
 800f51e:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800f522:	eea6 3b09 	vfma.f64	d3, d6, d9
 800f526:	d934      	bls.n	800f592 <pow+0x3e2>
 800f528:	428c      	cmp	r4, r1
 800f52a:	da0d      	bge.n	800f548 <pow+0x398>
 800f52c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f530:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f534:	ee37 0b00 	vadd.f64	d0, d7, d0
 800f538:	2800      	cmp	r0, #0
 800f53a:	f43f ae87 	beq.w	800f24c <pow+0x9c>
 800f53e:	eeb1 0b40 	vneg.f64	d0, d0
 800f542:	e683      	b.n	800f24c <pow+0x9c>
 800f544:	2000      	movs	r0, #0
 800f546:	e771      	b.n	800f42c <pow+0x27c>
 800f548:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800f54c:	d920      	bls.n	800f590 <pow+0x3e0>
 800f54e:	2a00      	cmp	r2, #0
 800f550:	f173 0300 	sbcs.w	r3, r3, #0
 800f554:	f6bf af51 	bge.w	800f3fa <pow+0x24a>
 800f558:	b01b      	add	sp, #108	; 0x6c
 800f55a:	ecbd 8b0a 	vpop	{d8-d12}
 800f55e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f562:	f000 ba99 	b.w	800fa98 <__math_uflow>
 800f566:	bf00      	nop
 800f568:	00000000 	.word	0x00000000
 800f56c:	43300000 	.word	0x43300000
 800f570:	fff00000 	.word	0xfff00000
 800f574:	3ff00000 	.word	0x3ff00000
 800f578:	ffe00000 	.word	0xffe00000
 800f57c:	7fe00000 	.word	0x7fe00000
 800f580:	7fdfffff 	.word	0x7fdfffff
 800f584:	fcc00000 	.word	0xfcc00000
 800f588:	c0196aab 	.word	0xc0196aab
 800f58c:	08012660 	.word	0x08012660
 800f590:	460f      	mov	r7, r1
 800f592:	4e65      	ldr	r6, [pc, #404]	; (800f728 <pow+0x578>)
 800f594:	ed9d 4b02 	vldr	d4, [sp, #8]
 800f598:	ed96 6b02 	vldr	d6, [r6, #8]
 800f59c:	ed96 7b00 	vldr	d7, [r6]
 800f5a0:	eeb0 5b46 	vmov.f64	d5, d6
 800f5a4:	eea4 5b07 	vfma.f64	d5, d4, d7
 800f5a8:	ed8d 5b00 	vstr	d5, [sp]
 800f5ac:	ee35 6b46 	vsub.f64	d6, d5, d6
 800f5b0:	eeb0 5b44 	vmov.f64	d5, d4
 800f5b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5b8:	ed96 7b04 	vldr	d7, [r6, #16]
 800f5bc:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800f5c0:	eea6 5b07 	vfma.f64	d5, d6, d7
 800f5c4:	eeb0 7b45 	vmov.f64	d7, d5
 800f5c8:	ed96 5b06 	vldr	d5, [r6, #24]
 800f5cc:	1849      	adds	r1, r1, r1
 800f5ce:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800f5d2:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800f5d6:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f5da:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800f5de:	ee33 3b07 	vadd.f64	d3, d3, d7
 800f5e2:	ee23 6b03 	vmul.f64	d6, d3, d3
 800f5e6:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800f5ea:	ed96 5b08 	vldr	d5, [r6, #32]
 800f5ee:	ee33 7b07 	vadd.f64	d7, d3, d7
 800f5f2:	1814      	adds	r4, r2, r0
 800f5f4:	0365      	lsls	r5, r4, #13
 800f5f6:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800f5fa:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f5fe:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f602:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800f606:	ee26 6b06 	vmul.f64	d6, d6, d6
 800f60a:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800f60e:	2000      	movs	r0, #0
 800f610:	eb10 0a04 	adds.w	sl, r0, r4
 800f614:	eea3 5b04 	vfma.f64	d5, d3, d4
 800f618:	eb45 0b0c 	adc.w	fp, r5, ip
 800f61c:	eea6 7b05 	vfma.f64	d7, d6, d5
 800f620:	2f00      	cmp	r7, #0
 800f622:	d16a      	bne.n	800f6fa <pow+0x54a>
 800f624:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800f628:	4639      	mov	r1, r7
 800f62a:	ea50 0301 	orrs.w	r3, r0, r1
 800f62e:	f04f 0300 	mov.w	r3, #0
 800f632:	d115      	bne.n	800f660 <pow+0x4b0>
 800f634:	eb1a 0303 	adds.w	r3, sl, r3
 800f638:	ee0b 3a10 	vmov	s22, r3
 800f63c:	4b3b      	ldr	r3, [pc, #236]	; (800f72c <pow+0x57c>)
 800f63e:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800f710 <pow+0x560>
 800f642:	eb4b 0303 	adc.w	r3, fp, r3
 800f646:	ee0b 3a90 	vmov	s23, r3
 800f64a:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800f64e:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800f652:	b01b      	add	sp, #108	; 0x6c
 800f654:	ecbd 8b0a 	vpop	{d8-d12}
 800f658:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f65c:	f000 ba5c 	b.w	800fb18 <__math_check_oflow>
 800f660:	eb1a 0303 	adds.w	r3, sl, r3
 800f664:	930a      	str	r3, [sp, #40]	; 0x28
 800f666:	4b32      	ldr	r3, [pc, #200]	; (800f730 <pow+0x580>)
 800f668:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800f66c:	eb4b 0303 	adc.w	r3, fp, r3
 800f670:	930b      	str	r3, [sp, #44]	; 0x2c
 800f672:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800f676:	ee27 6b05 	vmul.f64	d6, d7, d5
 800f67a:	ee35 7b06 	vadd.f64	d7, d5, d6
 800f67e:	eeb0 3bc7 	vabs.f64	d3, d7
 800f682:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800f686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f68a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800f718 <pow+0x568>
 800f68e:	d52b      	bpl.n	800f6e8 <pow+0x538>
 800f690:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f694:	ee35 5b47 	vsub.f64	d5, d5, d7
 800f698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f69c:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800f6a0:	ee35 6b06 	vadd.f64	d6, d5, d6
 800f6a4:	bf48      	it	mi
 800f6a6:	eeb0 4b43 	vmovmi.f64	d4, d3
 800f6aa:	ee37 3b04 	vadd.f64	d3, d7, d4
 800f6ae:	ee34 5b43 	vsub.f64	d5, d4, d3
 800f6b2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f6b6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f6ba:	ee37 7b03 	vadd.f64	d7, d7, d3
 800f6be:	ee37 7b44 	vsub.f64	d7, d7, d4
 800f6c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6ca:	d105      	bne.n	800f6d8 <pow+0x528>
 800f6cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f6ce:	463a      	mov	r2, r7
 800f6d0:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800f6d4:	ec43 2b17 	vmov	d7, r2, r3
 800f6d8:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800f6dc:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800f6e0:	ee26 6b00 	vmul.f64	d6, d6, d0
 800f6e4:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800f6e8:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f6ec:	b01b      	add	sp, #108	; 0x6c
 800f6ee:	ecbd 8b0a 	vpop	{d8-d12}
 800f6f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6f6:	f000 ba06 	b.w	800fb06 <__math_check_uflow>
 800f6fa:	ec4b ab10 	vmov	d0, sl, fp
 800f6fe:	eea7 0b00 	vfma.f64	d0, d7, d0
 800f702:	e5a3      	b.n	800f24c <pow+0x9c>
 800f704:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800f720 <pow+0x570>
 800f708:	e5a0      	b.n	800f24c <pow+0x9c>
 800f70a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800f70e:	e59d      	b.n	800f24c <pow+0x9c>
 800f710:	00000000 	.word	0x00000000
 800f714:	7f000000 	.word	0x7f000000
 800f718:	00000000 	.word	0x00000000
 800f71c:	00100000 	.word	0x00100000
	...
 800f728:	08013800 	.word	0x08013800
 800f72c:	c0f00000 	.word	0xc0f00000
 800f730:	3fe00000 	.word	0x3fe00000

0800f734 <sinf_poly>:
 800f734:	07cb      	lsls	r3, r1, #31
 800f736:	d412      	bmi.n	800f75e <sinf_poly+0x2a>
 800f738:	ee21 6b00 	vmul.f64	d6, d1, d0
 800f73c:	ed90 5b1a 	vldr	d5, [r0, #104]	; 0x68
 800f740:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 800f744:	eea5 7b01 	vfma.f64	d7, d5, d1
 800f748:	ed90 5b16 	vldr	d5, [r0, #88]	; 0x58
 800f74c:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f750:	eea5 0b06 	vfma.f64	d0, d5, d6
 800f754:	eea7 0b01 	vfma.f64	d0, d7, d1
 800f758:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800f75c:	4770      	bx	lr
 800f75e:	ed90 5b14 	vldr	d5, [r0, #80]	; 0x50
 800f762:	ee21 6b01 	vmul.f64	d6, d1, d1
 800f766:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 800f76a:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 800f76e:	eea1 7b05 	vfma.f64	d7, d1, d5
 800f772:	ed90 5b0e 	vldr	d5, [r0, #56]	; 0x38
 800f776:	eea1 0b05 	vfma.f64	d0, d1, d5
 800f77a:	ed90 5b10 	vldr	d5, [r0, #64]	; 0x40
 800f77e:	ee21 1b06 	vmul.f64	d1, d1, d6
 800f782:	eea6 0b05 	vfma.f64	d0, d6, d5
 800f786:	e7e5      	b.n	800f754 <sinf_poly+0x20>

0800f788 <sinf>:
 800f788:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f78a:	ee10 4a10 	vmov	r4, s0
 800f78e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800f792:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 800f796:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800f79a:	eef0 7a40 	vmov.f32	s15, s0
 800f79e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 800f7a2:	d218      	bcs.n	800f7d6 <sinf+0x4e>
 800f7a4:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f7a8:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 800f7ac:	d20a      	bcs.n	800f7c4 <sinf+0x3c>
 800f7ae:	f412 6fff 	tst.w	r2, #2040	; 0x7f8
 800f7b2:	d103      	bne.n	800f7bc <sinf+0x34>
 800f7b4:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800f7b8:	ed8d 1a01 	vstr	s2, [sp, #4]
 800f7bc:	eeb0 0a67 	vmov.f32	s0, s15
 800f7c0:	b003      	add	sp, #12
 800f7c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7c4:	483e      	ldr	r0, [pc, #248]	; (800f8c0 <sinf+0x138>)
 800f7c6:	eeb0 0b46 	vmov.f64	d0, d6
 800f7ca:	2100      	movs	r1, #0
 800f7cc:	b003      	add	sp, #12
 800f7ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f7d2:	f7ff bfaf 	b.w	800f734 <sinf_poly>
 800f7d6:	f240 422e 	movw	r2, #1070	; 0x42e
 800f7da:	4293      	cmp	r3, r2
 800f7dc:	d824      	bhi.n	800f828 <sinf+0xa0>
 800f7de:	4b38      	ldr	r3, [pc, #224]	; (800f8c0 <sinf+0x138>)
 800f7e0:	ed93 7b08 	vldr	d7, [r3, #32]
 800f7e4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f7e8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800f7ec:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800f7f0:	ee17 1a90 	vmov	r1, s15
 800f7f4:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 800f7f8:	1609      	asrs	r1, r1, #24
 800f7fa:	ee07 1a90 	vmov	s15, r1
 800f7fe:	f001 0203 	and.w	r2, r1, #3
 800f802:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800f806:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800f80a:	ed92 0b00 	vldr	d0, [r2]
 800f80e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800f812:	f011 0f02 	tst.w	r1, #2
 800f816:	eea5 6b47 	vfms.f64	d6, d5, d7
 800f81a:	bf08      	it	eq
 800f81c:	4618      	moveq	r0, r3
 800f81e:	ee26 1b06 	vmul.f64	d1, d6, d6
 800f822:	ee20 0b06 	vmul.f64	d0, d0, d6
 800f826:	e7d1      	b.n	800f7cc <sinf+0x44>
 800f828:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800f82c:	d23d      	bcs.n	800f8aa <sinf+0x122>
 800f82e:	4b25      	ldr	r3, [pc, #148]	; (800f8c4 <sinf+0x13c>)
 800f830:	f3c4 6283 	ubfx	r2, r4, #26, #4
 800f834:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 800f838:	f3c4 0116 	ubfx	r1, r4, #0, #23
 800f83c:	6a06      	ldr	r6, [r0, #32]
 800f83e:	6900      	ldr	r0, [r0, #16]
 800f840:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800f844:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800f848:	40a9      	lsls	r1, r5
 800f84a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800f84e:	fba1 6706 	umull	r6, r7, r1, r6
 800f852:	fb05 f301 	mul.w	r3, r5, r1
 800f856:	463a      	mov	r2, r7
 800f858:	fbe0 2301 	umlal	r2, r3, r0, r1
 800f85c:	1c11      	adds	r1, r2, #0
 800f85e:	f143 5600 	adc.w	r6, r3, #536870912	; 0x20000000
 800f862:	2000      	movs	r0, #0
 800f864:	1a10      	subs	r0, r2, r0
 800f866:	f006 4140 	and.w	r1, r6, #3221225472	; 0xc0000000
 800f86a:	eb63 0101 	sbc.w	r1, r3, r1
 800f86e:	f7f0 ff1d 	bl	80006ac <__aeabi_l2d>
 800f872:	0fb5      	lsrs	r5, r6, #30
 800f874:	4a12      	ldr	r2, [pc, #72]	; (800f8c0 <sinf+0x138>)
 800f876:	eb05 73d4 	add.w	r3, r5, r4, lsr #31
 800f87a:	ed9f 0b0f 	vldr	d0, [pc, #60]	; 800f8b8 <sinf+0x130>
 800f87e:	ec41 0b17 	vmov	d7, r0, r1
 800f882:	f003 0103 	and.w	r1, r3, #3
 800f886:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800f88a:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f88e:	ed91 7b00 	vldr	d7, [r1]
 800f892:	ee20 1b00 	vmul.f64	d1, d0, d0
 800f896:	f013 0f02 	tst.w	r3, #2
 800f89a:	f102 0070 	add.w	r0, r2, #112	; 0x70
 800f89e:	4629      	mov	r1, r5
 800f8a0:	bf08      	it	eq
 800f8a2:	4610      	moveq	r0, r2
 800f8a4:	ee27 0b00 	vmul.f64	d0, d7, d0
 800f8a8:	e790      	b.n	800f7cc <sinf+0x44>
 800f8aa:	b003      	add	sp, #12
 800f8ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f8b0:	f7ff bc39 	b.w	800f126 <__math_invalidf>
 800f8b4:	f3af 8000 	nop.w
 800f8b8:	54442d18 	.word	0x54442d18
 800f8bc:	3c1921fb 	.word	0x3c1921fb
 800f8c0:	08013708 	.word	0x08013708
 800f8c4:	080136a8 	.word	0x080136a8

0800f8c8 <atan2f>:
 800f8c8:	f000 b826 	b.w	800f918 <__ieee754_atan2f>

0800f8cc <sqrtf>:
 800f8cc:	b508      	push	{r3, lr}
 800f8ce:	ed2d 8b02 	vpush	{d8}
 800f8d2:	eeb0 8a40 	vmov.f32	s16, s0
 800f8d6:	f000 f8bd 	bl	800fa54 <__ieee754_sqrtf>
 800f8da:	4b0d      	ldr	r3, [pc, #52]	; (800f910 <sqrtf+0x44>)
 800f8dc:	f993 3000 	ldrsb.w	r3, [r3]
 800f8e0:	3301      	adds	r3, #1
 800f8e2:	d011      	beq.n	800f908 <sqrtf+0x3c>
 800f8e4:	eeb4 8a48 	vcmp.f32	s16, s16
 800f8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8ec:	d60c      	bvs.n	800f908 <sqrtf+0x3c>
 800f8ee:	eddf 8a09 	vldr	s17, [pc, #36]	; 800f914 <sqrtf+0x48>
 800f8f2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f8f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f8fa:	d505      	bpl.n	800f908 <sqrtf+0x3c>
 800f8fc:	f000 f9fc 	bl	800fcf8 <__errno>
 800f900:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f904:	2321      	movs	r3, #33	; 0x21
 800f906:	6003      	str	r3, [r0, #0]
 800f908:	ecbd 8b02 	vpop	{d8}
 800f90c:	bd08      	pop	{r3, pc}
 800f90e:	bf00      	nop
 800f910:	24000049 	.word	0x24000049
 800f914:	00000000 	.word	0x00000000

0800f918 <__ieee754_atan2f>:
 800f918:	ee10 2a90 	vmov	r2, s1
 800f91c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800f920:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f924:	b510      	push	{r4, lr}
 800f926:	eef0 7a40 	vmov.f32	s15, s0
 800f92a:	dc06      	bgt.n	800f93a <__ieee754_atan2f+0x22>
 800f92c:	ee10 0a10 	vmov	r0, s0
 800f930:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f934:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f938:	dd04      	ble.n	800f944 <__ieee754_atan2f+0x2c>
 800f93a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f93e:	eeb0 0a67 	vmov.f32	s0, s15
 800f942:	bd10      	pop	{r4, pc}
 800f944:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800f948:	d103      	bne.n	800f952 <__ieee754_atan2f+0x3a>
 800f94a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f94e:	f000 b8f7 	b.w	800fb40 <atanf>
 800f952:	1794      	asrs	r4, r2, #30
 800f954:	f004 0402 	and.w	r4, r4, #2
 800f958:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f95c:	b93b      	cbnz	r3, 800f96e <__ieee754_atan2f+0x56>
 800f95e:	2c02      	cmp	r4, #2
 800f960:	d05c      	beq.n	800fa1c <__ieee754_atan2f+0x104>
 800f962:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800fa30 <__ieee754_atan2f+0x118>
 800f966:	2c03      	cmp	r4, #3
 800f968:	fe47 7a00 	vseleq.f32	s15, s14, s0
 800f96c:	e7e7      	b.n	800f93e <__ieee754_atan2f+0x26>
 800f96e:	b939      	cbnz	r1, 800f980 <__ieee754_atan2f+0x68>
 800f970:	eddf 7a30 	vldr	s15, [pc, #192]	; 800fa34 <__ieee754_atan2f+0x11c>
 800f974:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800fa38 <__ieee754_atan2f+0x120>
 800f978:	2800      	cmp	r0, #0
 800f97a:	fe67 7a80 	vselge.f32	s15, s15, s0
 800f97e:	e7de      	b.n	800f93e <__ieee754_atan2f+0x26>
 800f980:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800f984:	d110      	bne.n	800f9a8 <__ieee754_atan2f+0x90>
 800f986:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f98a:	f104 34ff 	add.w	r4, r4, #4294967295
 800f98e:	d107      	bne.n	800f9a0 <__ieee754_atan2f+0x88>
 800f990:	2c02      	cmp	r4, #2
 800f992:	d846      	bhi.n	800fa22 <__ieee754_atan2f+0x10a>
 800f994:	4b29      	ldr	r3, [pc, #164]	; (800fa3c <__ieee754_atan2f+0x124>)
 800f996:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f99a:	edd4 7a00 	vldr	s15, [r4]
 800f99e:	e7ce      	b.n	800f93e <__ieee754_atan2f+0x26>
 800f9a0:	2c02      	cmp	r4, #2
 800f9a2:	d841      	bhi.n	800fa28 <__ieee754_atan2f+0x110>
 800f9a4:	4b26      	ldr	r3, [pc, #152]	; (800fa40 <__ieee754_atan2f+0x128>)
 800f9a6:	e7f6      	b.n	800f996 <__ieee754_atan2f+0x7e>
 800f9a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f9ac:	d0e0      	beq.n	800f970 <__ieee754_atan2f+0x58>
 800f9ae:	1a5b      	subs	r3, r3, r1
 800f9b0:	f1b3 5ff4 	cmp.w	r3, #511705088	; 0x1e800000
 800f9b4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f9b8:	da1a      	bge.n	800f9f0 <__ieee754_atan2f+0xd8>
 800f9ba:	2a00      	cmp	r2, #0
 800f9bc:	da01      	bge.n	800f9c2 <__ieee754_atan2f+0xaa>
 800f9be:	313c      	adds	r1, #60	; 0x3c
 800f9c0:	db19      	blt.n	800f9f6 <__ieee754_atan2f+0xde>
 800f9c2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f9c6:	f000 f98f 	bl	800fce8 <fabsf>
 800f9ca:	f000 f8b9 	bl	800fb40 <atanf>
 800f9ce:	eef0 7a40 	vmov.f32	s15, s0
 800f9d2:	2c01      	cmp	r4, #1
 800f9d4:	d012      	beq.n	800f9fc <__ieee754_atan2f+0xe4>
 800f9d6:	2c02      	cmp	r4, #2
 800f9d8:	d017      	beq.n	800fa0a <__ieee754_atan2f+0xf2>
 800f9da:	2c00      	cmp	r4, #0
 800f9dc:	d0af      	beq.n	800f93e <__ieee754_atan2f+0x26>
 800f9de:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800fa44 <__ieee754_atan2f+0x12c>
 800f9e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f9e6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800fa48 <__ieee754_atan2f+0x130>
 800f9ea:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f9ee:	e7a6      	b.n	800f93e <__ieee754_atan2f+0x26>
 800f9f0:	eddf 7a10 	vldr	s15, [pc, #64]	; 800fa34 <__ieee754_atan2f+0x11c>
 800f9f4:	e7ed      	b.n	800f9d2 <__ieee754_atan2f+0xba>
 800f9f6:	eddf 7a15 	vldr	s15, [pc, #84]	; 800fa4c <__ieee754_atan2f+0x134>
 800f9fa:	e7ea      	b.n	800f9d2 <__ieee754_atan2f+0xba>
 800f9fc:	ee17 3a90 	vmov	r3, s15
 800fa00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fa04:	ee07 3a90 	vmov	s15, r3
 800fa08:	e799      	b.n	800f93e <__ieee754_atan2f+0x26>
 800fa0a:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800fa44 <__ieee754_atan2f+0x12c>
 800fa0e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800fa12:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 800fa48 <__ieee754_atan2f+0x130>
 800fa16:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fa1a:	e790      	b.n	800f93e <__ieee754_atan2f+0x26>
 800fa1c:	eddf 7a0a 	vldr	s15, [pc, #40]	; 800fa48 <__ieee754_atan2f+0x130>
 800fa20:	e78d      	b.n	800f93e <__ieee754_atan2f+0x26>
 800fa22:	eddf 7a0b 	vldr	s15, [pc, #44]	; 800fa50 <__ieee754_atan2f+0x138>
 800fa26:	e78a      	b.n	800f93e <__ieee754_atan2f+0x26>
 800fa28:	eddf 7a08 	vldr	s15, [pc, #32]	; 800fa4c <__ieee754_atan2f+0x134>
 800fa2c:	e787      	b.n	800f93e <__ieee754_atan2f+0x26>
 800fa2e:	bf00      	nop
 800fa30:	c0490fdb 	.word	0xc0490fdb
 800fa34:	3fc90fdb 	.word	0x3fc90fdb
 800fa38:	bfc90fdb 	.word	0xbfc90fdb
 800fa3c:	080137e8 	.word	0x080137e8
 800fa40:	080137f4 	.word	0x080137f4
 800fa44:	33bbbd2e 	.word	0x33bbbd2e
 800fa48:	40490fdb 	.word	0x40490fdb
 800fa4c:	00000000 	.word	0x00000000
 800fa50:	3f490fdb 	.word	0x3f490fdb

0800fa54 <__ieee754_sqrtf>:
 800fa54:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fa58:	4770      	bx	lr

0800fa5a <with_errno>:
 800fa5a:	b513      	push	{r0, r1, r4, lr}
 800fa5c:	4604      	mov	r4, r0
 800fa5e:	ed8d 0b00 	vstr	d0, [sp]
 800fa62:	f000 f949 	bl	800fcf8 <__errno>
 800fa66:	ed9d 0b00 	vldr	d0, [sp]
 800fa6a:	6004      	str	r4, [r0, #0]
 800fa6c:	b002      	add	sp, #8
 800fa6e:	bd10      	pop	{r4, pc}

0800fa70 <xflow>:
 800fa70:	b082      	sub	sp, #8
 800fa72:	b158      	cbz	r0, 800fa8c <xflow+0x1c>
 800fa74:	eeb1 7b40 	vneg.f64	d7, d0
 800fa78:	ed8d 7b00 	vstr	d7, [sp]
 800fa7c:	ed9d 7b00 	vldr	d7, [sp]
 800fa80:	2022      	movs	r0, #34	; 0x22
 800fa82:	ee20 0b07 	vmul.f64	d0, d0, d7
 800fa86:	b002      	add	sp, #8
 800fa88:	f7ff bfe7 	b.w	800fa5a <with_errno>
 800fa8c:	eeb0 7b40 	vmov.f64	d7, d0
 800fa90:	e7f2      	b.n	800fa78 <xflow+0x8>
 800fa92:	0000      	movs	r0, r0
 800fa94:	0000      	movs	r0, r0
	...

0800fa98 <__math_uflow>:
 800fa98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800faa0 <__math_uflow+0x8>
 800fa9c:	f7ff bfe8 	b.w	800fa70 <xflow>
 800faa0:	00000000 	.word	0x00000000
 800faa4:	10000000 	.word	0x10000000

0800faa8 <__math_oflow>:
 800faa8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800fab0 <__math_oflow+0x8>
 800faac:	f7ff bfe0 	b.w	800fa70 <xflow>
 800fab0:	00000000 	.word	0x00000000
 800fab4:	70000000 	.word	0x70000000

0800fab8 <__math_divzero>:
 800fab8:	b082      	sub	sp, #8
 800faba:	2800      	cmp	r0, #0
 800fabc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800fac0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800fac4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800fac8:	ed8d 7b00 	vstr	d7, [sp]
 800facc:	ed9d 0b00 	vldr	d0, [sp]
 800fad0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800fae0 <__math_divzero+0x28>
 800fad4:	2022      	movs	r0, #34	; 0x22
 800fad6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800fada:	b002      	add	sp, #8
 800fadc:	f7ff bfbd 	b.w	800fa5a <with_errno>
	...

0800fae8 <__math_invalid>:
 800fae8:	eeb0 7b40 	vmov.f64	d7, d0
 800faec:	eeb4 7b47 	vcmp.f64	d7, d7
 800faf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf4:	ee30 6b40 	vsub.f64	d6, d0, d0
 800faf8:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800fafc:	d602      	bvs.n	800fb04 <__math_invalid+0x1c>
 800fafe:	2021      	movs	r0, #33	; 0x21
 800fb00:	f7ff bfab 	b.w	800fa5a <with_errno>
 800fb04:	4770      	bx	lr

0800fb06 <__math_check_uflow>:
 800fb06:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800fb0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb0e:	d102      	bne.n	800fb16 <__math_check_uflow+0x10>
 800fb10:	2022      	movs	r0, #34	; 0x22
 800fb12:	f7ff bfa2 	b.w	800fa5a <with_errno>
 800fb16:	4770      	bx	lr

0800fb18 <__math_check_oflow>:
 800fb18:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800fb38 <__math_check_oflow+0x20>
 800fb1c:	eeb0 7bc0 	vabs.f64	d7, d0
 800fb20:	eeb4 7b46 	vcmp.f64	d7, d6
 800fb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb28:	dd02      	ble.n	800fb30 <__math_check_oflow+0x18>
 800fb2a:	2022      	movs	r0, #34	; 0x22
 800fb2c:	f7ff bf95 	b.w	800fa5a <with_errno>
 800fb30:	4770      	bx	lr
 800fb32:	bf00      	nop
 800fb34:	f3af 8000 	nop.w
 800fb38:	ffffffff 	.word	0xffffffff
 800fb3c:	7fefffff 	.word	0x7fefffff

0800fb40 <atanf>:
 800fb40:	b538      	push	{r3, r4, r5, lr}
 800fb42:	ee10 5a10 	vmov	r5, s0
 800fb46:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800fb4a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800fb4e:	eef0 7a40 	vmov.f32	s15, s0
 800fb52:	db0f      	blt.n	800fb74 <atanf+0x34>
 800fb54:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800fb58:	dd04      	ble.n	800fb64 <atanf+0x24>
 800fb5a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800fb5e:	eeb0 0a67 	vmov.f32	s0, s15
 800fb62:	bd38      	pop	{r3, r4, r5, pc}
 800fb64:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800fc9c <atanf+0x15c>
 800fb68:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800fca0 <atanf+0x160>
 800fb6c:	2d00      	cmp	r5, #0
 800fb6e:	fe77 7a80 	vselgt.f32	s15, s15, s0
 800fb72:	e7f4      	b.n	800fb5e <atanf+0x1e>
 800fb74:	4b4b      	ldr	r3, [pc, #300]	; (800fca4 <atanf+0x164>)
 800fb76:	429c      	cmp	r4, r3
 800fb78:	dc10      	bgt.n	800fb9c <atanf+0x5c>
 800fb7a:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800fb7e:	da0a      	bge.n	800fb96 <atanf+0x56>
 800fb80:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800fca8 <atanf+0x168>
 800fb84:	ee30 7a07 	vadd.f32	s14, s0, s14
 800fb88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fb8c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800fb90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb94:	dce3      	bgt.n	800fb5e <atanf+0x1e>
 800fb96:	f04f 33ff 	mov.w	r3, #4294967295
 800fb9a:	e013      	b.n	800fbc4 <atanf+0x84>
 800fb9c:	f000 f8a4 	bl	800fce8 <fabsf>
 800fba0:	4b42      	ldr	r3, [pc, #264]	; (800fcac <atanf+0x16c>)
 800fba2:	429c      	cmp	r4, r3
 800fba4:	dc4f      	bgt.n	800fc46 <atanf+0x106>
 800fba6:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800fbaa:	429c      	cmp	r4, r3
 800fbac:	dc41      	bgt.n	800fc32 <atanf+0xf2>
 800fbae:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800fbb2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fbb6:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fbba:	2300      	movs	r3, #0
 800fbbc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fbc0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fbc4:	1c5a      	adds	r2, r3, #1
 800fbc6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800fbca:	eddf 5a39 	vldr	s11, [pc, #228]	; 800fcb0 <atanf+0x170>
 800fbce:	ed9f 6a39 	vldr	s12, [pc, #228]	; 800fcb4 <atanf+0x174>
 800fbd2:	ed9f 5a39 	vldr	s10, [pc, #228]	; 800fcb8 <atanf+0x178>
 800fbd6:	ed9f 0a39 	vldr	s0, [pc, #228]	; 800fcbc <atanf+0x17c>
 800fbda:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800fbde:	eea7 6a25 	vfma.f32	s12, s14, s11
 800fbe2:	eddf 5a37 	vldr	s11, [pc, #220]	; 800fcc0 <atanf+0x180>
 800fbe6:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fbea:	ed9f 6a36 	vldr	s12, [pc, #216]	; 800fcc4 <atanf+0x184>
 800fbee:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fbf2:	eddf 5a35 	vldr	s11, [pc, #212]	; 800fcc8 <atanf+0x188>
 800fbf6:	eee6 5a07 	vfma.f32	s11, s12, s14
 800fbfa:	ed9f 6a34 	vldr	s12, [pc, #208]	; 800fccc <atanf+0x18c>
 800fbfe:	eea5 6a87 	vfma.f32	s12, s11, s14
 800fc02:	eddf 5a33 	vldr	s11, [pc, #204]	; 800fcd0 <atanf+0x190>
 800fc06:	eee7 5a05 	vfma.f32	s11, s14, s10
 800fc0a:	ed9f 5a32 	vldr	s10, [pc, #200]	; 800fcd4 <atanf+0x194>
 800fc0e:	eea5 5a87 	vfma.f32	s10, s11, s14
 800fc12:	eddf 5a31 	vldr	s11, [pc, #196]	; 800fcd8 <atanf+0x198>
 800fc16:	eee5 5a07 	vfma.f32	s11, s10, s14
 800fc1a:	eea5 0a87 	vfma.f32	s0, s11, s14
 800fc1e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800fc22:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fc26:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fc2a:	d121      	bne.n	800fc70 <atanf+0x130>
 800fc2c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800fc30:	e795      	b.n	800fb5e <atanf+0x1e>
 800fc32:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800fc36:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fc3a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fc3e:	2301      	movs	r3, #1
 800fc40:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fc44:	e7be      	b.n	800fbc4 <atanf+0x84>
 800fc46:	4b25      	ldr	r3, [pc, #148]	; (800fcdc <atanf+0x19c>)
 800fc48:	429c      	cmp	r4, r3
 800fc4a:	dc0b      	bgt.n	800fc64 <atanf+0x124>
 800fc4c:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800fc50:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fc54:	eea0 7a27 	vfma.f32	s14, s0, s15
 800fc58:	2302      	movs	r3, #2
 800fc5a:	ee70 6a67 	vsub.f32	s13, s0, s15
 800fc5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800fc62:	e7af      	b.n	800fbc4 <atanf+0x84>
 800fc64:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fc68:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fc6c:	2303      	movs	r3, #3
 800fc6e:	e7a9      	b.n	800fbc4 <atanf+0x84>
 800fc70:	4a1b      	ldr	r2, [pc, #108]	; (800fce0 <atanf+0x1a0>)
 800fc72:	491c      	ldr	r1, [pc, #112]	; (800fce4 <atanf+0x1a4>)
 800fc74:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fc78:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800fc7c:	ed93 7a00 	vldr	s14, [r3]
 800fc80:	ee30 0a47 	vsub.f32	s0, s0, s14
 800fc84:	2d00      	cmp	r5, #0
 800fc86:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fc8a:	ed92 0a00 	vldr	s0, [r2]
 800fc8e:	ee70 7a67 	vsub.f32	s15, s0, s15
 800fc92:	bfb8      	it	lt
 800fc94:	eef1 7a67 	vneglt.f32	s15, s15
 800fc98:	e761      	b.n	800fb5e <atanf+0x1e>
 800fc9a:	bf00      	nop
 800fc9c:	3fc90fdb 	.word	0x3fc90fdb
 800fca0:	bfc90fdb 	.word	0xbfc90fdb
 800fca4:	3edfffff 	.word	0x3edfffff
 800fca8:	7149f2ca 	.word	0x7149f2ca
 800fcac:	3f97ffff 	.word	0x3f97ffff
 800fcb0:	3c8569d7 	.word	0x3c8569d7
 800fcb4:	3d4bda59 	.word	0x3d4bda59
 800fcb8:	bd15a221 	.word	0xbd15a221
 800fcbc:	be4ccccd 	.word	0xbe4ccccd
 800fcc0:	3d886b35 	.word	0x3d886b35
 800fcc4:	3dba2e6e 	.word	0x3dba2e6e
 800fcc8:	3e124925 	.word	0x3e124925
 800fccc:	3eaaaaab 	.word	0x3eaaaaab
 800fcd0:	bd6ef16b 	.word	0xbd6ef16b
 800fcd4:	bd9d8795 	.word	0xbd9d8795
 800fcd8:	bde38e38 	.word	0xbde38e38
 800fcdc:	401bffff 	.word	0x401bffff
 800fce0:	08014070 	.word	0x08014070
 800fce4:	08014080 	.word	0x08014080

0800fce8 <fabsf>:
 800fce8:	ee10 3a10 	vmov	r3, s0
 800fcec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fcf0:	ee00 3a10 	vmov	s0, r3
 800fcf4:	4770      	bx	lr
	...

0800fcf8 <__errno>:
 800fcf8:	4b01      	ldr	r3, [pc, #4]	; (800fd00 <__errno+0x8>)
 800fcfa:	6818      	ldr	r0, [r3, #0]
 800fcfc:	4770      	bx	lr
 800fcfe:	bf00      	nop
 800fd00:	2400004c 	.word	0x2400004c

0800fd04 <__libc_init_array>:
 800fd04:	b570      	push	{r4, r5, r6, lr}
 800fd06:	4d0d      	ldr	r5, [pc, #52]	; (800fd3c <__libc_init_array+0x38>)
 800fd08:	4c0d      	ldr	r4, [pc, #52]	; (800fd40 <__libc_init_array+0x3c>)
 800fd0a:	1b64      	subs	r4, r4, r5
 800fd0c:	10a4      	asrs	r4, r4, #2
 800fd0e:	2600      	movs	r6, #0
 800fd10:	42a6      	cmp	r6, r4
 800fd12:	d109      	bne.n	800fd28 <__libc_init_array+0x24>
 800fd14:	4d0b      	ldr	r5, [pc, #44]	; (800fd44 <__libc_init_array+0x40>)
 800fd16:	4c0c      	ldr	r4, [pc, #48]	; (800fd48 <__libc_init_array+0x44>)
 800fd18:	f002 fc60 	bl	80125dc <_init>
 800fd1c:	1b64      	subs	r4, r4, r5
 800fd1e:	10a4      	asrs	r4, r4, #2
 800fd20:	2600      	movs	r6, #0
 800fd22:	42a6      	cmp	r6, r4
 800fd24:	d105      	bne.n	800fd32 <__libc_init_array+0x2e>
 800fd26:	bd70      	pop	{r4, r5, r6, pc}
 800fd28:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd2c:	4798      	blx	r3
 800fd2e:	3601      	adds	r6, #1
 800fd30:	e7ee      	b.n	800fd10 <__libc_init_array+0xc>
 800fd32:	f855 3b04 	ldr.w	r3, [r5], #4
 800fd36:	4798      	blx	r3
 800fd38:	3601      	adds	r6, #1
 800fd3a:	e7f2      	b.n	800fd22 <__libc_init_array+0x1e>
 800fd3c:	0801447c 	.word	0x0801447c
 800fd40:	0801447c 	.word	0x0801447c
 800fd44:	0801447c 	.word	0x0801447c
 800fd48:	08014484 	.word	0x08014484

0800fd4c <memcpy>:
 800fd4c:	440a      	add	r2, r1
 800fd4e:	4291      	cmp	r1, r2
 800fd50:	f100 33ff 	add.w	r3, r0, #4294967295
 800fd54:	d100      	bne.n	800fd58 <memcpy+0xc>
 800fd56:	4770      	bx	lr
 800fd58:	b510      	push	{r4, lr}
 800fd5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd62:	4291      	cmp	r1, r2
 800fd64:	d1f9      	bne.n	800fd5a <memcpy+0xe>
 800fd66:	bd10      	pop	{r4, pc}

0800fd68 <memset>:
 800fd68:	4402      	add	r2, r0
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d100      	bne.n	800fd72 <memset+0xa>
 800fd70:	4770      	bx	lr
 800fd72:	f803 1b01 	strb.w	r1, [r3], #1
 800fd76:	e7f9      	b.n	800fd6c <memset+0x4>

0800fd78 <__cvt>:
 800fd78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd7a:	ed2d 8b02 	vpush	{d8}
 800fd7e:	eeb0 8b40 	vmov.f64	d8, d0
 800fd82:	b085      	sub	sp, #20
 800fd84:	4617      	mov	r7, r2
 800fd86:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fd88:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800fd8a:	ee18 2a90 	vmov	r2, s17
 800fd8e:	f025 0520 	bic.w	r5, r5, #32
 800fd92:	2a00      	cmp	r2, #0
 800fd94:	bfb6      	itet	lt
 800fd96:	222d      	movlt	r2, #45	; 0x2d
 800fd98:	2200      	movge	r2, #0
 800fd9a:	eeb1 8b40 	vneglt.f64	d8, d0
 800fd9e:	2d46      	cmp	r5, #70	; 0x46
 800fda0:	460c      	mov	r4, r1
 800fda2:	701a      	strb	r2, [r3, #0]
 800fda4:	d004      	beq.n	800fdb0 <__cvt+0x38>
 800fda6:	2d45      	cmp	r5, #69	; 0x45
 800fda8:	d100      	bne.n	800fdac <__cvt+0x34>
 800fdaa:	3401      	adds	r4, #1
 800fdac:	2102      	movs	r1, #2
 800fdae:	e000      	b.n	800fdb2 <__cvt+0x3a>
 800fdb0:	2103      	movs	r1, #3
 800fdb2:	ab03      	add	r3, sp, #12
 800fdb4:	9301      	str	r3, [sp, #4]
 800fdb6:	ab02      	add	r3, sp, #8
 800fdb8:	9300      	str	r3, [sp, #0]
 800fdba:	4622      	mov	r2, r4
 800fdbc:	4633      	mov	r3, r6
 800fdbe:	eeb0 0b48 	vmov.f64	d0, d8
 800fdc2:	f000 fca9 	bl	8010718 <_dtoa_r>
 800fdc6:	2d47      	cmp	r5, #71	; 0x47
 800fdc8:	d109      	bne.n	800fdde <__cvt+0x66>
 800fdca:	07fb      	lsls	r3, r7, #31
 800fdcc:	d407      	bmi.n	800fdde <__cvt+0x66>
 800fdce:	9b03      	ldr	r3, [sp, #12]
 800fdd0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fdd2:	1a1b      	subs	r3, r3, r0
 800fdd4:	6013      	str	r3, [r2, #0]
 800fdd6:	b005      	add	sp, #20
 800fdd8:	ecbd 8b02 	vpop	{d8}
 800fddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fdde:	2d46      	cmp	r5, #70	; 0x46
 800fde0:	eb00 0204 	add.w	r2, r0, r4
 800fde4:	d10c      	bne.n	800fe00 <__cvt+0x88>
 800fde6:	7803      	ldrb	r3, [r0, #0]
 800fde8:	2b30      	cmp	r3, #48	; 0x30
 800fdea:	d107      	bne.n	800fdfc <__cvt+0x84>
 800fdec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fdf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdf4:	bf1c      	itt	ne
 800fdf6:	f1c4 0401 	rsbne	r4, r4, #1
 800fdfa:	6034      	strne	r4, [r6, #0]
 800fdfc:	6833      	ldr	r3, [r6, #0]
 800fdfe:	441a      	add	r2, r3
 800fe00:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fe04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe08:	bf08      	it	eq
 800fe0a:	9203      	streq	r2, [sp, #12]
 800fe0c:	2130      	movs	r1, #48	; 0x30
 800fe0e:	9b03      	ldr	r3, [sp, #12]
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d2dc      	bcs.n	800fdce <__cvt+0x56>
 800fe14:	1c5c      	adds	r4, r3, #1
 800fe16:	9403      	str	r4, [sp, #12]
 800fe18:	7019      	strb	r1, [r3, #0]
 800fe1a:	e7f8      	b.n	800fe0e <__cvt+0x96>

0800fe1c <__exponent>:
 800fe1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe1e:	4603      	mov	r3, r0
 800fe20:	2900      	cmp	r1, #0
 800fe22:	bfb8      	it	lt
 800fe24:	4249      	neglt	r1, r1
 800fe26:	f803 2b02 	strb.w	r2, [r3], #2
 800fe2a:	bfb4      	ite	lt
 800fe2c:	222d      	movlt	r2, #45	; 0x2d
 800fe2e:	222b      	movge	r2, #43	; 0x2b
 800fe30:	2909      	cmp	r1, #9
 800fe32:	7042      	strb	r2, [r0, #1]
 800fe34:	dd2a      	ble.n	800fe8c <__exponent+0x70>
 800fe36:	f10d 0407 	add.w	r4, sp, #7
 800fe3a:	46a4      	mov	ip, r4
 800fe3c:	270a      	movs	r7, #10
 800fe3e:	46a6      	mov	lr, r4
 800fe40:	460a      	mov	r2, r1
 800fe42:	fb91 f6f7 	sdiv	r6, r1, r7
 800fe46:	fb07 1516 	mls	r5, r7, r6, r1
 800fe4a:	3530      	adds	r5, #48	; 0x30
 800fe4c:	2a63      	cmp	r2, #99	; 0x63
 800fe4e:	f104 34ff 	add.w	r4, r4, #4294967295
 800fe52:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800fe56:	4631      	mov	r1, r6
 800fe58:	dcf1      	bgt.n	800fe3e <__exponent+0x22>
 800fe5a:	3130      	adds	r1, #48	; 0x30
 800fe5c:	f1ae 0502 	sub.w	r5, lr, #2
 800fe60:	f804 1c01 	strb.w	r1, [r4, #-1]
 800fe64:	1c44      	adds	r4, r0, #1
 800fe66:	4629      	mov	r1, r5
 800fe68:	4561      	cmp	r1, ip
 800fe6a:	d30a      	bcc.n	800fe82 <__exponent+0x66>
 800fe6c:	f10d 0209 	add.w	r2, sp, #9
 800fe70:	eba2 020e 	sub.w	r2, r2, lr
 800fe74:	4565      	cmp	r5, ip
 800fe76:	bf88      	it	hi
 800fe78:	2200      	movhi	r2, #0
 800fe7a:	4413      	add	r3, r2
 800fe7c:	1a18      	subs	r0, r3, r0
 800fe7e:	b003      	add	sp, #12
 800fe80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe86:	f804 2f01 	strb.w	r2, [r4, #1]!
 800fe8a:	e7ed      	b.n	800fe68 <__exponent+0x4c>
 800fe8c:	2330      	movs	r3, #48	; 0x30
 800fe8e:	3130      	adds	r1, #48	; 0x30
 800fe90:	7083      	strb	r3, [r0, #2]
 800fe92:	70c1      	strb	r1, [r0, #3]
 800fe94:	1d03      	adds	r3, r0, #4
 800fe96:	e7f1      	b.n	800fe7c <__exponent+0x60>

0800fe98 <_printf_float>:
 800fe98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe9c:	b08b      	sub	sp, #44	; 0x2c
 800fe9e:	460c      	mov	r4, r1
 800fea0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800fea4:	4616      	mov	r6, r2
 800fea6:	461f      	mov	r7, r3
 800fea8:	4605      	mov	r5, r0
 800feaa:	f001 f9b7 	bl	801121c <_localeconv_r>
 800feae:	f8d0 b000 	ldr.w	fp, [r0]
 800feb2:	4658      	mov	r0, fp
 800feb4:	f7f0 fa14 	bl	80002e0 <strlen>
 800feb8:	2300      	movs	r3, #0
 800feba:	9308      	str	r3, [sp, #32]
 800febc:	f8d8 3000 	ldr.w	r3, [r8]
 800fec0:	f894 9018 	ldrb.w	r9, [r4, #24]
 800fec4:	6822      	ldr	r2, [r4, #0]
 800fec6:	3307      	adds	r3, #7
 800fec8:	f023 0307 	bic.w	r3, r3, #7
 800fecc:	f103 0108 	add.w	r1, r3, #8
 800fed0:	f8c8 1000 	str.w	r1, [r8]
 800fed4:	4682      	mov	sl, r0
 800fed6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800feda:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800fede:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8010140 <_printf_float+0x2a8>
 800fee2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800fee6:	eeb0 6bc0 	vabs.f64	d6, d0
 800feea:	eeb4 6b47 	vcmp.f64	d6, d7
 800feee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef2:	dd24      	ble.n	800ff3e <_printf_float+0xa6>
 800fef4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800fef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fefc:	d502      	bpl.n	800ff04 <_printf_float+0x6c>
 800fefe:	232d      	movs	r3, #45	; 0x2d
 800ff00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ff04:	4b90      	ldr	r3, [pc, #576]	; (8010148 <_printf_float+0x2b0>)
 800ff06:	4891      	ldr	r0, [pc, #580]	; (801014c <_printf_float+0x2b4>)
 800ff08:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ff0c:	bf94      	ite	ls
 800ff0e:	4698      	movls	r8, r3
 800ff10:	4680      	movhi	r8, r0
 800ff12:	2303      	movs	r3, #3
 800ff14:	6123      	str	r3, [r4, #16]
 800ff16:	f022 0204 	bic.w	r2, r2, #4
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	6022      	str	r2, [r4, #0]
 800ff1e:	9304      	str	r3, [sp, #16]
 800ff20:	9700      	str	r7, [sp, #0]
 800ff22:	4633      	mov	r3, r6
 800ff24:	aa09      	add	r2, sp, #36	; 0x24
 800ff26:	4621      	mov	r1, r4
 800ff28:	4628      	mov	r0, r5
 800ff2a:	f000 f9d3 	bl	80102d4 <_printf_common>
 800ff2e:	3001      	adds	r0, #1
 800ff30:	f040 808a 	bne.w	8010048 <_printf_float+0x1b0>
 800ff34:	f04f 30ff 	mov.w	r0, #4294967295
 800ff38:	b00b      	add	sp, #44	; 0x2c
 800ff3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff3e:	eeb4 0b40 	vcmp.f64	d0, d0
 800ff42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff46:	d709      	bvc.n	800ff5c <_printf_float+0xc4>
 800ff48:	ee10 3a90 	vmov	r3, s1
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	bfbc      	itt	lt
 800ff50:	232d      	movlt	r3, #45	; 0x2d
 800ff52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ff56:	487e      	ldr	r0, [pc, #504]	; (8010150 <_printf_float+0x2b8>)
 800ff58:	4b7e      	ldr	r3, [pc, #504]	; (8010154 <_printf_float+0x2bc>)
 800ff5a:	e7d5      	b.n	800ff08 <_printf_float+0x70>
 800ff5c:	6863      	ldr	r3, [r4, #4]
 800ff5e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800ff62:	9104      	str	r1, [sp, #16]
 800ff64:	1c59      	adds	r1, r3, #1
 800ff66:	d13c      	bne.n	800ffe2 <_printf_float+0x14a>
 800ff68:	2306      	movs	r3, #6
 800ff6a:	6063      	str	r3, [r4, #4]
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	9303      	str	r3, [sp, #12]
 800ff70:	ab08      	add	r3, sp, #32
 800ff72:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ff76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ff7a:	ab07      	add	r3, sp, #28
 800ff7c:	6861      	ldr	r1, [r4, #4]
 800ff7e:	9300      	str	r3, [sp, #0]
 800ff80:	6022      	str	r2, [r4, #0]
 800ff82:	f10d 031b 	add.w	r3, sp, #27
 800ff86:	4628      	mov	r0, r5
 800ff88:	f7ff fef6 	bl	800fd78 <__cvt>
 800ff8c:	9b04      	ldr	r3, [sp, #16]
 800ff8e:	9907      	ldr	r1, [sp, #28]
 800ff90:	2b47      	cmp	r3, #71	; 0x47
 800ff92:	4680      	mov	r8, r0
 800ff94:	d108      	bne.n	800ffa8 <_printf_float+0x110>
 800ff96:	1cc8      	adds	r0, r1, #3
 800ff98:	db02      	blt.n	800ffa0 <_printf_float+0x108>
 800ff9a:	6863      	ldr	r3, [r4, #4]
 800ff9c:	4299      	cmp	r1, r3
 800ff9e:	dd41      	ble.n	8010024 <_printf_float+0x18c>
 800ffa0:	f1a9 0902 	sub.w	r9, r9, #2
 800ffa4:	fa5f f989 	uxtb.w	r9, r9
 800ffa8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800ffac:	d820      	bhi.n	800fff0 <_printf_float+0x158>
 800ffae:	3901      	subs	r1, #1
 800ffb0:	464a      	mov	r2, r9
 800ffb2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ffb6:	9107      	str	r1, [sp, #28]
 800ffb8:	f7ff ff30 	bl	800fe1c <__exponent>
 800ffbc:	9a08      	ldr	r2, [sp, #32]
 800ffbe:	9004      	str	r0, [sp, #16]
 800ffc0:	1813      	adds	r3, r2, r0
 800ffc2:	2a01      	cmp	r2, #1
 800ffc4:	6123      	str	r3, [r4, #16]
 800ffc6:	dc02      	bgt.n	800ffce <_printf_float+0x136>
 800ffc8:	6822      	ldr	r2, [r4, #0]
 800ffca:	07d2      	lsls	r2, r2, #31
 800ffcc:	d501      	bpl.n	800ffd2 <_printf_float+0x13a>
 800ffce:	3301      	adds	r3, #1
 800ffd0:	6123      	str	r3, [r4, #16]
 800ffd2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d0a2      	beq.n	800ff20 <_printf_float+0x88>
 800ffda:	232d      	movs	r3, #45	; 0x2d
 800ffdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ffe0:	e79e      	b.n	800ff20 <_printf_float+0x88>
 800ffe2:	9904      	ldr	r1, [sp, #16]
 800ffe4:	2947      	cmp	r1, #71	; 0x47
 800ffe6:	d1c1      	bne.n	800ff6c <_printf_float+0xd4>
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d1bf      	bne.n	800ff6c <_printf_float+0xd4>
 800ffec:	2301      	movs	r3, #1
 800ffee:	e7bc      	b.n	800ff6a <_printf_float+0xd2>
 800fff0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800fff4:	d118      	bne.n	8010028 <_printf_float+0x190>
 800fff6:	2900      	cmp	r1, #0
 800fff8:	6863      	ldr	r3, [r4, #4]
 800fffa:	dd0b      	ble.n	8010014 <_printf_float+0x17c>
 800fffc:	6121      	str	r1, [r4, #16]
 800fffe:	b913      	cbnz	r3, 8010006 <_printf_float+0x16e>
 8010000:	6822      	ldr	r2, [r4, #0]
 8010002:	07d0      	lsls	r0, r2, #31
 8010004:	d502      	bpl.n	801000c <_printf_float+0x174>
 8010006:	3301      	adds	r3, #1
 8010008:	440b      	add	r3, r1
 801000a:	6123      	str	r3, [r4, #16]
 801000c:	2300      	movs	r3, #0
 801000e:	65a1      	str	r1, [r4, #88]	; 0x58
 8010010:	9304      	str	r3, [sp, #16]
 8010012:	e7de      	b.n	800ffd2 <_printf_float+0x13a>
 8010014:	b913      	cbnz	r3, 801001c <_printf_float+0x184>
 8010016:	6822      	ldr	r2, [r4, #0]
 8010018:	07d2      	lsls	r2, r2, #31
 801001a:	d501      	bpl.n	8010020 <_printf_float+0x188>
 801001c:	3302      	adds	r3, #2
 801001e:	e7f4      	b.n	801000a <_printf_float+0x172>
 8010020:	2301      	movs	r3, #1
 8010022:	e7f2      	b.n	801000a <_printf_float+0x172>
 8010024:	f04f 0967 	mov.w	r9, #103	; 0x67
 8010028:	9b08      	ldr	r3, [sp, #32]
 801002a:	4299      	cmp	r1, r3
 801002c:	db05      	blt.n	801003a <_printf_float+0x1a2>
 801002e:	6823      	ldr	r3, [r4, #0]
 8010030:	6121      	str	r1, [r4, #16]
 8010032:	07d8      	lsls	r0, r3, #31
 8010034:	d5ea      	bpl.n	801000c <_printf_float+0x174>
 8010036:	1c4b      	adds	r3, r1, #1
 8010038:	e7e7      	b.n	801000a <_printf_float+0x172>
 801003a:	2900      	cmp	r1, #0
 801003c:	bfd4      	ite	le
 801003e:	f1c1 0202 	rsble	r2, r1, #2
 8010042:	2201      	movgt	r2, #1
 8010044:	4413      	add	r3, r2
 8010046:	e7e0      	b.n	801000a <_printf_float+0x172>
 8010048:	6823      	ldr	r3, [r4, #0]
 801004a:	055a      	lsls	r2, r3, #21
 801004c:	d407      	bmi.n	801005e <_printf_float+0x1c6>
 801004e:	6923      	ldr	r3, [r4, #16]
 8010050:	4642      	mov	r2, r8
 8010052:	4631      	mov	r1, r6
 8010054:	4628      	mov	r0, r5
 8010056:	47b8      	blx	r7
 8010058:	3001      	adds	r0, #1
 801005a:	d12a      	bne.n	80100b2 <_printf_float+0x21a>
 801005c:	e76a      	b.n	800ff34 <_printf_float+0x9c>
 801005e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8010062:	f240 80e2 	bls.w	801022a <_printf_float+0x392>
 8010066:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801006a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801006e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010072:	d133      	bne.n	80100dc <_printf_float+0x244>
 8010074:	4a38      	ldr	r2, [pc, #224]	; (8010158 <_printf_float+0x2c0>)
 8010076:	2301      	movs	r3, #1
 8010078:	4631      	mov	r1, r6
 801007a:	4628      	mov	r0, r5
 801007c:	47b8      	blx	r7
 801007e:	3001      	adds	r0, #1
 8010080:	f43f af58 	beq.w	800ff34 <_printf_float+0x9c>
 8010084:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8010088:	429a      	cmp	r2, r3
 801008a:	db02      	blt.n	8010092 <_printf_float+0x1fa>
 801008c:	6823      	ldr	r3, [r4, #0]
 801008e:	07d8      	lsls	r0, r3, #31
 8010090:	d50f      	bpl.n	80100b2 <_printf_float+0x21a>
 8010092:	4653      	mov	r3, sl
 8010094:	465a      	mov	r2, fp
 8010096:	4631      	mov	r1, r6
 8010098:	4628      	mov	r0, r5
 801009a:	47b8      	blx	r7
 801009c:	3001      	adds	r0, #1
 801009e:	f43f af49 	beq.w	800ff34 <_printf_float+0x9c>
 80100a2:	f04f 0800 	mov.w	r8, #0
 80100a6:	f104 091a 	add.w	r9, r4, #26
 80100aa:	9b08      	ldr	r3, [sp, #32]
 80100ac:	3b01      	subs	r3, #1
 80100ae:	4543      	cmp	r3, r8
 80100b0:	dc09      	bgt.n	80100c6 <_printf_float+0x22e>
 80100b2:	6823      	ldr	r3, [r4, #0]
 80100b4:	079b      	lsls	r3, r3, #30
 80100b6:	f100 8108 	bmi.w	80102ca <_printf_float+0x432>
 80100ba:	68e0      	ldr	r0, [r4, #12]
 80100bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100be:	4298      	cmp	r0, r3
 80100c0:	bfb8      	it	lt
 80100c2:	4618      	movlt	r0, r3
 80100c4:	e738      	b.n	800ff38 <_printf_float+0xa0>
 80100c6:	2301      	movs	r3, #1
 80100c8:	464a      	mov	r2, r9
 80100ca:	4631      	mov	r1, r6
 80100cc:	4628      	mov	r0, r5
 80100ce:	47b8      	blx	r7
 80100d0:	3001      	adds	r0, #1
 80100d2:	f43f af2f 	beq.w	800ff34 <_printf_float+0x9c>
 80100d6:	f108 0801 	add.w	r8, r8, #1
 80100da:	e7e6      	b.n	80100aa <_printf_float+0x212>
 80100dc:	9b07      	ldr	r3, [sp, #28]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	dc3c      	bgt.n	801015c <_printf_float+0x2c4>
 80100e2:	4a1d      	ldr	r2, [pc, #116]	; (8010158 <_printf_float+0x2c0>)
 80100e4:	2301      	movs	r3, #1
 80100e6:	4631      	mov	r1, r6
 80100e8:	4628      	mov	r0, r5
 80100ea:	47b8      	blx	r7
 80100ec:	3001      	adds	r0, #1
 80100ee:	f43f af21 	beq.w	800ff34 <_printf_float+0x9c>
 80100f2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80100f6:	4313      	orrs	r3, r2
 80100f8:	d102      	bne.n	8010100 <_printf_float+0x268>
 80100fa:	6823      	ldr	r3, [r4, #0]
 80100fc:	07d9      	lsls	r1, r3, #31
 80100fe:	d5d8      	bpl.n	80100b2 <_printf_float+0x21a>
 8010100:	4653      	mov	r3, sl
 8010102:	465a      	mov	r2, fp
 8010104:	4631      	mov	r1, r6
 8010106:	4628      	mov	r0, r5
 8010108:	47b8      	blx	r7
 801010a:	3001      	adds	r0, #1
 801010c:	f43f af12 	beq.w	800ff34 <_printf_float+0x9c>
 8010110:	f04f 0900 	mov.w	r9, #0
 8010114:	f104 0a1a 	add.w	sl, r4, #26
 8010118:	9b07      	ldr	r3, [sp, #28]
 801011a:	425b      	negs	r3, r3
 801011c:	454b      	cmp	r3, r9
 801011e:	dc01      	bgt.n	8010124 <_printf_float+0x28c>
 8010120:	9b08      	ldr	r3, [sp, #32]
 8010122:	e795      	b.n	8010050 <_printf_float+0x1b8>
 8010124:	2301      	movs	r3, #1
 8010126:	4652      	mov	r2, sl
 8010128:	4631      	mov	r1, r6
 801012a:	4628      	mov	r0, r5
 801012c:	47b8      	blx	r7
 801012e:	3001      	adds	r0, #1
 8010130:	f43f af00 	beq.w	800ff34 <_printf_float+0x9c>
 8010134:	f109 0901 	add.w	r9, r9, #1
 8010138:	e7ee      	b.n	8010118 <_printf_float+0x280>
 801013a:	bf00      	nop
 801013c:	f3af 8000 	nop.w
 8010140:	ffffffff 	.word	0xffffffff
 8010144:	7fefffff 	.word	0x7fefffff
 8010148:	08014094 	.word	0x08014094
 801014c:	08014098 	.word	0x08014098
 8010150:	080140a0 	.word	0x080140a0
 8010154:	0801409c 	.word	0x0801409c
 8010158:	080140a4 	.word	0x080140a4
 801015c:	9a08      	ldr	r2, [sp, #32]
 801015e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010160:	429a      	cmp	r2, r3
 8010162:	bfa8      	it	ge
 8010164:	461a      	movge	r2, r3
 8010166:	2a00      	cmp	r2, #0
 8010168:	4691      	mov	r9, r2
 801016a:	dc38      	bgt.n	80101de <_printf_float+0x346>
 801016c:	2300      	movs	r3, #0
 801016e:	9305      	str	r3, [sp, #20]
 8010170:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010174:	f104 021a 	add.w	r2, r4, #26
 8010178:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801017a:	9905      	ldr	r1, [sp, #20]
 801017c:	9304      	str	r3, [sp, #16]
 801017e:	eba3 0309 	sub.w	r3, r3, r9
 8010182:	428b      	cmp	r3, r1
 8010184:	dc33      	bgt.n	80101ee <_printf_float+0x356>
 8010186:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801018a:	429a      	cmp	r2, r3
 801018c:	db3c      	blt.n	8010208 <_printf_float+0x370>
 801018e:	6823      	ldr	r3, [r4, #0]
 8010190:	07da      	lsls	r2, r3, #31
 8010192:	d439      	bmi.n	8010208 <_printf_float+0x370>
 8010194:	9a08      	ldr	r2, [sp, #32]
 8010196:	9b04      	ldr	r3, [sp, #16]
 8010198:	9907      	ldr	r1, [sp, #28]
 801019a:	1ad3      	subs	r3, r2, r3
 801019c:	eba2 0901 	sub.w	r9, r2, r1
 80101a0:	4599      	cmp	r9, r3
 80101a2:	bfa8      	it	ge
 80101a4:	4699      	movge	r9, r3
 80101a6:	f1b9 0f00 	cmp.w	r9, #0
 80101aa:	dc35      	bgt.n	8010218 <_printf_float+0x380>
 80101ac:	f04f 0800 	mov.w	r8, #0
 80101b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80101b4:	f104 0a1a 	add.w	sl, r4, #26
 80101b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80101bc:	1a9b      	subs	r3, r3, r2
 80101be:	eba3 0309 	sub.w	r3, r3, r9
 80101c2:	4543      	cmp	r3, r8
 80101c4:	f77f af75 	ble.w	80100b2 <_printf_float+0x21a>
 80101c8:	2301      	movs	r3, #1
 80101ca:	4652      	mov	r2, sl
 80101cc:	4631      	mov	r1, r6
 80101ce:	4628      	mov	r0, r5
 80101d0:	47b8      	blx	r7
 80101d2:	3001      	adds	r0, #1
 80101d4:	f43f aeae 	beq.w	800ff34 <_printf_float+0x9c>
 80101d8:	f108 0801 	add.w	r8, r8, #1
 80101dc:	e7ec      	b.n	80101b8 <_printf_float+0x320>
 80101de:	4613      	mov	r3, r2
 80101e0:	4631      	mov	r1, r6
 80101e2:	4642      	mov	r2, r8
 80101e4:	4628      	mov	r0, r5
 80101e6:	47b8      	blx	r7
 80101e8:	3001      	adds	r0, #1
 80101ea:	d1bf      	bne.n	801016c <_printf_float+0x2d4>
 80101ec:	e6a2      	b.n	800ff34 <_printf_float+0x9c>
 80101ee:	2301      	movs	r3, #1
 80101f0:	4631      	mov	r1, r6
 80101f2:	4628      	mov	r0, r5
 80101f4:	9204      	str	r2, [sp, #16]
 80101f6:	47b8      	blx	r7
 80101f8:	3001      	adds	r0, #1
 80101fa:	f43f ae9b 	beq.w	800ff34 <_printf_float+0x9c>
 80101fe:	9b05      	ldr	r3, [sp, #20]
 8010200:	9a04      	ldr	r2, [sp, #16]
 8010202:	3301      	adds	r3, #1
 8010204:	9305      	str	r3, [sp, #20]
 8010206:	e7b7      	b.n	8010178 <_printf_float+0x2e0>
 8010208:	4653      	mov	r3, sl
 801020a:	465a      	mov	r2, fp
 801020c:	4631      	mov	r1, r6
 801020e:	4628      	mov	r0, r5
 8010210:	47b8      	blx	r7
 8010212:	3001      	adds	r0, #1
 8010214:	d1be      	bne.n	8010194 <_printf_float+0x2fc>
 8010216:	e68d      	b.n	800ff34 <_printf_float+0x9c>
 8010218:	9a04      	ldr	r2, [sp, #16]
 801021a:	464b      	mov	r3, r9
 801021c:	4442      	add	r2, r8
 801021e:	4631      	mov	r1, r6
 8010220:	4628      	mov	r0, r5
 8010222:	47b8      	blx	r7
 8010224:	3001      	adds	r0, #1
 8010226:	d1c1      	bne.n	80101ac <_printf_float+0x314>
 8010228:	e684      	b.n	800ff34 <_printf_float+0x9c>
 801022a:	9a08      	ldr	r2, [sp, #32]
 801022c:	2a01      	cmp	r2, #1
 801022e:	dc01      	bgt.n	8010234 <_printf_float+0x39c>
 8010230:	07db      	lsls	r3, r3, #31
 8010232:	d537      	bpl.n	80102a4 <_printf_float+0x40c>
 8010234:	2301      	movs	r3, #1
 8010236:	4642      	mov	r2, r8
 8010238:	4631      	mov	r1, r6
 801023a:	4628      	mov	r0, r5
 801023c:	47b8      	blx	r7
 801023e:	3001      	adds	r0, #1
 8010240:	f43f ae78 	beq.w	800ff34 <_printf_float+0x9c>
 8010244:	4653      	mov	r3, sl
 8010246:	465a      	mov	r2, fp
 8010248:	4631      	mov	r1, r6
 801024a:	4628      	mov	r0, r5
 801024c:	47b8      	blx	r7
 801024e:	3001      	adds	r0, #1
 8010250:	f43f ae70 	beq.w	800ff34 <_printf_float+0x9c>
 8010254:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8010258:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801025c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010260:	d01b      	beq.n	801029a <_printf_float+0x402>
 8010262:	9b08      	ldr	r3, [sp, #32]
 8010264:	f108 0201 	add.w	r2, r8, #1
 8010268:	3b01      	subs	r3, #1
 801026a:	4631      	mov	r1, r6
 801026c:	4628      	mov	r0, r5
 801026e:	47b8      	blx	r7
 8010270:	3001      	adds	r0, #1
 8010272:	d10e      	bne.n	8010292 <_printf_float+0x3fa>
 8010274:	e65e      	b.n	800ff34 <_printf_float+0x9c>
 8010276:	2301      	movs	r3, #1
 8010278:	464a      	mov	r2, r9
 801027a:	4631      	mov	r1, r6
 801027c:	4628      	mov	r0, r5
 801027e:	47b8      	blx	r7
 8010280:	3001      	adds	r0, #1
 8010282:	f43f ae57 	beq.w	800ff34 <_printf_float+0x9c>
 8010286:	f108 0801 	add.w	r8, r8, #1
 801028a:	9b08      	ldr	r3, [sp, #32]
 801028c:	3b01      	subs	r3, #1
 801028e:	4543      	cmp	r3, r8
 8010290:	dcf1      	bgt.n	8010276 <_printf_float+0x3de>
 8010292:	9b04      	ldr	r3, [sp, #16]
 8010294:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010298:	e6db      	b.n	8010052 <_printf_float+0x1ba>
 801029a:	f04f 0800 	mov.w	r8, #0
 801029e:	f104 091a 	add.w	r9, r4, #26
 80102a2:	e7f2      	b.n	801028a <_printf_float+0x3f2>
 80102a4:	2301      	movs	r3, #1
 80102a6:	4642      	mov	r2, r8
 80102a8:	e7df      	b.n	801026a <_printf_float+0x3d2>
 80102aa:	2301      	movs	r3, #1
 80102ac:	464a      	mov	r2, r9
 80102ae:	4631      	mov	r1, r6
 80102b0:	4628      	mov	r0, r5
 80102b2:	47b8      	blx	r7
 80102b4:	3001      	adds	r0, #1
 80102b6:	f43f ae3d 	beq.w	800ff34 <_printf_float+0x9c>
 80102ba:	f108 0801 	add.w	r8, r8, #1
 80102be:	68e3      	ldr	r3, [r4, #12]
 80102c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80102c2:	1a5b      	subs	r3, r3, r1
 80102c4:	4543      	cmp	r3, r8
 80102c6:	dcf0      	bgt.n	80102aa <_printf_float+0x412>
 80102c8:	e6f7      	b.n	80100ba <_printf_float+0x222>
 80102ca:	f04f 0800 	mov.w	r8, #0
 80102ce:	f104 0919 	add.w	r9, r4, #25
 80102d2:	e7f4      	b.n	80102be <_printf_float+0x426>

080102d4 <_printf_common>:
 80102d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102d8:	4616      	mov	r6, r2
 80102da:	4699      	mov	r9, r3
 80102dc:	688a      	ldr	r2, [r1, #8]
 80102de:	690b      	ldr	r3, [r1, #16]
 80102e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80102e4:	4293      	cmp	r3, r2
 80102e6:	bfb8      	it	lt
 80102e8:	4613      	movlt	r3, r2
 80102ea:	6033      	str	r3, [r6, #0]
 80102ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80102f0:	4607      	mov	r7, r0
 80102f2:	460c      	mov	r4, r1
 80102f4:	b10a      	cbz	r2, 80102fa <_printf_common+0x26>
 80102f6:	3301      	adds	r3, #1
 80102f8:	6033      	str	r3, [r6, #0]
 80102fa:	6823      	ldr	r3, [r4, #0]
 80102fc:	0699      	lsls	r1, r3, #26
 80102fe:	bf42      	ittt	mi
 8010300:	6833      	ldrmi	r3, [r6, #0]
 8010302:	3302      	addmi	r3, #2
 8010304:	6033      	strmi	r3, [r6, #0]
 8010306:	6825      	ldr	r5, [r4, #0]
 8010308:	f015 0506 	ands.w	r5, r5, #6
 801030c:	d106      	bne.n	801031c <_printf_common+0x48>
 801030e:	f104 0a19 	add.w	sl, r4, #25
 8010312:	68e3      	ldr	r3, [r4, #12]
 8010314:	6832      	ldr	r2, [r6, #0]
 8010316:	1a9b      	subs	r3, r3, r2
 8010318:	42ab      	cmp	r3, r5
 801031a:	dc26      	bgt.n	801036a <_printf_common+0x96>
 801031c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010320:	1e13      	subs	r3, r2, #0
 8010322:	6822      	ldr	r2, [r4, #0]
 8010324:	bf18      	it	ne
 8010326:	2301      	movne	r3, #1
 8010328:	0692      	lsls	r2, r2, #26
 801032a:	d42b      	bmi.n	8010384 <_printf_common+0xb0>
 801032c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010330:	4649      	mov	r1, r9
 8010332:	4638      	mov	r0, r7
 8010334:	47c0      	blx	r8
 8010336:	3001      	adds	r0, #1
 8010338:	d01e      	beq.n	8010378 <_printf_common+0xa4>
 801033a:	6823      	ldr	r3, [r4, #0]
 801033c:	68e5      	ldr	r5, [r4, #12]
 801033e:	6832      	ldr	r2, [r6, #0]
 8010340:	f003 0306 	and.w	r3, r3, #6
 8010344:	2b04      	cmp	r3, #4
 8010346:	bf08      	it	eq
 8010348:	1aad      	subeq	r5, r5, r2
 801034a:	68a3      	ldr	r3, [r4, #8]
 801034c:	6922      	ldr	r2, [r4, #16]
 801034e:	bf0c      	ite	eq
 8010350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010354:	2500      	movne	r5, #0
 8010356:	4293      	cmp	r3, r2
 8010358:	bfc4      	itt	gt
 801035a:	1a9b      	subgt	r3, r3, r2
 801035c:	18ed      	addgt	r5, r5, r3
 801035e:	2600      	movs	r6, #0
 8010360:	341a      	adds	r4, #26
 8010362:	42b5      	cmp	r5, r6
 8010364:	d11a      	bne.n	801039c <_printf_common+0xc8>
 8010366:	2000      	movs	r0, #0
 8010368:	e008      	b.n	801037c <_printf_common+0xa8>
 801036a:	2301      	movs	r3, #1
 801036c:	4652      	mov	r2, sl
 801036e:	4649      	mov	r1, r9
 8010370:	4638      	mov	r0, r7
 8010372:	47c0      	blx	r8
 8010374:	3001      	adds	r0, #1
 8010376:	d103      	bne.n	8010380 <_printf_common+0xac>
 8010378:	f04f 30ff 	mov.w	r0, #4294967295
 801037c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010380:	3501      	adds	r5, #1
 8010382:	e7c6      	b.n	8010312 <_printf_common+0x3e>
 8010384:	18e1      	adds	r1, r4, r3
 8010386:	1c5a      	adds	r2, r3, #1
 8010388:	2030      	movs	r0, #48	; 0x30
 801038a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801038e:	4422      	add	r2, r4
 8010390:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010398:	3302      	adds	r3, #2
 801039a:	e7c7      	b.n	801032c <_printf_common+0x58>
 801039c:	2301      	movs	r3, #1
 801039e:	4622      	mov	r2, r4
 80103a0:	4649      	mov	r1, r9
 80103a2:	4638      	mov	r0, r7
 80103a4:	47c0      	blx	r8
 80103a6:	3001      	adds	r0, #1
 80103a8:	d0e6      	beq.n	8010378 <_printf_common+0xa4>
 80103aa:	3601      	adds	r6, #1
 80103ac:	e7d9      	b.n	8010362 <_printf_common+0x8e>
	...

080103b0 <_printf_i>:
 80103b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80103b4:	460c      	mov	r4, r1
 80103b6:	4691      	mov	r9, r2
 80103b8:	7e27      	ldrb	r7, [r4, #24]
 80103ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80103bc:	2f78      	cmp	r7, #120	; 0x78
 80103be:	4680      	mov	r8, r0
 80103c0:	469a      	mov	sl, r3
 80103c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80103c6:	d807      	bhi.n	80103d8 <_printf_i+0x28>
 80103c8:	2f62      	cmp	r7, #98	; 0x62
 80103ca:	d80a      	bhi.n	80103e2 <_printf_i+0x32>
 80103cc:	2f00      	cmp	r7, #0
 80103ce:	f000 80d8 	beq.w	8010582 <_printf_i+0x1d2>
 80103d2:	2f58      	cmp	r7, #88	; 0x58
 80103d4:	f000 80a3 	beq.w	801051e <_printf_i+0x16e>
 80103d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80103dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80103e0:	e03a      	b.n	8010458 <_printf_i+0xa8>
 80103e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80103e6:	2b15      	cmp	r3, #21
 80103e8:	d8f6      	bhi.n	80103d8 <_printf_i+0x28>
 80103ea:	a001      	add	r0, pc, #4	; (adr r0, 80103f0 <_printf_i+0x40>)
 80103ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80103f0:	08010449 	.word	0x08010449
 80103f4:	0801045d 	.word	0x0801045d
 80103f8:	080103d9 	.word	0x080103d9
 80103fc:	080103d9 	.word	0x080103d9
 8010400:	080103d9 	.word	0x080103d9
 8010404:	080103d9 	.word	0x080103d9
 8010408:	0801045d 	.word	0x0801045d
 801040c:	080103d9 	.word	0x080103d9
 8010410:	080103d9 	.word	0x080103d9
 8010414:	080103d9 	.word	0x080103d9
 8010418:	080103d9 	.word	0x080103d9
 801041c:	08010569 	.word	0x08010569
 8010420:	0801048d 	.word	0x0801048d
 8010424:	0801054b 	.word	0x0801054b
 8010428:	080103d9 	.word	0x080103d9
 801042c:	080103d9 	.word	0x080103d9
 8010430:	0801058b 	.word	0x0801058b
 8010434:	080103d9 	.word	0x080103d9
 8010438:	0801048d 	.word	0x0801048d
 801043c:	080103d9 	.word	0x080103d9
 8010440:	080103d9 	.word	0x080103d9
 8010444:	08010553 	.word	0x08010553
 8010448:	680b      	ldr	r3, [r1, #0]
 801044a:	1d1a      	adds	r2, r3, #4
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	600a      	str	r2, [r1, #0]
 8010450:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010458:	2301      	movs	r3, #1
 801045a:	e0a3      	b.n	80105a4 <_printf_i+0x1f4>
 801045c:	6825      	ldr	r5, [r4, #0]
 801045e:	6808      	ldr	r0, [r1, #0]
 8010460:	062e      	lsls	r6, r5, #24
 8010462:	f100 0304 	add.w	r3, r0, #4
 8010466:	d50a      	bpl.n	801047e <_printf_i+0xce>
 8010468:	6805      	ldr	r5, [r0, #0]
 801046a:	600b      	str	r3, [r1, #0]
 801046c:	2d00      	cmp	r5, #0
 801046e:	da03      	bge.n	8010478 <_printf_i+0xc8>
 8010470:	232d      	movs	r3, #45	; 0x2d
 8010472:	426d      	negs	r5, r5
 8010474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010478:	485e      	ldr	r0, [pc, #376]	; (80105f4 <_printf_i+0x244>)
 801047a:	230a      	movs	r3, #10
 801047c:	e019      	b.n	80104b2 <_printf_i+0x102>
 801047e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010482:	6805      	ldr	r5, [r0, #0]
 8010484:	600b      	str	r3, [r1, #0]
 8010486:	bf18      	it	ne
 8010488:	b22d      	sxthne	r5, r5
 801048a:	e7ef      	b.n	801046c <_printf_i+0xbc>
 801048c:	680b      	ldr	r3, [r1, #0]
 801048e:	6825      	ldr	r5, [r4, #0]
 8010490:	1d18      	adds	r0, r3, #4
 8010492:	6008      	str	r0, [r1, #0]
 8010494:	0628      	lsls	r0, r5, #24
 8010496:	d501      	bpl.n	801049c <_printf_i+0xec>
 8010498:	681d      	ldr	r5, [r3, #0]
 801049a:	e002      	b.n	80104a2 <_printf_i+0xf2>
 801049c:	0669      	lsls	r1, r5, #25
 801049e:	d5fb      	bpl.n	8010498 <_printf_i+0xe8>
 80104a0:	881d      	ldrh	r5, [r3, #0]
 80104a2:	4854      	ldr	r0, [pc, #336]	; (80105f4 <_printf_i+0x244>)
 80104a4:	2f6f      	cmp	r7, #111	; 0x6f
 80104a6:	bf0c      	ite	eq
 80104a8:	2308      	moveq	r3, #8
 80104aa:	230a      	movne	r3, #10
 80104ac:	2100      	movs	r1, #0
 80104ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80104b2:	6866      	ldr	r6, [r4, #4]
 80104b4:	60a6      	str	r6, [r4, #8]
 80104b6:	2e00      	cmp	r6, #0
 80104b8:	bfa2      	ittt	ge
 80104ba:	6821      	ldrge	r1, [r4, #0]
 80104bc:	f021 0104 	bicge.w	r1, r1, #4
 80104c0:	6021      	strge	r1, [r4, #0]
 80104c2:	b90d      	cbnz	r5, 80104c8 <_printf_i+0x118>
 80104c4:	2e00      	cmp	r6, #0
 80104c6:	d04d      	beq.n	8010564 <_printf_i+0x1b4>
 80104c8:	4616      	mov	r6, r2
 80104ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80104ce:	fb03 5711 	mls	r7, r3, r1, r5
 80104d2:	5dc7      	ldrb	r7, [r0, r7]
 80104d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80104d8:	462f      	mov	r7, r5
 80104da:	42bb      	cmp	r3, r7
 80104dc:	460d      	mov	r5, r1
 80104de:	d9f4      	bls.n	80104ca <_printf_i+0x11a>
 80104e0:	2b08      	cmp	r3, #8
 80104e2:	d10b      	bne.n	80104fc <_printf_i+0x14c>
 80104e4:	6823      	ldr	r3, [r4, #0]
 80104e6:	07df      	lsls	r7, r3, #31
 80104e8:	d508      	bpl.n	80104fc <_printf_i+0x14c>
 80104ea:	6923      	ldr	r3, [r4, #16]
 80104ec:	6861      	ldr	r1, [r4, #4]
 80104ee:	4299      	cmp	r1, r3
 80104f0:	bfde      	ittt	le
 80104f2:	2330      	movle	r3, #48	; 0x30
 80104f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80104f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80104fc:	1b92      	subs	r2, r2, r6
 80104fe:	6122      	str	r2, [r4, #16]
 8010500:	f8cd a000 	str.w	sl, [sp]
 8010504:	464b      	mov	r3, r9
 8010506:	aa03      	add	r2, sp, #12
 8010508:	4621      	mov	r1, r4
 801050a:	4640      	mov	r0, r8
 801050c:	f7ff fee2 	bl	80102d4 <_printf_common>
 8010510:	3001      	adds	r0, #1
 8010512:	d14c      	bne.n	80105ae <_printf_i+0x1fe>
 8010514:	f04f 30ff 	mov.w	r0, #4294967295
 8010518:	b004      	add	sp, #16
 801051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801051e:	4835      	ldr	r0, [pc, #212]	; (80105f4 <_printf_i+0x244>)
 8010520:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010524:	6823      	ldr	r3, [r4, #0]
 8010526:	680e      	ldr	r6, [r1, #0]
 8010528:	061f      	lsls	r7, r3, #24
 801052a:	f856 5b04 	ldr.w	r5, [r6], #4
 801052e:	600e      	str	r6, [r1, #0]
 8010530:	d514      	bpl.n	801055c <_printf_i+0x1ac>
 8010532:	07d9      	lsls	r1, r3, #31
 8010534:	bf44      	itt	mi
 8010536:	f043 0320 	orrmi.w	r3, r3, #32
 801053a:	6023      	strmi	r3, [r4, #0]
 801053c:	b91d      	cbnz	r5, 8010546 <_printf_i+0x196>
 801053e:	6823      	ldr	r3, [r4, #0]
 8010540:	f023 0320 	bic.w	r3, r3, #32
 8010544:	6023      	str	r3, [r4, #0]
 8010546:	2310      	movs	r3, #16
 8010548:	e7b0      	b.n	80104ac <_printf_i+0xfc>
 801054a:	6823      	ldr	r3, [r4, #0]
 801054c:	f043 0320 	orr.w	r3, r3, #32
 8010550:	6023      	str	r3, [r4, #0]
 8010552:	2378      	movs	r3, #120	; 0x78
 8010554:	4828      	ldr	r0, [pc, #160]	; (80105f8 <_printf_i+0x248>)
 8010556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801055a:	e7e3      	b.n	8010524 <_printf_i+0x174>
 801055c:	065e      	lsls	r6, r3, #25
 801055e:	bf48      	it	mi
 8010560:	b2ad      	uxthmi	r5, r5
 8010562:	e7e6      	b.n	8010532 <_printf_i+0x182>
 8010564:	4616      	mov	r6, r2
 8010566:	e7bb      	b.n	80104e0 <_printf_i+0x130>
 8010568:	680b      	ldr	r3, [r1, #0]
 801056a:	6826      	ldr	r6, [r4, #0]
 801056c:	6960      	ldr	r0, [r4, #20]
 801056e:	1d1d      	adds	r5, r3, #4
 8010570:	600d      	str	r5, [r1, #0]
 8010572:	0635      	lsls	r5, r6, #24
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	d501      	bpl.n	801057c <_printf_i+0x1cc>
 8010578:	6018      	str	r0, [r3, #0]
 801057a:	e002      	b.n	8010582 <_printf_i+0x1d2>
 801057c:	0671      	lsls	r1, r6, #25
 801057e:	d5fb      	bpl.n	8010578 <_printf_i+0x1c8>
 8010580:	8018      	strh	r0, [r3, #0]
 8010582:	2300      	movs	r3, #0
 8010584:	6123      	str	r3, [r4, #16]
 8010586:	4616      	mov	r6, r2
 8010588:	e7ba      	b.n	8010500 <_printf_i+0x150>
 801058a:	680b      	ldr	r3, [r1, #0]
 801058c:	1d1a      	adds	r2, r3, #4
 801058e:	600a      	str	r2, [r1, #0]
 8010590:	681e      	ldr	r6, [r3, #0]
 8010592:	6862      	ldr	r2, [r4, #4]
 8010594:	2100      	movs	r1, #0
 8010596:	4630      	mov	r0, r6
 8010598:	f7ef feaa 	bl	80002f0 <memchr>
 801059c:	b108      	cbz	r0, 80105a2 <_printf_i+0x1f2>
 801059e:	1b80      	subs	r0, r0, r6
 80105a0:	6060      	str	r0, [r4, #4]
 80105a2:	6863      	ldr	r3, [r4, #4]
 80105a4:	6123      	str	r3, [r4, #16]
 80105a6:	2300      	movs	r3, #0
 80105a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80105ac:	e7a8      	b.n	8010500 <_printf_i+0x150>
 80105ae:	6923      	ldr	r3, [r4, #16]
 80105b0:	4632      	mov	r2, r6
 80105b2:	4649      	mov	r1, r9
 80105b4:	4640      	mov	r0, r8
 80105b6:	47d0      	blx	sl
 80105b8:	3001      	adds	r0, #1
 80105ba:	d0ab      	beq.n	8010514 <_printf_i+0x164>
 80105bc:	6823      	ldr	r3, [r4, #0]
 80105be:	079b      	lsls	r3, r3, #30
 80105c0:	d413      	bmi.n	80105ea <_printf_i+0x23a>
 80105c2:	68e0      	ldr	r0, [r4, #12]
 80105c4:	9b03      	ldr	r3, [sp, #12]
 80105c6:	4298      	cmp	r0, r3
 80105c8:	bfb8      	it	lt
 80105ca:	4618      	movlt	r0, r3
 80105cc:	e7a4      	b.n	8010518 <_printf_i+0x168>
 80105ce:	2301      	movs	r3, #1
 80105d0:	4632      	mov	r2, r6
 80105d2:	4649      	mov	r1, r9
 80105d4:	4640      	mov	r0, r8
 80105d6:	47d0      	blx	sl
 80105d8:	3001      	adds	r0, #1
 80105da:	d09b      	beq.n	8010514 <_printf_i+0x164>
 80105dc:	3501      	adds	r5, #1
 80105de:	68e3      	ldr	r3, [r4, #12]
 80105e0:	9903      	ldr	r1, [sp, #12]
 80105e2:	1a5b      	subs	r3, r3, r1
 80105e4:	42ab      	cmp	r3, r5
 80105e6:	dcf2      	bgt.n	80105ce <_printf_i+0x21e>
 80105e8:	e7eb      	b.n	80105c2 <_printf_i+0x212>
 80105ea:	2500      	movs	r5, #0
 80105ec:	f104 0619 	add.w	r6, r4, #25
 80105f0:	e7f5      	b.n	80105de <_printf_i+0x22e>
 80105f2:	bf00      	nop
 80105f4:	080140a6 	.word	0x080140a6
 80105f8:	080140b7 	.word	0x080140b7

080105fc <quorem>:
 80105fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010600:	6903      	ldr	r3, [r0, #16]
 8010602:	690c      	ldr	r4, [r1, #16]
 8010604:	42a3      	cmp	r3, r4
 8010606:	4607      	mov	r7, r0
 8010608:	f2c0 8081 	blt.w	801070e <quorem+0x112>
 801060c:	3c01      	subs	r4, #1
 801060e:	f101 0814 	add.w	r8, r1, #20
 8010612:	f100 0514 	add.w	r5, r0, #20
 8010616:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801061a:	9301      	str	r3, [sp, #4]
 801061c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010620:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010624:	3301      	adds	r3, #1
 8010626:	429a      	cmp	r2, r3
 8010628:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801062c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010630:	fbb2 f6f3 	udiv	r6, r2, r3
 8010634:	d331      	bcc.n	801069a <quorem+0x9e>
 8010636:	f04f 0e00 	mov.w	lr, #0
 801063a:	4640      	mov	r0, r8
 801063c:	46ac      	mov	ip, r5
 801063e:	46f2      	mov	sl, lr
 8010640:	f850 2b04 	ldr.w	r2, [r0], #4
 8010644:	b293      	uxth	r3, r2
 8010646:	fb06 e303 	mla	r3, r6, r3, lr
 801064a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801064e:	b29b      	uxth	r3, r3
 8010650:	ebaa 0303 	sub.w	r3, sl, r3
 8010654:	0c12      	lsrs	r2, r2, #16
 8010656:	f8dc a000 	ldr.w	sl, [ip]
 801065a:	fb06 e202 	mla	r2, r6, r2, lr
 801065e:	fa13 f38a 	uxtah	r3, r3, sl
 8010662:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010666:	fa1f fa82 	uxth.w	sl, r2
 801066a:	f8dc 2000 	ldr.w	r2, [ip]
 801066e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8010672:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010676:	b29b      	uxth	r3, r3
 8010678:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801067c:	4581      	cmp	r9, r0
 801067e:	f84c 3b04 	str.w	r3, [ip], #4
 8010682:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010686:	d2db      	bcs.n	8010640 <quorem+0x44>
 8010688:	f855 300b 	ldr.w	r3, [r5, fp]
 801068c:	b92b      	cbnz	r3, 801069a <quorem+0x9e>
 801068e:	9b01      	ldr	r3, [sp, #4]
 8010690:	3b04      	subs	r3, #4
 8010692:	429d      	cmp	r5, r3
 8010694:	461a      	mov	r2, r3
 8010696:	d32e      	bcc.n	80106f6 <quorem+0xfa>
 8010698:	613c      	str	r4, [r7, #16]
 801069a:	4638      	mov	r0, r7
 801069c:	f001 f848 	bl	8011730 <__mcmp>
 80106a0:	2800      	cmp	r0, #0
 80106a2:	db24      	blt.n	80106ee <quorem+0xf2>
 80106a4:	3601      	adds	r6, #1
 80106a6:	4628      	mov	r0, r5
 80106a8:	f04f 0c00 	mov.w	ip, #0
 80106ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80106b0:	f8d0 e000 	ldr.w	lr, [r0]
 80106b4:	b293      	uxth	r3, r2
 80106b6:	ebac 0303 	sub.w	r3, ip, r3
 80106ba:	0c12      	lsrs	r2, r2, #16
 80106bc:	fa13 f38e 	uxtah	r3, r3, lr
 80106c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80106c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80106c8:	b29b      	uxth	r3, r3
 80106ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80106ce:	45c1      	cmp	r9, r8
 80106d0:	f840 3b04 	str.w	r3, [r0], #4
 80106d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80106d8:	d2e8      	bcs.n	80106ac <quorem+0xb0>
 80106da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80106de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80106e2:	b922      	cbnz	r2, 80106ee <quorem+0xf2>
 80106e4:	3b04      	subs	r3, #4
 80106e6:	429d      	cmp	r5, r3
 80106e8:	461a      	mov	r2, r3
 80106ea:	d30a      	bcc.n	8010702 <quorem+0x106>
 80106ec:	613c      	str	r4, [r7, #16]
 80106ee:	4630      	mov	r0, r6
 80106f0:	b003      	add	sp, #12
 80106f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106f6:	6812      	ldr	r2, [r2, #0]
 80106f8:	3b04      	subs	r3, #4
 80106fa:	2a00      	cmp	r2, #0
 80106fc:	d1cc      	bne.n	8010698 <quorem+0x9c>
 80106fe:	3c01      	subs	r4, #1
 8010700:	e7c7      	b.n	8010692 <quorem+0x96>
 8010702:	6812      	ldr	r2, [r2, #0]
 8010704:	3b04      	subs	r3, #4
 8010706:	2a00      	cmp	r2, #0
 8010708:	d1f0      	bne.n	80106ec <quorem+0xf0>
 801070a:	3c01      	subs	r4, #1
 801070c:	e7eb      	b.n	80106e6 <quorem+0xea>
 801070e:	2000      	movs	r0, #0
 8010710:	e7ee      	b.n	80106f0 <quorem+0xf4>
 8010712:	0000      	movs	r0, r0
 8010714:	0000      	movs	r0, r0
	...

08010718 <_dtoa_r>:
 8010718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801071c:	ec59 8b10 	vmov	r8, r9, d0
 8010720:	b095      	sub	sp, #84	; 0x54
 8010722:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010724:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8010726:	9107      	str	r1, [sp, #28]
 8010728:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801072c:	4606      	mov	r6, r0
 801072e:	9209      	str	r2, [sp, #36]	; 0x24
 8010730:	9310      	str	r3, [sp, #64]	; 0x40
 8010732:	b975      	cbnz	r5, 8010752 <_dtoa_r+0x3a>
 8010734:	2010      	movs	r0, #16
 8010736:	f000 fd75 	bl	8011224 <malloc>
 801073a:	4602      	mov	r2, r0
 801073c:	6270      	str	r0, [r6, #36]	; 0x24
 801073e:	b920      	cbnz	r0, 801074a <_dtoa_r+0x32>
 8010740:	4bab      	ldr	r3, [pc, #684]	; (80109f0 <_dtoa_r+0x2d8>)
 8010742:	21ea      	movs	r1, #234	; 0xea
 8010744:	48ab      	ldr	r0, [pc, #684]	; (80109f4 <_dtoa_r+0x2dc>)
 8010746:	f001 f9bd 	bl	8011ac4 <__assert_func>
 801074a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801074e:	6005      	str	r5, [r0, #0]
 8010750:	60c5      	str	r5, [r0, #12]
 8010752:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010754:	6819      	ldr	r1, [r3, #0]
 8010756:	b151      	cbz	r1, 801076e <_dtoa_r+0x56>
 8010758:	685a      	ldr	r2, [r3, #4]
 801075a:	604a      	str	r2, [r1, #4]
 801075c:	2301      	movs	r3, #1
 801075e:	4093      	lsls	r3, r2
 8010760:	608b      	str	r3, [r1, #8]
 8010762:	4630      	mov	r0, r6
 8010764:	f000 fda6 	bl	80112b4 <_Bfree>
 8010768:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801076a:	2200      	movs	r2, #0
 801076c:	601a      	str	r2, [r3, #0]
 801076e:	f1b9 0300 	subs.w	r3, r9, #0
 8010772:	bfbb      	ittet	lt
 8010774:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8010778:	9303      	strlt	r3, [sp, #12]
 801077a:	2300      	movge	r3, #0
 801077c:	2201      	movlt	r2, #1
 801077e:	bfac      	ite	ge
 8010780:	6023      	strge	r3, [r4, #0]
 8010782:	6022      	strlt	r2, [r4, #0]
 8010784:	4b9c      	ldr	r3, [pc, #624]	; (80109f8 <_dtoa_r+0x2e0>)
 8010786:	9c03      	ldr	r4, [sp, #12]
 8010788:	43a3      	bics	r3, r4
 801078a:	d11a      	bne.n	80107c2 <_dtoa_r+0xaa>
 801078c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801078e:	f242 730f 	movw	r3, #9999	; 0x270f
 8010792:	6013      	str	r3, [r2, #0]
 8010794:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8010798:	ea53 0308 	orrs.w	r3, r3, r8
 801079c:	f000 8512 	beq.w	80111c4 <_dtoa_r+0xaac>
 80107a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80107a2:	b953      	cbnz	r3, 80107ba <_dtoa_r+0xa2>
 80107a4:	4b95      	ldr	r3, [pc, #596]	; (80109fc <_dtoa_r+0x2e4>)
 80107a6:	e01f      	b.n	80107e8 <_dtoa_r+0xd0>
 80107a8:	4b95      	ldr	r3, [pc, #596]	; (8010a00 <_dtoa_r+0x2e8>)
 80107aa:	9300      	str	r3, [sp, #0]
 80107ac:	3308      	adds	r3, #8
 80107ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80107b0:	6013      	str	r3, [r2, #0]
 80107b2:	9800      	ldr	r0, [sp, #0]
 80107b4:	b015      	add	sp, #84	; 0x54
 80107b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ba:	4b90      	ldr	r3, [pc, #576]	; (80109fc <_dtoa_r+0x2e4>)
 80107bc:	9300      	str	r3, [sp, #0]
 80107be:	3303      	adds	r3, #3
 80107c0:	e7f5      	b.n	80107ae <_dtoa_r+0x96>
 80107c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80107c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80107ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80107d2:	d10b      	bne.n	80107ec <_dtoa_r+0xd4>
 80107d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80107d6:	2301      	movs	r3, #1
 80107d8:	6013      	str	r3, [r2, #0]
 80107da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80107dc:	2b00      	cmp	r3, #0
 80107de:	f000 84ee 	beq.w	80111be <_dtoa_r+0xaa6>
 80107e2:	4888      	ldr	r0, [pc, #544]	; (8010a04 <_dtoa_r+0x2ec>)
 80107e4:	6018      	str	r0, [r3, #0]
 80107e6:	1e43      	subs	r3, r0, #1
 80107e8:	9300      	str	r3, [sp, #0]
 80107ea:	e7e2      	b.n	80107b2 <_dtoa_r+0x9a>
 80107ec:	a913      	add	r1, sp, #76	; 0x4c
 80107ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80107f2:	aa12      	add	r2, sp, #72	; 0x48
 80107f4:	4630      	mov	r0, r6
 80107f6:	f001 f83f 	bl	8011878 <__d2b>
 80107fa:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80107fe:	4605      	mov	r5, r0
 8010800:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010802:	2900      	cmp	r1, #0
 8010804:	d047      	beq.n	8010896 <_dtoa_r+0x17e>
 8010806:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8010808:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801080c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8010810:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8010814:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010818:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801081c:	2400      	movs	r4, #0
 801081e:	ec43 2b16 	vmov	d6, r2, r3
 8010822:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8010826:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80109d8 <_dtoa_r+0x2c0>
 801082a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801082e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80109e0 <_dtoa_r+0x2c8>
 8010832:	eea7 6b05 	vfma.f64	d6, d7, d5
 8010836:	eeb0 7b46 	vmov.f64	d7, d6
 801083a:	ee06 1a90 	vmov	s13, r1
 801083e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8010842:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80109e8 <_dtoa_r+0x2d0>
 8010846:	eea5 7b06 	vfma.f64	d7, d5, d6
 801084a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801084e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010856:	ee16 ba90 	vmov	fp, s13
 801085a:	9411      	str	r4, [sp, #68]	; 0x44
 801085c:	d508      	bpl.n	8010870 <_dtoa_r+0x158>
 801085e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010862:	eeb4 6b47 	vcmp.f64	d6, d7
 8010866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801086a:	bf18      	it	ne
 801086c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8010870:	f1bb 0f16 	cmp.w	fp, #22
 8010874:	d832      	bhi.n	80108dc <_dtoa_r+0x1c4>
 8010876:	4b64      	ldr	r3, [pc, #400]	; (8010a08 <_dtoa_r+0x2f0>)
 8010878:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801087c:	ed93 7b00 	vldr	d7, [r3]
 8010880:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010884:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801088c:	d501      	bpl.n	8010892 <_dtoa_r+0x17a>
 801088e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010892:	2300      	movs	r3, #0
 8010894:	e023      	b.n	80108de <_dtoa_r+0x1c6>
 8010896:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8010898:	4401      	add	r1, r0
 801089a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801089e:	2b20      	cmp	r3, #32
 80108a0:	bfc3      	ittte	gt
 80108a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80108a6:	fa04 f303 	lslgt.w	r3, r4, r3
 80108aa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80108ae:	f1c3 0320 	rsble	r3, r3, #32
 80108b2:	bfc6      	itte	gt
 80108b4:	fa28 f804 	lsrgt.w	r8, r8, r4
 80108b8:	ea43 0308 	orrgt.w	r3, r3, r8
 80108bc:	fa08 f303 	lslle.w	r3, r8, r3
 80108c0:	ee07 3a90 	vmov	s15, r3
 80108c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80108c8:	3901      	subs	r1, #1
 80108ca:	ed8d 7b00 	vstr	d7, [sp]
 80108ce:	9c01      	ldr	r4, [sp, #4]
 80108d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108d4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80108d8:	2401      	movs	r4, #1
 80108da:	e7a0      	b.n	801081e <_dtoa_r+0x106>
 80108dc:	2301      	movs	r3, #1
 80108de:	930f      	str	r3, [sp, #60]	; 0x3c
 80108e0:	1a43      	subs	r3, r0, r1
 80108e2:	1e5a      	subs	r2, r3, #1
 80108e4:	bf45      	ittet	mi
 80108e6:	f1c3 0301 	rsbmi	r3, r3, #1
 80108ea:	9305      	strmi	r3, [sp, #20]
 80108ec:	2300      	movpl	r3, #0
 80108ee:	2300      	movmi	r3, #0
 80108f0:	9206      	str	r2, [sp, #24]
 80108f2:	bf54      	ite	pl
 80108f4:	9305      	strpl	r3, [sp, #20]
 80108f6:	9306      	strmi	r3, [sp, #24]
 80108f8:	f1bb 0f00 	cmp.w	fp, #0
 80108fc:	db18      	blt.n	8010930 <_dtoa_r+0x218>
 80108fe:	9b06      	ldr	r3, [sp, #24]
 8010900:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8010904:	445b      	add	r3, fp
 8010906:	9306      	str	r3, [sp, #24]
 8010908:	2300      	movs	r3, #0
 801090a:	9a07      	ldr	r2, [sp, #28]
 801090c:	2a09      	cmp	r2, #9
 801090e:	d849      	bhi.n	80109a4 <_dtoa_r+0x28c>
 8010910:	2a05      	cmp	r2, #5
 8010912:	bfc4      	itt	gt
 8010914:	3a04      	subgt	r2, #4
 8010916:	9207      	strgt	r2, [sp, #28]
 8010918:	9a07      	ldr	r2, [sp, #28]
 801091a:	f1a2 0202 	sub.w	r2, r2, #2
 801091e:	bfcc      	ite	gt
 8010920:	2400      	movgt	r4, #0
 8010922:	2401      	movle	r4, #1
 8010924:	2a03      	cmp	r2, #3
 8010926:	d848      	bhi.n	80109ba <_dtoa_r+0x2a2>
 8010928:	e8df f002 	tbb	[pc, r2]
 801092c:	3a2c2e0b 	.word	0x3a2c2e0b
 8010930:	9b05      	ldr	r3, [sp, #20]
 8010932:	2200      	movs	r2, #0
 8010934:	eba3 030b 	sub.w	r3, r3, fp
 8010938:	9305      	str	r3, [sp, #20]
 801093a:	920e      	str	r2, [sp, #56]	; 0x38
 801093c:	f1cb 0300 	rsb	r3, fp, #0
 8010940:	e7e3      	b.n	801090a <_dtoa_r+0x1f2>
 8010942:	2200      	movs	r2, #0
 8010944:	9208      	str	r2, [sp, #32]
 8010946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010948:	2a00      	cmp	r2, #0
 801094a:	dc39      	bgt.n	80109c0 <_dtoa_r+0x2a8>
 801094c:	f04f 0a01 	mov.w	sl, #1
 8010950:	46d1      	mov	r9, sl
 8010952:	4652      	mov	r2, sl
 8010954:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8010958:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801095a:	2100      	movs	r1, #0
 801095c:	6079      	str	r1, [r7, #4]
 801095e:	2004      	movs	r0, #4
 8010960:	f100 0c14 	add.w	ip, r0, #20
 8010964:	4594      	cmp	ip, r2
 8010966:	6879      	ldr	r1, [r7, #4]
 8010968:	d92f      	bls.n	80109ca <_dtoa_r+0x2b2>
 801096a:	4630      	mov	r0, r6
 801096c:	930c      	str	r3, [sp, #48]	; 0x30
 801096e:	f000 fc61 	bl	8011234 <_Balloc>
 8010972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010974:	9000      	str	r0, [sp, #0]
 8010976:	4602      	mov	r2, r0
 8010978:	2800      	cmp	r0, #0
 801097a:	d149      	bne.n	8010a10 <_dtoa_r+0x2f8>
 801097c:	4b23      	ldr	r3, [pc, #140]	; (8010a0c <_dtoa_r+0x2f4>)
 801097e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010982:	e6df      	b.n	8010744 <_dtoa_r+0x2c>
 8010984:	2201      	movs	r2, #1
 8010986:	e7dd      	b.n	8010944 <_dtoa_r+0x22c>
 8010988:	2200      	movs	r2, #0
 801098a:	9208      	str	r2, [sp, #32]
 801098c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801098e:	eb0b 0a02 	add.w	sl, fp, r2
 8010992:	f10a 0901 	add.w	r9, sl, #1
 8010996:	464a      	mov	r2, r9
 8010998:	2a01      	cmp	r2, #1
 801099a:	bfb8      	it	lt
 801099c:	2201      	movlt	r2, #1
 801099e:	e7db      	b.n	8010958 <_dtoa_r+0x240>
 80109a0:	2201      	movs	r2, #1
 80109a2:	e7f2      	b.n	801098a <_dtoa_r+0x272>
 80109a4:	2401      	movs	r4, #1
 80109a6:	2200      	movs	r2, #0
 80109a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80109ac:	f04f 3aff 	mov.w	sl, #4294967295
 80109b0:	2100      	movs	r1, #0
 80109b2:	46d1      	mov	r9, sl
 80109b4:	2212      	movs	r2, #18
 80109b6:	9109      	str	r1, [sp, #36]	; 0x24
 80109b8:	e7ce      	b.n	8010958 <_dtoa_r+0x240>
 80109ba:	2201      	movs	r2, #1
 80109bc:	9208      	str	r2, [sp, #32]
 80109be:	e7f5      	b.n	80109ac <_dtoa_r+0x294>
 80109c0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80109c4:	46d1      	mov	r9, sl
 80109c6:	4652      	mov	r2, sl
 80109c8:	e7c6      	b.n	8010958 <_dtoa_r+0x240>
 80109ca:	3101      	adds	r1, #1
 80109cc:	6079      	str	r1, [r7, #4]
 80109ce:	0040      	lsls	r0, r0, #1
 80109d0:	e7c6      	b.n	8010960 <_dtoa_r+0x248>
 80109d2:	bf00      	nop
 80109d4:	f3af 8000 	nop.w
 80109d8:	636f4361 	.word	0x636f4361
 80109dc:	3fd287a7 	.word	0x3fd287a7
 80109e0:	8b60c8b3 	.word	0x8b60c8b3
 80109e4:	3fc68a28 	.word	0x3fc68a28
 80109e8:	509f79fb 	.word	0x509f79fb
 80109ec:	3fd34413 	.word	0x3fd34413
 80109f0:	080140d5 	.word	0x080140d5
 80109f4:	080140ec 	.word	0x080140ec
 80109f8:	7ff00000 	.word	0x7ff00000
 80109fc:	080140d1 	.word	0x080140d1
 8010a00:	080140c8 	.word	0x080140c8
 8010a04:	080140a5 	.word	0x080140a5
 8010a08:	080141e8 	.word	0x080141e8
 8010a0c:	0801414b 	.word	0x0801414b
 8010a10:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010a12:	9900      	ldr	r1, [sp, #0]
 8010a14:	6011      	str	r1, [r2, #0]
 8010a16:	f1b9 0f0e 	cmp.w	r9, #14
 8010a1a:	d872      	bhi.n	8010b02 <_dtoa_r+0x3ea>
 8010a1c:	2c00      	cmp	r4, #0
 8010a1e:	d070      	beq.n	8010b02 <_dtoa_r+0x3ea>
 8010a20:	f1bb 0f00 	cmp.w	fp, #0
 8010a24:	f340 80a6 	ble.w	8010b74 <_dtoa_r+0x45c>
 8010a28:	49ca      	ldr	r1, [pc, #808]	; (8010d54 <_dtoa_r+0x63c>)
 8010a2a:	f00b 020f 	and.w	r2, fp, #15
 8010a2e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8010a32:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010a36:	ed92 7b00 	vldr	d7, [r2]
 8010a3a:	ea4f 112b 	mov.w	r1, fp, asr #4
 8010a3e:	f000 808d 	beq.w	8010b5c <_dtoa_r+0x444>
 8010a42:	4ac5      	ldr	r2, [pc, #788]	; (8010d58 <_dtoa_r+0x640>)
 8010a44:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8010a48:	ed92 6b08 	vldr	d6, [r2, #32]
 8010a4c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8010a50:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010a54:	f001 010f 	and.w	r1, r1, #15
 8010a58:	2203      	movs	r2, #3
 8010a5a:	48bf      	ldr	r0, [pc, #764]	; (8010d58 <_dtoa_r+0x640>)
 8010a5c:	2900      	cmp	r1, #0
 8010a5e:	d17f      	bne.n	8010b60 <_dtoa_r+0x448>
 8010a60:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010a64:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010a68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010a6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010a6e:	2900      	cmp	r1, #0
 8010a70:	f000 80b2 	beq.w	8010bd8 <_dtoa_r+0x4c0>
 8010a74:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8010a78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010a7c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a84:	f140 80a8 	bpl.w	8010bd8 <_dtoa_r+0x4c0>
 8010a88:	f1b9 0f00 	cmp.w	r9, #0
 8010a8c:	f000 80a4 	beq.w	8010bd8 <_dtoa_r+0x4c0>
 8010a90:	f1ba 0f00 	cmp.w	sl, #0
 8010a94:	dd31      	ble.n	8010afa <_dtoa_r+0x3e2>
 8010a96:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8010a9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010a9e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010aa2:	f10b 37ff 	add.w	r7, fp, #4294967295
 8010aa6:	3201      	adds	r2, #1
 8010aa8:	4650      	mov	r0, sl
 8010aaa:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010aae:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8010ab2:	ee07 2a90 	vmov	s15, r2
 8010ab6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010aba:	eea7 5b06 	vfma.f64	d5, d7, d6
 8010abe:	ed8d 5b02 	vstr	d5, [sp, #8]
 8010ac2:	9c03      	ldr	r4, [sp, #12]
 8010ac4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8010ac8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8010acc:	2800      	cmp	r0, #0
 8010ace:	f040 8086 	bne.w	8010bde <_dtoa_r+0x4c6>
 8010ad2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010ad6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010ada:	ec42 1b17 	vmov	d7, r1, r2
 8010ade:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ae6:	f300 8272 	bgt.w	8010fce <_dtoa_r+0x8b6>
 8010aea:	eeb1 7b47 	vneg.f64	d7, d7
 8010aee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010af6:	f100 8267 	bmi.w	8010fc8 <_dtoa_r+0x8b0>
 8010afa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8010afe:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8010b02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010b04:	2a00      	cmp	r2, #0
 8010b06:	f2c0 8129 	blt.w	8010d5c <_dtoa_r+0x644>
 8010b0a:	f1bb 0f0e 	cmp.w	fp, #14
 8010b0e:	f300 8125 	bgt.w	8010d5c <_dtoa_r+0x644>
 8010b12:	4b90      	ldr	r3, [pc, #576]	; (8010d54 <_dtoa_r+0x63c>)
 8010b14:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8010b18:	ed93 6b00 	vldr	d6, [r3]
 8010b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	f280 80c3 	bge.w	8010caa <_dtoa_r+0x592>
 8010b24:	f1b9 0f00 	cmp.w	r9, #0
 8010b28:	f300 80bf 	bgt.w	8010caa <_dtoa_r+0x592>
 8010b2c:	f040 824c 	bne.w	8010fc8 <_dtoa_r+0x8b0>
 8010b30:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8010b34:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010b38:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010b3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b44:	464c      	mov	r4, r9
 8010b46:	464f      	mov	r7, r9
 8010b48:	f280 8222 	bge.w	8010f90 <_dtoa_r+0x878>
 8010b4c:	f8dd 8000 	ldr.w	r8, [sp]
 8010b50:	2331      	movs	r3, #49	; 0x31
 8010b52:	f808 3b01 	strb.w	r3, [r8], #1
 8010b56:	f10b 0b01 	add.w	fp, fp, #1
 8010b5a:	e21e      	b.n	8010f9a <_dtoa_r+0x882>
 8010b5c:	2202      	movs	r2, #2
 8010b5e:	e77c      	b.n	8010a5a <_dtoa_r+0x342>
 8010b60:	07cc      	lsls	r4, r1, #31
 8010b62:	d504      	bpl.n	8010b6e <_dtoa_r+0x456>
 8010b64:	ed90 6b00 	vldr	d6, [r0]
 8010b68:	3201      	adds	r2, #1
 8010b6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010b6e:	1049      	asrs	r1, r1, #1
 8010b70:	3008      	adds	r0, #8
 8010b72:	e773      	b.n	8010a5c <_dtoa_r+0x344>
 8010b74:	d02e      	beq.n	8010bd4 <_dtoa_r+0x4bc>
 8010b76:	f1cb 0100 	rsb	r1, fp, #0
 8010b7a:	4a76      	ldr	r2, [pc, #472]	; (8010d54 <_dtoa_r+0x63c>)
 8010b7c:	f001 000f 	and.w	r0, r1, #15
 8010b80:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010b84:	ed92 7b00 	vldr	d7, [r2]
 8010b88:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8010b8c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010b90:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010b94:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8010b98:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010b9c:	486e      	ldr	r0, [pc, #440]	; (8010d58 <_dtoa_r+0x640>)
 8010b9e:	1109      	asrs	r1, r1, #4
 8010ba0:	2400      	movs	r4, #0
 8010ba2:	2202      	movs	r2, #2
 8010ba4:	b939      	cbnz	r1, 8010bb6 <_dtoa_r+0x49e>
 8010ba6:	2c00      	cmp	r4, #0
 8010ba8:	f43f af60 	beq.w	8010a6c <_dtoa_r+0x354>
 8010bac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010bb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010bb4:	e75a      	b.n	8010a6c <_dtoa_r+0x354>
 8010bb6:	07cf      	lsls	r7, r1, #31
 8010bb8:	d509      	bpl.n	8010bce <_dtoa_r+0x4b6>
 8010bba:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8010bbe:	ed90 7b00 	vldr	d7, [r0]
 8010bc2:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010bc6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010bca:	3201      	adds	r2, #1
 8010bcc:	2401      	movs	r4, #1
 8010bce:	1049      	asrs	r1, r1, #1
 8010bd0:	3008      	adds	r0, #8
 8010bd2:	e7e7      	b.n	8010ba4 <_dtoa_r+0x48c>
 8010bd4:	2202      	movs	r2, #2
 8010bd6:	e749      	b.n	8010a6c <_dtoa_r+0x354>
 8010bd8:	465f      	mov	r7, fp
 8010bda:	4648      	mov	r0, r9
 8010bdc:	e765      	b.n	8010aaa <_dtoa_r+0x392>
 8010bde:	ec42 1b17 	vmov	d7, r1, r2
 8010be2:	4a5c      	ldr	r2, [pc, #368]	; (8010d54 <_dtoa_r+0x63c>)
 8010be4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010be8:	ed12 4b02 	vldr	d4, [r2, #-8]
 8010bec:	9a00      	ldr	r2, [sp, #0]
 8010bee:	1814      	adds	r4, r2, r0
 8010bf0:	9a08      	ldr	r2, [sp, #32]
 8010bf2:	b352      	cbz	r2, 8010c4a <_dtoa_r+0x532>
 8010bf4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8010bf8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8010bfc:	f8dd 8000 	ldr.w	r8, [sp]
 8010c00:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8010c04:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010c08:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010c0c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010c10:	ee14 2a90 	vmov	r2, s9
 8010c14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010c18:	3230      	adds	r2, #48	; 0x30
 8010c1a:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010c1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c26:	f808 2b01 	strb.w	r2, [r8], #1
 8010c2a:	d439      	bmi.n	8010ca0 <_dtoa_r+0x588>
 8010c2c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8010c30:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c38:	d472      	bmi.n	8010d20 <_dtoa_r+0x608>
 8010c3a:	45a0      	cmp	r8, r4
 8010c3c:	f43f af5d 	beq.w	8010afa <_dtoa_r+0x3e2>
 8010c40:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010c44:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010c48:	e7e0      	b.n	8010c0c <_dtoa_r+0x4f4>
 8010c4a:	f8dd 8000 	ldr.w	r8, [sp]
 8010c4e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010c52:	4621      	mov	r1, r4
 8010c54:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8010c58:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010c5c:	ee14 2a90 	vmov	r2, s9
 8010c60:	3230      	adds	r2, #48	; 0x30
 8010c62:	f808 2b01 	strb.w	r2, [r8], #1
 8010c66:	45a0      	cmp	r8, r4
 8010c68:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010c6c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010c70:	d118      	bne.n	8010ca4 <_dtoa_r+0x58c>
 8010c72:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010c76:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010c7a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c82:	dc4d      	bgt.n	8010d20 <_dtoa_r+0x608>
 8010c84:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010c88:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c90:	f57f af33 	bpl.w	8010afa <_dtoa_r+0x3e2>
 8010c94:	4688      	mov	r8, r1
 8010c96:	3901      	subs	r1, #1
 8010c98:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8010c9c:	2b30      	cmp	r3, #48	; 0x30
 8010c9e:	d0f9      	beq.n	8010c94 <_dtoa_r+0x57c>
 8010ca0:	46bb      	mov	fp, r7
 8010ca2:	e02a      	b.n	8010cfa <_dtoa_r+0x5e2>
 8010ca4:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010ca8:	e7d6      	b.n	8010c58 <_dtoa_r+0x540>
 8010caa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010cae:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8010cb2:	f8dd 8000 	ldr.w	r8, [sp]
 8010cb6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010cba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010cbe:	ee15 3a10 	vmov	r3, s10
 8010cc2:	3330      	adds	r3, #48	; 0x30
 8010cc4:	f808 3b01 	strb.w	r3, [r8], #1
 8010cc8:	9b00      	ldr	r3, [sp, #0]
 8010cca:	eba8 0303 	sub.w	r3, r8, r3
 8010cce:	4599      	cmp	r9, r3
 8010cd0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010cd4:	eea3 7b46 	vfms.f64	d7, d3, d6
 8010cd8:	d133      	bne.n	8010d42 <_dtoa_r+0x62a>
 8010cda:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010cde:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ce6:	dc1a      	bgt.n	8010d1e <_dtoa_r+0x606>
 8010ce8:	eeb4 7b46 	vcmp.f64	d7, d6
 8010cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cf0:	d103      	bne.n	8010cfa <_dtoa_r+0x5e2>
 8010cf2:	ee15 3a10 	vmov	r3, s10
 8010cf6:	07d9      	lsls	r1, r3, #31
 8010cf8:	d411      	bmi.n	8010d1e <_dtoa_r+0x606>
 8010cfa:	4629      	mov	r1, r5
 8010cfc:	4630      	mov	r0, r6
 8010cfe:	f000 fad9 	bl	80112b4 <_Bfree>
 8010d02:	2300      	movs	r3, #0
 8010d04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010d06:	f888 3000 	strb.w	r3, [r8]
 8010d0a:	f10b 0301 	add.w	r3, fp, #1
 8010d0e:	6013      	str	r3, [r2, #0]
 8010d10:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	f43f ad4d 	beq.w	80107b2 <_dtoa_r+0x9a>
 8010d18:	f8c3 8000 	str.w	r8, [r3]
 8010d1c:	e549      	b.n	80107b2 <_dtoa_r+0x9a>
 8010d1e:	465f      	mov	r7, fp
 8010d20:	4643      	mov	r3, r8
 8010d22:	4698      	mov	r8, r3
 8010d24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010d28:	2a39      	cmp	r2, #57	; 0x39
 8010d2a:	d106      	bne.n	8010d3a <_dtoa_r+0x622>
 8010d2c:	9a00      	ldr	r2, [sp, #0]
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d1f7      	bne.n	8010d22 <_dtoa_r+0x60a>
 8010d32:	9900      	ldr	r1, [sp, #0]
 8010d34:	2230      	movs	r2, #48	; 0x30
 8010d36:	3701      	adds	r7, #1
 8010d38:	700a      	strb	r2, [r1, #0]
 8010d3a:	781a      	ldrb	r2, [r3, #0]
 8010d3c:	3201      	adds	r2, #1
 8010d3e:	701a      	strb	r2, [r3, #0]
 8010d40:	e7ae      	b.n	8010ca0 <_dtoa_r+0x588>
 8010d42:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010d46:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d4e:	d1b2      	bne.n	8010cb6 <_dtoa_r+0x59e>
 8010d50:	e7d3      	b.n	8010cfa <_dtoa_r+0x5e2>
 8010d52:	bf00      	nop
 8010d54:	080141e8 	.word	0x080141e8
 8010d58:	080141c0 	.word	0x080141c0
 8010d5c:	9908      	ldr	r1, [sp, #32]
 8010d5e:	2900      	cmp	r1, #0
 8010d60:	f000 80d1 	beq.w	8010f06 <_dtoa_r+0x7ee>
 8010d64:	9907      	ldr	r1, [sp, #28]
 8010d66:	2901      	cmp	r1, #1
 8010d68:	f300 80b4 	bgt.w	8010ed4 <_dtoa_r+0x7bc>
 8010d6c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8010d6e:	2900      	cmp	r1, #0
 8010d70:	f000 80ac 	beq.w	8010ecc <_dtoa_r+0x7b4>
 8010d74:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8010d78:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010d7c:	461c      	mov	r4, r3
 8010d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8010d80:	9b05      	ldr	r3, [sp, #20]
 8010d82:	4413      	add	r3, r2
 8010d84:	9305      	str	r3, [sp, #20]
 8010d86:	9b06      	ldr	r3, [sp, #24]
 8010d88:	2101      	movs	r1, #1
 8010d8a:	4413      	add	r3, r2
 8010d8c:	4630      	mov	r0, r6
 8010d8e:	9306      	str	r3, [sp, #24]
 8010d90:	f000 fb4c 	bl	801142c <__i2b>
 8010d94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010d96:	4607      	mov	r7, r0
 8010d98:	f1b8 0f00 	cmp.w	r8, #0
 8010d9c:	dd0d      	ble.n	8010dba <_dtoa_r+0x6a2>
 8010d9e:	9a06      	ldr	r2, [sp, #24]
 8010da0:	2a00      	cmp	r2, #0
 8010da2:	dd0a      	ble.n	8010dba <_dtoa_r+0x6a2>
 8010da4:	4542      	cmp	r2, r8
 8010da6:	9905      	ldr	r1, [sp, #20]
 8010da8:	bfa8      	it	ge
 8010daa:	4642      	movge	r2, r8
 8010dac:	1a89      	subs	r1, r1, r2
 8010dae:	9105      	str	r1, [sp, #20]
 8010db0:	9906      	ldr	r1, [sp, #24]
 8010db2:	eba8 0802 	sub.w	r8, r8, r2
 8010db6:	1a8a      	subs	r2, r1, r2
 8010db8:	9206      	str	r2, [sp, #24]
 8010dba:	b303      	cbz	r3, 8010dfe <_dtoa_r+0x6e6>
 8010dbc:	9a08      	ldr	r2, [sp, #32]
 8010dbe:	2a00      	cmp	r2, #0
 8010dc0:	f000 80a6 	beq.w	8010f10 <_dtoa_r+0x7f8>
 8010dc4:	2c00      	cmp	r4, #0
 8010dc6:	dd13      	ble.n	8010df0 <_dtoa_r+0x6d8>
 8010dc8:	4639      	mov	r1, r7
 8010dca:	4622      	mov	r2, r4
 8010dcc:	4630      	mov	r0, r6
 8010dce:	930c      	str	r3, [sp, #48]	; 0x30
 8010dd0:	f000 fbe8 	bl	80115a4 <__pow5mult>
 8010dd4:	462a      	mov	r2, r5
 8010dd6:	4601      	mov	r1, r0
 8010dd8:	4607      	mov	r7, r0
 8010dda:	4630      	mov	r0, r6
 8010ddc:	f000 fb3c 	bl	8011458 <__multiply>
 8010de0:	4629      	mov	r1, r5
 8010de2:	900a      	str	r0, [sp, #40]	; 0x28
 8010de4:	4630      	mov	r0, r6
 8010de6:	f000 fa65 	bl	80112b4 <_Bfree>
 8010dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010dec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010dee:	4615      	mov	r5, r2
 8010df0:	1b1a      	subs	r2, r3, r4
 8010df2:	d004      	beq.n	8010dfe <_dtoa_r+0x6e6>
 8010df4:	4629      	mov	r1, r5
 8010df6:	4630      	mov	r0, r6
 8010df8:	f000 fbd4 	bl	80115a4 <__pow5mult>
 8010dfc:	4605      	mov	r5, r0
 8010dfe:	2101      	movs	r1, #1
 8010e00:	4630      	mov	r0, r6
 8010e02:	f000 fb13 	bl	801142c <__i2b>
 8010e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	4604      	mov	r4, r0
 8010e0c:	f340 8082 	ble.w	8010f14 <_dtoa_r+0x7fc>
 8010e10:	461a      	mov	r2, r3
 8010e12:	4601      	mov	r1, r0
 8010e14:	4630      	mov	r0, r6
 8010e16:	f000 fbc5 	bl	80115a4 <__pow5mult>
 8010e1a:	9b07      	ldr	r3, [sp, #28]
 8010e1c:	2b01      	cmp	r3, #1
 8010e1e:	4604      	mov	r4, r0
 8010e20:	dd7b      	ble.n	8010f1a <_dtoa_r+0x802>
 8010e22:	2300      	movs	r3, #0
 8010e24:	930a      	str	r3, [sp, #40]	; 0x28
 8010e26:	6922      	ldr	r2, [r4, #16]
 8010e28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010e2c:	6910      	ldr	r0, [r2, #16]
 8010e2e:	f000 faad 	bl	801138c <__hi0bits>
 8010e32:	f1c0 0020 	rsb	r0, r0, #32
 8010e36:	9b06      	ldr	r3, [sp, #24]
 8010e38:	4418      	add	r0, r3
 8010e3a:	f010 001f 	ands.w	r0, r0, #31
 8010e3e:	f000 808d 	beq.w	8010f5c <_dtoa_r+0x844>
 8010e42:	f1c0 0220 	rsb	r2, r0, #32
 8010e46:	2a04      	cmp	r2, #4
 8010e48:	f340 8086 	ble.w	8010f58 <_dtoa_r+0x840>
 8010e4c:	f1c0 001c 	rsb	r0, r0, #28
 8010e50:	9b05      	ldr	r3, [sp, #20]
 8010e52:	4403      	add	r3, r0
 8010e54:	9305      	str	r3, [sp, #20]
 8010e56:	9b06      	ldr	r3, [sp, #24]
 8010e58:	4403      	add	r3, r0
 8010e5a:	4480      	add	r8, r0
 8010e5c:	9306      	str	r3, [sp, #24]
 8010e5e:	9b05      	ldr	r3, [sp, #20]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	dd05      	ble.n	8010e70 <_dtoa_r+0x758>
 8010e64:	4629      	mov	r1, r5
 8010e66:	461a      	mov	r2, r3
 8010e68:	4630      	mov	r0, r6
 8010e6a:	f000 fbf5 	bl	8011658 <__lshift>
 8010e6e:	4605      	mov	r5, r0
 8010e70:	9b06      	ldr	r3, [sp, #24]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	dd05      	ble.n	8010e82 <_dtoa_r+0x76a>
 8010e76:	4621      	mov	r1, r4
 8010e78:	461a      	mov	r2, r3
 8010e7a:	4630      	mov	r0, r6
 8010e7c:	f000 fbec 	bl	8011658 <__lshift>
 8010e80:	4604      	mov	r4, r0
 8010e82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d06b      	beq.n	8010f60 <_dtoa_r+0x848>
 8010e88:	4621      	mov	r1, r4
 8010e8a:	4628      	mov	r0, r5
 8010e8c:	f000 fc50 	bl	8011730 <__mcmp>
 8010e90:	2800      	cmp	r0, #0
 8010e92:	da65      	bge.n	8010f60 <_dtoa_r+0x848>
 8010e94:	2300      	movs	r3, #0
 8010e96:	4629      	mov	r1, r5
 8010e98:	220a      	movs	r2, #10
 8010e9a:	4630      	mov	r0, r6
 8010e9c:	f000 fa2c 	bl	80112f8 <__multadd>
 8010ea0:	9b08      	ldr	r3, [sp, #32]
 8010ea2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010ea6:	4605      	mov	r5, r0
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	f000 8192 	beq.w	80111d2 <_dtoa_r+0xaba>
 8010eae:	4639      	mov	r1, r7
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	220a      	movs	r2, #10
 8010eb4:	4630      	mov	r0, r6
 8010eb6:	f000 fa1f 	bl	80112f8 <__multadd>
 8010eba:	f1ba 0f00 	cmp.w	sl, #0
 8010ebe:	4607      	mov	r7, r0
 8010ec0:	f300 808e 	bgt.w	8010fe0 <_dtoa_r+0x8c8>
 8010ec4:	9b07      	ldr	r3, [sp, #28]
 8010ec6:	2b02      	cmp	r3, #2
 8010ec8:	dc51      	bgt.n	8010f6e <_dtoa_r+0x856>
 8010eca:	e089      	b.n	8010fe0 <_dtoa_r+0x8c8>
 8010ecc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010ece:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8010ed2:	e751      	b.n	8010d78 <_dtoa_r+0x660>
 8010ed4:	f109 34ff 	add.w	r4, r9, #4294967295
 8010ed8:	42a3      	cmp	r3, r4
 8010eda:	bfbf      	itttt	lt
 8010edc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8010ede:	1ae3      	sublt	r3, r4, r3
 8010ee0:	18d2      	addlt	r2, r2, r3
 8010ee2:	4613      	movlt	r3, r2
 8010ee4:	bfb7      	itett	lt
 8010ee6:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010ee8:	1b1c      	subge	r4, r3, r4
 8010eea:	4623      	movlt	r3, r4
 8010eec:	2400      	movlt	r4, #0
 8010eee:	f1b9 0f00 	cmp.w	r9, #0
 8010ef2:	bfb5      	itete	lt
 8010ef4:	9a05      	ldrlt	r2, [sp, #20]
 8010ef6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8010efa:	eba2 0809 	sublt.w	r8, r2, r9
 8010efe:	464a      	movge	r2, r9
 8010f00:	bfb8      	it	lt
 8010f02:	2200      	movlt	r2, #0
 8010f04:	e73b      	b.n	8010d7e <_dtoa_r+0x666>
 8010f06:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010f0a:	9f08      	ldr	r7, [sp, #32]
 8010f0c:	461c      	mov	r4, r3
 8010f0e:	e743      	b.n	8010d98 <_dtoa_r+0x680>
 8010f10:	461a      	mov	r2, r3
 8010f12:	e76f      	b.n	8010df4 <_dtoa_r+0x6dc>
 8010f14:	9b07      	ldr	r3, [sp, #28]
 8010f16:	2b01      	cmp	r3, #1
 8010f18:	dc18      	bgt.n	8010f4c <_dtoa_r+0x834>
 8010f1a:	9b02      	ldr	r3, [sp, #8]
 8010f1c:	b9b3      	cbnz	r3, 8010f4c <_dtoa_r+0x834>
 8010f1e:	9b03      	ldr	r3, [sp, #12]
 8010f20:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8010f24:	b9a2      	cbnz	r2, 8010f50 <_dtoa_r+0x838>
 8010f26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010f2a:	0d12      	lsrs	r2, r2, #20
 8010f2c:	0512      	lsls	r2, r2, #20
 8010f2e:	b18a      	cbz	r2, 8010f54 <_dtoa_r+0x83c>
 8010f30:	9b05      	ldr	r3, [sp, #20]
 8010f32:	3301      	adds	r3, #1
 8010f34:	9305      	str	r3, [sp, #20]
 8010f36:	9b06      	ldr	r3, [sp, #24]
 8010f38:	3301      	adds	r3, #1
 8010f3a:	9306      	str	r3, [sp, #24]
 8010f3c:	2301      	movs	r3, #1
 8010f3e:	930a      	str	r3, [sp, #40]	; 0x28
 8010f40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	f47f af6f 	bne.w	8010e26 <_dtoa_r+0x70e>
 8010f48:	2001      	movs	r0, #1
 8010f4a:	e774      	b.n	8010e36 <_dtoa_r+0x71e>
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	e7f6      	b.n	8010f3e <_dtoa_r+0x826>
 8010f50:	9b02      	ldr	r3, [sp, #8]
 8010f52:	e7f4      	b.n	8010f3e <_dtoa_r+0x826>
 8010f54:	920a      	str	r2, [sp, #40]	; 0x28
 8010f56:	e7f3      	b.n	8010f40 <_dtoa_r+0x828>
 8010f58:	d081      	beq.n	8010e5e <_dtoa_r+0x746>
 8010f5a:	4610      	mov	r0, r2
 8010f5c:	301c      	adds	r0, #28
 8010f5e:	e777      	b.n	8010e50 <_dtoa_r+0x738>
 8010f60:	f1b9 0f00 	cmp.w	r9, #0
 8010f64:	dc37      	bgt.n	8010fd6 <_dtoa_r+0x8be>
 8010f66:	9b07      	ldr	r3, [sp, #28]
 8010f68:	2b02      	cmp	r3, #2
 8010f6a:	dd34      	ble.n	8010fd6 <_dtoa_r+0x8be>
 8010f6c:	46ca      	mov	sl, r9
 8010f6e:	f1ba 0f00 	cmp.w	sl, #0
 8010f72:	d10d      	bne.n	8010f90 <_dtoa_r+0x878>
 8010f74:	4621      	mov	r1, r4
 8010f76:	4653      	mov	r3, sl
 8010f78:	2205      	movs	r2, #5
 8010f7a:	4630      	mov	r0, r6
 8010f7c:	f000 f9bc 	bl	80112f8 <__multadd>
 8010f80:	4601      	mov	r1, r0
 8010f82:	4604      	mov	r4, r0
 8010f84:	4628      	mov	r0, r5
 8010f86:	f000 fbd3 	bl	8011730 <__mcmp>
 8010f8a:	2800      	cmp	r0, #0
 8010f8c:	f73f adde 	bgt.w	8010b4c <_dtoa_r+0x434>
 8010f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f92:	f8dd 8000 	ldr.w	r8, [sp]
 8010f96:	ea6f 0b03 	mvn.w	fp, r3
 8010f9a:	f04f 0900 	mov.w	r9, #0
 8010f9e:	4621      	mov	r1, r4
 8010fa0:	4630      	mov	r0, r6
 8010fa2:	f000 f987 	bl	80112b4 <_Bfree>
 8010fa6:	2f00      	cmp	r7, #0
 8010fa8:	f43f aea7 	beq.w	8010cfa <_dtoa_r+0x5e2>
 8010fac:	f1b9 0f00 	cmp.w	r9, #0
 8010fb0:	d005      	beq.n	8010fbe <_dtoa_r+0x8a6>
 8010fb2:	45b9      	cmp	r9, r7
 8010fb4:	d003      	beq.n	8010fbe <_dtoa_r+0x8a6>
 8010fb6:	4649      	mov	r1, r9
 8010fb8:	4630      	mov	r0, r6
 8010fba:	f000 f97b 	bl	80112b4 <_Bfree>
 8010fbe:	4639      	mov	r1, r7
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	f000 f977 	bl	80112b4 <_Bfree>
 8010fc6:	e698      	b.n	8010cfa <_dtoa_r+0x5e2>
 8010fc8:	2400      	movs	r4, #0
 8010fca:	4627      	mov	r7, r4
 8010fcc:	e7e0      	b.n	8010f90 <_dtoa_r+0x878>
 8010fce:	46bb      	mov	fp, r7
 8010fd0:	4604      	mov	r4, r0
 8010fd2:	4607      	mov	r7, r0
 8010fd4:	e5ba      	b.n	8010b4c <_dtoa_r+0x434>
 8010fd6:	9b08      	ldr	r3, [sp, #32]
 8010fd8:	46ca      	mov	sl, r9
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f000 8100 	beq.w	80111e0 <_dtoa_r+0xac8>
 8010fe0:	f1b8 0f00 	cmp.w	r8, #0
 8010fe4:	dd05      	ble.n	8010ff2 <_dtoa_r+0x8da>
 8010fe6:	4639      	mov	r1, r7
 8010fe8:	4642      	mov	r2, r8
 8010fea:	4630      	mov	r0, r6
 8010fec:	f000 fb34 	bl	8011658 <__lshift>
 8010ff0:	4607      	mov	r7, r0
 8010ff2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d05d      	beq.n	80110b4 <_dtoa_r+0x99c>
 8010ff8:	6879      	ldr	r1, [r7, #4]
 8010ffa:	4630      	mov	r0, r6
 8010ffc:	f000 f91a 	bl	8011234 <_Balloc>
 8011000:	4680      	mov	r8, r0
 8011002:	b928      	cbnz	r0, 8011010 <_dtoa_r+0x8f8>
 8011004:	4b82      	ldr	r3, [pc, #520]	; (8011210 <_dtoa_r+0xaf8>)
 8011006:	4602      	mov	r2, r0
 8011008:	f240 21ea 	movw	r1, #746	; 0x2ea
 801100c:	f7ff bb9a 	b.w	8010744 <_dtoa_r+0x2c>
 8011010:	693a      	ldr	r2, [r7, #16]
 8011012:	3202      	adds	r2, #2
 8011014:	0092      	lsls	r2, r2, #2
 8011016:	f107 010c 	add.w	r1, r7, #12
 801101a:	300c      	adds	r0, #12
 801101c:	f7fe fe96 	bl	800fd4c <memcpy>
 8011020:	2201      	movs	r2, #1
 8011022:	4641      	mov	r1, r8
 8011024:	4630      	mov	r0, r6
 8011026:	f000 fb17 	bl	8011658 <__lshift>
 801102a:	9b00      	ldr	r3, [sp, #0]
 801102c:	3301      	adds	r3, #1
 801102e:	9305      	str	r3, [sp, #20]
 8011030:	9b00      	ldr	r3, [sp, #0]
 8011032:	4453      	add	r3, sl
 8011034:	9309      	str	r3, [sp, #36]	; 0x24
 8011036:	9b02      	ldr	r3, [sp, #8]
 8011038:	f003 0301 	and.w	r3, r3, #1
 801103c:	46b9      	mov	r9, r7
 801103e:	9308      	str	r3, [sp, #32]
 8011040:	4607      	mov	r7, r0
 8011042:	9b05      	ldr	r3, [sp, #20]
 8011044:	4621      	mov	r1, r4
 8011046:	3b01      	subs	r3, #1
 8011048:	4628      	mov	r0, r5
 801104a:	9302      	str	r3, [sp, #8]
 801104c:	f7ff fad6 	bl	80105fc <quorem>
 8011050:	4603      	mov	r3, r0
 8011052:	3330      	adds	r3, #48	; 0x30
 8011054:	9006      	str	r0, [sp, #24]
 8011056:	4649      	mov	r1, r9
 8011058:	4628      	mov	r0, r5
 801105a:	930a      	str	r3, [sp, #40]	; 0x28
 801105c:	f000 fb68 	bl	8011730 <__mcmp>
 8011060:	463a      	mov	r2, r7
 8011062:	4682      	mov	sl, r0
 8011064:	4621      	mov	r1, r4
 8011066:	4630      	mov	r0, r6
 8011068:	f000 fb7e 	bl	8011768 <__mdiff>
 801106c:	68c2      	ldr	r2, [r0, #12]
 801106e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011070:	4680      	mov	r8, r0
 8011072:	bb0a      	cbnz	r2, 80110b8 <_dtoa_r+0x9a0>
 8011074:	4601      	mov	r1, r0
 8011076:	4628      	mov	r0, r5
 8011078:	f000 fb5a 	bl	8011730 <__mcmp>
 801107c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801107e:	4602      	mov	r2, r0
 8011080:	4641      	mov	r1, r8
 8011082:	4630      	mov	r0, r6
 8011084:	920e      	str	r2, [sp, #56]	; 0x38
 8011086:	930a      	str	r3, [sp, #40]	; 0x28
 8011088:	f000 f914 	bl	80112b4 <_Bfree>
 801108c:	9b07      	ldr	r3, [sp, #28]
 801108e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011090:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011094:	ea43 0102 	orr.w	r1, r3, r2
 8011098:	9b08      	ldr	r3, [sp, #32]
 801109a:	430b      	orrs	r3, r1
 801109c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801109e:	d10d      	bne.n	80110bc <_dtoa_r+0x9a4>
 80110a0:	2b39      	cmp	r3, #57	; 0x39
 80110a2:	d029      	beq.n	80110f8 <_dtoa_r+0x9e0>
 80110a4:	f1ba 0f00 	cmp.w	sl, #0
 80110a8:	dd01      	ble.n	80110ae <_dtoa_r+0x996>
 80110aa:	9b06      	ldr	r3, [sp, #24]
 80110ac:	3331      	adds	r3, #49	; 0x31
 80110ae:	9a02      	ldr	r2, [sp, #8]
 80110b0:	7013      	strb	r3, [r2, #0]
 80110b2:	e774      	b.n	8010f9e <_dtoa_r+0x886>
 80110b4:	4638      	mov	r0, r7
 80110b6:	e7b8      	b.n	801102a <_dtoa_r+0x912>
 80110b8:	2201      	movs	r2, #1
 80110ba:	e7e1      	b.n	8011080 <_dtoa_r+0x968>
 80110bc:	f1ba 0f00 	cmp.w	sl, #0
 80110c0:	db06      	blt.n	80110d0 <_dtoa_r+0x9b8>
 80110c2:	9907      	ldr	r1, [sp, #28]
 80110c4:	ea41 0a0a 	orr.w	sl, r1, sl
 80110c8:	9908      	ldr	r1, [sp, #32]
 80110ca:	ea5a 0101 	orrs.w	r1, sl, r1
 80110ce:	d120      	bne.n	8011112 <_dtoa_r+0x9fa>
 80110d0:	2a00      	cmp	r2, #0
 80110d2:	ddec      	ble.n	80110ae <_dtoa_r+0x996>
 80110d4:	4629      	mov	r1, r5
 80110d6:	2201      	movs	r2, #1
 80110d8:	4630      	mov	r0, r6
 80110da:	9305      	str	r3, [sp, #20]
 80110dc:	f000 fabc 	bl	8011658 <__lshift>
 80110e0:	4621      	mov	r1, r4
 80110e2:	4605      	mov	r5, r0
 80110e4:	f000 fb24 	bl	8011730 <__mcmp>
 80110e8:	2800      	cmp	r0, #0
 80110ea:	9b05      	ldr	r3, [sp, #20]
 80110ec:	dc02      	bgt.n	80110f4 <_dtoa_r+0x9dc>
 80110ee:	d1de      	bne.n	80110ae <_dtoa_r+0x996>
 80110f0:	07da      	lsls	r2, r3, #31
 80110f2:	d5dc      	bpl.n	80110ae <_dtoa_r+0x996>
 80110f4:	2b39      	cmp	r3, #57	; 0x39
 80110f6:	d1d8      	bne.n	80110aa <_dtoa_r+0x992>
 80110f8:	9a02      	ldr	r2, [sp, #8]
 80110fa:	2339      	movs	r3, #57	; 0x39
 80110fc:	7013      	strb	r3, [r2, #0]
 80110fe:	4643      	mov	r3, r8
 8011100:	4698      	mov	r8, r3
 8011102:	3b01      	subs	r3, #1
 8011104:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8011108:	2a39      	cmp	r2, #57	; 0x39
 801110a:	d051      	beq.n	80111b0 <_dtoa_r+0xa98>
 801110c:	3201      	adds	r2, #1
 801110e:	701a      	strb	r2, [r3, #0]
 8011110:	e745      	b.n	8010f9e <_dtoa_r+0x886>
 8011112:	2a00      	cmp	r2, #0
 8011114:	dd03      	ble.n	801111e <_dtoa_r+0xa06>
 8011116:	2b39      	cmp	r3, #57	; 0x39
 8011118:	d0ee      	beq.n	80110f8 <_dtoa_r+0x9e0>
 801111a:	3301      	adds	r3, #1
 801111c:	e7c7      	b.n	80110ae <_dtoa_r+0x996>
 801111e:	9a05      	ldr	r2, [sp, #20]
 8011120:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011122:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011126:	428a      	cmp	r2, r1
 8011128:	d02b      	beq.n	8011182 <_dtoa_r+0xa6a>
 801112a:	4629      	mov	r1, r5
 801112c:	2300      	movs	r3, #0
 801112e:	220a      	movs	r2, #10
 8011130:	4630      	mov	r0, r6
 8011132:	f000 f8e1 	bl	80112f8 <__multadd>
 8011136:	45b9      	cmp	r9, r7
 8011138:	4605      	mov	r5, r0
 801113a:	f04f 0300 	mov.w	r3, #0
 801113e:	f04f 020a 	mov.w	r2, #10
 8011142:	4649      	mov	r1, r9
 8011144:	4630      	mov	r0, r6
 8011146:	d107      	bne.n	8011158 <_dtoa_r+0xa40>
 8011148:	f000 f8d6 	bl	80112f8 <__multadd>
 801114c:	4681      	mov	r9, r0
 801114e:	4607      	mov	r7, r0
 8011150:	9b05      	ldr	r3, [sp, #20]
 8011152:	3301      	adds	r3, #1
 8011154:	9305      	str	r3, [sp, #20]
 8011156:	e774      	b.n	8011042 <_dtoa_r+0x92a>
 8011158:	f000 f8ce 	bl	80112f8 <__multadd>
 801115c:	4639      	mov	r1, r7
 801115e:	4681      	mov	r9, r0
 8011160:	2300      	movs	r3, #0
 8011162:	220a      	movs	r2, #10
 8011164:	4630      	mov	r0, r6
 8011166:	f000 f8c7 	bl	80112f8 <__multadd>
 801116a:	4607      	mov	r7, r0
 801116c:	e7f0      	b.n	8011150 <_dtoa_r+0xa38>
 801116e:	f1ba 0f00 	cmp.w	sl, #0
 8011172:	9a00      	ldr	r2, [sp, #0]
 8011174:	bfcc      	ite	gt
 8011176:	46d0      	movgt	r8, sl
 8011178:	f04f 0801 	movle.w	r8, #1
 801117c:	4490      	add	r8, r2
 801117e:	f04f 0900 	mov.w	r9, #0
 8011182:	4629      	mov	r1, r5
 8011184:	2201      	movs	r2, #1
 8011186:	4630      	mov	r0, r6
 8011188:	9302      	str	r3, [sp, #8]
 801118a:	f000 fa65 	bl	8011658 <__lshift>
 801118e:	4621      	mov	r1, r4
 8011190:	4605      	mov	r5, r0
 8011192:	f000 facd 	bl	8011730 <__mcmp>
 8011196:	2800      	cmp	r0, #0
 8011198:	dcb1      	bgt.n	80110fe <_dtoa_r+0x9e6>
 801119a:	d102      	bne.n	80111a2 <_dtoa_r+0xa8a>
 801119c:	9b02      	ldr	r3, [sp, #8]
 801119e:	07db      	lsls	r3, r3, #31
 80111a0:	d4ad      	bmi.n	80110fe <_dtoa_r+0x9e6>
 80111a2:	4643      	mov	r3, r8
 80111a4:	4698      	mov	r8, r3
 80111a6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80111aa:	2a30      	cmp	r2, #48	; 0x30
 80111ac:	d0fa      	beq.n	80111a4 <_dtoa_r+0xa8c>
 80111ae:	e6f6      	b.n	8010f9e <_dtoa_r+0x886>
 80111b0:	9a00      	ldr	r2, [sp, #0]
 80111b2:	429a      	cmp	r2, r3
 80111b4:	d1a4      	bne.n	8011100 <_dtoa_r+0x9e8>
 80111b6:	f10b 0b01 	add.w	fp, fp, #1
 80111ba:	2331      	movs	r3, #49	; 0x31
 80111bc:	e778      	b.n	80110b0 <_dtoa_r+0x998>
 80111be:	4b15      	ldr	r3, [pc, #84]	; (8011214 <_dtoa_r+0xafc>)
 80111c0:	f7ff bb12 	b.w	80107e8 <_dtoa_r+0xd0>
 80111c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	f47f aaee 	bne.w	80107a8 <_dtoa_r+0x90>
 80111cc:	4b12      	ldr	r3, [pc, #72]	; (8011218 <_dtoa_r+0xb00>)
 80111ce:	f7ff bb0b 	b.w	80107e8 <_dtoa_r+0xd0>
 80111d2:	f1ba 0f00 	cmp.w	sl, #0
 80111d6:	dc03      	bgt.n	80111e0 <_dtoa_r+0xac8>
 80111d8:	9b07      	ldr	r3, [sp, #28]
 80111da:	2b02      	cmp	r3, #2
 80111dc:	f73f aec7 	bgt.w	8010f6e <_dtoa_r+0x856>
 80111e0:	f8dd 8000 	ldr.w	r8, [sp]
 80111e4:	4621      	mov	r1, r4
 80111e6:	4628      	mov	r0, r5
 80111e8:	f7ff fa08 	bl	80105fc <quorem>
 80111ec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80111f0:	f808 3b01 	strb.w	r3, [r8], #1
 80111f4:	9a00      	ldr	r2, [sp, #0]
 80111f6:	eba8 0202 	sub.w	r2, r8, r2
 80111fa:	4592      	cmp	sl, r2
 80111fc:	ddb7      	ble.n	801116e <_dtoa_r+0xa56>
 80111fe:	4629      	mov	r1, r5
 8011200:	2300      	movs	r3, #0
 8011202:	220a      	movs	r2, #10
 8011204:	4630      	mov	r0, r6
 8011206:	f000 f877 	bl	80112f8 <__multadd>
 801120a:	4605      	mov	r5, r0
 801120c:	e7ea      	b.n	80111e4 <_dtoa_r+0xacc>
 801120e:	bf00      	nop
 8011210:	0801414b 	.word	0x0801414b
 8011214:	080140a4 	.word	0x080140a4
 8011218:	080140c8 	.word	0x080140c8

0801121c <_localeconv_r>:
 801121c:	4800      	ldr	r0, [pc, #0]	; (8011220 <_localeconv_r+0x4>)
 801121e:	4770      	bx	lr
 8011220:	240001a0 	.word	0x240001a0

08011224 <malloc>:
 8011224:	4b02      	ldr	r3, [pc, #8]	; (8011230 <malloc+0xc>)
 8011226:	4601      	mov	r1, r0
 8011228:	6818      	ldr	r0, [r3, #0]
 801122a:	f000 bbe1 	b.w	80119f0 <_malloc_r>
 801122e:	bf00      	nop
 8011230:	2400004c 	.word	0x2400004c

08011234 <_Balloc>:
 8011234:	b570      	push	{r4, r5, r6, lr}
 8011236:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011238:	4604      	mov	r4, r0
 801123a:	460d      	mov	r5, r1
 801123c:	b976      	cbnz	r6, 801125c <_Balloc+0x28>
 801123e:	2010      	movs	r0, #16
 8011240:	f7ff fff0 	bl	8011224 <malloc>
 8011244:	4602      	mov	r2, r0
 8011246:	6260      	str	r0, [r4, #36]	; 0x24
 8011248:	b920      	cbnz	r0, 8011254 <_Balloc+0x20>
 801124a:	4b18      	ldr	r3, [pc, #96]	; (80112ac <_Balloc+0x78>)
 801124c:	4818      	ldr	r0, [pc, #96]	; (80112b0 <_Balloc+0x7c>)
 801124e:	2166      	movs	r1, #102	; 0x66
 8011250:	f000 fc38 	bl	8011ac4 <__assert_func>
 8011254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011258:	6006      	str	r6, [r0, #0]
 801125a:	60c6      	str	r6, [r0, #12]
 801125c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801125e:	68f3      	ldr	r3, [r6, #12]
 8011260:	b183      	cbz	r3, 8011284 <_Balloc+0x50>
 8011262:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011264:	68db      	ldr	r3, [r3, #12]
 8011266:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801126a:	b9b8      	cbnz	r0, 801129c <_Balloc+0x68>
 801126c:	2101      	movs	r1, #1
 801126e:	fa01 f605 	lsl.w	r6, r1, r5
 8011272:	1d72      	adds	r2, r6, #5
 8011274:	0092      	lsls	r2, r2, #2
 8011276:	4620      	mov	r0, r4
 8011278:	f000 fb5a 	bl	8011930 <_calloc_r>
 801127c:	b160      	cbz	r0, 8011298 <_Balloc+0x64>
 801127e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011282:	e00e      	b.n	80112a2 <_Balloc+0x6e>
 8011284:	2221      	movs	r2, #33	; 0x21
 8011286:	2104      	movs	r1, #4
 8011288:	4620      	mov	r0, r4
 801128a:	f000 fb51 	bl	8011930 <_calloc_r>
 801128e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011290:	60f0      	str	r0, [r6, #12]
 8011292:	68db      	ldr	r3, [r3, #12]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d1e4      	bne.n	8011262 <_Balloc+0x2e>
 8011298:	2000      	movs	r0, #0
 801129a:	bd70      	pop	{r4, r5, r6, pc}
 801129c:	6802      	ldr	r2, [r0, #0]
 801129e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80112a2:	2300      	movs	r3, #0
 80112a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80112a8:	e7f7      	b.n	801129a <_Balloc+0x66>
 80112aa:	bf00      	nop
 80112ac:	080140d5 	.word	0x080140d5
 80112b0:	0801415c 	.word	0x0801415c

080112b4 <_Bfree>:
 80112b4:	b570      	push	{r4, r5, r6, lr}
 80112b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80112b8:	4605      	mov	r5, r0
 80112ba:	460c      	mov	r4, r1
 80112bc:	b976      	cbnz	r6, 80112dc <_Bfree+0x28>
 80112be:	2010      	movs	r0, #16
 80112c0:	f7ff ffb0 	bl	8011224 <malloc>
 80112c4:	4602      	mov	r2, r0
 80112c6:	6268      	str	r0, [r5, #36]	; 0x24
 80112c8:	b920      	cbnz	r0, 80112d4 <_Bfree+0x20>
 80112ca:	4b09      	ldr	r3, [pc, #36]	; (80112f0 <_Bfree+0x3c>)
 80112cc:	4809      	ldr	r0, [pc, #36]	; (80112f4 <_Bfree+0x40>)
 80112ce:	218a      	movs	r1, #138	; 0x8a
 80112d0:	f000 fbf8 	bl	8011ac4 <__assert_func>
 80112d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80112d8:	6006      	str	r6, [r0, #0]
 80112da:	60c6      	str	r6, [r0, #12]
 80112dc:	b13c      	cbz	r4, 80112ee <_Bfree+0x3a>
 80112de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80112e0:	6862      	ldr	r2, [r4, #4]
 80112e2:	68db      	ldr	r3, [r3, #12]
 80112e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80112e8:	6021      	str	r1, [r4, #0]
 80112ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80112ee:	bd70      	pop	{r4, r5, r6, pc}
 80112f0:	080140d5 	.word	0x080140d5
 80112f4:	0801415c 	.word	0x0801415c

080112f8 <__multadd>:
 80112f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80112fc:	690e      	ldr	r6, [r1, #16]
 80112fe:	4607      	mov	r7, r0
 8011300:	4698      	mov	r8, r3
 8011302:	460c      	mov	r4, r1
 8011304:	f101 0014 	add.w	r0, r1, #20
 8011308:	2300      	movs	r3, #0
 801130a:	6805      	ldr	r5, [r0, #0]
 801130c:	b2a9      	uxth	r1, r5
 801130e:	fb02 8101 	mla	r1, r2, r1, r8
 8011312:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011316:	0c2d      	lsrs	r5, r5, #16
 8011318:	fb02 c505 	mla	r5, r2, r5, ip
 801131c:	b289      	uxth	r1, r1
 801131e:	3301      	adds	r3, #1
 8011320:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011324:	429e      	cmp	r6, r3
 8011326:	f840 1b04 	str.w	r1, [r0], #4
 801132a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801132e:	dcec      	bgt.n	801130a <__multadd+0x12>
 8011330:	f1b8 0f00 	cmp.w	r8, #0
 8011334:	d022      	beq.n	801137c <__multadd+0x84>
 8011336:	68a3      	ldr	r3, [r4, #8]
 8011338:	42b3      	cmp	r3, r6
 801133a:	dc19      	bgt.n	8011370 <__multadd+0x78>
 801133c:	6861      	ldr	r1, [r4, #4]
 801133e:	4638      	mov	r0, r7
 8011340:	3101      	adds	r1, #1
 8011342:	f7ff ff77 	bl	8011234 <_Balloc>
 8011346:	4605      	mov	r5, r0
 8011348:	b928      	cbnz	r0, 8011356 <__multadd+0x5e>
 801134a:	4602      	mov	r2, r0
 801134c:	4b0d      	ldr	r3, [pc, #52]	; (8011384 <__multadd+0x8c>)
 801134e:	480e      	ldr	r0, [pc, #56]	; (8011388 <__multadd+0x90>)
 8011350:	21b5      	movs	r1, #181	; 0xb5
 8011352:	f000 fbb7 	bl	8011ac4 <__assert_func>
 8011356:	6922      	ldr	r2, [r4, #16]
 8011358:	3202      	adds	r2, #2
 801135a:	f104 010c 	add.w	r1, r4, #12
 801135e:	0092      	lsls	r2, r2, #2
 8011360:	300c      	adds	r0, #12
 8011362:	f7fe fcf3 	bl	800fd4c <memcpy>
 8011366:	4621      	mov	r1, r4
 8011368:	4638      	mov	r0, r7
 801136a:	f7ff ffa3 	bl	80112b4 <_Bfree>
 801136e:	462c      	mov	r4, r5
 8011370:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011374:	3601      	adds	r6, #1
 8011376:	f8c3 8014 	str.w	r8, [r3, #20]
 801137a:	6126      	str	r6, [r4, #16]
 801137c:	4620      	mov	r0, r4
 801137e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011382:	bf00      	nop
 8011384:	0801414b 	.word	0x0801414b
 8011388:	0801415c 	.word	0x0801415c

0801138c <__hi0bits>:
 801138c:	0c03      	lsrs	r3, r0, #16
 801138e:	041b      	lsls	r3, r3, #16
 8011390:	b9d3      	cbnz	r3, 80113c8 <__hi0bits+0x3c>
 8011392:	0400      	lsls	r0, r0, #16
 8011394:	2310      	movs	r3, #16
 8011396:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801139a:	bf04      	itt	eq
 801139c:	0200      	lsleq	r0, r0, #8
 801139e:	3308      	addeq	r3, #8
 80113a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80113a4:	bf04      	itt	eq
 80113a6:	0100      	lsleq	r0, r0, #4
 80113a8:	3304      	addeq	r3, #4
 80113aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80113ae:	bf04      	itt	eq
 80113b0:	0080      	lsleq	r0, r0, #2
 80113b2:	3302      	addeq	r3, #2
 80113b4:	2800      	cmp	r0, #0
 80113b6:	db05      	blt.n	80113c4 <__hi0bits+0x38>
 80113b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80113bc:	f103 0301 	add.w	r3, r3, #1
 80113c0:	bf08      	it	eq
 80113c2:	2320      	moveq	r3, #32
 80113c4:	4618      	mov	r0, r3
 80113c6:	4770      	bx	lr
 80113c8:	2300      	movs	r3, #0
 80113ca:	e7e4      	b.n	8011396 <__hi0bits+0xa>

080113cc <__lo0bits>:
 80113cc:	6803      	ldr	r3, [r0, #0]
 80113ce:	f013 0207 	ands.w	r2, r3, #7
 80113d2:	4601      	mov	r1, r0
 80113d4:	d00b      	beq.n	80113ee <__lo0bits+0x22>
 80113d6:	07da      	lsls	r2, r3, #31
 80113d8:	d424      	bmi.n	8011424 <__lo0bits+0x58>
 80113da:	0798      	lsls	r0, r3, #30
 80113dc:	bf49      	itett	mi
 80113de:	085b      	lsrmi	r3, r3, #1
 80113e0:	089b      	lsrpl	r3, r3, #2
 80113e2:	2001      	movmi	r0, #1
 80113e4:	600b      	strmi	r3, [r1, #0]
 80113e6:	bf5c      	itt	pl
 80113e8:	600b      	strpl	r3, [r1, #0]
 80113ea:	2002      	movpl	r0, #2
 80113ec:	4770      	bx	lr
 80113ee:	b298      	uxth	r0, r3
 80113f0:	b9b0      	cbnz	r0, 8011420 <__lo0bits+0x54>
 80113f2:	0c1b      	lsrs	r3, r3, #16
 80113f4:	2010      	movs	r0, #16
 80113f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80113fa:	bf04      	itt	eq
 80113fc:	0a1b      	lsreq	r3, r3, #8
 80113fe:	3008      	addeq	r0, #8
 8011400:	071a      	lsls	r2, r3, #28
 8011402:	bf04      	itt	eq
 8011404:	091b      	lsreq	r3, r3, #4
 8011406:	3004      	addeq	r0, #4
 8011408:	079a      	lsls	r2, r3, #30
 801140a:	bf04      	itt	eq
 801140c:	089b      	lsreq	r3, r3, #2
 801140e:	3002      	addeq	r0, #2
 8011410:	07da      	lsls	r2, r3, #31
 8011412:	d403      	bmi.n	801141c <__lo0bits+0x50>
 8011414:	085b      	lsrs	r3, r3, #1
 8011416:	f100 0001 	add.w	r0, r0, #1
 801141a:	d005      	beq.n	8011428 <__lo0bits+0x5c>
 801141c:	600b      	str	r3, [r1, #0]
 801141e:	4770      	bx	lr
 8011420:	4610      	mov	r0, r2
 8011422:	e7e8      	b.n	80113f6 <__lo0bits+0x2a>
 8011424:	2000      	movs	r0, #0
 8011426:	4770      	bx	lr
 8011428:	2020      	movs	r0, #32
 801142a:	4770      	bx	lr

0801142c <__i2b>:
 801142c:	b510      	push	{r4, lr}
 801142e:	460c      	mov	r4, r1
 8011430:	2101      	movs	r1, #1
 8011432:	f7ff feff 	bl	8011234 <_Balloc>
 8011436:	4602      	mov	r2, r0
 8011438:	b928      	cbnz	r0, 8011446 <__i2b+0x1a>
 801143a:	4b05      	ldr	r3, [pc, #20]	; (8011450 <__i2b+0x24>)
 801143c:	4805      	ldr	r0, [pc, #20]	; (8011454 <__i2b+0x28>)
 801143e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011442:	f000 fb3f 	bl	8011ac4 <__assert_func>
 8011446:	2301      	movs	r3, #1
 8011448:	6144      	str	r4, [r0, #20]
 801144a:	6103      	str	r3, [r0, #16]
 801144c:	bd10      	pop	{r4, pc}
 801144e:	bf00      	nop
 8011450:	0801414b 	.word	0x0801414b
 8011454:	0801415c 	.word	0x0801415c

08011458 <__multiply>:
 8011458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801145c:	4614      	mov	r4, r2
 801145e:	690a      	ldr	r2, [r1, #16]
 8011460:	6923      	ldr	r3, [r4, #16]
 8011462:	429a      	cmp	r2, r3
 8011464:	bfb8      	it	lt
 8011466:	460b      	movlt	r3, r1
 8011468:	460d      	mov	r5, r1
 801146a:	bfbc      	itt	lt
 801146c:	4625      	movlt	r5, r4
 801146e:	461c      	movlt	r4, r3
 8011470:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8011474:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011478:	68ab      	ldr	r3, [r5, #8]
 801147a:	6869      	ldr	r1, [r5, #4]
 801147c:	eb0a 0709 	add.w	r7, sl, r9
 8011480:	42bb      	cmp	r3, r7
 8011482:	b085      	sub	sp, #20
 8011484:	bfb8      	it	lt
 8011486:	3101      	addlt	r1, #1
 8011488:	f7ff fed4 	bl	8011234 <_Balloc>
 801148c:	b930      	cbnz	r0, 801149c <__multiply+0x44>
 801148e:	4602      	mov	r2, r0
 8011490:	4b42      	ldr	r3, [pc, #264]	; (801159c <__multiply+0x144>)
 8011492:	4843      	ldr	r0, [pc, #268]	; (80115a0 <__multiply+0x148>)
 8011494:	f240 115d 	movw	r1, #349	; 0x15d
 8011498:	f000 fb14 	bl	8011ac4 <__assert_func>
 801149c:	f100 0614 	add.w	r6, r0, #20
 80114a0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80114a4:	4633      	mov	r3, r6
 80114a6:	2200      	movs	r2, #0
 80114a8:	4543      	cmp	r3, r8
 80114aa:	d31e      	bcc.n	80114ea <__multiply+0x92>
 80114ac:	f105 0c14 	add.w	ip, r5, #20
 80114b0:	f104 0314 	add.w	r3, r4, #20
 80114b4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80114b8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80114bc:	9202      	str	r2, [sp, #8]
 80114be:	ebac 0205 	sub.w	r2, ip, r5
 80114c2:	3a15      	subs	r2, #21
 80114c4:	f022 0203 	bic.w	r2, r2, #3
 80114c8:	3204      	adds	r2, #4
 80114ca:	f105 0115 	add.w	r1, r5, #21
 80114ce:	458c      	cmp	ip, r1
 80114d0:	bf38      	it	cc
 80114d2:	2204      	movcc	r2, #4
 80114d4:	9201      	str	r2, [sp, #4]
 80114d6:	9a02      	ldr	r2, [sp, #8]
 80114d8:	9303      	str	r3, [sp, #12]
 80114da:	429a      	cmp	r2, r3
 80114dc:	d808      	bhi.n	80114f0 <__multiply+0x98>
 80114de:	2f00      	cmp	r7, #0
 80114e0:	dc55      	bgt.n	801158e <__multiply+0x136>
 80114e2:	6107      	str	r7, [r0, #16]
 80114e4:	b005      	add	sp, #20
 80114e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114ea:	f843 2b04 	str.w	r2, [r3], #4
 80114ee:	e7db      	b.n	80114a8 <__multiply+0x50>
 80114f0:	f8b3 a000 	ldrh.w	sl, [r3]
 80114f4:	f1ba 0f00 	cmp.w	sl, #0
 80114f8:	d020      	beq.n	801153c <__multiply+0xe4>
 80114fa:	f105 0e14 	add.w	lr, r5, #20
 80114fe:	46b1      	mov	r9, r6
 8011500:	2200      	movs	r2, #0
 8011502:	f85e 4b04 	ldr.w	r4, [lr], #4
 8011506:	f8d9 b000 	ldr.w	fp, [r9]
 801150a:	b2a1      	uxth	r1, r4
 801150c:	fa1f fb8b 	uxth.w	fp, fp
 8011510:	fb0a b101 	mla	r1, sl, r1, fp
 8011514:	4411      	add	r1, r2
 8011516:	f8d9 2000 	ldr.w	r2, [r9]
 801151a:	0c24      	lsrs	r4, r4, #16
 801151c:	0c12      	lsrs	r2, r2, #16
 801151e:	fb0a 2404 	mla	r4, sl, r4, r2
 8011522:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8011526:	b289      	uxth	r1, r1
 8011528:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801152c:	45f4      	cmp	ip, lr
 801152e:	f849 1b04 	str.w	r1, [r9], #4
 8011532:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8011536:	d8e4      	bhi.n	8011502 <__multiply+0xaa>
 8011538:	9901      	ldr	r1, [sp, #4]
 801153a:	5072      	str	r2, [r6, r1]
 801153c:	9a03      	ldr	r2, [sp, #12]
 801153e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011542:	3304      	adds	r3, #4
 8011544:	f1b9 0f00 	cmp.w	r9, #0
 8011548:	d01f      	beq.n	801158a <__multiply+0x132>
 801154a:	6834      	ldr	r4, [r6, #0]
 801154c:	f105 0114 	add.w	r1, r5, #20
 8011550:	46b6      	mov	lr, r6
 8011552:	f04f 0a00 	mov.w	sl, #0
 8011556:	880a      	ldrh	r2, [r1, #0]
 8011558:	f8be b002 	ldrh.w	fp, [lr, #2]
 801155c:	fb09 b202 	mla	r2, r9, r2, fp
 8011560:	4492      	add	sl, r2
 8011562:	b2a4      	uxth	r4, r4
 8011564:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011568:	f84e 4b04 	str.w	r4, [lr], #4
 801156c:	f851 4b04 	ldr.w	r4, [r1], #4
 8011570:	f8be 2000 	ldrh.w	r2, [lr]
 8011574:	0c24      	lsrs	r4, r4, #16
 8011576:	fb09 2404 	mla	r4, r9, r4, r2
 801157a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801157e:	458c      	cmp	ip, r1
 8011580:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8011584:	d8e7      	bhi.n	8011556 <__multiply+0xfe>
 8011586:	9a01      	ldr	r2, [sp, #4]
 8011588:	50b4      	str	r4, [r6, r2]
 801158a:	3604      	adds	r6, #4
 801158c:	e7a3      	b.n	80114d6 <__multiply+0x7e>
 801158e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011592:	2b00      	cmp	r3, #0
 8011594:	d1a5      	bne.n	80114e2 <__multiply+0x8a>
 8011596:	3f01      	subs	r7, #1
 8011598:	e7a1      	b.n	80114de <__multiply+0x86>
 801159a:	bf00      	nop
 801159c:	0801414b 	.word	0x0801414b
 80115a0:	0801415c 	.word	0x0801415c

080115a4 <__pow5mult>:
 80115a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115a8:	4615      	mov	r5, r2
 80115aa:	f012 0203 	ands.w	r2, r2, #3
 80115ae:	4606      	mov	r6, r0
 80115b0:	460f      	mov	r7, r1
 80115b2:	d007      	beq.n	80115c4 <__pow5mult+0x20>
 80115b4:	4c25      	ldr	r4, [pc, #148]	; (801164c <__pow5mult+0xa8>)
 80115b6:	3a01      	subs	r2, #1
 80115b8:	2300      	movs	r3, #0
 80115ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80115be:	f7ff fe9b 	bl	80112f8 <__multadd>
 80115c2:	4607      	mov	r7, r0
 80115c4:	10ad      	asrs	r5, r5, #2
 80115c6:	d03d      	beq.n	8011644 <__pow5mult+0xa0>
 80115c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80115ca:	b97c      	cbnz	r4, 80115ec <__pow5mult+0x48>
 80115cc:	2010      	movs	r0, #16
 80115ce:	f7ff fe29 	bl	8011224 <malloc>
 80115d2:	4602      	mov	r2, r0
 80115d4:	6270      	str	r0, [r6, #36]	; 0x24
 80115d6:	b928      	cbnz	r0, 80115e4 <__pow5mult+0x40>
 80115d8:	4b1d      	ldr	r3, [pc, #116]	; (8011650 <__pow5mult+0xac>)
 80115da:	481e      	ldr	r0, [pc, #120]	; (8011654 <__pow5mult+0xb0>)
 80115dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80115e0:	f000 fa70 	bl	8011ac4 <__assert_func>
 80115e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80115e8:	6004      	str	r4, [r0, #0]
 80115ea:	60c4      	str	r4, [r0, #12]
 80115ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80115f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80115f4:	b94c      	cbnz	r4, 801160a <__pow5mult+0x66>
 80115f6:	f240 2171 	movw	r1, #625	; 0x271
 80115fa:	4630      	mov	r0, r6
 80115fc:	f7ff ff16 	bl	801142c <__i2b>
 8011600:	2300      	movs	r3, #0
 8011602:	f8c8 0008 	str.w	r0, [r8, #8]
 8011606:	4604      	mov	r4, r0
 8011608:	6003      	str	r3, [r0, #0]
 801160a:	f04f 0900 	mov.w	r9, #0
 801160e:	07eb      	lsls	r3, r5, #31
 8011610:	d50a      	bpl.n	8011628 <__pow5mult+0x84>
 8011612:	4639      	mov	r1, r7
 8011614:	4622      	mov	r2, r4
 8011616:	4630      	mov	r0, r6
 8011618:	f7ff ff1e 	bl	8011458 <__multiply>
 801161c:	4639      	mov	r1, r7
 801161e:	4680      	mov	r8, r0
 8011620:	4630      	mov	r0, r6
 8011622:	f7ff fe47 	bl	80112b4 <_Bfree>
 8011626:	4647      	mov	r7, r8
 8011628:	106d      	asrs	r5, r5, #1
 801162a:	d00b      	beq.n	8011644 <__pow5mult+0xa0>
 801162c:	6820      	ldr	r0, [r4, #0]
 801162e:	b938      	cbnz	r0, 8011640 <__pow5mult+0x9c>
 8011630:	4622      	mov	r2, r4
 8011632:	4621      	mov	r1, r4
 8011634:	4630      	mov	r0, r6
 8011636:	f7ff ff0f 	bl	8011458 <__multiply>
 801163a:	6020      	str	r0, [r4, #0]
 801163c:	f8c0 9000 	str.w	r9, [r0]
 8011640:	4604      	mov	r4, r0
 8011642:	e7e4      	b.n	801160e <__pow5mult+0x6a>
 8011644:	4638      	mov	r0, r7
 8011646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801164a:	bf00      	nop
 801164c:	080142b0 	.word	0x080142b0
 8011650:	080140d5 	.word	0x080140d5
 8011654:	0801415c 	.word	0x0801415c

08011658 <__lshift>:
 8011658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801165c:	460c      	mov	r4, r1
 801165e:	6849      	ldr	r1, [r1, #4]
 8011660:	6923      	ldr	r3, [r4, #16]
 8011662:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011666:	68a3      	ldr	r3, [r4, #8]
 8011668:	4607      	mov	r7, r0
 801166a:	4691      	mov	r9, r2
 801166c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011670:	f108 0601 	add.w	r6, r8, #1
 8011674:	42b3      	cmp	r3, r6
 8011676:	db0b      	blt.n	8011690 <__lshift+0x38>
 8011678:	4638      	mov	r0, r7
 801167a:	f7ff fddb 	bl	8011234 <_Balloc>
 801167e:	4605      	mov	r5, r0
 8011680:	b948      	cbnz	r0, 8011696 <__lshift+0x3e>
 8011682:	4602      	mov	r2, r0
 8011684:	4b28      	ldr	r3, [pc, #160]	; (8011728 <__lshift+0xd0>)
 8011686:	4829      	ldr	r0, [pc, #164]	; (801172c <__lshift+0xd4>)
 8011688:	f240 11d9 	movw	r1, #473	; 0x1d9
 801168c:	f000 fa1a 	bl	8011ac4 <__assert_func>
 8011690:	3101      	adds	r1, #1
 8011692:	005b      	lsls	r3, r3, #1
 8011694:	e7ee      	b.n	8011674 <__lshift+0x1c>
 8011696:	2300      	movs	r3, #0
 8011698:	f100 0114 	add.w	r1, r0, #20
 801169c:	f100 0210 	add.w	r2, r0, #16
 80116a0:	4618      	mov	r0, r3
 80116a2:	4553      	cmp	r3, sl
 80116a4:	db33      	blt.n	801170e <__lshift+0xb6>
 80116a6:	6920      	ldr	r0, [r4, #16]
 80116a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80116ac:	f104 0314 	add.w	r3, r4, #20
 80116b0:	f019 091f 	ands.w	r9, r9, #31
 80116b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80116b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80116bc:	d02b      	beq.n	8011716 <__lshift+0xbe>
 80116be:	f1c9 0e20 	rsb	lr, r9, #32
 80116c2:	468a      	mov	sl, r1
 80116c4:	2200      	movs	r2, #0
 80116c6:	6818      	ldr	r0, [r3, #0]
 80116c8:	fa00 f009 	lsl.w	r0, r0, r9
 80116cc:	4302      	orrs	r2, r0
 80116ce:	f84a 2b04 	str.w	r2, [sl], #4
 80116d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80116d6:	459c      	cmp	ip, r3
 80116d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80116dc:	d8f3      	bhi.n	80116c6 <__lshift+0x6e>
 80116de:	ebac 0304 	sub.w	r3, ip, r4
 80116e2:	3b15      	subs	r3, #21
 80116e4:	f023 0303 	bic.w	r3, r3, #3
 80116e8:	3304      	adds	r3, #4
 80116ea:	f104 0015 	add.w	r0, r4, #21
 80116ee:	4584      	cmp	ip, r0
 80116f0:	bf38      	it	cc
 80116f2:	2304      	movcc	r3, #4
 80116f4:	50ca      	str	r2, [r1, r3]
 80116f6:	b10a      	cbz	r2, 80116fc <__lshift+0xa4>
 80116f8:	f108 0602 	add.w	r6, r8, #2
 80116fc:	3e01      	subs	r6, #1
 80116fe:	4638      	mov	r0, r7
 8011700:	612e      	str	r6, [r5, #16]
 8011702:	4621      	mov	r1, r4
 8011704:	f7ff fdd6 	bl	80112b4 <_Bfree>
 8011708:	4628      	mov	r0, r5
 801170a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801170e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011712:	3301      	adds	r3, #1
 8011714:	e7c5      	b.n	80116a2 <__lshift+0x4a>
 8011716:	3904      	subs	r1, #4
 8011718:	f853 2b04 	ldr.w	r2, [r3], #4
 801171c:	f841 2f04 	str.w	r2, [r1, #4]!
 8011720:	459c      	cmp	ip, r3
 8011722:	d8f9      	bhi.n	8011718 <__lshift+0xc0>
 8011724:	e7ea      	b.n	80116fc <__lshift+0xa4>
 8011726:	bf00      	nop
 8011728:	0801414b 	.word	0x0801414b
 801172c:	0801415c 	.word	0x0801415c

08011730 <__mcmp>:
 8011730:	b530      	push	{r4, r5, lr}
 8011732:	6902      	ldr	r2, [r0, #16]
 8011734:	690c      	ldr	r4, [r1, #16]
 8011736:	1b12      	subs	r2, r2, r4
 8011738:	d10e      	bne.n	8011758 <__mcmp+0x28>
 801173a:	f100 0314 	add.w	r3, r0, #20
 801173e:	3114      	adds	r1, #20
 8011740:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011744:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011748:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801174c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011750:	42a5      	cmp	r5, r4
 8011752:	d003      	beq.n	801175c <__mcmp+0x2c>
 8011754:	d305      	bcc.n	8011762 <__mcmp+0x32>
 8011756:	2201      	movs	r2, #1
 8011758:	4610      	mov	r0, r2
 801175a:	bd30      	pop	{r4, r5, pc}
 801175c:	4283      	cmp	r3, r0
 801175e:	d3f3      	bcc.n	8011748 <__mcmp+0x18>
 8011760:	e7fa      	b.n	8011758 <__mcmp+0x28>
 8011762:	f04f 32ff 	mov.w	r2, #4294967295
 8011766:	e7f7      	b.n	8011758 <__mcmp+0x28>

08011768 <__mdiff>:
 8011768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801176c:	460c      	mov	r4, r1
 801176e:	4606      	mov	r6, r0
 8011770:	4611      	mov	r1, r2
 8011772:	4620      	mov	r0, r4
 8011774:	4617      	mov	r7, r2
 8011776:	f7ff ffdb 	bl	8011730 <__mcmp>
 801177a:	1e05      	subs	r5, r0, #0
 801177c:	d110      	bne.n	80117a0 <__mdiff+0x38>
 801177e:	4629      	mov	r1, r5
 8011780:	4630      	mov	r0, r6
 8011782:	f7ff fd57 	bl	8011234 <_Balloc>
 8011786:	b930      	cbnz	r0, 8011796 <__mdiff+0x2e>
 8011788:	4b39      	ldr	r3, [pc, #228]	; (8011870 <__mdiff+0x108>)
 801178a:	4602      	mov	r2, r0
 801178c:	f240 2132 	movw	r1, #562	; 0x232
 8011790:	4838      	ldr	r0, [pc, #224]	; (8011874 <__mdiff+0x10c>)
 8011792:	f000 f997 	bl	8011ac4 <__assert_func>
 8011796:	2301      	movs	r3, #1
 8011798:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801179c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117a0:	bfa4      	itt	ge
 80117a2:	463b      	movge	r3, r7
 80117a4:	4627      	movge	r7, r4
 80117a6:	4630      	mov	r0, r6
 80117a8:	6879      	ldr	r1, [r7, #4]
 80117aa:	bfa6      	itte	ge
 80117ac:	461c      	movge	r4, r3
 80117ae:	2500      	movge	r5, #0
 80117b0:	2501      	movlt	r5, #1
 80117b2:	f7ff fd3f 	bl	8011234 <_Balloc>
 80117b6:	b920      	cbnz	r0, 80117c2 <__mdiff+0x5a>
 80117b8:	4b2d      	ldr	r3, [pc, #180]	; (8011870 <__mdiff+0x108>)
 80117ba:	4602      	mov	r2, r0
 80117bc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80117c0:	e7e6      	b.n	8011790 <__mdiff+0x28>
 80117c2:	693e      	ldr	r6, [r7, #16]
 80117c4:	60c5      	str	r5, [r0, #12]
 80117c6:	6925      	ldr	r5, [r4, #16]
 80117c8:	f107 0114 	add.w	r1, r7, #20
 80117cc:	f104 0914 	add.w	r9, r4, #20
 80117d0:	f100 0e14 	add.w	lr, r0, #20
 80117d4:	f107 0210 	add.w	r2, r7, #16
 80117d8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80117dc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80117e0:	46f2      	mov	sl, lr
 80117e2:	2700      	movs	r7, #0
 80117e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80117e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80117ec:	fa1f f883 	uxth.w	r8, r3
 80117f0:	fa17 f78b 	uxtah	r7, r7, fp
 80117f4:	0c1b      	lsrs	r3, r3, #16
 80117f6:	eba7 0808 	sub.w	r8, r7, r8
 80117fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80117fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011802:	fa1f f888 	uxth.w	r8, r8
 8011806:	141f      	asrs	r7, r3, #16
 8011808:	454d      	cmp	r5, r9
 801180a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801180e:	f84a 3b04 	str.w	r3, [sl], #4
 8011812:	d8e7      	bhi.n	80117e4 <__mdiff+0x7c>
 8011814:	1b2b      	subs	r3, r5, r4
 8011816:	3b15      	subs	r3, #21
 8011818:	f023 0303 	bic.w	r3, r3, #3
 801181c:	3304      	adds	r3, #4
 801181e:	3415      	adds	r4, #21
 8011820:	42a5      	cmp	r5, r4
 8011822:	bf38      	it	cc
 8011824:	2304      	movcc	r3, #4
 8011826:	4419      	add	r1, r3
 8011828:	4473      	add	r3, lr
 801182a:	469e      	mov	lr, r3
 801182c:	460d      	mov	r5, r1
 801182e:	4565      	cmp	r5, ip
 8011830:	d30e      	bcc.n	8011850 <__mdiff+0xe8>
 8011832:	f10c 0203 	add.w	r2, ip, #3
 8011836:	1a52      	subs	r2, r2, r1
 8011838:	f022 0203 	bic.w	r2, r2, #3
 801183c:	3903      	subs	r1, #3
 801183e:	458c      	cmp	ip, r1
 8011840:	bf38      	it	cc
 8011842:	2200      	movcc	r2, #0
 8011844:	441a      	add	r2, r3
 8011846:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801184a:	b17b      	cbz	r3, 801186c <__mdiff+0x104>
 801184c:	6106      	str	r6, [r0, #16]
 801184e:	e7a5      	b.n	801179c <__mdiff+0x34>
 8011850:	f855 8b04 	ldr.w	r8, [r5], #4
 8011854:	fa17 f488 	uxtah	r4, r7, r8
 8011858:	1422      	asrs	r2, r4, #16
 801185a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801185e:	b2a4      	uxth	r4, r4
 8011860:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8011864:	f84e 4b04 	str.w	r4, [lr], #4
 8011868:	1417      	asrs	r7, r2, #16
 801186a:	e7e0      	b.n	801182e <__mdiff+0xc6>
 801186c:	3e01      	subs	r6, #1
 801186e:	e7ea      	b.n	8011846 <__mdiff+0xde>
 8011870:	0801414b 	.word	0x0801414b
 8011874:	0801415c 	.word	0x0801415c

08011878 <__d2b>:
 8011878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801187c:	4689      	mov	r9, r1
 801187e:	2101      	movs	r1, #1
 8011880:	ec57 6b10 	vmov	r6, r7, d0
 8011884:	4690      	mov	r8, r2
 8011886:	f7ff fcd5 	bl	8011234 <_Balloc>
 801188a:	4604      	mov	r4, r0
 801188c:	b930      	cbnz	r0, 801189c <__d2b+0x24>
 801188e:	4602      	mov	r2, r0
 8011890:	4b25      	ldr	r3, [pc, #148]	; (8011928 <__d2b+0xb0>)
 8011892:	4826      	ldr	r0, [pc, #152]	; (801192c <__d2b+0xb4>)
 8011894:	f240 310a 	movw	r1, #778	; 0x30a
 8011898:	f000 f914 	bl	8011ac4 <__assert_func>
 801189c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80118a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80118a4:	bb35      	cbnz	r5, 80118f4 <__d2b+0x7c>
 80118a6:	2e00      	cmp	r6, #0
 80118a8:	9301      	str	r3, [sp, #4]
 80118aa:	d028      	beq.n	80118fe <__d2b+0x86>
 80118ac:	4668      	mov	r0, sp
 80118ae:	9600      	str	r6, [sp, #0]
 80118b0:	f7ff fd8c 	bl	80113cc <__lo0bits>
 80118b4:	9900      	ldr	r1, [sp, #0]
 80118b6:	b300      	cbz	r0, 80118fa <__d2b+0x82>
 80118b8:	9a01      	ldr	r2, [sp, #4]
 80118ba:	f1c0 0320 	rsb	r3, r0, #32
 80118be:	fa02 f303 	lsl.w	r3, r2, r3
 80118c2:	430b      	orrs	r3, r1
 80118c4:	40c2      	lsrs	r2, r0
 80118c6:	6163      	str	r3, [r4, #20]
 80118c8:	9201      	str	r2, [sp, #4]
 80118ca:	9b01      	ldr	r3, [sp, #4]
 80118cc:	61a3      	str	r3, [r4, #24]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	bf14      	ite	ne
 80118d2:	2202      	movne	r2, #2
 80118d4:	2201      	moveq	r2, #1
 80118d6:	6122      	str	r2, [r4, #16]
 80118d8:	b1d5      	cbz	r5, 8011910 <__d2b+0x98>
 80118da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80118de:	4405      	add	r5, r0
 80118e0:	f8c9 5000 	str.w	r5, [r9]
 80118e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80118e8:	f8c8 0000 	str.w	r0, [r8]
 80118ec:	4620      	mov	r0, r4
 80118ee:	b003      	add	sp, #12
 80118f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80118f8:	e7d5      	b.n	80118a6 <__d2b+0x2e>
 80118fa:	6161      	str	r1, [r4, #20]
 80118fc:	e7e5      	b.n	80118ca <__d2b+0x52>
 80118fe:	a801      	add	r0, sp, #4
 8011900:	f7ff fd64 	bl	80113cc <__lo0bits>
 8011904:	9b01      	ldr	r3, [sp, #4]
 8011906:	6163      	str	r3, [r4, #20]
 8011908:	2201      	movs	r2, #1
 801190a:	6122      	str	r2, [r4, #16]
 801190c:	3020      	adds	r0, #32
 801190e:	e7e3      	b.n	80118d8 <__d2b+0x60>
 8011910:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011914:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011918:	f8c9 0000 	str.w	r0, [r9]
 801191c:	6918      	ldr	r0, [r3, #16]
 801191e:	f7ff fd35 	bl	801138c <__hi0bits>
 8011922:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011926:	e7df      	b.n	80118e8 <__d2b+0x70>
 8011928:	0801414b 	.word	0x0801414b
 801192c:	0801415c 	.word	0x0801415c

08011930 <_calloc_r>:
 8011930:	b513      	push	{r0, r1, r4, lr}
 8011932:	434a      	muls	r2, r1
 8011934:	4611      	mov	r1, r2
 8011936:	9201      	str	r2, [sp, #4]
 8011938:	f000 f85a 	bl	80119f0 <_malloc_r>
 801193c:	4604      	mov	r4, r0
 801193e:	b118      	cbz	r0, 8011948 <_calloc_r+0x18>
 8011940:	9a01      	ldr	r2, [sp, #4]
 8011942:	2100      	movs	r1, #0
 8011944:	f7fe fa10 	bl	800fd68 <memset>
 8011948:	4620      	mov	r0, r4
 801194a:	b002      	add	sp, #8
 801194c:	bd10      	pop	{r4, pc}
	...

08011950 <_free_r>:
 8011950:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011952:	2900      	cmp	r1, #0
 8011954:	d048      	beq.n	80119e8 <_free_r+0x98>
 8011956:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801195a:	9001      	str	r0, [sp, #4]
 801195c:	2b00      	cmp	r3, #0
 801195e:	f1a1 0404 	sub.w	r4, r1, #4
 8011962:	bfb8      	it	lt
 8011964:	18e4      	addlt	r4, r4, r3
 8011966:	f000 f8ef 	bl	8011b48 <__malloc_lock>
 801196a:	4a20      	ldr	r2, [pc, #128]	; (80119ec <_free_r+0x9c>)
 801196c:	9801      	ldr	r0, [sp, #4]
 801196e:	6813      	ldr	r3, [r2, #0]
 8011970:	4615      	mov	r5, r2
 8011972:	b933      	cbnz	r3, 8011982 <_free_r+0x32>
 8011974:	6063      	str	r3, [r4, #4]
 8011976:	6014      	str	r4, [r2, #0]
 8011978:	b003      	add	sp, #12
 801197a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801197e:	f000 b8e9 	b.w	8011b54 <__malloc_unlock>
 8011982:	42a3      	cmp	r3, r4
 8011984:	d90b      	bls.n	801199e <_free_r+0x4e>
 8011986:	6821      	ldr	r1, [r4, #0]
 8011988:	1862      	adds	r2, r4, r1
 801198a:	4293      	cmp	r3, r2
 801198c:	bf04      	itt	eq
 801198e:	681a      	ldreq	r2, [r3, #0]
 8011990:	685b      	ldreq	r3, [r3, #4]
 8011992:	6063      	str	r3, [r4, #4]
 8011994:	bf04      	itt	eq
 8011996:	1852      	addeq	r2, r2, r1
 8011998:	6022      	streq	r2, [r4, #0]
 801199a:	602c      	str	r4, [r5, #0]
 801199c:	e7ec      	b.n	8011978 <_free_r+0x28>
 801199e:	461a      	mov	r2, r3
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	b10b      	cbz	r3, 80119a8 <_free_r+0x58>
 80119a4:	42a3      	cmp	r3, r4
 80119a6:	d9fa      	bls.n	801199e <_free_r+0x4e>
 80119a8:	6811      	ldr	r1, [r2, #0]
 80119aa:	1855      	adds	r5, r2, r1
 80119ac:	42a5      	cmp	r5, r4
 80119ae:	d10b      	bne.n	80119c8 <_free_r+0x78>
 80119b0:	6824      	ldr	r4, [r4, #0]
 80119b2:	4421      	add	r1, r4
 80119b4:	1854      	adds	r4, r2, r1
 80119b6:	42a3      	cmp	r3, r4
 80119b8:	6011      	str	r1, [r2, #0]
 80119ba:	d1dd      	bne.n	8011978 <_free_r+0x28>
 80119bc:	681c      	ldr	r4, [r3, #0]
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	6053      	str	r3, [r2, #4]
 80119c2:	4421      	add	r1, r4
 80119c4:	6011      	str	r1, [r2, #0]
 80119c6:	e7d7      	b.n	8011978 <_free_r+0x28>
 80119c8:	d902      	bls.n	80119d0 <_free_r+0x80>
 80119ca:	230c      	movs	r3, #12
 80119cc:	6003      	str	r3, [r0, #0]
 80119ce:	e7d3      	b.n	8011978 <_free_r+0x28>
 80119d0:	6825      	ldr	r5, [r4, #0]
 80119d2:	1961      	adds	r1, r4, r5
 80119d4:	428b      	cmp	r3, r1
 80119d6:	bf04      	itt	eq
 80119d8:	6819      	ldreq	r1, [r3, #0]
 80119da:	685b      	ldreq	r3, [r3, #4]
 80119dc:	6063      	str	r3, [r4, #4]
 80119de:	bf04      	itt	eq
 80119e0:	1949      	addeq	r1, r1, r5
 80119e2:	6021      	streq	r1, [r4, #0]
 80119e4:	6054      	str	r4, [r2, #4]
 80119e6:	e7c7      	b.n	8011978 <_free_r+0x28>
 80119e8:	b003      	add	sp, #12
 80119ea:	bd30      	pop	{r4, r5, pc}
 80119ec:	240007dc 	.word	0x240007dc

080119f0 <_malloc_r>:
 80119f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119f2:	1ccd      	adds	r5, r1, #3
 80119f4:	f025 0503 	bic.w	r5, r5, #3
 80119f8:	3508      	adds	r5, #8
 80119fa:	2d0c      	cmp	r5, #12
 80119fc:	bf38      	it	cc
 80119fe:	250c      	movcc	r5, #12
 8011a00:	2d00      	cmp	r5, #0
 8011a02:	4606      	mov	r6, r0
 8011a04:	db01      	blt.n	8011a0a <_malloc_r+0x1a>
 8011a06:	42a9      	cmp	r1, r5
 8011a08:	d903      	bls.n	8011a12 <_malloc_r+0x22>
 8011a0a:	230c      	movs	r3, #12
 8011a0c:	6033      	str	r3, [r6, #0]
 8011a0e:	2000      	movs	r0, #0
 8011a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a12:	f000 f899 	bl	8011b48 <__malloc_lock>
 8011a16:	4921      	ldr	r1, [pc, #132]	; (8011a9c <_malloc_r+0xac>)
 8011a18:	680a      	ldr	r2, [r1, #0]
 8011a1a:	4614      	mov	r4, r2
 8011a1c:	b99c      	cbnz	r4, 8011a46 <_malloc_r+0x56>
 8011a1e:	4f20      	ldr	r7, [pc, #128]	; (8011aa0 <_malloc_r+0xb0>)
 8011a20:	683b      	ldr	r3, [r7, #0]
 8011a22:	b923      	cbnz	r3, 8011a2e <_malloc_r+0x3e>
 8011a24:	4621      	mov	r1, r4
 8011a26:	4630      	mov	r0, r6
 8011a28:	f000 f83c 	bl	8011aa4 <_sbrk_r>
 8011a2c:	6038      	str	r0, [r7, #0]
 8011a2e:	4629      	mov	r1, r5
 8011a30:	4630      	mov	r0, r6
 8011a32:	f000 f837 	bl	8011aa4 <_sbrk_r>
 8011a36:	1c43      	adds	r3, r0, #1
 8011a38:	d123      	bne.n	8011a82 <_malloc_r+0x92>
 8011a3a:	230c      	movs	r3, #12
 8011a3c:	6033      	str	r3, [r6, #0]
 8011a3e:	4630      	mov	r0, r6
 8011a40:	f000 f888 	bl	8011b54 <__malloc_unlock>
 8011a44:	e7e3      	b.n	8011a0e <_malloc_r+0x1e>
 8011a46:	6823      	ldr	r3, [r4, #0]
 8011a48:	1b5b      	subs	r3, r3, r5
 8011a4a:	d417      	bmi.n	8011a7c <_malloc_r+0x8c>
 8011a4c:	2b0b      	cmp	r3, #11
 8011a4e:	d903      	bls.n	8011a58 <_malloc_r+0x68>
 8011a50:	6023      	str	r3, [r4, #0]
 8011a52:	441c      	add	r4, r3
 8011a54:	6025      	str	r5, [r4, #0]
 8011a56:	e004      	b.n	8011a62 <_malloc_r+0x72>
 8011a58:	6863      	ldr	r3, [r4, #4]
 8011a5a:	42a2      	cmp	r2, r4
 8011a5c:	bf0c      	ite	eq
 8011a5e:	600b      	streq	r3, [r1, #0]
 8011a60:	6053      	strne	r3, [r2, #4]
 8011a62:	4630      	mov	r0, r6
 8011a64:	f000 f876 	bl	8011b54 <__malloc_unlock>
 8011a68:	f104 000b 	add.w	r0, r4, #11
 8011a6c:	1d23      	adds	r3, r4, #4
 8011a6e:	f020 0007 	bic.w	r0, r0, #7
 8011a72:	1ac2      	subs	r2, r0, r3
 8011a74:	d0cc      	beq.n	8011a10 <_malloc_r+0x20>
 8011a76:	1a1b      	subs	r3, r3, r0
 8011a78:	50a3      	str	r3, [r4, r2]
 8011a7a:	e7c9      	b.n	8011a10 <_malloc_r+0x20>
 8011a7c:	4622      	mov	r2, r4
 8011a7e:	6864      	ldr	r4, [r4, #4]
 8011a80:	e7cc      	b.n	8011a1c <_malloc_r+0x2c>
 8011a82:	1cc4      	adds	r4, r0, #3
 8011a84:	f024 0403 	bic.w	r4, r4, #3
 8011a88:	42a0      	cmp	r0, r4
 8011a8a:	d0e3      	beq.n	8011a54 <_malloc_r+0x64>
 8011a8c:	1a21      	subs	r1, r4, r0
 8011a8e:	4630      	mov	r0, r6
 8011a90:	f000 f808 	bl	8011aa4 <_sbrk_r>
 8011a94:	3001      	adds	r0, #1
 8011a96:	d1dd      	bne.n	8011a54 <_malloc_r+0x64>
 8011a98:	e7cf      	b.n	8011a3a <_malloc_r+0x4a>
 8011a9a:	bf00      	nop
 8011a9c:	240007dc 	.word	0x240007dc
 8011aa0:	240007e0 	.word	0x240007e0

08011aa4 <_sbrk_r>:
 8011aa4:	b538      	push	{r3, r4, r5, lr}
 8011aa6:	4d06      	ldr	r5, [pc, #24]	; (8011ac0 <_sbrk_r+0x1c>)
 8011aa8:	2300      	movs	r3, #0
 8011aaa:	4604      	mov	r4, r0
 8011aac:	4608      	mov	r0, r1
 8011aae:	602b      	str	r3, [r5, #0]
 8011ab0:	f7f2 fb64 	bl	800417c <_sbrk>
 8011ab4:	1c43      	adds	r3, r0, #1
 8011ab6:	d102      	bne.n	8011abe <_sbrk_r+0x1a>
 8011ab8:	682b      	ldr	r3, [r5, #0]
 8011aba:	b103      	cbz	r3, 8011abe <_sbrk_r+0x1a>
 8011abc:	6023      	str	r3, [r4, #0]
 8011abe:	bd38      	pop	{r3, r4, r5, pc}
 8011ac0:	24000fe0 	.word	0x24000fe0

08011ac4 <__assert_func>:
 8011ac4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ac6:	4614      	mov	r4, r2
 8011ac8:	461a      	mov	r2, r3
 8011aca:	4b09      	ldr	r3, [pc, #36]	; (8011af0 <__assert_func+0x2c>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	4605      	mov	r5, r0
 8011ad0:	68d8      	ldr	r0, [r3, #12]
 8011ad2:	b14c      	cbz	r4, 8011ae8 <__assert_func+0x24>
 8011ad4:	4b07      	ldr	r3, [pc, #28]	; (8011af4 <__assert_func+0x30>)
 8011ad6:	9100      	str	r1, [sp, #0]
 8011ad8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011adc:	4906      	ldr	r1, [pc, #24]	; (8011af8 <__assert_func+0x34>)
 8011ade:	462b      	mov	r3, r5
 8011ae0:	f000 f80e 	bl	8011b00 <fiprintf>
 8011ae4:	f000 fa64 	bl	8011fb0 <abort>
 8011ae8:	4b04      	ldr	r3, [pc, #16]	; (8011afc <__assert_func+0x38>)
 8011aea:	461c      	mov	r4, r3
 8011aec:	e7f3      	b.n	8011ad6 <__assert_func+0x12>
 8011aee:	bf00      	nop
 8011af0:	2400004c 	.word	0x2400004c
 8011af4:	080142bc 	.word	0x080142bc
 8011af8:	080142c9 	.word	0x080142c9
 8011afc:	080142f7 	.word	0x080142f7

08011b00 <fiprintf>:
 8011b00:	b40e      	push	{r1, r2, r3}
 8011b02:	b503      	push	{r0, r1, lr}
 8011b04:	4601      	mov	r1, r0
 8011b06:	ab03      	add	r3, sp, #12
 8011b08:	4805      	ldr	r0, [pc, #20]	; (8011b20 <fiprintf+0x20>)
 8011b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011b0e:	6800      	ldr	r0, [r0, #0]
 8011b10:	9301      	str	r3, [sp, #4]
 8011b12:	f000 f84f 	bl	8011bb4 <_vfiprintf_r>
 8011b16:	b002      	add	sp, #8
 8011b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8011b1c:	b003      	add	sp, #12
 8011b1e:	4770      	bx	lr
 8011b20:	2400004c 	.word	0x2400004c

08011b24 <__ascii_mbtowc>:
 8011b24:	b082      	sub	sp, #8
 8011b26:	b901      	cbnz	r1, 8011b2a <__ascii_mbtowc+0x6>
 8011b28:	a901      	add	r1, sp, #4
 8011b2a:	b142      	cbz	r2, 8011b3e <__ascii_mbtowc+0x1a>
 8011b2c:	b14b      	cbz	r3, 8011b42 <__ascii_mbtowc+0x1e>
 8011b2e:	7813      	ldrb	r3, [r2, #0]
 8011b30:	600b      	str	r3, [r1, #0]
 8011b32:	7812      	ldrb	r2, [r2, #0]
 8011b34:	1e10      	subs	r0, r2, #0
 8011b36:	bf18      	it	ne
 8011b38:	2001      	movne	r0, #1
 8011b3a:	b002      	add	sp, #8
 8011b3c:	4770      	bx	lr
 8011b3e:	4610      	mov	r0, r2
 8011b40:	e7fb      	b.n	8011b3a <__ascii_mbtowc+0x16>
 8011b42:	f06f 0001 	mvn.w	r0, #1
 8011b46:	e7f8      	b.n	8011b3a <__ascii_mbtowc+0x16>

08011b48 <__malloc_lock>:
 8011b48:	4801      	ldr	r0, [pc, #4]	; (8011b50 <__malloc_lock+0x8>)
 8011b4a:	f000 bbf1 	b.w	8012330 <__retarget_lock_acquire_recursive>
 8011b4e:	bf00      	nop
 8011b50:	24000fe8 	.word	0x24000fe8

08011b54 <__malloc_unlock>:
 8011b54:	4801      	ldr	r0, [pc, #4]	; (8011b5c <__malloc_unlock+0x8>)
 8011b56:	f000 bbec 	b.w	8012332 <__retarget_lock_release_recursive>
 8011b5a:	bf00      	nop
 8011b5c:	24000fe8 	.word	0x24000fe8

08011b60 <__sfputc_r>:
 8011b60:	6893      	ldr	r3, [r2, #8]
 8011b62:	3b01      	subs	r3, #1
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	b410      	push	{r4}
 8011b68:	6093      	str	r3, [r2, #8]
 8011b6a:	da08      	bge.n	8011b7e <__sfputc_r+0x1e>
 8011b6c:	6994      	ldr	r4, [r2, #24]
 8011b6e:	42a3      	cmp	r3, r4
 8011b70:	db01      	blt.n	8011b76 <__sfputc_r+0x16>
 8011b72:	290a      	cmp	r1, #10
 8011b74:	d103      	bne.n	8011b7e <__sfputc_r+0x1e>
 8011b76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b7a:	f000 b94b 	b.w	8011e14 <__swbuf_r>
 8011b7e:	6813      	ldr	r3, [r2, #0]
 8011b80:	1c58      	adds	r0, r3, #1
 8011b82:	6010      	str	r0, [r2, #0]
 8011b84:	7019      	strb	r1, [r3, #0]
 8011b86:	4608      	mov	r0, r1
 8011b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011b8c:	4770      	bx	lr

08011b8e <__sfputs_r>:
 8011b8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b90:	4606      	mov	r6, r0
 8011b92:	460f      	mov	r7, r1
 8011b94:	4614      	mov	r4, r2
 8011b96:	18d5      	adds	r5, r2, r3
 8011b98:	42ac      	cmp	r4, r5
 8011b9a:	d101      	bne.n	8011ba0 <__sfputs_r+0x12>
 8011b9c:	2000      	movs	r0, #0
 8011b9e:	e007      	b.n	8011bb0 <__sfputs_r+0x22>
 8011ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ba4:	463a      	mov	r2, r7
 8011ba6:	4630      	mov	r0, r6
 8011ba8:	f7ff ffda 	bl	8011b60 <__sfputc_r>
 8011bac:	1c43      	adds	r3, r0, #1
 8011bae:	d1f3      	bne.n	8011b98 <__sfputs_r+0xa>
 8011bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011bb4 <_vfiprintf_r>:
 8011bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011bb8:	460d      	mov	r5, r1
 8011bba:	b09d      	sub	sp, #116	; 0x74
 8011bbc:	4614      	mov	r4, r2
 8011bbe:	4698      	mov	r8, r3
 8011bc0:	4606      	mov	r6, r0
 8011bc2:	b118      	cbz	r0, 8011bcc <_vfiprintf_r+0x18>
 8011bc4:	6983      	ldr	r3, [r0, #24]
 8011bc6:	b90b      	cbnz	r3, 8011bcc <_vfiprintf_r+0x18>
 8011bc8:	f000 fb14 	bl	80121f4 <__sinit>
 8011bcc:	4b89      	ldr	r3, [pc, #548]	; (8011df4 <_vfiprintf_r+0x240>)
 8011bce:	429d      	cmp	r5, r3
 8011bd0:	d11b      	bne.n	8011c0a <_vfiprintf_r+0x56>
 8011bd2:	6875      	ldr	r5, [r6, #4]
 8011bd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bd6:	07d9      	lsls	r1, r3, #31
 8011bd8:	d405      	bmi.n	8011be6 <_vfiprintf_r+0x32>
 8011bda:	89ab      	ldrh	r3, [r5, #12]
 8011bdc:	059a      	lsls	r2, r3, #22
 8011bde:	d402      	bmi.n	8011be6 <_vfiprintf_r+0x32>
 8011be0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011be2:	f000 fba5 	bl	8012330 <__retarget_lock_acquire_recursive>
 8011be6:	89ab      	ldrh	r3, [r5, #12]
 8011be8:	071b      	lsls	r3, r3, #28
 8011bea:	d501      	bpl.n	8011bf0 <_vfiprintf_r+0x3c>
 8011bec:	692b      	ldr	r3, [r5, #16]
 8011bee:	b9eb      	cbnz	r3, 8011c2c <_vfiprintf_r+0x78>
 8011bf0:	4629      	mov	r1, r5
 8011bf2:	4630      	mov	r0, r6
 8011bf4:	f000 f96e 	bl	8011ed4 <__swsetup_r>
 8011bf8:	b1c0      	cbz	r0, 8011c2c <_vfiprintf_r+0x78>
 8011bfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bfc:	07dc      	lsls	r4, r3, #31
 8011bfe:	d50e      	bpl.n	8011c1e <_vfiprintf_r+0x6a>
 8011c00:	f04f 30ff 	mov.w	r0, #4294967295
 8011c04:	b01d      	add	sp, #116	; 0x74
 8011c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c0a:	4b7b      	ldr	r3, [pc, #492]	; (8011df8 <_vfiprintf_r+0x244>)
 8011c0c:	429d      	cmp	r5, r3
 8011c0e:	d101      	bne.n	8011c14 <_vfiprintf_r+0x60>
 8011c10:	68b5      	ldr	r5, [r6, #8]
 8011c12:	e7df      	b.n	8011bd4 <_vfiprintf_r+0x20>
 8011c14:	4b79      	ldr	r3, [pc, #484]	; (8011dfc <_vfiprintf_r+0x248>)
 8011c16:	429d      	cmp	r5, r3
 8011c18:	bf08      	it	eq
 8011c1a:	68f5      	ldreq	r5, [r6, #12]
 8011c1c:	e7da      	b.n	8011bd4 <_vfiprintf_r+0x20>
 8011c1e:	89ab      	ldrh	r3, [r5, #12]
 8011c20:	0598      	lsls	r0, r3, #22
 8011c22:	d4ed      	bmi.n	8011c00 <_vfiprintf_r+0x4c>
 8011c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011c26:	f000 fb84 	bl	8012332 <__retarget_lock_release_recursive>
 8011c2a:	e7e9      	b.n	8011c00 <_vfiprintf_r+0x4c>
 8011c2c:	2300      	movs	r3, #0
 8011c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8011c30:	2320      	movs	r3, #32
 8011c32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011c36:	f8cd 800c 	str.w	r8, [sp, #12]
 8011c3a:	2330      	movs	r3, #48	; 0x30
 8011c3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011e00 <_vfiprintf_r+0x24c>
 8011c40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011c44:	f04f 0901 	mov.w	r9, #1
 8011c48:	4623      	mov	r3, r4
 8011c4a:	469a      	mov	sl, r3
 8011c4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c50:	b10a      	cbz	r2, 8011c56 <_vfiprintf_r+0xa2>
 8011c52:	2a25      	cmp	r2, #37	; 0x25
 8011c54:	d1f9      	bne.n	8011c4a <_vfiprintf_r+0x96>
 8011c56:	ebba 0b04 	subs.w	fp, sl, r4
 8011c5a:	d00b      	beq.n	8011c74 <_vfiprintf_r+0xc0>
 8011c5c:	465b      	mov	r3, fp
 8011c5e:	4622      	mov	r2, r4
 8011c60:	4629      	mov	r1, r5
 8011c62:	4630      	mov	r0, r6
 8011c64:	f7ff ff93 	bl	8011b8e <__sfputs_r>
 8011c68:	3001      	adds	r0, #1
 8011c6a:	f000 80aa 	beq.w	8011dc2 <_vfiprintf_r+0x20e>
 8011c6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c70:	445a      	add	r2, fp
 8011c72:	9209      	str	r2, [sp, #36]	; 0x24
 8011c74:	f89a 3000 	ldrb.w	r3, [sl]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	f000 80a2 	beq.w	8011dc2 <_vfiprintf_r+0x20e>
 8011c7e:	2300      	movs	r3, #0
 8011c80:	f04f 32ff 	mov.w	r2, #4294967295
 8011c84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c88:	f10a 0a01 	add.w	sl, sl, #1
 8011c8c:	9304      	str	r3, [sp, #16]
 8011c8e:	9307      	str	r3, [sp, #28]
 8011c90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c94:	931a      	str	r3, [sp, #104]	; 0x68
 8011c96:	4654      	mov	r4, sl
 8011c98:	2205      	movs	r2, #5
 8011c9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c9e:	4858      	ldr	r0, [pc, #352]	; (8011e00 <_vfiprintf_r+0x24c>)
 8011ca0:	f7ee fb26 	bl	80002f0 <memchr>
 8011ca4:	9a04      	ldr	r2, [sp, #16]
 8011ca6:	b9d8      	cbnz	r0, 8011ce0 <_vfiprintf_r+0x12c>
 8011ca8:	06d1      	lsls	r1, r2, #27
 8011caa:	bf44      	itt	mi
 8011cac:	2320      	movmi	r3, #32
 8011cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cb2:	0713      	lsls	r3, r2, #28
 8011cb4:	bf44      	itt	mi
 8011cb6:	232b      	movmi	r3, #43	; 0x2b
 8011cb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011cbc:	f89a 3000 	ldrb.w	r3, [sl]
 8011cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8011cc2:	d015      	beq.n	8011cf0 <_vfiprintf_r+0x13c>
 8011cc4:	9a07      	ldr	r2, [sp, #28]
 8011cc6:	4654      	mov	r4, sl
 8011cc8:	2000      	movs	r0, #0
 8011cca:	f04f 0c0a 	mov.w	ip, #10
 8011cce:	4621      	mov	r1, r4
 8011cd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011cd4:	3b30      	subs	r3, #48	; 0x30
 8011cd6:	2b09      	cmp	r3, #9
 8011cd8:	d94e      	bls.n	8011d78 <_vfiprintf_r+0x1c4>
 8011cda:	b1b0      	cbz	r0, 8011d0a <_vfiprintf_r+0x156>
 8011cdc:	9207      	str	r2, [sp, #28]
 8011cde:	e014      	b.n	8011d0a <_vfiprintf_r+0x156>
 8011ce0:	eba0 0308 	sub.w	r3, r0, r8
 8011ce4:	fa09 f303 	lsl.w	r3, r9, r3
 8011ce8:	4313      	orrs	r3, r2
 8011cea:	9304      	str	r3, [sp, #16]
 8011cec:	46a2      	mov	sl, r4
 8011cee:	e7d2      	b.n	8011c96 <_vfiprintf_r+0xe2>
 8011cf0:	9b03      	ldr	r3, [sp, #12]
 8011cf2:	1d19      	adds	r1, r3, #4
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	9103      	str	r1, [sp, #12]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	bfbb      	ittet	lt
 8011cfc:	425b      	neglt	r3, r3
 8011cfe:	f042 0202 	orrlt.w	r2, r2, #2
 8011d02:	9307      	strge	r3, [sp, #28]
 8011d04:	9307      	strlt	r3, [sp, #28]
 8011d06:	bfb8      	it	lt
 8011d08:	9204      	strlt	r2, [sp, #16]
 8011d0a:	7823      	ldrb	r3, [r4, #0]
 8011d0c:	2b2e      	cmp	r3, #46	; 0x2e
 8011d0e:	d10c      	bne.n	8011d2a <_vfiprintf_r+0x176>
 8011d10:	7863      	ldrb	r3, [r4, #1]
 8011d12:	2b2a      	cmp	r3, #42	; 0x2a
 8011d14:	d135      	bne.n	8011d82 <_vfiprintf_r+0x1ce>
 8011d16:	9b03      	ldr	r3, [sp, #12]
 8011d18:	1d1a      	adds	r2, r3, #4
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	9203      	str	r2, [sp, #12]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	bfb8      	it	lt
 8011d22:	f04f 33ff 	movlt.w	r3, #4294967295
 8011d26:	3402      	adds	r4, #2
 8011d28:	9305      	str	r3, [sp, #20]
 8011d2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011e10 <_vfiprintf_r+0x25c>
 8011d2e:	7821      	ldrb	r1, [r4, #0]
 8011d30:	2203      	movs	r2, #3
 8011d32:	4650      	mov	r0, sl
 8011d34:	f7ee fadc 	bl	80002f0 <memchr>
 8011d38:	b140      	cbz	r0, 8011d4c <_vfiprintf_r+0x198>
 8011d3a:	2340      	movs	r3, #64	; 0x40
 8011d3c:	eba0 000a 	sub.w	r0, r0, sl
 8011d40:	fa03 f000 	lsl.w	r0, r3, r0
 8011d44:	9b04      	ldr	r3, [sp, #16]
 8011d46:	4303      	orrs	r3, r0
 8011d48:	3401      	adds	r4, #1
 8011d4a:	9304      	str	r3, [sp, #16]
 8011d4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011d50:	482c      	ldr	r0, [pc, #176]	; (8011e04 <_vfiprintf_r+0x250>)
 8011d52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011d56:	2206      	movs	r2, #6
 8011d58:	f7ee faca 	bl	80002f0 <memchr>
 8011d5c:	2800      	cmp	r0, #0
 8011d5e:	d03f      	beq.n	8011de0 <_vfiprintf_r+0x22c>
 8011d60:	4b29      	ldr	r3, [pc, #164]	; (8011e08 <_vfiprintf_r+0x254>)
 8011d62:	bb1b      	cbnz	r3, 8011dac <_vfiprintf_r+0x1f8>
 8011d64:	9b03      	ldr	r3, [sp, #12]
 8011d66:	3307      	adds	r3, #7
 8011d68:	f023 0307 	bic.w	r3, r3, #7
 8011d6c:	3308      	adds	r3, #8
 8011d6e:	9303      	str	r3, [sp, #12]
 8011d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d72:	443b      	add	r3, r7
 8011d74:	9309      	str	r3, [sp, #36]	; 0x24
 8011d76:	e767      	b.n	8011c48 <_vfiprintf_r+0x94>
 8011d78:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d7c:	460c      	mov	r4, r1
 8011d7e:	2001      	movs	r0, #1
 8011d80:	e7a5      	b.n	8011cce <_vfiprintf_r+0x11a>
 8011d82:	2300      	movs	r3, #0
 8011d84:	3401      	adds	r4, #1
 8011d86:	9305      	str	r3, [sp, #20]
 8011d88:	4619      	mov	r1, r3
 8011d8a:	f04f 0c0a 	mov.w	ip, #10
 8011d8e:	4620      	mov	r0, r4
 8011d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d94:	3a30      	subs	r2, #48	; 0x30
 8011d96:	2a09      	cmp	r2, #9
 8011d98:	d903      	bls.n	8011da2 <_vfiprintf_r+0x1ee>
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d0c5      	beq.n	8011d2a <_vfiprintf_r+0x176>
 8011d9e:	9105      	str	r1, [sp, #20]
 8011da0:	e7c3      	b.n	8011d2a <_vfiprintf_r+0x176>
 8011da2:	fb0c 2101 	mla	r1, ip, r1, r2
 8011da6:	4604      	mov	r4, r0
 8011da8:	2301      	movs	r3, #1
 8011daa:	e7f0      	b.n	8011d8e <_vfiprintf_r+0x1da>
 8011dac:	ab03      	add	r3, sp, #12
 8011dae:	9300      	str	r3, [sp, #0]
 8011db0:	462a      	mov	r2, r5
 8011db2:	4b16      	ldr	r3, [pc, #88]	; (8011e0c <_vfiprintf_r+0x258>)
 8011db4:	a904      	add	r1, sp, #16
 8011db6:	4630      	mov	r0, r6
 8011db8:	f7fe f86e 	bl	800fe98 <_printf_float>
 8011dbc:	4607      	mov	r7, r0
 8011dbe:	1c78      	adds	r0, r7, #1
 8011dc0:	d1d6      	bne.n	8011d70 <_vfiprintf_r+0x1bc>
 8011dc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011dc4:	07d9      	lsls	r1, r3, #31
 8011dc6:	d405      	bmi.n	8011dd4 <_vfiprintf_r+0x220>
 8011dc8:	89ab      	ldrh	r3, [r5, #12]
 8011dca:	059a      	lsls	r2, r3, #22
 8011dcc:	d402      	bmi.n	8011dd4 <_vfiprintf_r+0x220>
 8011dce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011dd0:	f000 faaf 	bl	8012332 <__retarget_lock_release_recursive>
 8011dd4:	89ab      	ldrh	r3, [r5, #12]
 8011dd6:	065b      	lsls	r3, r3, #25
 8011dd8:	f53f af12 	bmi.w	8011c00 <_vfiprintf_r+0x4c>
 8011ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011dde:	e711      	b.n	8011c04 <_vfiprintf_r+0x50>
 8011de0:	ab03      	add	r3, sp, #12
 8011de2:	9300      	str	r3, [sp, #0]
 8011de4:	462a      	mov	r2, r5
 8011de6:	4b09      	ldr	r3, [pc, #36]	; (8011e0c <_vfiprintf_r+0x258>)
 8011de8:	a904      	add	r1, sp, #16
 8011dea:	4630      	mov	r0, r6
 8011dec:	f7fe fae0 	bl	80103b0 <_printf_i>
 8011df0:	e7e4      	b.n	8011dbc <_vfiprintf_r+0x208>
 8011df2:	bf00      	nop
 8011df4:	08014434 	.word	0x08014434
 8011df8:	08014454 	.word	0x08014454
 8011dfc:	08014414 	.word	0x08014414
 8011e00:	08014302 	.word	0x08014302
 8011e04:	0801430c 	.word	0x0801430c
 8011e08:	0800fe99 	.word	0x0800fe99
 8011e0c:	08011b8f 	.word	0x08011b8f
 8011e10:	08014308 	.word	0x08014308

08011e14 <__swbuf_r>:
 8011e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e16:	460e      	mov	r6, r1
 8011e18:	4614      	mov	r4, r2
 8011e1a:	4605      	mov	r5, r0
 8011e1c:	b118      	cbz	r0, 8011e26 <__swbuf_r+0x12>
 8011e1e:	6983      	ldr	r3, [r0, #24]
 8011e20:	b90b      	cbnz	r3, 8011e26 <__swbuf_r+0x12>
 8011e22:	f000 f9e7 	bl	80121f4 <__sinit>
 8011e26:	4b21      	ldr	r3, [pc, #132]	; (8011eac <__swbuf_r+0x98>)
 8011e28:	429c      	cmp	r4, r3
 8011e2a:	d12b      	bne.n	8011e84 <__swbuf_r+0x70>
 8011e2c:	686c      	ldr	r4, [r5, #4]
 8011e2e:	69a3      	ldr	r3, [r4, #24]
 8011e30:	60a3      	str	r3, [r4, #8]
 8011e32:	89a3      	ldrh	r3, [r4, #12]
 8011e34:	071a      	lsls	r2, r3, #28
 8011e36:	d52f      	bpl.n	8011e98 <__swbuf_r+0x84>
 8011e38:	6923      	ldr	r3, [r4, #16]
 8011e3a:	b36b      	cbz	r3, 8011e98 <__swbuf_r+0x84>
 8011e3c:	6923      	ldr	r3, [r4, #16]
 8011e3e:	6820      	ldr	r0, [r4, #0]
 8011e40:	1ac0      	subs	r0, r0, r3
 8011e42:	6963      	ldr	r3, [r4, #20]
 8011e44:	b2f6      	uxtb	r6, r6
 8011e46:	4283      	cmp	r3, r0
 8011e48:	4637      	mov	r7, r6
 8011e4a:	dc04      	bgt.n	8011e56 <__swbuf_r+0x42>
 8011e4c:	4621      	mov	r1, r4
 8011e4e:	4628      	mov	r0, r5
 8011e50:	f000 f93c 	bl	80120cc <_fflush_r>
 8011e54:	bb30      	cbnz	r0, 8011ea4 <__swbuf_r+0x90>
 8011e56:	68a3      	ldr	r3, [r4, #8]
 8011e58:	3b01      	subs	r3, #1
 8011e5a:	60a3      	str	r3, [r4, #8]
 8011e5c:	6823      	ldr	r3, [r4, #0]
 8011e5e:	1c5a      	adds	r2, r3, #1
 8011e60:	6022      	str	r2, [r4, #0]
 8011e62:	701e      	strb	r6, [r3, #0]
 8011e64:	6963      	ldr	r3, [r4, #20]
 8011e66:	3001      	adds	r0, #1
 8011e68:	4283      	cmp	r3, r0
 8011e6a:	d004      	beq.n	8011e76 <__swbuf_r+0x62>
 8011e6c:	89a3      	ldrh	r3, [r4, #12]
 8011e6e:	07db      	lsls	r3, r3, #31
 8011e70:	d506      	bpl.n	8011e80 <__swbuf_r+0x6c>
 8011e72:	2e0a      	cmp	r6, #10
 8011e74:	d104      	bne.n	8011e80 <__swbuf_r+0x6c>
 8011e76:	4621      	mov	r1, r4
 8011e78:	4628      	mov	r0, r5
 8011e7a:	f000 f927 	bl	80120cc <_fflush_r>
 8011e7e:	b988      	cbnz	r0, 8011ea4 <__swbuf_r+0x90>
 8011e80:	4638      	mov	r0, r7
 8011e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011e84:	4b0a      	ldr	r3, [pc, #40]	; (8011eb0 <__swbuf_r+0x9c>)
 8011e86:	429c      	cmp	r4, r3
 8011e88:	d101      	bne.n	8011e8e <__swbuf_r+0x7a>
 8011e8a:	68ac      	ldr	r4, [r5, #8]
 8011e8c:	e7cf      	b.n	8011e2e <__swbuf_r+0x1a>
 8011e8e:	4b09      	ldr	r3, [pc, #36]	; (8011eb4 <__swbuf_r+0xa0>)
 8011e90:	429c      	cmp	r4, r3
 8011e92:	bf08      	it	eq
 8011e94:	68ec      	ldreq	r4, [r5, #12]
 8011e96:	e7ca      	b.n	8011e2e <__swbuf_r+0x1a>
 8011e98:	4621      	mov	r1, r4
 8011e9a:	4628      	mov	r0, r5
 8011e9c:	f000 f81a 	bl	8011ed4 <__swsetup_r>
 8011ea0:	2800      	cmp	r0, #0
 8011ea2:	d0cb      	beq.n	8011e3c <__swbuf_r+0x28>
 8011ea4:	f04f 37ff 	mov.w	r7, #4294967295
 8011ea8:	e7ea      	b.n	8011e80 <__swbuf_r+0x6c>
 8011eaa:	bf00      	nop
 8011eac:	08014434 	.word	0x08014434
 8011eb0:	08014454 	.word	0x08014454
 8011eb4:	08014414 	.word	0x08014414

08011eb8 <__ascii_wctomb>:
 8011eb8:	b149      	cbz	r1, 8011ece <__ascii_wctomb+0x16>
 8011eba:	2aff      	cmp	r2, #255	; 0xff
 8011ebc:	bf85      	ittet	hi
 8011ebe:	238a      	movhi	r3, #138	; 0x8a
 8011ec0:	6003      	strhi	r3, [r0, #0]
 8011ec2:	700a      	strbls	r2, [r1, #0]
 8011ec4:	f04f 30ff 	movhi.w	r0, #4294967295
 8011ec8:	bf98      	it	ls
 8011eca:	2001      	movls	r0, #1
 8011ecc:	4770      	bx	lr
 8011ece:	4608      	mov	r0, r1
 8011ed0:	4770      	bx	lr
	...

08011ed4 <__swsetup_r>:
 8011ed4:	4b32      	ldr	r3, [pc, #200]	; (8011fa0 <__swsetup_r+0xcc>)
 8011ed6:	b570      	push	{r4, r5, r6, lr}
 8011ed8:	681d      	ldr	r5, [r3, #0]
 8011eda:	4606      	mov	r6, r0
 8011edc:	460c      	mov	r4, r1
 8011ede:	b125      	cbz	r5, 8011eea <__swsetup_r+0x16>
 8011ee0:	69ab      	ldr	r3, [r5, #24]
 8011ee2:	b913      	cbnz	r3, 8011eea <__swsetup_r+0x16>
 8011ee4:	4628      	mov	r0, r5
 8011ee6:	f000 f985 	bl	80121f4 <__sinit>
 8011eea:	4b2e      	ldr	r3, [pc, #184]	; (8011fa4 <__swsetup_r+0xd0>)
 8011eec:	429c      	cmp	r4, r3
 8011eee:	d10f      	bne.n	8011f10 <__swsetup_r+0x3c>
 8011ef0:	686c      	ldr	r4, [r5, #4]
 8011ef2:	89a3      	ldrh	r3, [r4, #12]
 8011ef4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011ef8:	0719      	lsls	r1, r3, #28
 8011efa:	d42c      	bmi.n	8011f56 <__swsetup_r+0x82>
 8011efc:	06dd      	lsls	r5, r3, #27
 8011efe:	d411      	bmi.n	8011f24 <__swsetup_r+0x50>
 8011f00:	2309      	movs	r3, #9
 8011f02:	6033      	str	r3, [r6, #0]
 8011f04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011f08:	81a3      	strh	r3, [r4, #12]
 8011f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8011f0e:	e03e      	b.n	8011f8e <__swsetup_r+0xba>
 8011f10:	4b25      	ldr	r3, [pc, #148]	; (8011fa8 <__swsetup_r+0xd4>)
 8011f12:	429c      	cmp	r4, r3
 8011f14:	d101      	bne.n	8011f1a <__swsetup_r+0x46>
 8011f16:	68ac      	ldr	r4, [r5, #8]
 8011f18:	e7eb      	b.n	8011ef2 <__swsetup_r+0x1e>
 8011f1a:	4b24      	ldr	r3, [pc, #144]	; (8011fac <__swsetup_r+0xd8>)
 8011f1c:	429c      	cmp	r4, r3
 8011f1e:	bf08      	it	eq
 8011f20:	68ec      	ldreq	r4, [r5, #12]
 8011f22:	e7e6      	b.n	8011ef2 <__swsetup_r+0x1e>
 8011f24:	0758      	lsls	r0, r3, #29
 8011f26:	d512      	bpl.n	8011f4e <__swsetup_r+0x7a>
 8011f28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f2a:	b141      	cbz	r1, 8011f3e <__swsetup_r+0x6a>
 8011f2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011f30:	4299      	cmp	r1, r3
 8011f32:	d002      	beq.n	8011f3a <__swsetup_r+0x66>
 8011f34:	4630      	mov	r0, r6
 8011f36:	f7ff fd0b 	bl	8011950 <_free_r>
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	6363      	str	r3, [r4, #52]	; 0x34
 8011f3e:	89a3      	ldrh	r3, [r4, #12]
 8011f40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011f44:	81a3      	strh	r3, [r4, #12]
 8011f46:	2300      	movs	r3, #0
 8011f48:	6063      	str	r3, [r4, #4]
 8011f4a:	6923      	ldr	r3, [r4, #16]
 8011f4c:	6023      	str	r3, [r4, #0]
 8011f4e:	89a3      	ldrh	r3, [r4, #12]
 8011f50:	f043 0308 	orr.w	r3, r3, #8
 8011f54:	81a3      	strh	r3, [r4, #12]
 8011f56:	6923      	ldr	r3, [r4, #16]
 8011f58:	b94b      	cbnz	r3, 8011f6e <__swsetup_r+0x9a>
 8011f5a:	89a3      	ldrh	r3, [r4, #12]
 8011f5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011f60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f64:	d003      	beq.n	8011f6e <__swsetup_r+0x9a>
 8011f66:	4621      	mov	r1, r4
 8011f68:	4630      	mov	r0, r6
 8011f6a:	f000 fa07 	bl	801237c <__smakebuf_r>
 8011f6e:	89a0      	ldrh	r0, [r4, #12]
 8011f70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011f74:	f010 0301 	ands.w	r3, r0, #1
 8011f78:	d00a      	beq.n	8011f90 <__swsetup_r+0xbc>
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	60a3      	str	r3, [r4, #8]
 8011f7e:	6963      	ldr	r3, [r4, #20]
 8011f80:	425b      	negs	r3, r3
 8011f82:	61a3      	str	r3, [r4, #24]
 8011f84:	6923      	ldr	r3, [r4, #16]
 8011f86:	b943      	cbnz	r3, 8011f9a <__swsetup_r+0xc6>
 8011f88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011f8c:	d1ba      	bne.n	8011f04 <__swsetup_r+0x30>
 8011f8e:	bd70      	pop	{r4, r5, r6, pc}
 8011f90:	0781      	lsls	r1, r0, #30
 8011f92:	bf58      	it	pl
 8011f94:	6963      	ldrpl	r3, [r4, #20]
 8011f96:	60a3      	str	r3, [r4, #8]
 8011f98:	e7f4      	b.n	8011f84 <__swsetup_r+0xb0>
 8011f9a:	2000      	movs	r0, #0
 8011f9c:	e7f7      	b.n	8011f8e <__swsetup_r+0xba>
 8011f9e:	bf00      	nop
 8011fa0:	2400004c 	.word	0x2400004c
 8011fa4:	08014434 	.word	0x08014434
 8011fa8:	08014454 	.word	0x08014454
 8011fac:	08014414 	.word	0x08014414

08011fb0 <abort>:
 8011fb0:	b508      	push	{r3, lr}
 8011fb2:	2006      	movs	r0, #6
 8011fb4:	f000 fa4a 	bl	801244c <raise>
 8011fb8:	2001      	movs	r0, #1
 8011fba:	f7f2 f867 	bl	800408c <_exit>
	...

08011fc0 <__sflush_r>:
 8011fc0:	898a      	ldrh	r2, [r1, #12]
 8011fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fc6:	4605      	mov	r5, r0
 8011fc8:	0710      	lsls	r0, r2, #28
 8011fca:	460c      	mov	r4, r1
 8011fcc:	d458      	bmi.n	8012080 <__sflush_r+0xc0>
 8011fce:	684b      	ldr	r3, [r1, #4]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	dc05      	bgt.n	8011fe0 <__sflush_r+0x20>
 8011fd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	dc02      	bgt.n	8011fe0 <__sflush_r+0x20>
 8011fda:	2000      	movs	r0, #0
 8011fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011fe0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011fe2:	2e00      	cmp	r6, #0
 8011fe4:	d0f9      	beq.n	8011fda <__sflush_r+0x1a>
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011fec:	682f      	ldr	r7, [r5, #0]
 8011fee:	602b      	str	r3, [r5, #0]
 8011ff0:	d032      	beq.n	8012058 <__sflush_r+0x98>
 8011ff2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011ff4:	89a3      	ldrh	r3, [r4, #12]
 8011ff6:	075a      	lsls	r2, r3, #29
 8011ff8:	d505      	bpl.n	8012006 <__sflush_r+0x46>
 8011ffa:	6863      	ldr	r3, [r4, #4]
 8011ffc:	1ac0      	subs	r0, r0, r3
 8011ffe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012000:	b10b      	cbz	r3, 8012006 <__sflush_r+0x46>
 8012002:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012004:	1ac0      	subs	r0, r0, r3
 8012006:	2300      	movs	r3, #0
 8012008:	4602      	mov	r2, r0
 801200a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801200c:	6a21      	ldr	r1, [r4, #32]
 801200e:	4628      	mov	r0, r5
 8012010:	47b0      	blx	r6
 8012012:	1c43      	adds	r3, r0, #1
 8012014:	89a3      	ldrh	r3, [r4, #12]
 8012016:	d106      	bne.n	8012026 <__sflush_r+0x66>
 8012018:	6829      	ldr	r1, [r5, #0]
 801201a:	291d      	cmp	r1, #29
 801201c:	d82c      	bhi.n	8012078 <__sflush_r+0xb8>
 801201e:	4a2a      	ldr	r2, [pc, #168]	; (80120c8 <__sflush_r+0x108>)
 8012020:	40ca      	lsrs	r2, r1
 8012022:	07d6      	lsls	r6, r2, #31
 8012024:	d528      	bpl.n	8012078 <__sflush_r+0xb8>
 8012026:	2200      	movs	r2, #0
 8012028:	6062      	str	r2, [r4, #4]
 801202a:	04d9      	lsls	r1, r3, #19
 801202c:	6922      	ldr	r2, [r4, #16]
 801202e:	6022      	str	r2, [r4, #0]
 8012030:	d504      	bpl.n	801203c <__sflush_r+0x7c>
 8012032:	1c42      	adds	r2, r0, #1
 8012034:	d101      	bne.n	801203a <__sflush_r+0x7a>
 8012036:	682b      	ldr	r3, [r5, #0]
 8012038:	b903      	cbnz	r3, 801203c <__sflush_r+0x7c>
 801203a:	6560      	str	r0, [r4, #84]	; 0x54
 801203c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801203e:	602f      	str	r7, [r5, #0]
 8012040:	2900      	cmp	r1, #0
 8012042:	d0ca      	beq.n	8011fda <__sflush_r+0x1a>
 8012044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012048:	4299      	cmp	r1, r3
 801204a:	d002      	beq.n	8012052 <__sflush_r+0x92>
 801204c:	4628      	mov	r0, r5
 801204e:	f7ff fc7f 	bl	8011950 <_free_r>
 8012052:	2000      	movs	r0, #0
 8012054:	6360      	str	r0, [r4, #52]	; 0x34
 8012056:	e7c1      	b.n	8011fdc <__sflush_r+0x1c>
 8012058:	6a21      	ldr	r1, [r4, #32]
 801205a:	2301      	movs	r3, #1
 801205c:	4628      	mov	r0, r5
 801205e:	47b0      	blx	r6
 8012060:	1c41      	adds	r1, r0, #1
 8012062:	d1c7      	bne.n	8011ff4 <__sflush_r+0x34>
 8012064:	682b      	ldr	r3, [r5, #0]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d0c4      	beq.n	8011ff4 <__sflush_r+0x34>
 801206a:	2b1d      	cmp	r3, #29
 801206c:	d001      	beq.n	8012072 <__sflush_r+0xb2>
 801206e:	2b16      	cmp	r3, #22
 8012070:	d101      	bne.n	8012076 <__sflush_r+0xb6>
 8012072:	602f      	str	r7, [r5, #0]
 8012074:	e7b1      	b.n	8011fda <__sflush_r+0x1a>
 8012076:	89a3      	ldrh	r3, [r4, #12]
 8012078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801207c:	81a3      	strh	r3, [r4, #12]
 801207e:	e7ad      	b.n	8011fdc <__sflush_r+0x1c>
 8012080:	690f      	ldr	r7, [r1, #16]
 8012082:	2f00      	cmp	r7, #0
 8012084:	d0a9      	beq.n	8011fda <__sflush_r+0x1a>
 8012086:	0793      	lsls	r3, r2, #30
 8012088:	680e      	ldr	r6, [r1, #0]
 801208a:	bf08      	it	eq
 801208c:	694b      	ldreq	r3, [r1, #20]
 801208e:	600f      	str	r7, [r1, #0]
 8012090:	bf18      	it	ne
 8012092:	2300      	movne	r3, #0
 8012094:	eba6 0807 	sub.w	r8, r6, r7
 8012098:	608b      	str	r3, [r1, #8]
 801209a:	f1b8 0f00 	cmp.w	r8, #0
 801209e:	dd9c      	ble.n	8011fda <__sflush_r+0x1a>
 80120a0:	6a21      	ldr	r1, [r4, #32]
 80120a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80120a4:	4643      	mov	r3, r8
 80120a6:	463a      	mov	r2, r7
 80120a8:	4628      	mov	r0, r5
 80120aa:	47b0      	blx	r6
 80120ac:	2800      	cmp	r0, #0
 80120ae:	dc06      	bgt.n	80120be <__sflush_r+0xfe>
 80120b0:	89a3      	ldrh	r3, [r4, #12]
 80120b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120b6:	81a3      	strh	r3, [r4, #12]
 80120b8:	f04f 30ff 	mov.w	r0, #4294967295
 80120bc:	e78e      	b.n	8011fdc <__sflush_r+0x1c>
 80120be:	4407      	add	r7, r0
 80120c0:	eba8 0800 	sub.w	r8, r8, r0
 80120c4:	e7e9      	b.n	801209a <__sflush_r+0xda>
 80120c6:	bf00      	nop
 80120c8:	20400001 	.word	0x20400001

080120cc <_fflush_r>:
 80120cc:	b538      	push	{r3, r4, r5, lr}
 80120ce:	690b      	ldr	r3, [r1, #16]
 80120d0:	4605      	mov	r5, r0
 80120d2:	460c      	mov	r4, r1
 80120d4:	b913      	cbnz	r3, 80120dc <_fflush_r+0x10>
 80120d6:	2500      	movs	r5, #0
 80120d8:	4628      	mov	r0, r5
 80120da:	bd38      	pop	{r3, r4, r5, pc}
 80120dc:	b118      	cbz	r0, 80120e6 <_fflush_r+0x1a>
 80120de:	6983      	ldr	r3, [r0, #24]
 80120e0:	b90b      	cbnz	r3, 80120e6 <_fflush_r+0x1a>
 80120e2:	f000 f887 	bl	80121f4 <__sinit>
 80120e6:	4b14      	ldr	r3, [pc, #80]	; (8012138 <_fflush_r+0x6c>)
 80120e8:	429c      	cmp	r4, r3
 80120ea:	d11b      	bne.n	8012124 <_fflush_r+0x58>
 80120ec:	686c      	ldr	r4, [r5, #4]
 80120ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d0ef      	beq.n	80120d6 <_fflush_r+0xa>
 80120f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80120f8:	07d0      	lsls	r0, r2, #31
 80120fa:	d404      	bmi.n	8012106 <_fflush_r+0x3a>
 80120fc:	0599      	lsls	r1, r3, #22
 80120fe:	d402      	bmi.n	8012106 <_fflush_r+0x3a>
 8012100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012102:	f000 f915 	bl	8012330 <__retarget_lock_acquire_recursive>
 8012106:	4628      	mov	r0, r5
 8012108:	4621      	mov	r1, r4
 801210a:	f7ff ff59 	bl	8011fc0 <__sflush_r>
 801210e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012110:	07da      	lsls	r2, r3, #31
 8012112:	4605      	mov	r5, r0
 8012114:	d4e0      	bmi.n	80120d8 <_fflush_r+0xc>
 8012116:	89a3      	ldrh	r3, [r4, #12]
 8012118:	059b      	lsls	r3, r3, #22
 801211a:	d4dd      	bmi.n	80120d8 <_fflush_r+0xc>
 801211c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801211e:	f000 f908 	bl	8012332 <__retarget_lock_release_recursive>
 8012122:	e7d9      	b.n	80120d8 <_fflush_r+0xc>
 8012124:	4b05      	ldr	r3, [pc, #20]	; (801213c <_fflush_r+0x70>)
 8012126:	429c      	cmp	r4, r3
 8012128:	d101      	bne.n	801212e <_fflush_r+0x62>
 801212a:	68ac      	ldr	r4, [r5, #8]
 801212c:	e7df      	b.n	80120ee <_fflush_r+0x22>
 801212e:	4b04      	ldr	r3, [pc, #16]	; (8012140 <_fflush_r+0x74>)
 8012130:	429c      	cmp	r4, r3
 8012132:	bf08      	it	eq
 8012134:	68ec      	ldreq	r4, [r5, #12]
 8012136:	e7da      	b.n	80120ee <_fflush_r+0x22>
 8012138:	08014434 	.word	0x08014434
 801213c:	08014454 	.word	0x08014454
 8012140:	08014414 	.word	0x08014414

08012144 <std>:
 8012144:	2300      	movs	r3, #0
 8012146:	b510      	push	{r4, lr}
 8012148:	4604      	mov	r4, r0
 801214a:	e9c0 3300 	strd	r3, r3, [r0]
 801214e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012152:	6083      	str	r3, [r0, #8]
 8012154:	8181      	strh	r1, [r0, #12]
 8012156:	6643      	str	r3, [r0, #100]	; 0x64
 8012158:	81c2      	strh	r2, [r0, #14]
 801215a:	6183      	str	r3, [r0, #24]
 801215c:	4619      	mov	r1, r3
 801215e:	2208      	movs	r2, #8
 8012160:	305c      	adds	r0, #92	; 0x5c
 8012162:	f7fd fe01 	bl	800fd68 <memset>
 8012166:	4b05      	ldr	r3, [pc, #20]	; (801217c <std+0x38>)
 8012168:	6263      	str	r3, [r4, #36]	; 0x24
 801216a:	4b05      	ldr	r3, [pc, #20]	; (8012180 <std+0x3c>)
 801216c:	62a3      	str	r3, [r4, #40]	; 0x28
 801216e:	4b05      	ldr	r3, [pc, #20]	; (8012184 <std+0x40>)
 8012170:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012172:	4b05      	ldr	r3, [pc, #20]	; (8012188 <std+0x44>)
 8012174:	6224      	str	r4, [r4, #32]
 8012176:	6323      	str	r3, [r4, #48]	; 0x30
 8012178:	bd10      	pop	{r4, pc}
 801217a:	bf00      	nop
 801217c:	08012485 	.word	0x08012485
 8012180:	080124a7 	.word	0x080124a7
 8012184:	080124df 	.word	0x080124df
 8012188:	08012503 	.word	0x08012503

0801218c <_cleanup_r>:
 801218c:	4901      	ldr	r1, [pc, #4]	; (8012194 <_cleanup_r+0x8>)
 801218e:	f000 b8af 	b.w	80122f0 <_fwalk_reent>
 8012192:	bf00      	nop
 8012194:	080120cd 	.word	0x080120cd

08012198 <__sfmoreglue>:
 8012198:	b570      	push	{r4, r5, r6, lr}
 801219a:	1e4a      	subs	r2, r1, #1
 801219c:	2568      	movs	r5, #104	; 0x68
 801219e:	4355      	muls	r5, r2
 80121a0:	460e      	mov	r6, r1
 80121a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80121a6:	f7ff fc23 	bl	80119f0 <_malloc_r>
 80121aa:	4604      	mov	r4, r0
 80121ac:	b140      	cbz	r0, 80121c0 <__sfmoreglue+0x28>
 80121ae:	2100      	movs	r1, #0
 80121b0:	e9c0 1600 	strd	r1, r6, [r0]
 80121b4:	300c      	adds	r0, #12
 80121b6:	60a0      	str	r0, [r4, #8]
 80121b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80121bc:	f7fd fdd4 	bl	800fd68 <memset>
 80121c0:	4620      	mov	r0, r4
 80121c2:	bd70      	pop	{r4, r5, r6, pc}

080121c4 <__sfp_lock_acquire>:
 80121c4:	4801      	ldr	r0, [pc, #4]	; (80121cc <__sfp_lock_acquire+0x8>)
 80121c6:	f000 b8b3 	b.w	8012330 <__retarget_lock_acquire_recursive>
 80121ca:	bf00      	nop
 80121cc:	24000fec 	.word	0x24000fec

080121d0 <__sfp_lock_release>:
 80121d0:	4801      	ldr	r0, [pc, #4]	; (80121d8 <__sfp_lock_release+0x8>)
 80121d2:	f000 b8ae 	b.w	8012332 <__retarget_lock_release_recursive>
 80121d6:	bf00      	nop
 80121d8:	24000fec 	.word	0x24000fec

080121dc <__sinit_lock_acquire>:
 80121dc:	4801      	ldr	r0, [pc, #4]	; (80121e4 <__sinit_lock_acquire+0x8>)
 80121de:	f000 b8a7 	b.w	8012330 <__retarget_lock_acquire_recursive>
 80121e2:	bf00      	nop
 80121e4:	24000fe7 	.word	0x24000fe7

080121e8 <__sinit_lock_release>:
 80121e8:	4801      	ldr	r0, [pc, #4]	; (80121f0 <__sinit_lock_release+0x8>)
 80121ea:	f000 b8a2 	b.w	8012332 <__retarget_lock_release_recursive>
 80121ee:	bf00      	nop
 80121f0:	24000fe7 	.word	0x24000fe7

080121f4 <__sinit>:
 80121f4:	b510      	push	{r4, lr}
 80121f6:	4604      	mov	r4, r0
 80121f8:	f7ff fff0 	bl	80121dc <__sinit_lock_acquire>
 80121fc:	69a3      	ldr	r3, [r4, #24]
 80121fe:	b11b      	cbz	r3, 8012208 <__sinit+0x14>
 8012200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012204:	f7ff bff0 	b.w	80121e8 <__sinit_lock_release>
 8012208:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801220c:	6523      	str	r3, [r4, #80]	; 0x50
 801220e:	4b13      	ldr	r3, [pc, #76]	; (801225c <__sinit+0x68>)
 8012210:	4a13      	ldr	r2, [pc, #76]	; (8012260 <__sinit+0x6c>)
 8012212:	681b      	ldr	r3, [r3, #0]
 8012214:	62a2      	str	r2, [r4, #40]	; 0x28
 8012216:	42a3      	cmp	r3, r4
 8012218:	bf04      	itt	eq
 801221a:	2301      	moveq	r3, #1
 801221c:	61a3      	streq	r3, [r4, #24]
 801221e:	4620      	mov	r0, r4
 8012220:	f000 f820 	bl	8012264 <__sfp>
 8012224:	6060      	str	r0, [r4, #4]
 8012226:	4620      	mov	r0, r4
 8012228:	f000 f81c 	bl	8012264 <__sfp>
 801222c:	60a0      	str	r0, [r4, #8]
 801222e:	4620      	mov	r0, r4
 8012230:	f000 f818 	bl	8012264 <__sfp>
 8012234:	2200      	movs	r2, #0
 8012236:	60e0      	str	r0, [r4, #12]
 8012238:	2104      	movs	r1, #4
 801223a:	6860      	ldr	r0, [r4, #4]
 801223c:	f7ff ff82 	bl	8012144 <std>
 8012240:	68a0      	ldr	r0, [r4, #8]
 8012242:	2201      	movs	r2, #1
 8012244:	2109      	movs	r1, #9
 8012246:	f7ff ff7d 	bl	8012144 <std>
 801224a:	68e0      	ldr	r0, [r4, #12]
 801224c:	2202      	movs	r2, #2
 801224e:	2112      	movs	r1, #18
 8012250:	f7ff ff78 	bl	8012144 <std>
 8012254:	2301      	movs	r3, #1
 8012256:	61a3      	str	r3, [r4, #24]
 8012258:	e7d2      	b.n	8012200 <__sinit+0xc>
 801225a:	bf00      	nop
 801225c:	08014090 	.word	0x08014090
 8012260:	0801218d 	.word	0x0801218d

08012264 <__sfp>:
 8012264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012266:	4607      	mov	r7, r0
 8012268:	f7ff ffac 	bl	80121c4 <__sfp_lock_acquire>
 801226c:	4b1e      	ldr	r3, [pc, #120]	; (80122e8 <__sfp+0x84>)
 801226e:	681e      	ldr	r6, [r3, #0]
 8012270:	69b3      	ldr	r3, [r6, #24]
 8012272:	b913      	cbnz	r3, 801227a <__sfp+0x16>
 8012274:	4630      	mov	r0, r6
 8012276:	f7ff ffbd 	bl	80121f4 <__sinit>
 801227a:	3648      	adds	r6, #72	; 0x48
 801227c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012280:	3b01      	subs	r3, #1
 8012282:	d503      	bpl.n	801228c <__sfp+0x28>
 8012284:	6833      	ldr	r3, [r6, #0]
 8012286:	b30b      	cbz	r3, 80122cc <__sfp+0x68>
 8012288:	6836      	ldr	r6, [r6, #0]
 801228a:	e7f7      	b.n	801227c <__sfp+0x18>
 801228c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012290:	b9d5      	cbnz	r5, 80122c8 <__sfp+0x64>
 8012292:	4b16      	ldr	r3, [pc, #88]	; (80122ec <__sfp+0x88>)
 8012294:	60e3      	str	r3, [r4, #12]
 8012296:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801229a:	6665      	str	r5, [r4, #100]	; 0x64
 801229c:	f000 f847 	bl	801232e <__retarget_lock_init_recursive>
 80122a0:	f7ff ff96 	bl	80121d0 <__sfp_lock_release>
 80122a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80122a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80122ac:	6025      	str	r5, [r4, #0]
 80122ae:	61a5      	str	r5, [r4, #24]
 80122b0:	2208      	movs	r2, #8
 80122b2:	4629      	mov	r1, r5
 80122b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80122b8:	f7fd fd56 	bl	800fd68 <memset>
 80122bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80122c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80122c4:	4620      	mov	r0, r4
 80122c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80122c8:	3468      	adds	r4, #104	; 0x68
 80122ca:	e7d9      	b.n	8012280 <__sfp+0x1c>
 80122cc:	2104      	movs	r1, #4
 80122ce:	4638      	mov	r0, r7
 80122d0:	f7ff ff62 	bl	8012198 <__sfmoreglue>
 80122d4:	4604      	mov	r4, r0
 80122d6:	6030      	str	r0, [r6, #0]
 80122d8:	2800      	cmp	r0, #0
 80122da:	d1d5      	bne.n	8012288 <__sfp+0x24>
 80122dc:	f7ff ff78 	bl	80121d0 <__sfp_lock_release>
 80122e0:	230c      	movs	r3, #12
 80122e2:	603b      	str	r3, [r7, #0]
 80122e4:	e7ee      	b.n	80122c4 <__sfp+0x60>
 80122e6:	bf00      	nop
 80122e8:	08014090 	.word	0x08014090
 80122ec:	ffff0001 	.word	0xffff0001

080122f0 <_fwalk_reent>:
 80122f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122f4:	4606      	mov	r6, r0
 80122f6:	4688      	mov	r8, r1
 80122f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80122fc:	2700      	movs	r7, #0
 80122fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012302:	f1b9 0901 	subs.w	r9, r9, #1
 8012306:	d505      	bpl.n	8012314 <_fwalk_reent+0x24>
 8012308:	6824      	ldr	r4, [r4, #0]
 801230a:	2c00      	cmp	r4, #0
 801230c:	d1f7      	bne.n	80122fe <_fwalk_reent+0xe>
 801230e:	4638      	mov	r0, r7
 8012310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012314:	89ab      	ldrh	r3, [r5, #12]
 8012316:	2b01      	cmp	r3, #1
 8012318:	d907      	bls.n	801232a <_fwalk_reent+0x3a>
 801231a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801231e:	3301      	adds	r3, #1
 8012320:	d003      	beq.n	801232a <_fwalk_reent+0x3a>
 8012322:	4629      	mov	r1, r5
 8012324:	4630      	mov	r0, r6
 8012326:	47c0      	blx	r8
 8012328:	4307      	orrs	r7, r0
 801232a:	3568      	adds	r5, #104	; 0x68
 801232c:	e7e9      	b.n	8012302 <_fwalk_reent+0x12>

0801232e <__retarget_lock_init_recursive>:
 801232e:	4770      	bx	lr

08012330 <__retarget_lock_acquire_recursive>:
 8012330:	4770      	bx	lr

08012332 <__retarget_lock_release_recursive>:
 8012332:	4770      	bx	lr

08012334 <__swhatbuf_r>:
 8012334:	b570      	push	{r4, r5, r6, lr}
 8012336:	460e      	mov	r6, r1
 8012338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801233c:	2900      	cmp	r1, #0
 801233e:	b096      	sub	sp, #88	; 0x58
 8012340:	4614      	mov	r4, r2
 8012342:	461d      	mov	r5, r3
 8012344:	da07      	bge.n	8012356 <__swhatbuf_r+0x22>
 8012346:	2300      	movs	r3, #0
 8012348:	602b      	str	r3, [r5, #0]
 801234a:	89b3      	ldrh	r3, [r6, #12]
 801234c:	061a      	lsls	r2, r3, #24
 801234e:	d410      	bmi.n	8012372 <__swhatbuf_r+0x3e>
 8012350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012354:	e00e      	b.n	8012374 <__swhatbuf_r+0x40>
 8012356:	466a      	mov	r2, sp
 8012358:	f000 f8fa 	bl	8012550 <_fstat_r>
 801235c:	2800      	cmp	r0, #0
 801235e:	dbf2      	blt.n	8012346 <__swhatbuf_r+0x12>
 8012360:	9a01      	ldr	r2, [sp, #4]
 8012362:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012366:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801236a:	425a      	negs	r2, r3
 801236c:	415a      	adcs	r2, r3
 801236e:	602a      	str	r2, [r5, #0]
 8012370:	e7ee      	b.n	8012350 <__swhatbuf_r+0x1c>
 8012372:	2340      	movs	r3, #64	; 0x40
 8012374:	2000      	movs	r0, #0
 8012376:	6023      	str	r3, [r4, #0]
 8012378:	b016      	add	sp, #88	; 0x58
 801237a:	bd70      	pop	{r4, r5, r6, pc}

0801237c <__smakebuf_r>:
 801237c:	898b      	ldrh	r3, [r1, #12]
 801237e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012380:	079d      	lsls	r5, r3, #30
 8012382:	4606      	mov	r6, r0
 8012384:	460c      	mov	r4, r1
 8012386:	d507      	bpl.n	8012398 <__smakebuf_r+0x1c>
 8012388:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801238c:	6023      	str	r3, [r4, #0]
 801238e:	6123      	str	r3, [r4, #16]
 8012390:	2301      	movs	r3, #1
 8012392:	6163      	str	r3, [r4, #20]
 8012394:	b002      	add	sp, #8
 8012396:	bd70      	pop	{r4, r5, r6, pc}
 8012398:	ab01      	add	r3, sp, #4
 801239a:	466a      	mov	r2, sp
 801239c:	f7ff ffca 	bl	8012334 <__swhatbuf_r>
 80123a0:	9900      	ldr	r1, [sp, #0]
 80123a2:	4605      	mov	r5, r0
 80123a4:	4630      	mov	r0, r6
 80123a6:	f7ff fb23 	bl	80119f0 <_malloc_r>
 80123aa:	b948      	cbnz	r0, 80123c0 <__smakebuf_r+0x44>
 80123ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123b0:	059a      	lsls	r2, r3, #22
 80123b2:	d4ef      	bmi.n	8012394 <__smakebuf_r+0x18>
 80123b4:	f023 0303 	bic.w	r3, r3, #3
 80123b8:	f043 0302 	orr.w	r3, r3, #2
 80123bc:	81a3      	strh	r3, [r4, #12]
 80123be:	e7e3      	b.n	8012388 <__smakebuf_r+0xc>
 80123c0:	4b0d      	ldr	r3, [pc, #52]	; (80123f8 <__smakebuf_r+0x7c>)
 80123c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80123c4:	89a3      	ldrh	r3, [r4, #12]
 80123c6:	6020      	str	r0, [r4, #0]
 80123c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80123cc:	81a3      	strh	r3, [r4, #12]
 80123ce:	9b00      	ldr	r3, [sp, #0]
 80123d0:	6163      	str	r3, [r4, #20]
 80123d2:	9b01      	ldr	r3, [sp, #4]
 80123d4:	6120      	str	r0, [r4, #16]
 80123d6:	b15b      	cbz	r3, 80123f0 <__smakebuf_r+0x74>
 80123d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80123dc:	4630      	mov	r0, r6
 80123de:	f000 f8c9 	bl	8012574 <_isatty_r>
 80123e2:	b128      	cbz	r0, 80123f0 <__smakebuf_r+0x74>
 80123e4:	89a3      	ldrh	r3, [r4, #12]
 80123e6:	f023 0303 	bic.w	r3, r3, #3
 80123ea:	f043 0301 	orr.w	r3, r3, #1
 80123ee:	81a3      	strh	r3, [r4, #12]
 80123f0:	89a0      	ldrh	r0, [r4, #12]
 80123f2:	4305      	orrs	r5, r0
 80123f4:	81a5      	strh	r5, [r4, #12]
 80123f6:	e7cd      	b.n	8012394 <__smakebuf_r+0x18>
 80123f8:	0801218d 	.word	0x0801218d

080123fc <_raise_r>:
 80123fc:	291f      	cmp	r1, #31
 80123fe:	b538      	push	{r3, r4, r5, lr}
 8012400:	4604      	mov	r4, r0
 8012402:	460d      	mov	r5, r1
 8012404:	d904      	bls.n	8012410 <_raise_r+0x14>
 8012406:	2316      	movs	r3, #22
 8012408:	6003      	str	r3, [r0, #0]
 801240a:	f04f 30ff 	mov.w	r0, #4294967295
 801240e:	bd38      	pop	{r3, r4, r5, pc}
 8012410:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012412:	b112      	cbz	r2, 801241a <_raise_r+0x1e>
 8012414:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012418:	b94b      	cbnz	r3, 801242e <_raise_r+0x32>
 801241a:	4620      	mov	r0, r4
 801241c:	f000 f830 	bl	8012480 <_getpid_r>
 8012420:	462a      	mov	r2, r5
 8012422:	4601      	mov	r1, r0
 8012424:	4620      	mov	r0, r4
 8012426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801242a:	f000 b817 	b.w	801245c <_kill_r>
 801242e:	2b01      	cmp	r3, #1
 8012430:	d00a      	beq.n	8012448 <_raise_r+0x4c>
 8012432:	1c59      	adds	r1, r3, #1
 8012434:	d103      	bne.n	801243e <_raise_r+0x42>
 8012436:	2316      	movs	r3, #22
 8012438:	6003      	str	r3, [r0, #0]
 801243a:	2001      	movs	r0, #1
 801243c:	e7e7      	b.n	801240e <_raise_r+0x12>
 801243e:	2400      	movs	r4, #0
 8012440:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012444:	4628      	mov	r0, r5
 8012446:	4798      	blx	r3
 8012448:	2000      	movs	r0, #0
 801244a:	e7e0      	b.n	801240e <_raise_r+0x12>

0801244c <raise>:
 801244c:	4b02      	ldr	r3, [pc, #8]	; (8012458 <raise+0xc>)
 801244e:	4601      	mov	r1, r0
 8012450:	6818      	ldr	r0, [r3, #0]
 8012452:	f7ff bfd3 	b.w	80123fc <_raise_r>
 8012456:	bf00      	nop
 8012458:	2400004c 	.word	0x2400004c

0801245c <_kill_r>:
 801245c:	b538      	push	{r3, r4, r5, lr}
 801245e:	4d07      	ldr	r5, [pc, #28]	; (801247c <_kill_r+0x20>)
 8012460:	2300      	movs	r3, #0
 8012462:	4604      	mov	r4, r0
 8012464:	4608      	mov	r0, r1
 8012466:	4611      	mov	r1, r2
 8012468:	602b      	str	r3, [r5, #0]
 801246a:	f7f1 fdff 	bl	800406c <_kill>
 801246e:	1c43      	adds	r3, r0, #1
 8012470:	d102      	bne.n	8012478 <_kill_r+0x1c>
 8012472:	682b      	ldr	r3, [r5, #0]
 8012474:	b103      	cbz	r3, 8012478 <_kill_r+0x1c>
 8012476:	6023      	str	r3, [r4, #0]
 8012478:	bd38      	pop	{r3, r4, r5, pc}
 801247a:	bf00      	nop
 801247c:	24000fe0 	.word	0x24000fe0

08012480 <_getpid_r>:
 8012480:	f7f1 bdec 	b.w	800405c <_getpid>

08012484 <__sread>:
 8012484:	b510      	push	{r4, lr}
 8012486:	460c      	mov	r4, r1
 8012488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801248c:	f000 f894 	bl	80125b8 <_read_r>
 8012490:	2800      	cmp	r0, #0
 8012492:	bfab      	itete	ge
 8012494:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012496:	89a3      	ldrhlt	r3, [r4, #12]
 8012498:	181b      	addge	r3, r3, r0
 801249a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801249e:	bfac      	ite	ge
 80124a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80124a2:	81a3      	strhlt	r3, [r4, #12]
 80124a4:	bd10      	pop	{r4, pc}

080124a6 <__swrite>:
 80124a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124aa:	461f      	mov	r7, r3
 80124ac:	898b      	ldrh	r3, [r1, #12]
 80124ae:	05db      	lsls	r3, r3, #23
 80124b0:	4605      	mov	r5, r0
 80124b2:	460c      	mov	r4, r1
 80124b4:	4616      	mov	r6, r2
 80124b6:	d505      	bpl.n	80124c4 <__swrite+0x1e>
 80124b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124bc:	2302      	movs	r3, #2
 80124be:	2200      	movs	r2, #0
 80124c0:	f000 f868 	bl	8012594 <_lseek_r>
 80124c4:	89a3      	ldrh	r3, [r4, #12]
 80124c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80124ce:	81a3      	strh	r3, [r4, #12]
 80124d0:	4632      	mov	r2, r6
 80124d2:	463b      	mov	r3, r7
 80124d4:	4628      	mov	r0, r5
 80124d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80124da:	f000 b817 	b.w	801250c <_write_r>

080124de <__sseek>:
 80124de:	b510      	push	{r4, lr}
 80124e0:	460c      	mov	r4, r1
 80124e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124e6:	f000 f855 	bl	8012594 <_lseek_r>
 80124ea:	1c43      	adds	r3, r0, #1
 80124ec:	89a3      	ldrh	r3, [r4, #12]
 80124ee:	bf15      	itete	ne
 80124f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80124f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80124f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80124fa:	81a3      	strheq	r3, [r4, #12]
 80124fc:	bf18      	it	ne
 80124fe:	81a3      	strhne	r3, [r4, #12]
 8012500:	bd10      	pop	{r4, pc}

08012502 <__sclose>:
 8012502:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012506:	f000 b813 	b.w	8012530 <_close_r>
	...

0801250c <_write_r>:
 801250c:	b538      	push	{r3, r4, r5, lr}
 801250e:	4d07      	ldr	r5, [pc, #28]	; (801252c <_write_r+0x20>)
 8012510:	4604      	mov	r4, r0
 8012512:	4608      	mov	r0, r1
 8012514:	4611      	mov	r1, r2
 8012516:	2200      	movs	r2, #0
 8012518:	602a      	str	r2, [r5, #0]
 801251a:	461a      	mov	r2, r3
 801251c:	f7f1 fddd 	bl	80040da <_write>
 8012520:	1c43      	adds	r3, r0, #1
 8012522:	d102      	bne.n	801252a <_write_r+0x1e>
 8012524:	682b      	ldr	r3, [r5, #0]
 8012526:	b103      	cbz	r3, 801252a <_write_r+0x1e>
 8012528:	6023      	str	r3, [r4, #0]
 801252a:	bd38      	pop	{r3, r4, r5, pc}
 801252c:	24000fe0 	.word	0x24000fe0

08012530 <_close_r>:
 8012530:	b538      	push	{r3, r4, r5, lr}
 8012532:	4d06      	ldr	r5, [pc, #24]	; (801254c <_close_r+0x1c>)
 8012534:	2300      	movs	r3, #0
 8012536:	4604      	mov	r4, r0
 8012538:	4608      	mov	r0, r1
 801253a:	602b      	str	r3, [r5, #0]
 801253c:	f7f1 fde9 	bl	8004112 <_close>
 8012540:	1c43      	adds	r3, r0, #1
 8012542:	d102      	bne.n	801254a <_close_r+0x1a>
 8012544:	682b      	ldr	r3, [r5, #0]
 8012546:	b103      	cbz	r3, 801254a <_close_r+0x1a>
 8012548:	6023      	str	r3, [r4, #0]
 801254a:	bd38      	pop	{r3, r4, r5, pc}
 801254c:	24000fe0 	.word	0x24000fe0

08012550 <_fstat_r>:
 8012550:	b538      	push	{r3, r4, r5, lr}
 8012552:	4d07      	ldr	r5, [pc, #28]	; (8012570 <_fstat_r+0x20>)
 8012554:	2300      	movs	r3, #0
 8012556:	4604      	mov	r4, r0
 8012558:	4608      	mov	r0, r1
 801255a:	4611      	mov	r1, r2
 801255c:	602b      	str	r3, [r5, #0]
 801255e:	f7f1 fde4 	bl	800412a <_fstat>
 8012562:	1c43      	adds	r3, r0, #1
 8012564:	d102      	bne.n	801256c <_fstat_r+0x1c>
 8012566:	682b      	ldr	r3, [r5, #0]
 8012568:	b103      	cbz	r3, 801256c <_fstat_r+0x1c>
 801256a:	6023      	str	r3, [r4, #0]
 801256c:	bd38      	pop	{r3, r4, r5, pc}
 801256e:	bf00      	nop
 8012570:	24000fe0 	.word	0x24000fe0

08012574 <_isatty_r>:
 8012574:	b538      	push	{r3, r4, r5, lr}
 8012576:	4d06      	ldr	r5, [pc, #24]	; (8012590 <_isatty_r+0x1c>)
 8012578:	2300      	movs	r3, #0
 801257a:	4604      	mov	r4, r0
 801257c:	4608      	mov	r0, r1
 801257e:	602b      	str	r3, [r5, #0]
 8012580:	f7f1 fde3 	bl	800414a <_isatty>
 8012584:	1c43      	adds	r3, r0, #1
 8012586:	d102      	bne.n	801258e <_isatty_r+0x1a>
 8012588:	682b      	ldr	r3, [r5, #0]
 801258a:	b103      	cbz	r3, 801258e <_isatty_r+0x1a>
 801258c:	6023      	str	r3, [r4, #0]
 801258e:	bd38      	pop	{r3, r4, r5, pc}
 8012590:	24000fe0 	.word	0x24000fe0

08012594 <_lseek_r>:
 8012594:	b538      	push	{r3, r4, r5, lr}
 8012596:	4d07      	ldr	r5, [pc, #28]	; (80125b4 <_lseek_r+0x20>)
 8012598:	4604      	mov	r4, r0
 801259a:	4608      	mov	r0, r1
 801259c:	4611      	mov	r1, r2
 801259e:	2200      	movs	r2, #0
 80125a0:	602a      	str	r2, [r5, #0]
 80125a2:	461a      	mov	r2, r3
 80125a4:	f7f1 fddc 	bl	8004160 <_lseek>
 80125a8:	1c43      	adds	r3, r0, #1
 80125aa:	d102      	bne.n	80125b2 <_lseek_r+0x1e>
 80125ac:	682b      	ldr	r3, [r5, #0]
 80125ae:	b103      	cbz	r3, 80125b2 <_lseek_r+0x1e>
 80125b0:	6023      	str	r3, [r4, #0]
 80125b2:	bd38      	pop	{r3, r4, r5, pc}
 80125b4:	24000fe0 	.word	0x24000fe0

080125b8 <_read_r>:
 80125b8:	b538      	push	{r3, r4, r5, lr}
 80125ba:	4d07      	ldr	r5, [pc, #28]	; (80125d8 <_read_r+0x20>)
 80125bc:	4604      	mov	r4, r0
 80125be:	4608      	mov	r0, r1
 80125c0:	4611      	mov	r1, r2
 80125c2:	2200      	movs	r2, #0
 80125c4:	602a      	str	r2, [r5, #0]
 80125c6:	461a      	mov	r2, r3
 80125c8:	f7f1 fd6a 	bl	80040a0 <_read>
 80125cc:	1c43      	adds	r3, r0, #1
 80125ce:	d102      	bne.n	80125d6 <_read_r+0x1e>
 80125d0:	682b      	ldr	r3, [r5, #0]
 80125d2:	b103      	cbz	r3, 80125d6 <_read_r+0x1e>
 80125d4:	6023      	str	r3, [r4, #0]
 80125d6:	bd38      	pop	{r3, r4, r5, pc}
 80125d8:	24000fe0 	.word	0x24000fe0

080125dc <_init>:
 80125dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125de:	bf00      	nop
 80125e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125e2:	bc08      	pop	{r3}
 80125e4:	469e      	mov	lr, r3
 80125e6:	4770      	bx	lr

080125e8 <_fini>:
 80125e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80125ea:	bf00      	nop
 80125ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80125ee:	bc08      	pop	{r3}
 80125f0:	469e      	mov	lr, r3
 80125f2:	4770      	bx	lr
